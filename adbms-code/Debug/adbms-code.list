
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010320  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080104b0  080104b0  000114b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c98  08010c98  000122ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010c98  08010c98  00011c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ca0  08010ca0  000122ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ca0  08010ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ca4  08010ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08010ca8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122ec  2**0
                  CONTENTS
 10 .bss          00002280  200002ec  200002ec  000122ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000256c  2000256c  000122ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff54  00000000  00000000  0001231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f08  00000000  00000000  00032270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00037178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001336  00000000  00000000  00038a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a8e  00000000  00000000  00039db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021790  00000000  00000000  00060844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d71f1  00000000  00000000  00081fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001591c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bfc  00000000  00000000  00159208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00160e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010498 	.word	0x08010498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	08010498 	.word	0x08010498

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a8 	b.w	8000fb0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcb7 	bl	80005f8 <__aeabi_dmul>
 8000c8a:	f000 f993 	bl	8000fb4 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc38 	bl	8000504 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcae 	bl	80005f8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf0 	bl	8000288 <__aeabi_dsub>
 8000ca8:	f000 f984 	bl	8000fb4 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001004:	2300      	movs	r3, #0
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	e019      	b.n	800103e <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b29b      	uxth	r3, r3
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4053      	eors	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	490b      	ldr	r1, [pc, #44]	@ (8001058 <Pec15_Calc+0x64>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3e1      	bcc.n	800100a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	080106d8 	.word	0x080106d8

0800105c <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800106a:	2310      	movs	r3, #16
 800106c:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800106e:	238f      	movs	r3, #143	@ 0x8f
 8001070:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
 8001076:	e024      	b.n	80010c2 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	4053      	eors	r3, r2
 8001088:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800108a:	2308      	movs	r3, #8
 800108c:	753b      	strb	r3, [r7, #20]
 800108e:	e012      	b.n	80010b6 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800109a:	8afb      	ldrh	r3, [r7, #22]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	4053      	eors	r3, r2
 80010a6:	82fb      	strh	r3, [r7, #22]
 80010a8:	e002      	b.n	80010b0 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	753b      	strb	r3, [r7, #20]
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dcd6      	bgt.n	8001078 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010ee:	2306      	movs	r3, #6
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	e012      	b.n	800111a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001104:	8afa      	ldrh	r2, [r7, #22]
 8001106:	8a7b      	ldrh	r3, [r7, #18]
 8001108:	4053      	eors	r3, r2
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	e002      	b.n	8001114 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001114:	7d3b      	ldrb	r3, [r7, #20]
 8001116:	3b01      	subs	r3, #1
 8001118:	753b      	strb	r3, [r7, #20]
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e9      	bne.n	80010f4 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29b      	uxth	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 8001142:	230c      	movs	r3, #12
 8001144:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800114e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	a314      	add	r3, pc, #80	@ (adr r3, 80011b0 <Set_UnderOver_Voltage_Threshold+0x78>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb73 	bl	800084c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b01      	subs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 80011a2:	89bb      	ldrh	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	30553261 	.word	0x30553261
 80011b4:	3f63a92a 	.word	0x3f63a92a

080011b8 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <ADBMS_getVoltage+0x40>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	30553261 	.word	0x30553261
 80011fc:	3f23a92a 	.word	0x3f23a92a

08001200 <ADBMS_Init>:

void ADBMS_Init(adbms6830_ICs *ICs, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	807b      	strh	r3, [r7, #2]
    ICs->hspi           = hspi;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	601a      	str	r2, [r3, #0]
    ICs->csb_pinBank    = csb_pinBank;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    ICs->csb_pin        = csb_pin;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	811a      	strh	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <ADBMS_Set_Config_A>:


void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e0f7      	b.n	800142c <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	b259      	sxtb	r1, r3
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b25b      	sxtb	r3, r3
 800127a:	430b      	orrs	r3, r1
 800127c:	b259      	sxtb	r1, r3
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1899      	adds	r1, r3, r2
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	3301      	adds	r3, #1
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	784a      	ldrb	r2, [r1, #1]
 80012b4:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	430b      	orrs	r3, r1
 80012f4:	b259      	sxtb	r1, r3
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	430b      	orrs	r3, r1
 8001316:	b259      	sxtb	r1, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001342:	b299      	uxth	r1, r3
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3303      	adds	r3, #3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800136e:	b29b      	uxth	r3, r3
 8001370:	121b      	asrs	r3, r3, #8
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	3304      	adds	r3, #4
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f001 0203 	and.w	r2, r1, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	430b      	orrs	r3, r1
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b25b      	sxtb	r3, r3
 800140e:	430b      	orrs	r3, r1
 8001410:	b259      	sxtb	r1, r3
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	3305      	adds	r3, #5
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f67f af04 	bls.w	800123c <ADBMS_Set_Config_A+0x10>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e09b      	b.n	800158a <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	b299      	uxth	r1, r3
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	b29b      	uxth	r3, r3
 8001486:	b25b      	sxtb	r3, r3
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	b25a      	sxtb	r2, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	b29b      	uxth	r3, r3
 800149c:	121b      	asrs	r3, r3, #8
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b259      	sxtb	r1, r3
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	1119      	asrs	r1, r3, #4
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3302      	adds	r3, #2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	440b      	add	r3, r1
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b259      	sxtb	r1, r3
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3303      	adds	r3, #3
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	88d9      	ldrh	r1, [r3, #6]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3304      	adds	r3, #4
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b299      	uxth	r1, r3
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	3305      	adds	r3, #5
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b01      	cmp	r3, #1
 800158e:	f67f af60 	bls.w	8001452 <ADBMS_Set_Config_B+0x10>
    }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	7138      	strb	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015bc:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 80015d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d4:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	801a      	strh	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <ADBMS_Set_ADSV>:

void ADBMS_Set_ADSV(adsv_ adsv, uint16_t *adsv_cmd_buffer)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	7138      	strb	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    *adsv_cmd_buffer = (0x1 << 8)
                        | ((adsv.cont && 0x1) << 7)
 800162e:	793b      	ldrb	r3, [r7, #4]
 8001630:	b21b      	sxth	r3, r3
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	b21b      	sxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	b21b      	sxth	r3, r3
                        | (0x3 << 5)
 800163a:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 800163e:	b21a      	sxth	r2, r3
                        | ((adsv.dcp && 0x1) << 4)
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	b21b      	sxth	r3, r3
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b21b      	sxth	r3, r3
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
                        | (0x1 << 3)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
                        | (adsv.ow && 0x3);
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
    *adsv_cmd_buffer = (0x1 << 8)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	801a      	strh	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <ADBMS_Set_ADAX>:

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	7138      	strb	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21b      	sxth	r3, r3
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	b21b      	sxth	r3, r3
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 80016b2:	793a      	ldrb	r2, [r7, #4]
 80016b4:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d001      	beq.n	80016c2 <ADBMS_Set_ADAX+0x40>
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	e000      	b.n	80016c4 <ADBMS_Set_ADAX+0x42>
 80016c2:	2200      	movs	r2, #0
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <ADBMS_Pack_CMD>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

ADBMS_Pack_CMD(uint16_t tx_cmd, uint8_t *spi_tx_dataBuf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fc69 	bl	8000ff4 <Pec15_Calc>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3302      	adds	r3, #2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3303      	adds	r3, #3
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <ADBMS_Pack_Write_Data_RegGrp>:

ADBMS_Pack_Write_Data_RegGrp(uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	81fb      	strh	r3, [r7, #14]

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);

    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffcc 	bl	80016f8 <ADBMS_Pack_CMD>

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 8001760:	2302      	movs	r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	e04d      	b.n	8001802 <ADBMS_Pack_Write_Data_RegGrp+0xba>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 8001766:	2300      	movs	r3, #0
 8001768:	75bb      	strb	r3, [r7, #22]
 800176a:	e01b      	b.n	80017a4 <ADBMS_Pack_Write_Data_RegGrp+0x5c>
            spi_tx_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	f1c3 0202 	rsb	r2, r3, #2
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	461a      	mov	r2, r3
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	441a      	add	r2, r3
 8001786:	7dbb      	ldrb	r3, [r7, #22]
 8001788:	1d19      	adds	r1, r3, #4
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	f1c3 0302 	rsb	r3, r3, #2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	4619      	mov	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	440b      	add	r3, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 800179e:	7dbb      	ldrb	r3, [r7, #22]
 80017a0:	3301      	adds	r3, #1
 80017a2:	75bb      	strb	r3, [r7, #22]
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d9e0      	bls.n	800176c <ADBMS_Pack_Write_Data_RegGrp+0x24>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	f1c3 0202 	rsb	r2, r3, #2
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc4a 	bl	800105c <Pec10_Calc>
 80017c8:	4603      	mov	r3, r0
 80017ca:	82bb      	strh	r3, [r7, #20]
        spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	f1c3 0302 	rsb	r3, r3, #2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	330a      	adds	r3, #10
 80017dc:	4619      	mov	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	440b      	add	r3, r1
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
        spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	f1c3 0302 	rsb	r3, r3, #2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	330b      	adds	r3, #11
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	8aba      	ldrh	r2, [r7, #20]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	3b01      	subs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ae      	bne.n	8001766 <ADBMS_Pack_Write_Data_RegGrp+0x1e>
    }
}
 8001808:	bf00      	nop
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <ADBMS_Process_Read_Data_RegGrp>:

bool ADBMS_Process_Read_Data_RegGrp(uint8_t *rx_dataBuf_raw, uint8_t *dataBuf)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    // Move Rx ptr to skip over data during transmit phase 
    uint8_t *rx_dataBuf = rx_dataBuf_raw + CMD_LEN + PEC_LEN;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	613b      	str	r3, [r7, #16]

    bool pec_error = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001826:	2300      	movs	r3, #0
 8001828:	75bb      	strb	r3, [r7, #22]
 800182a:	e051      	b.n	80018d0 <ADBMS_Process_Read_Data_RegGrp+0xbe>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800182c:	2300      	movs	r3, #0
 800182e:	757b      	strb	r3, [r7, #21]
 8001830:	e016      	b.n	8001860 <ADBMS_Process_Read_Data_RegGrp+0x4e>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001832:	7d7a      	ldrb	r2, [r7, #21]
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1899      	adds	r1, r3, r2
 8001840:	7dba      	ldrb	r2, [r7, #22]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	461a      	mov	r2, r3
 800184c:	7d7b      	ldrb	r3, [r7, #21]
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	780a      	ldrb	r2, [r1, #0]
 8001858:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	3301      	adds	r3, #1
 800185e:	757b      	strb	r3, [r7, #21]
 8001860:	7d7b      	ldrb	r3, [r7, #21]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d9e5      	bls.n	8001832 <ADBMS_Process_Read_Data_RegGrp+0x20>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 8001866:	7dbb      	ldrb	r3, [r7, #22]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	3306      	adds	r3, #6
 800186c:	461a      	mov	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b21b      	sxth	r3, r3
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21b      	sxth	r3, r3
 800187a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187e:	b21a      	sxth	r2, r3
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	3307      	adds	r3, #7
 8001886:	4619      	mov	r1, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	440b      	add	r3, r1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	81fb      	strh	r3, [r7, #14]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	461a      	mov	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4413      	add	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	2106      	movs	r1, #6
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fbd9 	bl	800105c <Pec10_Calc>
 80018aa:	4603      	mov	r3, r0
 80018ac:	81bb      	strh	r3, [r7, #12]
        pec_error |= (rx_pec != calc_pec);
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	89f9      	ldrh	r1, [r7, #14]
 80018b2:	89ba      	ldrh	r2, [r7, #12]
 80018b4:	4291      	cmp	r1, r2
 80018b6:	bf14      	ite	ne
 80018b8:	2201      	movne	r2, #1
 80018ba:	2200      	moveq	r2, #0
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4313      	orrs	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	3301      	adds	r3, #1
 80018ce:	75bb      	strb	r3, [r7, #22]
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d9aa      	bls.n	800182c <ADBMS_Process_Read_Data_RegGrp+0x1a>
    }
    return pec_error;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ADBMS_WakeUP_ICs_Polling>:

void ADBMS_WakeUP_ICs_Polling()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e012      	b.n	8001912 <ADBMS_WakeUP_ICs_Polling+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80018f2:	f004 febf 	bl	8006674 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f002 ff98 	bl	800482c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 8001902:	f004 feb7 	bl	8006674 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f002 ff90 	bl	800482c <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3301      	adds	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d9e9      	bls.n	80018ec <ADBMS_WakeUP_ICs_Polling+0xc>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020000 	.word	0x40020000

08001928 <ADBMS_Write_CMD_Polling>:

void ADBMS_Write_CMD_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
    // spi_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
    // spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fedb 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001948:	f004 fe94 	bl	8006674 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800194c:	f107 010c 	add.w	r1, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2204      	movs	r2, #4
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fdf1 	bl	800853e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001962:	f004 fe87 	bl	8006674 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000

08001974 <ADBMS_Write_Data_RegGrp_Polling>:

void ADBMS_Write_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
    //     uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
    //     spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
    //     spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
    // }

    ADBMS_Pack_Write_Data_RegGrp(tx_cmd, data, spi_tx_dataBuf);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fedc 	bl	8001748 <ADBMS_Pack_Write_Data_RegGrp>

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2110      	movs	r1, #16
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 8001996:	f004 fe6d 	bl	8006674 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2214      	movs	r2, #20
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f006 fdcb 	bl	800853e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4803      	ldr	r0, [pc, #12]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 80019ae:	f004 fe61 	bl	8006674 <HAL_GPIO_WritePin>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000

080019c0 <ADBMS_Read_Data_RegGrp_Polling>:

bool ADBMS_Read_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_rx_dataBuf)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[DATABUF_LEN] = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	743b      	strb	r3, [r7, #16]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	747b      	strb	r3, [r7, #17]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff fafc 	bl	8000ff4 <Pec15_Calc>
 80019fc:	4603      	mov	r3, r0
 80019fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	74bb      	strb	r3, [r7, #18]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	74fb      	strb	r3, [r7, #19]

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2110      	movs	r1, #16
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <ADBMS_Read_Data_RegGrp_Polling+0x8c>)
 8001a16:	f004 fe2d 	bl	8006674 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_rx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 8001a1a:	f107 0110 	add.w	r1, r7, #16
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2314      	movs	r3, #20
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f006 fecc 	bl	80087c6 <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2110      	movs	r1, #16
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <ADBMS_Read_Data_RegGrp_Polling+0x8c>)
 8001a34:	f004 fe1e 	bl	8006674 <HAL_GPIO_WritePin>

    return ADBMS_Process_Read_Data_RegGrp(spi_rx_dataBuf, dataBuf);
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f7ff fee9 	bl	8001812 <ADBMS_Process_Read_Data_RegGrp>
 8001a40:	4603      	mov	r3, r0
    //     }
    //     uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
    //     uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
    //     pec_error |= (rx_pec != calc_pec);
    // }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40020000 	.word	0x40020000

08001a50 <ADBMS_Interface_Initialize>:
#include "adbms_interface.h"

void ADBMS_Interface_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	807b      	strh	r3, [r7, #2]
    ADBMS_Init(&adbms->ICs, hspi, csb_pinBank, csb_pin);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	f7ff fbcb 	bl	8001200 <ADBMS_Init>
    
    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
 8001a6e:	e043      	b.n	8001af8 <ADBMS_Interface_Initialize+0xa8>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001a70:	7dfa      	ldrb	r2, [r7, #23]
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8001a82:	7913      	ldrb	r3, [r2, #4]
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	7113      	strb	r3, [r2, #4]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001a8a:	7dfa      	ldrb	r2, [r7, #23]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8001a9c:	88d3      	ldrh	r3, [r2, #6]
 8001a9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001aa2:	f361 134e 	bfi	r3, r1, #5, #10
 8001aa6:	80d3      	strh	r3, [r2, #6]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001aa8:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001aac:	f7ff fb44 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001aba:	b290      	uxth	r0, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8001ac2:	f832 3031 	ldrh.w	r3, [r2, r1, lsl #3]
 8001ac6:	f360 030b 	bfi	r3, r0, #0, #12
 8001aca:	f822 3031 	strh.w	r3, [r2, r1, lsl #3]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001ace:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001bc4 <ADBMS_Interface_Initialize+0x174>
 8001ad2:	f7ff fb31 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ae0:	b291      	uxth	r1, r2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	3324      	adds	r3, #36	@ 0x24
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	885a      	ldrh	r2, [r3, #2]
 8001aec:	f361 020b 	bfi	r2, r1, #0, #12
 8001af0:	805a      	strh	r2, [r3, #2]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	3301      	adds	r3, #1
 8001af6:	75fb      	strb	r3, [r7, #23]
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d9b8      	bls.n	8001a70 <ADBMS_Interface_Initialize+0x20>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f892 3130 	ldrb.w	r3, [r2, #304]	@ 0x130
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3332      	adds	r3, #50	@ 0x32
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f7ff fb87 	bl	800122c <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	333e      	adds	r3, #62	@ 0x3e
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f7ff fc89 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 8001b3e:	f7ff fd2f 	bl	80015a0 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	f893 0132 	ldrb.w	r0, [r3, #306]	@ 0x132
 8001b50:	f7ff fd97 	bl	8001682 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs_Polling();
 8001b54:	f7ff fec4 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001b58:	f7ff fec2 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_tx_dataBuf);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <ADBMS_Interface_Initialize+0x178>)
 8001b62:	8819      	ldrh	r1, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	330a      	adds	r3, #10
 8001b6e:	f7ff ff01 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001b72:	f7ff feb5 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <ADBMS_Interface_Initialize+0x17c>)
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	330a      	adds	r3, #10
 8001b88:	f7ff fef4 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>

    // Turn on sensing
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adcv);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f7ff fec5 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f002 fe44 	bl	800482c <HAL_Delay>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff feb9 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001bb6:	2008      	movs	r0, #8
 8001bb8:	f002 fe38 	bl	800482c <HAL_Delay>
}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40866666 	.word	0x40866666
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000002 	.word	0x20000002

08001bd0 <ADBMS_UpdateVoltages>:
    // Process Rx data
    ADBMS_Process_Read_Data_RegGrp(adbms->ICs.spi_rx_dataBuf, adbms->ICs.cell);
}

void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    bool pec = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001bdc:	f7ff fe80 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    // pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
    // uint16_t vregs[5] = {RDCVA, RDCVB, RDCVC, RDCVD, RDCVE};

    // uint16_t vregs[2] = {RDCVA, RDCVB};
    // pec |= ADBMS_Read_Data_Regs_Polling(adbms->ICs.hspi, 2, vregs, adbms->ICs.cell, adbms->ICs.spi_rx_dataBuf);
    adbms->voltage_pec_failure = pec;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f881 	bl	8001cf0 <ADBMS_CalculateValues_Voltages>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    bool pec = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001c04:	f7ff fe6c 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <ADBMS_UpdateTemps+0xe8>)
 8001c0e:	8819      	ldrh	r1, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 02e2 	add.w	r2, r3, #226	@ 0xe2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	331e      	adds	r3, #30
 8001c1a:	f7ff fed1 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <ADBMS_UpdateTemps+0xec>)
 8001c38:	8819      	ldrh	r1, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	33e2      	adds	r3, #226	@ 0xe2
 8001c3e:	f103 020c 	add.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	331e      	adds	r3, #30
 8001c46:	f7ff febb 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <ADBMS_UpdateTemps+0xf0>)
 8001c64:	8819      	ldrh	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	33e2      	adds	r3, #226	@ 0xe2
 8001c6a:	f103 0218 	add.w	r2, r3, #24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	331e      	adds	r3, #30
 8001c72:	f7ff fea5 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <ADBMS_UpdateTemps+0xf4>)
 8001c90:	8819      	ldrh	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	33e2      	adds	r3, #226	@ 0xe2
 8001c96:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	331e      	adds	r3, #30
 8001c9e:	f7ff fe8f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
    adbms->temp_pec_failure = pec;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f7ff fe2c 	bl	8001928 <ADBMS_Write_CMD_Polling>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f90d 	bl	8001ef0 <ADBMS_CalculateValues_Temps>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000000e 	.word	0x2000000e
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	20000012 	.word	0x20000012
 8001cec:	20000014 	.word	0x20000014

08001cf0 <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d014      	beq.n	8001d32 <ADBMS_CalculateValues_Voltages+0x42>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <ADBMS_CalculateValues_Voltages+0x42>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8001d1e:	f083 0301 	eor.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8001d60:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	dd04      	ble.n	8001d78 <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001d76:	e0b6      	b.n	8001ee6 <ADBMS_CalculateValues_Voltages+0x1f6>
            adbms->pec_fault_ = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        return;
 8001d80:	e0b1      	b.n	8001ee6 <ADBMS_CalculateValues_Voltages+0x1f6>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
    adbms->max_v = 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
    adbms->min_v = FLT_MAX;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a54      	ldr	r2, [pc, #336]	@ (8001eec <ADBMS_CalculateValues_Voltages+0x1fc>)
 8001d9a:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
 8001da2:	e092      	b.n	8001eca <ADBMS_CalculateValues_Voltages+0x1da>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8001da4:	2305      	movs	r3, #5
 8001da6:	753b      	strb	r3, [r7, #20]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	75bb      	strb	r3, [r7, #22]
 8001dac:	e085      	b.n	8001eba <ADBMS_CalculateValues_Voltages+0x1ca>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001dae:	2300      	movs	r3, #0
 8001db0:	757b      	strb	r3, [r7, #21]
 8001db2:	e07a      	b.n	8001eaa <ADBMS_CalculateValues_Voltages+0x1ba>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001db4:	7dba      	ldrb	r2, [r7, #22]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	7d7a      	ldrb	r2, [r7, #21]
 8001dbe:	0852      	lsrs	r2, r2, #1
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2b0d      	cmp	r3, #13
 8001dc6:	dc74      	bgt.n	8001eb2 <ADBMS_CalculateValues_Voltages+0x1c2>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001dc8:	7dba      	ldrb	r2, [r7, #22]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	7dfa      	ldrb	r2, [r7, #23]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	18ca      	adds	r2, r1, r3
 8001de0:	7d7b      	ldrb	r3, [r7, #21]
 8001de2:	4413      	add	r3, r2
 8001de4:	3301      	adds	r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b219      	sxth	r1, r3
 8001df4:	7dba      	ldrb	r2, [r7, #22]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	7dfa      	ldrb	r2, [r7, #23]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	18c2      	adds	r2, r0, r3
 8001e0c:	7d7b      	ldrb	r3, [r7, #21]
 8001e0e:	4413      	add	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 8001e1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f9c8 	bl	80011b8 <ADBMS_getVoltage>
 8001e28:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8001e2c:	7dfa      	ldrb	r2, [r7, #23]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	7dba      	ldrb	r2, [r7, #22]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	7d7a      	ldrb	r2, [r7, #21]
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	334c      	adds	r3, #76	@ 0x4c
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3304      	adds	r3, #4
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ed93 7a79 	vldr	s14, [r3, #484]	@ 0x1e4
 8001e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	edc3 7a79 	vstr	s15, [r3, #484]	@ 0x1e4
                if (curr_voltage > adbms->max_v){
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	edd3 7a7a 	vldr	s15, [r3, #488]	@ 0x1e8
 8001e72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	dd03      	ble.n	8001e88 <ADBMS_CalculateValues_Voltages+0x198>
                    adbms->max_v = curr_voltage;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
                }
                if (curr_voltage < adbms->min_v){
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 7a7b 	vldr	s15, [r3, #492]	@ 0x1ec
 8001e8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	d503      	bpl.n	8001ea4 <ADBMS_CalculateValues_Voltages+0x1b4>
                    adbms->min_v = curr_voltage;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001ea4:	7d7b      	ldrb	r3, [r7, #21]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	757b      	strb	r3, [r7, #21]
 8001eaa:	7d7b      	ldrb	r3, [r7, #21]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d981      	bls.n	8001db4 <ADBMS_CalculateValues_Voltages+0xc4>
 8001eb0:	e000      	b.n	8001eb4 <ADBMS_CalculateValues_Voltages+0x1c4>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001eb2:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001eb4:	7dbb      	ldrb	r3, [r7, #22]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75bb      	strb	r3, [r7, #22]
 8001eba:	7dba      	ldrb	r2, [r7, #22]
 8001ebc:	7d3b      	ldrb	r3, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f4ff af75 	bcc.w	8001dae <ADBMS_CalculateValues_Voltages+0xbe>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f67f af69 	bls.w	8001da4 <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	ed93 7a79 	vldr	s14, [r3, #484]	@ 0x1e4
 8001ed8:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edc3 7a7c 	vstr	s15, [r3, #496]	@ 0x1f0
}
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	7f7fffff 	.word	0x7f7fffff

08001ef0 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8001efe:	f083 0301 	eor.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d014      	beq.n	8001f32 <ADBMS_CalculateValues_Temps+0x42>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8001f0e:	f083 0301 	eor.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00c      	beq.n	8001f32 <ADBMS_CalculateValues_Temps+0x42>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8001f1e:	f083 0301 	eor.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d022      	beq.n	8001f82 <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8001f60:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	dd04      	ble.n	8001f78 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001f76:	e0e8      	b.n	800214a <ADBMS_CalculateValues_Temps+0x25a>
            adbms->pec_fault_ = 0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        return;
 8001f80:	e0e3      	b.n	800214a <ADBMS_CalculateValues_Temps+0x25a>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
    adbms->min_temp = FLT_MAX;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a70      	ldr	r2, [pc, #448]	@ (8002158 <ADBMS_CalculateValues_Temps+0x268>)
 8001f96:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
    bool openwire_temp_fault = false;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	e0b2      	b.n	800210c <ADBMS_CalculateValues_Temps+0x21c>
    {
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	76fb      	strb	r3, [r7, #27]
 8001faa:	e0a8      	b.n	80020fe <ADBMS_CalculateValues_Temps+0x20e>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001fac:	2300      	movs	r3, #0
 8001fae:	76bb      	strb	r3, [r7, #26]
 8001fb0:	e09e      	b.n	80020f0 <ADBMS_CalculateValues_Temps+0x200>
            {
                // skip because only want temps 2-10
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8001fb2:	7efb      	ldrb	r3, [r7, #27]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d103      	bne.n	8001fc0 <ADBMS_CalculateValues_Temps+0xd0>
 8001fb8:	7ebb      	ldrb	r3, [r7, #26]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f240 8094 	bls.w	80020e8 <ADBMS_CalculateValues_Temps+0x1f8>
 8001fc0:	7efa      	ldrb	r2, [r7, #27]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	7eba      	ldrb	r2, [r7, #26]
 8001fca:	0852      	lsrs	r2, r2, #1
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	4413      	add	r3, r2
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	f300 8089 	bgt.w	80020e8 <ADBMS_CalculateValues_Temps+0x1f8>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001fd6:	7efa      	ldrb	r2, [r7, #27]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	18ca      	adds	r2, r1, r3
 8001fee:	7ebb      	ldrb	r3, [r7, #26]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b219      	sxth	r1, r3
 8002002:	7efa      	ldrb	r2, [r7, #27]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4618      	mov	r0, r3
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	18c2      	adds	r2, r0, r3
 800201a:	7ebb      	ldrb	r3, [r7, #26]
 800201c:	4413      	add	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002026:	b21b      	sxth	r3, r3
 8002028:	430b      	orrs	r3, r1
 800202a:	833b      	strh	r3, [r7, #24]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 800202c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f8c1 	bl	80011b8 <ADBMS_getVoltage>
 8002036:	ed87 0a05 	vstr	s0, [r7, #20]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 800203a:	4b48      	ldr	r3, [pc, #288]	@ (800215c <ADBMS_CalculateValues_Temps+0x26c>)
 800203c:	613b      	str	r3, [r7, #16]
                if (vref - raw_temp_voltage < 1e-1)
 800203e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002042:	edd7 7a05 	vldr	s15, [r7, #20]
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	ee17 0a90 	vmov	r0, s15
 800204e:	f7fe fa7b 	bl	8000548 <__aeabi_f2d>
 8002052:	a33f      	add	r3, pc, #252	@ (adr r3, 8002150 <ADBMS_CalculateValues_Temps+0x260>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fd40 	bl	8000adc <__aeabi_dcmplt>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <ADBMS_CalculateValues_Temps+0x178>
                    openwire_temp_fault = true;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 8002068:	edd7 0a04 	vldr	s1, [r7, #16]
 800206c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002070:	f002 fa46 	bl	8004500 <getTemp>
 8002074:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->temperatures[cic*NUM_TEMPS_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	00d9      	lsls	r1, r3, #3
 800207c:	7efa      	ldrb	r2, [r7, #27]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	440b      	add	r3, r1
 8002086:	7eba      	ldrb	r2, [r7, #26]
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	4413      	add	r3, r2
 800208e:	3b02      	subs	r3, #2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	3368      	adds	r3, #104	@ 0x68
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 800209e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	edd3 7a7d 	vldr	s15, [r3, #500]	@ 0x1f4
 80020b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80020b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	dd03      	ble.n	80020ca <ADBMS_CalculateValues_Temps+0x1da>
                    adbms->max_temp = curr_temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
                if (curr_temp < adbms->min_temp)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edd3 7a7e 	vldr	s15, [r3, #504]	@ 0x1f8
 80020d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d505      	bpl.n	80020ea <ADBMS_CalculateValues_Temps+0x1fa>
                    adbms->min_temp = curr_temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
 80020e6:	e000      	b.n	80020ea <ADBMS_CalculateValues_Temps+0x1fa>
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 80020e8:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80020ea:	7ebb      	ldrb	r3, [r7, #26]
 80020ec:	3302      	adds	r3, #2
 80020ee:	76bb      	strb	r3, [r7, #26]
 80020f0:	7ebb      	ldrb	r3, [r7, #26]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	f67f af5d 	bls.w	8001fb2 <ADBMS_CalculateValues_Temps+0xc2>
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 80020f8:	7efb      	ldrb	r3, [r7, #27]
 80020fa:	3301      	adds	r3, #1
 80020fc:	76fb      	strb	r3, [r7, #27]
 80020fe:	7efb      	ldrb	r3, [r7, #27]
 8002100:	2b03      	cmp	r3, #3
 8002102:	f67f af53 	bls.w	8001fac <ADBMS_CalculateValues_Temps+0xbc>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b01      	cmp	r3, #1
 8002110:	f77f af49 	ble.w	8001fa6 <ADBMS_CalculateValues_Temps+0xb6>
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <ADBMS_CalculateValues_Temps+0x236>
 800211e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <ADBMS_CalculateValues_Temps+0x23a>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <ADBMS_CalculateValues_Temps+0x23c>
 800212a:	2300      	movs	r3, #0
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 8002138:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800213c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
    
}
 800214a:	3728      	adds	r7, #40	@ 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fb99999 	.word	0x3fb99999
 8002158:	7f7fffff 	.word	0x7f7fffff
 800215c:	40400000 	.word	0x40400000

08002160 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <UpdateADInternalFault+0x2e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9e5 	bl	8000548 <__aeabi_f2d>
 800217e:	a330      	add	r3, pc, #192	@ (adr r3, 8002240 <UpdateADInternalFault+0xe0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <UpdateADInternalFault+0x32>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <UpdateADInternalFault+0x34>
 8002192:	2300      	movs	r3, #0
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <UpdateADInternalFault+0x5e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a7b 	vldr	s15, [r3, #492]	@ 0x1ec
 80021b0:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80021b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	d501      	bpl.n	80021c2 <UpdateADInternalFault+0x62>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <UpdateADInternalFault+0x64>
 80021c2:	2300      	movs	r3, #0
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <UpdateADInternalFault+0x8e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edd3 7a7d 	vldr	s15, [r3, #500]	@ 0x1f4
 80021e0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002238 <UpdateADInternalFault+0xd8>
 80021e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	dd01      	ble.n	80021f2 <UpdateADInternalFault+0x92>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <UpdateADInternalFault+0x94>
 80021f2:	2300      	movs	r3, #0
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <UpdateADInternalFault+0xbe>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	edd3 7a7e 	vldr	s15, [r3, #504]	@ 0x1f8
 8002210:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800223c <UpdateADInternalFault+0xdc>
 8002214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d501      	bpl.n	8002222 <UpdateADInternalFault+0xc2>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <UpdateADInternalFault+0xc4>
 8002222:	2300      	movs	r3, #0
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	42b40000 	.word	0x42b40000
 800223c:	c2200000 	.word	0xc2200000
 8002240:	cccccccd 	.word	0xcccccccd
 8002244:	4010cccc 	.word	0x4010cccc

08002248 <cellBalanceOff>:
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
}

void cellBalanceOff(adbms_ *adbms)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    // Turn off CB indication LED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2140      	movs	r1, #64	@ 0x40
 8002254:	4815      	ldr	r0, [pc, #84]	@ (80022ac <cellBalanceOff+0x64>)
 8002256:	f004 fa0d 	bl	8006674 <HAL_GPIO_WritePin>

    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e009      	b.n	8002274 <cellBalanceOff+0x2c>
    {
        adbms->cfb[cic].dcc = 0;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3324      	adds	r3, #36	@ 0x24
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	2200      	movs	r2, #0
 800226c:	80da      	strh	r2, [r3, #6]
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	ddf2      	ble.n	8002260 <cellBalanceOff+0x18>
    }
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	333e      	adds	r3, #62	@ 0x3e
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7ff f8db 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <cellBalanceOff+0x68>)
 8002292:	8819      	ldrh	r1, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	330a      	adds	r3, #10
 800229e:	f7ff fb69 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40020400 	.word	0x40020400
 80022b0:	20000002 	.word	0x20000002

080022b4 <UpdateOWCFault>:

void UpdateOWCFault(adbms_ *adbms)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    // check openwire fault
    ADBMS_WakeUP_ICs_Polling();
 80022bc:	f7ff fb10 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    cellBalanceOff(adbms);   // need to turn off cell balancing to check for OWC
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffc1 	bl	8002248 <cellBalanceOff>

    /// OWC EVEN Check
    adbms->adsv.cont = 1;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    adbms->adsv.ow = 1; // Enable OW on even-channel 
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 80022da:	2101      	movs	r1, #1
 80022dc:	f361 0383 	bfi	r3, r1, #2, #2
 80022e0:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4611      	mov	r1, r2
 80022ee:	f893 0131 	ldrb.w	r0, [r3, #305]	@ 0x131
 80022f2:	f7ff f997 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f7ff fb10 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 8002308:	2008      	movs	r0, #8
 800230a:	f002 fa8f 	bl	800482c <HAL_Delay>

    // Get new s-channel voltages
    bool pec = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	747b      	strb	r3, [r7, #17]
    ADBMS_WakeUP_ICs_Polling();
 8002312:	f7ff fae5 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <UpdateOWCFault+0x234>)
 800231c:	8819      	ldrh	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	331e      	adds	r3, #30
 8002328:	f7ff fb4a 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	7c7b      	ldrb	r3, [r7, #17]
 8002332:	4313      	orrs	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4b69      	ldr	r3, [pc, #420]	@ (80024ec <UpdateOWCFault+0x238>)
 8002346:	8819      	ldrh	r1, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	339a      	adds	r3, #154	@ 0x9a
 800234c:	f103 020c 	add.w	r2, r3, #12
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	331e      	adds	r3, #30
 8002354:	f7ff fb34 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	7c7b      	ldrb	r3, [r7, #17]
 800235e:	4313      	orrs	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	4b5f      	ldr	r3, [pc, #380]	@ (80024f0 <UpdateOWCFault+0x23c>)
 8002372:	8819      	ldrh	r1, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	339a      	adds	r3, #154	@ 0x9a
 8002378:	f103 0218 	add.w	r2, r3, #24
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	331e      	adds	r3, #30
 8002380:	f7ff fb1e 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7c7b      	ldrb	r3, [r7, #17]
 800238a:	4313      	orrs	r3, r2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <UpdateOWCFault+0x240>)
 800239e:	8819      	ldrh	r1, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	339a      	adds	r3, #154	@ 0x9a
 80023a4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	331e      	adds	r3, #30
 80023ac:	f7ff fb08 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bf14      	ite	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	2300      	moveq	r3, #0
 80023c2:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <UpdateOWCFault+0x244>)
 80023ca:	8819      	ldrh	r1, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	339a      	adds	r3, #154	@ 0x9a
 80023d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	331e      	adds	r3, #30
 80023d8:	f7ff faf2 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	7c7b      	ldrb	r3, [r7, #17]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	747b      	strb	r3, [r7, #17]

    if(pec){
 80023f0:	7c7b      	ldrb	r3, [r7, #17]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <UpdateOWCFault+0x176>
        adbms->current_owc_failures += 1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 80023fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002410:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	dc00      	bgt.n	8002420 <UpdateOWCFault+0x16c>
            adbms->pec_fault_ = 1;
        }
        return;
 800241e:	e1bb      	b.n	8002798 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        return;
 8002428:	e1b6      	b.n	8002798 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
 8002438:	e06b      	b.n	8002512 <UpdateOWCFault+0x25e>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 800243a:	2305      	movs	r3, #5
 800243c:	737b      	strb	r3, [r7, #13]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800243e:	2300      	movs	r3, #0
 8002440:	75bb      	strb	r3, [r7, #22]
 8002442:	e05f      	b.n	8002504 <UpdateOWCFault+0x250>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002444:	2300      	movs	r3, #0
 8002446:	757b      	strb	r3, [r7, #21]
 8002448:	e04a      	b.n	80024e0 <UpdateOWCFault+0x22c>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 800244a:	7dba      	ldrb	r2, [r7, #22]
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	7d7a      	ldrb	r2, [r7, #21]
 8002454:	0852      	lsrs	r2, r2, #1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	4413      	add	r3, r2
 800245a:	2b0d      	cmp	r3, #13
 800245c:	dc4e      	bgt.n	80024fc <UpdateOWCFault+0x248>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 800245e:	7dba      	ldrb	r2, [r7, #22]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4619      	mov	r1, r3
 800246a:	7dfa      	ldrb	r2, [r7, #23]
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	18ca      	adds	r2, r1, r3
 8002476:	7d7b      	ldrb	r3, [r7, #21]
 8002478:	4413      	add	r3, r2
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002484:	b21b      	sxth	r3, r3
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b219      	sxth	r1, r3
 800248a:	7dba      	ldrb	r2, [r7, #22]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4618      	mov	r0, r3
 8002496:	7dfa      	ldrb	r2, [r7, #23]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	18c2      	adds	r2, r0, r3
 80024a2:	7d7b      	ldrb	r3, [r7, #21]
 80024a4:	4413      	add	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	430b      	orrs	r3, r1
 80024b2:	817b      	strh	r3, [r7, #10]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 80024b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fe7d 	bl	80011b8 <ADBMS_getVoltage>
 80024be:	eef0 7a40 	vmov.f32	s15, s0
 80024c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d504      	bpl.n	80024da <UpdateOWCFault+0x226>
                {
                    adbms->openwire_fault_ = 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
                    return;
 80024d8:	e15e      	b.n	8002798 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80024da:	7d7b      	ldrb	r3, [r7, #21]
 80024dc:	3302      	adds	r3, #2
 80024de:	757b      	strb	r3, [r7, #21]
 80024e0:	7d7b      	ldrb	r3, [r7, #21]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d9b1      	bls.n	800244a <UpdateOWCFault+0x196>
 80024e6:	e00a      	b.n	80024fe <UpdateOWCFault+0x24a>
 80024e8:	20000004 	.word	0x20000004
 80024ec:	20000006 	.word	0x20000006
 80024f0:	20000008 	.word	0x20000008
 80024f4:	2000000a 	.word	0x2000000a
 80024f8:	2000000c 	.word	0x2000000c
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80024fc:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80024fe:	7dbb      	ldrb	r3, [r7, #22]
 8002500:	3301      	adds	r3, #1
 8002502:	75bb      	strb	r3, [r7, #22]
 8002504:	7dba      	ldrb	r2, [r7, #22]
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	429a      	cmp	r2, r3
 800250a:	d39b      	bcc.n	8002444 <UpdateOWCFault+0x190>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	3301      	adds	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d990      	bls.n	800243a <UpdateOWCFault+0x186>
            }
        }
    }

    /// OWC ODD Check
    adbms->adsv.cont = 1;
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    adbms->adsv.ow = 2; // Enable OW on odd-channel 
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 800252c:	2102      	movs	r1, #2
 800252e:	f361 0383 	bfi	r3, r1, #2, #2
 8002532:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4611      	mov	r1, r2
 8002540:	f893 0131 	ldrb.w	r0, [r3, #305]	@ 0x131
 8002544:	f7ff f86e 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7ff f9e7 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 800255a:	2008      	movs	r0, #8
 800255c:	f002 f966 	bl	800482c <HAL_Delay>

    // Get new s-channel voltages
    ADBMS_WakeUP_ICs_Polling();
 8002560:	f7ff f9be 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	4b8d      	ldr	r3, [pc, #564]	@ (80027a0 <UpdateOWCFault+0x4ec>)
 800256a:	8819      	ldrh	r1, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	331e      	adds	r3, #30
 8002576:	f7ff fa23 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	7c7b      	ldrb	r3, [r7, #17]
 8002580:	4313      	orrs	r3, r2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	4b84      	ldr	r3, [pc, #528]	@ (80027a4 <UpdateOWCFault+0x4f0>)
 8002594:	8819      	ldrh	r1, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	339a      	adds	r3, #154	@ 0x9a
 800259a:	f103 020c 	add.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	331e      	adds	r3, #30
 80025a2:	f7ff fa0d 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	7c7b      	ldrb	r3, [r7, #17]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <UpdateOWCFault+0x4f4>)
 80025c0:	8819      	ldrh	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	339a      	adds	r3, #154	@ 0x9a
 80025c6:	f103 0218 	add.w	r2, r3, #24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	331e      	adds	r3, #30
 80025ce:	f7ff f9f7 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	7c7b      	ldrb	r3, [r7, #17]
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <UpdateOWCFault+0x4f8>)
 80025ec:	8819      	ldrh	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	339a      	adds	r3, #154	@ 0x9a
 80025f2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	331e      	adds	r3, #30
 80025fa:	f7ff f9e1 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	4313      	orrs	r3, r2
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	4b66      	ldr	r3, [pc, #408]	@ (80027b0 <UpdateOWCFault+0x4fc>)
 8002618:	8819      	ldrh	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	339a      	adds	r3, #154	@ 0x9a
 800261e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	331e      	adds	r3, #30
 8002626:	f7ff f9cb 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	7c7b      	ldrb	r3, [r7, #17]
 8002630:	4313      	orrs	r3, r2
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	747b      	strb	r3, [r7, #17]

    if(pec){
 800263e:	7c7b      	ldrb	r3, [r7, #17]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d019      	beq.n	8002678 <UpdateOWCFault+0x3c4>
        adbms->current_owc_failures += 1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 800264a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 800265e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dc00      	bgt.n	800266e <UpdateOWCFault+0x3ba>
            adbms->pec_fault_ = 1;
        }
        return;
 800266c:	e094      	b.n	8002798 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
        return;
 8002676:	e08f      	b.n	8002798 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002682:	2300      	movs	r3, #0
 8002684:	753b      	strb	r3, [r7, #20]
 8002686:	e061      	b.n	800274c <UpdateOWCFault+0x498>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8002688:	2305      	movs	r3, #5
 800268a:	743b      	strb	r3, [r7, #16]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800268c:	2300      	movs	r3, #0
 800268e:	74fb      	strb	r3, [r7, #19]
 8002690:	e055      	b.n	800273e <UpdateOWCFault+0x48a>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002692:	2300      	movs	r3, #0
 8002694:	74bb      	strb	r3, [r7, #18]
 8002696:	e04a      	b.n	800272e <UpdateOWCFault+0x47a>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002698:	7cfa      	ldrb	r2, [r7, #19]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	7cba      	ldrb	r2, [r7, #18]
 80026a2:	0852      	lsrs	r2, r2, #1
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4413      	add	r3, r2
 80026a8:	2b0d      	cmp	r3, #13
 80026aa:	dc44      	bgt.n	8002736 <UpdateOWCFault+0x482>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 80026ac:	7cfa      	ldrb	r2, [r7, #19]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4619      	mov	r1, r3
 80026b8:	7d3a      	ldrb	r2, [r7, #20]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	18ca      	adds	r2, r1, r3
 80026c4:	7cbb      	ldrb	r3, [r7, #18]
 80026c6:	4413      	add	r3, r2
 80026c8:	3301      	adds	r3, #1
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b219      	sxth	r1, r3
 80026d8:	7cfa      	ldrb	r2, [r7, #19]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4618      	mov	r0, r3
 80026e4:	7d3a      	ldrb	r2, [r7, #20]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	18c2      	adds	r2, r0, r3
 80026f0:	7cbb      	ldrb	r3, [r7, #18]
 80026f2:	4413      	add	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	430b      	orrs	r3, r1
 8002700:	81fb      	strh	r3, [r7, #14]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 8002702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fd56 	bl	80011b8 <ADBMS_getVoltage>
 800270c:	eef0 7a40 	vmov.f32	s15, s0
 8002710:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	d504      	bpl.n	8002728 <UpdateOWCFault+0x474>
                {
                    adbms->openwire_fault_ = 1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
                    return;
 8002726:	e037      	b.n	8002798 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002728:	7cbb      	ldrb	r3, [r7, #18]
 800272a:	3302      	adds	r3, #2
 800272c:	74bb      	strb	r3, [r7, #18]
 800272e:	7cbb      	ldrb	r3, [r7, #18]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d9b1      	bls.n	8002698 <UpdateOWCFault+0x3e4>
 8002734:	e000      	b.n	8002738 <UpdateOWCFault+0x484>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002736:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	3301      	adds	r3, #1
 800273c:	74fb      	strb	r3, [r7, #19]
 800273e:	7cfa      	ldrb	r2, [r7, #19]
 8002740:	7c3b      	ldrb	r3, [r7, #16]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3a5      	bcc.n	8002692 <UpdateOWCFault+0x3de>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002746:	7d3b      	ldrb	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	753b      	strb	r3, [r7, #20]
 800274c:	7d3b      	ldrb	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d99a      	bls.n	8002688 <UpdateOWCFault+0x3d4>
            }
        }
    }

    /// Turn off owc
    adbms->adsv.cont = 0;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    adbms->adsv.ow = 0; // Enable OW on odd-channel 
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	f892 3131 	ldrb.w	r3, [r2, #305]	@ 0x131
 8002766:	f023 030c 	bic.w	r3, r3, #12
 800276a:	f882 3131 	strb.w	r3, [r2, #305]	@ 0x131
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4611      	mov	r1, r2
 8002778:	f893 0131 	ldrb.w	r0, [r3, #305]	@ 0x131
 800277c:	f7fe ff52 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f7ff f8cb 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);    // S-Channels are updated at 8ms
 8002792:	2001      	movs	r0, #1
 8002794:	f002 f84a 	bl	800482c <HAL_Delay>
}
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000004 	.word	0x20000004
 80027a4:	20000006 	.word	0x20000006
 80027a8:	20000008 	.word	0x20000008
 80027ac:	2000000a 	.word	0x2000000a
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 80027bc:	487b      	ldr	r0, [pc, #492]	@ (80029ac <ADBMS_Print_Vals+0x1f8>)
 80027be:	f00b fb6b 	bl	800de98 <puts>
    printf("total v: %f\n", adbms->total_v);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd febd 	bl	8000548 <__aeabi_f2d>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4877      	ldr	r0, [pc, #476]	@ (80029b0 <ADBMS_Print_Vals+0x1fc>)
 80027d4:	f00b faf0 	bl	800ddb8 <iprintf>
    printf("max v: %f\t", adbms->max_v);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd feb2 	bl	8000548 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4872      	ldr	r0, [pc, #456]	@ (80029b4 <ADBMS_Print_Vals+0x200>)
 80027ea:	f00b fae5 	bl	800ddb8 <iprintf>
    printf("min v: %f\t", adbms->min_v);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fea7 	bl	8000548 <__aeabi_f2d>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	486e      	ldr	r0, [pc, #440]	@ (80029b8 <ADBMS_Print_Vals+0x204>)
 8002800:	f00b fada 	bl	800ddb8 <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 31f0 	ldr.w	r3, [r3, #496]	@ 0x1f0
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fe9c 	bl	8000548 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4869      	ldr	r0, [pc, #420]	@ (80029bc <ADBMS_Print_Vals+0x208>)
 8002816:	f00b facf 	bl	800ddb8 <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	ed93 7a7a 	vldr	s14, [r3, #488]	@ 0x1e8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 7a7b 	vldr	s15, [r3, #492]	@ 0x1ec
 8002826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282a:	ee17 0a90 	vmov	r0, s15
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4862      	ldr	r0, [pc, #392]	@ (80029c0 <ADBMS_Print_Vals+0x20c>)
 8002838:	f00b fabe 	bl	800ddb8 <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e02b      	b.n	800289a <ADBMS_Print_Vals+0xe6>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	e022      	b.n	800288e <ADBMS_Print_Vals+0xda>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	461a      	mov	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	1c5c      	adds	r4, r3, #1
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	461a      	mov	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	334c      	adds	r3, #76	@ 0x4c
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe66 	bl	8000548 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4621      	mov	r1, r4
 8002882:	4850      	ldr	r0, [pc, #320]	@ (80029c4 <ADBMS_Print_Vals+0x210>)
 8002884:	f00b fa98 	bl	800ddb8 <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	3301      	adds	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b0d      	cmp	r3, #13
 8002892:	ddd9      	ble.n	8002848 <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b01      	cmp	r3, #1
 800289e:	ddd0      	ble.n	8002842 <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 80028a0:	200a      	movs	r0, #10
 80028a2:	f00b fa9b 	bl	800dddc <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 80028a6:	4848      	ldr	r0, [pc, #288]	@ (80029c8 <ADBMS_Print_Vals+0x214>)
 80028a8:	f00b faf6 	bl	800de98 <puts>
    printf("max temp: %f\t", adbms->max_temp);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe48 	bl	8000548 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4843      	ldr	r0, [pc, #268]	@ (80029cc <ADBMS_Print_Vals+0x218>)
 80028be:	f00b fa7b 	bl	800ddb8 <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	483f      	ldr	r0, [pc, #252]	@ (80029d0 <ADBMS_Print_Vals+0x21c>)
 80028d4:	f00b fa70 	bl	800ddb8 <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe32 	bl	8000548 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	483a      	ldr	r0, [pc, #232]	@ (80029d4 <ADBMS_Print_Vals+0x220>)
 80028ea:	f00b fa65 	bl	800ddb8 <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e023      	b.n	800293c <ADBMS_Print_Vals+0x188>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	e01a      	b.n	8002930 <ADBMS_Print_Vals+0x17c>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	00da      	lsls	r2, r3, #3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4413      	add	r3, r2
 8002902:	1c5c      	adds	r4, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	00da      	lsls	r2, r3, #3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4413      	add	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	3368      	adds	r3, #104	@ 0x68
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fe15 	bl	8000548 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4621      	mov	r1, r4
 8002924:	482c      	ldr	r0, [pc, #176]	@ (80029d8 <ADBMS_Print_Vals+0x224>)
 8002926:	f00b fa47 	bl	800ddb8 <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3301      	adds	r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b07      	cmp	r3, #7
 8002934:	dde1      	ble.n	80028fa <ADBMS_Print_Vals+0x146>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	ddd8      	ble.n	80028f4 <ADBMS_Print_Vals+0x140>
        }
    }
    printf("\n");
 8002942:	200a      	movs	r0, #10
 8002944:	f00b fa4a 	bl	800dddc <putchar>

    printf("Faults\n");
 8002948:	4824      	ldr	r0, [pc, #144]	@ (80029dc <ADBMS_Print_Vals+0x228>)
 800294a:	f00b faa5 	bl	800de98 <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002954:	4619      	mov	r1, r3
 8002956:	4822      	ldr	r0, [pc, #136]	@ (80029e0 <ADBMS_Print_Vals+0x22c>)
 8002958:	f00b fa2e 	bl	800ddb8 <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8002962:	4619      	mov	r1, r3
 8002964:	481f      	ldr	r0, [pc, #124]	@ (80029e4 <ADBMS_Print_Vals+0x230>)
 8002966:	f00b fa27 	bl	800ddb8 <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8002970:	4619      	mov	r1, r3
 8002972:	481d      	ldr	r0, [pc, #116]	@ (80029e8 <ADBMS_Print_Vals+0x234>)
 8002974:	f00b fa20 	bl	800ddb8 <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800297e:	4619      	mov	r1, r3
 8002980:	481a      	ldr	r0, [pc, #104]	@ (80029ec <ADBMS_Print_Vals+0x238>)
 8002982:	f00b fa19 	bl	800ddb8 <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800298c:	4619      	mov	r1, r3
 800298e:	4818      	ldr	r0, [pc, #96]	@ (80029f0 <ADBMS_Print_Vals+0x23c>)
 8002990:	f00b fa12 	bl	800ddb8 <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800299a:	4619      	mov	r1, r3
 800299c:	4815      	ldr	r0, [pc, #84]	@ (80029f4 <ADBMS_Print_Vals+0x240>)
 800299e:	f00b fa0b 	bl	800ddb8 <iprintf>
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	080104b0 	.word	0x080104b0
 80029b0:	080104bc 	.word	0x080104bc
 80029b4:	080104cc 	.word	0x080104cc
 80029b8:	080104d8 	.word	0x080104d8
 80029bc:	080104e4 	.word	0x080104e4
 80029c0:	080104f0 	.word	0x080104f0
 80029c4:	08010500 	.word	0x08010500
 80029c8:	0801050c 	.word	0x0801050c
 80029cc:	08010514 	.word	0x08010514
 80029d0:	08010524 	.word	0x08010524
 80029d4:	08010534 	.word	0x08010534
 80029d8:	08010544 	.word	0x08010544
 80029dc:	0801054c 	.word	0x0801054c
 80029e0:	08010554 	.word	0x08010554
 80029e4:	08010568 	.word	0x08010568
 80029e8:	0801057c 	.word	0x0801057c
 80029ec:	08010588 	.word	0x08010588
 80029f0:	080105a0 	.word	0x080105a0
 80029f4:	080105b0 	.word	0x080105b0

080029f8 <bms_mainbaord_setup>:
#include "bms.h"

mainboard_ mainboard;

void bms_mainbaord_setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin, ADC_HandleTypeDef *hadc, CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09c      	sub	sp, #112	@ 0x70
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
	// initialize handles
	mainboard.hadc = hadc;
 8002a08:	4a36      	ldr	r2, [pc, #216]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	mainboard.hcan_drive = hcan1;
 8002a10:	4a34      	ldr	r2, [pc, #208]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a14:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
	mainboard.hcan_data = hcan2;
 8002a18:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a1c:	f8c2 3228 	str.w	r3, [r2, #552]	@ 0x228

	// get offset for current
	mainboard.current_offset = getCurrentOffset(mainboard.hadc);
 8002a20:	4b30      	ldr	r3, [pc, #192]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a22:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fe26 	bl	8003678 <getCurrentOffset>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a32:	edc3 7a8d 	vstr	s15, [r3, #564]	@ 0x234

	// initialize ad chip;
	ADBMS_Interface_Initialize(&mainboard.adbms, hspi, csb_pinBank, csb_pin);
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	68f9      	ldr	r1, [r7, #12]
 8002a3c:	4829      	ldr	r0, [pc, #164]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a3e:	f7ff f807 	bl	8001a50 <ADBMS_Interface_Initialize>

	// initialize CAN;
	BMS_Initialize_Can(&mainboard);
 8002a42:	4828      	ldr	r0, [pc, #160]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002a44:	f000 f960 	bl	8002d08 <BMS_Initialize_Can>

	// initialize the timers: adbms_mainboard_loop, drive_can, data_can
	timer_ t_adbms = CreateTimer(500, bms_mainboard_loop);
 8002a48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a4c:	4a26      	ldr	r2, [pc, #152]	@ (8002ae8 <bms_mainbaord_setup+0xf0>)
 8002a4e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fddc 	bl	8004610 <CreateTimer>
	timer_ t_adbms_owc_check = CreateTimer(30000, adbms_owc_loop);
 8002a58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <bms_mainbaord_setup+0xf4>)
 8002a5e:	f247 5130 	movw	r1, #30000	@ 0x7530
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fdd4 	bl	8004610 <CreateTimer>
	timer_ t_drive_can = CreateTimer(100, drive_can_loop);
 8002a68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <bms_mainbaord_setup+0xf8>)
 8002a6e:	2164      	movs	r1, #100	@ 0x64
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fdcd 	bl	8004610 <CreateTimer>
	timer_ t_data_can = CreateTimer(1000, data_can_loop);
 8002a76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <bms_mainbaord_setup+0xfc>)
 8002a7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fdc5 	bl	8004610 <CreateTimer>
	timer_ timers[NUM_TIMERS] = {t_adbms, t_adbms_owc_check, t_drive_can, t_data_can};
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ab4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mainboard.tg = CreateTimerGroup(timers);
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fdbf 	bl	8004646 <CreateTimerGroup>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a06      	ldr	r2, [pc, #24]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002acc:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218

	mainboard.start_time = HAL_GetTick();
 8002ad0:	f001 fea0 	bl	8004814 <HAL_GetTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a03      	ldr	r2, [pc, #12]	@ (8002ae4 <bms_mainbaord_setup+0xec>)
 8002ad8:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
}
 8002adc:	bf00      	nop
 8002ade:	3770      	adds	r7, #112	@ 0x70
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000308 	.word	0x20000308
 8002ae8:	08002b11 	.word	0x08002b11
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002e39 	.word	0x08002e39
 8002af4:	08002ea9 	.word	0x08002ea9

08002af8 <tick_mainboard_timers>:
{
  ADBMS_DMA_Complete(&mainboard.adbms); 
}

void tick_mainboard_timers()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	TickTimerGroup(mainboard.tg);
 8002afc:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <tick_mainboard_timers+0x14>)
 8002afe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 fdb8 	bl	8004678 <TickTimerGroup>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000308 	.word	0x20000308

08002b10 <bms_mainboard_loop>:

// ADBMS loop that gets ticked
void bms_mainboard_loop()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	UpdateValues();
 8002b14:	f000 f80e 	bl	8002b34 <UpdateValues>
	CheckFaults();
 8002b18:	f000 f87a 	bl	8002c10 <CheckFaults>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <adbms_owc_loop>:

// Seprate loop that gets ticked to run OWC
void adbms_owc_loop(){ UpdateOWCFault(&mainboard.adbms); }
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <adbms_owc_loop+0x10>)
 8002b26:	f7ff fbc5 	bl	80022b4 <UpdateOWCFault>
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000308 	.word	0x20000308

08002b34 <UpdateValues>:

void UpdateValues()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	// ADBMS values
	ADBMS_UpdateVoltages(&mainboard.adbms);
 8002b38:	4831      	ldr	r0, [pc, #196]	@ (8002c00 <UpdateValues+0xcc>)
 8002b3a:	f7ff f849 	bl	8001bd0 <ADBMS_UpdateVoltages>
	ADBMS_UpdateTemps(&mainboard.adbms);
 8002b3e:	4830      	ldr	r0, [pc, #192]	@ (8002c00 <UpdateValues+0xcc>)
 8002b40:	f7ff f85a 	bl	8001bf8 <ADBMS_UpdateTemps>

	UpdateADInternalFault(&mainboard.adbms);
 8002b44:	482e      	ldr	r0, [pc, #184]	@ (8002c00 <UpdateValues+0xcc>)
 8002b46:	f7ff fb0b 	bl	8002160 <UpdateADInternalFault>

	// update STM32 Pin values
	// reads: shutdown_contactors, IMD_Status, 6822_State
	mainboard.shutdown_present = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); 	   // shutdown status
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	482d      	ldr	r0, [pc, #180]	@ (8002c04 <UpdateValues+0xd0>)
 8002b4e:	f003 fd79 	bl	8006644 <HAL_GPIO_ReadPin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <UpdateValues+0xcc>)
 8002b60:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
	mainboard.imd_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			   // IMD_Status
 8002b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b68:	4827      	ldr	r0, [pc, #156]	@ (8002c08 <UpdateValues+0xd4>)
 8002b6a:	f003 fd6b 	bl	8006644 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <UpdateValues+0xcc>)
 8002b7c:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
	mainboard.comms_6822_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);	   // 6822_State
 8002b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b84:	481f      	ldr	r0, [pc, #124]	@ (8002c04 <UpdateValues+0xd0>)
 8002b86:	f003 fd5d 	bl	8006644 <HAL_GPIO_ReadPin>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <UpdateValues+0xcc>)
 8002b98:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
	mainboard.charger_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);		   // Charger_Pin
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	481a      	ldr	r0, [pc, #104]	@ (8002c08 <UpdateValues+0xd4>)
 8002ba0:	f003 fd50 	bl	8006644 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	4b13      	ldr	r3, [pc, #76]	@ (8002c00 <UpdateValues+0xcc>)
 8002bb2:	f883 223b 	strb.w	r2, [r3, #571]	@ 0x23b

	// get current
	mainboard.current = getCurrent(mainboard.hadc) - mainboard.current_offset;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <UpdateValues+0xcc>)
 8002bb8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fceb 	bl	8003598 <getCurrent>
 8002bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <UpdateValues+0xcc>)
 8002bc8:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <UpdateValues+0xcc>)
 8002bd2:	edc3 7a8c 	vstr	s15, [r3, #560]	@ 0x230
	mainboard.overcurrent_fault = mainboard.current > OVERCURRENT;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <UpdateValues+0xcc>)
 8002bd8:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8002bdc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c0c <UpdateValues+0xd8>
 8002be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	bfcc      	ite	gt
 8002bea:	2301      	movgt	r3, #1
 8002bec:	2300      	movle	r3, #0
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <UpdateValues+0xcc>)
 8002bf2:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238

	if(ENABLE_PRINTF_DEBUG_COMMS) send_data_over_printf(); 
 8002bf6:	f000 f871 	bl	8002cdc <send_data_over_printf>
	if(ENABLE_USB_COMMS) send_data_over_USB(); 
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000308 	.word	0x20000308
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	43070000 	.word	0x43070000

08002c10 <CheckFaults>:

void CheckFaults()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	// raise fault flag if any fault is true
	// faults are latching
	mainboard.bms_fault = mainboard.bms_fault 
 8002c14:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c16:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
							|| mainboard.adbms.overtemperature_fault_
							|| mainboard.adbms.undertemperature_fault_
							|| mainboard.adbms.openwire_fault_
							|| mainboard.adbms.openwire_temp_fault_
							|| mainboard.adbms.pec_fault_
							|| mainboard.overcurrent_fault;
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d127      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.overvoltage_fault_
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c20:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d122      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.undervoltage_fault_
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.overtemperature_fault_
 8002c32:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c34:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d118      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.undertemperature_fault_
 8002c3c:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c3e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d113      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_fault_
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c48:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_temp_fault_
 8002c50:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c52:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.adbms.pec_fault_
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c5c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <CheckFaults+0x5e>
							|| mainboard.overcurrent_fault;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c66:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <CheckFaults+0x62>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <CheckFaults+0x64>
 8002c72:	2300      	movs	r3, #0
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	b2da      	uxtb	r2, r3
	mainboard.bms_fault = mainboard.bms_fault 
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c7c:	f883 222d 	strb.w	r2, [r3, #557]	@ 0x22d

	// write BMS_Status - healthy is high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !mainboard.bms_fault);
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c82:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c92:	4810      	ldr	r0, [pc, #64]	@ (8002cd4 <CheckFaults+0xc4>)
 8002c94:	f003 fcee 	bl	8006674 <HAL_GPIO_WritePin>


	// set external faults
	mainboard.external_fault = !mainboard.shutdown_present;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <CheckFaults+0xc0>)
 8002c9a:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <CheckFaults+0xc0>)
 8002cb6:	f883 222c 	strb.w	r2, [r3, #556]	@ 0x22c

	// Turns on external LED if external fault
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, mainboard.external_fault);
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <CheckFaults+0xc0>)
 8002cbc:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2180      	movs	r1, #128	@ 0x80
 8002cc4:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <CheckFaults+0xc8>)
 8002cc6:	f003 fcd5 	bl	8006674 <HAL_GPIO_WritePin>

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000308 	.word	0x20000308
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020400 	.word	0x40020400

08002cdc <send_data_over_printf>:

void send_data_over_printf()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	// AD Prints
	ADBMS_Print_Vals(&mainboard.adbms);
 8002ce0:	4807      	ldr	r0, [pc, #28]	@ (8002d00 <send_data_over_printf+0x24>)
 8002ce2:	f7ff fd67 	bl	80027b4 <ADBMS_Print_Vals>

	// Mainboard Prints
	printf("Time: %d\n", (int)(HAL_GetTick() - mainboard.start_time));
 8002ce6:	f001 fd95 	bl	8004814 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <send_data_over_printf+0x24>)
 8002cee:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <send_data_over_printf+0x28>)
 8002cf8:	f00b f85e 	bl	800ddb8 <iprintf>
//	printf("External fault: %d\n", mainboard.external_fault);
//	printf("Current: %f\n", mainboard.current);
	
	// TODO Add more prints as needed

}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000308 	.word	0x20000308
 8002d04:	08010650 	.word	0x08010650

08002d08 <BMS_Initialize_Can>:
#include "bms_can.h"

bms_can_ bms_can;

void BMS_Initialize_Can(mainboard_ *mainboard)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	// Start CAN
	bms_can.mainboard = mainboard;
 8002d10:	4a3a      	ldr	r2, [pc, #232]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
	HAL_CAN_Start(bms_can.mainboard->hcan_drive);
 8002d16:	4b39      	ldr	r3, [pc, #228]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fb84 	bl	800542c <HAL_CAN_Start>
	HAL_CAN_Start(bms_can.mainboard->hcan_data);
 8002d24:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fb7d 	bl	800542c <HAL_CAN_Start>

	// Enable notifications (interrupts) for CAN, uses FIFO scheduling to receive msgs
	HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_drive, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002d32:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 fc89 	bl	8005654 <HAL_CAN_ActivateNotification>
	// HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_data, CAN_IT_RX_FIFO0_MSG_PENDING);	// Don't need to read Data CAN

	// SOC header initialization
	bms_can.TxHeaderSOC_.StdId = 0x150;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d44:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
	bms_can.TxHeaderSOC_.IDE = CAN_ID_STD;
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	635a      	str	r2, [r3, #52]	@ 0x34
	bms_can.TxHeaderSOC_.RTR = CAN_RTR_DATA;
 8002d50:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	@ 0x38
	bms_can.TxHeaderSOC_.DLC = 8; // we're sending 8 bytes of data for SOE
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d58:	2208      	movs	r2, #8
 8002d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Faults header initialization
	bms_can.TxHeaderFaults_.StdId = 0x151;
 8002d5c:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d5e:	f240 1251 	movw	r2, #337	@ 0x151
 8002d62:	64da      	str	r2, [r3, #76]	@ 0x4c
	bms_can.TxHeaderFaults_.IDE = CAN_ID_STD;
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54
	bms_can.TxHeaderFaults_.RTR = CAN_RTR_DATA;
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58
	bms_can.TxHeaderFaults_.DLC = 8;
 8002d70:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d72:	2208      	movs	r2, #8
 8002d74:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Status header initialization
	bms_can.TxHeaderStatus_.StdId = 0x152;
 8002d76:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d78:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8002d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
	bms_can.TxHeaderStatus_.IDE = CAN_ID_STD;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	675a      	str	r2, [r3, #116]	@ 0x74
	bms_can.TxHeaderStatus_.RTR = CAN_RTR_DATA;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	679a      	str	r2, [r3, #120]	@ 0x78
	bms_can.TxHeaderStatus_.DLC = 8;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	67da      	str	r2, [r3, #124]	@ 0x7c

	// Charger header initialization
	bms_can.TxHeaderCharger_.ExtId = 0x1806E5F4;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d92:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <BMS_Initialize_Can+0xf8>)
 8002d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	bms_can.TxHeaderCharger_.IDE = CAN_ID_EXT;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	bms_can.TxHeaderCharger_.RTR = CAN_RTR_DATA;
 8002da0:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	bms_can.TxHeaderCharger_.DLC = 8;
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002daa:	2208      	movs	r2, #8
 8002dac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	// Voltages header initialization
	bms_can.TxHeaderVoltages_.StdId = 0x153;
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002db2:	f240 1253 	movw	r2, #339	@ 0x153
 8002db6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	bms_can.TxHeaderVoltages_.IDE = CAN_ID_STD;
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	bms_can.TxHeaderVoltages_.RTR = CAN_RTR_DATA;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	bms_can.TxHeaderVoltages_.DLC = 8;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dcc:	2208      	movs	r2, #8
 8002dce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Temperatures header initialization
	bms_can.TxHeaderTemperatures_.StdId = 0x167;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dd4:	f240 1267 	movw	r2, #359	@ 0x167
 8002dd8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	bms_can.TxHeaderTemperatures_.IDE = CAN_ID_STD;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	bms_can.TxHeaderTemperatures_.RTR = CAN_RTR_DATA;
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	bms_can.TxHeaderTemperatures_.DLC = 8;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <BMS_Initialize_Can+0xf4>)
 8002dee:	2208      	movs	r2, #8
 8002df0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2000054c 	.word	0x2000054c
 8002e00:	1806e5f4 	.word	0x1806e5f4

08002e04 <send_can_messages>:

uint8_t send_can_messages(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *TxHeader, uint8_t *data, uint32_t *TxMailBox)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
	// send msg
	HAL_StatusTypeDef msg_status = HAL_CAN_AddTxMessage(hcan, TxHeader, data, TxMailBox);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f002 fb4b 	bl	80054b4 <HAL_CAN_AddTxMessage>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]

	if (msg_status != HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <send_can_messages+0x28>
	{
		// Error handling
//		printf("CAN Message failed\n");
		return 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <send_can_messages+0x2a>
	}
	return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <drive_can_loop>:

void drive_can_loop()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	// printf("Sending Drive CAN\n");

	// update and send soc
	populateBMS_SOC(bms_can.txDataSOC_);
 8002e3c:	4812      	ldr	r0, [pc, #72]	@ (8002e88 <drive_can_loop+0x50>)
 8002e3e:	f000 f88b 	bl	8002f58 <populateBMS_SOC>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderSOC_, bms_can.txDataSOC_, &bms_can.TxMailBox_);
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <drive_can_loop+0x54>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 0224 	ldr.w	r0, [r3, #548]	@ 0x224
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <drive_can_loop+0x58>)
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <drive_can_loop+0x50>)
 8002e4e:	4911      	ldr	r1, [pc, #68]	@ (8002e94 <drive_can_loop+0x5c>)
 8002e50:	f7ff ffd8 	bl	8002e04 <send_can_messages>

	// update and send faults
	populateBMS_Faults(bms_can.txDataFaults_);
 8002e54:	4810      	ldr	r0, [pc, #64]	@ (8002e98 <drive_can_loop+0x60>)
 8002e56:	f000 f903 	bl	8003060 <populateBMS_Faults>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderFaults_, bms_can.txDataFaults_, &bms_can.TxMailBox_);
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <drive_can_loop+0x54>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8d3 0224 	ldr.w	r0, [r3, #548]	@ 0x224
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <drive_can_loop+0x58>)
 8002e64:	4a0c      	ldr	r2, [pc, #48]	@ (8002e98 <drive_can_loop+0x60>)
 8002e66:	490d      	ldr	r1, [pc, #52]	@ (8002e9c <drive_can_loop+0x64>)
 8002e68:	f7ff ffcc 	bl	8002e04 <send_can_messages>

	// update and send status
	populateBMS_Status(bms_can.txDataStatus_);
 8002e6c:	480c      	ldr	r0, [pc, #48]	@ (8002ea0 <drive_can_loop+0x68>)
 8002e6e:	f000 f9ed 	bl	800324c <populateBMS_Status>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderStatus_, bms_can.txDataStatus_, &bms_can.TxMailBox_);
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <drive_can_loop+0x54>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8d3 0224 	ldr.w	r0, [r3, #548]	@ 0x224
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <drive_can_loop+0x58>)
 8002e7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <drive_can_loop+0x68>)
 8002e7e:	4909      	ldr	r1, [pc, #36]	@ (8002ea4 <drive_can_loop+0x6c>)
 8002e80:	f7ff ffc0 	bl	8002e04 <send_can_messages>
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000590 	.word	0x20000590
 8002e8c:	2000054c 	.word	0x2000054c
 8002e90:	20000550 	.word	0x20000550
 8002e94:	20000578 	.word	0x20000578
 8002e98:	200005b0 	.word	0x200005b0
 8002e9c:	20000598 	.word	0x20000598
 8002ea0:	200005d0 	.word	0x200005d0
 8002ea4:	200005b8 	.word	0x200005b8

08002ea8 <data_can_loop>:

void data_can_loop()
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
	// send voltage messages
	bms_can.TxHeaderVoltages_.StdId = 0x153; // set the message id for next iteration
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <data_can_loop+0x98>)
 8002eb0:	f240 1253 	movw	r2, #339	@ 0x153
 8002eb4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	e016      	b.n	8002eec <data_can_loop+0x44>
		populateBMS_VoltageMessages(bms_can.txDataVoltages_, i);
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4820      	ldr	r0, [pc, #128]	@ (8002f44 <data_can_loop+0x9c>)
 8002ec2:	f000 fa77 	bl	80033b4 <populateBMS_VoltageMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderVoltages_, bms_can.txDataVoltages_, &bms_can.TxMailBox_);
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <data_can_loop+0x98>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 0228 	ldr.w	r0, [r3, #552]	@ 0x228
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <data_can_loop+0xa0>)
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <data_can_loop+0x9c>)
 8002ed2:	491e      	ldr	r1, [pc, #120]	@ (8002f4c <data_can_loop+0xa4>)
 8002ed4:	f7ff ff96 	bl	8002e04 <send_can_messages>
		bms_can.TxHeaderVoltages_.StdId++;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <data_can_loop+0x98>)
 8002eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a17      	ldr	r2, [pc, #92]	@ (8002f40 <data_can_loop+0x98>)
 8002ee2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	dde5      	ble.n	8002ebe <data_can_loop+0x16>
	}

	// send temperature messages
	bms_can.TxHeaderTemperatures_.StdId = 0x167; // set the message id for next iteration
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <data_can_loop+0x98>)
 8002ef4:	f240 1267 	movw	r2, #359	@ 0x167
 8002ef8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002efc:	2300      	movs	r3, #0
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	e016      	b.n	8002f30 <data_can_loop+0x88>
		populateBMS_TemperatureMessages(bms_can.txDataTemperatures_, i);
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	4812      	ldr	r0, [pc, #72]	@ (8002f50 <data_can_loop+0xa8>)
 8002f06:	f000 fad7 	bl	80034b8 <populateBMS_TemperatureMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderTemperatures_, bms_can.txDataTemperatures_, &bms_can.TxMailBox_);
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <data_can_loop+0x98>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8d3 0228 	ldr.w	r0, [r3, #552]	@ 0x228
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <data_can_loop+0xa0>)
 8002f14:	4a0e      	ldr	r2, [pc, #56]	@ (8002f50 <data_can_loop+0xa8>)
 8002f16:	490f      	ldr	r1, [pc, #60]	@ (8002f54 <data_can_loop+0xac>)
 8002f18:	f7ff ff74 	bl	8002e04 <send_can_messages>
		bms_can.TxHeaderTemperatures_.StdId++;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <data_can_loop+0x98>)
 8002f1e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <data_can_loop+0x98>)
 8002f26:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	dde5      	ble.n	8002f02 <data_can_loop+0x5a>
	}
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000054c 	.word	0x2000054c
 8002f44:	20000610 	.word	0x20000610
 8002f48:	20000550 	.word	0x20000550
 8002f4c:	200005f8 	.word	0x200005f8
 8002f50:	20000630 	.word	0x20000630
 8002f54:	20000618 	.word	0x20000618

08002f58 <populateBMS_SOC>:

void populateBMS_SOC(uint8_t *data)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b0a9      	sub	sp, #164	@ 0xa4
 8002f5c:	af12      	add	r7, sp, #72	@ 0x48
 8002f5e:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[5];
	populateRawMessage(&signals[0], 0, 12, 0.1, 0);									  // max discharge current
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 800304c <populateBMS_SOC+0xf4>
 8002f68:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8003050 <populateBMS_SOC+0xf8>
 8002f6c:	210c      	movs	r1, #12
 8002f6e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800304c <populateBMS_SOC+0xf4>
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fec4 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[1], 0, 12, 0.1, 0);									  // max regen current
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 800304c <populateBMS_SOC+0xf4>
 8002f82:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8003050 <populateBMS_SOC+0xf8>
 8002f86:	210c      	movs	r1, #12
 8002f88:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800304c <populateBMS_SOC+0xf4>
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 feb7 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.total_v, 16, 0.01, 0);   // battery voltage
 8002f92:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <populateBMS_SOC+0xfc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	edd3 7a79 	vldr	s15, [r3, #484]	@ 0x1e4
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	3320      	adds	r3, #32
 8002fa0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800304c <populateBMS_SOC+0xf4>
 8002fa4:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8003058 <populateBMS_SOC+0x100>
 8002fa8:	2110      	movs	r1, #16
 8002faa:	eeb0 0a67 	vmov.f32	s0, s15
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fea6 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.avg_temp, 8, 1, -40);    // battery temp
 8002fb4:	4b27      	ldr	r3, [pc, #156]	@ (8003054 <populateBMS_SOC+0xfc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	3330      	adds	r3, #48	@ 0x30
 8002fc2:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800305c <populateBMS_SOC+0x104>
 8002fc6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002fca:	2108      	movs	r1, #8
 8002fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fe95 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->current, 16, 0.01, 0);		  // battery current
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <populateBMS_SOC+0xfc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	3340      	adds	r3, #64	@ 0x40
 8002fe4:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800304c <populateBMS_SOC+0xf4>
 8002fe8:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8003058 <populateBMS_SOC+0x100>
 8002fec:	2110      	movs	r1, #16
 8002fee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fe84 	bl	8003d00 <populateRawMessage>
	encodeSignals(data, 5, signals[0], signals[1], signals[2], signals[3], signals[4]);
 8002ff8:	ac0e      	add	r4, sp, #56	@ 0x38
 8002ffa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003004:	ac0a      	add	r4, sp, #40	@ 0x28
 8003006:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800300a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800300c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003010:	ac06      	add	r4, sp, #24
 8003012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800301c:	ac02      	add	r4, sp, #8
 800301e:	f107 0318 	add.w	r3, r7, #24
 8003022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003028:	466a      	mov	r2, sp
 800302a:	f107 0310 	add.w	r3, r7, #16
 800302e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003032:	e882 0003 	stmia.w	r2, {r0, r1}
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	cb0c      	ldmia	r3, {r2, r3}
 800303c:	2105      	movs	r1, #5
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 febd 	bl	8003dbe <encodeSignals>
}
 8003044:	bf00      	nop
 8003046:	375c      	adds	r7, #92	@ 0x5c
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	00000000 	.word	0x00000000
 8003050:	3dcccccd 	.word	0x3dcccccd
 8003054:	2000054c 	.word	0x2000054c
 8003058:	3c23d70a 	.word	0x3c23d70a
 800305c:	c2200000 	.word	0xc2200000

08003060 <populateBMS_Faults>:

void populateBMS_Faults(uint8_t *data)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b0c1      	sub	sp, #260	@ 0x104
 8003064:	af1e      	add	r7, sp, #120	@ 0x78
 8003066:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[8];
	populateRawMessage(&signals[0], bms_can.mainboard->bms_fault, 1, 1, 0);																  	// fault summary
 8003068:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <populateBMS_Faults+0x1e4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f893 322d 	ldrb.w	r3, [r3, #557]	@ 0x22d
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 8003248 <populateBMS_Faults+0x1e8>
 8003080:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003084:	2101      	movs	r1, #1
 8003086:	eeb0 0a67 	vmov.f32	s0, s15
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fe38 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->adbms.undervoltage_fault_, 1, 1, 0);												  	// undervoltage fault
 8003090:	4b6c      	ldr	r3, [pc, #432]	@ (8003244 <populateBMS_Faults+0x1e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	3310      	adds	r3, #16
 80030a6:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8003248 <populateBMS_Faults+0x1e8>
 80030aa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030ae:	2101      	movs	r1, #1
 80030b0:	eeb0 0a67 	vmov.f32	s0, s15
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fe23 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.overvoltage_fault_, 1, 1, 0);												   	// overvoltage fault
 80030ba:	4b62      	ldr	r3, [pc, #392]	@ (8003244 <populateBMS_Faults+0x1e4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	3320      	adds	r3, #32
 80030d0:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8003248 <populateBMS_Faults+0x1e8>
 80030d4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030d8:	2101      	movs	r1, #1
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe0e 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.undertemperature_fault_, 1, 1, 0);												// undertemp fault
 80030e4:	4b57      	ldr	r3, [pc, #348]	@ (8003244 <populateBMS_Faults+0x1e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	3330      	adds	r3, #48	@ 0x30
 80030fa:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8003248 <populateBMS_Faults+0x1e8>
 80030fe:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003102:	2101      	movs	r1, #1
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fdf9 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.overtemperature_fault_, 1, 1, 0);											 	// overemp fault
 800310e:	4b4d      	ldr	r3, [pc, #308]	@ (8003244 <populateBMS_Faults+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	3340      	adds	r3, #64	@ 0x40
 8003124:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8003248 <populateBMS_Faults+0x1e8>
 8003128:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800312c:	2101      	movs	r1, #1
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fde4 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->overcurrent_fault, 1, 1, 0);														 	// overcurrent fault
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <populateBMS_Faults+0x1e4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	f107 0308 	add.w	r3, r7, #8
 800314c:	3350      	adds	r3, #80	@ 0x50
 800314e:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8003248 <populateBMS_Faults+0x1e8>
 8003152:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003156:	2101      	movs	r1, #1
 8003158:	eeb0 0a67 	vmov.f32	s0, s15
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fdcf 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[6], bms_can.mainboard->external_fault, 1, 1, 0);													   			// external fault
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <populateBMS_Faults+0x1e4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f893 322c 	ldrb.w	r3, [r3, #556]	@ 0x22c
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	3360      	adds	r3, #96	@ 0x60
 8003178:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8003248 <populateBMS_Faults+0x1e8>
 800317c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003180:	2101      	movs	r1, #1
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fdba 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[7], (bms_can.mainboard->adbms.openwire_fault_ || bms_can.mainboard->adbms.openwire_temp_fault_), 1, 1, 0);	// open wire fault
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <populateBMS_Faults+0x1e4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <populateBMS_Faults+0x144>
 8003198:	4b2a      	ldr	r3, [pc, #168]	@ (8003244 <populateBMS_Faults+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <populateBMS_Faults+0x148>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <populateBMS_Faults+0x14a>
 80031a8:	2300      	movs	r3, #0
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	3370      	adds	r3, #112	@ 0x70
 80031b8:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8003248 <populateBMS_Faults+0x1e8>
 80031bc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80031c0:	2101      	movs	r1, #1
 80031c2:	eeb0 0a67 	vmov.f32	s0, s15
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fd9a 	bl	8003d00 <populateRawMessage>
	encodeSignals(data, 8, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 80031cc:	ac1a      	add	r4, sp, #104	@ 0x68
 80031ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80031d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031d8:	ac16      	add	r4, sp, #88	@ 0x58
 80031da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80031de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031e4:	ac12      	add	r4, sp, #72	@ 0x48
 80031e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80031ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031f0:	ac0e      	add	r4, sp, #56	@ 0x38
 80031f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80031f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031fc:	ac0a      	add	r4, sp, #40	@ 0x28
 80031fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003208:	ac06      	add	r4, sp, #24
 800320a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003214:	ac02      	add	r4, sp, #8
 8003216:	f107 0318 	add.w	r3, r7, #24
 800321a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800321c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003220:	466a      	mov	r2, sp
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800322a:	e882 0003 	stmia.w	r2, {r0, r1}
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	cb0c      	ldmia	r3, {r2, r3}
 8003234:	2108      	movs	r1, #8
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fdc1 	bl	8003dbe <encodeSignals>
}
 800323c:	bf00      	nop
 800323e:	378c      	adds	r7, #140	@ 0x8c
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	2000054c 	.word	0x2000054c
 8003248:	00000000 	.word	0x00000000

0800324c <populateBMS_Status>:

void populateBMS_Status(uint8_t *data)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b0b9      	sub	sp, #228	@ 0xe4
 8003250:	af1a      	add	r7, sp, #104	@ 0x68
 8003252:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[7];

	populateRawMessage(&signals[0], 0, 8, 1, 0);		 // BMS State
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80033a4 <populateBMS_Status+0x158>
 800325c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003260:	2108      	movs	r1, #8
 8003262:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 80033a4 <populateBMS_Status+0x158>
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fd4a 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->imd_status, 8, 1, 0);		 // IMD State
 800326c:	4b4e      	ldr	r3, [pc, #312]	@ (80033a8 <populateBMS_Status+0x15c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f893 323a 	ldrb.w	r3, [r3, #570]	@ 0x23a
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327c:	f107 0308 	add.w	r3, r7, #8
 8003280:	3310      	adds	r3, #16
 8003282:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80033a4 <populateBMS_Status+0x158>
 8003286:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800328a:	2108      	movs	r1, #8
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fd35 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.max_temp, 8, 1, -40);   // max cell temp
 8003296:	4b44      	ldr	r3, [pc, #272]	@ (80033a8 <populateBMS_Status+0x15c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	edd3 7a7d 	vldr	s15, [r3, #500]	@ 0x1f4
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	3320      	adds	r3, #32
 80032a4:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 80033ac <populateBMS_Status+0x160>
 80032a8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032ac:	2108      	movs	r1, #8
 80032ae:	eeb0 0a67 	vmov.f32	s0, s15
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fd24 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.min_temp, 8, 1, -40);   // min cell temp
 80032b8:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <populateBMS_Status+0x15c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	edd3 7a7e 	vldr	s15, [r3, #504]	@ 0x1f8
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	3330      	adds	r3, #48	@ 0x30
 80032c6:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 80033ac <populateBMS_Status+0x160>
 80032ca:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032ce:	2108      	movs	r1, #8
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fd13 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.max_v, 8, 0.012, 2);	 // max cell voltage
 80032da:	4b33      	ldr	r3, [pc, #204]	@ (80033a8 <populateBMS_Status+0x15c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	edd3 7a7a 	vldr	s15, [r3, #488]	@ 0x1e8
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	3340      	adds	r3, #64	@ 0x40
 80032e8:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 80032ec:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80033b0 <populateBMS_Status+0x164>
 80032f0:	2108      	movs	r1, #8
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd02 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->adbms.min_v, 8, 0.012, 2);	 // min cell voltage
 80032fc:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <populateBMS_Status+0x15c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	edd3 7a7b 	vldr	s15, [r3, #492]	@ 0x1ec
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	3350      	adds	r3, #80	@ 0x50
 800330a:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800330e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80033b0 <populateBMS_Status+0x164>
 8003312:	2108      	movs	r1, #8
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fcf1 	bl	8003d00 <populateRawMessage>
	populateRawMessage(&signals[6], 0, 8, 0.5, 0);									 // BMS SOC
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	3360      	adds	r3, #96	@ 0x60
 8003324:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80033a4 <populateBMS_Status+0x158>
 8003328:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800332c:	2108      	movs	r1, #8
 800332e:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80033a4 <populateBMS_Status+0x158>
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fce4 	bl	8003d00 <populateRawMessage>
	encodeSignals(data, 7, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6]);
 8003338:	ac16      	add	r4, sp, #88	@ 0x58
 800333a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003344:	ac12      	add	r4, sp, #72	@ 0x48
 8003346:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800334a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003350:	ac0e      	add	r4, sp, #56	@ 0x38
 8003352:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800335c:	ac0a      	add	r4, sp, #40	@ 0x28
 800335e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003368:	ac06      	add	r4, sp, #24
 800336a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800336e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003374:	ac02      	add	r4, sp, #8
 8003376:	f107 0318 	add.w	r3, r7, #24
 800337a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800337c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003380:	466a      	mov	r2, sp
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	e893 0003 	ldmia.w	r3, {r0, r1}
 800338a:	e882 0003 	stmia.w	r2, {r0, r1}
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	cb0c      	ldmia	r3, {r2, r3}
 8003394:	2107      	movs	r1, #7
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fd11 	bl	8003dbe <encodeSignals>
}
 800339c:	bf00      	nop
 800339e:	377c      	adds	r7, #124	@ 0x7c
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	00000000 	.word	0x00000000
 80033a8:	2000054c 	.word	0x2000054c
 80033ac:	c2200000 	.word	0xc2200000
 80033b0:	3c449ba6 	.word	0x3c449ba6

080033b4 <populateBMS_VoltageMessages>:


void populateBMS_VoltageMessages(uint8_t *data, int volt_msg_num)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b0c3      	sub	sp, #268	@ 0x10c
 80033b8:	af1e      	add	r7, sp, #120	@ 0x78
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033c4:	e022      	b.n	800340c <populateBMS_VoltageMessages+0x58>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.voltages[volt_msg_num * NUM_DATA_CAN_VOLTAGES_PER_MSG + i], 8, 0.012, 2);
 80033c6:	f107 0208 	add.w	r2, r7, #8
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	18d0      	adds	r0, r2, r3
 80033d2:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <populateBMS_VoltageMessages+0xf4>)
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9a      	subs	r2, r3, r2
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e2:	4413      	add	r3, r2
 80033e4:	334c      	adds	r3, #76	@ 0x4c
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3304      	adds	r3, #4
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 80033f4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80034ac <populateBMS_VoltageMessages+0xf8>
 80033f8:	2108      	movs	r1, #8
 80033fa:	eeb0 0a67 	vmov.f32	s0, s15
 80033fe:	f000 fc7f 	bl	8003d00 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003406:	3301      	adds	r3, #1
 8003408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800340c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003410:	2b06      	cmp	r3, #6
 8003412:	ddd8      	ble.n	80033c6 <populateBMS_VoltageMessages+0x12>
	}
	populateRawMessage(&signals[7], 0, 8, 0.004, 0);	// OCV msg that is legacy from BQ code and only included for backwards compatibility
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	3370      	adds	r3, #112	@ 0x70
 800341a:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 80034b0 <populateBMS_VoltageMessages+0xfc>
 800341e:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80034b4 <populateBMS_VoltageMessages+0x100>
 8003422:	2108      	movs	r1, #8
 8003424:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80034b0 <populateBMS_VoltageMessages+0xfc>
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fc69 	bl	8003d00 <populateRawMessage>
	// num_per_msg + 1 because includes the added OCV msg
	encodeSignals(data, NUM_DATA_CAN_VOLTAGES_PER_MSG+1, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 800342e:	ac1a      	add	r4, sp, #104	@ 0x68
 8003430:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800343a:	ac16      	add	r4, sp, #88	@ 0x58
 800343c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003446:	ac12      	add	r4, sp, #72	@ 0x48
 8003448:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800344c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800344e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003452:	ac0e      	add	r4, sp, #56	@ 0x38
 8003454:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800345e:	ac0a      	add	r4, sp, #40	@ 0x28
 8003460:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003466:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800346a:	ac06      	add	r4, sp, #24
 800346c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003472:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003476:	ac02      	add	r4, sp, #8
 8003478:	f107 0318 	add.w	r3, r7, #24
 800347c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003482:	466a      	mov	r2, sp
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800348c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	cb0c      	ldmia	r3, {r2, r3}
 8003496:	2108      	movs	r1, #8
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fc90 	bl	8003dbe <encodeSignals>
}
 800349e:	bf00      	nop
 80034a0:	3794      	adds	r7, #148	@ 0x94
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000054c 	.word	0x2000054c
 80034ac:	3c449ba6 	.word	0x3c449ba6
 80034b0:	00000000 	.word	0x00000000
 80034b4:	3b83126f 	.word	0x3b83126f

080034b8 <populateBMS_TemperatureMessages>:

void populateBMS_TemperatureMessages(uint8_t *data, int temp_num)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b0c3      	sub	sp, #268	@ 0x10c
 80034bc:	af1e      	add	r7, sp, #120	@ 0x78
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034c8:	e020      	b.n	800350c <populateBMS_TemperatureMessages+0x54>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.temperatures[temp_num * NUM_DATA_CAN_TEMPS_PER_MSG + i], 8, 1, -40);
 80034ca:	f107 0208 	add.w	r2, r7, #8
 80034ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	18d0      	adds	r0, r2, r3
 80034d6:	4b2d      	ldr	r3, [pc, #180]	@ (800358c <populateBMS_TemperatureMessages+0xd4>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	00d9      	lsls	r1, r3, #3
 80034de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e2:	440b      	add	r3, r1
 80034e4:	3368      	adds	r3, #104	@ 0x68
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	3304      	adds	r3, #4
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8003590 <populateBMS_TemperatureMessages+0xd8>
 80034f4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80034f8:	2108      	movs	r1, #8
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	f000 fbff 	bl	8003d00 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	3301      	adds	r3, #1
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800350c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003510:	2b07      	cmp	r3, #7
 8003512:	ddda      	ble.n	80034ca <populateBMS_TemperatureMessages+0x12>
	}
	encodeSignals(data, NUM_DATA_CAN_TEMPS_PER_MSG, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003514:	ac1a      	add	r4, sp, #104	@ 0x68
 8003516:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800351a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003520:	ac16      	add	r4, sp, #88	@ 0x58
 8003522:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800352c:	ac12      	add	r4, sp, #72	@ 0x48
 800352e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003538:	ac0e      	add	r4, sp, #56	@ 0x38
 800353a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800353e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003544:	ac0a      	add	r4, sp, #40	@ 0x28
 8003546:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800354a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800354c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003550:	ac06      	add	r4, sp, #24
 8003552:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800355c:	ac02      	add	r4, sp, #8
 800355e:	f107 0318 	add.w	r3, r7, #24
 8003562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003568:	466a      	mov	r2, sp
 800356a:	f107 0310 	add.w	r3, r7, #16
 800356e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003572:	e882 0003 	stmia.w	r2, {r0, r1}
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	cb0c      	ldmia	r3, {r2, r3}
 800357c:	2108      	movs	r1, #8
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fc1d 	bl	8003dbe <encodeSignals>
}
 8003584:	bf00      	nop
 8003586:	3794      	adds	r7, #148	@ 0x94
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	2000054c 	.word	0x2000054c
 8003590:	c2200000 	.word	0xc2200000
 8003594:	00000000 	.word	0x00000000

08003598 <getCurrent>:
#include "current_driver.h"

float getCurrent(ADC_HandleTypeDef *hadc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    // Start ADC and poll it
	HAL_ADC_Start(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f9ab 	bl	80048fc <HAL_ADC_Start>
	HAL_StatusTypeDef adc_poll_status = HAL_ADC_PollForConversion(hadc, 5000);
 80035a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f001 faab 	bl	8004b06 <HAL_ADC_PollForConversion>
 80035b0:	4603      	mov	r3, r0
 80035b2:	77fb      	strb	r3, [r7, #31]

    // lazy handling of adc polling
    if(adc_poll_status != HAL_OK){
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <getCurrent+0x32>
    	HAL_ADC_Stop(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 fa70 	bl	8004aa0 <HAL_ADC_Stop>
    	printf("current is not OK\n");
 80035c0:	482b      	ldr	r0, [pc, #172]	@ (8003670 <getCurrent+0xd8>)
 80035c2:	f00a fc69 	bl	800de98 <puts>
        return -1;
 80035c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <getCurrent+0xdc>)
 80035c8:	e03d      	b.n	8003646 <getCurrent+0xae>
    }

    // take 12 bit adc and convert into volts
    float raw_current = ((float) HAL_ADC_GetValue(hadc));
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 fb26 	bl	8004c1c <HAL_ADC_GetValue>
 80035d0:	ee07 0a90 	vmov	s15, r0
 80035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d8:	edc7 7a06 	vstr	s15, [r7, #24]
	float current_adc_voltage = raw_current*3.3/4095;
 80035dc:	69b8      	ldr	r0, [r7, #24]
 80035de:	f7fc ffb3 	bl	8000548 <__aeabi_f2d>
 80035e2:	a31d      	add	r3, pc, #116	@ (adr r3, 8003658 <getCurrent+0xc0>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f806 	bl	80005f8 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8003660 <getCurrent+0xc8>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fd f927 	bl	800084c <__aeabi_ddiv>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd facf 	bl	8000ba8 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	617b      	str	r3, [r7, #20]
	// i = v/r
	// Offset of 1.25V so can read both positive and negative current
	// where negative current is charging and positive is discharging
	// (adc_voltage - 1.65V) / (diff-op-amp gain of 2 * iso amp fixed gain of 41 (AMC3302DWE))
	// shunt resistance = 100u Ohms (SH6918F500BHEP)
	float current_adc_offset = current_adc_voltage - 1.25;
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8003616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800361a:	edc7 7a04 	vstr	s15, [r7, #16]
	float current = current_adc_offset/(2*41*0.0001);
 800361e:	6938      	ldr	r0, [r7, #16]
 8003620:	f7fc ff92 	bl	8000548 <__aeabi_f2d>
 8003624:	a310      	add	r3, pc, #64	@ (adr r3, 8003668 <getCurrent+0xd0>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fd f90f 	bl	800084c <__aeabi_ddiv>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd fab7 	bl	8000ba8 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	60fb      	str	r3, [r7, #12]

    // Stop ADC
	HAL_ADC_Stop(hadc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f001 fa2e 	bl	8004aa0 <HAL_ADC_Stop>
    return current;
 8003644:	68fb      	ldr	r3, [r7, #12]
}
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eeb0 0a67 	vmov.f32	s0, s15
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	f3af 8000 	nop.w
 8003658:	66666666 	.word	0x66666666
 800365c:	400a6666 	.word	0x400a6666
 8003660:	00000000 	.word	0x00000000
 8003664:	40affe00 	.word	0x40affe00
 8003668:	5e9e1b09 	.word	0x5e9e1b09
 800366c:	3f80cb29 	.word	0x3f80cb29
 8003670:	08010668 	.word	0x08010668
 8003674:	bf800000 	.word	0xbf800000

08003678 <getCurrentOffset>:


float getCurrentOffset(ADC_HandleTypeDef *hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	float total_current = 0;
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	e00d      	b.n	80036a8 <getCurrentOffset+0x30>
		total_current += getCurrent(hadc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff83 	bl	8003598 <getCurrent>
 8003692:	eeb0 7a40 	vmov.f32	s14, s0
 8003696:	edd7 7a03 	vldr	s15, [r7, #12]
 800369a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800369e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	ddee      	ble.n	800368c <getCurrentOffset+0x14>
	}
	return total_current / NUM_CURRENT_OFFSET_CYCLES;
 80036ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80036b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80036b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80036be:	eeb0 0a67 	vmov.f32	s0, s15
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80036e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80036e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80036f0:	e000      	b.n	80036f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80036f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80036f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f9      	beq.n	80036f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80036fe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e009      	b.n	800373c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	60ba      	str	r2, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ffc9 	bl	80036c8 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3301      	adds	r3, #1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	dbf1      	blt.n	8003728 <_write+0x12>
	}
	return len;
 8003744:	687b      	ldr	r3, [r7, #4]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003756:	f000 fff7 	bl	8004748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800375a:	f000 f837 	bl	80037cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800375e:	f000 fa23 	bl	8003ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003762:	f000 f9f9 	bl	8003b58 <MX_DMA_Init>
  MX_ADC1_Init();
 8003766:	f000 f89b 	bl	80038a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800376a:	f000 f9a9 	bl	8003ac0 <MX_TIM2_Init>
  MX_CAN1_Init();
 800376e:	f000 f8e9 	bl	8003944 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003772:	f000 f939 	bl	80039e8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003776:	f000 f96d 	bl	8003a54 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800377a:	f009 f85b 	bl	800c834 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 800377e:	2005      	movs	r0, #5
 8003780:	f001 f854 	bl	800482c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003784:	2201      	movs	r2, #1
 8003786:	2120      	movs	r1, #32
 8003788:	4809      	ldr	r0, [pc, #36]	@ (80037b0 <main+0x60>)
 800378a:	f002 ff73 	bl	8006674 <HAL_GPIO_WritePin>

  // init mainboard
  bms_mainbaord_setup(&hspi1, GPIOA, GPIO_PIN_4, &hadc1, &hcan1, &hcan2);
 800378e:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <main+0x64>)
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <main+0x68>)
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <main+0x6c>)
 8003798:	2210      	movs	r2, #16
 800379a:	4909      	ldr	r1, [pc, #36]	@ (80037c0 <main+0x70>)
 800379c:	4809      	ldr	r0, [pc, #36]	@ (80037c4 <main+0x74>)
 800379e:	f7ff f92b 	bl	80029f8 <bms_mainbaord_setup>

  printf("Board Starting...\n");
 80037a2:	4809      	ldr	r0, [pc, #36]	@ (80037c8 <main+0x78>)
 80037a4:	f00a fb78 	bl	800de98 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    tick_mainboard_timers();
 80037a8:	f7ff f9a6 	bl	8002af8 <tick_mainboard_timers>
 80037ac:	e7fc      	b.n	80037a8 <main+0x58>
 80037ae:	bf00      	nop
 80037b0:	40020400 	.word	0x40020400
 80037b4:	200006a8 	.word	0x200006a8
 80037b8:	20000680 	.word	0x20000680
 80037bc:	20000638 	.word	0x20000638
 80037c0:	40020000 	.word	0x40020000
 80037c4:	200006d0 	.word	0x200006d0
 80037c8:	0801067c 	.word	0x0801067c

080037cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b094      	sub	sp, #80	@ 0x50
 80037d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d2:	f107 0320 	add.w	r3, r7, #32
 80037d6:	2230      	movs	r2, #48	@ 0x30
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f00a fc3c 	bl	800e058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <SystemClock_Config+0xcc>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <SystemClock_Config+0xcc>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003800:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <SystemClock_Config+0xcc>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	4b22      	ldr	r3, [pc, #136]	@ (800389c <SystemClock_Config+0xd0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a21      	ldr	r2, [pc, #132]	@ (800389c <SystemClock_Config+0xd0>)
 8003816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <SystemClock_Config+0xd0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003828:	2301      	movs	r3, #1
 800382a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800382c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003832:	2302      	movs	r3, #2
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003836:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800383c:	2304      	movs	r3, #4
 800383e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003840:	23c0      	movs	r3, #192	@ 0xc0
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003844:	2306      	movs	r3, #6
 8003846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003848:	2308      	movs	r3, #8
 800384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384c:	f107 0320 	add.w	r3, r7, #32
 8003850:	4618      	mov	r0, r3
 8003852:	f004 f97b 	bl	8007b4c <HAL_RCC_OscConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800385c:	f000 fa4a 	bl	8003cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003860:	230f      	movs	r3, #15
 8003862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003864:	2302      	movs	r3, #2
 8003866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800386c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fbdc 	bl	800803c <HAL_RCC_ClockConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800388a:	f000 fa33 	bl	8003cf4 <Error_Handler>
  }
}
 800388e:	bf00      	nop
 8003890:	3750      	adds	r7, #80	@ 0x50
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000

080038a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038a6:	463b      	mov	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038b2:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038b4:	4a21      	ldr	r2, [pc, #132]	@ (800393c <MX_ADC1_Init+0x9c>)
 80038b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038d8:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038da:	2200      	movs	r2, #0
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038de:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038e0:	4a17      	ldr	r2, [pc, #92]	@ (8003940 <MX_ADC1_Init+0xa0>)
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80038ea:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <MX_ADC1_Init+0x98>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038fe:	480e      	ldr	r0, [pc, #56]	@ (8003938 <MX_ADC1_Init+0x98>)
 8003900:	f000 ffb8 	bl	8004874 <HAL_ADC_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800390a:	f000 f9f3 	bl	8003cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800390e:	2302      	movs	r3, #2
 8003910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800391a:	463b      	mov	r3, r7
 800391c:	4619      	mov	r1, r3
 800391e:	4806      	ldr	r0, [pc, #24]	@ (8003938 <MX_ADC1_Init+0x98>)
 8003920:	f001 f98a 	bl	8004c38 <HAL_ADC_ConfigChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800392a:	f000 f9e3 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000638 	.word	0x20000638
 800393c:	40012000 	.word	0x40012000
 8003940:	0f000001 	.word	0x0f000001

08003944 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800394a:	4b25      	ldr	r3, [pc, #148]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 800394c:	4a25      	ldr	r2, [pc, #148]	@ (80039e4 <MX_CAN1_Init+0xa0>)
 800394e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003950:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003952:	2210      	movs	r2, #16
 8003954:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003956:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800395c:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003962:	4b1f      	ldr	r3, [pc, #124]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003964:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003968:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003972:	2200      	movs	r2, #0
 8003974:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003976:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003978:	2200      	movs	r2, #0
 800397a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 800397e:	2200      	movs	r2, #0
 8003980:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003984:	2200      	movs	r2, #0
 8003986:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003988:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 800398a:	2200      	movs	r2, #0
 800398c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003990:	2200      	movs	r2, #0
 8003992:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003994:	4812      	ldr	r0, [pc, #72]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 8003996:	f001 fb6d 	bl	8005074 <HAL_CAN_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80039a0:	f000 f9a8 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80039a8:	2312      	movs	r3, #18
 80039aa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80039c4:	2301      	movs	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80039c8:	2314      	movs	r3, #20
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80039cc:	463b      	mov	r3, r7
 80039ce:	4619      	mov	r1, r3
 80039d0:	4803      	ldr	r0, [pc, #12]	@ (80039e0 <MX_CAN1_Init+0x9c>)
 80039d2:	f001 fc4b 	bl	800526c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	@ 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000680 	.word	0x20000680
 80039e4:	40006400 	.word	0x40006400

080039e8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80039ec:	4b17      	ldr	r3, [pc, #92]	@ (8003a4c <MX_CAN2_Init+0x64>)
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <MX_CAN2_Init+0x68>)
 80039f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80039f2:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <MX_CAN2_Init+0x64>)
 80039f4:	2210      	movs	r2, #16
 80039f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80039f8:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <MX_CAN2_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80039fe:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a0a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003a36:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <MX_CAN2_Init+0x64>)
 8003a38:	f001 fb1c 	bl	8005074 <HAL_CAN_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003a42:	f000 f957 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200006a8 	.word	0x200006a8
 8003a50:	40006800 	.word	0x40006800

08003a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a58:	4b17      	ldr	r3, [pc, #92]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a5a:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <MX_SPI1_Init+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a66:	4b14      	ldr	r3, [pc, #80]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a72:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a88:	2218      	movs	r2, #24
 8003a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003aa0:	220a      	movs	r2, #10
 8003aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	@ (8003ab8 <MX_SPI1_Init+0x64>)
 8003aa6:	f004 fcc1 	bl	800842c <HAL_SPI_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ab0:	f000 f920 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200006d0 	.word	0x200006d0
 8003abc:	40013000 	.word	0x40013000

08003ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003ade:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003af0:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af8:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b04:	4813      	ldr	r0, [pc, #76]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003b06:	f005 f8e3 	bl	8008cd0 <HAL_TIM_Base_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003b10:	f000 f8f0 	bl	8003cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003b22:	f005 f924 	bl	8008d6e <HAL_TIM_ConfigClockSource>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003b2c:	f000 f8e2 	bl	8003cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b38:	463b      	mov	r3, r7
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4805      	ldr	r0, [pc, #20]	@ (8003b54 <MX_TIM2_Init+0x94>)
 8003b3e:	f005 fb23 	bl	8009188 <HAL_TIMEx_MasterConfigSynchronization>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b48:	f000 f8d4 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200007e8 	.word	0x200007e8

08003b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <MX_DMA_Init+0x4c>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba4 <MX_DMA_Init+0x4c>)
 8003b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <MX_DMA_Init+0x4c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2038      	movs	r0, #56	@ 0x38
 8003b80:	f002 f8a3 	bl	8005cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b84:	2038      	movs	r0, #56	@ 0x38
 8003b86:	f002 f8bc 	bl	8005d02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	203b      	movs	r0, #59	@ 0x3b
 8003b90:	f002 f89b 	bl	8005cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003b94:	203b      	movs	r0, #59	@ 0x3b
 8003b96:	f002 f8b4 	bl	8005d02 <HAL_NVIC_EnableIRQ>

}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	4b48      	ldr	r3, [pc, #288]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a47      	ldr	r2, [pc, #284]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b45      	ldr	r3, [pc, #276]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a39      	ldr	r2, [pc, #228]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c22:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <MX_GPIO_Init+0x13c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8003c34:	482c      	ldr	r0, [pc, #176]	@ (8003ce8 <MX_GPIO_Init+0x140>)
 8003c36:	f002 fd1d 	bl	8006674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c40:	482a      	ldr	r0, [pc, #168]	@ (8003cec <MX_GPIO_Init+0x144>)
 8003c42:	f002 fd17 	bl	8006674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 8003c46:	2200      	movs	r2, #0
 8003c48:	21e0      	movs	r1, #224	@ 0xe0
 8003c4a:	4829      	ldr	r0, [pc, #164]	@ (8003cf0 <MX_GPIO_Init+0x148>)
 8003c4c:	f002 fd12 	bl	8006674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 8003c50:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	481f      	ldr	r0, [pc, #124]	@ (8003ce8 <MX_GPIO_Init+0x140>)
 8003c6a:	f002 fb4f 	bl	800630c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 8003c6e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	481b      	ldr	r0, [pc, #108]	@ (8003cf0 <MX_GPIO_Init+0x148>)
 8003c84:	f002 fb42 	bl	800630c <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8003c88:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4813      	ldr	r0, [pc, #76]	@ (8003cec <MX_GPIO_Init+0x144>)
 8003c9e:	f002 fb35 	bl	800630c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 8003ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	480c      	ldr	r0, [pc, #48]	@ (8003cec <MX_GPIO_Init+0x144>)
 8003cbc:	f002 fb26 	bl	800630c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 8003cc0:	23e0      	movs	r3, #224	@ 0xe0
 8003cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	@ (8003cf0 <MX_GPIO_Init+0x148>)
 8003cd8:	f002 fb18 	bl	800630c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cdc:	bf00      	nop
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	40020400 	.word	0x40020400

08003cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf8:	b672      	cpsid	i
}
 8003cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <Error_Handler+0x8>

08003d00 <populateRawMessage>:
#include "nfr_can_driver.h"

// Populates a RawCanSignal with data, given a start bit, lenght, factor, and offset
void populateRawMessage(RawCanSignal *signal, float raw_data, int length, float factor, float offset)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6178      	str	r0, [r7, #20]
 8003d08:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d0c:	60f9      	str	r1, [r7, #12]
 8003d0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d12:	ed87 1a01 	vstr	s2, [r7, #4]
    // offset and factor data
    uint64_t raw_value = (uint64_t)((raw_data - offset) / factor);
 8003d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d2a:	ee16 0a90 	vmov	r0, s13
 8003d2e:	f7fc ffa3 	bl	8000c78 <__aeabi_f2ulz>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // copy data into RawCanSignal
    memcpy(&(signal->raw_data), &raw_value, sizeof(raw_value));
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d40:	600a      	str	r2, [r1, #0]
 8003d42:	604b      	str	r3, [r1, #4]
    signal->length = length;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	609a      	str	r2, [r3, #8]

}
 8003d4a:	bf00      	nop
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <generateMask>:
    printf("\n");
}

// Generates a mask for given position and length
uint64_t generateMask(int pos, int len)
{
 8003d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
    return (0xFFFFFFFFFFFFFFFFull << (64 - len) >> (64 - len - pos));
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	f1c1 0640 	rsb	r6, r1, #64	@ 0x40
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6a:	f1a6 0e20 	sub.w	lr, r6, #32
 8003d6e:	f1c6 0c20 	rsb	ip, r6, #32
 8003d72:	fa01 f306 	lsl.w	r3, r1, r6
 8003d76:	fa00 fe0e 	lsl.w	lr, r0, lr
 8003d7a:	ea43 030e 	orr.w	r3, r3, lr
 8003d7e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003d82:	ea43 030c 	orr.w	r3, r3, ip
 8003d86:	fa00 f206 	lsl.w	r2, r0, r6
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	f1c1 0040 	rsb	r0, r1, #64	@ 0x40
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	1a41      	subs	r1, r0, r1
 8003d94:	f1c1 0620 	rsb	r6, r1, #32
 8003d98:	f1a1 0020 	sub.w	r0, r1, #32
 8003d9c:	fa22 f401 	lsr.w	r4, r2, r1
 8003da0:	fa03 f606 	lsl.w	r6, r3, r6
 8003da4:	4334      	orrs	r4, r6
 8003da6:	fa23 f000 	lsr.w	r0, r3, r0
 8003daa:	4304      	orrs	r4, r0
 8003dac:	fa23 f501 	lsr.w	r5, r3, r1
 8003db0:	4622      	mov	r2, r4
 8003db2:	462b      	mov	r3, r5
}
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dbe <encodeSignals>:

// Encodes a CAN msg with number of sub-messages
void encodeSignals(uint8_t *data, int count, ...)
{
 8003dbe:	b40e      	push	{r1, r2, r3}
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	b092      	sub	sp, #72	@ 0x48
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
    va_list args;
    va_start(args, count);
 8003dca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t buffer = 0;
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    int len_ptr = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003de4:	e03c      	b.n	8003e60 <encodeSignals+0xa2>
    {
        RawCanSignal temp = va_arg(args, RawCanSignal);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	3307      	adds	r3, #7
 8003dea:	f023 0307 	bic.w	r3, r3, #7
 8003dee:	f103 0210 	add.w	r2, r3, #16
 8003df2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003df4:	f107 0610 	add.w	r6, r7, #16
 8003df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // shift data over and apply mask then add to buffer
        uint64_t mask = generateMask(len_ptr, temp.length);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4619      	mov	r1, r3
 8003e02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003e04:	f7ff ffa5 	bl	8003d52 <generateMask>
 8003e08:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        buffer |= (temp.raw_data.as_uint64 << len_ptr) & mask;
 8003e0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e12:	f1a1 0620 	sub.w	r6, r1, #32
 8003e16:	f1c1 0020 	rsb	r0, r1, #32
 8003e1a:	fa03 f501 	lsl.w	r5, r3, r1
 8003e1e:	fa02 f606 	lsl.w	r6, r2, r6
 8003e22:	4335      	orrs	r5, r6
 8003e24:	fa22 f000 	lsr.w	r0, r2, r0
 8003e28:	4305      	orrs	r5, r0
 8003e2a:	fa02 f401 	lsl.w	r4, r2, r1
 8003e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e32:	ea04 0a02 	and.w	sl, r4, r2
 8003e36:	ea05 0b03 	and.w	fp, r5, r3
 8003e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e3e:	ea42 010a 	orr.w	r1, r2, sl
 8003e42:	6039      	str	r1, [r7, #0]
 8003e44:	ea43 030b 	orr.w	r3, r3, fp
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // update length
        len_ptr += temp.length;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e56:	4413      	add	r3, r2
 8003e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3be      	bcc.n	8003de6 <encodeSignals+0x28>
    }

    // fill in msg
    for (size_t i = 0; i < 8; i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e6c:	e01c      	b.n	8003ea8 <encodeSignals+0xea>
    {
        data[i] = (buffer >> (i * 8)) & 0xFF;
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e70:	00d9      	lsls	r1, r3, #3
 8003e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e76:	f1c1 0420 	rsb	r4, r1, #32
 8003e7a:	f1a1 0020 	sub.w	r0, r1, #32
 8003e7e:	fa22 f801 	lsr.w	r8, r2, r1
 8003e82:	fa03 f404 	lsl.w	r4, r3, r4
 8003e86:	ea48 0804 	orr.w	r8, r8, r4
 8003e8a:	fa23 f000 	lsr.w	r0, r3, r0
 8003e8e:	ea48 0800 	orr.w	r8, r8, r0
 8003e92:	fa23 f901 	lsr.w	r9, r3, r1
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9a:	4413      	add	r3, r2
 8003e9c:	fa5f f288 	uxtb.w	r2, r8
 8003ea0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; i++)
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	2b07      	cmp	r3, #7
 8003eac:	d9df      	bls.n	8003e6e <encodeSignals+0xb0>
    }
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	3748      	adds	r7, #72	@ 0x48
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	b003      	add	sp, #12
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	4a0f      	ldr	r2, [pc, #60]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4a08      	ldr	r2, [pc, #32]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_MspInit+0x4c>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	@ 0x28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a17      	ldr	r2, [pc, #92]	@ (8003f8c <HAL_ADC_MspInit+0x7c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d127      	bne.n	8003f82 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	4b16      	ldr	r3, [pc, #88]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	4a15      	ldr	r2, [pc, #84]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f42:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <HAL_ADC_MspInit+0x80>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4805      	ldr	r0, [pc, #20]	@ (8003f94 <HAL_ADC_MspInit+0x84>)
 8003f7e:	f002 f9c5 	bl	800630c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003f82:	bf00      	nop
 8003f84:	3728      	adds	r7, #40	@ 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40012000 	.word	0x40012000
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40020000 	.word	0x40020000

08003f98 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	@ 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a47      	ldr	r2, [pc, #284]	@ (80040d4 <HAL_CAN_MspInit+0x13c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d13e      	bne.n	8004038 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a45      	ldr	r2, [pc, #276]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 8003fc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003fc4:	4b44      	ldr	r3, [pc, #272]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10d      	bne.n	8003fe8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	4b42      	ldr	r3, [pc, #264]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a41      	ldr	r2, [pc, #260]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004004:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004016:	2309      	movs	r3, #9
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	482f      	ldr	r0, [pc, #188]	@ (80040e0 <HAL_CAN_MspInit+0x148>)
 8004022:	f002 f973 	bl	800630c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	2014      	movs	r0, #20
 800402c:	f001 fe4d 	bl	8005cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004030:	2014      	movs	r0, #20
 8004032:	f001 fe66 	bl	8005d02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004036:	e048      	b.n	80040ca <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a29      	ldr	r2, [pc, #164]	@ (80040e4 <HAL_CAN_MspInit+0x14c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d143      	bne.n	80040ca <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b25      	ldr	r3, [pc, #148]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	4a24      	ldr	r2, [pc, #144]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 800404c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004050:	6413      	str	r3, [r2, #64]	@ 0x40
 8004052:	4b22      	ldr	r3, [pc, #136]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800405e:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 8004066:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004068:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_CAN_MspInit+0x140>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10d      	bne.n	800408c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	4b19      	ldr	r3, [pc, #100]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 800407a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800407e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004080:	4b16      	ldr	r3, [pc, #88]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	6313      	str	r3, [r2, #48]	@ 0x30
 800409c:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <HAL_CAN_MspInit+0x144>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80040a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80040ba:	2309      	movs	r3, #9
 80040bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040be:	f107 031c 	add.w	r3, r7, #28
 80040c2:	4619      	mov	r1, r3
 80040c4:	4806      	ldr	r0, [pc, #24]	@ (80040e0 <HAL_CAN_MspInit+0x148>)
 80040c6:	f002 f921 	bl	800630c <HAL_GPIO_Init>
}
 80040ca:	bf00      	nop
 80040cc:	3730      	adds	r7, #48	@ 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40006400 	.word	0x40006400
 80040d8:	20000830 	.word	0x20000830
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40006800 	.word	0x40006800

080040e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a48      	ldr	r2, [pc, #288]	@ (8004228 <HAL_SPI_MspInit+0x140>)
 8004106:	4293      	cmp	r3, r2
 8004108:	f040 808a 	bne.w	8004220 <HAL_SPI_MspInit+0x138>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	4b46      	ldr	r3, [pc, #280]	@ (800422c <HAL_SPI_MspInit+0x144>)
 8004112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004114:	4a45      	ldr	r2, [pc, #276]	@ (800422c <HAL_SPI_MspInit+0x144>)
 8004116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800411a:	6453      	str	r3, [r2, #68]	@ 0x44
 800411c:	4b43      	ldr	r3, [pc, #268]	@ (800422c <HAL_SPI_MspInit+0x144>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b3f      	ldr	r3, [pc, #252]	@ (800422c <HAL_SPI_MspInit+0x144>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	4a3e      	ldr	r2, [pc, #248]	@ (800422c <HAL_SPI_MspInit+0x144>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6313      	str	r3, [r2, #48]	@ 0x30
 8004138:	4b3c      	ldr	r3, [pc, #240]	@ (800422c <HAL_SPI_MspInit+0x144>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004144:	23e0      	movs	r3, #224	@ 0xe0
 8004146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004150:	2303      	movs	r3, #3
 8004152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004154:	2305      	movs	r3, #5
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	4619      	mov	r1, r3
 800415e:	4834      	ldr	r0, [pc, #208]	@ (8004230 <HAL_SPI_MspInit+0x148>)
 8004160:	f002 f8d4 	bl	800630c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004164:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 8004166:	4a34      	ldr	r2, [pc, #208]	@ (8004238 <HAL_SPI_MspInit+0x150>)
 8004168:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800416a:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 800416c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004170:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004172:	4b30      	ldr	r3, [pc, #192]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004178:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	4b2d      	ldr	r3, [pc, #180]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 8004180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004184:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004186:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418c:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004192:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004198:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 800419a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800419e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a0:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80041a6:	4823      	ldr	r0, [pc, #140]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 80041a8:	f001 fdc6 	bl	8005d38 <HAL_DMA_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80041b2:	f7ff fd9f 	bl	8003cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 80041ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <HAL_SPI_MspInit+0x14c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_SPI_MspInit+0x158>)
 80041c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80041c8:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041ca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80041ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d6:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041d8:	2200      	movs	r2, #0
 80041da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041dc:	4b17      	ldr	r3, [pc, #92]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041e4:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ea:	4b14      	ldr	r3, [pc, #80]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041f6:	4b11      	ldr	r3, [pc, #68]	@ (800423c <HAL_SPI_MspInit+0x154>)
 80041f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fe:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004200:	2200      	movs	r2, #0
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004204:	480d      	ldr	r0, [pc, #52]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004206:	f001 fd97 	bl	8005d38 <HAL_DMA_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8004210:	f7ff fd70 	bl	8003cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a09      	ldr	r2, [pc, #36]	@ (800423c <HAL_SPI_MspInit+0x154>)
 8004218:	649a      	str	r2, [r3, #72]	@ 0x48
 800421a:	4a08      	ldr	r2, [pc, #32]	@ (800423c <HAL_SPI_MspInit+0x154>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	@ 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40013000 	.word	0x40013000
 800422c:	40023800 	.word	0x40023800
 8004230:	40020000 	.word	0x40020000
 8004234:	20000728 	.word	0x20000728
 8004238:	40026410 	.word	0x40026410
 800423c:	20000788 	.word	0x20000788
 8004240:	40026458 	.word	0x40026458

08004244 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004254:	d10d      	bne.n	8004272 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_TIM_Base_MspInit+0x3c>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	4a08      	ldr	r2, [pc, #32]	@ (8004280 <HAL_TIM_Base_MspInit+0x3c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6413      	str	r3, [r2, #64]	@ 0x40
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_TIM_Base_MspInit+0x3c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800

08004284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800428e:	4802      	ldr	r0, [pc, #8]	@ (8004298 <NMI_Handler+0x14>)
 8004290:	f002 f9f0 	bl	8006674 <HAL_GPIO_WritePin>
 8004294:	e7f8      	b.n	8004288 <NMI_Handler+0x4>
 8004296:	bf00      	nop
 8004298:	40020800 	.word	0x40020800

0800429c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042a6:	4802      	ldr	r0, [pc, #8]	@ (80042b0 <HardFault_Handler+0x14>)
 80042a8:	f002 f9e4 	bl	8006674 <HAL_GPIO_WritePin>
 80042ac:	e7f8      	b.n	80042a0 <HardFault_Handler+0x4>
 80042ae:	bf00      	nop
 80042b0:	40020800 	.word	0x40020800

080042b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042be:	4802      	ldr	r0, [pc, #8]	@ (80042c8 <MemManage_Handler+0x14>)
 80042c0:	f002 f9d8 	bl	8006674 <HAL_GPIO_WritePin>
 80042c4:	e7f8      	b.n	80042b8 <MemManage_Handler+0x4>
 80042c6:	bf00      	nop
 80042c8:	40020800 	.word	0x40020800

080042cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042d6:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <BusFault_Handler+0x14>)
 80042d8:	f002 f9cc 	bl	8006674 <HAL_GPIO_WritePin>
 80042dc:	e7f8      	b.n	80042d0 <BusFault_Handler+0x4>
 80042de:	bf00      	nop
 80042e0:	40020800 	.word	0x40020800

080042e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80042e8:	2200      	movs	r2, #0
 80042ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042ee:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <UsageFault_Handler+0x14>)
 80042f0:	f002 f9c0 	bl	8006674 <HAL_GPIO_WritePin>
 80042f4:	e7f8      	b.n	80042e8 <UsageFault_Handler+0x4>
 80042f6:	bf00      	nop
 80042f8:	40020800 	.word	0x40020800

080042fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800432a:	f000 fa5f 	bl	80047ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004338:	4802      	ldr	r0, [pc, #8]	@ (8004344 <CAN1_RX0_IRQHandler+0x10>)
 800433a:	f001 f9b1 	bl	80056a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000680 	.word	0x20000680

08004348 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800434c:	4802      	ldr	r0, [pc, #8]	@ (8004358 <DMA2_Stream0_IRQHandler+0x10>)
 800434e:	f001 fda1 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000728 	.word	0x20000728

0800435c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004360:	4802      	ldr	r0, [pc, #8]	@ (800436c <DMA2_Stream3_IRQHandler+0x10>)
 8004362:	f001 fd97 	bl	8005e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000788 	.word	0x20000788

08004370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004374:	4802      	ldr	r0, [pc, #8]	@ (8004380 <OTG_FS_IRQHandler+0x10>)
 8004376:	f002 fada 	bl	800692e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20001d1c 	.word	0x20001d1c

08004384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return 1;
 8004388:	2301      	movs	r3, #1
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <_kill>:

int _kill(int pid, int sig)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800439e:	f009 febd 	bl	800e11c <__errno>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2216      	movs	r2, #22
 80043a6:	601a      	str	r2, [r3, #0]
  return -1;
 80043a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_exit>:

void _exit (int status)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043bc:	f04f 31ff 	mov.w	r1, #4294967295
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ffe7 	bl	8004394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <_exit+0x12>

080043ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e00a      	b.n	80043f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043dc:	f3af 8000 	nop.w
 80043e0:	4601      	mov	r1, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	60ba      	str	r2, [r7, #8]
 80043e8:	b2ca      	uxtb	r2, r1
 80043ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	dbf0      	blt.n	80043dc <_read+0x12>
  }

  return len;
 80043fa:	687b      	ldr	r3, [r7, #4]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800442c:	605a      	str	r2, [r3, #4]
  return 0;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_isatty>:

int _isatty(int file)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004444:	2301      	movs	r3, #1
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004474:	4a14      	ldr	r2, [pc, #80]	@ (80044c8 <_sbrk+0x5c>)
 8004476:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <_sbrk+0x60>)
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004480:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <_sbrk+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004488:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <_sbrk+0x64>)
 800448a:	4a12      	ldr	r2, [pc, #72]	@ (80044d4 <_sbrk+0x68>)
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800448e:	4b10      	ldr	r3, [pc, #64]	@ (80044d0 <_sbrk+0x64>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d207      	bcs.n	80044ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800449c:	f009 fe3e 	bl	800e11c <__errno>
 80044a0:	4603      	mov	r3, r0
 80044a2:	220c      	movs	r2, #12
 80044a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e009      	b.n	80044c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044ac:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <_sbrk+0x64>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044b2:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <_sbrk+0x64>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	4a05      	ldr	r2, [pc, #20]	@ (80044d0 <_sbrk+0x64>)
 80044bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20020000 	.word	0x20020000
 80044cc:	00000400 	.word	0x00000400
 80044d0:	20000834 	.word	0x20000834
 80044d4:	20002570 	.word	0x20002570

080044d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <SystemInit+0x20>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	4a05      	ldr	r2, [pc, #20]	@ (80044f8 <SystemInit+0x20>)
 80044e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000ed00 	.word	0xe000ed00
 80044fc:	00000000 	.word	0x00000000

08004500 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8004500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	ed87 0a01 	vstr	s0, [r7, #4]
 800450c:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8004510:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <getTemp+0x100>)
 8004512:	ed93 7a00 	vldr	s14, [r3]
 8004516:	edd7 7a01 	vldr	s15, [r7, #4]
 800451a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800451e:	ed97 7a00 	vldr	s14, [r7]
 8004522:	edd7 7a01 	vldr	s15, [r7, #4]
 8004526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800452a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452e:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 8004532:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <getTemp+0x104>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f806 	bl	8000548 <__aeabi_f2d>
 800453c:	4604      	mov	r4, r0
 800453e:	460d      	mov	r5, r1
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7fc f801 	bl	8000548 <__aeabi_f2d>
 8004546:	4680      	mov	r8, r0
 8004548:	4689      	mov	r9, r1
 800454a:	4b2f      	ldr	r3, [pc, #188]	@ (8004608 <getTemp+0x108>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb fffa 	bl	8000548 <__aeabi_f2d>
 8004554:	4682      	mov	sl, r0
 8004556:	468b      	mov	fp, r1
 8004558:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <getTemp+0x104>)
 800455a:	edd3 7a00 	vldr	s15, [r3]
 800455e:	eeb1 7a67 	vneg.f32	s14, s15
 8004562:	4b2a      	ldr	r3, [pc, #168]	@ (800460c <getTemp+0x10c>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800456c:	ee16 0a90 	vmov	r0, s13
 8004570:	f7fb ffea 	bl	8000548 <__aeabi_f2d>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	ec43 2b10 	vmov	d0, r2, r3
 800457c:	f00b fb80 	bl	800fc80 <exp>
 8004580:	ec53 2b10 	vmov	r2, r3, d0
 8004584:	4650      	mov	r0, sl
 8004586:	4659      	mov	r1, fp
 8004588:	f7fc f836 	bl	80005f8 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4640      	mov	r0, r8
 8004592:	4649      	mov	r1, r9
 8004594:	f7fc f95a 	bl	800084c <__aeabi_ddiv>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	ec43 2b17 	vmov	d7, r2, r3
 80045a0:	eeb0 0a47 	vmov.f32	s0, s14
 80045a4:	eef0 0a67 	vmov.f32	s1, s15
 80045a8:	f00b fbb2 	bl	800fd10 <log>
 80045ac:	ec53 2b10 	vmov	r2, r3, d0
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fc f94a 	bl	800084c <__aeabi_ddiv>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f7fc faf2 	bl	8000ba8 <__aeabi_d2f>
 80045c4:	4603      	mov	r3, r0
 80045c6:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f7fb ffbd 	bl	8000548 <__aeabi_f2d>
 80045ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80045f8 <getTemp+0xf8>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fe58 	bl	8000288 <__aeabi_dsub>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	f7fc fae2 	bl	8000ba8 <__aeabi_d2f>
 80045e4:	4603      	mov	r3, r0
 80045e6:	ee07 3a90 	vmov	s15, r3
}
 80045ea:	eeb0 0a67 	vmov.f32	s0, s15
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f6:	bf00      	nop
 80045f8:	66666666 	.word	0x66666666
 80045fc:	40711266 	.word	0x40711266
 8004600:	2000001c 	.word	0x2000001c
 8004604:	20000024 	.word	0x20000024
 8004608:	20000020 	.word	0x20000020
 800460c:	20000028 	.word	0x20000028

08004610 <CreateTimer>:
#include "virtual_timer.h"

// Creates a new timer
timer_ CreateTimer(uint32_t duration_ms, Callback cb)
{
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b089      	sub	sp, #36	@ 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800461c:	f000 f8fa 	bl	8004814 <HAL_GetTick>
 8004620:	61f8      	str	r0, [r7, #28]
	timer_ timer = {tickstart, duration_ms, cb};
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	61bb      	str	r3, [r7, #24]
	return timer;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	461c      	mov	r4, r3
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800463a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	3724      	adds	r7, #36	@ 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd90      	pop	{r4, r7, pc}

08004646 <CreateTimerGroup>:

timer_group_ *CreateTimerGroup(timer_ timers[NUM_TIMERS])
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
	// Allocate the timer group structure
	timer_group_ *tg = (timer_group_ *)malloc(sizeof(timer_group_));
 800464e:	2030      	movs	r0, #48	@ 0x30
 8004650:	f008 fde4 	bl	800d21c <malloc>
 8004654:	4603      	mov	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
	if (!tg)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <CreateTimerGroup+0x1c>
	{
		return NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	e006      	b.n	8004670 <CreateTimerGroup+0x2a>
	}

	memcpy(tg->timers, timers, sizeof(timer_) * NUM_TIMERS);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2230      	movs	r2, #48	@ 0x30
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	f009 fd84 	bl	800e176 <memcpy>
	return tg;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <TickTimerGroup>:

// Ticks a timer group
void TickTimerGroup(timer_group_ *tg)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e02d      	b.n	80046e2 <TickTimerGroup+0x6a>
	{
		// HAL_GetTick is in ms
		// will error with a HAL_GetTick overflow
		if ((HAL_GetTick() - tg->timers[i].tickstart) > tg->timers[i].durations_ms)
 8004686:	f000 f8c5 	bl	8004814 <HAL_GetTick>
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	1ac1      	subs	r1, r0, r3
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4403      	add	r3, r0
 80046aa:	3304      	adds	r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4299      	cmp	r1, r3
 80046b0:	d914      	bls.n	80046dc <TickTimerGroup+0x64>
		{
			tg->timers[i].tickstart = HAL_GetTick();
 80046b2:	7bfc      	ldrb	r4, [r7, #15]
 80046b4:	f000 f8ae 	bl	8004814 <HAL_GetTick>
 80046b8:	4601      	mov	r1, r0
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4623      	mov	r3, r4
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4423      	add	r3, r4
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	6019      	str	r1, [r3, #0]
			tg->timers[i].cb();
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3308      	adds	r3, #8
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	3301      	adds	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d9ce      	bls.n	8004686 <TickTimerGroup+0xe>
		}
	}
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd90      	pop	{r4, r7, pc}
	...

080046f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80046f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800472c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80046f8:	f7ff feee 	bl	80044d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046fc:	480c      	ldr	r0, [pc, #48]	@ (8004730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046fe:	490d      	ldr	r1, [pc, #52]	@ (8004734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004700:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004704:	e002      	b.n	800470c <LoopCopyDataInit>

08004706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800470a:	3304      	adds	r3, #4

0800470c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800470c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800470e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004710:	d3f9      	bcc.n	8004706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004714:	4c0a      	ldr	r4, [pc, #40]	@ (8004740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004718:	e001      	b.n	800471e <LoopFillZerobss>

0800471a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800471a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800471c:	3204      	adds	r2, #4

0800471e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800471e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004720:	d3fb      	bcc.n	800471a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004722:	f009 fd01 	bl	800e128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004726:	f7ff f813 	bl	8003750 <main>
  bx  lr    
 800472a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800472c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004734:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8004738:	08010ca8 	.word	0x08010ca8
  ldr r2, =_sbss
 800473c:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8004740:	2000256c 	.word	0x2000256c

08004744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004744:	e7fe      	b.n	8004744 <ADC_IRQHandler>
	...

08004748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800474c:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <HAL_Init+0x40>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <HAL_Init+0x40>)
 8004752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <HAL_Init+0x40>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <HAL_Init+0x40>)
 800475e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <HAL_Init+0x40>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a07      	ldr	r2, [pc, #28]	@ (8004788 <HAL_Init+0x40>)
 800476a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004770:	2003      	movs	r0, #3
 8004772:	f001 fa9f 	bl	8005cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004776:	200f      	movs	r0, #15
 8004778:	f000 f808 	bl	800478c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800477c:	f7ff fba0 	bl	8003ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40023c00 	.word	0x40023c00

0800478c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_InitTick+0x54>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <HAL_InitTick+0x58>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fab7 	bl	8005d1e <HAL_SYSTICK_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00e      	b.n	80047d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b0f      	cmp	r3, #15
 80047be:	d80a      	bhi.n	80047d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047c0:	2200      	movs	r2, #0
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	f001 fa7f 	bl	8005cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047cc:	4a06      	ldr	r2, [pc, #24]	@ (80047e8 <HAL_InitTick+0x5c>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000018 	.word	0x20000018
 80047e4:	20000030 	.word	0x20000030
 80047e8:	2000002c 	.word	0x2000002c

080047ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047f0:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_IncTick+0x20>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_IncTick+0x24>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	4a04      	ldr	r2, [pc, #16]	@ (8004810 <HAL_IncTick+0x24>)
 80047fe:	6013      	str	r3, [r2, #0]
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000030 	.word	0x20000030
 8004810:	20000838 	.word	0x20000838

08004814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return uwTick;
 8004818:	4b03      	ldr	r3, [pc, #12]	@ (8004828 <HAL_GetTick+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000838 	.word	0x20000838

0800482c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004834:	f7ff ffee 	bl	8004814 <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d005      	beq.n	8004852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004846:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <HAL_Delay+0x44>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004852:	bf00      	nop
 8004854:	f7ff ffde 	bl	8004814 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	429a      	cmp	r2, r3
 8004862:	d8f7      	bhi.n	8004854 <HAL_Delay+0x28>
  {
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000030 	.word	0x20000030

08004874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e033      	b.n	80048f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fb3c 	bl	8003f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d118      	bne.n	80048e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048ba:	f023 0302 	bic.w	r3, r3, #2
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fad8 	bl	8004e7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80048e2:	e001      	b.n	80048e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_ADC_Start+0x1a>
 8004912:	2302      	movs	r3, #2
 8004914:	e0b2      	b.n	8004a7c <HAL_ADC_Start+0x180>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d018      	beq.n	800495e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800493c:	4b52      	ldr	r3, [pc, #328]	@ (8004a88 <HAL_ADC_Start+0x18c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a52      	ldr	r2, [pc, #328]	@ (8004a8c <HAL_ADC_Start+0x190>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0c9a      	lsrs	r2, r3, #18
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004950:	e002      	b.n	8004958 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3b01      	subs	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f9      	bne.n	8004952 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d17a      	bne.n	8004a62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004996:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049aa:	d106      	bne.n	80049ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	f023 0206 	bic.w	r2, r3, #6
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80049b8:	e002      	b.n	80049c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049c8:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <HAL_ADC_Start+0x194>)
 80049ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80049d4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d12a      	bne.n	8004a38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a94 <HAL_ADC_Start+0x198>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d015      	beq.n	8004a18 <HAL_ADC_Start+0x11c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a29      	ldr	r2, [pc, #164]	@ (8004a98 <HAL_ADC_Start+0x19c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d105      	bne.n	8004a02 <HAL_ADC_Start+0x106>
 80049f6:	4b26      	ldr	r3, [pc, #152]	@ (8004a90 <HAL_ADC_Start+0x194>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a25      	ldr	r2, [pc, #148]	@ (8004a9c <HAL_ADC_Start+0x1a0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d136      	bne.n	8004a7a <HAL_ADC_Start+0x17e>
 8004a0c:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_ADC_Start+0x194>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d130      	bne.n	8004a7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d129      	bne.n	8004a7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	e020      	b.n	8004a7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	@ (8004a94 <HAL_ADC_Start+0x198>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d11b      	bne.n	8004a7a <HAL_ADC_Start+0x17e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d114      	bne.n	8004a7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	e00b      	b.n	8004a7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f043 0210 	orr.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f043 0201 	orr.w	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000018 	.word	0x20000018
 8004a8c:	431bde83 	.word	0x431bde83
 8004a90:	40012300 	.word	0x40012300
 8004a94:	40012000 	.word	0x40012000
 8004a98:	40012100 	.word	0x40012100
 8004a9c:	40012200 	.word	0x40012200

08004aa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_ADC_Stop+0x16>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e021      	b.n	8004afa <HAL_ADC_Stop+0x5a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f043 0201 	orr.w	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b22:	d113      	bne.n	8004b4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b32:	d10b      	bne.n	8004b4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e063      	b.n	8004c14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b4c:	f7ff fe62 	bl	8004814 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b52:	e021      	b.n	8004b98 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d01d      	beq.n	8004b98 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_ADC_PollForConversion+0x6c>
 8004b62:	f7ff fe57 	bl	8004814 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d212      	bcs.n	8004b98 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d00b      	beq.n	8004b98 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e03d      	b.n	8004c14 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d1d6      	bne.n	8004b54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f06f 0212 	mvn.w	r2, #18
 8004bae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d123      	bne.n	8004c12 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11f      	bne.n	8004c12 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d006      	beq.n	8004bee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d111      	bne.n	8004c12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e105      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x228>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d925      	bls.n	8004cb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68d9      	ldr	r1, [r3, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	3b1e      	subs	r3, #30
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43da      	mvns	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	400a      	ands	r2, r1
 8004c88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68d9      	ldr	r1, [r3, #12]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4403      	add	r3, r0
 8004ca2:	3b1e      	subs	r3, #30
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e022      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6919      	ldr	r1, [r3, #16]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6919      	ldr	r1, [r3, #16]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4403      	add	r3, r0
 8004cec:	409a      	lsls	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d824      	bhi.n	8004d48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3b05      	subs	r3, #5
 8004d10:	221f      	movs	r2, #31
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43da      	mvns	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	3b05      	subs	r3, #5
 8004d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d46:	e04c      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d824      	bhi.n	8004d9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b23      	subs	r3, #35	@ 0x23
 8004d62:	221f      	movs	r2, #31
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	400a      	ands	r2, r1
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b23      	subs	r3, #35	@ 0x23
 8004d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d98:	e023      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	3b41      	subs	r3, #65	@ 0x41
 8004dac:	221f      	movs	r2, #31
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	400a      	ands	r2, r1
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4618      	mov	r0, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3b41      	subs	r3, #65	@ 0x41
 8004dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_ADC_ConfigChannel+0x234>)
 8004de4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <HAL_ADC_ConfigChannel+0x238>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d109      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x1cc>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b12      	cmp	r3, #18
 8004df6:	d105      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a19      	ldr	r2, [pc, #100]	@ (8004e70 <HAL_ADC_ConfigChannel+0x238>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d123      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x21e>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d003      	beq.n	8004e1e <HAL_ADC_ConfigChannel+0x1e6>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b11      	cmp	r3, #17
 8004e1c:	d11b      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d111      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <HAL_ADC_ConfigChannel+0x23c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a10      	ldr	r2, [pc, #64]	@ (8004e78 <HAL_ADC_ConfigChannel+0x240>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	0c9a      	lsrs	r2, r3, #18
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e48:	e002      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f9      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40012300 	.word	0x40012300
 8004e70:	40012000 	.word	0x40012000
 8004e74:	20000018 	.word	0x20000018
 8004e78:	431bde83 	.word	0x431bde83

08004e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e84:	4b79      	ldr	r3, [pc, #484]	@ (800506c <ADC_Init+0x1f0>)
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	021a      	lsls	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	4a58      	ldr	r2, [pc, #352]	@ (8005070 <ADC_Init+0x1f4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e00f      	b.n	8004f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0202 	bic.w	r2, r2, #2
 8004f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7e1b      	ldrb	r3, [r3, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01b      	beq.n	8004fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	035a      	lsls	r2, r3, #13
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e007      	b.n	8004ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	3b01      	subs	r3, #1
 800500c:	051a      	lsls	r2, r3, #20
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005032:	025a      	lsls	r2, r3, #9
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	029a      	lsls	r2, r3, #10
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40012300 	.word	0x40012300
 8005070:	0f000001 	.word	0x0f000001

08005074 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0ed      	b.n	8005262 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe ff80 	bl	8003f98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a8:	f7ff fbb4 	bl	8004814 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050ae:	e012      	b.n	80050d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b0:	f7ff fbb0 	bl	8004814 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b0a      	cmp	r3, #10
 80050bc:	d90b      	bls.n	80050d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2205      	movs	r2, #5
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0c5      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e5      	beq.n	80050b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0202 	bic.w	r2, r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f4:	f7ff fb8e 	bl	8004814 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050fa:	e012      	b.n	8005122 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050fc:	f7ff fb8a 	bl	8004814 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90b      	bls.n	8005122 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e09f      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7e1b      	ldrb	r3, [r3, #24]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d108      	bne.n	800514a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e007      	b.n	800515a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7e5b      	ldrb	r3, [r3, #25]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d108      	bne.n	8005174 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005182:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7e9b      	ldrb	r3, [r3, #26]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e007      	b.n	80051ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0220 	bic.w	r2, r2, #32
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7edb      	ldrb	r3, [r3, #27]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d108      	bne.n	80051c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0210 	bic.w	r2, r2, #16
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0210 	orr.w	r2, r2, #16
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7f1b      	ldrb	r3, [r3, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0208 	orr.w	r2, r2, #8
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0208 	bic.w	r2, r2, #8
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	7f5b      	ldrb	r3, [r3, #29]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d108      	bne.n	800521c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0204 	orr.w	r2, r2, #4
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e007      	b.n	800522c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005282:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d003      	beq.n	8005292 <HAL_CAN_ConfigFilter+0x26>
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	2b02      	cmp	r3, #2
 800528e:	f040 80be 	bne.w	800540e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005292:	4b65      	ldr	r3, [pc, #404]	@ (8005428 <HAL_CAN_ConfigFilter+0x1bc>)
 8005294:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800529c:	f043 0201 	orr.w	r2, r3, #1
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052ac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	431a      	orrs	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	2201      	movs	r2, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	401a      	ands	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d123      	bne.n	800533c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005316:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3248      	adds	r2, #72	@ 0x48
 800531c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005330:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	3348      	adds	r3, #72	@ 0x48
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	440b      	add	r3, r1
 800533a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d122      	bne.n	800538a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	431a      	orrs	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005364:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	3248      	adds	r2, #72	@ 0x48
 800536a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800537e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	3348      	adds	r3, #72	@ 0x48
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	43db      	mvns	r3, r3
 800539c:	401a      	ands	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80053a4:	e007      	b.n	80053b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	43db      	mvns	r3, r3
 80053c8:	401a      	ands	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80053d0:	e007      	b.n	80053e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	431a      	orrs	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005400:	f023 0201 	bic.w	r2, r3, #1
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e006      	b.n	800541c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40006400 	.word	0x40006400

0800542c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d12e      	bne.n	800549e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005458:	f7ff f9dc 	bl	8004814 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800545e:	e012      	b.n	8005486 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005460:	f7ff f9d8 	bl	8004814 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b0a      	cmp	r3, #10
 800546c:	d90b      	bls.n	8005486 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2205      	movs	r2, #5
 800547e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e012      	b.n	80054ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e006      	b.n	80054ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	@ 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80054d2:	7ffb      	ldrb	r3, [r7, #31]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d003      	beq.n	80054e0 <HAL_CAN_AddTxMessage+0x2c>
 80054d8:	7ffb      	ldrb	r3, [r7, #31]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	f040 80ad 	bne.w	800563a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8095 	beq.w	800562a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	0e1b      	lsrs	r3, r3, #24
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800550a:	2201      	movs	r2, #1
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	409a      	lsls	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10d      	bne.n	8005538 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	6809      	ldr	r1, [r1, #0]
 800552a:	431a      	orrs	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3318      	adds	r3, #24
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	440b      	add	r3, r1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e00f      	b.n	8005558 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005542:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800554c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	3318      	adds	r3, #24
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	440b      	add	r3, r1
 8005556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3318      	adds	r3, #24
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	440b      	add	r3, r1
 8005568:	3304      	adds	r3, #4
 800556a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	7d1b      	ldrb	r3, [r3, #20]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d111      	bne.n	8005598 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3318      	adds	r3, #24
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	6811      	ldr	r1, [r2, #0]
 8005588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3318      	adds	r3, #24
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	440b      	add	r3, r1
 8005594:	3304      	adds	r3, #4
 8005596:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3307      	adds	r3, #7
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	061a      	lsls	r2, r3, #24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3306      	adds	r3, #6
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3305      	adds	r3, #5
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	3204      	adds	r2, #4
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	4610      	mov	r0, r2
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	6811      	ldr	r1, [r2, #0]
 80055c0:	ea43 0200 	orr.w	r2, r3, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80055ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3303      	adds	r3, #3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	061a      	lsls	r2, r3, #24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3302      	adds	r3, #2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3301      	adds	r3, #1
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	4313      	orrs	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	4610      	mov	r0, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	ea43 0200 	orr.w	r2, r3, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	440b      	add	r3, r1
 8005600:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005604:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3318      	adds	r3, #24
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4413      	add	r3, r2
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3318      	adds	r3, #24
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	440b      	add	r3, r1
 8005624:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e00e      	b.n	8005648 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e006      	b.n	8005648 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3724      	adds	r7, #36	@ 0x24
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005664:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <HAL_CAN_ActivateNotification+0x1e>
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d109      	bne.n	8005686 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6959      	ldr	r1, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e006      	b.n	8005694 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	@ 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d07c      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d023      	beq.n	8005738 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f983 	bl	8005a0e <HAL_CAN_TxMailbox0CompleteCallback>
 8005708:	e016      	b.n	8005738 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
 800571c:	e00c      	b.n	8005738 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	e002      	b.n	8005738 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f989 	bl	8005a4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d024      	beq.n	800578c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800574a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f963 	bl	8005a22 <HAL_CAN_TxMailbox1CompleteCallback>
 800575c:	e016      	b.n	800578c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005770:	e00c      	b.n	800578c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
 8005784:	e002      	b.n	800578c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f969 	bl	8005a5e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d024      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800579e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f943 	bl	8005a36 <HAL_CAN_TxMailbox2CompleteCallback>
 80057b0:	e016      	b.n	80057e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c4:	e00c      	b.n	80057e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d8:	e002      	b.n	80057e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f949 	bl	8005a72 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2208      	movs	r2, #8
 800581e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f93a 	bl	8005a9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f921 	bl	8005a86 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2208      	movs	r2, #8
 8005882:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f91c 	bl	8005ac2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f903 	bl	8005aae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2210      	movs	r2, #16
 80058c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f906 	bl	8005ad6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2208      	movs	r2, #8
 80058e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8ff 	bl	8005aea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d07b      	beq.n	80059ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d072      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	f043 0302 	orr.w	r3, r3, #2
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	f043 0304 	orr.w	r3, r3, #4
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595a:	2b00      	cmp	r3, #0
 800595c:	d043      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03e      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800596e:	2b60      	cmp	r3, #96	@ 0x60
 8005970:	d02b      	beq.n	80059ca <HAL_CAN_IRQHandler+0x32a>
 8005972:	2b60      	cmp	r3, #96	@ 0x60
 8005974:	d82e      	bhi.n	80059d4 <HAL_CAN_IRQHandler+0x334>
 8005976:	2b50      	cmp	r3, #80	@ 0x50
 8005978:	d022      	beq.n	80059c0 <HAL_CAN_IRQHandler+0x320>
 800597a:	2b50      	cmp	r3, #80	@ 0x50
 800597c:	d82a      	bhi.n	80059d4 <HAL_CAN_IRQHandler+0x334>
 800597e:	2b40      	cmp	r3, #64	@ 0x40
 8005980:	d019      	beq.n	80059b6 <HAL_CAN_IRQHandler+0x316>
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d826      	bhi.n	80059d4 <HAL_CAN_IRQHandler+0x334>
 8005986:	2b30      	cmp	r3, #48	@ 0x30
 8005988:	d010      	beq.n	80059ac <HAL_CAN_IRQHandler+0x30c>
 800598a:	2b30      	cmp	r3, #48	@ 0x30
 800598c:	d822      	bhi.n	80059d4 <HAL_CAN_IRQHandler+0x334>
 800598e:	2b10      	cmp	r3, #16
 8005990:	d002      	beq.n	8005998 <HAL_CAN_IRQHandler+0x2f8>
 8005992:	2b20      	cmp	r3, #32
 8005994:	d005      	beq.n	80059a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005996:	e01d      	b.n	80059d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	f043 0308 	orr.w	r3, r3, #8
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059a0:	e019      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	f043 0310 	orr.w	r3, r3, #16
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059aa:	e014      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	f043 0320 	orr.w	r3, r3, #32
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059b4:	e00f      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059be:	e00a      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059c8:	e005      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059d2:	e000      	b.n	80059d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80059d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2204      	movs	r2, #4
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f87c 	bl	8005afe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a06:	bf00      	nop
 8005a08:	3728      	adds	r7, #40	@ 0x28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <__NVIC_SetPriorityGrouping>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b24:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <__NVIC_SetPriorityGrouping+0x44>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b46:	4a04      	ldr	r2, [pc, #16]	@ (8005b58 <__NVIC_SetPriorityGrouping+0x44>)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	60d3      	str	r3, [r2, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	e000ed00 	.word	0xe000ed00

08005b5c <__NVIC_GetPriorityGrouping>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b60:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <__NVIC_GetPriorityGrouping+0x18>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	f003 0307 	and.w	r3, r3, #7
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	e000ed00 	.word	0xe000ed00

08005b78 <__NVIC_EnableIRQ>:
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	db0b      	blt.n	8005ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	f003 021f 	and.w	r2, r3, #31
 8005b90:	4907      	ldr	r1, [pc, #28]	@ (8005bb0 <__NVIC_EnableIRQ+0x38>)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2001      	movs	r0, #1
 8005b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000e100 	.word	0xe000e100

08005bb4 <__NVIC_SetPriority>:
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	6039      	str	r1, [r7, #0]
 8005bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	db0a      	blt.n	8005bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	490c      	ldr	r1, [pc, #48]	@ (8005c00 <__NVIC_SetPriority+0x4c>)
 8005bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd2:	0112      	lsls	r2, r2, #4
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005bdc:	e00a      	b.n	8005bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4908      	ldr	r1, [pc, #32]	@ (8005c04 <__NVIC_SetPriority+0x50>)
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	3b04      	subs	r3, #4
 8005bec:	0112      	lsls	r2, r2, #4
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	761a      	strb	r2, [r3, #24]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	e000e100 	.word	0xe000e100
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <NVIC_EncodePriority>:
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	@ 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f1c3 0307 	rsb	r3, r3, #7
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	bf28      	it	cs
 8005c26:	2304      	movcs	r3, #4
 8005c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d902      	bls.n	8005c38 <NVIC_EncodePriority+0x30>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3b03      	subs	r3, #3
 8005c36:	e000      	b.n	8005c3a <NVIC_EncodePriority+0x32>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c50:	f04f 31ff 	mov.w	r1, #4294967295
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	43d9      	mvns	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c60:	4313      	orrs	r3, r2
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	@ 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <SysTick_Config>:
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c80:	d301      	bcc.n	8005c86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005c82:	2301      	movs	r3, #1
 8005c84:	e00f      	b.n	8005ca6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c86:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb0 <SysTick_Config+0x40>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c8e:	210f      	movs	r1, #15
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	f7ff ff8e 	bl	8005bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <SysTick_Config+0x40>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <SysTick_Config+0x40>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	e000e010 	.word	0xe000e010

08005cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff29 	bl	8005b14 <__NVIC_SetPriorityGrouping>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cdc:	f7ff ff3e 	bl	8005b5c <__NVIC_GetPriorityGrouping>
 8005ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	f7ff ff8e 	bl	8005c08 <NVIC_EncodePriority>
 8005cec:	4602      	mov	r2, r0
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff5d 	bl	8005bb4 <__NVIC_SetPriority>
}
 8005cfa:	bf00      	nop
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	4603      	mov	r3, r0
 8005d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff ff31 	bl	8005b78 <__NVIC_EnableIRQ>
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff ffa2 	bl	8005c70 <SysTick_Config>
 8005d2c:	4603      	mov	r3, r0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7fe fd66 	bl	8004814 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e099      	b.n	8005e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d74:	e00f      	b.n	8005d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d76:	f7fe fd4d 	bl	8004814 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d908      	bls.n	8005d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e078      	b.n	8005e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e8      	bne.n	8005d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4b38      	ldr	r3, [pc, #224]	@ (8005e90 <HAL_DMA_Init+0x158>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d107      	bne.n	8005e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0307 	bic.w	r3, r3, #7
 8005e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d117      	bne.n	8005e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9e9 	bl	8006214 <DMA_CheckFifoParam>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2240      	movs	r2, #64	@ 0x40
 8005e4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005e56:	2301      	movs	r3, #1
 8005e58:	e016      	b.n	8005e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9a0 	bl	80061a8 <DMA_CalcBaseAndBitshift>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e70:	223f      	movs	r2, #63	@ 0x3f
 8005e72:	409a      	lsls	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	f010803f 	.word	0xf010803f

08005e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea0:	4b8e      	ldr	r3, [pc, #568]	@ (80060dc <HAL_DMA_IRQHandler+0x248>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a8e      	ldr	r2, [pc, #568]	@ (80060e0 <HAL_DMA_IRQHandler+0x24c>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a9b      	lsrs	r3, r3, #10
 8005eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	409a      	lsls	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01a      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d013      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0204 	bic.w	r2, r2, #4
 8005ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eec:	2208      	movs	r2, #8
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef8:	f043 0201 	orr.w	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f04:	2201      	movs	r2, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d012      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f58:	2204      	movs	r2, #4
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f64:	f043 0204 	orr.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	2210      	movs	r2, #16
 8005f72:	409a      	lsls	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d043      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d03c      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	2210      	movs	r2, #16
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d024      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
 8005fc2:	e01f      	b.n	8006004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	e016      	b.n	8006004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d107      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0208 	bic.w	r2, r2, #8
 8005ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	2220      	movs	r2, #32
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 808f 	beq.w	8006134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8087 	beq.w	8006134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602a:	2220      	movs	r2, #32
 800602c:	409a      	lsls	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b05      	cmp	r3, #5
 800603c:	d136      	bne.n	80060ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0216 	bic.w	r2, r2, #22
 800604c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695a      	ldr	r2, [r3, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800605c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <HAL_DMA_IRQHandler+0x1da>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0208 	bic.w	r2, r2, #8
 800607c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006082:	223f      	movs	r2, #63	@ 0x3f
 8006084:	409a      	lsls	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d07e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
        }
        return;
 80060aa:	e079      	b.n	80061a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10d      	bne.n	80060e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d031      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
 80060d8:	e02c      	b.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
 80060da:	bf00      	nop
 80060dc:	20000018 	.word	0x20000018
 80060e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d023      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4798      	blx	r3
 80060f4:	e01e      	b.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10f      	bne.n	8006124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0210 	bic.w	r2, r2, #16
 8006112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006138:	2b00      	cmp	r3, #0
 800613a:	d032      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2205      	movs	r2, #5
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	3301      	adds	r3, #1
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d307      	bcc.n	800617c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f2      	bne.n	8006160 <HAL_DMA_IRQHandler+0x2cc>
 800617a:	e000      	b.n	800617e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800617c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
 800619e:	e000      	b.n	80061a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061a0:	bf00      	nop
    }
  }
}
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	3b10      	subs	r3, #16
 80061b8:	4a14      	ldr	r2, [pc, #80]	@ (800620c <DMA_CalcBaseAndBitshift+0x64>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061c2:	4a13      	ldr	r2, [pc, #76]	@ (8006210 <DMA_CalcBaseAndBitshift+0x68>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d909      	bls.n	80061ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	1d1a      	adds	r2, r3, #4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80061e8:	e007      	b.n	80061fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	aaaaaaab 	.word	0xaaaaaaab
 8006210:	080108e8 	.word	0x080108e8

08006214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d11f      	bne.n	800626e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d856      	bhi.n	80062e2 <DMA_CheckFifoParam+0xce>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <DMA_CheckFifoParam+0x28>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	0800624d 	.word	0x0800624d
 8006240:	0800625f 	.word	0x0800625f
 8006244:	0800624d 	.word	0x0800624d
 8006248:	080062e3 	.word	0x080062e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d046      	beq.n	80062e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800625c:	e043      	b.n	80062e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006266:	d140      	bne.n	80062ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626c:	e03d      	b.n	80062ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006276:	d121      	bne.n	80062bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d837      	bhi.n	80062ee <DMA_CheckFifoParam+0xda>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <DMA_CheckFifoParam+0x70>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	0800629b 	.word	0x0800629b
 800628c:	08006295 	.word	0x08006295
 8006290:	080062ad 	.word	0x080062ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      break;
 8006298:	e030      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d025      	beq.n	80062f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062aa:	e022      	b.n	80062f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062b4:	d11f      	bne.n	80062f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062ba:	e01c      	b.n	80062f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d903      	bls.n	80062ca <DMA_CheckFifoParam+0xb6>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062c8:	e018      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
      break;
 80062ce:	e015      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      break;
 80062e0:	e00b      	b.n	80062fa <DMA_CheckFifoParam+0xe6>
      break;
 80062e2:	bf00      	nop
 80062e4:	e00a      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;
 80062e6:	bf00      	nop
 80062e8:	e008      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;
 80062ea:	bf00      	nop
 80062ec:	e006      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;
 80062ee:	bf00      	nop
 80062f0:	e004      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;   
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <DMA_CheckFifoParam+0xe8>
      break;
 80062fa:	bf00      	nop
    }
  } 
  
  return status; 
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800630c:	b480      	push	{r7}
 800630e:	b089      	sub	sp, #36	@ 0x24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800631a:	2300      	movs	r3, #0
 800631c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	e16b      	b.n	8006600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006328:	2201      	movs	r2, #1
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4013      	ands	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	429a      	cmp	r2, r3
 8006342:	f040 815a 	bne.w	80065fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d005      	beq.n	800635e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800635a:	2b02      	cmp	r3, #2
 800635c:	d130      	bne.n	80063c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	2203      	movs	r2, #3
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006394:	2201      	movs	r2, #1
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 0201 	and.w	r2, r3, #1
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d017      	beq.n	80063fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	2203      	movs	r2, #3
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d123      	bne.n	8006450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	08da      	lsrs	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3208      	adds	r2, #8
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	220f      	movs	r2, #15
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4013      	ands	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	08da      	lsrs	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3208      	adds	r2, #8
 800644a:	69b9      	ldr	r1, [r7, #24]
 800644c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	2203      	movs	r2, #3
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4013      	ands	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 0203 	and.w	r2, r3, #3
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80b4 	beq.w	80065fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	4b60      	ldr	r3, [pc, #384]	@ (8006618 <HAL_GPIO_Init+0x30c>)
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	4a5f      	ldr	r2, [pc, #380]	@ (8006618 <HAL_GPIO_Init+0x30c>)
 800649c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80064a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006618 <HAL_GPIO_Init+0x30c>)
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ae:	4a5b      	ldr	r2, [pc, #364]	@ (800661c <HAL_GPIO_Init+0x310>)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	089b      	lsrs	r3, r3, #2
 80064b4:	3302      	adds	r3, #2
 80064b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	220f      	movs	r2, #15
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a52      	ldr	r2, [pc, #328]	@ (8006620 <HAL_GPIO_Init+0x314>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02b      	beq.n	8006532 <HAL_GPIO_Init+0x226>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a51      	ldr	r2, [pc, #324]	@ (8006624 <HAL_GPIO_Init+0x318>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d025      	beq.n	800652e <HAL_GPIO_Init+0x222>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a50      	ldr	r2, [pc, #320]	@ (8006628 <HAL_GPIO_Init+0x31c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01f      	beq.n	800652a <HAL_GPIO_Init+0x21e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a4f      	ldr	r2, [pc, #316]	@ (800662c <HAL_GPIO_Init+0x320>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d019      	beq.n	8006526 <HAL_GPIO_Init+0x21a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a4e      	ldr	r2, [pc, #312]	@ (8006630 <HAL_GPIO_Init+0x324>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d013      	beq.n	8006522 <HAL_GPIO_Init+0x216>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006634 <HAL_GPIO_Init+0x328>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00d      	beq.n	800651e <HAL_GPIO_Init+0x212>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a4c      	ldr	r2, [pc, #304]	@ (8006638 <HAL_GPIO_Init+0x32c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d007      	beq.n	800651a <HAL_GPIO_Init+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4b      	ldr	r2, [pc, #300]	@ (800663c <HAL_GPIO_Init+0x330>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d101      	bne.n	8006516 <HAL_GPIO_Init+0x20a>
 8006512:	2307      	movs	r3, #7
 8006514:	e00e      	b.n	8006534 <HAL_GPIO_Init+0x228>
 8006516:	2308      	movs	r3, #8
 8006518:	e00c      	b.n	8006534 <HAL_GPIO_Init+0x228>
 800651a:	2306      	movs	r3, #6
 800651c:	e00a      	b.n	8006534 <HAL_GPIO_Init+0x228>
 800651e:	2305      	movs	r3, #5
 8006520:	e008      	b.n	8006534 <HAL_GPIO_Init+0x228>
 8006522:	2304      	movs	r3, #4
 8006524:	e006      	b.n	8006534 <HAL_GPIO_Init+0x228>
 8006526:	2303      	movs	r3, #3
 8006528:	e004      	b.n	8006534 <HAL_GPIO_Init+0x228>
 800652a:	2302      	movs	r3, #2
 800652c:	e002      	b.n	8006534 <HAL_GPIO_Init+0x228>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_GPIO_Init+0x228>
 8006532:	2300      	movs	r3, #0
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	f002 0203 	and.w	r2, r2, #3
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	4093      	lsls	r3, r2
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4313      	orrs	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006544:	4935      	ldr	r1, [pc, #212]	@ (800661c <HAL_GPIO_Init+0x310>)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	089b      	lsrs	r3, r3, #2
 800654a:	3302      	adds	r3, #2
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006552:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <HAL_GPIO_Init+0x334>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	43db      	mvns	r3, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4013      	ands	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006576:	4a32      	ldr	r2, [pc, #200]	@ (8006640 <HAL_GPIO_Init+0x334>)
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800657c:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <HAL_GPIO_Init+0x334>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	43db      	mvns	r3, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4013      	ands	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065a0:	4a27      	ldr	r2, [pc, #156]	@ (8006640 <HAL_GPIO_Init+0x334>)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065a6:	4b26      	ldr	r3, [pc, #152]	@ (8006640 <HAL_GPIO_Init+0x334>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	43db      	mvns	r3, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4013      	ands	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <HAL_GPIO_Init+0x334>)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <HAL_GPIO_Init+0x334>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	43db      	mvns	r3, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065f4:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <HAL_GPIO_Init+0x334>)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	3301      	adds	r3, #1
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	f67f ae90 	bls.w	8006328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	3724      	adds	r7, #36	@ 0x24
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40023800 	.word	0x40023800
 800661c:	40013800 	.word	0x40013800
 8006620:	40020000 	.word	0x40020000
 8006624:	40020400 	.word	0x40020400
 8006628:	40020800 	.word	0x40020800
 800662c:	40020c00 	.word	0x40020c00
 8006630:	40021000 	.word	0x40021000
 8006634:	40021400 	.word	0x40021400
 8006638:	40021800 	.word	0x40021800
 800663c:	40021c00 	.word	0x40021c00
 8006640:	40013c00 	.word	0x40013c00

08006644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
 8006660:	e001      	b.n	8006666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	807b      	strh	r3, [r7, #2]
 8006680:	4613      	mov	r3, r2
 8006682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006684:	787b      	ldrb	r3, [r7, #1]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006690:	e003      	b.n	800669a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	041a      	lsls	r2, r3, #16
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	619a      	str	r2, [r3, #24]
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af02      	add	r7, sp, #8
 80066ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e101      	b.n	80068bc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f006 fa8e 	bl	800cbf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2203      	movs	r2, #3
 80066dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066e6:	d102      	bne.n	80066ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f002 fedb 	bl	80094ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7c1a      	ldrb	r2, [r3, #16]
 8006700:	f88d 2000 	strb.w	r2, [sp]
 8006704:	3304      	adds	r3, #4
 8006706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006708:	f002 fdba 	bl	8009280 <USB_CoreInit>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e0ce      	b.n	80068bc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f002 fed3 	bl	80094d0 <USB_SetCurrentMode>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0bf      	b.n	80068bc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	e04a      	b.n	80067d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006742:	7bfa      	ldrb	r2, [r7, #15]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3315      	adds	r3, #21
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3314      	adds	r3, #20
 8006766:	7bfa      	ldrb	r2, [r7, #15]
 8006768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800676a:	7bfa      	ldrb	r2, [r7, #15]
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	b298      	uxth	r0, r3
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	332e      	adds	r3, #46	@ 0x2e
 800677e:	4602      	mov	r2, r0
 8006780:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3318      	adds	r3, #24
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	331c      	adds	r3, #28
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3320      	adds	r3, #32
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067be:	7bfa      	ldrb	r2, [r7, #15]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3301      	adds	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	791b      	ldrb	r3, [r3, #4]
 80067dc:	7bfa      	ldrb	r2, [r7, #15]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3af      	bcc.n	8006742 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
 80067e6:	e044      	b.n	8006872 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067e8:	7bfa      	ldrb	r2, [r7, #15]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067fe:	7bfa      	ldrb	r2, [r7, #15]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006840:	7bfa      	ldrb	r2, [r7, #15]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006856:	7bfa      	ldrb	r2, [r7, #15]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3301      	adds	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	791b      	ldrb	r3, [r3, #4]
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3b5      	bcc.n	80067e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7c1a      	ldrb	r2, [r3, #16]
 8006884:	f88d 2000 	strb.w	r2, [sp]
 8006888:	3304      	adds	r3, #4
 800688a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800688c:	f002 fe6c 	bl	8009568 <USB_DevInit>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e00c      	b.n	80068bc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f003 feb6 	bl	800a626 <USB_DevDisconnect>

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_PCD_Start+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e022      	b.n	8006926 <HAL_PCD_Start+0x62>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f002 fdbd 	bl	800948c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f003 fe64 	bl	800a5e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800692e:	b590      	push	{r4, r7, lr}
 8006930:	b08d      	sub	sp, #52	@ 0x34
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f003 ff22 	bl	800a78e <USB_GetMode>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 848c 	bne.w	800726a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f003 fe86 	bl	800a668 <USB_ReadInterrupts>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8482 	beq.w	8007268 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f003 fe73 	bl	800a668 <USB_ReadInterrupts>
 8006982:	4603      	mov	r3, r0
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b02      	cmp	r3, #2
 800698a:	d107      	bne.n	800699c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f002 0202 	and.w	r2, r2, #2
 800699a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f003 fe61 	bl	800a668 <USB_ReadInterrupts>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d161      	bne.n	8006a74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0210 	bic.w	r2, r2, #16
 80069be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	4613      	mov	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80069e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069ea:	d124      	bne.n	8006a36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d035      	beq.n	8006a64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6a38      	ldr	r0, [r7, #32]
 8006a0c:	f003 fc98 	bl	800a340 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a1c:	441a      	add	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2e:	441a      	add	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	615a      	str	r2, [r3, #20]
 8006a34:	e016      	b.n	8006a64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a40:	d110      	bne.n	8006a64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a48:	2208      	movs	r2, #8
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6a38      	ldr	r0, [r7, #32]
 8006a4e:	f003 fc77 	bl	800a340 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5e:	441a      	add	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0210 	orr.w	r2, r2, #16
 8006a72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f003 fdf5 	bl	800a668 <USB_ReadInterrupts>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a88:	f040 80a7 	bne.w	8006bda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f003 fdfa 	bl	800a68e <USB_ReadDevAllOutEpInterrupt>
 8006a9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006a9c:	e099      	b.n	8006bd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 808e 	beq.w	8006bc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f003 fe1e 	bl	800a6f6 <USB_ReadDevOutEPInterrupt>
 8006aba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fea4 	bl	8007828 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	2308      	movs	r3, #8
 8006afa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 ff7a 	bl	80079f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d030      	beq.n	8006b8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d109      	bne.n	8006b4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d108      	bne.n	8006b7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f006 f943 	bl	800ce00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	461a      	mov	r2, r3
 8006b88:	2302      	movs	r3, #2
 8006b8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2320      	movs	r3, #32
 8006ba6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	3301      	adds	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f af62 	bne.w	8006a9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f003 fd42 	bl	800a668 <USB_ReadInterrupts>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bee:	f040 80db 	bne.w	8006da8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 fd63 	bl	800a6c2 <USB_ReadDevAllInEpInterrupt>
 8006bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006c02:	e0cd      	b.n	8006da0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80c2 	beq.w	8006d94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f003 fd89 	bl	800a732 <USB_ReadDevInEPInterrupt>
 8006c20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d057      	beq.n	8006cdc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	2201      	movs	r2, #1
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	69f9      	ldr	r1, [r7, #28]
 8006c48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2301      	movs	r3, #1
 8006c60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	799b      	ldrb	r3, [r3, #6]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d132      	bne.n	8006cd0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6e:	4613      	mov	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	440b      	add	r3, r1
 8006c78:	3320      	adds	r3, #32
 8006c7a:	6819      	ldr	r1, [r3, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4403      	add	r3, r0
 8006c8a:	331c      	adds	r3, #28
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4419      	add	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4403      	add	r3, r0
 8006c9e:	3320      	adds	r3, #32
 8006ca0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d113      	bne.n	8006cd0 <HAL_PCD_IRQHandler+0x3a2>
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	3324      	adds	r3, #36	@ 0x24
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2101      	movs	r1, #1
 8006ccc:	f003 fd90 	bl	800a7f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f006 f80d 	bl	800ccf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2310      	movs	r3, #16
 8006d12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2340      	movs	r3, #64	@ 0x40
 8006d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d023      	beq.n	8006d82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d3c:	6a38      	ldr	r0, [r7, #32]
 8006d3e:	f002 fd77 	bl	8009830 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3310      	adds	r3, #16
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	3304      	adds	r3, #4
 8006d54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d108      	bne.n	8006d70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2200      	movs	r2, #0
 8006d62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f006 f85a 	bl	800ce24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	2302      	movs	r3, #2
 8006d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fcbd 	bl	800770e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	3301      	adds	r3, #1
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f47f af2e 	bne.w	8006c04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f003 fc5b 	bl	800a668 <USB_ReadInterrupts>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dbc:	d122      	bne.n	8006e04 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d108      	bne.n	8006dee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fea4 	bl	8007b34 <HAL_PCDEx_LPM_Callback>
 8006dec:	e002      	b.n	8006df4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f005 fff8 	bl	800cde4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f003 fc2d 	bl	800a668 <USB_ReadInterrupts>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e18:	d112      	bne.n	8006e40 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d102      	bne.n	8006e30 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f005 ffb4 	bl	800cd98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006e3e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f003 fc0f 	bl	800a668 <USB_ReadInterrupts>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e54:	f040 80b7 	bne.w	8006fc6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2110      	movs	r1, #16
 8006e72:	4618      	mov	r0, r3
 8006e74:	f002 fcdc 	bl	8009830 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e7c:	e046      	b.n	8006f0c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006eb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ec4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ee4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f08:	3301      	adds	r3, #1
 8006f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	791b      	ldrb	r3, [r3, #4]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d3b2      	bcc.n	8006e7e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f26:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006f2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7bdb      	ldrb	r3, [r3, #15]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d016      	beq.n	8006f62 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f44:	f043 030b 	orr.w	r3, r3, #11
 8006f48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f5a:	f043 030b 	orr.w	r3, r3, #11
 8006f5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f60:	e015      	b.n	8006f8e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006f74:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006f78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f88:	f043 030b 	orr.w	r3, r3, #11
 8006f8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f9c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006fa0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f003 fc1d 	bl	800a7f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f003 fb4c 	bl	800a668 <USB_ReadInterrupts>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fda:	d123      	bne.n	8007024 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f003 fbe2 	bl	800a7aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 fc99 	bl	8009922 <USB_GetDevSpeed>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681c      	ldr	r4, [r3, #0]
 8006ffc:	f001 fa0a 	bl	8008414 <HAL_RCC_GetHCLKFreq>
 8007000:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007006:	461a      	mov	r2, r3
 8007008:	4620      	mov	r0, r4
 800700a:	f002 f99d 	bl	8009348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f005 fe99 	bl	800cd46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007022:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f003 fb1d 	bl	800a668 <USB_ReadInterrupts>
 800702e:	4603      	mov	r3, r0
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d10a      	bne.n	800704e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f005 fe76 	bl	800cd2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695a      	ldr	r2, [r3, #20]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f002 0208 	and.w	r2, r2, #8
 800704c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f003 fb08 	bl	800a668 <USB_ReadInterrupts>
 8007058:	4603      	mov	r3, r0
 800705a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800705e:	2b80      	cmp	r3, #128	@ 0x80
 8007060:	d123      	bne.n	80070aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800706e:	2301      	movs	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
 8007072:	e014      	b.n	800709e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007078:	4613      	mov	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d105      	bne.n	8007098 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	b2db      	uxtb	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb0a 	bl	80076ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	3301      	adds	r3, #1
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d3e4      	bcc.n	8007074 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f003 fada 	bl	800a668 <USB_ReadInterrupts>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070be:	d13c      	bne.n	800713a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070c0:	2301      	movs	r3, #1
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c4:	e02b      	b.n	800711e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070da:	4613      	mov	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3318      	adds	r3, #24
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d115      	bne.n	8007118 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80070ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da12      	bge.n	8007118 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f6:	4613      	mov	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	440b      	add	r3, r1
 8007100:	3317      	adds	r3, #23
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 faca 	bl	80076ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	3301      	adds	r3, #1
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	791b      	ldrb	r3, [r3, #4]
 8007122:	461a      	mov	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	4293      	cmp	r3, r2
 8007128:	d3cd      	bcc.n	80070c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695a      	ldr	r2, [r3, #20]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f003 fa92 	bl	800a668 <USB_ReadInterrupts>
 8007144:	4603      	mov	r3, r0
 8007146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800714a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800714e:	d156      	bne.n	80071fe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007150:	2301      	movs	r3, #1
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24
 8007154:	e045      	b.n	80071e2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d12e      	bne.n	80071dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800717e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007180:	2b00      	cmp	r3, #0
 8007182:	da2b      	bge.n	80071dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007190:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007194:	429a      	cmp	r2, r3
 8007196:	d121      	bne.n	80071dc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719c:	4613      	mov	r3, r2
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071d8:	6053      	str	r3, [r2, #4]
            break;
 80071da:	e008      	b.n	80071ee <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	3301      	adds	r3, #1
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d3b3      	bcc.n	8007156 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80071fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f003 fa30 	bl	800a668 <USB_ReadInterrupts>
 8007208:	4603      	mov	r3, r0
 800720a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007212:	d10a      	bne.n	800722a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f005 fe17 	bl	800ce48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f003 fa1a 	bl	800a668 <USB_ReadInterrupts>
 8007234:	4603      	mov	r3, r0
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b04      	cmp	r3, #4
 800723c:	d115      	bne.n	800726a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f005 fe07 	bl	800ce64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6859      	ldr	r1, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e000      	b.n	800726a <HAL_PCD_IRQHandler+0x93c>
      return;
 8007268:	bf00      	nop
    }
  }
}
 800726a:	3734      	adds	r7, #52	@ 0x34
 800726c:	46bd      	mov	sp, r7
 800726e:	bd90      	pop	{r4, r7, pc}

08007270 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_PCD_SetAddress+0x1a>
 8007286:	2302      	movs	r3, #2
 8007288:	e012      	b.n	80072b0 <HAL_PCD_SetAddress+0x40>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f003 f979 	bl	800a598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	4608      	mov	r0, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	70fb      	strb	r3, [r7, #3]
 80072ca:	460b      	mov	r3, r1
 80072cc:	803b      	strh	r3, [r7, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da0f      	bge.n	80072fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	f003 020f 	and.w	r2, r3, #15
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	3310      	adds	r3, #16
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	3304      	adds	r3, #4
 80072f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	705a      	strb	r2, [r3, #1]
 80072fc:	e00f      	b.n	800731e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4413      	add	r3, r2
 8007314:	3304      	adds	r3, #4
 8007316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	b2da      	uxtb	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800732a:	883b      	ldrh	r3, [r7, #0]
 800732c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	78ba      	ldrb	r2, [r7, #2]
 8007338:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800734c:	78bb      	ldrb	r3, [r7, #2]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d102      	bne.n	8007358 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_PCD_EP_Open+0xae>
 8007362:	2302      	movs	r3, #2
 8007364:	e00e      	b.n	8007384 <HAL_PCD_EP_Open+0xcc>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	4618      	mov	r0, r3
 8007376:	f002 faf9 	bl	800996c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007382:	7afb      	ldrb	r3, [r7, #11]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da0f      	bge.n	80073c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	f003 020f 	and.w	r2, r3, #15
 80073a6:	4613      	mov	r3, r2
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	3310      	adds	r3, #16
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	3304      	adds	r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	705a      	strb	r2, [r3, #1]
 80073be:	e00f      	b.n	80073e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	4413      	add	r3, r2
 80073d6:	3304      	adds	r3, #4
 80073d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_PCD_EP_Close+0x6e>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e00e      	b.n	8007418 <HAL_PCD_EP_Close+0x8c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68f9      	ldr	r1, [r7, #12]
 8007408:	4618      	mov	r0, r3
 800740a:	f002 fb37 	bl	8009a7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	460b      	mov	r3, r1
 800742e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	3304      	adds	r3, #4
 8007448:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	b2da      	uxtb	r2, r3
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	799b      	ldrb	r3, [r3, #6]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d102      	bne.n	800747c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	799b      	ldrb	r3, [r3, #6]
 8007484:	461a      	mov	r2, r3
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	f002 fbd4 	bl	8009c34 <USB_EPStartXfer>

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80074b8:	681b      	ldr	r3, [r3, #0]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	460b      	mov	r3, r1
 80074d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	3310      	adds	r3, #16
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	3304      	adds	r3, #4
 80074ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2201      	movs	r2, #1
 8007504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	b2da      	uxtb	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	799b      	ldrb	r3, [r3, #6]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d102      	bne.n	8007520 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	799b      	ldrb	r3, [r3, #6]
 8007528:	461a      	mov	r2, r3
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	f002 fb82 	bl	8009c34 <USB_EPStartXfer>

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7912      	ldrb	r2, [r2, #4]
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e04f      	b.n	80075f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0f      	bge.n	8007580 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	3310      	adds	r3, #16
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2201      	movs	r2, #1
 800757c:	705a      	strb	r2, [r3, #1]
 800757e:	e00d      	b.n	800759c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4613      	mov	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	3304      	adds	r3, #4
 8007594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_PCD_EP_SetStall+0x82>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e01d      	b.n	80075f8 <HAL_PCD_EP_SetStall+0xbe>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68f9      	ldr	r1, [r7, #12]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f002 ff10 	bl	800a3f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7999      	ldrb	r1, [r3, #6]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075e8:	461a      	mov	r2, r3
 80075ea:	f003 f901 	bl	800a7f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	7912      	ldrb	r2, [r2, #4]
 8007616:	4293      	cmp	r3, r2
 8007618:	d901      	bls.n	800761e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e042      	b.n	80076a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800761e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da0f      	bge.n	8007646 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	f003 020f 	and.w	r2, r3, #15
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	3310      	adds	r3, #16
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	3304      	adds	r3, #4
 800763c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	705a      	strb	r2, [r3, #1]
 8007644:	e00f      	b.n	8007666 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	4613      	mov	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	b2da      	uxtb	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_PCD_EP_ClrStall+0x86>
 8007682:	2302      	movs	r3, #2
 8007684:	e00e      	b.n	80076a4 <HAL_PCD_EP_ClrStall+0xa4>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	4618      	mov	r0, r3
 8007696:	f002 ff19 	bl	800a4cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80076b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	da0c      	bge.n	80076da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	3310      	adds	r3, #16
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	4413      	add	r3, r2
 80076d4:	3304      	adds	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e00c      	b.n	80076f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 fd38 	bl	800a170 <USB_EPStopXfer>
 8007700:	4603      	mov	r3, r0
 8007702:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007704:	7afb      	ldrb	r3, [r7, #11]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b08a      	sub	sp, #40	@ 0x28
 8007712:	af02      	add	r7, sp, #8
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	3310      	adds	r3, #16
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	3304      	adds	r3, #4
 8007734:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	429a      	cmp	r2, r3
 8007740:	d901      	bls.n	8007746 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e06b      	b.n	800781e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	429a      	cmp	r2, r3
 800775a:	d902      	bls.n	8007762 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3303      	adds	r3, #3
 8007766:	089b      	lsrs	r3, r3, #2
 8007768:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800776a:	e02a      	b.n	80077c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	429a      	cmp	r2, r3
 8007780:	d902      	bls.n	8007788 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	3303      	adds	r3, #3
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68d9      	ldr	r1, [r3, #12]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	b2da      	uxtb	r2, r3
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4603      	mov	r3, r0
 80077a4:	6978      	ldr	r0, [r7, #20]
 80077a6:	f002 fd8d 	bl	800a2c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	441a      	add	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	695a      	ldr	r2, [r3, #20]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d809      	bhi.n	80077ec <PCD_WriteEmptyTxFifo+0xde>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d203      	bcs.n	80077ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1bf      	bne.n	800776c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d811      	bhi.n	800781c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	2201      	movs	r2, #1
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	43db      	mvns	r3, r3
 8007812:	6939      	ldr	r1, [r7, #16]
 8007814:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007818:	4013      	ands	r3, r2
 800781a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	333c      	adds	r3, #60	@ 0x3c
 8007840:	3304      	adds	r3, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	799b      	ldrb	r3, [r3, #6]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d17b      	bne.n	8007956 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d015      	beq.n	8007894 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	4a61      	ldr	r2, [pc, #388]	@ (80079f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	f240 80b9 	bls.w	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80b3 	beq.w	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	461a      	mov	r2, r3
 800788c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007890:	6093      	str	r3, [r2, #8]
 8007892:	e0a7      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078aa:	461a      	mov	r2, r3
 80078ac:	2320      	movs	r3, #32
 80078ae:	6093      	str	r3, [r2, #8]
 80078b0:	e098      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 8093 	bne.w	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4a4b      	ldr	r2, [pc, #300]	@ (80079f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d90f      	bls.n	80078e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078e2:	6093      	str	r3, [r2, #8]
 80078e4:	e07e      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	0159      	lsls	r1, r3, #5
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	440b      	add	r3, r1
 8007908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d114      	bne.n	8007948 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007930:	461a      	mov	r2, r3
 8007932:	2101      	movs	r1, #1
 8007934:	f002 ff5c 	bl	800a7f0 <USB_EP0_OutStart>
 8007938:	e006      	b.n	8007948 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f005 f9b6 	bl	800ccc0 <HAL_PCD_DataOutStageCallback>
 8007954:	e046      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	4a26      	ldr	r2, [pc, #152]	@ (80079f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d124      	bne.n	80079a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007974:	461a      	mov	r2, r3
 8007976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800797a:	6093      	str	r3, [r2, #8]
 800797c:	e032      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	461a      	mov	r2, r3
 8007996:	2320      	movs	r3, #32
 8007998:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f005 f98d 	bl	800ccc0 <HAL_PCD_DataOutStageCallback>
 80079a6:	e01d      	b.n	80079e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d114      	bne.n	80079d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079d0:	461a      	mov	r2, r3
 80079d2:	2100      	movs	r1, #0
 80079d4:	f002 ff0c 	bl	800a7f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f005 f96e 	bl	800ccc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	4f54300a 	.word	0x4f54300a
 80079f4:	4f54310a 	.word	0x4f54310a

080079f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	333c      	adds	r3, #60	@ 0x3c
 8007a10:	3304      	adds	r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a15      	ldr	r2, [pc, #84]	@ (8007a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d90e      	bls.n	8007a4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	461a      	mov	r2, r3
 8007a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f005 f925 	bl	800cc9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d90c      	bls.n	8007a74 <PCD_EP_OutSetupPacket_int+0x7c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	799b      	ldrb	r3, [r3, #6]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d108      	bne.n	8007a74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2101      	movs	r1, #1
 8007a70:	f002 febe 	bl	800a7f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	4f54300a 	.word	0x4f54300a

08007a84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
 8007a90:	4613      	mov	r3, r2
 8007a92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d107      	bne.n	8007ab2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007aa2:	883b      	ldrh	r3, [r7, #0]
 8007aa4:	0419      	lsls	r1, r3, #16
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ab0:	e028      	b.n	8007b04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	0c1b      	lsrs	r3, r3, #16
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4413      	add	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e00d      	b.n	8007ae2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3340      	adds	r3, #64	@ 0x40
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	7bfa      	ldrb	r2, [r7, #15]
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d3ec      	bcc.n	8007ac6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007aec:	883b      	ldrh	r3, [r7, #0]
 8007aee:	0418      	lsls	r0, r3, #16
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4302      	orrs	r2, r0
 8007afc:	3340      	adds	r3, #64	@ 0x40
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	887a      	ldrh	r2, [r7, #2]
 8007b24:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e267      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d075      	beq.n	8007c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b6a:	4b88      	ldr	r3, [pc, #544]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 030c 	and.w	r3, r3, #12
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d00c      	beq.n	8007b90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b76:	4b85      	ldr	r3, [pc, #532]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b7e:	2b08      	cmp	r3, #8
 8007b80:	d112      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b82:	4b82      	ldr	r3, [pc, #520]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b8e:	d10b      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b90:	4b7e      	ldr	r3, [pc, #504]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d05b      	beq.n	8007c54 <HAL_RCC_OscConfig+0x108>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d157      	bne.n	8007c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e242      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb0:	d106      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x74>
 8007bb2:	4b76      	ldr	r3, [pc, #472]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a75      	ldr	r2, [pc, #468]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	e01d      	b.n	8007bfc <HAL_RCC_OscConfig+0xb0>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bc8:	d10c      	bne.n	8007be4 <HAL_RCC_OscConfig+0x98>
 8007bca:	4b70      	ldr	r3, [pc, #448]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6f      	ldr	r2, [pc, #444]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a6c      	ldr	r2, [pc, #432]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	e00b      	b.n	8007bfc <HAL_RCC_OscConfig+0xb0>
 8007be4:	4b69      	ldr	r3, [pc, #420]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a68      	ldr	r2, [pc, #416]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b66      	ldr	r3, [pc, #408]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a65      	ldr	r2, [pc, #404]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d013      	beq.n	8007c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c04:	f7fc fe06 	bl	8004814 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c0c:	f7fc fe02 	bl	8004814 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b64      	cmp	r3, #100	@ 0x64
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e207      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0f0      	beq.n	8007c0c <HAL_RCC_OscConfig+0xc0>
 8007c2a:	e014      	b.n	8007c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2c:	f7fc fdf2 	bl	8004814 <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c32:	e008      	b.n	8007c46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c34:	f7fc fdee 	bl	8004814 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b64      	cmp	r3, #100	@ 0x64
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e1f3      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c46:	4b51      	ldr	r3, [pc, #324]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f0      	bne.n	8007c34 <HAL_RCC_OscConfig+0xe8>
 8007c52:	e000      	b.n	8007c56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d063      	beq.n	8007d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c62:	4b4a      	ldr	r3, [pc, #296]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00b      	beq.n	8007c86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c6e:	4b47      	ldr	r3, [pc, #284]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d11c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c7a:	4b44      	ldr	r3, [pc, #272]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d116      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c86:	4b41      	ldr	r3, [pc, #260]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <HAL_RCC_OscConfig+0x152>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d001      	beq.n	8007c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e1c7      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4937      	ldr	r1, [pc, #220]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cb2:	e03a      	b.n	8007d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d020      	beq.n	8007cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cbc:	4b34      	ldr	r3, [pc, #208]	@ (8007d90 <HAL_RCC_OscConfig+0x244>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc2:	f7fc fda7 	bl	8004814 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cca:	f7fc fda3 	bl	8004814 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e1a8      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce8:	4b28      	ldr	r3, [pc, #160]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	4925      	ldr	r1, [pc, #148]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	600b      	str	r3, [r1, #0]
 8007cfc:	e015      	b.n	8007d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cfe:	4b24      	ldr	r3, [pc, #144]	@ (8007d90 <HAL_RCC_OscConfig+0x244>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d04:	f7fc fd86 	bl	8004814 <HAL_GetTick>
 8007d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d0a:	e008      	b.n	8007d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d0c:	f7fc fd82 	bl	8004814 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e187      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f0      	bne.n	8007d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d036      	beq.n	8007da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d016      	beq.n	8007d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d3e:	4b15      	ldr	r3, [pc, #84]	@ (8007d94 <HAL_RCC_OscConfig+0x248>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7fc fd66 	bl	8004814 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d4c:	f7fc fd62 	bl	8004814 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e167      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <HAL_RCC_OscConfig+0x240>)
 8007d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCC_OscConfig+0x200>
 8007d6a:	e01b      	b.n	8007da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d6c:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <HAL_RCC_OscConfig+0x248>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d72:	f7fc fd4f 	bl	8004814 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d78:	e00e      	b.n	8007d98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d7a:	f7fc fd4b 	bl	8004814 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d907      	bls.n	8007d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e150      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	42470000 	.word	0x42470000
 8007d94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d98:	4b88      	ldr	r3, [pc, #544]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1ea      	bne.n	8007d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8097 	beq.w	8007ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007db6:	4b81      	ldr	r3, [pc, #516]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10f      	bne.n	8007de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]
 8007dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	4a7c      	ldr	r2, [pc, #496]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dde:	2301      	movs	r3, #1
 8007de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de2:	4b77      	ldr	r3, [pc, #476]	@ (8007fc0 <HAL_RCC_OscConfig+0x474>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d118      	bne.n	8007e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dee:	4b74      	ldr	r3, [pc, #464]	@ (8007fc0 <HAL_RCC_OscConfig+0x474>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a73      	ldr	r2, [pc, #460]	@ (8007fc0 <HAL_RCC_OscConfig+0x474>)
 8007df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dfa:	f7fc fd0b 	bl	8004814 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e00:	e008      	b.n	8007e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e02:	f7fc fd07 	bl	8004814 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e10c      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e14:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc0 <HAL_RCC_OscConfig+0x474>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0f0      	beq.n	8007e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d106      	bne.n	8007e36 <HAL_RCC_OscConfig+0x2ea>
 8007e28:	4b64      	ldr	r3, [pc, #400]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e2c:	4a63      	ldr	r2, [pc, #396]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e34:	e01c      	b.n	8007e70 <HAL_RCC_OscConfig+0x324>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d10c      	bne.n	8007e58 <HAL_RCC_OscConfig+0x30c>
 8007e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e42:	4a5e      	ldr	r2, [pc, #376]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e44:	f043 0304 	orr.w	r3, r3, #4
 8007e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e56:	e00b      	b.n	8007e70 <HAL_RCC_OscConfig+0x324>
 8007e58:	4b58      	ldr	r3, [pc, #352]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5c:	4a57      	ldr	r2, [pc, #348]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e64:	4b55      	ldr	r3, [pc, #340]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e68:	4a54      	ldr	r2, [pc, #336]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e6a:	f023 0304 	bic.w	r3, r3, #4
 8007e6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d015      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e78:	f7fc fccc 	bl	8004814 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e80:	f7fc fcc8 	bl	8004814 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e0cb      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e96:	4b49      	ldr	r3, [pc, #292]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0ee      	beq.n	8007e80 <HAL_RCC_OscConfig+0x334>
 8007ea2:	e014      	b.n	8007ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ea4:	f7fc fcb6 	bl	8004814 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eac:	f7fc fcb2 	bl	8004814 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e0b5      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ee      	bne.n	8007eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d105      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ed4:	4b39      	ldr	r3, [pc, #228]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed8:	4a38      	ldr	r2, [pc, #224]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007eda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ede:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a1 	beq.w	800802c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007eea:	4b34      	ldr	r3, [pc, #208]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 030c 	and.w	r3, r3, #12
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d05c      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d141      	bne.n	8007f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007efe:	4b31      	ldr	r3, [pc, #196]	@ (8007fc4 <HAL_RCC_OscConfig+0x478>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f04:	f7fc fc86 	bl	8004814 <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fc fc82 	bl	8004814 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e087      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1e:	4b27      	ldr	r3, [pc, #156]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	019b      	lsls	r3, r3, #6
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f40:	085b      	lsrs	r3, r3, #1
 8007f42:	3b01      	subs	r3, #1
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	061b      	lsls	r3, r3, #24
 8007f4e:	491b      	ldr	r1, [pc, #108]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f54:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc4 <HAL_RCC_OscConfig+0x478>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5a:	f7fc fc5b 	bl	8004814 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f60:	e008      	b.n	8007f74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f62:	f7fc fc57 	bl	8004814 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e05c      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f74:	4b11      	ldr	r3, [pc, #68]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0f0      	beq.n	8007f62 <HAL_RCC_OscConfig+0x416>
 8007f80:	e054      	b.n	800802c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f82:	4b10      	ldr	r3, [pc, #64]	@ (8007fc4 <HAL_RCC_OscConfig+0x478>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fc fc44 	bl	8004814 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f90:	f7fc fc40 	bl	8004814 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e045      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa2:	4b06      	ldr	r3, [pc, #24]	@ (8007fbc <HAL_RCC_OscConfig+0x470>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <HAL_RCC_OscConfig+0x444>
 8007fae:	e03d      	b.n	800802c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e038      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	40007000 	.word	0x40007000
 8007fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008038 <HAL_RCC_OscConfig+0x4ec>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d028      	beq.n	8008028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d121      	bne.n	8008028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d11a      	bne.n	8008028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008000:	4293      	cmp	r3, r2
 8008002:	d111      	bne.n	8008028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	3b01      	subs	r3, #1
 8008012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008014:	429a      	cmp	r2, r3
 8008016:	d107      	bne.n	8008028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008024:	429a      	cmp	r2, r3
 8008026:	d001      	beq.n	800802c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023800 	.word	0x40023800

0800803c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0cc      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008050:	4b68      	ldr	r3, [pc, #416]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0307 	and.w	r3, r3, #7
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d90c      	bls.n	8008078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800805e:	4b65      	ldr	r3, [pc, #404]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008066:	4b63      	ldr	r3, [pc, #396]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d001      	beq.n	8008078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e0b8      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d020      	beq.n	80080c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008090:	4b59      	ldr	r3, [pc, #356]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	4a58      	ldr	r2, [pc, #352]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008096:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800809a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080a8:	4b53      	ldr	r3, [pc, #332]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	4a52      	ldr	r2, [pc, #328]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80080b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b4:	4b50      	ldr	r3, [pc, #320]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	494d      	ldr	r1, [pc, #308]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d044      	beq.n	800815c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d107      	bne.n	80080ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080da:	4b47      	ldr	r3, [pc, #284]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d119      	bne.n	800811a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e07f      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d003      	beq.n	80080fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d107      	bne.n	800810a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080fa:	4b3f      	ldr	r3, [pc, #252]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e06f      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800810a:	4b3b      	ldr	r3, [pc, #236]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e067      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800811a:	4b37      	ldr	r3, [pc, #220]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f023 0203 	bic.w	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4934      	ldr	r1, [pc, #208]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	4313      	orrs	r3, r2
 800812a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800812c:	f7fc fb72 	bl	8004814 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008132:	e00a      	b.n	800814a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008134:	f7fc fb6e 	bl	8004814 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008142:	4293      	cmp	r3, r2
 8008144:	d901      	bls.n	800814a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e04f      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800814a:	4b2b      	ldr	r3, [pc, #172]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 020c 	and.w	r2, r3, #12
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	429a      	cmp	r2, r3
 800815a:	d1eb      	bne.n	8008134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800815c:	4b25      	ldr	r3, [pc, #148]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d20c      	bcs.n	8008184 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800816a:	4b22      	ldr	r3, [pc, #136]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008172:	4b20      	ldr	r3, [pc, #128]	@ (80081f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d001      	beq.n	8008184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e032      	b.n	80081ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008190:	4b19      	ldr	r3, [pc, #100]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4916      	ldr	r1, [pc, #88]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081ae:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	490e      	ldr	r1, [pc, #56]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081c2:	f000 f821 	bl	8008208 <HAL_RCC_GetSysClockFreq>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	490a      	ldr	r1, [pc, #40]	@ (80081fc <HAL_RCC_ClockConfig+0x1c0>)
 80081d4:	5ccb      	ldrb	r3, [r1, r3]
 80081d6:	fa22 f303 	lsr.w	r3, r2, r3
 80081da:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <HAL_RCC_ClockConfig+0x1c4>)
 80081dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081de:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <HAL_RCC_ClockConfig+0x1c8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fc fad2 	bl	800478c <HAL_InitTick>

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40023c00 	.word	0x40023c00
 80081f8:	40023800 	.word	0x40023800
 80081fc:	080108d8 	.word	0x080108d8
 8008200:	20000018 	.word	0x20000018
 8008204:	2000002c 	.word	0x2000002c

08008208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800820c:	b094      	sub	sp, #80	@ 0x50
 800820e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008220:	4b79      	ldr	r3, [pc, #484]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 030c 	and.w	r3, r3, #12
 8008228:	2b08      	cmp	r3, #8
 800822a:	d00d      	beq.n	8008248 <HAL_RCC_GetSysClockFreq+0x40>
 800822c:	2b08      	cmp	r3, #8
 800822e:	f200 80e1 	bhi.w	80083f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0x34>
 8008236:	2b04      	cmp	r3, #4
 8008238:	d003      	beq.n	8008242 <HAL_RCC_GetSysClockFreq+0x3a>
 800823a:	e0db      	b.n	80083f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800823c:	4b73      	ldr	r3, [pc, #460]	@ (800840c <HAL_RCC_GetSysClockFreq+0x204>)
 800823e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008240:	e0db      	b.n	80083fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008242:	4b73      	ldr	r3, [pc, #460]	@ (8008410 <HAL_RCC_GetSysClockFreq+0x208>)
 8008244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008246:	e0d8      	b.n	80083fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008248:	4b6f      	ldr	r3, [pc, #444]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008250:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008252:	4b6d      	ldr	r3, [pc, #436]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d063      	beq.n	8008326 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800825e:	4b6a      	ldr	r3, [pc, #424]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	099b      	lsrs	r3, r3, #6
 8008264:	2200      	movs	r2, #0
 8008266:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008268:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800826a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	633b      	str	r3, [r7, #48]	@ 0x30
 8008272:	2300      	movs	r3, #0
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
 8008276:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800827a:	4622      	mov	r2, r4
 800827c:	462b      	mov	r3, r5
 800827e:	f04f 0000 	mov.w	r0, #0
 8008282:	f04f 0100 	mov.w	r1, #0
 8008286:	0159      	lsls	r1, r3, #5
 8008288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800828c:	0150      	lsls	r0, r2, #5
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4621      	mov	r1, r4
 8008294:	1a51      	subs	r1, r2, r1
 8008296:	6139      	str	r1, [r7, #16]
 8008298:	4629      	mov	r1, r5
 800829a:	eb63 0301 	sbc.w	r3, r3, r1
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082ac:	4659      	mov	r1, fp
 80082ae:	018b      	lsls	r3, r1, #6
 80082b0:	4651      	mov	r1, sl
 80082b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082b6:	4651      	mov	r1, sl
 80082b8:	018a      	lsls	r2, r1, #6
 80082ba:	4651      	mov	r1, sl
 80082bc:	ebb2 0801 	subs.w	r8, r2, r1
 80082c0:	4659      	mov	r1, fp
 80082c2:	eb63 0901 	sbc.w	r9, r3, r1
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082da:	4690      	mov	r8, r2
 80082dc:	4699      	mov	r9, r3
 80082de:	4623      	mov	r3, r4
 80082e0:	eb18 0303 	adds.w	r3, r8, r3
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	462b      	mov	r3, r5
 80082e8:	eb49 0303 	adc.w	r3, r9, r3
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80082fa:	4629      	mov	r1, r5
 80082fc:	024b      	lsls	r3, r1, #9
 80082fe:	4621      	mov	r1, r4
 8008300:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008304:	4621      	mov	r1, r4
 8008306:	024a      	lsls	r2, r1, #9
 8008308:	4610      	mov	r0, r2
 800830a:	4619      	mov	r1, r3
 800830c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830e:	2200      	movs	r2, #0
 8008310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008318:	f7f8 fc96 	bl	8000c48 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4613      	mov	r3, r2
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008324:	e058      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008326:	4b38      	ldr	r3, [pc, #224]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	099b      	lsrs	r3, r3, #6
 800832c:	2200      	movs	r2, #0
 800832e:	4618      	mov	r0, r3
 8008330:	4611      	mov	r1, r2
 8008332:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008336:	623b      	str	r3, [r7, #32]
 8008338:	2300      	movs	r3, #0
 800833a:	627b      	str	r3, [r7, #36]	@ 0x24
 800833c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	f04f 0100 	mov.w	r1, #0
 800834c:	0159      	lsls	r1, r3, #5
 800834e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008352:	0150      	lsls	r0, r2, #5
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4641      	mov	r1, r8
 800835a:	ebb2 0a01 	subs.w	sl, r2, r1
 800835e:	4649      	mov	r1, r9
 8008360:	eb63 0b01 	sbc.w	fp, r3, r1
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008378:	ebb2 040a 	subs.w	r4, r2, sl
 800837c:	eb63 050b 	sbc.w	r5, r3, fp
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	00eb      	lsls	r3, r5, #3
 800838a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800838e:	00e2      	lsls	r2, r4, #3
 8008390:	4614      	mov	r4, r2
 8008392:	461d      	mov	r5, r3
 8008394:	4643      	mov	r3, r8
 8008396:	18e3      	adds	r3, r4, r3
 8008398:	603b      	str	r3, [r7, #0]
 800839a:	464b      	mov	r3, r9
 800839c:	eb45 0303 	adc.w	r3, r5, r3
 80083a0:	607b      	str	r3, [r7, #4]
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083ae:	4629      	mov	r1, r5
 80083b0:	028b      	lsls	r3, r1, #10
 80083b2:	4621      	mov	r1, r4
 80083b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083b8:	4621      	mov	r1, r4
 80083ba:	028a      	lsls	r2, r1, #10
 80083bc:	4610      	mov	r0, r2
 80083be:	4619      	mov	r1, r3
 80083c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c2:	2200      	movs	r2, #0
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	61fa      	str	r2, [r7, #28]
 80083c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083cc:	f7f8 fc3c 	bl	8000c48 <__aeabi_uldivmod>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4613      	mov	r3, r2
 80083d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80083d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x200>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	3301      	adds	r3, #1
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80083e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083f2:	e002      	b.n	80083fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083f4:	4b05      	ldr	r3, [pc, #20]	@ (800840c <HAL_RCC_GetSysClockFreq+0x204>)
 80083f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3750      	adds	r7, #80	@ 0x50
 8008400:	46bd      	mov	sp, r7
 8008402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008406:	bf00      	nop
 8008408:	40023800 	.word	0x40023800
 800840c:	00f42400 	.word	0x00f42400
 8008410:	007a1200 	.word	0x007a1200

08008414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008418:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <HAL_RCC_GetHCLKFreq+0x14>)
 800841a:	681b      	ldr	r3, [r3, #0]
}
 800841c:	4618      	mov	r0, r3
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000018 	.word	0x20000018

0800842c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e07b      	b.n	8008536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	d108      	bne.n	8008458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800844e:	d009      	beq.n	8008464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	61da      	str	r2, [r3, #28]
 8008456:	e005      	b.n	8008464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fb fe32 	bl	80040e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800849a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e8:	ea42 0103 	orr.w	r1, r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	f003 0104 	and.w	r1, r3, #4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	f003 0210 	and.w	r2, r3, #16
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800854e:	f7fc f961 	bl	8004814 <HAL_GetTick>
 8008552:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d001      	beq.n	8008568 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008564:	2302      	movs	r3, #2
 8008566:	e12a      	b.n	80087be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_SPI_Transmit+0x36>
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e122      	b.n	80087be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_SPI_Transmit+0x48>
 8008582:	2302      	movs	r3, #2
 8008584:	e11b      	b.n	80087be <HAL_SPI_Transmit+0x280>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2203      	movs	r2, #3
 8008592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d4:	d10f      	bne.n	80085f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008600:	2b40      	cmp	r3, #64	@ 0x40
 8008602:	d007      	beq.n	8008614 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800861c:	d152      	bne.n	80086c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_SPI_Transmit+0xee>
 8008626:	8b7b      	ldrh	r3, [r7, #26]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d145      	bne.n	80086b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	1c9a      	adds	r2, r3, #2
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008650:	e032      	b.n	80086b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d112      	bne.n	8008686 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008664:	881a      	ldrh	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	1c9a      	adds	r2, r3, #2
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008684:	e018      	b.n	80086b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008686:	f7fc f8c5 	bl	8004814 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d803      	bhi.n	800869e <HAL_SPI_Transmit+0x160>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d102      	bne.n	80086a4 <HAL_SPI_Transmit+0x166>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e082      	b.n	80087be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1c7      	bne.n	8008652 <HAL_SPI_Transmit+0x114>
 80086c2:	e053      	b.n	800876c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_SPI_Transmit+0x194>
 80086cc:	8b7b      	ldrh	r3, [r7, #26]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d147      	bne.n	8008762 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086f8:	e033      	b.n	8008762 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b02      	cmp	r3, #2
 8008706:	d113      	bne.n	8008730 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800872e:	e018      	b.n	8008762 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008730:	f7fc f870 	bl	8004814 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d803      	bhi.n	8008748 <HAL_SPI_Transmit+0x20a>
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d102      	bne.n	800874e <HAL_SPI_Transmit+0x210>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e02d      	b.n	80087be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1c6      	bne.n	80086fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fa59 	bl	8008c28 <SPI_EndRxTxTransaction>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	617b      	str	r3, [r7, #20]
 800879e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80087bc:	2300      	movs	r3, #0
  }
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b08a      	sub	sp, #40	@ 0x28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087d4:	2301      	movs	r3, #1
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087d8:	f7fc f81c 	bl	8004814 <HAL_GetTick>
 80087dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80087ec:	887b      	ldrh	r3, [r7, #2]
 80087ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087f0:	7ffb      	ldrb	r3, [r7, #31]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d00c      	beq.n	8008810 <HAL_SPI_TransmitReceive+0x4a>
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087fc:	d106      	bne.n	800880c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d102      	bne.n	800880c <HAL_SPI_TransmitReceive+0x46>
 8008806:	7ffb      	ldrb	r3, [r7, #31]
 8008808:	2b04      	cmp	r3, #4
 800880a:	d001      	beq.n	8008810 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
 800880e:	e17f      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_SPI_TransmitReceive+0x5c>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_SPI_TransmitReceive+0x5c>
 800881c:	887b      	ldrh	r3, [r7, #2]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e174      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_SPI_TransmitReceive+0x6e>
 8008830:	2302      	movs	r3, #2
 8008832:	e16d      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b04      	cmp	r3, #4
 8008846:	d003      	beq.n	8008850 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2205      	movs	r2, #5
 800884c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	887a      	ldrh	r2, [r7, #2]
 8008860:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	887a      	ldrh	r2, [r7, #2]
 8008866:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	887a      	ldrh	r2, [r7, #2]
 8008872:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	887a      	ldrh	r2, [r7, #2]
 8008878:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008890:	2b40      	cmp	r3, #64	@ 0x40
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088ac:	d17e      	bne.n	80089ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_TransmitReceive+0xf6>
 80088b6:	8afb      	ldrh	r3, [r7, #22]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d16c      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088cc:	1c9a      	adds	r2, r3, #2
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088e0:	e059      	b.n	8008996 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d11b      	bne.n	8008928 <HAL_SPI_TransmitReceive+0x162>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d016      	beq.n	8008928 <HAL_SPI_TransmitReceive+0x162>
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d113      	bne.n	8008928 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008904:	881a      	ldrh	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008910:	1c9a      	adds	r2, r3, #2
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b01      	cmp	r3, #1
 8008934:	d119      	bne.n	800896a <HAL_SPI_TransmitReceive+0x1a4>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d014      	beq.n	800896a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	b292      	uxth	r2, r2
 800894c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	1c9a      	adds	r2, r3, #2
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008966:	2301      	movs	r3, #1
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800896a:	f7fb ff53 	bl	8004814 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008976:	429a      	cmp	r2, r3
 8008978:	d80d      	bhi.n	8008996 <HAL_SPI_TransmitReceive+0x1d0>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008980:	d009      	beq.n	8008996 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e0bc      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1a0      	bne.n	80088e2 <HAL_SPI_TransmitReceive+0x11c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d19b      	bne.n	80088e2 <HAL_SPI_TransmitReceive+0x11c>
 80089aa:	e082      	b.n	8008ab2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_SPI_TransmitReceive+0x1f4>
 80089b4:	8afb      	ldrh	r3, [r7, #22]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d171      	bne.n	8008a9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	7812      	ldrb	r2, [r2, #0]
 80089c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089e0:	e05d      	b.n	8008a9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d11c      	bne.n	8008a2a <HAL_SPI_TransmitReceive+0x264>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d017      	beq.n	8008a2a <HAL_SPI_TransmitReceive+0x264>
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d114      	bne.n	8008a2a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d119      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x2a6>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d014      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4c:	b2d2      	uxtb	r2, r2
 8008a4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a6c:	f7fb fed2 	bl	8004814 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d803      	bhi.n	8008a84 <HAL_SPI_TransmitReceive+0x2be>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d102      	bne.n	8008a8a <HAL_SPI_TransmitReceive+0x2c4>
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e038      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d19c      	bne.n	80089e2 <HAL_SPI_TransmitReceive+0x21c>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d197      	bne.n	80089e2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ab2:	6a3a      	ldr	r2, [r7, #32]
 8008ab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f8b6 	bl	8008c28 <SPI_EndRxTxTransaction>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d008      	beq.n	8008ad4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e01d      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
  }
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3728      	adds	r7, #40	@ 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	4613      	mov	r3, r2
 8008b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b28:	f7fb fe74 	bl	8004814 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b38:	f7fb fe6c 	bl	8004814 <HAL_GetTick>
 8008b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b3e:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	015b      	lsls	r3, r3, #5
 8008b44:	0d1b      	lsrs	r3, r3, #20
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	fb02 f303 	mul.w	r3, r2, r3
 8008b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b4e:	e054      	b.n	8008bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d050      	beq.n	8008bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b58:	f7fb fe5c 	bl	8004814 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d902      	bls.n	8008b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d13d      	bne.n	8008bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b86:	d111      	bne.n	8008bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b90:	d004      	beq.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b9a:	d107      	bne.n	8008bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bb4:	d10f      	bne.n	8008bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e017      	b.n	8008c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4013      	ands	r3, r2
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	bf0c      	ite	eq
 8008c0a:	2301      	moveq	r3, #1
 8008c0c:	2300      	movne	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d19b      	bne.n	8008b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000018 	.word	0x20000018

08008c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff ff6a 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c4e:	f043 0220 	orr.w	r2, r3, #32
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e032      	b.n	8008cc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc8 <SPI_EndRxTxTransaction+0xa0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ccc <SPI_EndRxTxTransaction+0xa4>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	0d5b      	lsrs	r3, r3, #21
 8008c66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008c6a:	fb02 f303 	mul.w	r3, r2, r3
 8008c6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c78:	d112      	bne.n	8008ca0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	2180      	movs	r1, #128	@ 0x80
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff ff47 	bl	8008b18 <SPI_WaitFlagStateUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d016      	beq.n	8008cbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c94:	f043 0220 	orr.w	r2, r3, #32
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e00f      	b.n	8008cc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb6:	2b80      	cmp	r3, #128	@ 0x80
 8008cb8:	d0f2      	beq.n	8008ca0 <SPI_EndRxTxTransaction+0x78>
 8008cba:	e000      	b.n	8008cbe <SPI_EndRxTxTransaction+0x96>
        break;
 8008cbc:	bf00      	nop
  }

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000018 	.word	0x20000018
 8008ccc:	165e9f81 	.word	0x165e9f81

08008cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e041      	b.n	8008d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fb faa4 	bl	8004244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f000 f8f4 	bl	8008efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_TIM_ConfigClockSource+0x1c>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e0b4      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x186>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008da8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008db0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc2:	d03e      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0xd4>
 8008dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dc8:	f200 8087 	bhi.w	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd0:	f000 8086 	beq.w	8008ee0 <HAL_TIM_ConfigClockSource+0x172>
 8008dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd8:	d87f      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008dda:	2b70      	cmp	r3, #112	@ 0x70
 8008ddc:	d01a      	beq.n	8008e14 <HAL_TIM_ConfigClockSource+0xa6>
 8008dde:	2b70      	cmp	r3, #112	@ 0x70
 8008de0:	d87b      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008de2:	2b60      	cmp	r3, #96	@ 0x60
 8008de4:	d050      	beq.n	8008e88 <HAL_TIM_ConfigClockSource+0x11a>
 8008de6:	2b60      	cmp	r3, #96	@ 0x60
 8008de8:	d877      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008dea:	2b50      	cmp	r3, #80	@ 0x50
 8008dec:	d03c      	beq.n	8008e68 <HAL_TIM_ConfigClockSource+0xfa>
 8008dee:	2b50      	cmp	r3, #80	@ 0x50
 8008df0:	d873      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008df2:	2b40      	cmp	r3, #64	@ 0x40
 8008df4:	d058      	beq.n	8008ea8 <HAL_TIM_ConfigClockSource+0x13a>
 8008df6:	2b40      	cmp	r3, #64	@ 0x40
 8008df8:	d86f      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008dfa:	2b30      	cmp	r3, #48	@ 0x30
 8008dfc:	d064      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8008dfe:	2b30      	cmp	r3, #48	@ 0x30
 8008e00:	d86b      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d060      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d867      	bhi.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05c      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d05a      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0x15a>
 8008e12:	e062      	b.n	8008eda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e24:	f000 f990 	bl	8009148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	609a      	str	r2, [r3, #8]
      break;
 8008e40:	e04f      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e52:	f000 f979 	bl	8009148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e64:	609a      	str	r2, [r3, #8]
      break;
 8008e66:	e03c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e74:	461a      	mov	r2, r3
 8008e76:	f000 f8ed 	bl	8009054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2150      	movs	r1, #80	@ 0x50
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f946 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008e86:	e02c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e94:	461a      	mov	r2, r3
 8008e96:	f000 f90c 	bl	80090b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2160      	movs	r1, #96	@ 0x60
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 f936 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ea6:	e01c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f000 f8cd 	bl	8009054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2140      	movs	r1, #64	@ 0x40
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 f926 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ec6:	e00c      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f000 f91d 	bl	8009112 <TIM_ITRx_SetConfig>
      break;
 8008ed8:	e003      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ede:	e000      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ee0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a46      	ldr	r2, [pc, #280]	@ (8009028 <TIM_Base_SetConfig+0x12c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d013      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f1a:	d00f      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a43      	ldr	r2, [pc, #268]	@ (800902c <TIM_Base_SetConfig+0x130>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a42      	ldr	r2, [pc, #264]	@ (8009030 <TIM_Base_SetConfig+0x134>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d007      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a41      	ldr	r2, [pc, #260]	@ (8009034 <TIM_Base_SetConfig+0x138>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a40      	ldr	r2, [pc, #256]	@ (8009038 <TIM_Base_SetConfig+0x13c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d108      	bne.n	8008f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a35      	ldr	r2, [pc, #212]	@ (8009028 <TIM_Base_SetConfig+0x12c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d02b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5c:	d027      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a32      	ldr	r2, [pc, #200]	@ (800902c <TIM_Base_SetConfig+0x130>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d023      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a31      	ldr	r2, [pc, #196]	@ (8009030 <TIM_Base_SetConfig+0x134>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01f      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a30      	ldr	r2, [pc, #192]	@ (8009034 <TIM_Base_SetConfig+0x138>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d01b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2f      	ldr	r2, [pc, #188]	@ (8009038 <TIM_Base_SetConfig+0x13c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d017      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a2e      	ldr	r2, [pc, #184]	@ (800903c <TIM_Base_SetConfig+0x140>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a2d      	ldr	r2, [pc, #180]	@ (8009040 <TIM_Base_SetConfig+0x144>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00f      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2c      	ldr	r2, [pc, #176]	@ (8009044 <TIM_Base_SetConfig+0x148>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00b      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a2b      	ldr	r2, [pc, #172]	@ (8009048 <TIM_Base_SetConfig+0x14c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d007      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800904c <TIM_Base_SetConfig+0x150>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d003      	beq.n	8008fae <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a29      	ldr	r2, [pc, #164]	@ (8009050 <TIM_Base_SetConfig+0x154>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d108      	bne.n	8008fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a10      	ldr	r2, [pc, #64]	@ (8009028 <TIM_Base_SetConfig+0x12c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_Base_SetConfig+0xf8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a12      	ldr	r2, [pc, #72]	@ (8009038 <TIM_Base_SetConfig+0x13c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d103      	bne.n	8008ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b01      	cmp	r3, #1
 800900c:	d105      	bne.n	800901a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	611a      	str	r2, [r3, #16]
  }
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40010000 	.word	0x40010000
 800902c:	40000400 	.word	0x40000400
 8009030:	40000800 	.word	0x40000800
 8009034:	40000c00 	.word	0x40000c00
 8009038:	40010400 	.word	0x40010400
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800
 8009048:	40001800 	.word	0x40001800
 800904c:	40001c00 	.word	0x40001c00
 8009050:	40002000 	.word	0x40002000

08009054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0201 	bic.w	r2, r3, #1
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800907e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f023 030a 	bic.w	r3, r3, #10
 8009090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4313      	orrs	r3, r2
 8009098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	f023 0210 	bic.w	r2, r3, #16
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	031b      	lsls	r3, r3, #12
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	621a      	str	r2, [r3, #32]
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	f043 0307 	orr.w	r3, r3, #7
 8009134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	609a      	str	r2, [r3, #8]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	021a      	lsls	r2, r3, #8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	431a      	orrs	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	609a      	str	r2, [r3, #8]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800919c:	2302      	movs	r3, #2
 800919e:	e05a      	b.n	8009256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a21      	ldr	r2, [pc, #132]	@ (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d022      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ec:	d01d      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d018      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1a      	ldr	r2, [pc, #104]	@ (8009270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00e      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a18      	ldr	r2, [pc, #96]	@ (8009274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d009      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a17      	ldr	r2, [pc, #92]	@ (8009278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d004      	beq.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a15      	ldr	r2, [pc, #84]	@ (800927c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d10c      	bne.n	8009244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4313      	orrs	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	40010000 	.word	0x40010000
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40000c00 	.word	0x40000c00
 8009274:	40010400 	.word	0x40010400
 8009278:	40014000 	.word	0x40014000
 800927c:	40001800 	.word	0x40001800

08009280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009280:	b084      	sub	sp, #16
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	f107 001c 	add.w	r0, r7, #28
 800928e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009292:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009296:	2b01      	cmp	r3, #1
 8009298:	d123      	bne.n	80092e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80092ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d105      	bne.n	80092d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 fae8 	bl	800a8ac <USB_CoreReset>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e01b      	b.n	800931a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fadc 	bl	800a8ac <USB_CoreReset>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009304:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	639a      	str	r2, [r3, #56]	@ 0x38
 800930c:	e005      	b.n	800931a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009312:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800931a:	7fbb      	ldrb	r3, [r7, #30]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10b      	bne.n	8009338 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f043 0206 	orr.w	r2, r3, #6
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f043 0220 	orr.w	r2, r3, #32
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009344:	b004      	add	sp, #16
 8009346:	4770      	bx	lr

08009348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b02      	cmp	r3, #2
 800935a:	d165      	bne.n	8009428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4a41      	ldr	r2, [pc, #260]	@ (8009464 <USB_SetTurnaroundTime+0x11c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d906      	bls.n	8009372 <USB_SetTurnaroundTime+0x2a>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4a40      	ldr	r2, [pc, #256]	@ (8009468 <USB_SetTurnaroundTime+0x120>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d202      	bcs.n	8009372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800936c:	230f      	movs	r3, #15
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e062      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4a3c      	ldr	r2, [pc, #240]	@ (8009468 <USB_SetTurnaroundTime+0x120>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d306      	bcc.n	8009388 <USB_SetTurnaroundTime+0x40>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4a3b      	ldr	r2, [pc, #236]	@ (800946c <USB_SetTurnaroundTime+0x124>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d202      	bcs.n	8009388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009382:	230e      	movs	r3, #14
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	e057      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	4a38      	ldr	r2, [pc, #224]	@ (800946c <USB_SetTurnaroundTime+0x124>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d306      	bcc.n	800939e <USB_SetTurnaroundTime+0x56>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4a37      	ldr	r2, [pc, #220]	@ (8009470 <USB_SetTurnaroundTime+0x128>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d202      	bcs.n	800939e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009398:	230d      	movs	r3, #13
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e04c      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	4a33      	ldr	r2, [pc, #204]	@ (8009470 <USB_SetTurnaroundTime+0x128>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d306      	bcc.n	80093b4 <USB_SetTurnaroundTime+0x6c>
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a32      	ldr	r2, [pc, #200]	@ (8009474 <USB_SetTurnaroundTime+0x12c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d802      	bhi.n	80093b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093ae:	230c      	movs	r3, #12
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e041      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009474 <USB_SetTurnaroundTime+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d906      	bls.n	80093ca <USB_SetTurnaroundTime+0x82>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4a2e      	ldr	r2, [pc, #184]	@ (8009478 <USB_SetTurnaroundTime+0x130>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d802      	bhi.n	80093ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80093c4:	230b      	movs	r3, #11
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e036      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4a2a      	ldr	r2, [pc, #168]	@ (8009478 <USB_SetTurnaroundTime+0x130>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d906      	bls.n	80093e0 <USB_SetTurnaroundTime+0x98>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a29      	ldr	r2, [pc, #164]	@ (800947c <USB_SetTurnaroundTime+0x134>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d802      	bhi.n	80093e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80093da:	230a      	movs	r3, #10
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	e02b      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4a26      	ldr	r2, [pc, #152]	@ (800947c <USB_SetTurnaroundTime+0x134>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d906      	bls.n	80093f6 <USB_SetTurnaroundTime+0xae>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4a25      	ldr	r2, [pc, #148]	@ (8009480 <USB_SetTurnaroundTime+0x138>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d202      	bcs.n	80093f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80093f0:	2309      	movs	r3, #9
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e020      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a21      	ldr	r2, [pc, #132]	@ (8009480 <USB_SetTurnaroundTime+0x138>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d306      	bcc.n	800940c <USB_SetTurnaroundTime+0xc4>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4a20      	ldr	r2, [pc, #128]	@ (8009484 <USB_SetTurnaroundTime+0x13c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d802      	bhi.n	800940c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009406:	2308      	movs	r3, #8
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	e015      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4a1d      	ldr	r2, [pc, #116]	@ (8009484 <USB_SetTurnaroundTime+0x13c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d906      	bls.n	8009422 <USB_SetTurnaroundTime+0xda>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4a1c      	ldr	r2, [pc, #112]	@ (8009488 <USB_SetTurnaroundTime+0x140>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d202      	bcs.n	8009422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800941c:	2307      	movs	r3, #7
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e00a      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009422:	2306      	movs	r3, #6
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e007      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800942e:	2309      	movs	r3, #9
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e001      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009434:	2309      	movs	r3, #9
 8009436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	029b      	lsls	r3, r3, #10
 800944c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009450:	431a      	orrs	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	00d8acbf 	.word	0x00d8acbf
 8009468:	00e4e1c0 	.word	0x00e4e1c0
 800946c:	00f42400 	.word	0x00f42400
 8009470:	01067380 	.word	0x01067380
 8009474:	011a499f 	.word	0x011a499f
 8009478:	01312cff 	.word	0x01312cff
 800947c:	014ca43f 	.word	0x014ca43f
 8009480:	016e3600 	.word	0x016e3600
 8009484:	01a6ab1f 	.word	0x01a6ab1f
 8009488:	01e84800 	.word	0x01e84800

0800948c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f043 0201 	orr.w	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d115      	bne.n	800951e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80094fe:	200a      	movs	r0, #10
 8009500:	f7fb f994 	bl	800482c <HAL_Delay>
      ms += 10U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	330a      	adds	r3, #10
 8009508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 f93f 	bl	800a78e <USB_GetMode>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d01e      	beq.n	8009554 <USB_SetCurrentMode+0x84>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2bc7      	cmp	r3, #199	@ 0xc7
 800951a:	d9f0      	bls.n	80094fe <USB_SetCurrentMode+0x2e>
 800951c:	e01a      	b.n	8009554 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d115      	bne.n	8009550 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009530:	200a      	movs	r0, #10
 8009532:	f7fb f97b 	bl	800482c <HAL_Delay>
      ms += 10U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	330a      	adds	r3, #10
 800953a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f926 	bl	800a78e <USB_GetMode>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <USB_SetCurrentMode+0x84>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2bc7      	cmp	r3, #199	@ 0xc7
 800954c:	d9f0      	bls.n	8009530 <USB_SetCurrentMode+0x60>
 800954e:	e001      	b.n	8009554 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e005      	b.n	8009560 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2bc8      	cmp	r3, #200	@ 0xc8
 8009558:	d101      	bne.n	800955e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009568:	b084      	sub	sp, #16
 800956a:	b580      	push	{r7, lr}
 800956c:	b086      	sub	sp, #24
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009582:	2300      	movs	r3, #0
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	e009      	b.n	800959c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3340      	adds	r3, #64	@ 0x40
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	3301      	adds	r3, #1
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b0e      	cmp	r3, #14
 80095a0:	d9f2      	bls.n	8009588 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d11c      	bne.n	80095e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80095e2:	e00b      	b.n	80095fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009602:	461a      	mov	r2, r3
 8009604:	2300      	movs	r3, #0
 8009606:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009608:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800960c:	2b01      	cmp	r3, #1
 800960e:	d10d      	bne.n	800962c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009614:	2b00      	cmp	r3, #0
 8009616:	d104      	bne.n	8009622 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f968 	bl	80098f0 <USB_SetDevSpeed>
 8009620:	e008      	b.n	8009634 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009622:	2101      	movs	r1, #1
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f963 	bl	80098f0 <USB_SetDevSpeed>
 800962a:	e003      	b.n	8009634 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800962c:	2103      	movs	r1, #3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f95e 	bl	80098f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009634:	2110      	movs	r1, #16
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f8fa 	bl	8009830 <USB_FlushTxFifo>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f924 	bl	8009894 <USB_FlushRxFifo>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965c:	461a      	mov	r2, r3
 800965e:	2300      	movs	r3, #0
 8009660:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009668:	461a      	mov	r2, r3
 800966a:	2300      	movs	r3, #0
 800966c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009674:	461a      	mov	r2, r3
 8009676:	2300      	movs	r3, #0
 8009678:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800967a:	2300      	movs	r3, #0
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	e043      	b.n	8009708 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009696:	d118      	bne.n	80096ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096aa:	461a      	mov	r2, r3
 80096ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e013      	b.n	80096dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c0:	461a      	mov	r2, r3
 80096c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	e008      	b.n	80096dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d6:	461a      	mov	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e8:	461a      	mov	r2, r3
 80096ea:	2300      	movs	r3, #0
 80096ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fa:	461a      	mov	r2, r3
 80096fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3301      	adds	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
 8009708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800970c:	461a      	mov	r2, r3
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	4293      	cmp	r3, r2
 8009712:	d3b5      	bcc.n	8009680 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009714:	2300      	movs	r3, #0
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	e043      	b.n	80097a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800972c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009730:	d118      	bne.n	8009764 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e013      	b.n	8009776 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975a:	461a      	mov	r2, r3
 800975c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	e008      	b.n	8009776 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009770:	461a      	mov	r2, r3
 8009772:	2300      	movs	r3, #0
 8009774:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009782:	461a      	mov	r2, r3
 8009784:	2300      	movs	r3, #0
 8009786:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009794:	461a      	mov	r2, r3
 8009796:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800979a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	3301      	adds	r3, #1
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097a6:	461a      	mov	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d3b5      	bcc.n	800971a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80097ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f043 0210 	orr.w	r2, r3, #16
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	699a      	ldr	r2, [r3, #24]
 80097e8:	4b10      	ldr	r3, [pc, #64]	@ (800982c <USB_DevInit+0x2c4>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	f043 0208 	orr.w	r2, r3, #8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009804:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009808:	2b01      	cmp	r3, #1
 800980a:	d107      	bne.n	800981c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009814:	f043 0304 	orr.w	r3, r3, #4
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009828:	b004      	add	sp, #16
 800982a:	4770      	bx	lr
 800982c:	803c3800 	.word	0x803c3800

08009830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800984a:	d901      	bls.n	8009850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e01b      	b.n	8009888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	daf2      	bge.n	800983e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	019b      	lsls	r3, r3, #6
 8009860:	f043 0220 	orr.w	r2, r3, #32
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009874:	d901      	bls.n	800987a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e006      	b.n	8009888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b20      	cmp	r3, #32
 8009884:	d0f0      	beq.n	8009868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098ac:	d901      	bls.n	80098b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e018      	b.n	80098e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	daf2      	bge.n	80098a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2210      	movs	r2, #16
 80098c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098d0:	d901      	bls.n	80098d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e006      	b.n	80098e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f003 0310 	and.w	r3, r3, #16
 80098de:	2b10      	cmp	r3, #16
 80098e0:	d0f0      	beq.n	80098c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b087      	sub	sp, #28
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 0306 	and.w	r3, r3, #6
 800993a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]
 8009946:	e00a      	b.n	800995e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d002      	beq.n	8009954 <USB_GetDevSpeed+0x32>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b06      	cmp	r3, #6
 8009952:	d102      	bne.n	800995a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009954:	2302      	movs	r3, #2
 8009956:	75fb      	strb	r3, [r7, #23]
 8009958:	e001      	b.n	800995e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800995a:	230f      	movs	r3, #15
 800995c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800995e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009960:	4618      	mov	r0, r3
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d13a      	bne.n	80099fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	2101      	movs	r1, #1
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	b29b      	uxth	r3, r3
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099a6:	4313      	orrs	r3, r2
 80099a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d155      	bne.n	8009a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	791b      	ldrb	r3, [r3, #4]
 80099da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099e4:	4313      	orrs	r3, r2
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	e036      	b.n	8009a6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a04:	69da      	ldr	r2, [r3, #28]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 030f 	and.w	r3, r3, #15
 8009a0e:	2101      	movs	r1, #1
 8009a10:	fa01 f303 	lsl.w	r3, r1, r3
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d11a      	bne.n	8009a6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a52:	430b      	orrs	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	0151      	lsls	r1, r2, #5
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
	...

08009a7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d161      	bne.n	8009b5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aae:	d11f      	bne.n	8009af0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ace:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	0151      	lsls	r1, r2, #5
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	440a      	add	r2, r1
 8009ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 030f 	and.w	r3, r3, #15
 8009b00:	2101      	movs	r1, #1
 8009b02:	fa01 f303 	lsl.w	r3, r1, r3
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b10:	4013      	ands	r3, r2
 8009b12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	2101      	movs	r1, #1
 8009b26:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b34:	4013      	ands	r3, r2
 8009b36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	0159      	lsls	r1, r3, #5
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	440b      	add	r3, r1
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b52:	4619      	mov	r1, r3
 8009b54:	4b35      	ldr	r3, [pc, #212]	@ (8009c2c <USB_DeactivateEndpoint+0x1b0>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	600b      	str	r3, [r1, #0]
 8009b5a:	e060      	b.n	8009c1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b72:	d11f      	bne.n	8009bb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 030f 	and.w	r3, r3, #15
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bca:	041b      	lsls	r3, r3, #16
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bde:	69da      	ldr	r2, [r3, #28]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	2101      	movs	r1, #1
 8009bea:	fa01 f303 	lsl.w	r3, r1, r3
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	0159      	lsls	r1, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	440b      	add	r3, r1
 8009c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c16:	4619      	mov	r1, r3
 8009c18:	4b05      	ldr	r3, [pc, #20]	@ (8009c30 <USB_DeactivateEndpoint+0x1b4>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	ec337800 	.word	0xec337800
 8009c30:	eff37800 	.word	0xeff37800

08009c34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	f040 817f 	bne.w	8009f54 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d132      	bne.n	8009cc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	0151      	lsls	r1, r2, #5
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	440a      	add	r2, r1
 8009c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c78:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c7c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	69ba      	ldr	r2, [r7, #24]
 8009c92:	0151      	lsls	r1, r2, #5
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	440a      	add	r2, r1
 8009c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cbc:	0cdb      	lsrs	r3, r3, #19
 8009cbe:	04db      	lsls	r3, r3, #19
 8009cc0:	6113      	str	r3, [r2, #16]
 8009cc2:	e097      	b.n	8009df4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cde:	0cdb      	lsrs	r3, r3, #19
 8009ce0:	04db      	lsls	r3, r3, #19
 8009ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cfe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d06:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11a      	bne.n	8009d44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	691a      	ldr	r2, [r3, #16]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d903      	bls.n	8009d22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d40:	6113      	str	r3, [r2, #16]
 8009d42:	e044      	b.n	8009dce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	691a      	ldr	r2, [r3, #16]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	1e5a      	subs	r2, r3, #1
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d58:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	8afb      	ldrh	r3, [r7, #22]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	4ba4      	ldr	r3, [pc, #656]	@ (800a000 <USB_EPStartXfer+0x3cc>)
 8009d6e:	400b      	ands	r3, r1
 8009d70:	69b9      	ldr	r1, [r7, #24]
 8009d72:	0148      	lsls	r0, r1, #5
 8009d74:	69f9      	ldr	r1, [r7, #28]
 8009d76:	4401      	add	r1, r0
 8009d78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	791b      	ldrb	r3, [r3, #4]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d122      	bne.n	8009dce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009da6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db4:	691a      	ldr	r2, [r3, #16]
 8009db6:	8afb      	ldrh	r3, [r7, #22]
 8009db8:	075b      	lsls	r3, r3, #29
 8009dba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009dbe:	69b9      	ldr	r1, [r7, #24]
 8009dc0:	0148      	lsls	r0, r1, #5
 8009dc2:	69f9      	ldr	r1, [r7, #28]
 8009dc4:	4401      	add	r1, r0
 8009dc6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de4:	69b9      	ldr	r1, [r7, #24]
 8009de6:	0148      	lsls	r0, r1, #5
 8009de8:	69f9      	ldr	r1, [r7, #28]
 8009dea:	4401      	add	r1, r0
 8009dec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009df0:	4313      	orrs	r3, r2
 8009df2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d14b      	bne.n	8009e92 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	791b      	ldrb	r3, [r3, #4]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d128      	bne.n	8009e70 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d110      	bne.n	8009e50 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	0151      	lsls	r1, r2, #5
 8009e40:	69fa      	ldr	r2, [r7, #28]
 8009e42:	440a      	add	r2, r1
 8009e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	e00f      	b.n	8009e70 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	0151      	lsls	r1, r2, #5
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	440a      	add	r2, r1
 8009e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e6e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	e166      	b.n	800a160 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009eb0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	791b      	ldrb	r3, [r3, #4]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d015      	beq.n	8009ee6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 814e 	beq.w	800a160 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eda:	69f9      	ldr	r1, [r7, #28]
 8009edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	634b      	str	r3, [r1, #52]	@ 0x34
 8009ee4:	e13c      	b.n	800a160 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d110      	bne.n	8009f18 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	e00f      	b.n	8009f38 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f36:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	68d9      	ldr	r1, [r3, #12]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	b298      	uxth	r0, r3
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 f9b9 	bl	800a2c4 <USB_WritePacket>
 8009f52:	e105      	b.n	800a160 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f6e:	0cdb      	lsrs	r3, r3, #19
 8009f70:	04db      	lsls	r3, r3, #19
 8009f72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	0151      	lsls	r1, r2, #5
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	440a      	add	r2, r1
 8009f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f8e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f92:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f96:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d132      	bne.n	800a004 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	689a      	ldr	r2, [r3, #8]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fcc:	69b9      	ldr	r1, [r7, #24]
 8009fce:	0148      	lsls	r0, r1, #5
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	4401      	add	r1, r0
 8009fd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ff6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ffa:	6113      	str	r3, [r2, #16]
 8009ffc:	e062      	b.n	800a0c4 <USB_EPStartXfer+0x490>
 8009ffe:	bf00      	nop
 800a000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d123      	bne.n	800a054 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a022:	69b9      	ldr	r1, [r7, #24]
 800a024:	0148      	lsls	r0, r1, #5
 800a026:	69f9      	ldr	r1, [r7, #28]
 800a028:	4401      	add	r1, r0
 800a02a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a02e:	4313      	orrs	r3, r2
 800a030:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	440a      	add	r2, r1
 800a048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a04c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a050:	6113      	str	r3, [r2, #16]
 800a052:	e037      	b.n	800a0c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	4413      	add	r3, r2
 800a05e:	1e5a      	subs	r2, r3, #1
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	fbb2 f3f3 	udiv	r3, r2, r3
 800a068:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	8afa      	ldrh	r2, [r7, #22]
 800a070:	fb03 f202 	mul.w	r2, r3, r2
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	8afb      	ldrh	r3, [r7, #22]
 800a088:	04d9      	lsls	r1, r3, #19
 800a08a:	4b38      	ldr	r3, [pc, #224]	@ (800a16c <USB_EPStartXfer+0x538>)
 800a08c:	400b      	ands	r3, r1
 800a08e:	69b9      	ldr	r1, [r7, #24]
 800a090:	0148      	lsls	r0, r1, #5
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	4401      	add	r1, r0
 800a096:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a09a:	4313      	orrs	r3, r2
 800a09c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b4:	69b9      	ldr	r1, [r7, #24]
 800a0b6:	0148      	lsls	r0, r1, #5
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	4401      	add	r1, r0
 800a0bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d10d      	bne.n	800a0e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	68d9      	ldr	r1, [r3, #12]
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	791b      	ldrb	r3, [r3, #4]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d128      	bne.n	800a140 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d110      	bne.n	800a120 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	0151      	lsls	r1, r2, #5
 800a110:	69fa      	ldr	r2, [r7, #28]
 800a112:	440a      	add	r2, r1
 800a114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a118:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	e00f      	b.n	800a140 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	015a      	lsls	r2, r3, #5
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	4413      	add	r3, r2
 800a128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	0151      	lsls	r1, r2, #5
 800a132:	69fa      	ldr	r2, [r7, #28]
 800a134:	440a      	add	r2, r1
 800a136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a13a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a13e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	015a      	lsls	r2, r3, #5
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	4413      	add	r3, r2
 800a148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a15a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a15e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	1ff80000 	.word	0x1ff80000

0800a170 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d14a      	bne.n	800a224 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1a6:	f040 8086 	bne.w	800a2b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	7812      	ldrb	r2, [r2, #0]
 800a1be:	0151      	lsls	r1, r2, #5
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	0151      	lsls	r1, r2, #5
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d902      	bls.n	800a208 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	75fb      	strb	r3, [r7, #23]
          break;
 800a206:	e056      	b.n	800a2b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a21c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a220:	d0e7      	beq.n	800a1f2 <USB_EPStopXfer+0x82>
 800a222:	e048      	b.n	800a2b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a23c:	d13b      	bne.n	800a2b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	7812      	ldrb	r2, [r2, #0]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a25c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a260:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	7812      	ldrb	r2, [r2, #0]
 800a276:	0151      	lsls	r1, r2, #5
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	440a      	add	r2, r1
 800a27c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a292:	4293      	cmp	r3, r2
 800a294:	d902      	bls.n	800a29c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	75fb      	strb	r3, [r7, #23]
          break;
 800a29a:	e00c      	b.n	800a2b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2b4:	d0e7      	beq.n	800a286 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	371c      	adds	r7, #28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b089      	sub	sp, #36	@ 0x24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	71fb      	strb	r3, [r7, #7]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a2e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d123      	bne.n	800a332 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a2ea:	88bb      	ldrh	r3, [r7, #4]
 800a2ec:	3303      	adds	r3, #3
 800a2ee:	089b      	lsrs	r3, r3, #2
 800a2f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	e018      	b.n	800a32a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	031a      	lsls	r2, r3, #12
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a304:	461a      	mov	r2, r3
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	3301      	adds	r3, #1
 800a310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	3301      	adds	r3, #1
 800a316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	3301      	adds	r3, #1
 800a31c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	3301      	adds	r3, #1
 800a322:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	3301      	adds	r3, #1
 800a328:	61bb      	str	r3, [r7, #24]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d3e2      	bcc.n	800a2f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3724      	adds	r7, #36	@ 0x24
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a340:	b480      	push	{r7}
 800a342:	b08b      	sub	sp, #44	@ 0x2c
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	089b      	lsrs	r3, r3, #2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
 800a36a:	e014      	b.n	800a396 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	601a      	str	r2, [r3, #0]
    pDest++;
 800a378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37a:	3301      	adds	r3, #1
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	3301      	adds	r3, #1
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	3301      	adds	r3, #1
 800a388:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	3301      	adds	r3, #1
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	3301      	adds	r3, #1
 800a394:	623b      	str	r3, [r7, #32]
 800a396:	6a3a      	ldr	r2, [r7, #32]
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d3e6      	bcc.n	800a36c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a39e:	8bfb      	ldrh	r3, [r7, #30]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01e      	beq.n	800a3e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f107 0310 	add.w	r3, r7, #16
 800a3b4:	6812      	ldr	r2, [r2, #0]
 800a3b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a3d6:	8bfb      	ldrh	r3, [r7, #30]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a3dc:	8bfb      	ldrh	r3, [r7, #30]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1ea      	bne.n	800a3b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	372c      	adds	r7, #44	@ 0x2c
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d12c      	bne.n	800a466 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	db12      	blt.n	800a444 <USB_EPSetStall+0x54>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00f      	beq.n	800a444 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a43e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a442:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	0151      	lsls	r1, r2, #5
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	440a      	add	r2, r1
 800a45a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a45e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	e02b      	b.n	800a4be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	db12      	blt.n	800a49e <USB_EPSetStall+0xae>
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00f      	beq.n	800a49e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	440a      	add	r2, r1
 800a494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a498:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a49c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d128      	bne.n	800a53a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	0151      	lsls	r1, r2, #5
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	440a      	add	r2, r1
 800a4fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a502:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a506:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	791b      	ldrb	r3, [r3, #4]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d003      	beq.n	800a518 <USB_EPClearStall+0x4c>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	791b      	ldrb	r3, [r3, #4]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d138      	bne.n	800a58a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	e027      	b.n	800a58a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a554:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a558:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	791b      	ldrb	r3, [r3, #4]
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d003      	beq.n	800a56a <USB_EPClearStall+0x9e>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	791b      	ldrb	r3, [r3, #4]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d10f      	bne.n	800a58a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	0151      	lsls	r1, r2, #5
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	440a      	add	r2, r1
 800a580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a588:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a5ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a5cc:	68f9      	ldr	r1, [r7, #12]
 800a5ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5fe:	f023 0303 	bic.w	r3, r3, #3
 800a602:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a612:	f023 0302 	bic.w	r3, r3, #2
 800a616:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a640:	f023 0303 	bic.w	r3, r3, #3
 800a644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a654:	f043 0302 	orr.w	r3, r3, #2
 800a658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4013      	ands	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a680:	68fb      	ldr	r3, [r7, #12]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a68e:	b480      	push	{r7}
 800a690:	b085      	sub	sp, #20
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	0c1b      	lsrs	r3, r3, #16
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b085      	sub	sp, #20
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	b29b      	uxth	r3, r3
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4013      	ands	r3, r2
 800a722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a724:	68bb      	ldr	r3, [r7, #8]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a732:	b480      	push	{r7}
 800a734:	b087      	sub	sp, #28
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a754:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 030f 	and.w	r3, r3, #15
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	fa22 f303 	lsr.w	r3, r2, r3
 800a762:	01db      	lsls	r3, r3, #7
 800a764:	b2db      	uxtb	r3, r3
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	4013      	ands	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a780:	68bb      	ldr	r3, [r7, #8]
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	f003 0301 	and.w	r3, r3, #1
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a7c8:	f023 0307 	bic.w	r3, r3, #7
 800a7cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	333c      	adds	r3, #60	@ 0x3c
 800a806:	3304      	adds	r3, #4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	4a26      	ldr	r2, [pc, #152]	@ (800a8a8 <USB_EP0_OutStart+0xb8>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d90a      	bls.n	800a82a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a824:	d101      	bne.n	800a82a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	e037      	b.n	800a89a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a830:	461a      	mov	r2, r3
 800a832:	2300      	movs	r3, #0
 800a834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a844:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a848:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a858:	f043 0318 	orr.w	r3, r3, #24
 800a85c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a86c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a870:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d10f      	bne.n	800a898 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a892:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	4f54300a 	.word	0x4f54300a

0800a8ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8c4:	d901      	bls.n	800a8ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e01b      	b.n	800a902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	daf2      	bge.n	800a8b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f043 0201 	orr.w	r2, r3, #1
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8ee:	d901      	bls.n	800a8f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e006      	b.n	800a902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d0f0      	beq.n	800a8e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a91c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a920:	f002 fc38 	bl	800d194 <USBD_static_malloc>
 800a924:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d109      	bne.n	800a940 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	32b0      	adds	r2, #176	@ 0xb0
 800a936:	2100      	movs	r1, #0
 800a938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a93c:	2302      	movs	r3, #2
 800a93e:	e0d4      	b.n	800aaea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a940:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a944:	2100      	movs	r1, #0
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f003 fb86 	bl	800e058 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	32b0      	adds	r2, #176	@ 0xb0
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	32b0      	adds	r2, #176	@ 0xb0
 800a966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	7c1b      	ldrb	r3, [r3, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d138      	bne.n	800a9ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a978:	4b5e      	ldr	r3, [pc, #376]	@ (800aaf4 <USBD_CDC_Init+0x1e4>)
 800a97a:	7819      	ldrb	r1, [r3, #0]
 800a97c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a980:	2202      	movs	r2, #2
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f002 fae3 	bl	800cf4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a988:	4b5a      	ldr	r3, [pc, #360]	@ (800aaf4 <USBD_CDC_Init+0x1e4>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 020f 	and.w	r2, r3, #15
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	440b      	add	r3, r1
 800a99c:	3324      	adds	r3, #36	@ 0x24
 800a99e:	2201      	movs	r2, #1
 800a9a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9a2:	4b55      	ldr	r3, [pc, #340]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800a9a4:	7819      	ldrb	r1, [r3, #0]
 800a9a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f002 face 	bl	800cf4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9b2:	4b51      	ldr	r3, [pc, #324]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	f003 020f 	and.w	r2, r3, #15
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	440b      	add	r3, r1
 800a9c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a9ce:	4b4b      	ldr	r3, [pc, #300]	@ (800aafc <USBD_CDC_Init+0x1ec>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	f003 020f 	and.w	r2, r3, #15
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	3326      	adds	r3, #38	@ 0x26
 800a9e4:	2210      	movs	r2, #16
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	e035      	b.n	800aa56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a9ea:	4b42      	ldr	r3, [pc, #264]	@ (800aaf4 <USBD_CDC_Init+0x1e4>)
 800a9ec:	7819      	ldrb	r1, [r3, #0]
 800a9ee:	2340      	movs	r3, #64	@ 0x40
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f002 faab 	bl	800cf4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a9f8:	4b3e      	ldr	r3, [pc, #248]	@ (800aaf4 <USBD_CDC_Init+0x1e4>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 020f 	and.w	r2, r3, #15
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	3324      	adds	r3, #36	@ 0x24
 800aa0e:	2201      	movs	r2, #1
 800aa10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa12:	4b39      	ldr	r3, [pc, #228]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800aa14:	7819      	ldrb	r1, [r3, #0]
 800aa16:	2340      	movs	r3, #64	@ 0x40
 800aa18:	2202      	movs	r2, #2
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f002 fa97 	bl	800cf4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa20:	4b35      	ldr	r3, [pc, #212]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	f003 020f 	and.w	r2, r3, #15
 800aa28:	6879      	ldr	r1, [r7, #4]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	440b      	add	r3, r1
 800aa34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa38:	2201      	movs	r2, #1
 800aa3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa3c:	4b2f      	ldr	r3, [pc, #188]	@ (800aafc <USBD_CDC_Init+0x1ec>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 020f 	and.w	r2, r3, #15
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	3326      	adds	r3, #38	@ 0x26
 800aa52:	2210      	movs	r2, #16
 800aa54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa56:	4b29      	ldr	r3, [pc, #164]	@ (800aafc <USBD_CDC_Init+0x1ec>)
 800aa58:	7819      	ldrb	r1, [r3, #0]
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f002 fa75 	bl	800cf4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aa64:	4b25      	ldr	r3, [pc, #148]	@ (800aafc <USBD_CDC_Init+0x1ec>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3324      	adds	r3, #36	@ 0x24
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	33b0      	adds	r3, #176	@ 0xb0
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aab4:	2302      	movs	r3, #2
 800aab6:	e018      	b.n	800aaea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7c1b      	ldrb	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10a      	bne.n	800aad6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aac0:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800aac2:	7819      	ldrb	r1, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aaca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f002 fb2c 	bl	800d12c <USBD_LL_PrepareReceive>
 800aad4:	e008      	b.n	800aae8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aad6:	4b08      	ldr	r3, [pc, #32]	@ (800aaf8 <USBD_CDC_Init+0x1e8>)
 800aad8:	7819      	ldrb	r1, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aae0:	2340      	movs	r3, #64	@ 0x40
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f002 fb22 	bl	800d12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200000bb 	.word	0x200000bb
 800aaf8:	200000bc 	.word	0x200000bc
 800aafc:	200000bd 	.word	0x200000bd

0800ab00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ab0c:	4b3a      	ldr	r3, [pc, #232]	@ (800abf8 <USBD_CDC_DeInit+0xf8>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f002 fa41 	bl	800cf9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ab18:	4b37      	ldr	r3, [pc, #220]	@ (800abf8 <USBD_CDC_DeInit+0xf8>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	3324      	adds	r3, #36	@ 0x24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ab32:	4b32      	ldr	r3, [pc, #200]	@ (800abfc <USBD_CDC_DeInit+0xfc>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f002 fa2e 	bl	800cf9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ab3e:	4b2f      	ldr	r3, [pc, #188]	@ (800abfc <USBD_CDC_DeInit+0xfc>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	f003 020f 	and.w	r2, r3, #15
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	440b      	add	r3, r1
 800ab52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab56:	2200      	movs	r2, #0
 800ab58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ab5a:	4b29      	ldr	r3, [pc, #164]	@ (800ac00 <USBD_CDC_DeInit+0x100>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f002 fa1a 	bl	800cf9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ab66:	4b26      	ldr	r3, [pc, #152]	@ (800ac00 <USBD_CDC_DeInit+0x100>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	f003 020f 	and.w	r2, r3, #15
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	3324      	adds	r3, #36	@ 0x24
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab80:	4b1f      	ldr	r3, [pc, #124]	@ (800ac00 <USBD_CDC_DeInit+0x100>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	f003 020f 	and.w	r2, r3, #15
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	440b      	add	r3, r1
 800ab94:	3326      	adds	r3, #38	@ 0x26
 800ab96:	2200      	movs	r2, #0
 800ab98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	32b0      	adds	r2, #176	@ 0xb0
 800aba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01f      	beq.n	800abec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	33b0      	adds	r3, #176	@ 0xb0
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	32b0      	adds	r2, #176	@ 0xb0
 800abca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abce:	4618      	mov	r0, r3
 800abd0:	f002 faee 	bl	800d1b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32b0      	adds	r2, #176	@ 0xb0
 800abde:	2100      	movs	r1, #0
 800abe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	200000bb 	.word	0x200000bb
 800abfc:	200000bc 	.word	0x200000bc
 800ac00:	200000bd 	.word	0x200000bd

0800ac04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	32b0      	adds	r2, #176	@ 0xb0
 800ac18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e0bf      	b.n	800adb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d050      	beq.n	800ace2 <USBD_CDC_Setup+0xde>
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	f040 80af 	bne.w	800ada4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	88db      	ldrh	r3, [r3, #6]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d03a      	beq.n	800acc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	b25b      	sxtb	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da1b      	bge.n	800ac90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	33b0      	adds	r3, #176	@ 0xb0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ac6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	88d2      	ldrh	r2, [r2, #6]
 800ac74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	88db      	ldrh	r3, [r3, #6]
 800ac7a:	2b07      	cmp	r3, #7
 800ac7c:	bf28      	it	cs
 800ac7e:	2307      	movcs	r3, #7
 800ac80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	89fa      	ldrh	r2, [r7, #14]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 fd53 	bl	800c734 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac8e:	e090      	b.n	800adb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	785a      	ldrb	r2, [r3, #1]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	88db      	ldrh	r3, [r3, #6]
 800ac9e:	2b3f      	cmp	r3, #63	@ 0x3f
 800aca0:	d803      	bhi.n	800acaa <USBD_CDC_Setup+0xa6>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	88db      	ldrh	r3, [r3, #6]
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	e000      	b.n	800acac <USBD_CDC_Setup+0xa8>
 800acaa:	2240      	movs	r2, #64	@ 0x40
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800acb2:	6939      	ldr	r1, [r7, #16]
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800acba:	461a      	mov	r2, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f001 fd65 	bl	800c78c <USBD_CtlPrepareRx>
      break;
 800acc2:	e076      	b.n	800adb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	33b0      	adds	r3, #176	@ 0xb0
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	7850      	ldrb	r0, [r2, #1]
 800acda:	2200      	movs	r2, #0
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	4798      	blx	r3
      break;
 800ace0:	e067      	b.n	800adb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	785b      	ldrb	r3, [r3, #1]
 800ace6:	2b0b      	cmp	r3, #11
 800ace8:	d851      	bhi.n	800ad8e <USBD_CDC_Setup+0x18a>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <USBD_CDC_Setup+0xec>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad21 	.word	0x0800ad21
 800acf4:	0800ad9d 	.word	0x0800ad9d
 800acf8:	0800ad8f 	.word	0x0800ad8f
 800acfc:	0800ad8f 	.word	0x0800ad8f
 800ad00:	0800ad8f 	.word	0x0800ad8f
 800ad04:	0800ad8f 	.word	0x0800ad8f
 800ad08:	0800ad8f 	.word	0x0800ad8f
 800ad0c:	0800ad8f 	.word	0x0800ad8f
 800ad10:	0800ad8f 	.word	0x0800ad8f
 800ad14:	0800ad8f 	.word	0x0800ad8f
 800ad18:	0800ad4b 	.word	0x0800ad4b
 800ad1c:	0800ad75 	.word	0x0800ad75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b03      	cmp	r3, #3
 800ad2a:	d107      	bne.n	800ad3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad2c:	f107 030a 	add.w	r3, r7, #10
 800ad30:	2202      	movs	r2, #2
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 fcfd 	bl	800c734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad3a:	e032      	b.n	800ada2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 fc7b 	bl	800c63a <USBD_CtlError>
            ret = USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	75fb      	strb	r3, [r7, #23]
          break;
 800ad48:	e02b      	b.n	800ada2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d107      	bne.n	800ad66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad56:	f107 030d 	add.w	r3, r7, #13
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f001 fce8 	bl	800c734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad64:	e01d      	b.n	800ada2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f001 fc66 	bl	800c63a <USBD_CtlError>
            ret = USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	75fb      	strb	r3, [r7, #23]
          break;
 800ad72:	e016      	b.n	800ada2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d00f      	beq.n	800ada0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 fc59 	bl	800c63a <USBD_CtlError>
            ret = USBD_FAIL;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad8c:	e008      	b.n	800ada0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 fc52 	bl	800c63a <USBD_CtlError>
          ret = USBD_FAIL;
 800ad96:	2303      	movs	r3, #3
 800ad98:	75fb      	strb	r3, [r7, #23]
          break;
 800ad9a:	e002      	b.n	800ada2 <USBD_CDC_Setup+0x19e>
          break;
 800ad9c:	bf00      	nop
 800ad9e:	e008      	b.n	800adb2 <USBD_CDC_Setup+0x1ae>
          break;
 800ada0:	bf00      	nop
      }
      break;
 800ada2:	e006      	b.n	800adb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 fc47 	bl	800c63a <USBD_CtlError>
      ret = USBD_FAIL;
 800adac:	2303      	movs	r3, #3
 800adae:	75fb      	strb	r3, [r7, #23]
      break;
 800adb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	32b0      	adds	r2, #176	@ 0xb0
 800adda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e065      	b.n	800aeb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	32b0      	adds	r2, #176	@ 0xb0
 800adf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800adf6:	78fb      	ldrb	r3, [r7, #3]
 800adf8:	f003 020f 	and.w	r2, r3, #15
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	3318      	adds	r3, #24
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d02f      	beq.n	800ae70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	f003 020f 	and.w	r2, r3, #15
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	3318      	adds	r3, #24
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	f003 010f 	and.w	r1, r3, #15
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4403      	add	r3, r0
 800ae38:	331c      	adds	r3, #28
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae40:	fb01 f303 	mul.w	r3, r1, r3
 800ae44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d112      	bne.n	800ae70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	f003 020f 	and.w	r2, r3, #15
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3318      	adds	r3, #24
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae62:	78f9      	ldrb	r1, [r7, #3]
 800ae64:	2300      	movs	r3, #0
 800ae66:	2200      	movs	r2, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f002 f93e 	bl	800d0ea <USBD_LL_Transmit>
 800ae6e:	e01f      	b.n	800aeb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	33b0      	adds	r3, #176	@ 0xb0
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d010      	beq.n	800aeb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	33b0      	adds	r3, #176	@ 0xb0
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aeac:	78fa      	ldrb	r2, [r7, #3]
 800aeae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	32b0      	adds	r2, #176	@ 0xb0
 800aed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32b0      	adds	r2, #176	@ 0xb0
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e01a      	b.n	800af22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f002 f93c 	bl	800d16e <USBD_LL_GetRxDataSize>
 800aef6:	4602      	mov	r2, r0
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	33b0      	adds	r3, #176	@ 0xb0
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800af1c:	4611      	mov	r1, r2
 800af1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	32b0      	adds	r2, #176	@ 0xb0
 800af3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e024      	b.n	800af96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	33b0      	adds	r3, #176	@ 0xb0
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d019      	beq.n	800af94 <USBD_CDC_EP0_RxReady+0x6a>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800af66:	2bff      	cmp	r3, #255	@ 0xff
 800af68:	d014      	beq.n	800af94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	33b0      	adds	r3, #176	@ 0xb0
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800af82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	22ff      	movs	r2, #255	@ 0xff
 800af90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afa8:	2182      	movs	r1, #130	@ 0x82
 800afaa:	4818      	ldr	r0, [pc, #96]	@ (800b00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800afac:	f000 fd0f 	bl	800b9ce <USBD_GetEpDesc>
 800afb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afb2:	2101      	movs	r1, #1
 800afb4:	4815      	ldr	r0, [pc, #84]	@ (800b00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800afb6:	f000 fd0a 	bl	800b9ce <USBD_GetEpDesc>
 800afba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afbc:	2181      	movs	r1, #129	@ 0x81
 800afbe:	4813      	ldr	r0, [pc, #76]	@ (800b00c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800afc0:	f000 fd05 	bl	800b9ce <USBD_GetEpDesc>
 800afc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2210      	movs	r2, #16
 800afd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d006      	beq.n	800afe6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2200      	movs	r2, #0
 800afdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afe0:	711a      	strb	r2, [r3, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d006      	beq.n	800affa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aff4:	711a      	strb	r2, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2243      	movs	r2, #67	@ 0x43
 800affe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b000:	4b02      	ldr	r3, [pc, #8]	@ (800b00c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20000078 	.word	0x20000078

0800b010 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b018:	2182      	movs	r1, #130	@ 0x82
 800b01a:	4818      	ldr	r0, [pc, #96]	@ (800b07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b01c:	f000 fcd7 	bl	800b9ce <USBD_GetEpDesc>
 800b020:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b022:	2101      	movs	r1, #1
 800b024:	4815      	ldr	r0, [pc, #84]	@ (800b07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b026:	f000 fcd2 	bl	800b9ce <USBD_GetEpDesc>
 800b02a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b02c:	2181      	movs	r1, #129	@ 0x81
 800b02e:	4813      	ldr	r0, [pc, #76]	@ (800b07c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b030:	f000 fccd 	bl	800b9ce <USBD_GetEpDesc>
 800b034:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2210      	movs	r2, #16
 800b040:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d006      	beq.n	800b056 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2200      	movs	r2, #0
 800b04c:	711a      	strb	r2, [r3, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f042 0202 	orr.w	r2, r2, #2
 800b054:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d006      	beq.n	800b06a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	711a      	strb	r2, [r3, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	f042 0202 	orr.w	r2, r2, #2
 800b068:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2243      	movs	r2, #67	@ 0x43
 800b06e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b070:	4b02      	ldr	r3, [pc, #8]	@ (800b07c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000078 	.word	0x20000078

0800b080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b088:	2182      	movs	r1, #130	@ 0x82
 800b08a:	4818      	ldr	r0, [pc, #96]	@ (800b0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b08c:	f000 fc9f 	bl	800b9ce <USBD_GetEpDesc>
 800b090:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b092:	2101      	movs	r1, #1
 800b094:	4815      	ldr	r0, [pc, #84]	@ (800b0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b096:	f000 fc9a 	bl	800b9ce <USBD_GetEpDesc>
 800b09a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b09c:	2181      	movs	r1, #129	@ 0x81
 800b09e:	4813      	ldr	r0, [pc, #76]	@ (800b0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b0a0:	f000 fc95 	bl	800b9ce <USBD_GetEpDesc>
 800b0a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2210      	movs	r2, #16
 800b0b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d006      	beq.n	800b0c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0c0:	711a      	strb	r2, [r3, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0d4:	711a      	strb	r2, [r3, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2243      	movs	r2, #67	@ 0x43
 800b0de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0e0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000078 	.word	0x20000078

0800b0f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0fe:	4b03      	ldr	r3, [pc, #12]	@ (800b10c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000034 	.word	0x20000034

0800b110 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	e009      	b.n	800b138 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	33b0      	adds	r3, #176	@ 0xb0
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	32b0      	adds	r2, #176	@ 0xb0
 800b15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b166:	2303      	movs	r3, #3
 800b168:	e008      	b.n	800b17c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	32b0      	adds	r2, #176	@ 0xb0
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e004      	b.n	800b1b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
	...

0800b1c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	32b0      	adds	r2, #176	@ 0xb0
 800b1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	32b0      	adds	r2, #176	@ 0xb0
 800b1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e018      	b.n	800b224 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7c1b      	ldrb	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b22c <USBD_CDC_ReceivePacket+0x68>)
 800b1fc:	7819      	ldrb	r1, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 ff8f 	bl	800d12c <USBD_LL_PrepareReceive>
 800b20e:	e008      	b.n	800b222 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b210:	4b06      	ldr	r3, [pc, #24]	@ (800b22c <USBD_CDC_ReceivePacket+0x68>)
 800b212:	7819      	ldrb	r1, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b21a:	2340      	movs	r3, #64	@ 0x40
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f001 ff85 	bl	800d12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	200000bc 	.word	0x200000bc

0800b230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	4613      	mov	r3, r2
 800b23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b244:	2303      	movs	r3, #3
 800b246:	e01f      	b.n	800b288 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	79fa      	ldrb	r2, [r7, #7]
 800b27a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f001 fdff 	bl	800ce80 <USBD_LL_Init>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b286:	7dfb      	ldrb	r3, [r7, #23]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e025      	b.n	800b2f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	32ae      	adds	r2, #174	@ 0xae
 800b2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00f      	beq.n	800b2e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	32ae      	adds	r2, #174	@ 0xae
 800b2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	f107 020e 	add.w	r2, r7, #14
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4798      	blx	r3
 800b2dc:	4602      	mov	r2, r0
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fe07 	bl	800cf18 <USBD_LL_Start>
 800b30a:	4603      	mov	r3, r0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	460b      	mov	r3, r1
 800b334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b340:	2b00      	cmp	r3, #0
 800b342:	d009      	beq.n	800b358 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	4611      	mov	r1, r2
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	4798      	blx	r3
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	78fa      	ldrb	r2, [r7, #3]
 800b37c:	4611      	mov	r1, r2
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 f90c 	bl	800c5c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b3bc:	461a      	mov	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3ca:	f003 031f 	and.w	r3, r3, #31
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d01a      	beq.n	800b408 <USBD_LL_SetupStage+0x72>
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d822      	bhi.n	800b41c <USBD_LL_SetupStage+0x86>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <USBD_LL_SetupStage+0x4a>
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d00a      	beq.n	800b3f4 <USBD_LL_SetupStage+0x5e>
 800b3de:	e01d      	b.n	800b41c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fb63 	bl	800bab4 <USBD_StdDevReq>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f2:	e020      	b.n	800b436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fbcb 	bl	800bb98 <USBD_StdItfReq>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
      break;
 800b406:	e016      	b.n	800b436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fc2d 	bl	800bc70 <USBD_StdEPReq>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
      break;
 800b41a:	e00c      	b.n	800b436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b426:	b2db      	uxtb	r3, r3
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fdd4 	bl	800cfd8 <USBD_LL_StallEP>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]
      break;
 800b434:	bf00      	nop
  }

  return ret;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	460b      	mov	r3, r1
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d16e      	bne.n	800b536 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b45e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b466:	2b03      	cmp	r3, #3
 800b468:	f040 8098 	bne.w	800b59c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	689a      	ldr	r2, [r3, #8]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	429a      	cmp	r2, r3
 800b476:	d913      	bls.n	800b4a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	68da      	ldr	r2, [r3, #12]
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	4293      	cmp	r3, r2
 800b490:	bf28      	it	cs
 800b492:	4613      	movcs	r3, r2
 800b494:	461a      	mov	r2, r3
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f001 f994 	bl	800c7c6 <USBD_CtlContinueRx>
 800b49e:	e07d      	b.n	800b59c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4a6:	f003 031f 	and.w	r3, r3, #31
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d014      	beq.n	800b4d8 <USBD_LL_DataOutStage+0x98>
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d81d      	bhi.n	800b4ee <USBD_LL_DataOutStage+0xae>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <USBD_LL_DataOutStage+0x7c>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d003      	beq.n	800b4c2 <USBD_LL_DataOutStage+0x82>
 800b4ba:	e018      	b.n	800b4ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75bb      	strb	r3, [r7, #22]
            break;
 800b4c0:	e018      	b.n	800b4f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fa64 	bl	800b99a <USBD_CoreFindIF>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	75bb      	strb	r3, [r7, #22]
            break;
 800b4d6:	e00d      	b.n	800b4f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 fa66 	bl	800b9b4 <USBD_CoreFindEP>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	75bb      	strb	r3, [r7, #22]
            break;
 800b4ec:	e002      	b.n	800b4f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	75bb      	strb	r3, [r7, #22]
            break;
 800b4f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b4f4:	7dbb      	ldrb	r3, [r7, #22]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d119      	bne.n	800b52e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b03      	cmp	r3, #3
 800b504:	d113      	bne.n	800b52e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b506:	7dba      	ldrb	r2, [r7, #22]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	32ae      	adds	r2, #174	@ 0xae
 800b50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00b      	beq.n	800b52e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b516:	7dba      	ldrb	r2, [r7, #22]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b51e:	7dba      	ldrb	r2, [r7, #22]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	32ae      	adds	r2, #174	@ 0xae
 800b524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f001 f95a 	bl	800c7e8 <USBD_CtlSendStatus>
 800b534:	e032      	b.n	800b59c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	4619      	mov	r1, r3
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 fa37 	bl	800b9b4 <USBD_CoreFindEP>
 800b546:	4603      	mov	r3, r0
 800b548:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b54a:	7dbb      	ldrb	r3, [r7, #22]
 800b54c:	2bff      	cmp	r3, #255	@ 0xff
 800b54e:	d025      	beq.n	800b59c <USBD_LL_DataOutStage+0x15c>
 800b550:	7dbb      	ldrb	r3, [r7, #22]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d122      	bne.n	800b59c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d117      	bne.n	800b592 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b562:	7dba      	ldrb	r2, [r7, #22]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	32ae      	adds	r2, #174	@ 0xae
 800b568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00f      	beq.n	800b592 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b572:	7dba      	ldrb	r2, [r7, #22]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b57a:	7dba      	ldrb	r2, [r7, #22]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	32ae      	adds	r2, #174	@ 0xae
 800b580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	7afa      	ldrb	r2, [r7, #11]
 800b588:	4611      	mov	r1, r2
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	4798      	blx	r3
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	e000      	b.n	800b59e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b086      	sub	sp, #24
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d16f      	bne.n	800b69a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d15a      	bne.n	800b680 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d914      	bls.n	800b600 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f001 f8bc 	bl	800c76a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f001 fd97 	bl	800d12c <USBD_LL_PrepareReceive>
 800b5fe:	e03f      	b.n	800b680 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d11c      	bne.n	800b646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b614:	429a      	cmp	r2, r3
 800b616:	d316      	bcc.n	800b646 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b622:	429a      	cmp	r2, r3
 800b624:	d20f      	bcs.n	800b646 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b626:	2200      	movs	r2, #0
 800b628:	2100      	movs	r1, #0
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f001 f89d 	bl	800c76a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	2100      	movs	r1, #0
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f001 fd74 	bl	800d12c <USBD_LL_PrepareReceive>
 800b644:	e01c      	b.n	800b680 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d10f      	bne.n	800b672 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d009      	beq.n	800b672 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b672:	2180      	movs	r1, #128	@ 0x80
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f001 fcaf 	bl	800cfd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f001 f8c7 	bl	800c80e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d03a      	beq.n	800b700 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff fe42 	bl	800b314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b698:	e032      	b.n	800b700 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 f985 	bl	800b9b4 <USBD_CoreFindEP>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
 800b6b0:	2bff      	cmp	r3, #255	@ 0xff
 800b6b2:	d025      	beq.n	800b700 <USBD_LL_DataInStage+0x15a>
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d122      	bne.n	800b700 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d11c      	bne.n	800b700 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b6c6:	7dfa      	ldrb	r2, [r7, #23]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	32ae      	adds	r2, #174	@ 0xae
 800b6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d014      	beq.n	800b700 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b6d6:	7dfa      	ldrb	r2, [r7, #23]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b6de:	7dfa      	ldrb	r2, [r7, #23]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	32ae      	adds	r2, #174	@ 0xae
 800b6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	7afa      	ldrb	r2, [r7, #11]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	4798      	blx	r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b6f6:	7dbb      	ldrb	r3, [r7, #22]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b6fc:	7dbb      	ldrb	r3, [r7, #22]
 800b6fe:	e000      	b.n	800b702 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d014      	beq.n	800b770 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00e      	beq.n	800b770 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6852      	ldr	r2, [r2, #4]
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	4611      	mov	r1, r2
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	4798      	blx	r3
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b770:	2340      	movs	r3, #64	@ 0x40
 800b772:	2200      	movs	r2, #0
 800b774:	2100      	movs	r1, #0
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 fbe9 	bl	800cf4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2240      	movs	r2, #64	@ 0x40
 800b788:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b78c:	2340      	movs	r3, #64	@ 0x40
 800b78e:	2200      	movs	r2, #0
 800b790:	2180      	movs	r1, #128	@ 0x80
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 fbdb 	bl	800cf4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2240      	movs	r2, #64	@ 0x40
 800b7a2:	621a      	str	r2, [r3, #32]

  return ret;
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	78fa      	ldrb	r2, [r7, #3]
 800b7be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d006      	beq.n	800b7f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b04      	cmp	r3, #4
 800b818:	d106      	bne.n	800b828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b820:	b2da      	uxtb	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b03      	cmp	r3, #3
 800b848:	d110      	bne.n	800b86c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85a:	69db      	ldr	r3, [r3, #28]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	32ae      	adds	r2, #174	@ 0xae
 800b88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e01c      	b.n	800b8d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d115      	bne.n	800b8d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	32ae      	adds	r2, #174	@ 0xae
 800b8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00b      	beq.n	800b8d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	32ae      	adds	r2, #174	@ 0xae
 800b8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c6:	6a1b      	ldr	r3, [r3, #32]
 800b8c8:	78fa      	ldrb	r2, [r7, #3]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	32ae      	adds	r2, #174	@ 0xae
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e01c      	b.n	800b936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b03      	cmp	r3, #3
 800b906:	d115      	bne.n	800b934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	32ae      	adds	r2, #174	@ 0xae
 800b912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	32ae      	adds	r2, #174	@ 0xae
 800b926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	78fa      	ldrb	r2, [r7, #3]
 800b92e:	4611      	mov	r1, r2
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	6852      	ldr	r2, [r2, #4]
 800b97e:	b2d2      	uxtb	r2, r2
 800b980:	4611      	mov	r1, r2
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	4798      	blx	r3
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b9c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b086      	sub	sp, #24
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	885b      	ldrh	r3, [r3, #2]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	7812      	ldrb	r2, [r2, #0]
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d91f      	bls.n	800ba34 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b9fa:	e013      	b.n	800ba24 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b9fc:	f107 030a 	add.w	r3, r7, #10
 800ba00:	4619      	mov	r1, r3
 800ba02:	6978      	ldr	r0, [r7, #20]
 800ba04:	f000 f81b 	bl	800ba3e <USBD_GetNextDesc>
 800ba08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	2b05      	cmp	r3, #5
 800ba10:	d108      	bne.n	800ba24 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	78fa      	ldrb	r2, [r7, #3]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d008      	beq.n	800ba32 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	897b      	ldrh	r3, [r7, #10]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d8e5      	bhi.n	800b9fc <USBD_GetEpDesc+0x2e>
 800ba30:	e000      	b.n	800ba34 <USBD_GetEpDesc+0x66>
          break;
 800ba32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ba34:	693b      	ldr	r3, [r7, #16]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	7812      	ldrb	r2, [r2, #0]
 800ba54:	4413      	add	r3, r2
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4413      	add	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b087      	sub	sp, #28
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	b21a      	sxth	r2, r3
 800ba9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	b21b      	sxth	r3, r3
 800baa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800baa6:	89fb      	ldrh	r3, [r7, #14]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baca:	2b40      	cmp	r3, #64	@ 0x40
 800bacc:	d005      	beq.n	800bada <USBD_StdDevReq+0x26>
 800bace:	2b40      	cmp	r3, #64	@ 0x40
 800bad0:	d857      	bhi.n	800bb82 <USBD_StdDevReq+0xce>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <USBD_StdDevReq+0x42>
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d153      	bne.n	800bb82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	32ae      	adds	r2, #174	@ 0xae
 800bae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
      break;
 800baf4:	e04a      	b.n	800bb8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d83b      	bhi.n	800bb76 <USBD_StdDevReq+0xc2>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <USBD_StdDevReq+0x50>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb59 	.word	0x0800bb59
 800bb08:	0800bb6d 	.word	0x0800bb6d
 800bb0c:	0800bb77 	.word	0x0800bb77
 800bb10:	0800bb63 	.word	0x0800bb63
 800bb14:	0800bb77 	.word	0x0800bb77
 800bb18:	0800bb37 	.word	0x0800bb37
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb77 	.word	0x0800bb77
 800bb24:	0800bb4f 	.word	0x0800bb4f
 800bb28:	0800bb41 	.word	0x0800bb41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa3c 	bl	800bfac <USBD_GetDescriptor>
          break;
 800bb34:	e024      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fba1 	bl	800c280 <USBD_SetAddress>
          break;
 800bb3e:	e01f      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fbe0 	bl	800c308 <USBD_SetConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
          break;
 800bb4c:	e018      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fc83 	bl	800c45c <USBD_GetConfig>
          break;
 800bb56:	e013      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fcb4 	bl	800c4c8 <USBD_GetStatus>
          break;
 800bb60:	e00e      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fce3 	bl	800c530 <USBD_SetFeature>
          break;
 800bb6a:	e009      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fd07 	bl	800c582 <USBD_ClrFeature>
          break;
 800bb74:	e004      	b.n	800bb80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd5e 	bl	800c63a <USBD_CtlError>
          break;
 800bb7e:	bf00      	nop
      }
      break;
 800bb80:	e004      	b.n	800bb8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fd58 	bl	800c63a <USBD_CtlError>
      break;
 800bb8a:	bf00      	nop
  }

  return ret;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop

0800bb98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbae:	2b40      	cmp	r3, #64	@ 0x40
 800bbb0:	d005      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbb2:	2b40      	cmp	r3, #64	@ 0x40
 800bbb4:	d852      	bhi.n	800bc5c <USBD_StdItfReq+0xc4>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <USBD_StdItfReq+0x26>
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d14e      	bne.n	800bc5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d840      	bhi.n	800bc4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	889b      	ldrh	r3, [r3, #4]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d836      	bhi.n	800bc44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	889b      	ldrh	r3, [r3, #4]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff fedb 	bl	800b99a <USBD_CoreFindIF>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2bff      	cmp	r3, #255	@ 0xff
 800bbec:	d01d      	beq.n	800bc2a <USBD_StdItfReq+0x92>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11a      	bne.n	800bc2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bbf4:	7bba      	ldrb	r2, [r7, #14]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	32ae      	adds	r2, #174	@ 0xae
 800bbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00f      	beq.n	800bc24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc04:	7bba      	ldrb	r2, [r7, #14]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc0c:	7bba      	ldrb	r2, [r7, #14]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	32ae      	adds	r2, #174	@ 0xae
 800bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc22:	e004      	b.n	800bc2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bc24:	2303      	movs	r3, #3
 800bc26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bc28:	e001      	b.n	800bc2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	88db      	ldrh	r3, [r3, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d110      	bne.n	800bc58 <USBD_StdItfReq+0xc0>
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fdd3 	bl	800c7e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc42:	e009      	b.n	800bc58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fcf7 	bl	800c63a <USBD_CtlError>
          break;
 800bc4c:	e004      	b.n	800bc58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fcf2 	bl	800c63a <USBD_CtlError>
          break;
 800bc56:	e000      	b.n	800bc5a <USBD_StdItfReq+0xc2>
          break;
 800bc58:	bf00      	nop
      }
      break;
 800bc5a:	e004      	b.n	800bc66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fceb 	bl	800c63a <USBD_CtlError>
      break;
 800bc64:	bf00      	nop
  }

  return ret;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	889b      	ldrh	r3, [r3, #4]
 800bc82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc8c:	2b40      	cmp	r3, #64	@ 0x40
 800bc8e:	d007      	beq.n	800bca0 <USBD_StdEPReq+0x30>
 800bc90:	2b40      	cmp	r3, #64	@ 0x40
 800bc92:	f200 817f 	bhi.w	800bf94 <USBD_StdEPReq+0x324>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d02a      	beq.n	800bcf0 <USBD_StdEPReq+0x80>
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	f040 817a 	bne.w	800bf94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fe85 	bl	800b9b4 <USBD_CoreFindEP>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcae:	7b7b      	ldrb	r3, [r7, #13]
 800bcb0:	2bff      	cmp	r3, #255	@ 0xff
 800bcb2:	f000 8174 	beq.w	800bf9e <USBD_StdEPReq+0x32e>
 800bcb6:	7b7b      	ldrb	r3, [r7, #13]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f040 8170 	bne.w	800bf9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bcbe:	7b7a      	ldrb	r2, [r7, #13]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bcc6:	7b7a      	ldrb	r2, [r7, #13]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	32ae      	adds	r2, #174	@ 0xae
 800bccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 8163 	beq.w	800bf9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bcd8:	7b7a      	ldrb	r2, [r7, #13]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	32ae      	adds	r2, #174	@ 0xae
 800bcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	4798      	blx	r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bcee:	e156      	b.n	800bf9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d008      	beq.n	800bd0a <USBD_StdEPReq+0x9a>
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	f300 8145 	bgt.w	800bf88 <USBD_StdEPReq+0x318>
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 809b 	beq.w	800be3a <USBD_StdEPReq+0x1ca>
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d03c      	beq.n	800bd82 <USBD_StdEPReq+0x112>
 800bd08:	e13e      	b.n	800bf88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d002      	beq.n	800bd1c <USBD_StdEPReq+0xac>
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d016      	beq.n	800bd48 <USBD_StdEPReq+0xd8>
 800bd1a:	e02c      	b.n	800bd76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00d      	beq.n	800bd3e <USBD_StdEPReq+0xce>
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b80      	cmp	r3, #128	@ 0x80
 800bd26:	d00a      	beq.n	800bd3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 f953 	bl	800cfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd32:	2180      	movs	r1, #128	@ 0x80
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f001 f94f 	bl	800cfd8 <USBD_LL_StallEP>
 800bd3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd3c:	e020      	b.n	800bd80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fc7a 	bl	800c63a <USBD_CtlError>
              break;
 800bd46:	e01b      	b.n	800bd80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	885b      	ldrh	r3, [r3, #2]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10e      	bne.n	800bd6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00b      	beq.n	800bd6e <USBD_StdEPReq+0xfe>
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b80      	cmp	r3, #128	@ 0x80
 800bd5a:	d008      	beq.n	800bd6e <USBD_StdEPReq+0xfe>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	88db      	ldrh	r3, [r3, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d104      	bne.n	800bd6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f001 f935 	bl	800cfd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd3a 	bl	800c7e8 <USBD_CtlSendStatus>

              break;
 800bd74:	e004      	b.n	800bd80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fc5e 	bl	800c63a <USBD_CtlError>
              break;
 800bd7e:	bf00      	nop
          }
          break;
 800bd80:	e107      	b.n	800bf92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d002      	beq.n	800bd94 <USBD_StdEPReq+0x124>
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d016      	beq.n	800bdc0 <USBD_StdEPReq+0x150>
 800bd92:	e04b      	b.n	800be2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd94:	7bbb      	ldrb	r3, [r7, #14]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00d      	beq.n	800bdb6 <USBD_StdEPReq+0x146>
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	2b80      	cmp	r3, #128	@ 0x80
 800bd9e:	d00a      	beq.n	800bdb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 f917 	bl	800cfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdaa:	2180      	movs	r1, #128	@ 0x80
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 f913 	bl	800cfd8 <USBD_LL_StallEP>
 800bdb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdb4:	e040      	b.n	800be38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fc3e 	bl	800c63a <USBD_CtlError>
              break;
 800bdbe:	e03b      	b.n	800be38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	885b      	ldrh	r3, [r3, #2]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d136      	bne.n	800be36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d004      	beq.n	800bddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f001 f91d 	bl	800d016 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fd03 	bl	800c7e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff fde4 	bl	800b9b4 <USBD_CoreFindEP>
 800bdec:	4603      	mov	r3, r0
 800bdee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdf0:	7b7b      	ldrb	r3, [r7, #13]
 800bdf2:	2bff      	cmp	r3, #255	@ 0xff
 800bdf4:	d01f      	beq.n	800be36 <USBD_StdEPReq+0x1c6>
 800bdf6:	7b7b      	ldrb	r3, [r7, #13]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d11c      	bne.n	800be36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bdfc:	7b7a      	ldrb	r2, [r7, #13]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be04:	7b7a      	ldrb	r2, [r7, #13]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	32ae      	adds	r2, #174	@ 0xae
 800be0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d010      	beq.n	800be36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be14:	7b7a      	ldrb	r2, [r7, #13]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	32ae      	adds	r2, #174	@ 0xae
 800be1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	4798      	blx	r3
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800be2a:	e004      	b.n	800be36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fc03 	bl	800c63a <USBD_CtlError>
              break;
 800be34:	e000      	b.n	800be38 <USBD_StdEPReq+0x1c8>
              break;
 800be36:	bf00      	nop
          }
          break;
 800be38:	e0ab      	b.n	800bf92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d002      	beq.n	800be4c <USBD_StdEPReq+0x1dc>
 800be46:	2b03      	cmp	r3, #3
 800be48:	d032      	beq.n	800beb0 <USBD_StdEPReq+0x240>
 800be4a:	e097      	b.n	800bf7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d007      	beq.n	800be62 <USBD_StdEPReq+0x1f2>
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b80      	cmp	r3, #128	@ 0x80
 800be56:	d004      	beq.n	800be62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fbed 	bl	800c63a <USBD_CtlError>
                break;
 800be60:	e091      	b.n	800bf86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be66:	2b00      	cmp	r3, #0
 800be68:	da0b      	bge.n	800be82 <USBD_StdEPReq+0x212>
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	3310      	adds	r3, #16
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	3304      	adds	r3, #4
 800be80:	e00b      	b.n	800be9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	4413      	add	r3, r2
 800be98:	3304      	adds	r3, #4
 800be9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2202      	movs	r2, #2
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fc43 	bl	800c734 <USBD_CtlSendData>
              break;
 800beae:	e06a      	b.n	800bf86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da11      	bge.n	800bedc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	f003 020f 	and.w	r2, r3, #15
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	3324      	adds	r3, #36	@ 0x24
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d117      	bne.n	800bf02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fbb0 	bl	800c63a <USBD_CtlError>
                  break;
 800beda:	e054      	b.n	800bf86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	f003 020f 	and.w	r2, r3, #15
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fb9d 	bl	800c63a <USBD_CtlError>
                  break;
 800bf00:	e041      	b.n	800bf86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da0b      	bge.n	800bf22 <USBD_StdEPReq+0x2b2>
 800bf0a:	7bbb      	ldrb	r3, [r7, #14]
 800bf0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	3310      	adds	r3, #16
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	3304      	adds	r3, #4
 800bf20:	e00b      	b.n	800bf3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	4413      	add	r3, r2
 800bf38:	3304      	adds	r3, #4
 800bf3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <USBD_StdEPReq+0x2d8>
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b80      	cmp	r3, #128	@ 0x80
 800bf46:	d103      	bne.n	800bf50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	e00e      	b.n	800bf6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 f87d 	bl	800d054 <USBD_LL_IsStallEP>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2201      	movs	r2, #1
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	e002      	b.n	800bf6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2202      	movs	r2, #2
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fbdd 	bl	800c734 <USBD_CtlSendData>
              break;
 800bf7a:	e004      	b.n	800bf86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fb5b 	bl	800c63a <USBD_CtlError>
              break;
 800bf84:	bf00      	nop
          }
          break;
 800bf86:	e004      	b.n	800bf92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb55 	bl	800c63a <USBD_CtlError>
          break;
 800bf90:	bf00      	nop
      }
      break;
 800bf92:	e005      	b.n	800bfa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fb4f 	bl	800c63a <USBD_CtlError>
      break;
 800bf9c:	e000      	b.n	800bfa0 <USBD_StdEPReq+0x330>
      break;
 800bf9e:	bf00      	nop
  }

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	0a1b      	lsrs	r3, r3, #8
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	2b06      	cmp	r3, #6
 800bfce:	f200 8128 	bhi.w	800c222 <USBD_GetDescriptor+0x276>
 800bfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd8 <USBD_GetDescriptor+0x2c>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800bff5 	.word	0x0800bff5
 800bfdc:	0800c00d 	.word	0x0800c00d
 800bfe0:	0800c04d 	.word	0x0800c04d
 800bfe4:	0800c223 	.word	0x0800c223
 800bfe8:	0800c223 	.word	0x0800c223
 800bfec:	0800c1c3 	.word	0x0800c1c3
 800bff0:	0800c1ef 	.word	0x0800c1ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	7c12      	ldrb	r2, [r2, #16]
 800c000:	f107 0108 	add.w	r1, r7, #8
 800c004:	4610      	mov	r0, r2
 800c006:	4798      	blx	r3
 800c008:	60f8      	str	r0, [r7, #12]
      break;
 800c00a:	e112      	b.n	800c232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7c1b      	ldrb	r3, [r3, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10d      	bne.n	800c030 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01c:	f107 0208 	add.w	r2, r7, #8
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
 800c024:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3301      	adds	r3, #1
 800c02a:	2202      	movs	r2, #2
 800c02c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c02e:	e100      	b.n	800c232 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c038:	f107 0208 	add.w	r2, r7, #8
 800c03c:	4610      	mov	r0, r2
 800c03e:	4798      	blx	r3
 800c040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3301      	adds	r3, #1
 800c046:	2202      	movs	r2, #2
 800c048:	701a      	strb	r2, [r3, #0]
      break;
 800c04a:	e0f2      	b.n	800c232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	885b      	ldrh	r3, [r3, #2]
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b05      	cmp	r3, #5
 800c054:	f200 80ac 	bhi.w	800c1b0 <USBD_GetDescriptor+0x204>
 800c058:	a201      	add	r2, pc, #4	@ (adr r2, 800c060 <USBD_GetDescriptor+0xb4>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c079 	.word	0x0800c079
 800c064:	0800c0ad 	.word	0x0800c0ad
 800c068:	0800c0e1 	.word	0x0800c0e1
 800c06c:	0800c115 	.word	0x0800c115
 800c070:	0800c149 	.word	0x0800c149
 800c074:	0800c17d 	.word	0x0800c17d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	7c12      	ldrb	r2, [r2, #16]
 800c090:	f107 0108 	add.w	r1, r7, #8
 800c094:	4610      	mov	r0, r2
 800c096:	4798      	blx	r3
 800c098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c09a:	e091      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 facb 	bl	800c63a <USBD_CtlError>
            err++;
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0aa:	e089      	b.n	800c1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	7c12      	ldrb	r2, [r2, #16]
 800c0c4:	f107 0108 	add.w	r1, r7, #8
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4798      	blx	r3
 800c0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ce:	e077      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fab1 	bl	800c63a <USBD_CtlError>
            err++;
 800c0d8:	7afb      	ldrb	r3, [r7, #11]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0de:	e06f      	b.n	800c1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	7c12      	ldrb	r2, [r2, #16]
 800c0f8:	f107 0108 	add.w	r1, r7, #8
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c102:	e05d      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa97 	bl	800c63a <USBD_CtlError>
            err++;
 800c10c:	7afb      	ldrb	r3, [r7, #11]
 800c10e:	3301      	adds	r3, #1
 800c110:	72fb      	strb	r3, [r7, #11]
          break;
 800c112:	e055      	b.n	800c1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7c12      	ldrb	r2, [r2, #16]
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c136:	e043      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fa7d 	bl	800c63a <USBD_CtlError>
            err++;
 800c140:	7afb      	ldrb	r3, [r7, #11]
 800c142:	3301      	adds	r3, #1
 800c144:	72fb      	strb	r3, [r7, #11]
          break;
 800c146:	e03b      	b.n	800c1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	7c12      	ldrb	r2, [r2, #16]
 800c160:	f107 0108 	add.w	r1, r7, #8
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
 800c168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c16a:	e029      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fa63 	bl	800c63a <USBD_CtlError>
            err++;
 800c174:	7afb      	ldrb	r3, [r7, #11]
 800c176:	3301      	adds	r3, #1
 800c178:	72fb      	strb	r3, [r7, #11]
          break;
 800c17a:	e021      	b.n	800c1c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	7c12      	ldrb	r2, [r2, #16]
 800c194:	f107 0108 	add.w	r1, r7, #8
 800c198:	4610      	mov	r0, r2
 800c19a:	4798      	blx	r3
 800c19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19e:	e00f      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa49 	bl	800c63a <USBD_CtlError>
            err++;
 800c1a8:	7afb      	ldrb	r3, [r7, #11]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ae:	e007      	b.n	800c1c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa41 	bl	800c63a <USBD_CtlError>
          err++;
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c1be:	bf00      	nop
      }
      break;
 800c1c0:	e037      	b.n	800c232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	7c1b      	ldrb	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d109      	bne.n	800c1de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d2:	f107 0208 	add.w	r2, r7, #8
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4798      	blx	r3
 800c1da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1dc:	e029      	b.n	800c232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fa2a 	bl	800c63a <USBD_CtlError>
        err++;
 800c1e6:	7afb      	ldrb	r3, [r7, #11]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c1ec:	e021      	b.n	800c232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	7c1b      	ldrb	r3, [r3, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10d      	bne.n	800c212 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fe:	f107 0208 	add.w	r2, r7, #8
 800c202:	4610      	mov	r0, r2
 800c204:	4798      	blx	r3
 800c206:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3301      	adds	r3, #1
 800c20c:	2207      	movs	r2, #7
 800c20e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c210:	e00f      	b.n	800c232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fa10 	bl	800c63a <USBD_CtlError>
        err++;
 800c21a:	7afb      	ldrb	r3, [r7, #11]
 800c21c:	3301      	adds	r3, #1
 800c21e:	72fb      	strb	r3, [r7, #11]
      break;
 800c220:	e007      	b.n	800c232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fa08 	bl	800c63a <USBD_CtlError>
      err++;
 800c22a:	7afb      	ldrb	r3, [r7, #11]
 800c22c:	3301      	adds	r3, #1
 800c22e:	72fb      	strb	r3, [r7, #11]
      break;
 800c230:	bf00      	nop
  }

  if (err != 0U)
 800c232:	7afb      	ldrb	r3, [r7, #11]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d11e      	bne.n	800c276 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	88db      	ldrh	r3, [r3, #6]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d016      	beq.n	800c26e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c240:	893b      	ldrh	r3, [r7, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00e      	beq.n	800c264 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	88da      	ldrh	r2, [r3, #6]
 800c24a:	893b      	ldrh	r3, [r7, #8]
 800c24c:	4293      	cmp	r3, r2
 800c24e:	bf28      	it	cs
 800c250:	4613      	movcs	r3, r2
 800c252:	b29b      	uxth	r3, r3
 800c254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c256:	893b      	ldrh	r3, [r7, #8]
 800c258:	461a      	mov	r2, r3
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fa69 	bl	800c734 <USBD_CtlSendData>
 800c262:	e009      	b.n	800c278 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9e7 	bl	800c63a <USBD_CtlError>
 800c26c:	e004      	b.n	800c278 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 faba 	bl	800c7e8 <USBD_CtlSendStatus>
 800c274:	e000      	b.n	800c278 <USBD_GetDescriptor+0x2cc>
    return;
 800c276:	bf00      	nop
  }
}
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop

0800c280 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	889b      	ldrh	r3, [r3, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d131      	bne.n	800c2f6 <USBD_SetAddress+0x76>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	88db      	ldrh	r3, [r3, #6]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d12d      	bne.n	800c2f6 <USBD_SetAddress+0x76>
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2a0:	d829      	bhi.n	800c2f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	885b      	ldrh	r3, [r3, #2]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d104      	bne.n	800c2c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f9bc 	bl	800c63a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c2:	e01d      	b.n	800c300 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7bfa      	ldrb	r2, [r7, #15]
 800c2c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 feeb 	bl	800d0ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fa86 	bl	800c7e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ea:	e009      	b.n	800c300 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f4:	e004      	b.n	800c300 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f99e 	bl	800c63a <USBD_CtlError>
  }
}
 800c2fe:	bf00      	nop
 800c300:	bf00      	nop
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	4b4e      	ldr	r3, [pc, #312]	@ (800c458 <USBD_SetConfig+0x150>)
 800c31e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c320:	4b4d      	ldr	r3, [pc, #308]	@ (800c458 <USBD_SetConfig+0x150>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d905      	bls.n	800c334 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f985 	bl	800c63a <USBD_CtlError>
    return USBD_FAIL;
 800c330:	2303      	movs	r3, #3
 800c332:	e08c      	b.n	800c44e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d002      	beq.n	800c346 <USBD_SetConfig+0x3e>
 800c340:	2b03      	cmp	r3, #3
 800c342:	d029      	beq.n	800c398 <USBD_SetConfig+0x90>
 800c344:	e075      	b.n	800c432 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c346:	4b44      	ldr	r3, [pc, #272]	@ (800c458 <USBD_SetConfig+0x150>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d020      	beq.n	800c390 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c34e:	4b42      	ldr	r3, [pc, #264]	@ (800c458 <USBD_SetConfig+0x150>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c358:	4b3f      	ldr	r3, [pc, #252]	@ (800c458 <USBD_SetConfig+0x150>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	4619      	mov	r1, r3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7fe ffe3 	bl	800b32a <USBD_SetClassConfig>
 800c364:	4603      	mov	r3, r0
 800c366:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d008      	beq.n	800c380 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f962 	bl	800c63a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c37e:	e065      	b.n	800c44c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fa31 	bl	800c7e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2203      	movs	r2, #3
 800c38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c38e:	e05d      	b.n	800c44c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa29 	bl	800c7e8 <USBD_CtlSendStatus>
      break;
 800c396:	e059      	b.n	800c44c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c398:	4b2f      	ldr	r3, [pc, #188]	@ (800c458 <USBD_SetConfig+0x150>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d112      	bne.n	800c3c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c3a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c458 <USBD_SetConfig+0x150>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3b2:	4b29      	ldr	r3, [pc, #164]	@ (800c458 <USBD_SetConfig+0x150>)
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7fe ffd2 	bl	800b362 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa12 	bl	800c7e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3c4:	e042      	b.n	800c44c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c3c6:	4b24      	ldr	r3, [pc, #144]	@ (800c458 <USBD_SetConfig+0x150>)
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d02a      	beq.n	800c42a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7fe ffc0 	bl	800b362 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c458 <USBD_SetConfig+0x150>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c458 <USBD_SetConfig+0x150>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7fe ff99 	bl	800b32a <USBD_SetClassConfig>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00f      	beq.n	800c422 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f918 	bl	800c63a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fe ffa5 	bl	800b362 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2202      	movs	r2, #2
 800c41c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c420:	e014      	b.n	800c44c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f9e0 	bl	800c7e8 <USBD_CtlSendStatus>
      break;
 800c428:	e010      	b.n	800c44c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f9dc 	bl	800c7e8 <USBD_CtlSendStatus>
      break;
 800c430:	e00c      	b.n	800c44c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f900 	bl	800c63a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c43a:	4b07      	ldr	r3, [pc, #28]	@ (800c458 <USBD_SetConfig+0x150>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7fe ff8e 	bl	800b362 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	73fb      	strb	r3, [r7, #15]
      break;
 800c44a:	bf00      	nop
  }

  return ret;
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	2000083c 	.word	0x2000083c

0800c45c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	88db      	ldrh	r3, [r3, #6]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d004      	beq.n	800c478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f8e2 	bl	800c63a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c476:	e023      	b.n	800c4c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b02      	cmp	r3, #2
 800c482:	dc02      	bgt.n	800c48a <USBD_GetConfig+0x2e>
 800c484:	2b00      	cmp	r3, #0
 800c486:	dc03      	bgt.n	800c490 <USBD_GetConfig+0x34>
 800c488:	e015      	b.n	800c4b6 <USBD_GetConfig+0x5a>
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d00b      	beq.n	800c4a6 <USBD_GetConfig+0x4a>
 800c48e:	e012      	b.n	800c4b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3308      	adds	r3, #8
 800c49a:	2201      	movs	r2, #1
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f948 	bl	800c734 <USBD_CtlSendData>
        break;
 800c4a4:	e00c      	b.n	800c4c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f940 	bl	800c734 <USBD_CtlSendData>
        break;
 800c4b4:	e004      	b.n	800c4c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f8be 	bl	800c63a <USBD_CtlError>
        break;
 800c4be:	bf00      	nop
}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d81e      	bhi.n	800c51e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	88db      	ldrh	r3, [r3, #6]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d004      	beq.n	800c4f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f8a5 	bl	800c63a <USBD_CtlError>
        break;
 800c4f0:	e01a      	b.n	800c528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	f043 0202 	orr.w	r2, r3, #2
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	330c      	adds	r3, #12
 800c512:	2202      	movs	r2, #2
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f90c 	bl	800c734 <USBD_CtlSendData>
      break;
 800c51c:	e004      	b.n	800c528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f88a 	bl	800c63a <USBD_CtlError>
      break;
 800c526:	bf00      	nop
  }
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	885b      	ldrh	r3, [r3, #2]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d107      	bne.n	800c552 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f94c 	bl	800c7e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c550:	e013      	b.n	800c57a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	885b      	ldrh	r3, [r3, #2]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d10b      	bne.n	800c572 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	889b      	ldrh	r3, [r3, #4]
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	b29b      	uxth	r3, r3
 800c562:	b2da      	uxtb	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f93c 	bl	800c7e8 <USBD_CtlSendStatus>
}
 800c570:	e003      	b.n	800c57a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f860 	bl	800c63a <USBD_CtlError>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c592:	b2db      	uxtb	r3, r3
 800c594:	3b01      	subs	r3, #1
 800c596:	2b02      	cmp	r3, #2
 800c598:	d80b      	bhi.n	800c5b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	885b      	ldrh	r3, [r3, #2]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d10c      	bne.n	800c5bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f91c 	bl	800c7e8 <USBD_CtlSendStatus>
      }
      break;
 800c5b0:	e004      	b.n	800c5bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f840 	bl	800c63a <USBD_CtlError>
      break;
 800c5ba:	e000      	b.n	800c5be <USBD_ClrFeature+0x3c>
      break;
 800c5bc:	bf00      	nop
  }
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	781a      	ldrb	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff fa40 	bl	800ba76 <SWAPBYTE>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3301      	adds	r3, #1
 800c608:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff fa33 	bl	800ba76 <SWAPBYTE>
 800c610:	4603      	mov	r3, r0
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f7ff fa26 	bl	800ba76 <SWAPBYTE>
 800c62a:	4603      	mov	r3, r0
 800c62c:	461a      	mov	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	80da      	strh	r2, [r3, #6]
}
 800c632:	bf00      	nop
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b082      	sub	sp, #8
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c644:	2180      	movs	r1, #128	@ 0x80
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fcc6 	bl	800cfd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c64c:	2100      	movs	r1, #0
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fcc2 	bl	800cfd8 <USBD_LL_StallEP>
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d042      	beq.n	800c6f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c676:	6938      	ldr	r0, [r7, #16]
 800c678:	f000 f842 	bl	800c700 <USBD_GetLen>
 800c67c:	4603      	mov	r3, r0
 800c67e:	3301      	adds	r3, #1
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c686:	d808      	bhi.n	800c69a <USBD_GetString+0x3e>
 800c688:	6938      	ldr	r0, [r7, #16]
 800c68a:	f000 f839 	bl	800c700 <USBD_GetLen>
 800c68e:	4603      	mov	r3, r0
 800c690:	3301      	adds	r3, #1
 800c692:	b29b      	uxth	r3, r3
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	e001      	b.n	800c69e <USBD_GetString+0x42>
 800c69a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	7812      	ldrb	r2, [r2, #0]
 800c6ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6c4:	e013      	b.n	800c6ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	7812      	ldrb	r2, [r2, #0]
 800c6d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	613b      	str	r3, [r7, #16]
    idx++;
 800c6d8:	7dfb      	ldrb	r3, [r7, #23]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1e7      	bne.n	800c6c6 <USBD_GetString+0x6a>
 800c6f6:	e000      	b.n	800c6fa <USBD_GetString+0x9e>
    return;
 800c6f8:	bf00      	nop
  }
}
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c710:	e005      	b.n	800c71e <USBD_GetLen+0x1e>
  {
    len++;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
 800c714:	3301      	adds	r3, #1
 800c716:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	3301      	adds	r3, #1
 800c71c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1f5      	bne.n	800c712 <USBD_GetLen+0x12>
  }

  return len;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2202      	movs	r2, #2
 800c744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	2100      	movs	r1, #0
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 fcc5 	bl	800d0ea <USBD_LL_Transmit>

  return USBD_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	2100      	movs	r1, #0
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fcb4 	bl	800d0ea <USBD_LL_Transmit>

  return USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2203      	movs	r2, #3
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 fcb8 	bl	800d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 fca7 	bl	800d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2204      	movs	r2, #4
 800c7f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fc73 	bl	800d0ea <USBD_LL_Transmit>

  return USBD_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2205      	movs	r2, #5
 800c81a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c81e:	2300      	movs	r3, #0
 800c820:	2200      	movs	r2, #0
 800c822:	2100      	movs	r1, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fc81 	bl	800d12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c838:	2200      	movs	r2, #0
 800c83a:	4912      	ldr	r1, [pc, #72]	@ (800c884 <MX_USB_DEVICE_Init+0x50>)
 800c83c:	4812      	ldr	r0, [pc, #72]	@ (800c888 <MX_USB_DEVICE_Init+0x54>)
 800c83e:	f7fe fcf7 	bl	800b230 <USBD_Init>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c848:	f7f7 fa54 	bl	8003cf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c84c:	490f      	ldr	r1, [pc, #60]	@ (800c88c <MX_USB_DEVICE_Init+0x58>)
 800c84e:	480e      	ldr	r0, [pc, #56]	@ (800c888 <MX_USB_DEVICE_Init+0x54>)
 800c850:	f7fe fd1e 	bl	800b290 <USBD_RegisterClass>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c85a:	f7f7 fa4b 	bl	8003cf4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c85e:	490c      	ldr	r1, [pc, #48]	@ (800c890 <MX_USB_DEVICE_Init+0x5c>)
 800c860:	4809      	ldr	r0, [pc, #36]	@ (800c888 <MX_USB_DEVICE_Init+0x54>)
 800c862:	f7fe fc55 	bl	800b110 <USBD_CDC_RegisterInterface>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c86c:	f7f7 fa42 	bl	8003cf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c870:	4805      	ldr	r0, [pc, #20]	@ (800c888 <MX_USB_DEVICE_Init+0x54>)
 800c872:	f7fe fd43 	bl	800b2fc <USBD_Start>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c87c:	f7f7 fa3a 	bl	8003cf4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c880:	bf00      	nop
 800c882:	bd80      	pop	{r7, pc}
 800c884:	200000d4 	.word	0x200000d4
 800c888:	20000840 	.word	0x20000840
 800c88c:	20000040 	.word	0x20000040
 800c890:	200000c0 	.word	0x200000c0

0800c894 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c898:	2200      	movs	r2, #0
 800c89a:	4905      	ldr	r1, [pc, #20]	@ (800c8b0 <CDC_Init_FS+0x1c>)
 800c89c:	4805      	ldr	r0, [pc, #20]	@ (800c8b4 <CDC_Init_FS+0x20>)
 800c89e:	f7fe fc51 	bl	800b144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8a2:	4905      	ldr	r1, [pc, #20]	@ (800c8b8 <CDC_Init_FS+0x24>)
 800c8a4:	4803      	ldr	r0, [pc, #12]	@ (800c8b4 <CDC_Init_FS+0x20>)
 800c8a6:	f7fe fc6f 	bl	800b188 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	2000131c 	.word	0x2000131c
 800c8b4:	20000840 	.word	0x20000840
 800c8b8:	20000b1c 	.word	0x20000b1c

0800c8bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	6039      	str	r1, [r7, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	2b23      	cmp	r3, #35	@ 0x23
 800c8e0:	d84a      	bhi.n	800c978 <CDC_Control_FS+0xac>
 800c8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8e8 <CDC_Control_FS+0x1c>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c979 	.word	0x0800c979
 800c8ec:	0800c979 	.word	0x0800c979
 800c8f0:	0800c979 	.word	0x0800c979
 800c8f4:	0800c979 	.word	0x0800c979
 800c8f8:	0800c979 	.word	0x0800c979
 800c8fc:	0800c979 	.word	0x0800c979
 800c900:	0800c979 	.word	0x0800c979
 800c904:	0800c979 	.word	0x0800c979
 800c908:	0800c979 	.word	0x0800c979
 800c90c:	0800c979 	.word	0x0800c979
 800c910:	0800c979 	.word	0x0800c979
 800c914:	0800c979 	.word	0x0800c979
 800c918:	0800c979 	.word	0x0800c979
 800c91c:	0800c979 	.word	0x0800c979
 800c920:	0800c979 	.word	0x0800c979
 800c924:	0800c979 	.word	0x0800c979
 800c928:	0800c979 	.word	0x0800c979
 800c92c:	0800c979 	.word	0x0800c979
 800c930:	0800c979 	.word	0x0800c979
 800c934:	0800c979 	.word	0x0800c979
 800c938:	0800c979 	.word	0x0800c979
 800c93c:	0800c979 	.word	0x0800c979
 800c940:	0800c979 	.word	0x0800c979
 800c944:	0800c979 	.word	0x0800c979
 800c948:	0800c979 	.word	0x0800c979
 800c94c:	0800c979 	.word	0x0800c979
 800c950:	0800c979 	.word	0x0800c979
 800c954:	0800c979 	.word	0x0800c979
 800c958:	0800c979 	.word	0x0800c979
 800c95c:	0800c979 	.word	0x0800c979
 800c960:	0800c979 	.word	0x0800c979
 800c964:	0800c979 	.word	0x0800c979
 800c968:	0800c979 	.word	0x0800c979
 800c96c:	0800c979 	.word	0x0800c979
 800c970:	0800c979 	.word	0x0800c979
 800c974:	0800c979 	.word	0x0800c979
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c978:	bf00      	nop
  }

  return (USBD_OK);
 800c97a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	4805      	ldr	r0, [pc, #20]	@ (800c9ac <CDC_Receive_FS+0x24>)
 800c996:	f7fe fbf7 	bl	800b188 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c99a:	4804      	ldr	r0, [pc, #16]	@ (800c9ac <CDC_Receive_FS+0x24>)
 800c99c:	f7fe fc12 	bl	800b1c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c9a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20000840 	.word	0x20000840

0800c9b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c9c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	371c      	adds	r7, #28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	6039      	str	r1, [r7, #0]
 800c9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2212      	movs	r2, #18
 800c9e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9e6:	4b03      	ldr	r3, [pc, #12]	@ (800c9f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	200000f0 	.word	0x200000f0

0800c9f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2204      	movs	r2, #4
 800ca08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca0a:	4b03      	ldr	r3, [pc, #12]	@ (800ca18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20000104 	.word	0x20000104

0800ca1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	6039      	str	r1, [r7, #0]
 800ca26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	4907      	ldr	r1, [pc, #28]	@ (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca32:	4808      	ldr	r0, [pc, #32]	@ (800ca54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca34:	f7ff fe12 	bl	800c65c <USBD_GetString>
 800ca38:	e004      	b.n	800ca44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4904      	ldr	r1, [pc, #16]	@ (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca3e:	4805      	ldr	r0, [pc, #20]	@ (800ca54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca40:	f7ff fe0c 	bl	800c65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca44:	4b02      	ldr	r3, [pc, #8]	@ (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	20001b1c 	.word	0x20001b1c
 800ca54:	08010690 	.word	0x08010690

0800ca58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	4904      	ldr	r1, [pc, #16]	@ (800ca78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca68:	4804      	ldr	r0, [pc, #16]	@ (800ca7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca6a:	f7ff fdf7 	bl	800c65c <USBD_GetString>
  return USBD_StrDesc;
 800ca6e:	4b02      	ldr	r3, [pc, #8]	@ (800ca78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20001b1c 	.word	0x20001b1c
 800ca7c:	080106a8 	.word	0x080106a8

0800ca80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	221a      	movs	r2, #26
 800ca90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca92:	f000 f843 	bl	800cb1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca96:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20000108 	.word	0x20000108

0800caa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	6039      	str	r1, [r7, #0]
 800caae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d105      	bne.n	800cac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	4907      	ldr	r1, [pc, #28]	@ (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800caba:	4808      	ldr	r0, [pc, #32]	@ (800cadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cabc:	f7ff fdce 	bl	800c65c <USBD_GetString>
 800cac0:	e004      	b.n	800cacc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	4904      	ldr	r1, [pc, #16]	@ (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cac6:	4805      	ldr	r0, [pc, #20]	@ (800cadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cac8:	f7ff fdc8 	bl	800c65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cacc:	4b02      	ldr	r3, [pc, #8]	@ (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20001b1c 	.word	0x20001b1c
 800cadc:	080106bc 	.word	0x080106bc

0800cae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d105      	bne.n	800cafe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	4907      	ldr	r1, [pc, #28]	@ (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caf6:	4808      	ldr	r0, [pc, #32]	@ (800cb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caf8:	f7ff fdb0 	bl	800c65c <USBD_GetString>
 800cafc:	e004      	b.n	800cb08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	4904      	ldr	r1, [pc, #16]	@ (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb02:	4805      	ldr	r0, [pc, #20]	@ (800cb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb04:	f7ff fdaa 	bl	800c65c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb08:	4b02      	ldr	r3, [pc, #8]	@ (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20001b1c 	.word	0x20001b1c
 800cb18:	080106c8 	.word	0x080106c8

0800cb1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb22:	4b0f      	ldr	r3, [pc, #60]	@ (800cb60 <Get_SerialNum+0x44>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb28:	4b0e      	ldr	r3, [pc, #56]	@ (800cb64 <Get_SerialNum+0x48>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb68 <Get_SerialNum+0x4c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4413      	add	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d009      	beq.n	800cb56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb42:	2208      	movs	r2, #8
 800cb44:	4909      	ldr	r1, [pc, #36]	@ (800cb6c <Get_SerialNum+0x50>)
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 f814 	bl	800cb74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	4908      	ldr	r1, [pc, #32]	@ (800cb70 <Get_SerialNum+0x54>)
 800cb50:	68b8      	ldr	r0, [r7, #8]
 800cb52:	f000 f80f 	bl	800cb74 <IntToUnicode>
  }
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	1fff7a10 	.word	0x1fff7a10
 800cb64:	1fff7a14 	.word	0x1fff7a14
 800cb68:	1fff7a18 	.word	0x1fff7a18
 800cb6c:	2000010a 	.word	0x2000010a
 800cb70:	2000011a 	.word	0x2000011a

0800cb74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb86:	2300      	movs	r3, #0
 800cb88:	75fb      	strb	r3, [r7, #23]
 800cb8a:	e027      	b.n	800cbdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	0f1b      	lsrs	r3, r3, #28
 800cb90:	2b09      	cmp	r3, #9
 800cb92:	d80b      	bhi.n	800cbac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	0f1b      	lsrs	r3, r3, #28
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	4619      	mov	r1, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	440b      	add	r3, r1
 800cba4:	3230      	adds	r2, #48	@ 0x30
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	e00a      	b.n	800cbc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	0f1b      	lsrs	r3, r3, #28
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	440b      	add	r3, r1
 800cbbc:	3237      	adds	r2, #55	@ 0x37
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	3301      	adds	r3, #1
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	75fb      	strb	r3, [r7, #23]
 800cbdc:	7dfa      	ldrb	r2, [r7, #23]
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d3d3      	bcc.n	800cb8c <IntToUnicode+0x18>
  }
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08a      	sub	sp, #40	@ 0x28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbfc:	f107 0314 	add.w	r3, r7, #20
 800cc00:	2200      	movs	r2, #0
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	605a      	str	r2, [r3, #4]
 800cc06:	609a      	str	r2, [r3, #8]
 800cc08:	60da      	str	r2, [r3, #12]
 800cc0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc14:	d13a      	bne.n	800cc8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc16:	2300      	movs	r3, #0
 800cc18:	613b      	str	r3, [r7, #16]
 800cc1a:	4b1e      	ldr	r3, [pc, #120]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc1e:	4a1d      	ldr	r2, [pc, #116]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc20:	f043 0301 	orr.w	r3, r3, #1
 800cc24:	6313      	str	r3, [r2, #48]	@ 0x30
 800cc26:	4b1b      	ldr	r3, [pc, #108]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	613b      	str	r3, [r7, #16]
 800cc30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cc36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc40:	2303      	movs	r3, #3
 800cc42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cc44:	230a      	movs	r3, #10
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4812      	ldr	r0, [pc, #72]	@ (800cc98 <HAL_PCD_MspInit+0xa4>)
 800cc50:	f7f9 fb5c 	bl	800630c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc54:	4b0f      	ldr	r3, [pc, #60]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc58:	4a0e      	ldr	r2, [pc, #56]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc5e:	6353      	str	r3, [r2, #52]	@ 0x34
 800cc60:	2300      	movs	r3, #0
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	4b0b      	ldr	r3, [pc, #44]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc68:	4a0a      	ldr	r2, [pc, #40]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc6e:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc70:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <HAL_PCD_MspInit+0xa0>)
 800cc72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	2100      	movs	r1, #0
 800cc80:	2043      	movs	r0, #67	@ 0x43
 800cc82:	f7f9 f822 	bl	8005cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc86:	2043      	movs	r0, #67	@ 0x43
 800cc88:	f7f9 f83b 	bl	8005d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	3728      	adds	r7, #40	@ 0x28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	40023800 	.word	0x40023800
 800cc98:	40020000 	.word	0x40020000

0800cc9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f7fe fb6f 	bl	800b396 <USBD_LL_SetupStage>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	78fb      	ldrb	r3, [r7, #3]
 800cce8:	4619      	mov	r1, r3
 800ccea:	f7fe fba9 	bl	800b440 <USBD_LL_DataOutStage>
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	460b      	mov	r3, r1
 800cd00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd08:	78fa      	ldrb	r2, [r7, #3]
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	4413      	add	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	440b      	add	r3, r1
 800cd16:	3320      	adds	r3, #32
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	f7fe fc42 	bl	800b5a6 <USBD_LL_DataInStage>
}
 800cd22:	bf00      	nop
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe fd7c 	bl	800b836 <USBD_LL_SOF>
}
 800cd3e:	bf00      	nop
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	79db      	ldrb	r3, [r3, #7]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]
 800cd5e:	e008      	b.n	800cd72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	79db      	ldrb	r3, [r3, #7]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d102      	bne.n	800cd6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	73fb      	strb	r3, [r7, #15]
 800cd6c:	e001      	b.n	800cd72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cd6e:	f7f6 ffc1 	bl	8003cf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd78:	7bfa      	ldrb	r2, [r7, #15]
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fe fd16 	bl	800b7ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fe fcbe 	bl	800b70a <USBD_LL_Reset>
}
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fd11 	bl	800b7ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	6812      	ldr	r2, [r2, #0]
 800cdba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cdbe:	f043 0301 	orr.w	r3, r3, #1
 800cdc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	7adb      	ldrb	r3, [r3, #11]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdcc:	4b04      	ldr	r3, [pc, #16]	@ (800cde0 <HAL_PCD_SuspendCallback+0x48>)
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	4a03      	ldr	r2, [pc, #12]	@ (800cde0 <HAL_PCD_SuspendCallback+0x48>)
 800cdd2:	f043 0306 	orr.w	r3, r3, #6
 800cdd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	e000ed00 	.word	0xe000ed00

0800cde4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fd07 	bl	800b806 <USBD_LL_Resume>
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fd5f 	bl	800b8da <USBD_LL_IsoOUTIncomplete>
}
 800ce1c:	bf00      	nop
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce36:	78fa      	ldrb	r2, [r7, #3]
 800ce38:	4611      	mov	r1, r2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe fd1b 	bl	800b876 <USBD_LL_IsoINIncomplete>
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe fd71 	bl	800b93e <USBD_LL_DevConnected>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fe fd6e 	bl	800b954 <USBD_LL_DevDisconnected>
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d13c      	bne.n	800cf0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ce90:	4a20      	ldr	r2, [pc, #128]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a1e      	ldr	r2, [pc, #120]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ce9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cea0:	4b1c      	ldr	r3, [pc, #112]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cea2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cea6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cea8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ceaa:	2204      	movs	r2, #4
 800ceac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ceae:	4b19      	ldr	r3, [pc, #100]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ceb4:	4b17      	ldr	r3, [pc, #92]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ceba:	4b16      	ldr	r3, [pc, #88]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cebc:	2202      	movs	r2, #2
 800cebe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cec0:	4b14      	ldr	r3, [pc, #80]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cec6:	4b13      	ldr	r3, [pc, #76]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cecc:	4b11      	ldr	r3, [pc, #68]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cece:	2200      	movs	r2, #0
 800ced0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ced2:	4b10      	ldr	r3, [pc, #64]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ced8:	4b0e      	ldr	r3, [pc, #56]	@ (800cf14 <USBD_LL_Init+0x94>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cede:	480d      	ldr	r0, [pc, #52]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cee0:	f7f9 fbe1 	bl	80066a6 <HAL_PCD_Init>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ceea:	f7f6 ff03 	bl	8003cf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ceee:	2180      	movs	r1, #128	@ 0x80
 800cef0:	4808      	ldr	r0, [pc, #32]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cef2:	f7fa fe0e 	bl	8007b12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cef6:	2240      	movs	r2, #64	@ 0x40
 800cef8:	2100      	movs	r1, #0
 800cefa:	4806      	ldr	r0, [pc, #24]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cefc:	f7fa fdc2 	bl	8007a84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf00:	2280      	movs	r2, #128	@ 0x80
 800cf02:	2101      	movs	r1, #1
 800cf04:	4803      	ldr	r0, [pc, #12]	@ (800cf14 <USBD_LL_Init+0x94>)
 800cf06:	f7fa fdbd 	bl	8007a84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	20001d1c 	.word	0x20001d1c

0800cf18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f9 fcc8 	bl	80068c4 <HAL_PCD_Start>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 f942 	bl	800d1c4 <USBD_Get_USB_Status>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	4608      	mov	r0, r1
 800cf58:	4611      	mov	r1, r2
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	70fb      	strb	r3, [r7, #3]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70bb      	strb	r3, [r7, #2]
 800cf64:	4613      	mov	r3, r2
 800cf66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf76:	78bb      	ldrb	r3, [r7, #2]
 800cf78:	883a      	ldrh	r2, [r7, #0]
 800cf7a:	78f9      	ldrb	r1, [r7, #3]
 800cf7c:	f7fa f99c 	bl	80072b8 <HAL_PCD_EP_Open>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f000 f91c 	bl	800d1c4 <USBD_Get_USB_Status>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfb4:	78fa      	ldrb	r2, [r7, #3]
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fa f9e7 	bl	800738c <HAL_PCD_EP_Close>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f000 f8fd 	bl	800d1c4 <USBD_Get_USB_Status>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cff2:	78fa      	ldrb	r2, [r7, #3]
 800cff4:	4611      	mov	r1, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fa fa9f 	bl	800753a <HAL_PCD_EP_SetStall>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	4618      	mov	r0, r3
 800d004:	f000 f8de 	bl	800d1c4 <USBD_Get_USB_Status>
 800d008:	4603      	mov	r3, r0
 800d00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	460b      	mov	r3, r1
 800d020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d030:	78fa      	ldrb	r2, [r7, #3]
 800d032:	4611      	mov	r1, r2
 800d034:	4618      	mov	r0, r3
 800d036:	f7fa fae3 	bl	8007600 <HAL_PCD_EP_ClrStall>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	4618      	mov	r0, r3
 800d042:	f000 f8bf 	bl	800d1c4 <USBD_Get_USB_Status>
 800d046:	4603      	mov	r3, r0
 800d048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d066:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	da0b      	bge.n	800d088 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d070:	78fb      	ldrb	r3, [r7, #3]
 800d072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d076:	68f9      	ldr	r1, [r7, #12]
 800d078:	4613      	mov	r3, r2
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	440b      	add	r3, r1
 800d082:	3316      	adds	r3, #22
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	e00b      	b.n	800d0a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d088:	78fb      	ldrb	r3, [r7, #3]
 800d08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	440b      	add	r3, r1
 800d09a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d09e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0c6:	78fa      	ldrb	r2, [r7, #3]
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fa f8d0 	bl	8007270 <HAL_PCD_SetAddress>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 f874 	bl	800d1c4 <USBD_Get_USB_Status>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b086      	sub	sp, #24
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	60f8      	str	r0, [r7, #12]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d108:	7af9      	ldrb	r1, [r7, #11]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	f7fa f9da 	bl	80074c6 <HAL_PCD_EP_Transmit>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 f853 	bl	800d1c4 <USBD_Get_USB_Status>
 800d11e:	4603      	mov	r3, r0
 800d120:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d122:	7dbb      	ldrb	r3, [r7, #22]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3718      	adds	r7, #24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	607a      	str	r2, [r7, #4]
 800d136:	603b      	str	r3, [r7, #0]
 800d138:	460b      	mov	r3, r1
 800d13a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d14a:	7af9      	ldrb	r1, [r7, #11]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	f7fa f966 	bl	8007420 <HAL_PCD_EP_Receive>
 800d154:	4603      	mov	r3, r0
 800d156:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d158:	7dfb      	ldrb	r3, [r7, #23]
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 f832 	bl	800d1c4 <USBD_Get_USB_Status>
 800d160:	4603      	mov	r3, r0
 800d162:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d164:	7dbb      	ldrb	r3, [r7, #22]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d180:	78fa      	ldrb	r2, [r7, #3]
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f7fa f986 	bl	8007496 <HAL_PCD_EP_GetRxCount>
 800d18a:	4603      	mov	r3, r0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d19c:	4b03      	ldr	r3, [pc, #12]	@ (800d1ac <USBD_static_malloc+0x18>)
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	20002200 	.word	0x20002200

0800d1b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]

}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d817      	bhi.n	800d208 <USBD_Get_USB_Status+0x44>
 800d1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e0 <USBD_Get_USB_Status+0x1c>)
 800d1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1de:	bf00      	nop
 800d1e0:	0800d1f1 	.word	0x0800d1f1
 800d1e4:	0800d1f7 	.word	0x0800d1f7
 800d1e8:	0800d1fd 	.word	0x0800d1fd
 800d1ec:	0800d203 	.word	0x0800d203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f4:	e00b      	b.n	800d20e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1fa:	e008      	b.n	800d20e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d200:	e005      	b.n	800d20e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d202:	2303      	movs	r3, #3
 800d204:	73fb      	strb	r3, [r7, #15]
    break;
 800d206:	e002      	b.n	800d20e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d208:	2303      	movs	r3, #3
 800d20a:	73fb      	strb	r3, [r7, #15]
    break;
 800d20c:	bf00      	nop
  }
  return usb_status;
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <malloc>:
 800d21c:	4b02      	ldr	r3, [pc, #8]	@ (800d228 <malloc+0xc>)
 800d21e:	4601      	mov	r1, r0
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	f000 b825 	b.w	800d270 <_malloc_r>
 800d226:	bf00      	nop
 800d228:	20000130 	.word	0x20000130

0800d22c <sbrk_aligned>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4e0f      	ldr	r6, [pc, #60]	@ (800d26c <sbrk_aligned+0x40>)
 800d230:	460c      	mov	r4, r1
 800d232:	6831      	ldr	r1, [r6, #0]
 800d234:	4605      	mov	r5, r0
 800d236:	b911      	cbnz	r1, 800d23e <sbrk_aligned+0x12>
 800d238:	f000 ff4e 	bl	800e0d8 <_sbrk_r>
 800d23c:	6030      	str	r0, [r6, #0]
 800d23e:	4621      	mov	r1, r4
 800d240:	4628      	mov	r0, r5
 800d242:	f000 ff49 	bl	800e0d8 <_sbrk_r>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d103      	bne.n	800d252 <sbrk_aligned+0x26>
 800d24a:	f04f 34ff 	mov.w	r4, #4294967295
 800d24e:	4620      	mov	r0, r4
 800d250:	bd70      	pop	{r4, r5, r6, pc}
 800d252:	1cc4      	adds	r4, r0, #3
 800d254:	f024 0403 	bic.w	r4, r4, #3
 800d258:	42a0      	cmp	r0, r4
 800d25a:	d0f8      	beq.n	800d24e <sbrk_aligned+0x22>
 800d25c:	1a21      	subs	r1, r4, r0
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 ff3a 	bl	800e0d8 <_sbrk_r>
 800d264:	3001      	adds	r0, #1
 800d266:	d1f2      	bne.n	800d24e <sbrk_aligned+0x22>
 800d268:	e7ef      	b.n	800d24a <sbrk_aligned+0x1e>
 800d26a:	bf00      	nop
 800d26c:	20002420 	.word	0x20002420

0800d270 <_malloc_r>:
 800d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d274:	1ccd      	adds	r5, r1, #3
 800d276:	f025 0503 	bic.w	r5, r5, #3
 800d27a:	3508      	adds	r5, #8
 800d27c:	2d0c      	cmp	r5, #12
 800d27e:	bf38      	it	cc
 800d280:	250c      	movcc	r5, #12
 800d282:	2d00      	cmp	r5, #0
 800d284:	4606      	mov	r6, r0
 800d286:	db01      	blt.n	800d28c <_malloc_r+0x1c>
 800d288:	42a9      	cmp	r1, r5
 800d28a:	d904      	bls.n	800d296 <_malloc_r+0x26>
 800d28c:	230c      	movs	r3, #12
 800d28e:	6033      	str	r3, [r6, #0]
 800d290:	2000      	movs	r0, #0
 800d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d36c <_malloc_r+0xfc>
 800d29a:	f000 f869 	bl	800d370 <__malloc_lock>
 800d29e:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a2:	461c      	mov	r4, r3
 800d2a4:	bb44      	cbnz	r4, 800d2f8 <_malloc_r+0x88>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f7ff ffbf 	bl	800d22c <sbrk_aligned>
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	d158      	bne.n	800d366 <_malloc_r+0xf6>
 800d2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2b8:	4627      	mov	r7, r4
 800d2ba:	2f00      	cmp	r7, #0
 800d2bc:	d143      	bne.n	800d346 <_malloc_r+0xd6>
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	d04b      	beq.n	800d35a <_malloc_r+0xea>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	eb04 0903 	add.w	r9, r4, r3
 800d2cc:	f000 ff04 	bl	800e0d8 <_sbrk_r>
 800d2d0:	4581      	cmp	r9, r0
 800d2d2:	d142      	bne.n	800d35a <_malloc_r+0xea>
 800d2d4:	6821      	ldr	r1, [r4, #0]
 800d2d6:	1a6d      	subs	r5, r5, r1
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ffa6 	bl	800d22c <sbrk_aligned>
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d03a      	beq.n	800d35a <_malloc_r+0xea>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	442b      	add	r3, r5
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	bb62      	cbnz	r2, 800d34c <_malloc_r+0xdc>
 800d2f2:	f8c8 7000 	str.w	r7, [r8]
 800d2f6:	e00f      	b.n	800d318 <_malloc_r+0xa8>
 800d2f8:	6822      	ldr	r2, [r4, #0]
 800d2fa:	1b52      	subs	r2, r2, r5
 800d2fc:	d420      	bmi.n	800d340 <_malloc_r+0xd0>
 800d2fe:	2a0b      	cmp	r2, #11
 800d300:	d917      	bls.n	800d332 <_malloc_r+0xc2>
 800d302:	1961      	adds	r1, r4, r5
 800d304:	42a3      	cmp	r3, r4
 800d306:	6025      	str	r5, [r4, #0]
 800d308:	bf18      	it	ne
 800d30a:	6059      	strne	r1, [r3, #4]
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	bf08      	it	eq
 800d310:	f8c8 1000 	streq.w	r1, [r8]
 800d314:	5162      	str	r2, [r4, r5]
 800d316:	604b      	str	r3, [r1, #4]
 800d318:	4630      	mov	r0, r6
 800d31a:	f000 f82f 	bl	800d37c <__malloc_unlock>
 800d31e:	f104 000b 	add.w	r0, r4, #11
 800d322:	1d23      	adds	r3, r4, #4
 800d324:	f020 0007 	bic.w	r0, r0, #7
 800d328:	1ac2      	subs	r2, r0, r3
 800d32a:	bf1c      	itt	ne
 800d32c:	1a1b      	subne	r3, r3, r0
 800d32e:	50a3      	strne	r3, [r4, r2]
 800d330:	e7af      	b.n	800d292 <_malloc_r+0x22>
 800d332:	6862      	ldr	r2, [r4, #4]
 800d334:	42a3      	cmp	r3, r4
 800d336:	bf0c      	ite	eq
 800d338:	f8c8 2000 	streq.w	r2, [r8]
 800d33c:	605a      	strne	r2, [r3, #4]
 800d33e:	e7eb      	b.n	800d318 <_malloc_r+0xa8>
 800d340:	4623      	mov	r3, r4
 800d342:	6864      	ldr	r4, [r4, #4]
 800d344:	e7ae      	b.n	800d2a4 <_malloc_r+0x34>
 800d346:	463c      	mov	r4, r7
 800d348:	687f      	ldr	r7, [r7, #4]
 800d34a:	e7b6      	b.n	800d2ba <_malloc_r+0x4a>
 800d34c:	461a      	mov	r2, r3
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	42a3      	cmp	r3, r4
 800d352:	d1fb      	bne.n	800d34c <_malloc_r+0xdc>
 800d354:	2300      	movs	r3, #0
 800d356:	6053      	str	r3, [r2, #4]
 800d358:	e7de      	b.n	800d318 <_malloc_r+0xa8>
 800d35a:	230c      	movs	r3, #12
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 f80c 	bl	800d37c <__malloc_unlock>
 800d364:	e794      	b.n	800d290 <_malloc_r+0x20>
 800d366:	6005      	str	r5, [r0, #0]
 800d368:	e7d6      	b.n	800d318 <_malloc_r+0xa8>
 800d36a:	bf00      	nop
 800d36c:	20002424 	.word	0x20002424

0800d370 <__malloc_lock>:
 800d370:	4801      	ldr	r0, [pc, #4]	@ (800d378 <__malloc_lock+0x8>)
 800d372:	f000 befe 	b.w	800e172 <__retarget_lock_acquire_recursive>
 800d376:	bf00      	nop
 800d378:	20002568 	.word	0x20002568

0800d37c <__malloc_unlock>:
 800d37c:	4801      	ldr	r0, [pc, #4]	@ (800d384 <__malloc_unlock+0x8>)
 800d37e:	f000 bef9 	b.w	800e174 <__retarget_lock_release_recursive>
 800d382:	bf00      	nop
 800d384:	20002568 	.word	0x20002568

0800d388 <__cvt>:
 800d388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d38c:	ec57 6b10 	vmov	r6, r7, d0
 800d390:	2f00      	cmp	r7, #0
 800d392:	460c      	mov	r4, r1
 800d394:	4619      	mov	r1, r3
 800d396:	463b      	mov	r3, r7
 800d398:	bfbb      	ittet	lt
 800d39a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d39e:	461f      	movlt	r7, r3
 800d3a0:	2300      	movge	r3, #0
 800d3a2:	232d      	movlt	r3, #45	@ 0x2d
 800d3a4:	700b      	strb	r3, [r1, #0]
 800d3a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d3ac:	4691      	mov	r9, r2
 800d3ae:	f023 0820 	bic.w	r8, r3, #32
 800d3b2:	bfbc      	itt	lt
 800d3b4:	4632      	movlt	r2, r6
 800d3b6:	4616      	movlt	r6, r2
 800d3b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d3bc:	d005      	beq.n	800d3ca <__cvt+0x42>
 800d3be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d3c2:	d100      	bne.n	800d3c6 <__cvt+0x3e>
 800d3c4:	3401      	adds	r4, #1
 800d3c6:	2102      	movs	r1, #2
 800d3c8:	e000      	b.n	800d3cc <__cvt+0x44>
 800d3ca:	2103      	movs	r1, #3
 800d3cc:	ab03      	add	r3, sp, #12
 800d3ce:	9301      	str	r3, [sp, #4]
 800d3d0:	ab02      	add	r3, sp, #8
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	ec47 6b10 	vmov	d0, r6, r7
 800d3d8:	4653      	mov	r3, sl
 800d3da:	4622      	mov	r2, r4
 800d3dc:	f000 ff64 	bl	800e2a8 <_dtoa_r>
 800d3e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	d119      	bne.n	800d41c <__cvt+0x94>
 800d3e8:	f019 0f01 	tst.w	r9, #1
 800d3ec:	d00e      	beq.n	800d40c <__cvt+0x84>
 800d3ee:	eb00 0904 	add.w	r9, r0, r4
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	4639      	mov	r1, r7
 800d3fa:	f7f3 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3fe:	b108      	cbz	r0, 800d404 <__cvt+0x7c>
 800d400:	f8cd 900c 	str.w	r9, [sp, #12]
 800d404:	2230      	movs	r2, #48	@ 0x30
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	454b      	cmp	r3, r9
 800d40a:	d31e      	bcc.n	800d44a <__cvt+0xc2>
 800d40c:	9b03      	ldr	r3, [sp, #12]
 800d40e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d410:	1b5b      	subs	r3, r3, r5
 800d412:	4628      	mov	r0, r5
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	b004      	add	sp, #16
 800d418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d41c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d420:	eb00 0904 	add.w	r9, r0, r4
 800d424:	d1e5      	bne.n	800d3f2 <__cvt+0x6a>
 800d426:	7803      	ldrb	r3, [r0, #0]
 800d428:	2b30      	cmp	r3, #48	@ 0x30
 800d42a:	d10a      	bne.n	800d442 <__cvt+0xba>
 800d42c:	2200      	movs	r2, #0
 800d42e:	2300      	movs	r3, #0
 800d430:	4630      	mov	r0, r6
 800d432:	4639      	mov	r1, r7
 800d434:	f7f3 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 800d438:	b918      	cbnz	r0, 800d442 <__cvt+0xba>
 800d43a:	f1c4 0401 	rsb	r4, r4, #1
 800d43e:	f8ca 4000 	str.w	r4, [sl]
 800d442:	f8da 3000 	ldr.w	r3, [sl]
 800d446:	4499      	add	r9, r3
 800d448:	e7d3      	b.n	800d3f2 <__cvt+0x6a>
 800d44a:	1c59      	adds	r1, r3, #1
 800d44c:	9103      	str	r1, [sp, #12]
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	e7d9      	b.n	800d406 <__cvt+0x7e>

0800d452 <__exponent>:
 800d452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d454:	2900      	cmp	r1, #0
 800d456:	bfba      	itte	lt
 800d458:	4249      	neglt	r1, r1
 800d45a:	232d      	movlt	r3, #45	@ 0x2d
 800d45c:	232b      	movge	r3, #43	@ 0x2b
 800d45e:	2909      	cmp	r1, #9
 800d460:	7002      	strb	r2, [r0, #0]
 800d462:	7043      	strb	r3, [r0, #1]
 800d464:	dd29      	ble.n	800d4ba <__exponent+0x68>
 800d466:	f10d 0307 	add.w	r3, sp, #7
 800d46a:	461d      	mov	r5, r3
 800d46c:	270a      	movs	r7, #10
 800d46e:	461a      	mov	r2, r3
 800d470:	fbb1 f6f7 	udiv	r6, r1, r7
 800d474:	fb07 1416 	mls	r4, r7, r6, r1
 800d478:	3430      	adds	r4, #48	@ 0x30
 800d47a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d47e:	460c      	mov	r4, r1
 800d480:	2c63      	cmp	r4, #99	@ 0x63
 800d482:	f103 33ff 	add.w	r3, r3, #4294967295
 800d486:	4631      	mov	r1, r6
 800d488:	dcf1      	bgt.n	800d46e <__exponent+0x1c>
 800d48a:	3130      	adds	r1, #48	@ 0x30
 800d48c:	1e94      	subs	r4, r2, #2
 800d48e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d492:	1c41      	adds	r1, r0, #1
 800d494:	4623      	mov	r3, r4
 800d496:	42ab      	cmp	r3, r5
 800d498:	d30a      	bcc.n	800d4b0 <__exponent+0x5e>
 800d49a:	f10d 0309 	add.w	r3, sp, #9
 800d49e:	1a9b      	subs	r3, r3, r2
 800d4a0:	42ac      	cmp	r4, r5
 800d4a2:	bf88      	it	hi
 800d4a4:	2300      	movhi	r3, #0
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	4403      	add	r3, r0
 800d4aa:	1a18      	subs	r0, r3, r0
 800d4ac:	b003      	add	sp, #12
 800d4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d4b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d4b8:	e7ed      	b.n	800d496 <__exponent+0x44>
 800d4ba:	2330      	movs	r3, #48	@ 0x30
 800d4bc:	3130      	adds	r1, #48	@ 0x30
 800d4be:	7083      	strb	r3, [r0, #2]
 800d4c0:	70c1      	strb	r1, [r0, #3]
 800d4c2:	1d03      	adds	r3, r0, #4
 800d4c4:	e7f1      	b.n	800d4aa <__exponent+0x58>
	...

0800d4c8 <_printf_float>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	b08d      	sub	sp, #52	@ 0x34
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d4d4:	4616      	mov	r6, r2
 800d4d6:	461f      	mov	r7, r3
 800d4d8:	4605      	mov	r5, r0
 800d4da:	f000 fdc5 	bl	800e068 <_localeconv_r>
 800d4de:	6803      	ldr	r3, [r0, #0]
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f2 fec4 	bl	8000270 <strlen>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d4f0:	9005      	str	r0, [sp, #20]
 800d4f2:	3307      	adds	r3, #7
 800d4f4:	f023 0307 	bic.w	r3, r3, #7
 800d4f8:	f103 0208 	add.w	r2, r3, #8
 800d4fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d500:	f8d4 b000 	ldr.w	fp, [r4]
 800d504:	f8c8 2000 	str.w	r2, [r8]
 800d508:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d50c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d510:	9307      	str	r3, [sp, #28]
 800d512:	f8cd 8018 	str.w	r8, [sp, #24]
 800d516:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d51e:	4b9c      	ldr	r3, [pc, #624]	@ (800d790 <_printf_float+0x2c8>)
 800d520:	f04f 32ff 	mov.w	r2, #4294967295
 800d524:	f7f3 fb02 	bl	8000b2c <__aeabi_dcmpun>
 800d528:	bb70      	cbnz	r0, 800d588 <_printf_float+0xc0>
 800d52a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d52e:	4b98      	ldr	r3, [pc, #608]	@ (800d790 <_printf_float+0x2c8>)
 800d530:	f04f 32ff 	mov.w	r2, #4294967295
 800d534:	f7f3 fadc 	bl	8000af0 <__aeabi_dcmple>
 800d538:	bb30      	cbnz	r0, 800d588 <_printf_float+0xc0>
 800d53a:	2200      	movs	r2, #0
 800d53c:	2300      	movs	r3, #0
 800d53e:	4640      	mov	r0, r8
 800d540:	4649      	mov	r1, r9
 800d542:	f7f3 facb 	bl	8000adc <__aeabi_dcmplt>
 800d546:	b110      	cbz	r0, 800d54e <_printf_float+0x86>
 800d548:	232d      	movs	r3, #45	@ 0x2d
 800d54a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d54e:	4a91      	ldr	r2, [pc, #580]	@ (800d794 <_printf_float+0x2cc>)
 800d550:	4b91      	ldr	r3, [pc, #580]	@ (800d798 <_printf_float+0x2d0>)
 800d552:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d556:	bf8c      	ite	hi
 800d558:	4690      	movhi	r8, r2
 800d55a:	4698      	movls	r8, r3
 800d55c:	2303      	movs	r3, #3
 800d55e:	6123      	str	r3, [r4, #16]
 800d560:	f02b 0304 	bic.w	r3, fp, #4
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	f04f 0900 	mov.w	r9, #0
 800d56a:	9700      	str	r7, [sp, #0]
 800d56c:	4633      	mov	r3, r6
 800d56e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f9d2 	bl	800d91c <_printf_common>
 800d578:	3001      	adds	r0, #1
 800d57a:	f040 808d 	bne.w	800d698 <_printf_float+0x1d0>
 800d57e:	f04f 30ff 	mov.w	r0, #4294967295
 800d582:	b00d      	add	sp, #52	@ 0x34
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	4642      	mov	r2, r8
 800d58a:	464b      	mov	r3, r9
 800d58c:	4640      	mov	r0, r8
 800d58e:	4649      	mov	r1, r9
 800d590:	f7f3 facc 	bl	8000b2c <__aeabi_dcmpun>
 800d594:	b140      	cbz	r0, 800d5a8 <_printf_float+0xe0>
 800d596:	464b      	mov	r3, r9
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bfbc      	itt	lt
 800d59c:	232d      	movlt	r3, #45	@ 0x2d
 800d59e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d5a2:	4a7e      	ldr	r2, [pc, #504]	@ (800d79c <_printf_float+0x2d4>)
 800d5a4:	4b7e      	ldr	r3, [pc, #504]	@ (800d7a0 <_printf_float+0x2d8>)
 800d5a6:	e7d4      	b.n	800d552 <_printf_float+0x8a>
 800d5a8:	6863      	ldr	r3, [r4, #4]
 800d5aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d5ae:	9206      	str	r2, [sp, #24]
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	d13b      	bne.n	800d62c <_printf_float+0x164>
 800d5b4:	2306      	movs	r3, #6
 800d5b6:	6063      	str	r3, [r4, #4]
 800d5b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d5bc:	2300      	movs	r3, #0
 800d5be:	6022      	str	r2, [r4, #0]
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d5c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d5c8:	ab09      	add	r3, sp, #36	@ 0x24
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	6861      	ldr	r1, [r4, #4]
 800d5ce:	ec49 8b10 	vmov	d0, r8, r9
 800d5d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f7ff fed6 	bl	800d388 <__cvt>
 800d5dc:	9b06      	ldr	r3, [sp, #24]
 800d5de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d5e0:	2b47      	cmp	r3, #71	@ 0x47
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	d129      	bne.n	800d63a <_printf_float+0x172>
 800d5e6:	1cc8      	adds	r0, r1, #3
 800d5e8:	db02      	blt.n	800d5f0 <_printf_float+0x128>
 800d5ea:	6863      	ldr	r3, [r4, #4]
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	dd41      	ble.n	800d674 <_printf_float+0x1ac>
 800d5f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d5f4:	fa5f fa8a 	uxtb.w	sl, sl
 800d5f8:	3901      	subs	r1, #1
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d600:	9109      	str	r1, [sp, #36]	@ 0x24
 800d602:	f7ff ff26 	bl	800d452 <__exponent>
 800d606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d608:	1813      	adds	r3, r2, r0
 800d60a:	2a01      	cmp	r2, #1
 800d60c:	4681      	mov	r9, r0
 800d60e:	6123      	str	r3, [r4, #16]
 800d610:	dc02      	bgt.n	800d618 <_printf_float+0x150>
 800d612:	6822      	ldr	r2, [r4, #0]
 800d614:	07d2      	lsls	r2, r2, #31
 800d616:	d501      	bpl.n	800d61c <_printf_float+0x154>
 800d618:	3301      	adds	r3, #1
 800d61a:	6123      	str	r3, [r4, #16]
 800d61c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d620:	2b00      	cmp	r3, #0
 800d622:	d0a2      	beq.n	800d56a <_printf_float+0xa2>
 800d624:	232d      	movs	r3, #45	@ 0x2d
 800d626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d62a:	e79e      	b.n	800d56a <_printf_float+0xa2>
 800d62c:	9a06      	ldr	r2, [sp, #24]
 800d62e:	2a47      	cmp	r2, #71	@ 0x47
 800d630:	d1c2      	bne.n	800d5b8 <_printf_float+0xf0>
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1c0      	bne.n	800d5b8 <_printf_float+0xf0>
 800d636:	2301      	movs	r3, #1
 800d638:	e7bd      	b.n	800d5b6 <_printf_float+0xee>
 800d63a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d63e:	d9db      	bls.n	800d5f8 <_printf_float+0x130>
 800d640:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d644:	d118      	bne.n	800d678 <_printf_float+0x1b0>
 800d646:	2900      	cmp	r1, #0
 800d648:	6863      	ldr	r3, [r4, #4]
 800d64a:	dd0b      	ble.n	800d664 <_printf_float+0x19c>
 800d64c:	6121      	str	r1, [r4, #16]
 800d64e:	b913      	cbnz	r3, 800d656 <_printf_float+0x18e>
 800d650:	6822      	ldr	r2, [r4, #0]
 800d652:	07d0      	lsls	r0, r2, #31
 800d654:	d502      	bpl.n	800d65c <_printf_float+0x194>
 800d656:	3301      	adds	r3, #1
 800d658:	440b      	add	r3, r1
 800d65a:	6123      	str	r3, [r4, #16]
 800d65c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d65e:	f04f 0900 	mov.w	r9, #0
 800d662:	e7db      	b.n	800d61c <_printf_float+0x154>
 800d664:	b913      	cbnz	r3, 800d66c <_printf_float+0x1a4>
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	07d2      	lsls	r2, r2, #31
 800d66a:	d501      	bpl.n	800d670 <_printf_float+0x1a8>
 800d66c:	3302      	adds	r3, #2
 800d66e:	e7f4      	b.n	800d65a <_printf_float+0x192>
 800d670:	2301      	movs	r3, #1
 800d672:	e7f2      	b.n	800d65a <_printf_float+0x192>
 800d674:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d67a:	4299      	cmp	r1, r3
 800d67c:	db05      	blt.n	800d68a <_printf_float+0x1c2>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	6121      	str	r1, [r4, #16]
 800d682:	07d8      	lsls	r0, r3, #31
 800d684:	d5ea      	bpl.n	800d65c <_printf_float+0x194>
 800d686:	1c4b      	adds	r3, r1, #1
 800d688:	e7e7      	b.n	800d65a <_printf_float+0x192>
 800d68a:	2900      	cmp	r1, #0
 800d68c:	bfd4      	ite	le
 800d68e:	f1c1 0202 	rsble	r2, r1, #2
 800d692:	2201      	movgt	r2, #1
 800d694:	4413      	add	r3, r2
 800d696:	e7e0      	b.n	800d65a <_printf_float+0x192>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	055a      	lsls	r2, r3, #21
 800d69c:	d407      	bmi.n	800d6ae <_printf_float+0x1e6>
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	4642      	mov	r2, r8
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b8      	blx	r7
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d12b      	bne.n	800d704 <_printf_float+0x23c>
 800d6ac:	e767      	b.n	800d57e <_printf_float+0xb6>
 800d6ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6b2:	f240 80dd 	bls.w	800d870 <_printf_float+0x3a8>
 800d6b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f7f3 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d033      	beq.n	800d72e <_printf_float+0x266>
 800d6c6:	4a37      	ldr	r2, [pc, #220]	@ (800d7a4 <_printf_float+0x2dc>)
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	47b8      	blx	r7
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	f43f af54 	beq.w	800d57e <_printf_float+0xb6>
 800d6d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d6da:	4543      	cmp	r3, r8
 800d6dc:	db02      	blt.n	800d6e4 <_printf_float+0x21c>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	07d8      	lsls	r0, r3, #31
 800d6e2:	d50f      	bpl.n	800d704 <_printf_float+0x23c>
 800d6e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6e8:	4631      	mov	r1, r6
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	47b8      	blx	r7
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	f43f af45 	beq.w	800d57e <_printf_float+0xb6>
 800d6f4:	f04f 0900 	mov.w	r9, #0
 800d6f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6fc:	f104 0a1a 	add.w	sl, r4, #26
 800d700:	45c8      	cmp	r8, r9
 800d702:	dc09      	bgt.n	800d718 <_printf_float+0x250>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	079b      	lsls	r3, r3, #30
 800d708:	f100 8103 	bmi.w	800d912 <_printf_float+0x44a>
 800d70c:	68e0      	ldr	r0, [r4, #12]
 800d70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d710:	4298      	cmp	r0, r3
 800d712:	bfb8      	it	lt
 800d714:	4618      	movlt	r0, r3
 800d716:	e734      	b.n	800d582 <_printf_float+0xba>
 800d718:	2301      	movs	r3, #1
 800d71a:	4652      	mov	r2, sl
 800d71c:	4631      	mov	r1, r6
 800d71e:	4628      	mov	r0, r5
 800d720:	47b8      	blx	r7
 800d722:	3001      	adds	r0, #1
 800d724:	f43f af2b 	beq.w	800d57e <_printf_float+0xb6>
 800d728:	f109 0901 	add.w	r9, r9, #1
 800d72c:	e7e8      	b.n	800d700 <_printf_float+0x238>
 800d72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d730:	2b00      	cmp	r3, #0
 800d732:	dc39      	bgt.n	800d7a8 <_printf_float+0x2e0>
 800d734:	4a1b      	ldr	r2, [pc, #108]	@ (800d7a4 <_printf_float+0x2dc>)
 800d736:	2301      	movs	r3, #1
 800d738:	4631      	mov	r1, r6
 800d73a:	4628      	mov	r0, r5
 800d73c:	47b8      	blx	r7
 800d73e:	3001      	adds	r0, #1
 800d740:	f43f af1d 	beq.w	800d57e <_printf_float+0xb6>
 800d744:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d748:	ea59 0303 	orrs.w	r3, r9, r3
 800d74c:	d102      	bne.n	800d754 <_printf_float+0x28c>
 800d74e:	6823      	ldr	r3, [r4, #0]
 800d750:	07d9      	lsls	r1, r3, #31
 800d752:	d5d7      	bpl.n	800d704 <_printf_float+0x23c>
 800d754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d758:	4631      	mov	r1, r6
 800d75a:	4628      	mov	r0, r5
 800d75c:	47b8      	blx	r7
 800d75e:	3001      	adds	r0, #1
 800d760:	f43f af0d 	beq.w	800d57e <_printf_float+0xb6>
 800d764:	f04f 0a00 	mov.w	sl, #0
 800d768:	f104 0b1a 	add.w	fp, r4, #26
 800d76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d76e:	425b      	negs	r3, r3
 800d770:	4553      	cmp	r3, sl
 800d772:	dc01      	bgt.n	800d778 <_printf_float+0x2b0>
 800d774:	464b      	mov	r3, r9
 800d776:	e793      	b.n	800d6a0 <_printf_float+0x1d8>
 800d778:	2301      	movs	r3, #1
 800d77a:	465a      	mov	r2, fp
 800d77c:	4631      	mov	r1, r6
 800d77e:	4628      	mov	r0, r5
 800d780:	47b8      	blx	r7
 800d782:	3001      	adds	r0, #1
 800d784:	f43f aefb 	beq.w	800d57e <_printf_float+0xb6>
 800d788:	f10a 0a01 	add.w	sl, sl, #1
 800d78c:	e7ee      	b.n	800d76c <_printf_float+0x2a4>
 800d78e:	bf00      	nop
 800d790:	7fefffff 	.word	0x7fefffff
 800d794:	080108f4 	.word	0x080108f4
 800d798:	080108f0 	.word	0x080108f0
 800d79c:	080108fc 	.word	0x080108fc
 800d7a0:	080108f8 	.word	0x080108f8
 800d7a4:	08010900 	.word	0x08010900
 800d7a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d7ae:	4553      	cmp	r3, sl
 800d7b0:	bfa8      	it	ge
 800d7b2:	4653      	movge	r3, sl
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	4699      	mov	r9, r3
 800d7b8:	dc36      	bgt.n	800d828 <_printf_float+0x360>
 800d7ba:	f04f 0b00 	mov.w	fp, #0
 800d7be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7c2:	f104 021a 	add.w	r2, r4, #26
 800d7c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d7c8:	9306      	str	r3, [sp, #24]
 800d7ca:	eba3 0309 	sub.w	r3, r3, r9
 800d7ce:	455b      	cmp	r3, fp
 800d7d0:	dc31      	bgt.n	800d836 <_printf_float+0x36e>
 800d7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7d4:	459a      	cmp	sl, r3
 800d7d6:	dc3a      	bgt.n	800d84e <_printf_float+0x386>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	07da      	lsls	r2, r3, #31
 800d7dc:	d437      	bmi.n	800d84e <_printf_float+0x386>
 800d7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e0:	ebaa 0903 	sub.w	r9, sl, r3
 800d7e4:	9b06      	ldr	r3, [sp, #24]
 800d7e6:	ebaa 0303 	sub.w	r3, sl, r3
 800d7ea:	4599      	cmp	r9, r3
 800d7ec:	bfa8      	it	ge
 800d7ee:	4699      	movge	r9, r3
 800d7f0:	f1b9 0f00 	cmp.w	r9, #0
 800d7f4:	dc33      	bgt.n	800d85e <_printf_float+0x396>
 800d7f6:	f04f 0800 	mov.w	r8, #0
 800d7fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7fe:	f104 0b1a 	add.w	fp, r4, #26
 800d802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d804:	ebaa 0303 	sub.w	r3, sl, r3
 800d808:	eba3 0309 	sub.w	r3, r3, r9
 800d80c:	4543      	cmp	r3, r8
 800d80e:	f77f af79 	ble.w	800d704 <_printf_float+0x23c>
 800d812:	2301      	movs	r3, #1
 800d814:	465a      	mov	r2, fp
 800d816:	4631      	mov	r1, r6
 800d818:	4628      	mov	r0, r5
 800d81a:	47b8      	blx	r7
 800d81c:	3001      	adds	r0, #1
 800d81e:	f43f aeae 	beq.w	800d57e <_printf_float+0xb6>
 800d822:	f108 0801 	add.w	r8, r8, #1
 800d826:	e7ec      	b.n	800d802 <_printf_float+0x33a>
 800d828:	4642      	mov	r2, r8
 800d82a:	4631      	mov	r1, r6
 800d82c:	4628      	mov	r0, r5
 800d82e:	47b8      	blx	r7
 800d830:	3001      	adds	r0, #1
 800d832:	d1c2      	bne.n	800d7ba <_printf_float+0x2f2>
 800d834:	e6a3      	b.n	800d57e <_printf_float+0xb6>
 800d836:	2301      	movs	r3, #1
 800d838:	4631      	mov	r1, r6
 800d83a:	4628      	mov	r0, r5
 800d83c:	9206      	str	r2, [sp, #24]
 800d83e:	47b8      	blx	r7
 800d840:	3001      	adds	r0, #1
 800d842:	f43f ae9c 	beq.w	800d57e <_printf_float+0xb6>
 800d846:	9a06      	ldr	r2, [sp, #24]
 800d848:	f10b 0b01 	add.w	fp, fp, #1
 800d84c:	e7bb      	b.n	800d7c6 <_printf_float+0x2fe>
 800d84e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d852:	4631      	mov	r1, r6
 800d854:	4628      	mov	r0, r5
 800d856:	47b8      	blx	r7
 800d858:	3001      	adds	r0, #1
 800d85a:	d1c0      	bne.n	800d7de <_printf_float+0x316>
 800d85c:	e68f      	b.n	800d57e <_printf_float+0xb6>
 800d85e:	9a06      	ldr	r2, [sp, #24]
 800d860:	464b      	mov	r3, r9
 800d862:	4442      	add	r2, r8
 800d864:	4631      	mov	r1, r6
 800d866:	4628      	mov	r0, r5
 800d868:	47b8      	blx	r7
 800d86a:	3001      	adds	r0, #1
 800d86c:	d1c3      	bne.n	800d7f6 <_printf_float+0x32e>
 800d86e:	e686      	b.n	800d57e <_printf_float+0xb6>
 800d870:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d874:	f1ba 0f01 	cmp.w	sl, #1
 800d878:	dc01      	bgt.n	800d87e <_printf_float+0x3b6>
 800d87a:	07db      	lsls	r3, r3, #31
 800d87c:	d536      	bpl.n	800d8ec <_printf_float+0x424>
 800d87e:	2301      	movs	r3, #1
 800d880:	4642      	mov	r2, r8
 800d882:	4631      	mov	r1, r6
 800d884:	4628      	mov	r0, r5
 800d886:	47b8      	blx	r7
 800d888:	3001      	adds	r0, #1
 800d88a:	f43f ae78 	beq.w	800d57e <_printf_float+0xb6>
 800d88e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d892:	4631      	mov	r1, r6
 800d894:	4628      	mov	r0, r5
 800d896:	47b8      	blx	r7
 800d898:	3001      	adds	r0, #1
 800d89a:	f43f ae70 	beq.w	800d57e <_printf_float+0xb6>
 800d89e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8aa:	f7f3 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ae:	b9c0      	cbnz	r0, 800d8e2 <_printf_float+0x41a>
 800d8b0:	4653      	mov	r3, sl
 800d8b2:	f108 0201 	add.w	r2, r8, #1
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	47b8      	blx	r7
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d10c      	bne.n	800d8da <_printf_float+0x412>
 800d8c0:	e65d      	b.n	800d57e <_printf_float+0xb6>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	465a      	mov	r2, fp
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	47b8      	blx	r7
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	f43f ae56 	beq.w	800d57e <_printf_float+0xb6>
 800d8d2:	f108 0801 	add.w	r8, r8, #1
 800d8d6:	45d0      	cmp	r8, sl
 800d8d8:	dbf3      	blt.n	800d8c2 <_printf_float+0x3fa>
 800d8da:	464b      	mov	r3, r9
 800d8dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d8e0:	e6df      	b.n	800d6a2 <_printf_float+0x1da>
 800d8e2:	f04f 0800 	mov.w	r8, #0
 800d8e6:	f104 0b1a 	add.w	fp, r4, #26
 800d8ea:	e7f4      	b.n	800d8d6 <_printf_float+0x40e>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	4642      	mov	r2, r8
 800d8f0:	e7e1      	b.n	800d8b6 <_printf_float+0x3ee>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	464a      	mov	r2, r9
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b8      	blx	r7
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	f43f ae3e 	beq.w	800d57e <_printf_float+0xb6>
 800d902:	f108 0801 	add.w	r8, r8, #1
 800d906:	68e3      	ldr	r3, [r4, #12]
 800d908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d90a:	1a5b      	subs	r3, r3, r1
 800d90c:	4543      	cmp	r3, r8
 800d90e:	dcf0      	bgt.n	800d8f2 <_printf_float+0x42a>
 800d910:	e6fc      	b.n	800d70c <_printf_float+0x244>
 800d912:	f04f 0800 	mov.w	r8, #0
 800d916:	f104 0919 	add.w	r9, r4, #25
 800d91a:	e7f4      	b.n	800d906 <_printf_float+0x43e>

0800d91c <_printf_common>:
 800d91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d920:	4616      	mov	r6, r2
 800d922:	4698      	mov	r8, r3
 800d924:	688a      	ldr	r2, [r1, #8]
 800d926:	690b      	ldr	r3, [r1, #16]
 800d928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d92c:	4293      	cmp	r3, r2
 800d92e:	bfb8      	it	lt
 800d930:	4613      	movlt	r3, r2
 800d932:	6033      	str	r3, [r6, #0]
 800d934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d938:	4607      	mov	r7, r0
 800d93a:	460c      	mov	r4, r1
 800d93c:	b10a      	cbz	r2, 800d942 <_printf_common+0x26>
 800d93e:	3301      	adds	r3, #1
 800d940:	6033      	str	r3, [r6, #0]
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	0699      	lsls	r1, r3, #26
 800d946:	bf42      	ittt	mi
 800d948:	6833      	ldrmi	r3, [r6, #0]
 800d94a:	3302      	addmi	r3, #2
 800d94c:	6033      	strmi	r3, [r6, #0]
 800d94e:	6825      	ldr	r5, [r4, #0]
 800d950:	f015 0506 	ands.w	r5, r5, #6
 800d954:	d106      	bne.n	800d964 <_printf_common+0x48>
 800d956:	f104 0a19 	add.w	sl, r4, #25
 800d95a:	68e3      	ldr	r3, [r4, #12]
 800d95c:	6832      	ldr	r2, [r6, #0]
 800d95e:	1a9b      	subs	r3, r3, r2
 800d960:	42ab      	cmp	r3, r5
 800d962:	dc26      	bgt.n	800d9b2 <_printf_common+0x96>
 800d964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d968:	6822      	ldr	r2, [r4, #0]
 800d96a:	3b00      	subs	r3, #0
 800d96c:	bf18      	it	ne
 800d96e:	2301      	movne	r3, #1
 800d970:	0692      	lsls	r2, r2, #26
 800d972:	d42b      	bmi.n	800d9cc <_printf_common+0xb0>
 800d974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d978:	4641      	mov	r1, r8
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c8      	blx	r9
 800d97e:	3001      	adds	r0, #1
 800d980:	d01e      	beq.n	800d9c0 <_printf_common+0xa4>
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	6922      	ldr	r2, [r4, #16]
 800d986:	f003 0306 	and.w	r3, r3, #6
 800d98a:	2b04      	cmp	r3, #4
 800d98c:	bf02      	ittt	eq
 800d98e:	68e5      	ldreq	r5, [r4, #12]
 800d990:	6833      	ldreq	r3, [r6, #0]
 800d992:	1aed      	subeq	r5, r5, r3
 800d994:	68a3      	ldr	r3, [r4, #8]
 800d996:	bf0c      	ite	eq
 800d998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d99c:	2500      	movne	r5, #0
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	bfc4      	itt	gt
 800d9a2:	1a9b      	subgt	r3, r3, r2
 800d9a4:	18ed      	addgt	r5, r5, r3
 800d9a6:	2600      	movs	r6, #0
 800d9a8:	341a      	adds	r4, #26
 800d9aa:	42b5      	cmp	r5, r6
 800d9ac:	d11a      	bne.n	800d9e4 <_printf_common+0xc8>
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	e008      	b.n	800d9c4 <_printf_common+0xa8>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	4652      	mov	r2, sl
 800d9b6:	4641      	mov	r1, r8
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	47c8      	blx	r9
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d103      	bne.n	800d9c8 <_printf_common+0xac>
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c8:	3501      	adds	r5, #1
 800d9ca:	e7c6      	b.n	800d95a <_printf_common+0x3e>
 800d9cc:	18e1      	adds	r1, r4, r3
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	2030      	movs	r0, #48	@ 0x30
 800d9d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9d6:	4422      	add	r2, r4
 800d9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9e0:	3302      	adds	r3, #2
 800d9e2:	e7c7      	b.n	800d974 <_printf_common+0x58>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	4641      	mov	r1, r8
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	47c8      	blx	r9
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	d0e6      	beq.n	800d9c0 <_printf_common+0xa4>
 800d9f2:	3601      	adds	r6, #1
 800d9f4:	e7d9      	b.n	800d9aa <_printf_common+0x8e>
	...

0800d9f8 <_printf_i>:
 800d9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	7e0f      	ldrb	r7, [r1, #24]
 800d9fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da00:	2f78      	cmp	r7, #120	@ 0x78
 800da02:	4691      	mov	r9, r2
 800da04:	4680      	mov	r8, r0
 800da06:	460c      	mov	r4, r1
 800da08:	469a      	mov	sl, r3
 800da0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da0e:	d807      	bhi.n	800da20 <_printf_i+0x28>
 800da10:	2f62      	cmp	r7, #98	@ 0x62
 800da12:	d80a      	bhi.n	800da2a <_printf_i+0x32>
 800da14:	2f00      	cmp	r7, #0
 800da16:	f000 80d1 	beq.w	800dbbc <_printf_i+0x1c4>
 800da1a:	2f58      	cmp	r7, #88	@ 0x58
 800da1c:	f000 80b8 	beq.w	800db90 <_printf_i+0x198>
 800da20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da28:	e03a      	b.n	800daa0 <_printf_i+0xa8>
 800da2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da2e:	2b15      	cmp	r3, #21
 800da30:	d8f6      	bhi.n	800da20 <_printf_i+0x28>
 800da32:	a101      	add	r1, pc, #4	@ (adr r1, 800da38 <_printf_i+0x40>)
 800da34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da38:	0800da91 	.word	0x0800da91
 800da3c:	0800daa5 	.word	0x0800daa5
 800da40:	0800da21 	.word	0x0800da21
 800da44:	0800da21 	.word	0x0800da21
 800da48:	0800da21 	.word	0x0800da21
 800da4c:	0800da21 	.word	0x0800da21
 800da50:	0800daa5 	.word	0x0800daa5
 800da54:	0800da21 	.word	0x0800da21
 800da58:	0800da21 	.word	0x0800da21
 800da5c:	0800da21 	.word	0x0800da21
 800da60:	0800da21 	.word	0x0800da21
 800da64:	0800dba3 	.word	0x0800dba3
 800da68:	0800dacf 	.word	0x0800dacf
 800da6c:	0800db5d 	.word	0x0800db5d
 800da70:	0800da21 	.word	0x0800da21
 800da74:	0800da21 	.word	0x0800da21
 800da78:	0800dbc5 	.word	0x0800dbc5
 800da7c:	0800da21 	.word	0x0800da21
 800da80:	0800dacf 	.word	0x0800dacf
 800da84:	0800da21 	.word	0x0800da21
 800da88:	0800da21 	.word	0x0800da21
 800da8c:	0800db65 	.word	0x0800db65
 800da90:	6833      	ldr	r3, [r6, #0]
 800da92:	1d1a      	adds	r2, r3, #4
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6032      	str	r2, [r6, #0]
 800da98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daa0:	2301      	movs	r3, #1
 800daa2:	e09c      	b.n	800dbde <_printf_i+0x1e6>
 800daa4:	6833      	ldr	r3, [r6, #0]
 800daa6:	6820      	ldr	r0, [r4, #0]
 800daa8:	1d19      	adds	r1, r3, #4
 800daaa:	6031      	str	r1, [r6, #0]
 800daac:	0606      	lsls	r6, r0, #24
 800daae:	d501      	bpl.n	800dab4 <_printf_i+0xbc>
 800dab0:	681d      	ldr	r5, [r3, #0]
 800dab2:	e003      	b.n	800dabc <_printf_i+0xc4>
 800dab4:	0645      	lsls	r5, r0, #25
 800dab6:	d5fb      	bpl.n	800dab0 <_printf_i+0xb8>
 800dab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	da03      	bge.n	800dac8 <_printf_i+0xd0>
 800dac0:	232d      	movs	r3, #45	@ 0x2d
 800dac2:	426d      	negs	r5, r5
 800dac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dac8:	4858      	ldr	r0, [pc, #352]	@ (800dc2c <_printf_i+0x234>)
 800daca:	230a      	movs	r3, #10
 800dacc:	e011      	b.n	800daf2 <_printf_i+0xfa>
 800dace:	6821      	ldr	r1, [r4, #0]
 800dad0:	6833      	ldr	r3, [r6, #0]
 800dad2:	0608      	lsls	r0, r1, #24
 800dad4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dad8:	d402      	bmi.n	800dae0 <_printf_i+0xe8>
 800dada:	0649      	lsls	r1, r1, #25
 800dadc:	bf48      	it	mi
 800dade:	b2ad      	uxthmi	r5, r5
 800dae0:	2f6f      	cmp	r7, #111	@ 0x6f
 800dae2:	4852      	ldr	r0, [pc, #328]	@ (800dc2c <_printf_i+0x234>)
 800dae4:	6033      	str	r3, [r6, #0]
 800dae6:	bf14      	ite	ne
 800dae8:	230a      	movne	r3, #10
 800daea:	2308      	moveq	r3, #8
 800daec:	2100      	movs	r1, #0
 800daee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800daf2:	6866      	ldr	r6, [r4, #4]
 800daf4:	60a6      	str	r6, [r4, #8]
 800daf6:	2e00      	cmp	r6, #0
 800daf8:	db05      	blt.n	800db06 <_printf_i+0x10e>
 800dafa:	6821      	ldr	r1, [r4, #0]
 800dafc:	432e      	orrs	r6, r5
 800dafe:	f021 0104 	bic.w	r1, r1, #4
 800db02:	6021      	str	r1, [r4, #0]
 800db04:	d04b      	beq.n	800db9e <_printf_i+0x1a6>
 800db06:	4616      	mov	r6, r2
 800db08:	fbb5 f1f3 	udiv	r1, r5, r3
 800db0c:	fb03 5711 	mls	r7, r3, r1, r5
 800db10:	5dc7      	ldrb	r7, [r0, r7]
 800db12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db16:	462f      	mov	r7, r5
 800db18:	42bb      	cmp	r3, r7
 800db1a:	460d      	mov	r5, r1
 800db1c:	d9f4      	bls.n	800db08 <_printf_i+0x110>
 800db1e:	2b08      	cmp	r3, #8
 800db20:	d10b      	bne.n	800db3a <_printf_i+0x142>
 800db22:	6823      	ldr	r3, [r4, #0]
 800db24:	07df      	lsls	r7, r3, #31
 800db26:	d508      	bpl.n	800db3a <_printf_i+0x142>
 800db28:	6923      	ldr	r3, [r4, #16]
 800db2a:	6861      	ldr	r1, [r4, #4]
 800db2c:	4299      	cmp	r1, r3
 800db2e:	bfde      	ittt	le
 800db30:	2330      	movle	r3, #48	@ 0x30
 800db32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db3a:	1b92      	subs	r2, r2, r6
 800db3c:	6122      	str	r2, [r4, #16]
 800db3e:	f8cd a000 	str.w	sl, [sp]
 800db42:	464b      	mov	r3, r9
 800db44:	aa03      	add	r2, sp, #12
 800db46:	4621      	mov	r1, r4
 800db48:	4640      	mov	r0, r8
 800db4a:	f7ff fee7 	bl	800d91c <_printf_common>
 800db4e:	3001      	adds	r0, #1
 800db50:	d14a      	bne.n	800dbe8 <_printf_i+0x1f0>
 800db52:	f04f 30ff 	mov.w	r0, #4294967295
 800db56:	b004      	add	sp, #16
 800db58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	f043 0320 	orr.w	r3, r3, #32
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	4832      	ldr	r0, [pc, #200]	@ (800dc30 <_printf_i+0x238>)
 800db66:	2778      	movs	r7, #120	@ 0x78
 800db68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	6831      	ldr	r1, [r6, #0]
 800db70:	061f      	lsls	r7, r3, #24
 800db72:	f851 5b04 	ldr.w	r5, [r1], #4
 800db76:	d402      	bmi.n	800db7e <_printf_i+0x186>
 800db78:	065f      	lsls	r7, r3, #25
 800db7a:	bf48      	it	mi
 800db7c:	b2ad      	uxthmi	r5, r5
 800db7e:	6031      	str	r1, [r6, #0]
 800db80:	07d9      	lsls	r1, r3, #31
 800db82:	bf44      	itt	mi
 800db84:	f043 0320 	orrmi.w	r3, r3, #32
 800db88:	6023      	strmi	r3, [r4, #0]
 800db8a:	b11d      	cbz	r5, 800db94 <_printf_i+0x19c>
 800db8c:	2310      	movs	r3, #16
 800db8e:	e7ad      	b.n	800daec <_printf_i+0xf4>
 800db90:	4826      	ldr	r0, [pc, #152]	@ (800dc2c <_printf_i+0x234>)
 800db92:	e7e9      	b.n	800db68 <_printf_i+0x170>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	f023 0320 	bic.w	r3, r3, #32
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	e7f6      	b.n	800db8c <_printf_i+0x194>
 800db9e:	4616      	mov	r6, r2
 800dba0:	e7bd      	b.n	800db1e <_printf_i+0x126>
 800dba2:	6833      	ldr	r3, [r6, #0]
 800dba4:	6825      	ldr	r5, [r4, #0]
 800dba6:	6961      	ldr	r1, [r4, #20]
 800dba8:	1d18      	adds	r0, r3, #4
 800dbaa:	6030      	str	r0, [r6, #0]
 800dbac:	062e      	lsls	r6, r5, #24
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	d501      	bpl.n	800dbb6 <_printf_i+0x1be>
 800dbb2:	6019      	str	r1, [r3, #0]
 800dbb4:	e002      	b.n	800dbbc <_printf_i+0x1c4>
 800dbb6:	0668      	lsls	r0, r5, #25
 800dbb8:	d5fb      	bpl.n	800dbb2 <_printf_i+0x1ba>
 800dbba:	8019      	strh	r1, [r3, #0]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	6123      	str	r3, [r4, #16]
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	e7bc      	b.n	800db3e <_printf_i+0x146>
 800dbc4:	6833      	ldr	r3, [r6, #0]
 800dbc6:	1d1a      	adds	r2, r3, #4
 800dbc8:	6032      	str	r2, [r6, #0]
 800dbca:	681e      	ldr	r6, [r3, #0]
 800dbcc:	6862      	ldr	r2, [r4, #4]
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f7f2 fafd 	bl	80001d0 <memchr>
 800dbd6:	b108      	cbz	r0, 800dbdc <_printf_i+0x1e4>
 800dbd8:	1b80      	subs	r0, r0, r6
 800dbda:	6060      	str	r0, [r4, #4]
 800dbdc:	6863      	ldr	r3, [r4, #4]
 800dbde:	6123      	str	r3, [r4, #16]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbe6:	e7aa      	b.n	800db3e <_printf_i+0x146>
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	4632      	mov	r2, r6
 800dbec:	4649      	mov	r1, r9
 800dbee:	4640      	mov	r0, r8
 800dbf0:	47d0      	blx	sl
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	d0ad      	beq.n	800db52 <_printf_i+0x15a>
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	079b      	lsls	r3, r3, #30
 800dbfa:	d413      	bmi.n	800dc24 <_printf_i+0x22c>
 800dbfc:	68e0      	ldr	r0, [r4, #12]
 800dbfe:	9b03      	ldr	r3, [sp, #12]
 800dc00:	4298      	cmp	r0, r3
 800dc02:	bfb8      	it	lt
 800dc04:	4618      	movlt	r0, r3
 800dc06:	e7a6      	b.n	800db56 <_printf_i+0x15e>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4640      	mov	r0, r8
 800dc10:	47d0      	blx	sl
 800dc12:	3001      	adds	r0, #1
 800dc14:	d09d      	beq.n	800db52 <_printf_i+0x15a>
 800dc16:	3501      	adds	r5, #1
 800dc18:	68e3      	ldr	r3, [r4, #12]
 800dc1a:	9903      	ldr	r1, [sp, #12]
 800dc1c:	1a5b      	subs	r3, r3, r1
 800dc1e:	42ab      	cmp	r3, r5
 800dc20:	dcf2      	bgt.n	800dc08 <_printf_i+0x210>
 800dc22:	e7eb      	b.n	800dbfc <_printf_i+0x204>
 800dc24:	2500      	movs	r5, #0
 800dc26:	f104 0619 	add.w	r6, r4, #25
 800dc2a:	e7f5      	b.n	800dc18 <_printf_i+0x220>
 800dc2c:	08010902 	.word	0x08010902
 800dc30:	08010913 	.word	0x08010913

0800dc34 <std>:
 800dc34:	2300      	movs	r3, #0
 800dc36:	b510      	push	{r4, lr}
 800dc38:	4604      	mov	r4, r0
 800dc3a:	e9c0 3300 	strd	r3, r3, [r0]
 800dc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc42:	6083      	str	r3, [r0, #8]
 800dc44:	8181      	strh	r1, [r0, #12]
 800dc46:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc48:	81c2      	strh	r2, [r0, #14]
 800dc4a:	6183      	str	r3, [r0, #24]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	2208      	movs	r2, #8
 800dc50:	305c      	adds	r0, #92	@ 0x5c
 800dc52:	f000 fa01 	bl	800e058 <memset>
 800dc56:	4b0d      	ldr	r3, [pc, #52]	@ (800dc8c <std+0x58>)
 800dc58:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800dc90 <std+0x5c>)
 800dc5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc94 <std+0x60>)
 800dc60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc62:	4b0d      	ldr	r3, [pc, #52]	@ (800dc98 <std+0x64>)
 800dc64:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc66:	4b0d      	ldr	r3, [pc, #52]	@ (800dc9c <std+0x68>)
 800dc68:	6224      	str	r4, [r4, #32]
 800dc6a:	429c      	cmp	r4, r3
 800dc6c:	d006      	beq.n	800dc7c <std+0x48>
 800dc6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc72:	4294      	cmp	r4, r2
 800dc74:	d002      	beq.n	800dc7c <std+0x48>
 800dc76:	33d0      	adds	r3, #208	@ 0xd0
 800dc78:	429c      	cmp	r4, r3
 800dc7a:	d105      	bne.n	800dc88 <std+0x54>
 800dc7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc84:	f000 ba74 	b.w	800e170 <__retarget_lock_init_recursive>
 800dc88:	bd10      	pop	{r4, pc}
 800dc8a:	bf00      	nop
 800dc8c:	0800dea9 	.word	0x0800dea9
 800dc90:	0800decb 	.word	0x0800decb
 800dc94:	0800df03 	.word	0x0800df03
 800dc98:	0800df27 	.word	0x0800df27
 800dc9c:	20002428 	.word	0x20002428

0800dca0 <stdio_exit_handler>:
 800dca0:	4a02      	ldr	r2, [pc, #8]	@ (800dcac <stdio_exit_handler+0xc>)
 800dca2:	4903      	ldr	r1, [pc, #12]	@ (800dcb0 <stdio_exit_handler+0x10>)
 800dca4:	4803      	ldr	r0, [pc, #12]	@ (800dcb4 <stdio_exit_handler+0x14>)
 800dca6:	f000 b869 	b.w	800dd7c <_fwalk_sglue>
 800dcaa:	bf00      	nop
 800dcac:	20000124 	.word	0x20000124
 800dcb0:	0800f95d 	.word	0x0800f95d
 800dcb4:	20000134 	.word	0x20000134

0800dcb8 <cleanup_stdio>:
 800dcb8:	6841      	ldr	r1, [r0, #4]
 800dcba:	4b0c      	ldr	r3, [pc, #48]	@ (800dcec <cleanup_stdio+0x34>)
 800dcbc:	4299      	cmp	r1, r3
 800dcbe:	b510      	push	{r4, lr}
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	d001      	beq.n	800dcc8 <cleanup_stdio+0x10>
 800dcc4:	f001 fe4a 	bl	800f95c <_fflush_r>
 800dcc8:	68a1      	ldr	r1, [r4, #8]
 800dcca:	4b09      	ldr	r3, [pc, #36]	@ (800dcf0 <cleanup_stdio+0x38>)
 800dccc:	4299      	cmp	r1, r3
 800dcce:	d002      	beq.n	800dcd6 <cleanup_stdio+0x1e>
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f001 fe43 	bl	800f95c <_fflush_r>
 800dcd6:	68e1      	ldr	r1, [r4, #12]
 800dcd8:	4b06      	ldr	r3, [pc, #24]	@ (800dcf4 <cleanup_stdio+0x3c>)
 800dcda:	4299      	cmp	r1, r3
 800dcdc:	d004      	beq.n	800dce8 <cleanup_stdio+0x30>
 800dcde:	4620      	mov	r0, r4
 800dce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dce4:	f001 be3a 	b.w	800f95c <_fflush_r>
 800dce8:	bd10      	pop	{r4, pc}
 800dcea:	bf00      	nop
 800dcec:	20002428 	.word	0x20002428
 800dcf0:	20002490 	.word	0x20002490
 800dcf4:	200024f8 	.word	0x200024f8

0800dcf8 <global_stdio_init.part.0>:
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	4b0b      	ldr	r3, [pc, #44]	@ (800dd28 <global_stdio_init.part.0+0x30>)
 800dcfc:	4c0b      	ldr	r4, [pc, #44]	@ (800dd2c <global_stdio_init.part.0+0x34>)
 800dcfe:	4a0c      	ldr	r2, [pc, #48]	@ (800dd30 <global_stdio_init.part.0+0x38>)
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	4620      	mov	r0, r4
 800dd04:	2200      	movs	r2, #0
 800dd06:	2104      	movs	r1, #4
 800dd08:	f7ff ff94 	bl	800dc34 <std>
 800dd0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd10:	2201      	movs	r2, #1
 800dd12:	2109      	movs	r1, #9
 800dd14:	f7ff ff8e 	bl	800dc34 <std>
 800dd18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd1c:	2202      	movs	r2, #2
 800dd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd22:	2112      	movs	r1, #18
 800dd24:	f7ff bf86 	b.w	800dc34 <std>
 800dd28:	20002560 	.word	0x20002560
 800dd2c:	20002428 	.word	0x20002428
 800dd30:	0800dca1 	.word	0x0800dca1

0800dd34 <__sfp_lock_acquire>:
 800dd34:	4801      	ldr	r0, [pc, #4]	@ (800dd3c <__sfp_lock_acquire+0x8>)
 800dd36:	f000 ba1c 	b.w	800e172 <__retarget_lock_acquire_recursive>
 800dd3a:	bf00      	nop
 800dd3c:	20002569 	.word	0x20002569

0800dd40 <__sfp_lock_release>:
 800dd40:	4801      	ldr	r0, [pc, #4]	@ (800dd48 <__sfp_lock_release+0x8>)
 800dd42:	f000 ba17 	b.w	800e174 <__retarget_lock_release_recursive>
 800dd46:	bf00      	nop
 800dd48:	20002569 	.word	0x20002569

0800dd4c <__sinit>:
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	4604      	mov	r4, r0
 800dd50:	f7ff fff0 	bl	800dd34 <__sfp_lock_acquire>
 800dd54:	6a23      	ldr	r3, [r4, #32]
 800dd56:	b11b      	cbz	r3, 800dd60 <__sinit+0x14>
 800dd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd5c:	f7ff bff0 	b.w	800dd40 <__sfp_lock_release>
 800dd60:	4b04      	ldr	r3, [pc, #16]	@ (800dd74 <__sinit+0x28>)
 800dd62:	6223      	str	r3, [r4, #32]
 800dd64:	4b04      	ldr	r3, [pc, #16]	@ (800dd78 <__sinit+0x2c>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1f5      	bne.n	800dd58 <__sinit+0xc>
 800dd6c:	f7ff ffc4 	bl	800dcf8 <global_stdio_init.part.0>
 800dd70:	e7f2      	b.n	800dd58 <__sinit+0xc>
 800dd72:	bf00      	nop
 800dd74:	0800dcb9 	.word	0x0800dcb9
 800dd78:	20002560 	.word	0x20002560

0800dd7c <_fwalk_sglue>:
 800dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	4607      	mov	r7, r0
 800dd82:	4688      	mov	r8, r1
 800dd84:	4614      	mov	r4, r2
 800dd86:	2600      	movs	r6, #0
 800dd88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd8c:	f1b9 0901 	subs.w	r9, r9, #1
 800dd90:	d505      	bpl.n	800dd9e <_fwalk_sglue+0x22>
 800dd92:	6824      	ldr	r4, [r4, #0]
 800dd94:	2c00      	cmp	r4, #0
 800dd96:	d1f7      	bne.n	800dd88 <_fwalk_sglue+0xc>
 800dd98:	4630      	mov	r0, r6
 800dd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d907      	bls.n	800ddb4 <_fwalk_sglue+0x38>
 800dda4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	d003      	beq.n	800ddb4 <_fwalk_sglue+0x38>
 800ddac:	4629      	mov	r1, r5
 800ddae:	4638      	mov	r0, r7
 800ddb0:	47c0      	blx	r8
 800ddb2:	4306      	orrs	r6, r0
 800ddb4:	3568      	adds	r5, #104	@ 0x68
 800ddb6:	e7e9      	b.n	800dd8c <_fwalk_sglue+0x10>

0800ddb8 <iprintf>:
 800ddb8:	b40f      	push	{r0, r1, r2, r3}
 800ddba:	b507      	push	{r0, r1, r2, lr}
 800ddbc:	4906      	ldr	r1, [pc, #24]	@ (800ddd8 <iprintf+0x20>)
 800ddbe:	ab04      	add	r3, sp, #16
 800ddc0:	6808      	ldr	r0, [r1, #0]
 800ddc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc6:	6881      	ldr	r1, [r0, #8]
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	f001 fc2b 	bl	800f624 <_vfiprintf_r>
 800ddce:	b003      	add	sp, #12
 800ddd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd4:	b004      	add	sp, #16
 800ddd6:	4770      	bx	lr
 800ddd8:	20000130 	.word	0x20000130

0800dddc <putchar>:
 800dddc:	4b02      	ldr	r3, [pc, #8]	@ (800dde8 <putchar+0xc>)
 800ddde:	4601      	mov	r1, r0
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	6882      	ldr	r2, [r0, #8]
 800dde4:	f001 be44 	b.w	800fa70 <_putc_r>
 800dde8:	20000130 	.word	0x20000130

0800ddec <_puts_r>:
 800ddec:	6a03      	ldr	r3, [r0, #32]
 800ddee:	b570      	push	{r4, r5, r6, lr}
 800ddf0:	6884      	ldr	r4, [r0, #8]
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	460e      	mov	r6, r1
 800ddf6:	b90b      	cbnz	r3, 800ddfc <_puts_r+0x10>
 800ddf8:	f7ff ffa8 	bl	800dd4c <__sinit>
 800ddfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddfe:	07db      	lsls	r3, r3, #31
 800de00:	d405      	bmi.n	800de0e <_puts_r+0x22>
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	0598      	lsls	r0, r3, #22
 800de06:	d402      	bmi.n	800de0e <_puts_r+0x22>
 800de08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de0a:	f000 f9b2 	bl	800e172 <__retarget_lock_acquire_recursive>
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	0719      	lsls	r1, r3, #28
 800de12:	d502      	bpl.n	800de1a <_puts_r+0x2e>
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d135      	bne.n	800de86 <_puts_r+0x9a>
 800de1a:	4621      	mov	r1, r4
 800de1c:	4628      	mov	r0, r5
 800de1e:	f000 f8c5 	bl	800dfac <__swsetup_r>
 800de22:	b380      	cbz	r0, 800de86 <_puts_r+0x9a>
 800de24:	f04f 35ff 	mov.w	r5, #4294967295
 800de28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de2a:	07da      	lsls	r2, r3, #31
 800de2c:	d405      	bmi.n	800de3a <_puts_r+0x4e>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	059b      	lsls	r3, r3, #22
 800de32:	d402      	bmi.n	800de3a <_puts_r+0x4e>
 800de34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de36:	f000 f99d 	bl	800e174 <__retarget_lock_release_recursive>
 800de3a:	4628      	mov	r0, r5
 800de3c:	bd70      	pop	{r4, r5, r6, pc}
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da04      	bge.n	800de4c <_puts_r+0x60>
 800de42:	69a2      	ldr	r2, [r4, #24]
 800de44:	429a      	cmp	r2, r3
 800de46:	dc17      	bgt.n	800de78 <_puts_r+0x8c>
 800de48:	290a      	cmp	r1, #10
 800de4a:	d015      	beq.n	800de78 <_puts_r+0x8c>
 800de4c:	6823      	ldr	r3, [r4, #0]
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	6022      	str	r2, [r4, #0]
 800de52:	7019      	strb	r1, [r3, #0]
 800de54:	68a3      	ldr	r3, [r4, #8]
 800de56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de5a:	3b01      	subs	r3, #1
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	2900      	cmp	r1, #0
 800de60:	d1ed      	bne.n	800de3e <_puts_r+0x52>
 800de62:	2b00      	cmp	r3, #0
 800de64:	da11      	bge.n	800de8a <_puts_r+0x9e>
 800de66:	4622      	mov	r2, r4
 800de68:	210a      	movs	r1, #10
 800de6a:	4628      	mov	r0, r5
 800de6c:	f000 f85f 	bl	800df2e <__swbuf_r>
 800de70:	3001      	adds	r0, #1
 800de72:	d0d7      	beq.n	800de24 <_puts_r+0x38>
 800de74:	250a      	movs	r5, #10
 800de76:	e7d7      	b.n	800de28 <_puts_r+0x3c>
 800de78:	4622      	mov	r2, r4
 800de7a:	4628      	mov	r0, r5
 800de7c:	f000 f857 	bl	800df2e <__swbuf_r>
 800de80:	3001      	adds	r0, #1
 800de82:	d1e7      	bne.n	800de54 <_puts_r+0x68>
 800de84:	e7ce      	b.n	800de24 <_puts_r+0x38>
 800de86:	3e01      	subs	r6, #1
 800de88:	e7e4      	b.n	800de54 <_puts_r+0x68>
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	1c5a      	adds	r2, r3, #1
 800de8e:	6022      	str	r2, [r4, #0]
 800de90:	220a      	movs	r2, #10
 800de92:	701a      	strb	r2, [r3, #0]
 800de94:	e7ee      	b.n	800de74 <_puts_r+0x88>
	...

0800de98 <puts>:
 800de98:	4b02      	ldr	r3, [pc, #8]	@ (800dea4 <puts+0xc>)
 800de9a:	4601      	mov	r1, r0
 800de9c:	6818      	ldr	r0, [r3, #0]
 800de9e:	f7ff bfa5 	b.w	800ddec <_puts_r>
 800dea2:	bf00      	nop
 800dea4:	20000130 	.word	0x20000130

0800dea8 <__sread>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	460c      	mov	r4, r1
 800deac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb0:	f000 f900 	bl	800e0b4 <_read_r>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	bfab      	itete	ge
 800deb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800deba:	89a3      	ldrhlt	r3, [r4, #12]
 800debc:	181b      	addge	r3, r3, r0
 800debe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dec2:	bfac      	ite	ge
 800dec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dec6:	81a3      	strhlt	r3, [r4, #12]
 800dec8:	bd10      	pop	{r4, pc}

0800deca <__swrite>:
 800deca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dece:	461f      	mov	r7, r3
 800ded0:	898b      	ldrh	r3, [r1, #12]
 800ded2:	05db      	lsls	r3, r3, #23
 800ded4:	4605      	mov	r5, r0
 800ded6:	460c      	mov	r4, r1
 800ded8:	4616      	mov	r6, r2
 800deda:	d505      	bpl.n	800dee8 <__swrite+0x1e>
 800dedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee0:	2302      	movs	r3, #2
 800dee2:	2200      	movs	r2, #0
 800dee4:	f000 f8d4 	bl	800e090 <_lseek_r>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	4632      	mov	r2, r6
 800def6:	463b      	mov	r3, r7
 800def8:	4628      	mov	r0, r5
 800defa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800defe:	f000 b8fb 	b.w	800e0f8 <_write_r>

0800df02 <__sseek>:
 800df02:	b510      	push	{r4, lr}
 800df04:	460c      	mov	r4, r1
 800df06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0a:	f000 f8c1 	bl	800e090 <_lseek_r>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	bf15      	itete	ne
 800df14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df1e:	81a3      	strheq	r3, [r4, #12]
 800df20:	bf18      	it	ne
 800df22:	81a3      	strhne	r3, [r4, #12]
 800df24:	bd10      	pop	{r4, pc}

0800df26 <__sclose>:
 800df26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2a:	f000 b8a1 	b.w	800e070 <_close_r>

0800df2e <__swbuf_r>:
 800df2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df30:	460e      	mov	r6, r1
 800df32:	4614      	mov	r4, r2
 800df34:	4605      	mov	r5, r0
 800df36:	b118      	cbz	r0, 800df40 <__swbuf_r+0x12>
 800df38:	6a03      	ldr	r3, [r0, #32]
 800df3a:	b90b      	cbnz	r3, 800df40 <__swbuf_r+0x12>
 800df3c:	f7ff ff06 	bl	800dd4c <__sinit>
 800df40:	69a3      	ldr	r3, [r4, #24]
 800df42:	60a3      	str	r3, [r4, #8]
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	071a      	lsls	r2, r3, #28
 800df48:	d501      	bpl.n	800df4e <__swbuf_r+0x20>
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	b943      	cbnz	r3, 800df60 <__swbuf_r+0x32>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 f82b 	bl	800dfac <__swsetup_r>
 800df56:	b118      	cbz	r0, 800df60 <__swbuf_r+0x32>
 800df58:	f04f 37ff 	mov.w	r7, #4294967295
 800df5c:	4638      	mov	r0, r7
 800df5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	6922      	ldr	r2, [r4, #16]
 800df64:	1a98      	subs	r0, r3, r2
 800df66:	6963      	ldr	r3, [r4, #20]
 800df68:	b2f6      	uxtb	r6, r6
 800df6a:	4283      	cmp	r3, r0
 800df6c:	4637      	mov	r7, r6
 800df6e:	dc05      	bgt.n	800df7c <__swbuf_r+0x4e>
 800df70:	4621      	mov	r1, r4
 800df72:	4628      	mov	r0, r5
 800df74:	f001 fcf2 	bl	800f95c <_fflush_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d1ed      	bne.n	800df58 <__swbuf_r+0x2a>
 800df7c:	68a3      	ldr	r3, [r4, #8]
 800df7e:	3b01      	subs	r3, #1
 800df80:	60a3      	str	r3, [r4, #8]
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	6022      	str	r2, [r4, #0]
 800df88:	701e      	strb	r6, [r3, #0]
 800df8a:	6962      	ldr	r2, [r4, #20]
 800df8c:	1c43      	adds	r3, r0, #1
 800df8e:	429a      	cmp	r2, r3
 800df90:	d004      	beq.n	800df9c <__swbuf_r+0x6e>
 800df92:	89a3      	ldrh	r3, [r4, #12]
 800df94:	07db      	lsls	r3, r3, #31
 800df96:	d5e1      	bpl.n	800df5c <__swbuf_r+0x2e>
 800df98:	2e0a      	cmp	r6, #10
 800df9a:	d1df      	bne.n	800df5c <__swbuf_r+0x2e>
 800df9c:	4621      	mov	r1, r4
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f001 fcdc 	bl	800f95c <_fflush_r>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0d9      	beq.n	800df5c <__swbuf_r+0x2e>
 800dfa8:	e7d6      	b.n	800df58 <__swbuf_r+0x2a>
	...

0800dfac <__swsetup_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4b29      	ldr	r3, [pc, #164]	@ (800e054 <__swsetup_r+0xa8>)
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	6818      	ldr	r0, [r3, #0]
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	b118      	cbz	r0, 800dfc0 <__swsetup_r+0x14>
 800dfb8:	6a03      	ldr	r3, [r0, #32]
 800dfba:	b90b      	cbnz	r3, 800dfc0 <__swsetup_r+0x14>
 800dfbc:	f7ff fec6 	bl	800dd4c <__sinit>
 800dfc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfc4:	0719      	lsls	r1, r3, #28
 800dfc6:	d422      	bmi.n	800e00e <__swsetup_r+0x62>
 800dfc8:	06da      	lsls	r2, r3, #27
 800dfca:	d407      	bmi.n	800dfdc <__swsetup_r+0x30>
 800dfcc:	2209      	movs	r2, #9
 800dfce:	602a      	str	r2, [r5, #0]
 800dfd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd4:	81a3      	strh	r3, [r4, #12]
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfda:	e033      	b.n	800e044 <__swsetup_r+0x98>
 800dfdc:	0758      	lsls	r0, r3, #29
 800dfde:	d512      	bpl.n	800e006 <__swsetup_r+0x5a>
 800dfe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfe2:	b141      	cbz	r1, 800dff6 <__swsetup_r+0x4a>
 800dfe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfe8:	4299      	cmp	r1, r3
 800dfea:	d002      	beq.n	800dff2 <__swsetup_r+0x46>
 800dfec:	4628      	mov	r0, r5
 800dfee:	f000 ff2b 	bl	800ee48 <_free_r>
 800dff2:	2300      	movs	r3, #0
 800dff4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dff6:	89a3      	ldrh	r3, [r4, #12]
 800dff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dffc:	81a3      	strh	r3, [r4, #12]
 800dffe:	2300      	movs	r3, #0
 800e000:	6063      	str	r3, [r4, #4]
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	f043 0308 	orr.w	r3, r3, #8
 800e00c:	81a3      	strh	r3, [r4, #12]
 800e00e:	6923      	ldr	r3, [r4, #16]
 800e010:	b94b      	cbnz	r3, 800e026 <__swsetup_r+0x7a>
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e01c:	d003      	beq.n	800e026 <__swsetup_r+0x7a>
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f001 fce9 	bl	800f9f8 <__smakebuf_r>
 800e026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e02a:	f013 0201 	ands.w	r2, r3, #1
 800e02e:	d00a      	beq.n	800e046 <__swsetup_r+0x9a>
 800e030:	2200      	movs	r2, #0
 800e032:	60a2      	str	r2, [r4, #8]
 800e034:	6962      	ldr	r2, [r4, #20]
 800e036:	4252      	negs	r2, r2
 800e038:	61a2      	str	r2, [r4, #24]
 800e03a:	6922      	ldr	r2, [r4, #16]
 800e03c:	b942      	cbnz	r2, 800e050 <__swsetup_r+0xa4>
 800e03e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e042:	d1c5      	bne.n	800dfd0 <__swsetup_r+0x24>
 800e044:	bd38      	pop	{r3, r4, r5, pc}
 800e046:	0799      	lsls	r1, r3, #30
 800e048:	bf58      	it	pl
 800e04a:	6962      	ldrpl	r2, [r4, #20]
 800e04c:	60a2      	str	r2, [r4, #8]
 800e04e:	e7f4      	b.n	800e03a <__swsetup_r+0x8e>
 800e050:	2000      	movs	r0, #0
 800e052:	e7f7      	b.n	800e044 <__swsetup_r+0x98>
 800e054:	20000130 	.word	0x20000130

0800e058 <memset>:
 800e058:	4402      	add	r2, r0
 800e05a:	4603      	mov	r3, r0
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d100      	bne.n	800e062 <memset+0xa>
 800e060:	4770      	bx	lr
 800e062:	f803 1b01 	strb.w	r1, [r3], #1
 800e066:	e7f9      	b.n	800e05c <memset+0x4>

0800e068 <_localeconv_r>:
 800e068:	4800      	ldr	r0, [pc, #0]	@ (800e06c <_localeconv_r+0x4>)
 800e06a:	4770      	bx	lr
 800e06c:	20000270 	.word	0x20000270

0800e070 <_close_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d06      	ldr	r5, [pc, #24]	@ (800e08c <_close_r+0x1c>)
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	602b      	str	r3, [r5, #0]
 800e07c:	f7f6 f9c2 	bl	8004404 <_close>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d102      	bne.n	800e08a <_close_r+0x1a>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	b103      	cbz	r3, 800e08a <_close_r+0x1a>
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	bd38      	pop	{r3, r4, r5, pc}
 800e08c:	20002564 	.word	0x20002564

0800e090 <_lseek_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d07      	ldr	r5, [pc, #28]	@ (800e0b0 <_lseek_r+0x20>)
 800e094:	4604      	mov	r4, r0
 800e096:	4608      	mov	r0, r1
 800e098:	4611      	mov	r1, r2
 800e09a:	2200      	movs	r2, #0
 800e09c:	602a      	str	r2, [r5, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	f7f6 f9d7 	bl	8004452 <_lseek>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	d102      	bne.n	800e0ae <_lseek_r+0x1e>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	b103      	cbz	r3, 800e0ae <_lseek_r+0x1e>
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	20002564 	.word	0x20002564

0800e0b4 <_read_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d07      	ldr	r5, [pc, #28]	@ (800e0d4 <_read_r+0x20>)
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	4608      	mov	r0, r1
 800e0bc:	4611      	mov	r1, r2
 800e0be:	2200      	movs	r2, #0
 800e0c0:	602a      	str	r2, [r5, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f7f6 f981 	bl	80043ca <_read>
 800e0c8:	1c43      	adds	r3, r0, #1
 800e0ca:	d102      	bne.n	800e0d2 <_read_r+0x1e>
 800e0cc:	682b      	ldr	r3, [r5, #0]
 800e0ce:	b103      	cbz	r3, 800e0d2 <_read_r+0x1e>
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	bd38      	pop	{r3, r4, r5, pc}
 800e0d4:	20002564 	.word	0x20002564

0800e0d8 <_sbrk_r>:
 800e0d8:	b538      	push	{r3, r4, r5, lr}
 800e0da:	4d06      	ldr	r5, [pc, #24]	@ (800e0f4 <_sbrk_r+0x1c>)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4604      	mov	r4, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	602b      	str	r3, [r5, #0]
 800e0e4:	f7f6 f9c2 	bl	800446c <_sbrk>
 800e0e8:	1c43      	adds	r3, r0, #1
 800e0ea:	d102      	bne.n	800e0f2 <_sbrk_r+0x1a>
 800e0ec:	682b      	ldr	r3, [r5, #0]
 800e0ee:	b103      	cbz	r3, 800e0f2 <_sbrk_r+0x1a>
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
 800e0f4:	20002564 	.word	0x20002564

0800e0f8 <_write_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	4d07      	ldr	r5, [pc, #28]	@ (800e118 <_write_r+0x20>)
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	4608      	mov	r0, r1
 800e100:	4611      	mov	r1, r2
 800e102:	2200      	movs	r2, #0
 800e104:	602a      	str	r2, [r5, #0]
 800e106:	461a      	mov	r2, r3
 800e108:	f7f5 fb05 	bl	8003716 <_write>
 800e10c:	1c43      	adds	r3, r0, #1
 800e10e:	d102      	bne.n	800e116 <_write_r+0x1e>
 800e110:	682b      	ldr	r3, [r5, #0]
 800e112:	b103      	cbz	r3, 800e116 <_write_r+0x1e>
 800e114:	6023      	str	r3, [r4, #0]
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	20002564 	.word	0x20002564

0800e11c <__errno>:
 800e11c:	4b01      	ldr	r3, [pc, #4]	@ (800e124 <__errno+0x8>)
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	20000130 	.word	0x20000130

0800e128 <__libc_init_array>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	4d0d      	ldr	r5, [pc, #52]	@ (800e160 <__libc_init_array+0x38>)
 800e12c:	4c0d      	ldr	r4, [pc, #52]	@ (800e164 <__libc_init_array+0x3c>)
 800e12e:	1b64      	subs	r4, r4, r5
 800e130:	10a4      	asrs	r4, r4, #2
 800e132:	2600      	movs	r6, #0
 800e134:	42a6      	cmp	r6, r4
 800e136:	d109      	bne.n	800e14c <__libc_init_array+0x24>
 800e138:	4d0b      	ldr	r5, [pc, #44]	@ (800e168 <__libc_init_array+0x40>)
 800e13a:	4c0c      	ldr	r4, [pc, #48]	@ (800e16c <__libc_init_array+0x44>)
 800e13c:	f002 f9ac 	bl	8010498 <_init>
 800e140:	1b64      	subs	r4, r4, r5
 800e142:	10a4      	asrs	r4, r4, #2
 800e144:	2600      	movs	r6, #0
 800e146:	42a6      	cmp	r6, r4
 800e148:	d105      	bne.n	800e156 <__libc_init_array+0x2e>
 800e14a:	bd70      	pop	{r4, r5, r6, pc}
 800e14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e150:	4798      	blx	r3
 800e152:	3601      	adds	r6, #1
 800e154:	e7ee      	b.n	800e134 <__libc_init_array+0xc>
 800e156:	f855 3b04 	ldr.w	r3, [r5], #4
 800e15a:	4798      	blx	r3
 800e15c:	3601      	adds	r6, #1
 800e15e:	e7f2      	b.n	800e146 <__libc_init_array+0x1e>
 800e160:	08010ca0 	.word	0x08010ca0
 800e164:	08010ca0 	.word	0x08010ca0
 800e168:	08010ca0 	.word	0x08010ca0
 800e16c:	08010ca4 	.word	0x08010ca4

0800e170 <__retarget_lock_init_recursive>:
 800e170:	4770      	bx	lr

0800e172 <__retarget_lock_acquire_recursive>:
 800e172:	4770      	bx	lr

0800e174 <__retarget_lock_release_recursive>:
 800e174:	4770      	bx	lr

0800e176 <memcpy>:
 800e176:	440a      	add	r2, r1
 800e178:	4291      	cmp	r1, r2
 800e17a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e17e:	d100      	bne.n	800e182 <memcpy+0xc>
 800e180:	4770      	bx	lr
 800e182:	b510      	push	{r4, lr}
 800e184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e18c:	4291      	cmp	r1, r2
 800e18e:	d1f9      	bne.n	800e184 <memcpy+0xe>
 800e190:	bd10      	pop	{r4, pc}

0800e192 <quorem>:
 800e192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e196:	6903      	ldr	r3, [r0, #16]
 800e198:	690c      	ldr	r4, [r1, #16]
 800e19a:	42a3      	cmp	r3, r4
 800e19c:	4607      	mov	r7, r0
 800e19e:	db7e      	blt.n	800e29e <quorem+0x10c>
 800e1a0:	3c01      	subs	r4, #1
 800e1a2:	f101 0814 	add.w	r8, r1, #20
 800e1a6:	00a3      	lsls	r3, r4, #2
 800e1a8:	f100 0514 	add.w	r5, r0, #20
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1b2:	9301      	str	r3, [sp, #4]
 800e1b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1c8:	d32e      	bcc.n	800e228 <quorem+0x96>
 800e1ca:	f04f 0a00 	mov.w	sl, #0
 800e1ce:	46c4      	mov	ip, r8
 800e1d0:	46ae      	mov	lr, r5
 800e1d2:	46d3      	mov	fp, sl
 800e1d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e1d8:	b298      	uxth	r0, r3
 800e1da:	fb06 a000 	mla	r0, r6, r0, sl
 800e1de:	0c02      	lsrs	r2, r0, #16
 800e1e0:	0c1b      	lsrs	r3, r3, #16
 800e1e2:	fb06 2303 	mla	r3, r6, r3, r2
 800e1e6:	f8de 2000 	ldr.w	r2, [lr]
 800e1ea:	b280      	uxth	r0, r0
 800e1ec:	b292      	uxth	r2, r2
 800e1ee:	1a12      	subs	r2, r2, r0
 800e1f0:	445a      	add	r2, fp
 800e1f2:	f8de 0000 	ldr.w	r0, [lr]
 800e1f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e200:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e204:	b292      	uxth	r2, r2
 800e206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e20a:	45e1      	cmp	r9, ip
 800e20c:	f84e 2b04 	str.w	r2, [lr], #4
 800e210:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e214:	d2de      	bcs.n	800e1d4 <quorem+0x42>
 800e216:	9b00      	ldr	r3, [sp, #0]
 800e218:	58eb      	ldr	r3, [r5, r3]
 800e21a:	b92b      	cbnz	r3, 800e228 <quorem+0x96>
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	3b04      	subs	r3, #4
 800e220:	429d      	cmp	r5, r3
 800e222:	461a      	mov	r2, r3
 800e224:	d32f      	bcc.n	800e286 <quorem+0xf4>
 800e226:	613c      	str	r4, [r7, #16]
 800e228:	4638      	mov	r0, r7
 800e22a:	f001 f8c9 	bl	800f3c0 <__mcmp>
 800e22e:	2800      	cmp	r0, #0
 800e230:	db25      	blt.n	800e27e <quorem+0xec>
 800e232:	4629      	mov	r1, r5
 800e234:	2000      	movs	r0, #0
 800e236:	f858 2b04 	ldr.w	r2, [r8], #4
 800e23a:	f8d1 c000 	ldr.w	ip, [r1]
 800e23e:	fa1f fe82 	uxth.w	lr, r2
 800e242:	fa1f f38c 	uxth.w	r3, ip
 800e246:	eba3 030e 	sub.w	r3, r3, lr
 800e24a:	4403      	add	r3, r0
 800e24c:	0c12      	lsrs	r2, r2, #16
 800e24e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e252:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e256:	b29b      	uxth	r3, r3
 800e258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e25c:	45c1      	cmp	r9, r8
 800e25e:	f841 3b04 	str.w	r3, [r1], #4
 800e262:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e266:	d2e6      	bcs.n	800e236 <quorem+0xa4>
 800e268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e270:	b922      	cbnz	r2, 800e27c <quorem+0xea>
 800e272:	3b04      	subs	r3, #4
 800e274:	429d      	cmp	r5, r3
 800e276:	461a      	mov	r2, r3
 800e278:	d30b      	bcc.n	800e292 <quorem+0x100>
 800e27a:	613c      	str	r4, [r7, #16]
 800e27c:	3601      	adds	r6, #1
 800e27e:	4630      	mov	r0, r6
 800e280:	b003      	add	sp, #12
 800e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e286:	6812      	ldr	r2, [r2, #0]
 800e288:	3b04      	subs	r3, #4
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d1cb      	bne.n	800e226 <quorem+0x94>
 800e28e:	3c01      	subs	r4, #1
 800e290:	e7c6      	b.n	800e220 <quorem+0x8e>
 800e292:	6812      	ldr	r2, [r2, #0]
 800e294:	3b04      	subs	r3, #4
 800e296:	2a00      	cmp	r2, #0
 800e298:	d1ef      	bne.n	800e27a <quorem+0xe8>
 800e29a:	3c01      	subs	r4, #1
 800e29c:	e7ea      	b.n	800e274 <quorem+0xe2>
 800e29e:	2000      	movs	r0, #0
 800e2a0:	e7ee      	b.n	800e280 <quorem+0xee>
 800e2a2:	0000      	movs	r0, r0
 800e2a4:	0000      	movs	r0, r0
	...

0800e2a8 <_dtoa_r>:
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	69c7      	ldr	r7, [r0, #28]
 800e2ae:	b097      	sub	sp, #92	@ 0x5c
 800e2b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e2b4:	ec55 4b10 	vmov	r4, r5, d0
 800e2b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e2ba:	9107      	str	r1, [sp, #28]
 800e2bc:	4681      	mov	r9, r0
 800e2be:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e2c2:	b97f      	cbnz	r7, 800e2e4 <_dtoa_r+0x3c>
 800e2c4:	2010      	movs	r0, #16
 800e2c6:	f7fe ffa9 	bl	800d21c <malloc>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	f8c9 001c 	str.w	r0, [r9, #28]
 800e2d0:	b920      	cbnz	r0, 800e2dc <_dtoa_r+0x34>
 800e2d2:	4ba9      	ldr	r3, [pc, #676]	@ (800e578 <_dtoa_r+0x2d0>)
 800e2d4:	21ef      	movs	r1, #239	@ 0xef
 800e2d6:	48a9      	ldr	r0, [pc, #676]	@ (800e57c <_dtoa_r+0x2d4>)
 800e2d8:	f001 fc20 	bl	800fb1c <__assert_func>
 800e2dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e2e0:	6007      	str	r7, [r0, #0]
 800e2e2:	60c7      	str	r7, [r0, #12]
 800e2e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2e8:	6819      	ldr	r1, [r3, #0]
 800e2ea:	b159      	cbz	r1, 800e304 <_dtoa_r+0x5c>
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	604a      	str	r2, [r1, #4]
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	4093      	lsls	r3, r2
 800e2f4:	608b      	str	r3, [r1, #8]
 800e2f6:	4648      	mov	r0, r9
 800e2f8:	f000 fe30 	bl	800ef5c <_Bfree>
 800e2fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	1e2b      	subs	r3, r5, #0
 800e306:	bfb9      	ittee	lt
 800e308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e30c:	9305      	strlt	r3, [sp, #20]
 800e30e:	2300      	movge	r3, #0
 800e310:	6033      	strge	r3, [r6, #0]
 800e312:	9f05      	ldr	r7, [sp, #20]
 800e314:	4b9a      	ldr	r3, [pc, #616]	@ (800e580 <_dtoa_r+0x2d8>)
 800e316:	bfbc      	itt	lt
 800e318:	2201      	movlt	r2, #1
 800e31a:	6032      	strlt	r2, [r6, #0]
 800e31c:	43bb      	bics	r3, r7
 800e31e:	d112      	bne.n	800e346 <_dtoa_r+0x9e>
 800e320:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e322:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e326:	6013      	str	r3, [r2, #0]
 800e328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e32c:	4323      	orrs	r3, r4
 800e32e:	f000 855a 	beq.w	800ede6 <_dtoa_r+0xb3e>
 800e332:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e334:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e594 <_dtoa_r+0x2ec>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 855c 	beq.w	800edf6 <_dtoa_r+0xb4e>
 800e33e:	f10a 0303 	add.w	r3, sl, #3
 800e342:	f000 bd56 	b.w	800edf2 <_dtoa_r+0xb4a>
 800e346:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e34a:	2200      	movs	r2, #0
 800e34c:	ec51 0b17 	vmov	r0, r1, d7
 800e350:	2300      	movs	r3, #0
 800e352:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e356:	f7f2 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e35a:	4680      	mov	r8, r0
 800e35c:	b158      	cbz	r0, 800e376 <_dtoa_r+0xce>
 800e35e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e360:	2301      	movs	r3, #1
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e366:	b113      	cbz	r3, 800e36e <_dtoa_r+0xc6>
 800e368:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e36a:	4b86      	ldr	r3, [pc, #536]	@ (800e584 <_dtoa_r+0x2dc>)
 800e36c:	6013      	str	r3, [r2, #0]
 800e36e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e598 <_dtoa_r+0x2f0>
 800e372:	f000 bd40 	b.w	800edf6 <_dtoa_r+0xb4e>
 800e376:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e37a:	aa14      	add	r2, sp, #80	@ 0x50
 800e37c:	a915      	add	r1, sp, #84	@ 0x54
 800e37e:	4648      	mov	r0, r9
 800e380:	f001 f8ce 	bl	800f520 <__d2b>
 800e384:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e388:	9002      	str	r0, [sp, #8]
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	d078      	beq.n	800e480 <_dtoa_r+0x1d8>
 800e38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e390:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e398:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e39c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e3a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e3a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	4b76      	ldr	r3, [pc, #472]	@ (800e588 <_dtoa_r+0x2e0>)
 800e3ae:	f7f1 ff6b 	bl	8000288 <__aeabi_dsub>
 800e3b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e560 <_dtoa_r+0x2b8>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	f7f2 f91e 	bl	80005f8 <__aeabi_dmul>
 800e3bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e568 <_dtoa_r+0x2c0>)
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f7f1 ff63 	bl	800028c <__adddf3>
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	460d      	mov	r5, r1
 800e3cc:	f7f2 f8aa 	bl	8000524 <__aeabi_i2d>
 800e3d0:	a367      	add	r3, pc, #412	@ (adr r3, 800e570 <_dtoa_r+0x2c8>)
 800e3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d6:	f7f2 f90f 	bl	80005f8 <__aeabi_dmul>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	460b      	mov	r3, r1
 800e3de:	4620      	mov	r0, r4
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	f7f1 ff53 	bl	800028c <__adddf3>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	f7f2 fbb5 	bl	8000b58 <__aeabi_d2iz>
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f2 fb70 	bl	8000adc <__aeabi_dcmplt>
 800e3fc:	b140      	cbz	r0, 800e410 <_dtoa_r+0x168>
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7f2 f890 	bl	8000524 <__aeabi_i2d>
 800e404:	4622      	mov	r2, r4
 800e406:	462b      	mov	r3, r5
 800e408:	f7f2 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e40c:	b900      	cbnz	r0, 800e410 <_dtoa_r+0x168>
 800e40e:	3f01      	subs	r7, #1
 800e410:	2f16      	cmp	r7, #22
 800e412:	d852      	bhi.n	800e4ba <_dtoa_r+0x212>
 800e414:	4b5d      	ldr	r3, [pc, #372]	@ (800e58c <_dtoa_r+0x2e4>)
 800e416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e422:	f7f2 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800e426:	2800      	cmp	r0, #0
 800e428:	d049      	beq.n	800e4be <_dtoa_r+0x216>
 800e42a:	3f01      	subs	r7, #1
 800e42c:	2300      	movs	r3, #0
 800e42e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e430:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e432:	1b9b      	subs	r3, r3, r6
 800e434:	1e5a      	subs	r2, r3, #1
 800e436:	bf45      	ittet	mi
 800e438:	f1c3 0301 	rsbmi	r3, r3, #1
 800e43c:	9300      	strmi	r3, [sp, #0]
 800e43e:	2300      	movpl	r3, #0
 800e440:	2300      	movmi	r3, #0
 800e442:	9206      	str	r2, [sp, #24]
 800e444:	bf54      	ite	pl
 800e446:	9300      	strpl	r3, [sp, #0]
 800e448:	9306      	strmi	r3, [sp, #24]
 800e44a:	2f00      	cmp	r7, #0
 800e44c:	db39      	blt.n	800e4c2 <_dtoa_r+0x21a>
 800e44e:	9b06      	ldr	r3, [sp, #24]
 800e450:	970d      	str	r7, [sp, #52]	@ 0x34
 800e452:	443b      	add	r3, r7
 800e454:	9306      	str	r3, [sp, #24]
 800e456:	2300      	movs	r3, #0
 800e458:	9308      	str	r3, [sp, #32]
 800e45a:	9b07      	ldr	r3, [sp, #28]
 800e45c:	2b09      	cmp	r3, #9
 800e45e:	d863      	bhi.n	800e528 <_dtoa_r+0x280>
 800e460:	2b05      	cmp	r3, #5
 800e462:	bfc4      	itt	gt
 800e464:	3b04      	subgt	r3, #4
 800e466:	9307      	strgt	r3, [sp, #28]
 800e468:	9b07      	ldr	r3, [sp, #28]
 800e46a:	f1a3 0302 	sub.w	r3, r3, #2
 800e46e:	bfcc      	ite	gt
 800e470:	2400      	movgt	r4, #0
 800e472:	2401      	movle	r4, #1
 800e474:	2b03      	cmp	r3, #3
 800e476:	d863      	bhi.n	800e540 <_dtoa_r+0x298>
 800e478:	e8df f003 	tbb	[pc, r3]
 800e47c:	2b375452 	.word	0x2b375452
 800e480:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e484:	441e      	add	r6, r3
 800e486:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e48a:	2b20      	cmp	r3, #32
 800e48c:	bfc1      	itttt	gt
 800e48e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e492:	409f      	lslgt	r7, r3
 800e494:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e498:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e49c:	bfd6      	itet	le
 800e49e:	f1c3 0320 	rsble	r3, r3, #32
 800e4a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e4a6:	fa04 f003 	lslle.w	r0, r4, r3
 800e4aa:	f7f2 f82b 	bl	8000504 <__aeabi_ui2d>
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e4b4:	3e01      	subs	r6, #1
 800e4b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e4b8:	e776      	b.n	800e3a8 <_dtoa_r+0x100>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e7b7      	b.n	800e42e <_dtoa_r+0x186>
 800e4be:	9010      	str	r0, [sp, #64]	@ 0x40
 800e4c0:	e7b6      	b.n	800e430 <_dtoa_r+0x188>
 800e4c2:	9b00      	ldr	r3, [sp, #0]
 800e4c4:	1bdb      	subs	r3, r3, r7
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	427b      	negs	r3, r7
 800e4ca:	9308      	str	r3, [sp, #32]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800e4d0:	e7c3      	b.n	800e45a <_dtoa_r+0x1b2>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4d8:	eb07 0b03 	add.w	fp, r7, r3
 800e4dc:	f10b 0301 	add.w	r3, fp, #1
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	9303      	str	r3, [sp, #12]
 800e4e4:	bfb8      	it	lt
 800e4e6:	2301      	movlt	r3, #1
 800e4e8:	e006      	b.n	800e4f8 <_dtoa_r+0x250>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	dd28      	ble.n	800e546 <_dtoa_r+0x29e>
 800e4f4:	469b      	mov	fp, r3
 800e4f6:	9303      	str	r3, [sp, #12]
 800e4f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	2204      	movs	r2, #4
 800e500:	f102 0514 	add.w	r5, r2, #20
 800e504:	429d      	cmp	r5, r3
 800e506:	d926      	bls.n	800e556 <_dtoa_r+0x2ae>
 800e508:	6041      	str	r1, [r0, #4]
 800e50a:	4648      	mov	r0, r9
 800e50c:	f000 fce6 	bl	800eedc <_Balloc>
 800e510:	4682      	mov	sl, r0
 800e512:	2800      	cmp	r0, #0
 800e514:	d142      	bne.n	800e59c <_dtoa_r+0x2f4>
 800e516:	4b1e      	ldr	r3, [pc, #120]	@ (800e590 <_dtoa_r+0x2e8>)
 800e518:	4602      	mov	r2, r0
 800e51a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e51e:	e6da      	b.n	800e2d6 <_dtoa_r+0x2e>
 800e520:	2300      	movs	r3, #0
 800e522:	e7e3      	b.n	800e4ec <_dtoa_r+0x244>
 800e524:	2300      	movs	r3, #0
 800e526:	e7d5      	b.n	800e4d4 <_dtoa_r+0x22c>
 800e528:	2401      	movs	r4, #1
 800e52a:	2300      	movs	r3, #0
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e530:	f04f 3bff 	mov.w	fp, #4294967295
 800e534:	2200      	movs	r2, #0
 800e536:	f8cd b00c 	str.w	fp, [sp, #12]
 800e53a:	2312      	movs	r3, #18
 800e53c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e53e:	e7db      	b.n	800e4f8 <_dtoa_r+0x250>
 800e540:	2301      	movs	r3, #1
 800e542:	9309      	str	r3, [sp, #36]	@ 0x24
 800e544:	e7f4      	b.n	800e530 <_dtoa_r+0x288>
 800e546:	f04f 0b01 	mov.w	fp, #1
 800e54a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e54e:	465b      	mov	r3, fp
 800e550:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e554:	e7d0      	b.n	800e4f8 <_dtoa_r+0x250>
 800e556:	3101      	adds	r1, #1
 800e558:	0052      	lsls	r2, r2, #1
 800e55a:	e7d1      	b.n	800e500 <_dtoa_r+0x258>
 800e55c:	f3af 8000 	nop.w
 800e560:	636f4361 	.word	0x636f4361
 800e564:	3fd287a7 	.word	0x3fd287a7
 800e568:	8b60c8b3 	.word	0x8b60c8b3
 800e56c:	3fc68a28 	.word	0x3fc68a28
 800e570:	509f79fb 	.word	0x509f79fb
 800e574:	3fd34413 	.word	0x3fd34413
 800e578:	08010931 	.word	0x08010931
 800e57c:	08010948 	.word	0x08010948
 800e580:	7ff00000 	.word	0x7ff00000
 800e584:	08010901 	.word	0x08010901
 800e588:	3ff80000 	.word	0x3ff80000
 800e58c:	08010a98 	.word	0x08010a98
 800e590:	080109a0 	.word	0x080109a0
 800e594:	0801092d 	.word	0x0801092d
 800e598:	08010900 	.word	0x08010900
 800e59c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5a0:	6018      	str	r0, [r3, #0]
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	2b0e      	cmp	r3, #14
 800e5a6:	f200 80a1 	bhi.w	800e6ec <_dtoa_r+0x444>
 800e5aa:	2c00      	cmp	r4, #0
 800e5ac:	f000 809e 	beq.w	800e6ec <_dtoa_r+0x444>
 800e5b0:	2f00      	cmp	r7, #0
 800e5b2:	dd33      	ble.n	800e61c <_dtoa_r+0x374>
 800e5b4:	4b9c      	ldr	r3, [pc, #624]	@ (800e828 <_dtoa_r+0x580>)
 800e5b6:	f007 020f 	and.w	r2, r7, #15
 800e5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5be:	ed93 7b00 	vldr	d7, [r3]
 800e5c2:	05f8      	lsls	r0, r7, #23
 800e5c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e5c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e5cc:	d516      	bpl.n	800e5fc <_dtoa_r+0x354>
 800e5ce:	4b97      	ldr	r3, [pc, #604]	@ (800e82c <_dtoa_r+0x584>)
 800e5d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5d8:	f7f2 f938 	bl	800084c <__aeabi_ddiv>
 800e5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5e0:	f004 040f 	and.w	r4, r4, #15
 800e5e4:	2603      	movs	r6, #3
 800e5e6:	4d91      	ldr	r5, [pc, #580]	@ (800e82c <_dtoa_r+0x584>)
 800e5e8:	b954      	cbnz	r4, 800e600 <_dtoa_r+0x358>
 800e5ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5f2:	f7f2 f92b 	bl	800084c <__aeabi_ddiv>
 800e5f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5fa:	e028      	b.n	800e64e <_dtoa_r+0x3a6>
 800e5fc:	2602      	movs	r6, #2
 800e5fe:	e7f2      	b.n	800e5e6 <_dtoa_r+0x33e>
 800e600:	07e1      	lsls	r1, r4, #31
 800e602:	d508      	bpl.n	800e616 <_dtoa_r+0x36e>
 800e604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e60c:	f7f1 fff4 	bl	80005f8 <__aeabi_dmul>
 800e610:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e614:	3601      	adds	r6, #1
 800e616:	1064      	asrs	r4, r4, #1
 800e618:	3508      	adds	r5, #8
 800e61a:	e7e5      	b.n	800e5e8 <_dtoa_r+0x340>
 800e61c:	f000 80af 	beq.w	800e77e <_dtoa_r+0x4d6>
 800e620:	427c      	negs	r4, r7
 800e622:	4b81      	ldr	r3, [pc, #516]	@ (800e828 <_dtoa_r+0x580>)
 800e624:	4d81      	ldr	r5, [pc, #516]	@ (800e82c <_dtoa_r+0x584>)
 800e626:	f004 020f 	and.w	r2, r4, #15
 800e62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e636:	f7f1 ffdf 	bl	80005f8 <__aeabi_dmul>
 800e63a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e63e:	1124      	asrs	r4, r4, #4
 800e640:	2300      	movs	r3, #0
 800e642:	2602      	movs	r6, #2
 800e644:	2c00      	cmp	r4, #0
 800e646:	f040 808f 	bne.w	800e768 <_dtoa_r+0x4c0>
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1d3      	bne.n	800e5f6 <_dtoa_r+0x34e>
 800e64e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e650:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 8094 	beq.w	800e782 <_dtoa_r+0x4da>
 800e65a:	4b75      	ldr	r3, [pc, #468]	@ (800e830 <_dtoa_r+0x588>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	4620      	mov	r0, r4
 800e660:	4629      	mov	r1, r5
 800e662:	f7f2 fa3b 	bl	8000adc <__aeabi_dcmplt>
 800e666:	2800      	cmp	r0, #0
 800e668:	f000 808b 	beq.w	800e782 <_dtoa_r+0x4da>
 800e66c:	9b03      	ldr	r3, [sp, #12]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f000 8087 	beq.w	800e782 <_dtoa_r+0x4da>
 800e674:	f1bb 0f00 	cmp.w	fp, #0
 800e678:	dd34      	ble.n	800e6e4 <_dtoa_r+0x43c>
 800e67a:	4620      	mov	r0, r4
 800e67c:	4b6d      	ldr	r3, [pc, #436]	@ (800e834 <_dtoa_r+0x58c>)
 800e67e:	2200      	movs	r2, #0
 800e680:	4629      	mov	r1, r5
 800e682:	f7f1 ffb9 	bl	80005f8 <__aeabi_dmul>
 800e686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e68a:	f107 38ff 	add.w	r8, r7, #4294967295
 800e68e:	3601      	adds	r6, #1
 800e690:	465c      	mov	r4, fp
 800e692:	4630      	mov	r0, r6
 800e694:	f7f1 ff46 	bl	8000524 <__aeabi_i2d>
 800e698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e69c:	f7f1 ffac 	bl	80005f8 <__aeabi_dmul>
 800e6a0:	4b65      	ldr	r3, [pc, #404]	@ (800e838 <_dtoa_r+0x590>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f7f1 fdf2 	bl	800028c <__adddf3>
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e6ae:	2c00      	cmp	r4, #0
 800e6b0:	d16a      	bne.n	800e788 <_dtoa_r+0x4e0>
 800e6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6b6:	4b61      	ldr	r3, [pc, #388]	@ (800e83c <_dtoa_r+0x594>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6c6:	462a      	mov	r2, r5
 800e6c8:	4633      	mov	r3, r6
 800e6ca:	f7f2 fa25 	bl	8000b18 <__aeabi_dcmpgt>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	f040 8298 	bne.w	800ec04 <_dtoa_r+0x95c>
 800e6d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6d8:	462a      	mov	r2, r5
 800e6da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e6de:	f7f2 f9fd 	bl	8000adc <__aeabi_dcmplt>
 800e6e2:	bb38      	cbnz	r0, 800e734 <_dtoa_r+0x48c>
 800e6e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e6e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e6ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f2c0 8157 	blt.w	800e9a2 <_dtoa_r+0x6fa>
 800e6f4:	2f0e      	cmp	r7, #14
 800e6f6:	f300 8154 	bgt.w	800e9a2 <_dtoa_r+0x6fa>
 800e6fa:	4b4b      	ldr	r3, [pc, #300]	@ (800e828 <_dtoa_r+0x580>)
 800e6fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e700:	ed93 7b00 	vldr	d7, [r3]
 800e704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e706:	2b00      	cmp	r3, #0
 800e708:	ed8d 7b00 	vstr	d7, [sp]
 800e70c:	f280 80e5 	bge.w	800e8da <_dtoa_r+0x632>
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	f300 80e1 	bgt.w	800e8da <_dtoa_r+0x632>
 800e718:	d10c      	bne.n	800e734 <_dtoa_r+0x48c>
 800e71a:	4b48      	ldr	r3, [pc, #288]	@ (800e83c <_dtoa_r+0x594>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	ec51 0b17 	vmov	r0, r1, d7
 800e722:	f7f1 ff69 	bl	80005f8 <__aeabi_dmul>
 800e726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e72a:	f7f2 f9eb 	bl	8000b04 <__aeabi_dcmpge>
 800e72e:	2800      	cmp	r0, #0
 800e730:	f000 8266 	beq.w	800ec00 <_dtoa_r+0x958>
 800e734:	2400      	movs	r4, #0
 800e736:	4625      	mov	r5, r4
 800e738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e73a:	4656      	mov	r6, sl
 800e73c:	ea6f 0803 	mvn.w	r8, r3
 800e740:	2700      	movs	r7, #0
 800e742:	4621      	mov	r1, r4
 800e744:	4648      	mov	r0, r9
 800e746:	f000 fc09 	bl	800ef5c <_Bfree>
 800e74a:	2d00      	cmp	r5, #0
 800e74c:	f000 80bd 	beq.w	800e8ca <_dtoa_r+0x622>
 800e750:	b12f      	cbz	r7, 800e75e <_dtoa_r+0x4b6>
 800e752:	42af      	cmp	r7, r5
 800e754:	d003      	beq.n	800e75e <_dtoa_r+0x4b6>
 800e756:	4639      	mov	r1, r7
 800e758:	4648      	mov	r0, r9
 800e75a:	f000 fbff 	bl	800ef5c <_Bfree>
 800e75e:	4629      	mov	r1, r5
 800e760:	4648      	mov	r0, r9
 800e762:	f000 fbfb 	bl	800ef5c <_Bfree>
 800e766:	e0b0      	b.n	800e8ca <_dtoa_r+0x622>
 800e768:	07e2      	lsls	r2, r4, #31
 800e76a:	d505      	bpl.n	800e778 <_dtoa_r+0x4d0>
 800e76c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e770:	f7f1 ff42 	bl	80005f8 <__aeabi_dmul>
 800e774:	3601      	adds	r6, #1
 800e776:	2301      	movs	r3, #1
 800e778:	1064      	asrs	r4, r4, #1
 800e77a:	3508      	adds	r5, #8
 800e77c:	e762      	b.n	800e644 <_dtoa_r+0x39c>
 800e77e:	2602      	movs	r6, #2
 800e780:	e765      	b.n	800e64e <_dtoa_r+0x3a6>
 800e782:	9c03      	ldr	r4, [sp, #12]
 800e784:	46b8      	mov	r8, r7
 800e786:	e784      	b.n	800e692 <_dtoa_r+0x3ea>
 800e788:	4b27      	ldr	r3, [pc, #156]	@ (800e828 <_dtoa_r+0x580>)
 800e78a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e78c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e794:	4454      	add	r4, sl
 800e796:	2900      	cmp	r1, #0
 800e798:	d054      	beq.n	800e844 <_dtoa_r+0x59c>
 800e79a:	4929      	ldr	r1, [pc, #164]	@ (800e840 <_dtoa_r+0x598>)
 800e79c:	2000      	movs	r0, #0
 800e79e:	f7f2 f855 	bl	800084c <__aeabi_ddiv>
 800e7a2:	4633      	mov	r3, r6
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	f7f1 fd6f 	bl	8000288 <__aeabi_dsub>
 800e7aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7b4:	f7f2 f9d0 	bl	8000b58 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 feb3 	bl	8000524 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7c6:	f7f1 fd5f 	bl	8000288 <__aeabi_dsub>
 800e7ca:	3530      	adds	r5, #48	@ 0x30
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7d4:	f806 5b01 	strb.w	r5, [r6], #1
 800e7d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e7dc:	f7f2 f97e 	bl	8000adc <__aeabi_dcmplt>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d172      	bne.n	800e8ca <_dtoa_r+0x622>
 800e7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7e8:	4911      	ldr	r1, [pc, #68]	@ (800e830 <_dtoa_r+0x588>)
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	f7f1 fd4c 	bl	8000288 <__aeabi_dsub>
 800e7f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e7f4:	f7f2 f972 	bl	8000adc <__aeabi_dcmplt>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	f040 80b4 	bne.w	800e966 <_dtoa_r+0x6be>
 800e7fe:	42a6      	cmp	r6, r4
 800e800:	f43f af70 	beq.w	800e6e4 <_dtoa_r+0x43c>
 800e804:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e808:	4b0a      	ldr	r3, [pc, #40]	@ (800e834 <_dtoa_r+0x58c>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	f7f1 fef4 	bl	80005f8 <__aeabi_dmul>
 800e810:	4b08      	ldr	r3, [pc, #32]	@ (800e834 <_dtoa_r+0x58c>)
 800e812:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e816:	2200      	movs	r2, #0
 800e818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e81c:	f7f1 feec 	bl	80005f8 <__aeabi_dmul>
 800e820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e824:	e7c4      	b.n	800e7b0 <_dtoa_r+0x508>
 800e826:	bf00      	nop
 800e828:	08010a98 	.word	0x08010a98
 800e82c:	08010a70 	.word	0x08010a70
 800e830:	3ff00000 	.word	0x3ff00000
 800e834:	40240000 	.word	0x40240000
 800e838:	401c0000 	.word	0x401c0000
 800e83c:	40140000 	.word	0x40140000
 800e840:	3fe00000 	.word	0x3fe00000
 800e844:	4631      	mov	r1, r6
 800e846:	4628      	mov	r0, r5
 800e848:	f7f1 fed6 	bl	80005f8 <__aeabi_dmul>
 800e84c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e850:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e852:	4656      	mov	r6, sl
 800e854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e858:	f7f2 f97e 	bl	8000b58 <__aeabi_d2iz>
 800e85c:	4605      	mov	r5, r0
 800e85e:	f7f1 fe61 	bl	8000524 <__aeabi_i2d>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e86a:	f7f1 fd0d 	bl	8000288 <__aeabi_dsub>
 800e86e:	3530      	adds	r5, #48	@ 0x30
 800e870:	f806 5b01 	strb.w	r5, [r6], #1
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	42a6      	cmp	r6, r4
 800e87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e87e:	f04f 0200 	mov.w	r2, #0
 800e882:	d124      	bne.n	800e8ce <_dtoa_r+0x626>
 800e884:	4baf      	ldr	r3, [pc, #700]	@ (800eb44 <_dtoa_r+0x89c>)
 800e886:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e88a:	f7f1 fcff 	bl	800028c <__adddf3>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e896:	f7f2 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d163      	bne.n	800e966 <_dtoa_r+0x6be>
 800e89e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e8a2:	49a8      	ldr	r1, [pc, #672]	@ (800eb44 <_dtoa_r+0x89c>)
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	f7f1 fcef 	bl	8000288 <__aeabi_dsub>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8b2:	f7f2 f913 	bl	8000adc <__aeabi_dcmplt>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	f43f af14 	beq.w	800e6e4 <_dtoa_r+0x43c>
 800e8bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e8be:	1e73      	subs	r3, r6, #1
 800e8c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e8c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8c6:	2b30      	cmp	r3, #48	@ 0x30
 800e8c8:	d0f8      	beq.n	800e8bc <_dtoa_r+0x614>
 800e8ca:	4647      	mov	r7, r8
 800e8cc:	e03b      	b.n	800e946 <_dtoa_r+0x69e>
 800e8ce:	4b9e      	ldr	r3, [pc, #632]	@ (800eb48 <_dtoa_r+0x8a0>)
 800e8d0:	f7f1 fe92 	bl	80005f8 <__aeabi_dmul>
 800e8d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8d8:	e7bc      	b.n	800e854 <_dtoa_r+0x5ac>
 800e8da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e8de:	4656      	mov	r6, sl
 800e8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f1 ffb0 	bl	800084c <__aeabi_ddiv>
 800e8ec:	f7f2 f934 	bl	8000b58 <__aeabi_d2iz>
 800e8f0:	4680      	mov	r8, r0
 800e8f2:	f7f1 fe17 	bl	8000524 <__aeabi_i2d>
 800e8f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8fa:	f7f1 fe7d 	bl	80005f8 <__aeabi_dmul>
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	4620      	mov	r0, r4
 800e904:	4629      	mov	r1, r5
 800e906:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e90a:	f7f1 fcbd 	bl	8000288 <__aeabi_dsub>
 800e90e:	f806 4b01 	strb.w	r4, [r6], #1
 800e912:	9d03      	ldr	r5, [sp, #12]
 800e914:	eba6 040a 	sub.w	r4, r6, sl
 800e918:	42a5      	cmp	r5, r4
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	d133      	bne.n	800e988 <_dtoa_r+0x6e0>
 800e920:	f7f1 fcb4 	bl	800028c <__adddf3>
 800e924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e928:	4604      	mov	r4, r0
 800e92a:	460d      	mov	r5, r1
 800e92c:	f7f2 f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 800e930:	b9c0      	cbnz	r0, 800e964 <_dtoa_r+0x6bc>
 800e932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f7f2 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e93e:	b110      	cbz	r0, 800e946 <_dtoa_r+0x69e>
 800e940:	f018 0f01 	tst.w	r8, #1
 800e944:	d10e      	bne.n	800e964 <_dtoa_r+0x6bc>
 800e946:	9902      	ldr	r1, [sp, #8]
 800e948:	4648      	mov	r0, r9
 800e94a:	f000 fb07 	bl	800ef5c <_Bfree>
 800e94e:	2300      	movs	r3, #0
 800e950:	7033      	strb	r3, [r6, #0]
 800e952:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e954:	3701      	adds	r7, #1
 800e956:	601f      	str	r7, [r3, #0]
 800e958:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f000 824b 	beq.w	800edf6 <_dtoa_r+0xb4e>
 800e960:	601e      	str	r6, [r3, #0]
 800e962:	e248      	b.n	800edf6 <_dtoa_r+0xb4e>
 800e964:	46b8      	mov	r8, r7
 800e966:	4633      	mov	r3, r6
 800e968:	461e      	mov	r6, r3
 800e96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e96e:	2a39      	cmp	r2, #57	@ 0x39
 800e970:	d106      	bne.n	800e980 <_dtoa_r+0x6d8>
 800e972:	459a      	cmp	sl, r3
 800e974:	d1f8      	bne.n	800e968 <_dtoa_r+0x6c0>
 800e976:	2230      	movs	r2, #48	@ 0x30
 800e978:	f108 0801 	add.w	r8, r8, #1
 800e97c:	f88a 2000 	strb.w	r2, [sl]
 800e980:	781a      	ldrb	r2, [r3, #0]
 800e982:	3201      	adds	r2, #1
 800e984:	701a      	strb	r2, [r3, #0]
 800e986:	e7a0      	b.n	800e8ca <_dtoa_r+0x622>
 800e988:	4b6f      	ldr	r3, [pc, #444]	@ (800eb48 <_dtoa_r+0x8a0>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	2200      	movs	r2, #0
 800e992:	2300      	movs	r3, #0
 800e994:	4604      	mov	r4, r0
 800e996:	460d      	mov	r5, r1
 800e998:	f7f2 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d09f      	beq.n	800e8e0 <_dtoa_r+0x638>
 800e9a0:	e7d1      	b.n	800e946 <_dtoa_r+0x69e>
 800e9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9a4:	2a00      	cmp	r2, #0
 800e9a6:	f000 80ea 	beq.w	800eb7e <_dtoa_r+0x8d6>
 800e9aa:	9a07      	ldr	r2, [sp, #28]
 800e9ac:	2a01      	cmp	r2, #1
 800e9ae:	f300 80cd 	bgt.w	800eb4c <_dtoa_r+0x8a4>
 800e9b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e9b4:	2a00      	cmp	r2, #0
 800e9b6:	f000 80c1 	beq.w	800eb3c <_dtoa_r+0x894>
 800e9ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e9be:	9c08      	ldr	r4, [sp, #32]
 800e9c0:	9e00      	ldr	r6, [sp, #0]
 800e9c2:	9a00      	ldr	r2, [sp, #0]
 800e9c4:	441a      	add	r2, r3
 800e9c6:	9200      	str	r2, [sp, #0]
 800e9c8:	9a06      	ldr	r2, [sp, #24]
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	441a      	add	r2, r3
 800e9ce:	4648      	mov	r0, r9
 800e9d0:	9206      	str	r2, [sp, #24]
 800e9d2:	f000 fb77 	bl	800f0c4 <__i2b>
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	b166      	cbz	r6, 800e9f4 <_dtoa_r+0x74c>
 800e9da:	9b06      	ldr	r3, [sp, #24]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dd09      	ble.n	800e9f4 <_dtoa_r+0x74c>
 800e9e0:	42b3      	cmp	r3, r6
 800e9e2:	9a00      	ldr	r2, [sp, #0]
 800e9e4:	bfa8      	it	ge
 800e9e6:	4633      	movge	r3, r6
 800e9e8:	1ad2      	subs	r2, r2, r3
 800e9ea:	9200      	str	r2, [sp, #0]
 800e9ec:	9a06      	ldr	r2, [sp, #24]
 800e9ee:	1af6      	subs	r6, r6, r3
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	9306      	str	r3, [sp, #24]
 800e9f4:	9b08      	ldr	r3, [sp, #32]
 800e9f6:	b30b      	cbz	r3, 800ea3c <_dtoa_r+0x794>
 800e9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80c6 	beq.w	800eb8c <_dtoa_r+0x8e4>
 800ea00:	2c00      	cmp	r4, #0
 800ea02:	f000 80c0 	beq.w	800eb86 <_dtoa_r+0x8de>
 800ea06:	4629      	mov	r1, r5
 800ea08:	4622      	mov	r2, r4
 800ea0a:	4648      	mov	r0, r9
 800ea0c:	f000 fc12 	bl	800f234 <__pow5mult>
 800ea10:	9a02      	ldr	r2, [sp, #8]
 800ea12:	4601      	mov	r1, r0
 800ea14:	4605      	mov	r5, r0
 800ea16:	4648      	mov	r0, r9
 800ea18:	f000 fb6a 	bl	800f0f0 <__multiply>
 800ea1c:	9902      	ldr	r1, [sp, #8]
 800ea1e:	4680      	mov	r8, r0
 800ea20:	4648      	mov	r0, r9
 800ea22:	f000 fa9b 	bl	800ef5c <_Bfree>
 800ea26:	9b08      	ldr	r3, [sp, #32]
 800ea28:	1b1b      	subs	r3, r3, r4
 800ea2a:	9308      	str	r3, [sp, #32]
 800ea2c:	f000 80b1 	beq.w	800eb92 <_dtoa_r+0x8ea>
 800ea30:	9a08      	ldr	r2, [sp, #32]
 800ea32:	4641      	mov	r1, r8
 800ea34:	4648      	mov	r0, r9
 800ea36:	f000 fbfd 	bl	800f234 <__pow5mult>
 800ea3a:	9002      	str	r0, [sp, #8]
 800ea3c:	2101      	movs	r1, #1
 800ea3e:	4648      	mov	r0, r9
 800ea40:	f000 fb40 	bl	800f0c4 <__i2b>
 800ea44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea46:	4604      	mov	r4, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 81d8 	beq.w	800edfe <_dtoa_r+0xb56>
 800ea4e:	461a      	mov	r2, r3
 800ea50:	4601      	mov	r1, r0
 800ea52:	4648      	mov	r0, r9
 800ea54:	f000 fbee 	bl	800f234 <__pow5mult>
 800ea58:	9b07      	ldr	r3, [sp, #28]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	f300 809f 	bgt.w	800eba0 <_dtoa_r+0x8f8>
 800ea62:	9b04      	ldr	r3, [sp, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f040 8097 	bne.w	800eb98 <_dtoa_r+0x8f0>
 800ea6a:	9b05      	ldr	r3, [sp, #20]
 800ea6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f040 8093 	bne.w	800eb9c <_dtoa_r+0x8f4>
 800ea76:	9b05      	ldr	r3, [sp, #20]
 800ea78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea7c:	0d1b      	lsrs	r3, r3, #20
 800ea7e:	051b      	lsls	r3, r3, #20
 800ea80:	b133      	cbz	r3, 800ea90 <_dtoa_r+0x7e8>
 800ea82:	9b00      	ldr	r3, [sp, #0]
 800ea84:	3301      	adds	r3, #1
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	9b06      	ldr	r3, [sp, #24]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	9306      	str	r3, [sp, #24]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	9308      	str	r3, [sp, #32]
 800ea92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 81b8 	beq.w	800ee0a <_dtoa_r+0xb62>
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eaa0:	6918      	ldr	r0, [r3, #16]
 800eaa2:	f000 fac3 	bl	800f02c <__hi0bits>
 800eaa6:	f1c0 0020 	rsb	r0, r0, #32
 800eaaa:	9b06      	ldr	r3, [sp, #24]
 800eaac:	4418      	add	r0, r3
 800eaae:	f010 001f 	ands.w	r0, r0, #31
 800eab2:	f000 8082 	beq.w	800ebba <_dtoa_r+0x912>
 800eab6:	f1c0 0320 	rsb	r3, r0, #32
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	dd73      	ble.n	800eba6 <_dtoa_r+0x8fe>
 800eabe:	9b00      	ldr	r3, [sp, #0]
 800eac0:	f1c0 001c 	rsb	r0, r0, #28
 800eac4:	4403      	add	r3, r0
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	9b06      	ldr	r3, [sp, #24]
 800eaca:	4403      	add	r3, r0
 800eacc:	4406      	add	r6, r0
 800eace:	9306      	str	r3, [sp, #24]
 800ead0:	9b00      	ldr	r3, [sp, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	dd05      	ble.n	800eae2 <_dtoa_r+0x83a>
 800ead6:	9902      	ldr	r1, [sp, #8]
 800ead8:	461a      	mov	r2, r3
 800eada:	4648      	mov	r0, r9
 800eadc:	f000 fc04 	bl	800f2e8 <__lshift>
 800eae0:	9002      	str	r0, [sp, #8]
 800eae2:	9b06      	ldr	r3, [sp, #24]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd05      	ble.n	800eaf4 <_dtoa_r+0x84c>
 800eae8:	4621      	mov	r1, r4
 800eaea:	461a      	mov	r2, r3
 800eaec:	4648      	mov	r0, r9
 800eaee:	f000 fbfb 	bl	800f2e8 <__lshift>
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d061      	beq.n	800ebbe <_dtoa_r+0x916>
 800eafa:	9802      	ldr	r0, [sp, #8]
 800eafc:	4621      	mov	r1, r4
 800eafe:	f000 fc5f 	bl	800f3c0 <__mcmp>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	da5b      	bge.n	800ebbe <_dtoa_r+0x916>
 800eb06:	2300      	movs	r3, #0
 800eb08:	9902      	ldr	r1, [sp, #8]
 800eb0a:	220a      	movs	r2, #10
 800eb0c:	4648      	mov	r0, r9
 800eb0e:	f000 fa47 	bl	800efa0 <__multadd>
 800eb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb14:	9002      	str	r0, [sp, #8]
 800eb16:	f107 38ff 	add.w	r8, r7, #4294967295
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f000 8177 	beq.w	800ee0e <_dtoa_r+0xb66>
 800eb20:	4629      	mov	r1, r5
 800eb22:	2300      	movs	r3, #0
 800eb24:	220a      	movs	r2, #10
 800eb26:	4648      	mov	r0, r9
 800eb28:	f000 fa3a 	bl	800efa0 <__multadd>
 800eb2c:	f1bb 0f00 	cmp.w	fp, #0
 800eb30:	4605      	mov	r5, r0
 800eb32:	dc6f      	bgt.n	800ec14 <_dtoa_r+0x96c>
 800eb34:	9b07      	ldr	r3, [sp, #28]
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dc49      	bgt.n	800ebce <_dtoa_r+0x926>
 800eb3a:	e06b      	b.n	800ec14 <_dtoa_r+0x96c>
 800eb3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eb42:	e73c      	b.n	800e9be <_dtoa_r+0x716>
 800eb44:	3fe00000 	.word	0x3fe00000
 800eb48:	40240000 	.word	0x40240000
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	1e5c      	subs	r4, r3, #1
 800eb50:	9b08      	ldr	r3, [sp, #32]
 800eb52:	42a3      	cmp	r3, r4
 800eb54:	db09      	blt.n	800eb6a <_dtoa_r+0x8c2>
 800eb56:	1b1c      	subs	r4, r3, r4
 800eb58:	9b03      	ldr	r3, [sp, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f6bf af30 	bge.w	800e9c0 <_dtoa_r+0x718>
 800eb60:	9b00      	ldr	r3, [sp, #0]
 800eb62:	9a03      	ldr	r2, [sp, #12]
 800eb64:	1a9e      	subs	r6, r3, r2
 800eb66:	2300      	movs	r3, #0
 800eb68:	e72b      	b.n	800e9c2 <_dtoa_r+0x71a>
 800eb6a:	9b08      	ldr	r3, [sp, #32]
 800eb6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb6e:	9408      	str	r4, [sp, #32]
 800eb70:	1ae3      	subs	r3, r4, r3
 800eb72:	441a      	add	r2, r3
 800eb74:	9e00      	ldr	r6, [sp, #0]
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	920d      	str	r2, [sp, #52]	@ 0x34
 800eb7a:	2400      	movs	r4, #0
 800eb7c:	e721      	b.n	800e9c2 <_dtoa_r+0x71a>
 800eb7e:	9c08      	ldr	r4, [sp, #32]
 800eb80:	9e00      	ldr	r6, [sp, #0]
 800eb82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800eb84:	e728      	b.n	800e9d8 <_dtoa_r+0x730>
 800eb86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eb8a:	e751      	b.n	800ea30 <_dtoa_r+0x788>
 800eb8c:	9a08      	ldr	r2, [sp, #32]
 800eb8e:	9902      	ldr	r1, [sp, #8]
 800eb90:	e750      	b.n	800ea34 <_dtoa_r+0x78c>
 800eb92:	f8cd 8008 	str.w	r8, [sp, #8]
 800eb96:	e751      	b.n	800ea3c <_dtoa_r+0x794>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e779      	b.n	800ea90 <_dtoa_r+0x7e8>
 800eb9c:	9b04      	ldr	r3, [sp, #16]
 800eb9e:	e777      	b.n	800ea90 <_dtoa_r+0x7e8>
 800eba0:	2300      	movs	r3, #0
 800eba2:	9308      	str	r3, [sp, #32]
 800eba4:	e779      	b.n	800ea9a <_dtoa_r+0x7f2>
 800eba6:	d093      	beq.n	800ead0 <_dtoa_r+0x828>
 800eba8:	9a00      	ldr	r2, [sp, #0]
 800ebaa:	331c      	adds	r3, #28
 800ebac:	441a      	add	r2, r3
 800ebae:	9200      	str	r2, [sp, #0]
 800ebb0:	9a06      	ldr	r2, [sp, #24]
 800ebb2:	441a      	add	r2, r3
 800ebb4:	441e      	add	r6, r3
 800ebb6:	9206      	str	r2, [sp, #24]
 800ebb8:	e78a      	b.n	800ead0 <_dtoa_r+0x828>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	e7f4      	b.n	800eba8 <_dtoa_r+0x900>
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	46b8      	mov	r8, r7
 800ebc4:	dc20      	bgt.n	800ec08 <_dtoa_r+0x960>
 800ebc6:	469b      	mov	fp, r3
 800ebc8:	9b07      	ldr	r3, [sp, #28]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	dd1e      	ble.n	800ec0c <_dtoa_r+0x964>
 800ebce:	f1bb 0f00 	cmp.w	fp, #0
 800ebd2:	f47f adb1 	bne.w	800e738 <_dtoa_r+0x490>
 800ebd6:	4621      	mov	r1, r4
 800ebd8:	465b      	mov	r3, fp
 800ebda:	2205      	movs	r2, #5
 800ebdc:	4648      	mov	r0, r9
 800ebde:	f000 f9df 	bl	800efa0 <__multadd>
 800ebe2:	4601      	mov	r1, r0
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	9802      	ldr	r0, [sp, #8]
 800ebe8:	f000 fbea 	bl	800f3c0 <__mcmp>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	f77f ada3 	ble.w	800e738 <_dtoa_r+0x490>
 800ebf2:	4656      	mov	r6, sl
 800ebf4:	2331      	movs	r3, #49	@ 0x31
 800ebf6:	f806 3b01 	strb.w	r3, [r6], #1
 800ebfa:	f108 0801 	add.w	r8, r8, #1
 800ebfe:	e59f      	b.n	800e740 <_dtoa_r+0x498>
 800ec00:	9c03      	ldr	r4, [sp, #12]
 800ec02:	46b8      	mov	r8, r7
 800ec04:	4625      	mov	r5, r4
 800ec06:	e7f4      	b.n	800ebf2 <_dtoa_r+0x94a>
 800ec08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ec0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 8101 	beq.w	800ee16 <_dtoa_r+0xb6e>
 800ec14:	2e00      	cmp	r6, #0
 800ec16:	dd05      	ble.n	800ec24 <_dtoa_r+0x97c>
 800ec18:	4629      	mov	r1, r5
 800ec1a:	4632      	mov	r2, r6
 800ec1c:	4648      	mov	r0, r9
 800ec1e:	f000 fb63 	bl	800f2e8 <__lshift>
 800ec22:	4605      	mov	r5, r0
 800ec24:	9b08      	ldr	r3, [sp, #32]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d05c      	beq.n	800ece4 <_dtoa_r+0xa3c>
 800ec2a:	6869      	ldr	r1, [r5, #4]
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	f000 f955 	bl	800eedc <_Balloc>
 800ec32:	4606      	mov	r6, r0
 800ec34:	b928      	cbnz	r0, 800ec42 <_dtoa_r+0x99a>
 800ec36:	4b82      	ldr	r3, [pc, #520]	@ (800ee40 <_dtoa_r+0xb98>)
 800ec38:	4602      	mov	r2, r0
 800ec3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ec3e:	f7ff bb4a 	b.w	800e2d6 <_dtoa_r+0x2e>
 800ec42:	692a      	ldr	r2, [r5, #16]
 800ec44:	3202      	adds	r2, #2
 800ec46:	0092      	lsls	r2, r2, #2
 800ec48:	f105 010c 	add.w	r1, r5, #12
 800ec4c:	300c      	adds	r0, #12
 800ec4e:	f7ff fa92 	bl	800e176 <memcpy>
 800ec52:	2201      	movs	r2, #1
 800ec54:	4631      	mov	r1, r6
 800ec56:	4648      	mov	r0, r9
 800ec58:	f000 fb46 	bl	800f2e8 <__lshift>
 800ec5c:	f10a 0301 	add.w	r3, sl, #1
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	eb0a 030b 	add.w	r3, sl, fp
 800ec66:	9308      	str	r3, [sp, #32]
 800ec68:	9b04      	ldr	r3, [sp, #16]
 800ec6a:	f003 0301 	and.w	r3, r3, #1
 800ec6e:	462f      	mov	r7, r5
 800ec70:	9306      	str	r3, [sp, #24]
 800ec72:	4605      	mov	r5, r0
 800ec74:	9b00      	ldr	r3, [sp, #0]
 800ec76:	9802      	ldr	r0, [sp, #8]
 800ec78:	4621      	mov	r1, r4
 800ec7a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ec7e:	f7ff fa88 	bl	800e192 <quorem>
 800ec82:	4603      	mov	r3, r0
 800ec84:	3330      	adds	r3, #48	@ 0x30
 800ec86:	9003      	str	r0, [sp, #12]
 800ec88:	4639      	mov	r1, r7
 800ec8a:	9802      	ldr	r0, [sp, #8]
 800ec8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec8e:	f000 fb97 	bl	800f3c0 <__mcmp>
 800ec92:	462a      	mov	r2, r5
 800ec94:	9004      	str	r0, [sp, #16]
 800ec96:	4621      	mov	r1, r4
 800ec98:	4648      	mov	r0, r9
 800ec9a:	f000 fbad 	bl	800f3f8 <__mdiff>
 800ec9e:	68c2      	ldr	r2, [r0, #12]
 800eca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca2:	4606      	mov	r6, r0
 800eca4:	bb02      	cbnz	r2, 800ece8 <_dtoa_r+0xa40>
 800eca6:	4601      	mov	r1, r0
 800eca8:	9802      	ldr	r0, [sp, #8]
 800ecaa:	f000 fb89 	bl	800f3c0 <__mcmp>
 800ecae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4648      	mov	r0, r9
 800ecb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ecb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecba:	f000 f94f 	bl	800ef5c <_Bfree>
 800ecbe:	9b07      	ldr	r3, [sp, #28]
 800ecc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecc2:	9e00      	ldr	r6, [sp, #0]
 800ecc4:	ea42 0103 	orr.w	r1, r2, r3
 800ecc8:	9b06      	ldr	r3, [sp, #24]
 800ecca:	4319      	orrs	r1, r3
 800eccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecce:	d10d      	bne.n	800ecec <_dtoa_r+0xa44>
 800ecd0:	2b39      	cmp	r3, #57	@ 0x39
 800ecd2:	d027      	beq.n	800ed24 <_dtoa_r+0xa7c>
 800ecd4:	9a04      	ldr	r2, [sp, #16]
 800ecd6:	2a00      	cmp	r2, #0
 800ecd8:	dd01      	ble.n	800ecde <_dtoa_r+0xa36>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	3331      	adds	r3, #49	@ 0x31
 800ecde:	f88b 3000 	strb.w	r3, [fp]
 800ece2:	e52e      	b.n	800e742 <_dtoa_r+0x49a>
 800ece4:	4628      	mov	r0, r5
 800ece6:	e7b9      	b.n	800ec5c <_dtoa_r+0x9b4>
 800ece8:	2201      	movs	r2, #1
 800ecea:	e7e2      	b.n	800ecb2 <_dtoa_r+0xa0a>
 800ecec:	9904      	ldr	r1, [sp, #16]
 800ecee:	2900      	cmp	r1, #0
 800ecf0:	db04      	blt.n	800ecfc <_dtoa_r+0xa54>
 800ecf2:	9807      	ldr	r0, [sp, #28]
 800ecf4:	4301      	orrs	r1, r0
 800ecf6:	9806      	ldr	r0, [sp, #24]
 800ecf8:	4301      	orrs	r1, r0
 800ecfa:	d120      	bne.n	800ed3e <_dtoa_r+0xa96>
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	ddee      	ble.n	800ecde <_dtoa_r+0xa36>
 800ed00:	9902      	ldr	r1, [sp, #8]
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	2201      	movs	r2, #1
 800ed06:	4648      	mov	r0, r9
 800ed08:	f000 faee 	bl	800f2e8 <__lshift>
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	9002      	str	r0, [sp, #8]
 800ed10:	f000 fb56 	bl	800f3c0 <__mcmp>
 800ed14:	2800      	cmp	r0, #0
 800ed16:	9b00      	ldr	r3, [sp, #0]
 800ed18:	dc02      	bgt.n	800ed20 <_dtoa_r+0xa78>
 800ed1a:	d1e0      	bne.n	800ecde <_dtoa_r+0xa36>
 800ed1c:	07da      	lsls	r2, r3, #31
 800ed1e:	d5de      	bpl.n	800ecde <_dtoa_r+0xa36>
 800ed20:	2b39      	cmp	r3, #57	@ 0x39
 800ed22:	d1da      	bne.n	800ecda <_dtoa_r+0xa32>
 800ed24:	2339      	movs	r3, #57	@ 0x39
 800ed26:	f88b 3000 	strb.w	r3, [fp]
 800ed2a:	4633      	mov	r3, r6
 800ed2c:	461e      	mov	r6, r3
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ed34:	2a39      	cmp	r2, #57	@ 0x39
 800ed36:	d04e      	beq.n	800edd6 <_dtoa_r+0xb2e>
 800ed38:	3201      	adds	r2, #1
 800ed3a:	701a      	strb	r2, [r3, #0]
 800ed3c:	e501      	b.n	800e742 <_dtoa_r+0x49a>
 800ed3e:	2a00      	cmp	r2, #0
 800ed40:	dd03      	ble.n	800ed4a <_dtoa_r+0xaa2>
 800ed42:	2b39      	cmp	r3, #57	@ 0x39
 800ed44:	d0ee      	beq.n	800ed24 <_dtoa_r+0xa7c>
 800ed46:	3301      	adds	r3, #1
 800ed48:	e7c9      	b.n	800ecde <_dtoa_r+0xa36>
 800ed4a:	9a00      	ldr	r2, [sp, #0]
 800ed4c:	9908      	ldr	r1, [sp, #32]
 800ed4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed52:	428a      	cmp	r2, r1
 800ed54:	d028      	beq.n	800eda8 <_dtoa_r+0xb00>
 800ed56:	9902      	ldr	r1, [sp, #8]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	220a      	movs	r2, #10
 800ed5c:	4648      	mov	r0, r9
 800ed5e:	f000 f91f 	bl	800efa0 <__multadd>
 800ed62:	42af      	cmp	r7, r5
 800ed64:	9002      	str	r0, [sp, #8]
 800ed66:	f04f 0300 	mov.w	r3, #0
 800ed6a:	f04f 020a 	mov.w	r2, #10
 800ed6e:	4639      	mov	r1, r7
 800ed70:	4648      	mov	r0, r9
 800ed72:	d107      	bne.n	800ed84 <_dtoa_r+0xadc>
 800ed74:	f000 f914 	bl	800efa0 <__multadd>
 800ed78:	4607      	mov	r7, r0
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	9b00      	ldr	r3, [sp, #0]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	9300      	str	r3, [sp, #0]
 800ed82:	e777      	b.n	800ec74 <_dtoa_r+0x9cc>
 800ed84:	f000 f90c 	bl	800efa0 <__multadd>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4607      	mov	r7, r0
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	220a      	movs	r2, #10
 800ed90:	4648      	mov	r0, r9
 800ed92:	f000 f905 	bl	800efa0 <__multadd>
 800ed96:	4605      	mov	r5, r0
 800ed98:	e7f0      	b.n	800ed7c <_dtoa_r+0xad4>
 800ed9a:	f1bb 0f00 	cmp.w	fp, #0
 800ed9e:	bfcc      	ite	gt
 800eda0:	465e      	movgt	r6, fp
 800eda2:	2601      	movle	r6, #1
 800eda4:	4456      	add	r6, sl
 800eda6:	2700      	movs	r7, #0
 800eda8:	9902      	ldr	r1, [sp, #8]
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	2201      	movs	r2, #1
 800edae:	4648      	mov	r0, r9
 800edb0:	f000 fa9a 	bl	800f2e8 <__lshift>
 800edb4:	4621      	mov	r1, r4
 800edb6:	9002      	str	r0, [sp, #8]
 800edb8:	f000 fb02 	bl	800f3c0 <__mcmp>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	dcb4      	bgt.n	800ed2a <_dtoa_r+0xa82>
 800edc0:	d102      	bne.n	800edc8 <_dtoa_r+0xb20>
 800edc2:	9b00      	ldr	r3, [sp, #0]
 800edc4:	07db      	lsls	r3, r3, #31
 800edc6:	d4b0      	bmi.n	800ed2a <_dtoa_r+0xa82>
 800edc8:	4633      	mov	r3, r6
 800edca:	461e      	mov	r6, r3
 800edcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edd0:	2a30      	cmp	r2, #48	@ 0x30
 800edd2:	d0fa      	beq.n	800edca <_dtoa_r+0xb22>
 800edd4:	e4b5      	b.n	800e742 <_dtoa_r+0x49a>
 800edd6:	459a      	cmp	sl, r3
 800edd8:	d1a8      	bne.n	800ed2c <_dtoa_r+0xa84>
 800edda:	2331      	movs	r3, #49	@ 0x31
 800eddc:	f108 0801 	add.w	r8, r8, #1
 800ede0:	f88a 3000 	strb.w	r3, [sl]
 800ede4:	e4ad      	b.n	800e742 <_dtoa_r+0x49a>
 800ede6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ede8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ee44 <_dtoa_r+0xb9c>
 800edec:	b11b      	cbz	r3, 800edf6 <_dtoa_r+0xb4e>
 800edee:	f10a 0308 	add.w	r3, sl, #8
 800edf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800edf4:	6013      	str	r3, [r2, #0]
 800edf6:	4650      	mov	r0, sl
 800edf8:	b017      	add	sp, #92	@ 0x5c
 800edfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfe:	9b07      	ldr	r3, [sp, #28]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	f77f ae2e 	ble.w	800ea62 <_dtoa_r+0x7ba>
 800ee06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee08:	9308      	str	r3, [sp, #32]
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	e64d      	b.n	800eaaa <_dtoa_r+0x802>
 800ee0e:	f1bb 0f00 	cmp.w	fp, #0
 800ee12:	f77f aed9 	ble.w	800ebc8 <_dtoa_r+0x920>
 800ee16:	4656      	mov	r6, sl
 800ee18:	9802      	ldr	r0, [sp, #8]
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	f7ff f9b9 	bl	800e192 <quorem>
 800ee20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ee24:	f806 3b01 	strb.w	r3, [r6], #1
 800ee28:	eba6 020a 	sub.w	r2, r6, sl
 800ee2c:	4593      	cmp	fp, r2
 800ee2e:	ddb4      	ble.n	800ed9a <_dtoa_r+0xaf2>
 800ee30:	9902      	ldr	r1, [sp, #8]
 800ee32:	2300      	movs	r3, #0
 800ee34:	220a      	movs	r2, #10
 800ee36:	4648      	mov	r0, r9
 800ee38:	f000 f8b2 	bl	800efa0 <__multadd>
 800ee3c:	9002      	str	r0, [sp, #8]
 800ee3e:	e7eb      	b.n	800ee18 <_dtoa_r+0xb70>
 800ee40:	080109a0 	.word	0x080109a0
 800ee44:	08010924 	.word	0x08010924

0800ee48 <_free_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	2900      	cmp	r1, #0
 800ee4e:	d041      	beq.n	800eed4 <_free_r+0x8c>
 800ee50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee54:	1f0c      	subs	r4, r1, #4
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	bfb8      	it	lt
 800ee5a:	18e4      	addlt	r4, r4, r3
 800ee5c:	f7fe fa88 	bl	800d370 <__malloc_lock>
 800ee60:	4a1d      	ldr	r2, [pc, #116]	@ (800eed8 <_free_r+0x90>)
 800ee62:	6813      	ldr	r3, [r2, #0]
 800ee64:	b933      	cbnz	r3, 800ee74 <_free_r+0x2c>
 800ee66:	6063      	str	r3, [r4, #4]
 800ee68:	6014      	str	r4, [r2, #0]
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee70:	f7fe ba84 	b.w	800d37c <__malloc_unlock>
 800ee74:	42a3      	cmp	r3, r4
 800ee76:	d908      	bls.n	800ee8a <_free_r+0x42>
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	1821      	adds	r1, r4, r0
 800ee7c:	428b      	cmp	r3, r1
 800ee7e:	bf01      	itttt	eq
 800ee80:	6819      	ldreq	r1, [r3, #0]
 800ee82:	685b      	ldreq	r3, [r3, #4]
 800ee84:	1809      	addeq	r1, r1, r0
 800ee86:	6021      	streq	r1, [r4, #0]
 800ee88:	e7ed      	b.n	800ee66 <_free_r+0x1e>
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	b10b      	cbz	r3, 800ee94 <_free_r+0x4c>
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	d9fa      	bls.n	800ee8a <_free_r+0x42>
 800ee94:	6811      	ldr	r1, [r2, #0]
 800ee96:	1850      	adds	r0, r2, r1
 800ee98:	42a0      	cmp	r0, r4
 800ee9a:	d10b      	bne.n	800eeb4 <_free_r+0x6c>
 800ee9c:	6820      	ldr	r0, [r4, #0]
 800ee9e:	4401      	add	r1, r0
 800eea0:	1850      	adds	r0, r2, r1
 800eea2:	4283      	cmp	r3, r0
 800eea4:	6011      	str	r1, [r2, #0]
 800eea6:	d1e0      	bne.n	800ee6a <_free_r+0x22>
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	6053      	str	r3, [r2, #4]
 800eeae:	4408      	add	r0, r1
 800eeb0:	6010      	str	r0, [r2, #0]
 800eeb2:	e7da      	b.n	800ee6a <_free_r+0x22>
 800eeb4:	d902      	bls.n	800eebc <_free_r+0x74>
 800eeb6:	230c      	movs	r3, #12
 800eeb8:	602b      	str	r3, [r5, #0]
 800eeba:	e7d6      	b.n	800ee6a <_free_r+0x22>
 800eebc:	6820      	ldr	r0, [r4, #0]
 800eebe:	1821      	adds	r1, r4, r0
 800eec0:	428b      	cmp	r3, r1
 800eec2:	bf04      	itt	eq
 800eec4:	6819      	ldreq	r1, [r3, #0]
 800eec6:	685b      	ldreq	r3, [r3, #4]
 800eec8:	6063      	str	r3, [r4, #4]
 800eeca:	bf04      	itt	eq
 800eecc:	1809      	addeq	r1, r1, r0
 800eece:	6021      	streq	r1, [r4, #0]
 800eed0:	6054      	str	r4, [r2, #4]
 800eed2:	e7ca      	b.n	800ee6a <_free_r+0x22>
 800eed4:	bd38      	pop	{r3, r4, r5, pc}
 800eed6:	bf00      	nop
 800eed8:	20002424 	.word	0x20002424

0800eedc <_Balloc>:
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	69c6      	ldr	r6, [r0, #28]
 800eee0:	4604      	mov	r4, r0
 800eee2:	460d      	mov	r5, r1
 800eee4:	b976      	cbnz	r6, 800ef04 <_Balloc+0x28>
 800eee6:	2010      	movs	r0, #16
 800eee8:	f7fe f998 	bl	800d21c <malloc>
 800eeec:	4602      	mov	r2, r0
 800eeee:	61e0      	str	r0, [r4, #28]
 800eef0:	b920      	cbnz	r0, 800eefc <_Balloc+0x20>
 800eef2:	4b18      	ldr	r3, [pc, #96]	@ (800ef54 <_Balloc+0x78>)
 800eef4:	4818      	ldr	r0, [pc, #96]	@ (800ef58 <_Balloc+0x7c>)
 800eef6:	216b      	movs	r1, #107	@ 0x6b
 800eef8:	f000 fe10 	bl	800fb1c <__assert_func>
 800eefc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef00:	6006      	str	r6, [r0, #0]
 800ef02:	60c6      	str	r6, [r0, #12]
 800ef04:	69e6      	ldr	r6, [r4, #28]
 800ef06:	68f3      	ldr	r3, [r6, #12]
 800ef08:	b183      	cbz	r3, 800ef2c <_Balloc+0x50>
 800ef0a:	69e3      	ldr	r3, [r4, #28]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef12:	b9b8      	cbnz	r0, 800ef44 <_Balloc+0x68>
 800ef14:	2101      	movs	r1, #1
 800ef16:	fa01 f605 	lsl.w	r6, r1, r5
 800ef1a:	1d72      	adds	r2, r6, #5
 800ef1c:	0092      	lsls	r2, r2, #2
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 fe1a 	bl	800fb58 <_calloc_r>
 800ef24:	b160      	cbz	r0, 800ef40 <_Balloc+0x64>
 800ef26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef2a:	e00e      	b.n	800ef4a <_Balloc+0x6e>
 800ef2c:	2221      	movs	r2, #33	@ 0x21
 800ef2e:	2104      	movs	r1, #4
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fe11 	bl	800fb58 <_calloc_r>
 800ef36:	69e3      	ldr	r3, [r4, #28]
 800ef38:	60f0      	str	r0, [r6, #12]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1e4      	bne.n	800ef0a <_Balloc+0x2e>
 800ef40:	2000      	movs	r0, #0
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
 800ef44:	6802      	ldr	r2, [r0, #0]
 800ef46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef50:	e7f7      	b.n	800ef42 <_Balloc+0x66>
 800ef52:	bf00      	nop
 800ef54:	08010931 	.word	0x08010931
 800ef58:	080109b1 	.word	0x080109b1

0800ef5c <_Bfree>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	69c6      	ldr	r6, [r0, #28]
 800ef60:	4605      	mov	r5, r0
 800ef62:	460c      	mov	r4, r1
 800ef64:	b976      	cbnz	r6, 800ef84 <_Bfree+0x28>
 800ef66:	2010      	movs	r0, #16
 800ef68:	f7fe f958 	bl	800d21c <malloc>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	61e8      	str	r0, [r5, #28]
 800ef70:	b920      	cbnz	r0, 800ef7c <_Bfree+0x20>
 800ef72:	4b09      	ldr	r3, [pc, #36]	@ (800ef98 <_Bfree+0x3c>)
 800ef74:	4809      	ldr	r0, [pc, #36]	@ (800ef9c <_Bfree+0x40>)
 800ef76:	218f      	movs	r1, #143	@ 0x8f
 800ef78:	f000 fdd0 	bl	800fb1c <__assert_func>
 800ef7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef80:	6006      	str	r6, [r0, #0]
 800ef82:	60c6      	str	r6, [r0, #12]
 800ef84:	b13c      	cbz	r4, 800ef96 <_Bfree+0x3a>
 800ef86:	69eb      	ldr	r3, [r5, #28]
 800ef88:	6862      	ldr	r2, [r4, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef90:	6021      	str	r1, [r4, #0]
 800ef92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
 800ef98:	08010931 	.word	0x08010931
 800ef9c:	080109b1 	.word	0x080109b1

0800efa0 <__multadd>:
 800efa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa4:	690d      	ldr	r5, [r1, #16]
 800efa6:	4607      	mov	r7, r0
 800efa8:	460c      	mov	r4, r1
 800efaa:	461e      	mov	r6, r3
 800efac:	f101 0c14 	add.w	ip, r1, #20
 800efb0:	2000      	movs	r0, #0
 800efb2:	f8dc 3000 	ldr.w	r3, [ip]
 800efb6:	b299      	uxth	r1, r3
 800efb8:	fb02 6101 	mla	r1, r2, r1, r6
 800efbc:	0c1e      	lsrs	r6, r3, #16
 800efbe:	0c0b      	lsrs	r3, r1, #16
 800efc0:	fb02 3306 	mla	r3, r2, r6, r3
 800efc4:	b289      	uxth	r1, r1
 800efc6:	3001      	adds	r0, #1
 800efc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800efcc:	4285      	cmp	r5, r0
 800efce:	f84c 1b04 	str.w	r1, [ip], #4
 800efd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800efd6:	dcec      	bgt.n	800efb2 <__multadd+0x12>
 800efd8:	b30e      	cbz	r6, 800f01e <__multadd+0x7e>
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	42ab      	cmp	r3, r5
 800efde:	dc19      	bgt.n	800f014 <__multadd+0x74>
 800efe0:	6861      	ldr	r1, [r4, #4]
 800efe2:	4638      	mov	r0, r7
 800efe4:	3101      	adds	r1, #1
 800efe6:	f7ff ff79 	bl	800eedc <_Balloc>
 800efea:	4680      	mov	r8, r0
 800efec:	b928      	cbnz	r0, 800effa <__multadd+0x5a>
 800efee:	4602      	mov	r2, r0
 800eff0:	4b0c      	ldr	r3, [pc, #48]	@ (800f024 <__multadd+0x84>)
 800eff2:	480d      	ldr	r0, [pc, #52]	@ (800f028 <__multadd+0x88>)
 800eff4:	21ba      	movs	r1, #186	@ 0xba
 800eff6:	f000 fd91 	bl	800fb1c <__assert_func>
 800effa:	6922      	ldr	r2, [r4, #16]
 800effc:	3202      	adds	r2, #2
 800effe:	f104 010c 	add.w	r1, r4, #12
 800f002:	0092      	lsls	r2, r2, #2
 800f004:	300c      	adds	r0, #12
 800f006:	f7ff f8b6 	bl	800e176 <memcpy>
 800f00a:	4621      	mov	r1, r4
 800f00c:	4638      	mov	r0, r7
 800f00e:	f7ff ffa5 	bl	800ef5c <_Bfree>
 800f012:	4644      	mov	r4, r8
 800f014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f018:	3501      	adds	r5, #1
 800f01a:	615e      	str	r6, [r3, #20]
 800f01c:	6125      	str	r5, [r4, #16]
 800f01e:	4620      	mov	r0, r4
 800f020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f024:	080109a0 	.word	0x080109a0
 800f028:	080109b1 	.word	0x080109b1

0800f02c <__hi0bits>:
 800f02c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f030:	4603      	mov	r3, r0
 800f032:	bf36      	itet	cc
 800f034:	0403      	lslcc	r3, r0, #16
 800f036:	2000      	movcs	r0, #0
 800f038:	2010      	movcc	r0, #16
 800f03a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f03e:	bf3c      	itt	cc
 800f040:	021b      	lslcc	r3, r3, #8
 800f042:	3008      	addcc	r0, #8
 800f044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f048:	bf3c      	itt	cc
 800f04a:	011b      	lslcc	r3, r3, #4
 800f04c:	3004      	addcc	r0, #4
 800f04e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f052:	bf3c      	itt	cc
 800f054:	009b      	lslcc	r3, r3, #2
 800f056:	3002      	addcc	r0, #2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	db05      	blt.n	800f068 <__hi0bits+0x3c>
 800f05c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f060:	f100 0001 	add.w	r0, r0, #1
 800f064:	bf08      	it	eq
 800f066:	2020      	moveq	r0, #32
 800f068:	4770      	bx	lr

0800f06a <__lo0bits>:
 800f06a:	6803      	ldr	r3, [r0, #0]
 800f06c:	4602      	mov	r2, r0
 800f06e:	f013 0007 	ands.w	r0, r3, #7
 800f072:	d00b      	beq.n	800f08c <__lo0bits+0x22>
 800f074:	07d9      	lsls	r1, r3, #31
 800f076:	d421      	bmi.n	800f0bc <__lo0bits+0x52>
 800f078:	0798      	lsls	r0, r3, #30
 800f07a:	bf49      	itett	mi
 800f07c:	085b      	lsrmi	r3, r3, #1
 800f07e:	089b      	lsrpl	r3, r3, #2
 800f080:	2001      	movmi	r0, #1
 800f082:	6013      	strmi	r3, [r2, #0]
 800f084:	bf5c      	itt	pl
 800f086:	6013      	strpl	r3, [r2, #0]
 800f088:	2002      	movpl	r0, #2
 800f08a:	4770      	bx	lr
 800f08c:	b299      	uxth	r1, r3
 800f08e:	b909      	cbnz	r1, 800f094 <__lo0bits+0x2a>
 800f090:	0c1b      	lsrs	r3, r3, #16
 800f092:	2010      	movs	r0, #16
 800f094:	b2d9      	uxtb	r1, r3
 800f096:	b909      	cbnz	r1, 800f09c <__lo0bits+0x32>
 800f098:	3008      	adds	r0, #8
 800f09a:	0a1b      	lsrs	r3, r3, #8
 800f09c:	0719      	lsls	r1, r3, #28
 800f09e:	bf04      	itt	eq
 800f0a0:	091b      	lsreq	r3, r3, #4
 800f0a2:	3004      	addeq	r0, #4
 800f0a4:	0799      	lsls	r1, r3, #30
 800f0a6:	bf04      	itt	eq
 800f0a8:	089b      	lsreq	r3, r3, #2
 800f0aa:	3002      	addeq	r0, #2
 800f0ac:	07d9      	lsls	r1, r3, #31
 800f0ae:	d403      	bmi.n	800f0b8 <__lo0bits+0x4e>
 800f0b0:	085b      	lsrs	r3, r3, #1
 800f0b2:	f100 0001 	add.w	r0, r0, #1
 800f0b6:	d003      	beq.n	800f0c0 <__lo0bits+0x56>
 800f0b8:	6013      	str	r3, [r2, #0]
 800f0ba:	4770      	bx	lr
 800f0bc:	2000      	movs	r0, #0
 800f0be:	4770      	bx	lr
 800f0c0:	2020      	movs	r0, #32
 800f0c2:	4770      	bx	lr

0800f0c4 <__i2b>:
 800f0c4:	b510      	push	{r4, lr}
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	f7ff ff07 	bl	800eedc <_Balloc>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	b928      	cbnz	r0, 800f0de <__i2b+0x1a>
 800f0d2:	4b05      	ldr	r3, [pc, #20]	@ (800f0e8 <__i2b+0x24>)
 800f0d4:	4805      	ldr	r0, [pc, #20]	@ (800f0ec <__i2b+0x28>)
 800f0d6:	f240 1145 	movw	r1, #325	@ 0x145
 800f0da:	f000 fd1f 	bl	800fb1c <__assert_func>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	6144      	str	r4, [r0, #20]
 800f0e2:	6103      	str	r3, [r0, #16]
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop
 800f0e8:	080109a0 	.word	0x080109a0
 800f0ec:	080109b1 	.word	0x080109b1

0800f0f0 <__multiply>:
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	4617      	mov	r7, r2
 800f0f6:	690a      	ldr	r2, [r1, #16]
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	bfa8      	it	ge
 800f0fe:	463b      	movge	r3, r7
 800f100:	4689      	mov	r9, r1
 800f102:	bfa4      	itt	ge
 800f104:	460f      	movge	r7, r1
 800f106:	4699      	movge	r9, r3
 800f108:	693d      	ldr	r5, [r7, #16]
 800f10a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	6879      	ldr	r1, [r7, #4]
 800f112:	eb05 060a 	add.w	r6, r5, sl
 800f116:	42b3      	cmp	r3, r6
 800f118:	b085      	sub	sp, #20
 800f11a:	bfb8      	it	lt
 800f11c:	3101      	addlt	r1, #1
 800f11e:	f7ff fedd 	bl	800eedc <_Balloc>
 800f122:	b930      	cbnz	r0, 800f132 <__multiply+0x42>
 800f124:	4602      	mov	r2, r0
 800f126:	4b41      	ldr	r3, [pc, #260]	@ (800f22c <__multiply+0x13c>)
 800f128:	4841      	ldr	r0, [pc, #260]	@ (800f230 <__multiply+0x140>)
 800f12a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f12e:	f000 fcf5 	bl	800fb1c <__assert_func>
 800f132:	f100 0414 	add.w	r4, r0, #20
 800f136:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f13a:	4623      	mov	r3, r4
 800f13c:	2200      	movs	r2, #0
 800f13e:	4573      	cmp	r3, lr
 800f140:	d320      	bcc.n	800f184 <__multiply+0x94>
 800f142:	f107 0814 	add.w	r8, r7, #20
 800f146:	f109 0114 	add.w	r1, r9, #20
 800f14a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f14e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f152:	9302      	str	r3, [sp, #8]
 800f154:	1beb      	subs	r3, r5, r7
 800f156:	3b15      	subs	r3, #21
 800f158:	f023 0303 	bic.w	r3, r3, #3
 800f15c:	3304      	adds	r3, #4
 800f15e:	3715      	adds	r7, #21
 800f160:	42bd      	cmp	r5, r7
 800f162:	bf38      	it	cc
 800f164:	2304      	movcc	r3, #4
 800f166:	9301      	str	r3, [sp, #4]
 800f168:	9b02      	ldr	r3, [sp, #8]
 800f16a:	9103      	str	r1, [sp, #12]
 800f16c:	428b      	cmp	r3, r1
 800f16e:	d80c      	bhi.n	800f18a <__multiply+0x9a>
 800f170:	2e00      	cmp	r6, #0
 800f172:	dd03      	ble.n	800f17c <__multiply+0x8c>
 800f174:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d055      	beq.n	800f228 <__multiply+0x138>
 800f17c:	6106      	str	r6, [r0, #16]
 800f17e:	b005      	add	sp, #20
 800f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f184:	f843 2b04 	str.w	r2, [r3], #4
 800f188:	e7d9      	b.n	800f13e <__multiply+0x4e>
 800f18a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f18e:	f1ba 0f00 	cmp.w	sl, #0
 800f192:	d01f      	beq.n	800f1d4 <__multiply+0xe4>
 800f194:	46c4      	mov	ip, r8
 800f196:	46a1      	mov	r9, r4
 800f198:	2700      	movs	r7, #0
 800f19a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f19e:	f8d9 3000 	ldr.w	r3, [r9]
 800f1a2:	fa1f fb82 	uxth.w	fp, r2
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f1ac:	443b      	add	r3, r7
 800f1ae:	f8d9 7000 	ldr.w	r7, [r9]
 800f1b2:	0c12      	lsrs	r2, r2, #16
 800f1b4:	0c3f      	lsrs	r7, r7, #16
 800f1b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f1ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1c4:	4565      	cmp	r5, ip
 800f1c6:	f849 3b04 	str.w	r3, [r9], #4
 800f1ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f1ce:	d8e4      	bhi.n	800f19a <__multiply+0xaa>
 800f1d0:	9b01      	ldr	r3, [sp, #4]
 800f1d2:	50e7      	str	r7, [r4, r3]
 800f1d4:	9b03      	ldr	r3, [sp, #12]
 800f1d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f1da:	3104      	adds	r1, #4
 800f1dc:	f1b9 0f00 	cmp.w	r9, #0
 800f1e0:	d020      	beq.n	800f224 <__multiply+0x134>
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	4647      	mov	r7, r8
 800f1e6:	46a4      	mov	ip, r4
 800f1e8:	f04f 0a00 	mov.w	sl, #0
 800f1ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800f1f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f1f4:	fb09 220b 	mla	r2, r9, fp, r2
 800f1f8:	4452      	add	r2, sl
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f200:	f84c 3b04 	str.w	r3, [ip], #4
 800f204:	f857 3b04 	ldr.w	r3, [r7], #4
 800f208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f20c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f210:	fb09 330a 	mla	r3, r9, sl, r3
 800f214:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f218:	42bd      	cmp	r5, r7
 800f21a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f21e:	d8e5      	bhi.n	800f1ec <__multiply+0xfc>
 800f220:	9a01      	ldr	r2, [sp, #4]
 800f222:	50a3      	str	r3, [r4, r2]
 800f224:	3404      	adds	r4, #4
 800f226:	e79f      	b.n	800f168 <__multiply+0x78>
 800f228:	3e01      	subs	r6, #1
 800f22a:	e7a1      	b.n	800f170 <__multiply+0x80>
 800f22c:	080109a0 	.word	0x080109a0
 800f230:	080109b1 	.word	0x080109b1

0800f234 <__pow5mult>:
 800f234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f238:	4615      	mov	r5, r2
 800f23a:	f012 0203 	ands.w	r2, r2, #3
 800f23e:	4607      	mov	r7, r0
 800f240:	460e      	mov	r6, r1
 800f242:	d007      	beq.n	800f254 <__pow5mult+0x20>
 800f244:	4c25      	ldr	r4, [pc, #148]	@ (800f2dc <__pow5mult+0xa8>)
 800f246:	3a01      	subs	r2, #1
 800f248:	2300      	movs	r3, #0
 800f24a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f24e:	f7ff fea7 	bl	800efa0 <__multadd>
 800f252:	4606      	mov	r6, r0
 800f254:	10ad      	asrs	r5, r5, #2
 800f256:	d03d      	beq.n	800f2d4 <__pow5mult+0xa0>
 800f258:	69fc      	ldr	r4, [r7, #28]
 800f25a:	b97c      	cbnz	r4, 800f27c <__pow5mult+0x48>
 800f25c:	2010      	movs	r0, #16
 800f25e:	f7fd ffdd 	bl	800d21c <malloc>
 800f262:	4602      	mov	r2, r0
 800f264:	61f8      	str	r0, [r7, #28]
 800f266:	b928      	cbnz	r0, 800f274 <__pow5mult+0x40>
 800f268:	4b1d      	ldr	r3, [pc, #116]	@ (800f2e0 <__pow5mult+0xac>)
 800f26a:	481e      	ldr	r0, [pc, #120]	@ (800f2e4 <__pow5mult+0xb0>)
 800f26c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f270:	f000 fc54 	bl	800fb1c <__assert_func>
 800f274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f278:	6004      	str	r4, [r0, #0]
 800f27a:	60c4      	str	r4, [r0, #12]
 800f27c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f284:	b94c      	cbnz	r4, 800f29a <__pow5mult+0x66>
 800f286:	f240 2171 	movw	r1, #625	@ 0x271
 800f28a:	4638      	mov	r0, r7
 800f28c:	f7ff ff1a 	bl	800f0c4 <__i2b>
 800f290:	2300      	movs	r3, #0
 800f292:	f8c8 0008 	str.w	r0, [r8, #8]
 800f296:	4604      	mov	r4, r0
 800f298:	6003      	str	r3, [r0, #0]
 800f29a:	f04f 0900 	mov.w	r9, #0
 800f29e:	07eb      	lsls	r3, r5, #31
 800f2a0:	d50a      	bpl.n	800f2b8 <__pow5mult+0x84>
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4622      	mov	r2, r4
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	f7ff ff22 	bl	800f0f0 <__multiply>
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4680      	mov	r8, r0
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff fe53 	bl	800ef5c <_Bfree>
 800f2b6:	4646      	mov	r6, r8
 800f2b8:	106d      	asrs	r5, r5, #1
 800f2ba:	d00b      	beq.n	800f2d4 <__pow5mult+0xa0>
 800f2bc:	6820      	ldr	r0, [r4, #0]
 800f2be:	b938      	cbnz	r0, 800f2d0 <__pow5mult+0x9c>
 800f2c0:	4622      	mov	r2, r4
 800f2c2:	4621      	mov	r1, r4
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	f7ff ff13 	bl	800f0f0 <__multiply>
 800f2ca:	6020      	str	r0, [r4, #0]
 800f2cc:	f8c0 9000 	str.w	r9, [r0]
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	e7e4      	b.n	800f29e <__pow5mult+0x6a>
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2da:	bf00      	nop
 800f2dc:	08010a64 	.word	0x08010a64
 800f2e0:	08010931 	.word	0x08010931
 800f2e4:	080109b1 	.word	0x080109b1

0800f2e8 <__lshift>:
 800f2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	6849      	ldr	r1, [r1, #4]
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	4691      	mov	r9, r2
 800f2fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f300:	f108 0601 	add.w	r6, r8, #1
 800f304:	42b3      	cmp	r3, r6
 800f306:	db0b      	blt.n	800f320 <__lshift+0x38>
 800f308:	4638      	mov	r0, r7
 800f30a:	f7ff fde7 	bl	800eedc <_Balloc>
 800f30e:	4605      	mov	r5, r0
 800f310:	b948      	cbnz	r0, 800f326 <__lshift+0x3e>
 800f312:	4602      	mov	r2, r0
 800f314:	4b28      	ldr	r3, [pc, #160]	@ (800f3b8 <__lshift+0xd0>)
 800f316:	4829      	ldr	r0, [pc, #164]	@ (800f3bc <__lshift+0xd4>)
 800f318:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f31c:	f000 fbfe 	bl	800fb1c <__assert_func>
 800f320:	3101      	adds	r1, #1
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	e7ee      	b.n	800f304 <__lshift+0x1c>
 800f326:	2300      	movs	r3, #0
 800f328:	f100 0114 	add.w	r1, r0, #20
 800f32c:	f100 0210 	add.w	r2, r0, #16
 800f330:	4618      	mov	r0, r3
 800f332:	4553      	cmp	r3, sl
 800f334:	db33      	blt.n	800f39e <__lshift+0xb6>
 800f336:	6920      	ldr	r0, [r4, #16]
 800f338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f33c:	f104 0314 	add.w	r3, r4, #20
 800f340:	f019 091f 	ands.w	r9, r9, #31
 800f344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f34c:	d02b      	beq.n	800f3a6 <__lshift+0xbe>
 800f34e:	f1c9 0e20 	rsb	lr, r9, #32
 800f352:	468a      	mov	sl, r1
 800f354:	2200      	movs	r2, #0
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	fa00 f009 	lsl.w	r0, r0, r9
 800f35c:	4310      	orrs	r0, r2
 800f35e:	f84a 0b04 	str.w	r0, [sl], #4
 800f362:	f853 2b04 	ldr.w	r2, [r3], #4
 800f366:	459c      	cmp	ip, r3
 800f368:	fa22 f20e 	lsr.w	r2, r2, lr
 800f36c:	d8f3      	bhi.n	800f356 <__lshift+0x6e>
 800f36e:	ebac 0304 	sub.w	r3, ip, r4
 800f372:	3b15      	subs	r3, #21
 800f374:	f023 0303 	bic.w	r3, r3, #3
 800f378:	3304      	adds	r3, #4
 800f37a:	f104 0015 	add.w	r0, r4, #21
 800f37e:	4560      	cmp	r0, ip
 800f380:	bf88      	it	hi
 800f382:	2304      	movhi	r3, #4
 800f384:	50ca      	str	r2, [r1, r3]
 800f386:	b10a      	cbz	r2, 800f38c <__lshift+0xa4>
 800f388:	f108 0602 	add.w	r6, r8, #2
 800f38c:	3e01      	subs	r6, #1
 800f38e:	4638      	mov	r0, r7
 800f390:	612e      	str	r6, [r5, #16]
 800f392:	4621      	mov	r1, r4
 800f394:	f7ff fde2 	bl	800ef5c <_Bfree>
 800f398:	4628      	mov	r0, r5
 800f39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	e7c5      	b.n	800f332 <__lshift+0x4a>
 800f3a6:	3904      	subs	r1, #4
 800f3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3b0:	459c      	cmp	ip, r3
 800f3b2:	d8f9      	bhi.n	800f3a8 <__lshift+0xc0>
 800f3b4:	e7ea      	b.n	800f38c <__lshift+0xa4>
 800f3b6:	bf00      	nop
 800f3b8:	080109a0 	.word	0x080109a0
 800f3bc:	080109b1 	.word	0x080109b1

0800f3c0 <__mcmp>:
 800f3c0:	690a      	ldr	r2, [r1, #16]
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	6900      	ldr	r0, [r0, #16]
 800f3c6:	1a80      	subs	r0, r0, r2
 800f3c8:	b530      	push	{r4, r5, lr}
 800f3ca:	d10e      	bne.n	800f3ea <__mcmp+0x2a>
 800f3cc:	3314      	adds	r3, #20
 800f3ce:	3114      	adds	r1, #20
 800f3d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f3d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3e0:	4295      	cmp	r5, r2
 800f3e2:	d003      	beq.n	800f3ec <__mcmp+0x2c>
 800f3e4:	d205      	bcs.n	800f3f2 <__mcmp+0x32>
 800f3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ea:	bd30      	pop	{r4, r5, pc}
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	d3f3      	bcc.n	800f3d8 <__mcmp+0x18>
 800f3f0:	e7fb      	b.n	800f3ea <__mcmp+0x2a>
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	e7f9      	b.n	800f3ea <__mcmp+0x2a>
	...

0800f3f8 <__mdiff>:
 800f3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	4689      	mov	r9, r1
 800f3fe:	4606      	mov	r6, r0
 800f400:	4611      	mov	r1, r2
 800f402:	4648      	mov	r0, r9
 800f404:	4614      	mov	r4, r2
 800f406:	f7ff ffdb 	bl	800f3c0 <__mcmp>
 800f40a:	1e05      	subs	r5, r0, #0
 800f40c:	d112      	bne.n	800f434 <__mdiff+0x3c>
 800f40e:	4629      	mov	r1, r5
 800f410:	4630      	mov	r0, r6
 800f412:	f7ff fd63 	bl	800eedc <_Balloc>
 800f416:	4602      	mov	r2, r0
 800f418:	b928      	cbnz	r0, 800f426 <__mdiff+0x2e>
 800f41a:	4b3f      	ldr	r3, [pc, #252]	@ (800f518 <__mdiff+0x120>)
 800f41c:	f240 2137 	movw	r1, #567	@ 0x237
 800f420:	483e      	ldr	r0, [pc, #248]	@ (800f51c <__mdiff+0x124>)
 800f422:	f000 fb7b 	bl	800fb1c <__assert_func>
 800f426:	2301      	movs	r3, #1
 800f428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f42c:	4610      	mov	r0, r2
 800f42e:	b003      	add	sp, #12
 800f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	bfbc      	itt	lt
 800f436:	464b      	movlt	r3, r9
 800f438:	46a1      	movlt	r9, r4
 800f43a:	4630      	mov	r0, r6
 800f43c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f440:	bfba      	itte	lt
 800f442:	461c      	movlt	r4, r3
 800f444:	2501      	movlt	r5, #1
 800f446:	2500      	movge	r5, #0
 800f448:	f7ff fd48 	bl	800eedc <_Balloc>
 800f44c:	4602      	mov	r2, r0
 800f44e:	b918      	cbnz	r0, 800f458 <__mdiff+0x60>
 800f450:	4b31      	ldr	r3, [pc, #196]	@ (800f518 <__mdiff+0x120>)
 800f452:	f240 2145 	movw	r1, #581	@ 0x245
 800f456:	e7e3      	b.n	800f420 <__mdiff+0x28>
 800f458:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f45c:	6926      	ldr	r6, [r4, #16]
 800f45e:	60c5      	str	r5, [r0, #12]
 800f460:	f109 0310 	add.w	r3, r9, #16
 800f464:	f109 0514 	add.w	r5, r9, #20
 800f468:	f104 0e14 	add.w	lr, r4, #20
 800f46c:	f100 0b14 	add.w	fp, r0, #20
 800f470:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f474:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	46d9      	mov	r9, fp
 800f47c:	f04f 0c00 	mov.w	ip, #0
 800f480:	9b01      	ldr	r3, [sp, #4]
 800f482:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f486:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f48a:	9301      	str	r3, [sp, #4]
 800f48c:	fa1f f38a 	uxth.w	r3, sl
 800f490:	4619      	mov	r1, r3
 800f492:	b283      	uxth	r3, r0
 800f494:	1acb      	subs	r3, r1, r3
 800f496:	0c00      	lsrs	r0, r0, #16
 800f498:	4463      	add	r3, ip
 800f49a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f49e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f4a8:	4576      	cmp	r6, lr
 800f4aa:	f849 3b04 	str.w	r3, [r9], #4
 800f4ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4b2:	d8e5      	bhi.n	800f480 <__mdiff+0x88>
 800f4b4:	1b33      	subs	r3, r6, r4
 800f4b6:	3b15      	subs	r3, #21
 800f4b8:	f023 0303 	bic.w	r3, r3, #3
 800f4bc:	3415      	adds	r4, #21
 800f4be:	3304      	adds	r3, #4
 800f4c0:	42a6      	cmp	r6, r4
 800f4c2:	bf38      	it	cc
 800f4c4:	2304      	movcc	r3, #4
 800f4c6:	441d      	add	r5, r3
 800f4c8:	445b      	add	r3, fp
 800f4ca:	461e      	mov	r6, r3
 800f4cc:	462c      	mov	r4, r5
 800f4ce:	4544      	cmp	r4, r8
 800f4d0:	d30e      	bcc.n	800f4f0 <__mdiff+0xf8>
 800f4d2:	f108 0103 	add.w	r1, r8, #3
 800f4d6:	1b49      	subs	r1, r1, r5
 800f4d8:	f021 0103 	bic.w	r1, r1, #3
 800f4dc:	3d03      	subs	r5, #3
 800f4de:	45a8      	cmp	r8, r5
 800f4e0:	bf38      	it	cc
 800f4e2:	2100      	movcc	r1, #0
 800f4e4:	440b      	add	r3, r1
 800f4e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4ea:	b191      	cbz	r1, 800f512 <__mdiff+0x11a>
 800f4ec:	6117      	str	r7, [r2, #16]
 800f4ee:	e79d      	b.n	800f42c <__mdiff+0x34>
 800f4f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4f4:	46e6      	mov	lr, ip
 800f4f6:	0c08      	lsrs	r0, r1, #16
 800f4f8:	fa1c fc81 	uxtah	ip, ip, r1
 800f4fc:	4471      	add	r1, lr
 800f4fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f502:	b289      	uxth	r1, r1
 800f504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f508:	f846 1b04 	str.w	r1, [r6], #4
 800f50c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f510:	e7dd      	b.n	800f4ce <__mdiff+0xd6>
 800f512:	3f01      	subs	r7, #1
 800f514:	e7e7      	b.n	800f4e6 <__mdiff+0xee>
 800f516:	bf00      	nop
 800f518:	080109a0 	.word	0x080109a0
 800f51c:	080109b1 	.word	0x080109b1

0800f520 <__d2b>:
 800f520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f524:	460f      	mov	r7, r1
 800f526:	2101      	movs	r1, #1
 800f528:	ec59 8b10 	vmov	r8, r9, d0
 800f52c:	4616      	mov	r6, r2
 800f52e:	f7ff fcd5 	bl	800eedc <_Balloc>
 800f532:	4604      	mov	r4, r0
 800f534:	b930      	cbnz	r0, 800f544 <__d2b+0x24>
 800f536:	4602      	mov	r2, r0
 800f538:	4b23      	ldr	r3, [pc, #140]	@ (800f5c8 <__d2b+0xa8>)
 800f53a:	4824      	ldr	r0, [pc, #144]	@ (800f5cc <__d2b+0xac>)
 800f53c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f540:	f000 faec 	bl	800fb1c <__assert_func>
 800f544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f54c:	b10d      	cbz	r5, 800f552 <__d2b+0x32>
 800f54e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f552:	9301      	str	r3, [sp, #4]
 800f554:	f1b8 0300 	subs.w	r3, r8, #0
 800f558:	d023      	beq.n	800f5a2 <__d2b+0x82>
 800f55a:	4668      	mov	r0, sp
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	f7ff fd84 	bl	800f06a <__lo0bits>
 800f562:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f566:	b1d0      	cbz	r0, 800f59e <__d2b+0x7e>
 800f568:	f1c0 0320 	rsb	r3, r0, #32
 800f56c:	fa02 f303 	lsl.w	r3, r2, r3
 800f570:	430b      	orrs	r3, r1
 800f572:	40c2      	lsrs	r2, r0
 800f574:	6163      	str	r3, [r4, #20]
 800f576:	9201      	str	r2, [sp, #4]
 800f578:	9b01      	ldr	r3, [sp, #4]
 800f57a:	61a3      	str	r3, [r4, #24]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	bf0c      	ite	eq
 800f580:	2201      	moveq	r2, #1
 800f582:	2202      	movne	r2, #2
 800f584:	6122      	str	r2, [r4, #16]
 800f586:	b1a5      	cbz	r5, 800f5b2 <__d2b+0x92>
 800f588:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f58c:	4405      	add	r5, r0
 800f58e:	603d      	str	r5, [r7, #0]
 800f590:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f594:	6030      	str	r0, [r6, #0]
 800f596:	4620      	mov	r0, r4
 800f598:	b003      	add	sp, #12
 800f59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f59e:	6161      	str	r1, [r4, #20]
 800f5a0:	e7ea      	b.n	800f578 <__d2b+0x58>
 800f5a2:	a801      	add	r0, sp, #4
 800f5a4:	f7ff fd61 	bl	800f06a <__lo0bits>
 800f5a8:	9b01      	ldr	r3, [sp, #4]
 800f5aa:	6163      	str	r3, [r4, #20]
 800f5ac:	3020      	adds	r0, #32
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	e7e8      	b.n	800f584 <__d2b+0x64>
 800f5b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f5ba:	6038      	str	r0, [r7, #0]
 800f5bc:	6918      	ldr	r0, [r3, #16]
 800f5be:	f7ff fd35 	bl	800f02c <__hi0bits>
 800f5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5c6:	e7e5      	b.n	800f594 <__d2b+0x74>
 800f5c8:	080109a0 	.word	0x080109a0
 800f5cc:	080109b1 	.word	0x080109b1

0800f5d0 <__sfputc_r>:
 800f5d0:	6893      	ldr	r3, [r2, #8]
 800f5d2:	3b01      	subs	r3, #1
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	b410      	push	{r4}
 800f5d8:	6093      	str	r3, [r2, #8]
 800f5da:	da08      	bge.n	800f5ee <__sfputc_r+0x1e>
 800f5dc:	6994      	ldr	r4, [r2, #24]
 800f5de:	42a3      	cmp	r3, r4
 800f5e0:	db01      	blt.n	800f5e6 <__sfputc_r+0x16>
 800f5e2:	290a      	cmp	r1, #10
 800f5e4:	d103      	bne.n	800f5ee <__sfputc_r+0x1e>
 800f5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ea:	f7fe bca0 	b.w	800df2e <__swbuf_r>
 800f5ee:	6813      	ldr	r3, [r2, #0]
 800f5f0:	1c58      	adds	r0, r3, #1
 800f5f2:	6010      	str	r0, [r2, #0]
 800f5f4:	7019      	strb	r1, [r3, #0]
 800f5f6:	4608      	mov	r0, r1
 800f5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <__sfputs_r>:
 800f5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f600:	4606      	mov	r6, r0
 800f602:	460f      	mov	r7, r1
 800f604:	4614      	mov	r4, r2
 800f606:	18d5      	adds	r5, r2, r3
 800f608:	42ac      	cmp	r4, r5
 800f60a:	d101      	bne.n	800f610 <__sfputs_r+0x12>
 800f60c:	2000      	movs	r0, #0
 800f60e:	e007      	b.n	800f620 <__sfputs_r+0x22>
 800f610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f614:	463a      	mov	r2, r7
 800f616:	4630      	mov	r0, r6
 800f618:	f7ff ffda 	bl	800f5d0 <__sfputc_r>
 800f61c:	1c43      	adds	r3, r0, #1
 800f61e:	d1f3      	bne.n	800f608 <__sfputs_r+0xa>
 800f620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f624 <_vfiprintf_r>:
 800f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f628:	460d      	mov	r5, r1
 800f62a:	b09d      	sub	sp, #116	@ 0x74
 800f62c:	4614      	mov	r4, r2
 800f62e:	4698      	mov	r8, r3
 800f630:	4606      	mov	r6, r0
 800f632:	b118      	cbz	r0, 800f63c <_vfiprintf_r+0x18>
 800f634:	6a03      	ldr	r3, [r0, #32]
 800f636:	b90b      	cbnz	r3, 800f63c <_vfiprintf_r+0x18>
 800f638:	f7fe fb88 	bl	800dd4c <__sinit>
 800f63c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f63e:	07d9      	lsls	r1, r3, #31
 800f640:	d405      	bmi.n	800f64e <_vfiprintf_r+0x2a>
 800f642:	89ab      	ldrh	r3, [r5, #12]
 800f644:	059a      	lsls	r2, r3, #22
 800f646:	d402      	bmi.n	800f64e <_vfiprintf_r+0x2a>
 800f648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f64a:	f7fe fd92 	bl	800e172 <__retarget_lock_acquire_recursive>
 800f64e:	89ab      	ldrh	r3, [r5, #12]
 800f650:	071b      	lsls	r3, r3, #28
 800f652:	d501      	bpl.n	800f658 <_vfiprintf_r+0x34>
 800f654:	692b      	ldr	r3, [r5, #16]
 800f656:	b99b      	cbnz	r3, 800f680 <_vfiprintf_r+0x5c>
 800f658:	4629      	mov	r1, r5
 800f65a:	4630      	mov	r0, r6
 800f65c:	f7fe fca6 	bl	800dfac <__swsetup_r>
 800f660:	b170      	cbz	r0, 800f680 <_vfiprintf_r+0x5c>
 800f662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f664:	07dc      	lsls	r4, r3, #31
 800f666:	d504      	bpl.n	800f672 <_vfiprintf_r+0x4e>
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	b01d      	add	sp, #116	@ 0x74
 800f66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f672:	89ab      	ldrh	r3, [r5, #12]
 800f674:	0598      	lsls	r0, r3, #22
 800f676:	d4f7      	bmi.n	800f668 <_vfiprintf_r+0x44>
 800f678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f67a:	f7fe fd7b 	bl	800e174 <__retarget_lock_release_recursive>
 800f67e:	e7f3      	b.n	800f668 <_vfiprintf_r+0x44>
 800f680:	2300      	movs	r3, #0
 800f682:	9309      	str	r3, [sp, #36]	@ 0x24
 800f684:	2320      	movs	r3, #32
 800f686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f68a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f68e:	2330      	movs	r3, #48	@ 0x30
 800f690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f840 <_vfiprintf_r+0x21c>
 800f694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f698:	f04f 0901 	mov.w	r9, #1
 800f69c:	4623      	mov	r3, r4
 800f69e:	469a      	mov	sl, r3
 800f6a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6a4:	b10a      	cbz	r2, 800f6aa <_vfiprintf_r+0x86>
 800f6a6:	2a25      	cmp	r2, #37	@ 0x25
 800f6a8:	d1f9      	bne.n	800f69e <_vfiprintf_r+0x7a>
 800f6aa:	ebba 0b04 	subs.w	fp, sl, r4
 800f6ae:	d00b      	beq.n	800f6c8 <_vfiprintf_r+0xa4>
 800f6b0:	465b      	mov	r3, fp
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f7ff ffa1 	bl	800f5fe <__sfputs_r>
 800f6bc:	3001      	adds	r0, #1
 800f6be:	f000 80a7 	beq.w	800f810 <_vfiprintf_r+0x1ec>
 800f6c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6c4:	445a      	add	r2, fp
 800f6c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 809f 	beq.w	800f810 <_vfiprintf_r+0x1ec>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6dc:	f10a 0a01 	add.w	sl, sl, #1
 800f6e0:	9304      	str	r3, [sp, #16]
 800f6e2:	9307      	str	r3, [sp, #28]
 800f6e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6ea:	4654      	mov	r4, sl
 800f6ec:	2205      	movs	r2, #5
 800f6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f2:	4853      	ldr	r0, [pc, #332]	@ (800f840 <_vfiprintf_r+0x21c>)
 800f6f4:	f7f0 fd6c 	bl	80001d0 <memchr>
 800f6f8:	9a04      	ldr	r2, [sp, #16]
 800f6fa:	b9d8      	cbnz	r0, 800f734 <_vfiprintf_r+0x110>
 800f6fc:	06d1      	lsls	r1, r2, #27
 800f6fe:	bf44      	itt	mi
 800f700:	2320      	movmi	r3, #32
 800f702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f706:	0713      	lsls	r3, r2, #28
 800f708:	bf44      	itt	mi
 800f70a:	232b      	movmi	r3, #43	@ 0x2b
 800f70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f710:	f89a 3000 	ldrb.w	r3, [sl]
 800f714:	2b2a      	cmp	r3, #42	@ 0x2a
 800f716:	d015      	beq.n	800f744 <_vfiprintf_r+0x120>
 800f718:	9a07      	ldr	r2, [sp, #28]
 800f71a:	4654      	mov	r4, sl
 800f71c:	2000      	movs	r0, #0
 800f71e:	f04f 0c0a 	mov.w	ip, #10
 800f722:	4621      	mov	r1, r4
 800f724:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f728:	3b30      	subs	r3, #48	@ 0x30
 800f72a:	2b09      	cmp	r3, #9
 800f72c:	d94b      	bls.n	800f7c6 <_vfiprintf_r+0x1a2>
 800f72e:	b1b0      	cbz	r0, 800f75e <_vfiprintf_r+0x13a>
 800f730:	9207      	str	r2, [sp, #28]
 800f732:	e014      	b.n	800f75e <_vfiprintf_r+0x13a>
 800f734:	eba0 0308 	sub.w	r3, r0, r8
 800f738:	fa09 f303 	lsl.w	r3, r9, r3
 800f73c:	4313      	orrs	r3, r2
 800f73e:	9304      	str	r3, [sp, #16]
 800f740:	46a2      	mov	sl, r4
 800f742:	e7d2      	b.n	800f6ea <_vfiprintf_r+0xc6>
 800f744:	9b03      	ldr	r3, [sp, #12]
 800f746:	1d19      	adds	r1, r3, #4
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	9103      	str	r1, [sp, #12]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	bfbb      	ittet	lt
 800f750:	425b      	neglt	r3, r3
 800f752:	f042 0202 	orrlt.w	r2, r2, #2
 800f756:	9307      	strge	r3, [sp, #28]
 800f758:	9307      	strlt	r3, [sp, #28]
 800f75a:	bfb8      	it	lt
 800f75c:	9204      	strlt	r2, [sp, #16]
 800f75e:	7823      	ldrb	r3, [r4, #0]
 800f760:	2b2e      	cmp	r3, #46	@ 0x2e
 800f762:	d10a      	bne.n	800f77a <_vfiprintf_r+0x156>
 800f764:	7863      	ldrb	r3, [r4, #1]
 800f766:	2b2a      	cmp	r3, #42	@ 0x2a
 800f768:	d132      	bne.n	800f7d0 <_vfiprintf_r+0x1ac>
 800f76a:	9b03      	ldr	r3, [sp, #12]
 800f76c:	1d1a      	adds	r2, r3, #4
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	9203      	str	r2, [sp, #12]
 800f772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f776:	3402      	adds	r4, #2
 800f778:	9305      	str	r3, [sp, #20]
 800f77a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f850 <_vfiprintf_r+0x22c>
 800f77e:	7821      	ldrb	r1, [r4, #0]
 800f780:	2203      	movs	r2, #3
 800f782:	4650      	mov	r0, sl
 800f784:	f7f0 fd24 	bl	80001d0 <memchr>
 800f788:	b138      	cbz	r0, 800f79a <_vfiprintf_r+0x176>
 800f78a:	9b04      	ldr	r3, [sp, #16]
 800f78c:	eba0 000a 	sub.w	r0, r0, sl
 800f790:	2240      	movs	r2, #64	@ 0x40
 800f792:	4082      	lsls	r2, r0
 800f794:	4313      	orrs	r3, r2
 800f796:	3401      	adds	r4, #1
 800f798:	9304      	str	r3, [sp, #16]
 800f79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f79e:	4829      	ldr	r0, [pc, #164]	@ (800f844 <_vfiprintf_r+0x220>)
 800f7a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7a4:	2206      	movs	r2, #6
 800f7a6:	f7f0 fd13 	bl	80001d0 <memchr>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d03f      	beq.n	800f82e <_vfiprintf_r+0x20a>
 800f7ae:	4b26      	ldr	r3, [pc, #152]	@ (800f848 <_vfiprintf_r+0x224>)
 800f7b0:	bb1b      	cbnz	r3, 800f7fa <_vfiprintf_r+0x1d6>
 800f7b2:	9b03      	ldr	r3, [sp, #12]
 800f7b4:	3307      	adds	r3, #7
 800f7b6:	f023 0307 	bic.w	r3, r3, #7
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	9303      	str	r3, [sp, #12]
 800f7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c0:	443b      	add	r3, r7
 800f7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7c4:	e76a      	b.n	800f69c <_vfiprintf_r+0x78>
 800f7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	2001      	movs	r0, #1
 800f7ce:	e7a8      	b.n	800f722 <_vfiprintf_r+0xfe>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	3401      	adds	r4, #1
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	f04f 0c0a 	mov.w	ip, #10
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7e2:	3a30      	subs	r2, #48	@ 0x30
 800f7e4:	2a09      	cmp	r2, #9
 800f7e6:	d903      	bls.n	800f7f0 <_vfiprintf_r+0x1cc>
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d0c6      	beq.n	800f77a <_vfiprintf_r+0x156>
 800f7ec:	9105      	str	r1, [sp, #20]
 800f7ee:	e7c4      	b.n	800f77a <_vfiprintf_r+0x156>
 800f7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e7f0      	b.n	800f7dc <_vfiprintf_r+0x1b8>
 800f7fa:	ab03      	add	r3, sp, #12
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	462a      	mov	r2, r5
 800f800:	4b12      	ldr	r3, [pc, #72]	@ (800f84c <_vfiprintf_r+0x228>)
 800f802:	a904      	add	r1, sp, #16
 800f804:	4630      	mov	r0, r6
 800f806:	f7fd fe5f 	bl	800d4c8 <_printf_float>
 800f80a:	4607      	mov	r7, r0
 800f80c:	1c78      	adds	r0, r7, #1
 800f80e:	d1d6      	bne.n	800f7be <_vfiprintf_r+0x19a>
 800f810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f812:	07d9      	lsls	r1, r3, #31
 800f814:	d405      	bmi.n	800f822 <_vfiprintf_r+0x1fe>
 800f816:	89ab      	ldrh	r3, [r5, #12]
 800f818:	059a      	lsls	r2, r3, #22
 800f81a:	d402      	bmi.n	800f822 <_vfiprintf_r+0x1fe>
 800f81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f81e:	f7fe fca9 	bl	800e174 <__retarget_lock_release_recursive>
 800f822:	89ab      	ldrh	r3, [r5, #12]
 800f824:	065b      	lsls	r3, r3, #25
 800f826:	f53f af1f 	bmi.w	800f668 <_vfiprintf_r+0x44>
 800f82a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f82c:	e71e      	b.n	800f66c <_vfiprintf_r+0x48>
 800f82e:	ab03      	add	r3, sp, #12
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	462a      	mov	r2, r5
 800f834:	4b05      	ldr	r3, [pc, #20]	@ (800f84c <_vfiprintf_r+0x228>)
 800f836:	a904      	add	r1, sp, #16
 800f838:	4630      	mov	r0, r6
 800f83a:	f7fe f8dd 	bl	800d9f8 <_printf_i>
 800f83e:	e7e4      	b.n	800f80a <_vfiprintf_r+0x1e6>
 800f840:	08010a0a 	.word	0x08010a0a
 800f844:	08010a14 	.word	0x08010a14
 800f848:	0800d4c9 	.word	0x0800d4c9
 800f84c:	0800f5ff 	.word	0x0800f5ff
 800f850:	08010a10 	.word	0x08010a10

0800f854 <__sflush_r>:
 800f854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85c:	0716      	lsls	r6, r2, #28
 800f85e:	4605      	mov	r5, r0
 800f860:	460c      	mov	r4, r1
 800f862:	d454      	bmi.n	800f90e <__sflush_r+0xba>
 800f864:	684b      	ldr	r3, [r1, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	dc02      	bgt.n	800f870 <__sflush_r+0x1c>
 800f86a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dd48      	ble.n	800f902 <__sflush_r+0xae>
 800f870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f872:	2e00      	cmp	r6, #0
 800f874:	d045      	beq.n	800f902 <__sflush_r+0xae>
 800f876:	2300      	movs	r3, #0
 800f878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f87c:	682f      	ldr	r7, [r5, #0]
 800f87e:	6a21      	ldr	r1, [r4, #32]
 800f880:	602b      	str	r3, [r5, #0]
 800f882:	d030      	beq.n	800f8e6 <__sflush_r+0x92>
 800f884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	0759      	lsls	r1, r3, #29
 800f88a:	d505      	bpl.n	800f898 <__sflush_r+0x44>
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	1ad2      	subs	r2, r2, r3
 800f890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f892:	b10b      	cbz	r3, 800f898 <__sflush_r+0x44>
 800f894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f896:	1ad2      	subs	r2, r2, r3
 800f898:	2300      	movs	r3, #0
 800f89a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f89c:	6a21      	ldr	r1, [r4, #32]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b0      	blx	r6
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	d106      	bne.n	800f8b6 <__sflush_r+0x62>
 800f8a8:	6829      	ldr	r1, [r5, #0]
 800f8aa:	291d      	cmp	r1, #29
 800f8ac:	d82b      	bhi.n	800f906 <__sflush_r+0xb2>
 800f8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800f958 <__sflush_r+0x104>)
 800f8b0:	40ca      	lsrs	r2, r1
 800f8b2:	07d6      	lsls	r6, r2, #31
 800f8b4:	d527      	bpl.n	800f906 <__sflush_r+0xb2>
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	6062      	str	r2, [r4, #4]
 800f8ba:	04d9      	lsls	r1, r3, #19
 800f8bc:	6922      	ldr	r2, [r4, #16]
 800f8be:	6022      	str	r2, [r4, #0]
 800f8c0:	d504      	bpl.n	800f8cc <__sflush_r+0x78>
 800f8c2:	1c42      	adds	r2, r0, #1
 800f8c4:	d101      	bne.n	800f8ca <__sflush_r+0x76>
 800f8c6:	682b      	ldr	r3, [r5, #0]
 800f8c8:	b903      	cbnz	r3, 800f8cc <__sflush_r+0x78>
 800f8ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ce:	602f      	str	r7, [r5, #0]
 800f8d0:	b1b9      	cbz	r1, 800f902 <__sflush_r+0xae>
 800f8d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8d6:	4299      	cmp	r1, r3
 800f8d8:	d002      	beq.n	800f8e0 <__sflush_r+0x8c>
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f7ff fab4 	bl	800ee48 <_free_r>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8e4:	e00d      	b.n	800f902 <__sflush_r+0xae>
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	47b0      	blx	r6
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	1c50      	adds	r0, r2, #1
 800f8f0:	d1c9      	bne.n	800f886 <__sflush_r+0x32>
 800f8f2:	682b      	ldr	r3, [r5, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d0c6      	beq.n	800f886 <__sflush_r+0x32>
 800f8f8:	2b1d      	cmp	r3, #29
 800f8fa:	d001      	beq.n	800f900 <__sflush_r+0xac>
 800f8fc:	2b16      	cmp	r3, #22
 800f8fe:	d11e      	bne.n	800f93e <__sflush_r+0xea>
 800f900:	602f      	str	r7, [r5, #0]
 800f902:	2000      	movs	r0, #0
 800f904:	e022      	b.n	800f94c <__sflush_r+0xf8>
 800f906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f90a:	b21b      	sxth	r3, r3
 800f90c:	e01b      	b.n	800f946 <__sflush_r+0xf2>
 800f90e:	690f      	ldr	r7, [r1, #16]
 800f910:	2f00      	cmp	r7, #0
 800f912:	d0f6      	beq.n	800f902 <__sflush_r+0xae>
 800f914:	0793      	lsls	r3, r2, #30
 800f916:	680e      	ldr	r6, [r1, #0]
 800f918:	bf08      	it	eq
 800f91a:	694b      	ldreq	r3, [r1, #20]
 800f91c:	600f      	str	r7, [r1, #0]
 800f91e:	bf18      	it	ne
 800f920:	2300      	movne	r3, #0
 800f922:	eba6 0807 	sub.w	r8, r6, r7
 800f926:	608b      	str	r3, [r1, #8]
 800f928:	f1b8 0f00 	cmp.w	r8, #0
 800f92c:	dde9      	ble.n	800f902 <__sflush_r+0xae>
 800f92e:	6a21      	ldr	r1, [r4, #32]
 800f930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f932:	4643      	mov	r3, r8
 800f934:	463a      	mov	r2, r7
 800f936:	4628      	mov	r0, r5
 800f938:	47b0      	blx	r6
 800f93a:	2800      	cmp	r0, #0
 800f93c:	dc08      	bgt.n	800f950 <__sflush_r+0xfc>
 800f93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f950:	4407      	add	r7, r0
 800f952:	eba8 0800 	sub.w	r8, r8, r0
 800f956:	e7e7      	b.n	800f928 <__sflush_r+0xd4>
 800f958:	20400001 	.word	0x20400001

0800f95c <_fflush_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	690b      	ldr	r3, [r1, #16]
 800f960:	4605      	mov	r5, r0
 800f962:	460c      	mov	r4, r1
 800f964:	b913      	cbnz	r3, 800f96c <_fflush_r+0x10>
 800f966:	2500      	movs	r5, #0
 800f968:	4628      	mov	r0, r5
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	b118      	cbz	r0, 800f976 <_fflush_r+0x1a>
 800f96e:	6a03      	ldr	r3, [r0, #32]
 800f970:	b90b      	cbnz	r3, 800f976 <_fflush_r+0x1a>
 800f972:	f7fe f9eb 	bl	800dd4c <__sinit>
 800f976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0f3      	beq.n	800f966 <_fflush_r+0xa>
 800f97e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f980:	07d0      	lsls	r0, r2, #31
 800f982:	d404      	bmi.n	800f98e <_fflush_r+0x32>
 800f984:	0599      	lsls	r1, r3, #22
 800f986:	d402      	bmi.n	800f98e <_fflush_r+0x32>
 800f988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f98a:	f7fe fbf2 	bl	800e172 <__retarget_lock_acquire_recursive>
 800f98e:	4628      	mov	r0, r5
 800f990:	4621      	mov	r1, r4
 800f992:	f7ff ff5f 	bl	800f854 <__sflush_r>
 800f996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f998:	07da      	lsls	r2, r3, #31
 800f99a:	4605      	mov	r5, r0
 800f99c:	d4e4      	bmi.n	800f968 <_fflush_r+0xc>
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	059b      	lsls	r3, r3, #22
 800f9a2:	d4e1      	bmi.n	800f968 <_fflush_r+0xc>
 800f9a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9a6:	f7fe fbe5 	bl	800e174 <__retarget_lock_release_recursive>
 800f9aa:	e7dd      	b.n	800f968 <_fflush_r+0xc>

0800f9ac <__swhatbuf_r>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	460c      	mov	r4, r1
 800f9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	b096      	sub	sp, #88	@ 0x58
 800f9b8:	4615      	mov	r5, r2
 800f9ba:	461e      	mov	r6, r3
 800f9bc:	da0d      	bge.n	800f9da <__swhatbuf_r+0x2e>
 800f9be:	89a3      	ldrh	r3, [r4, #12]
 800f9c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9c4:	f04f 0100 	mov.w	r1, #0
 800f9c8:	bf14      	ite	ne
 800f9ca:	2340      	movne	r3, #64	@ 0x40
 800f9cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	6031      	str	r1, [r6, #0]
 800f9d4:	602b      	str	r3, [r5, #0]
 800f9d6:	b016      	add	sp, #88	@ 0x58
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}
 800f9da:	466a      	mov	r2, sp
 800f9dc:	f000 f87c 	bl	800fad8 <_fstat_r>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	dbec      	blt.n	800f9be <__swhatbuf_r+0x12>
 800f9e4:	9901      	ldr	r1, [sp, #4]
 800f9e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9ee:	4259      	negs	r1, r3
 800f9f0:	4159      	adcs	r1, r3
 800f9f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9f6:	e7eb      	b.n	800f9d0 <__swhatbuf_r+0x24>

0800f9f8 <__smakebuf_r>:
 800f9f8:	898b      	ldrh	r3, [r1, #12]
 800f9fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9fc:	079d      	lsls	r5, r3, #30
 800f9fe:	4606      	mov	r6, r0
 800fa00:	460c      	mov	r4, r1
 800fa02:	d507      	bpl.n	800fa14 <__smakebuf_r+0x1c>
 800fa04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	6123      	str	r3, [r4, #16]
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	6163      	str	r3, [r4, #20]
 800fa10:	b003      	add	sp, #12
 800fa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa14:	ab01      	add	r3, sp, #4
 800fa16:	466a      	mov	r2, sp
 800fa18:	f7ff ffc8 	bl	800f9ac <__swhatbuf_r>
 800fa1c:	9f00      	ldr	r7, [sp, #0]
 800fa1e:	4605      	mov	r5, r0
 800fa20:	4639      	mov	r1, r7
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7fd fc24 	bl	800d270 <_malloc_r>
 800fa28:	b948      	cbnz	r0, 800fa3e <__smakebuf_r+0x46>
 800fa2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa2e:	059a      	lsls	r2, r3, #22
 800fa30:	d4ee      	bmi.n	800fa10 <__smakebuf_r+0x18>
 800fa32:	f023 0303 	bic.w	r3, r3, #3
 800fa36:	f043 0302 	orr.w	r3, r3, #2
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	e7e2      	b.n	800fa04 <__smakebuf_r+0xc>
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	6020      	str	r0, [r4, #0]
 800fa42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa46:	81a3      	strh	r3, [r4, #12]
 800fa48:	9b01      	ldr	r3, [sp, #4]
 800fa4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa4e:	b15b      	cbz	r3, 800fa68 <__smakebuf_r+0x70>
 800fa50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa54:	4630      	mov	r0, r6
 800fa56:	f000 f851 	bl	800fafc <_isatty_r>
 800fa5a:	b128      	cbz	r0, 800fa68 <__smakebuf_r+0x70>
 800fa5c:	89a3      	ldrh	r3, [r4, #12]
 800fa5e:	f023 0303 	bic.w	r3, r3, #3
 800fa62:	f043 0301 	orr.w	r3, r3, #1
 800fa66:	81a3      	strh	r3, [r4, #12]
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	431d      	orrs	r5, r3
 800fa6c:	81a5      	strh	r5, [r4, #12]
 800fa6e:	e7cf      	b.n	800fa10 <__smakebuf_r+0x18>

0800fa70 <_putc_r>:
 800fa70:	b570      	push	{r4, r5, r6, lr}
 800fa72:	460d      	mov	r5, r1
 800fa74:	4614      	mov	r4, r2
 800fa76:	4606      	mov	r6, r0
 800fa78:	b118      	cbz	r0, 800fa82 <_putc_r+0x12>
 800fa7a:	6a03      	ldr	r3, [r0, #32]
 800fa7c:	b90b      	cbnz	r3, 800fa82 <_putc_r+0x12>
 800fa7e:	f7fe f965 	bl	800dd4c <__sinit>
 800fa82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa84:	07d8      	lsls	r0, r3, #31
 800fa86:	d405      	bmi.n	800fa94 <_putc_r+0x24>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	0599      	lsls	r1, r3, #22
 800fa8c:	d402      	bmi.n	800fa94 <_putc_r+0x24>
 800fa8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa90:	f7fe fb6f 	bl	800e172 <__retarget_lock_acquire_recursive>
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	60a3      	str	r3, [r4, #8]
 800fa9c:	da05      	bge.n	800faaa <_putc_r+0x3a>
 800fa9e:	69a2      	ldr	r2, [r4, #24]
 800faa0:	4293      	cmp	r3, r2
 800faa2:	db12      	blt.n	800faca <_putc_r+0x5a>
 800faa4:	b2eb      	uxtb	r3, r5
 800faa6:	2b0a      	cmp	r3, #10
 800faa8:	d00f      	beq.n	800faca <_putc_r+0x5a>
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	6022      	str	r2, [r4, #0]
 800fab0:	701d      	strb	r5, [r3, #0]
 800fab2:	b2ed      	uxtb	r5, r5
 800fab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fab6:	07da      	lsls	r2, r3, #31
 800fab8:	d405      	bmi.n	800fac6 <_putc_r+0x56>
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	059b      	lsls	r3, r3, #22
 800fabe:	d402      	bmi.n	800fac6 <_putc_r+0x56>
 800fac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fac2:	f7fe fb57 	bl	800e174 <__retarget_lock_release_recursive>
 800fac6:	4628      	mov	r0, r5
 800fac8:	bd70      	pop	{r4, r5, r6, pc}
 800faca:	4629      	mov	r1, r5
 800facc:	4622      	mov	r2, r4
 800face:	4630      	mov	r0, r6
 800fad0:	f7fe fa2d 	bl	800df2e <__swbuf_r>
 800fad4:	4605      	mov	r5, r0
 800fad6:	e7ed      	b.n	800fab4 <_putc_r+0x44>

0800fad8 <_fstat_r>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	4d07      	ldr	r5, [pc, #28]	@ (800faf8 <_fstat_r+0x20>)
 800fadc:	2300      	movs	r3, #0
 800fade:	4604      	mov	r4, r0
 800fae0:	4608      	mov	r0, r1
 800fae2:	4611      	mov	r1, r2
 800fae4:	602b      	str	r3, [r5, #0]
 800fae6:	f7f4 fc99 	bl	800441c <_fstat>
 800faea:	1c43      	adds	r3, r0, #1
 800faec:	d102      	bne.n	800faf4 <_fstat_r+0x1c>
 800faee:	682b      	ldr	r3, [r5, #0]
 800faf0:	b103      	cbz	r3, 800faf4 <_fstat_r+0x1c>
 800faf2:	6023      	str	r3, [r4, #0]
 800faf4:	bd38      	pop	{r3, r4, r5, pc}
 800faf6:	bf00      	nop
 800faf8:	20002564 	.word	0x20002564

0800fafc <_isatty_r>:
 800fafc:	b538      	push	{r3, r4, r5, lr}
 800fafe:	4d06      	ldr	r5, [pc, #24]	@ (800fb18 <_isatty_r+0x1c>)
 800fb00:	2300      	movs	r3, #0
 800fb02:	4604      	mov	r4, r0
 800fb04:	4608      	mov	r0, r1
 800fb06:	602b      	str	r3, [r5, #0]
 800fb08:	f7f4 fc98 	bl	800443c <_isatty>
 800fb0c:	1c43      	adds	r3, r0, #1
 800fb0e:	d102      	bne.n	800fb16 <_isatty_r+0x1a>
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	b103      	cbz	r3, 800fb16 <_isatty_r+0x1a>
 800fb14:	6023      	str	r3, [r4, #0]
 800fb16:	bd38      	pop	{r3, r4, r5, pc}
 800fb18:	20002564 	.word	0x20002564

0800fb1c <__assert_func>:
 800fb1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb1e:	4614      	mov	r4, r2
 800fb20:	461a      	mov	r2, r3
 800fb22:	4b09      	ldr	r3, [pc, #36]	@ (800fb48 <__assert_func+0x2c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4605      	mov	r5, r0
 800fb28:	68d8      	ldr	r0, [r3, #12]
 800fb2a:	b14c      	cbz	r4, 800fb40 <__assert_func+0x24>
 800fb2c:	4b07      	ldr	r3, [pc, #28]	@ (800fb4c <__assert_func+0x30>)
 800fb2e:	9100      	str	r1, [sp, #0]
 800fb30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb34:	4906      	ldr	r1, [pc, #24]	@ (800fb50 <__assert_func+0x34>)
 800fb36:	462b      	mov	r3, r5
 800fb38:	f000 f842 	bl	800fbc0 <fiprintf>
 800fb3c:	f000 f852 	bl	800fbe4 <abort>
 800fb40:	4b04      	ldr	r3, [pc, #16]	@ (800fb54 <__assert_func+0x38>)
 800fb42:	461c      	mov	r4, r3
 800fb44:	e7f3      	b.n	800fb2e <__assert_func+0x12>
 800fb46:	bf00      	nop
 800fb48:	20000130 	.word	0x20000130
 800fb4c:	08010a25 	.word	0x08010a25
 800fb50:	08010a32 	.word	0x08010a32
 800fb54:	08010a60 	.word	0x08010a60

0800fb58 <_calloc_r>:
 800fb58:	b570      	push	{r4, r5, r6, lr}
 800fb5a:	fba1 5402 	umull	r5, r4, r1, r2
 800fb5e:	b934      	cbnz	r4, 800fb6e <_calloc_r+0x16>
 800fb60:	4629      	mov	r1, r5
 800fb62:	f7fd fb85 	bl	800d270 <_malloc_r>
 800fb66:	4606      	mov	r6, r0
 800fb68:	b928      	cbnz	r0, 800fb76 <_calloc_r+0x1e>
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	bd70      	pop	{r4, r5, r6, pc}
 800fb6e:	220c      	movs	r2, #12
 800fb70:	6002      	str	r2, [r0, #0]
 800fb72:	2600      	movs	r6, #0
 800fb74:	e7f9      	b.n	800fb6a <_calloc_r+0x12>
 800fb76:	462a      	mov	r2, r5
 800fb78:	4621      	mov	r1, r4
 800fb7a:	f7fe fa6d 	bl	800e058 <memset>
 800fb7e:	e7f4      	b.n	800fb6a <_calloc_r+0x12>

0800fb80 <__ascii_mbtowc>:
 800fb80:	b082      	sub	sp, #8
 800fb82:	b901      	cbnz	r1, 800fb86 <__ascii_mbtowc+0x6>
 800fb84:	a901      	add	r1, sp, #4
 800fb86:	b142      	cbz	r2, 800fb9a <__ascii_mbtowc+0x1a>
 800fb88:	b14b      	cbz	r3, 800fb9e <__ascii_mbtowc+0x1e>
 800fb8a:	7813      	ldrb	r3, [r2, #0]
 800fb8c:	600b      	str	r3, [r1, #0]
 800fb8e:	7812      	ldrb	r2, [r2, #0]
 800fb90:	1e10      	subs	r0, r2, #0
 800fb92:	bf18      	it	ne
 800fb94:	2001      	movne	r0, #1
 800fb96:	b002      	add	sp, #8
 800fb98:	4770      	bx	lr
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	e7fb      	b.n	800fb96 <__ascii_mbtowc+0x16>
 800fb9e:	f06f 0001 	mvn.w	r0, #1
 800fba2:	e7f8      	b.n	800fb96 <__ascii_mbtowc+0x16>

0800fba4 <__ascii_wctomb>:
 800fba4:	4603      	mov	r3, r0
 800fba6:	4608      	mov	r0, r1
 800fba8:	b141      	cbz	r1, 800fbbc <__ascii_wctomb+0x18>
 800fbaa:	2aff      	cmp	r2, #255	@ 0xff
 800fbac:	d904      	bls.n	800fbb8 <__ascii_wctomb+0x14>
 800fbae:	228a      	movs	r2, #138	@ 0x8a
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb6:	4770      	bx	lr
 800fbb8:	700a      	strb	r2, [r1, #0]
 800fbba:	2001      	movs	r0, #1
 800fbbc:	4770      	bx	lr
	...

0800fbc0 <fiprintf>:
 800fbc0:	b40e      	push	{r1, r2, r3}
 800fbc2:	b503      	push	{r0, r1, lr}
 800fbc4:	4601      	mov	r1, r0
 800fbc6:	ab03      	add	r3, sp, #12
 800fbc8:	4805      	ldr	r0, [pc, #20]	@ (800fbe0 <fiprintf+0x20>)
 800fbca:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbce:	6800      	ldr	r0, [r0, #0]
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	f7ff fd27 	bl	800f624 <_vfiprintf_r>
 800fbd6:	b002      	add	sp, #8
 800fbd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbdc:	b003      	add	sp, #12
 800fbde:	4770      	bx	lr
 800fbe0:	20000130 	.word	0x20000130

0800fbe4 <abort>:
 800fbe4:	b508      	push	{r3, lr}
 800fbe6:	2006      	movs	r0, #6
 800fbe8:	f000 f82c 	bl	800fc44 <raise>
 800fbec:	2001      	movs	r0, #1
 800fbee:	f7f4 fbe1 	bl	80043b4 <_exit>

0800fbf2 <_raise_r>:
 800fbf2:	291f      	cmp	r1, #31
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	d904      	bls.n	800fc06 <_raise_r+0x14>
 800fbfc:	2316      	movs	r3, #22
 800fbfe:	6003      	str	r3, [r0, #0]
 800fc00:	f04f 30ff 	mov.w	r0, #4294967295
 800fc04:	bd38      	pop	{r3, r4, r5, pc}
 800fc06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc08:	b112      	cbz	r2, 800fc10 <_raise_r+0x1e>
 800fc0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc0e:	b94b      	cbnz	r3, 800fc24 <_raise_r+0x32>
 800fc10:	4628      	mov	r0, r5
 800fc12:	f000 f831 	bl	800fc78 <_getpid_r>
 800fc16:	4622      	mov	r2, r4
 800fc18:	4601      	mov	r1, r0
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc20:	f000 b818 	b.w	800fc54 <_kill_r>
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d00a      	beq.n	800fc3e <_raise_r+0x4c>
 800fc28:	1c59      	adds	r1, r3, #1
 800fc2a:	d103      	bne.n	800fc34 <_raise_r+0x42>
 800fc2c:	2316      	movs	r3, #22
 800fc2e:	6003      	str	r3, [r0, #0]
 800fc30:	2001      	movs	r0, #1
 800fc32:	e7e7      	b.n	800fc04 <_raise_r+0x12>
 800fc34:	2100      	movs	r1, #0
 800fc36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4798      	blx	r3
 800fc3e:	2000      	movs	r0, #0
 800fc40:	e7e0      	b.n	800fc04 <_raise_r+0x12>
	...

0800fc44 <raise>:
 800fc44:	4b02      	ldr	r3, [pc, #8]	@ (800fc50 <raise+0xc>)
 800fc46:	4601      	mov	r1, r0
 800fc48:	6818      	ldr	r0, [r3, #0]
 800fc4a:	f7ff bfd2 	b.w	800fbf2 <_raise_r>
 800fc4e:	bf00      	nop
 800fc50:	20000130 	.word	0x20000130

0800fc54 <_kill_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4d07      	ldr	r5, [pc, #28]	@ (800fc74 <_kill_r+0x20>)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	4611      	mov	r1, r2
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	f7f4 fb97 	bl	8004394 <_kill>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	d102      	bne.n	800fc70 <_kill_r+0x1c>
 800fc6a:	682b      	ldr	r3, [r5, #0]
 800fc6c:	b103      	cbz	r3, 800fc70 <_kill_r+0x1c>
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	bd38      	pop	{r3, r4, r5, pc}
 800fc72:	bf00      	nop
 800fc74:	20002564 	.word	0x20002564

0800fc78 <_getpid_r>:
 800fc78:	f7f4 bb84 	b.w	8004384 <_getpid>
 800fc7c:	0000      	movs	r0, r0
	...

0800fc80 <exp>:
 800fc80:	b538      	push	{r3, r4, r5, lr}
 800fc82:	ed2d 8b02 	vpush	{d8}
 800fc86:	ec55 4b10 	vmov	r4, r5, d0
 800fc8a:	f000 f895 	bl	800fdb8 <__ieee754_exp>
 800fc8e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc92:	eef0 8a60 	vmov.f32	s17, s1
 800fc96:	ec45 4b10 	vmov	d0, r4, r5
 800fc9a:	f000 f877 	bl	800fd8c <finite>
 800fc9e:	b168      	cbz	r0, 800fcbc <exp+0x3c>
 800fca0:	a317      	add	r3, pc, #92	@ (adr r3, 800fd00 <exp+0x80>)
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	4620      	mov	r0, r4
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f7f0 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 800fcae:	b160      	cbz	r0, 800fcca <exp+0x4a>
 800fcb0:	f7fe fa34 	bl	800e11c <__errno>
 800fcb4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800fcf0 <exp+0x70>
 800fcb8:	2322      	movs	r3, #34	@ 0x22
 800fcba:	6003      	str	r3, [r0, #0]
 800fcbc:	eeb0 0a48 	vmov.f32	s0, s16
 800fcc0:	eef0 0a68 	vmov.f32	s1, s17
 800fcc4:	ecbd 8b02 	vpop	{d8}
 800fcc8:	bd38      	pop	{r3, r4, r5, pc}
 800fcca:	a30f      	add	r3, pc, #60	@ (adr r3, 800fd08 <exp+0x88>)
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 ff02 	bl	8000adc <__aeabi_dcmplt>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d0ef      	beq.n	800fcbc <exp+0x3c>
 800fcdc:	f7fe fa1e 	bl	800e11c <__errno>
 800fce0:	2322      	movs	r3, #34	@ 0x22
 800fce2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800fcf8 <exp+0x78>
 800fce6:	6003      	str	r3, [r0, #0]
 800fce8:	e7e8      	b.n	800fcbc <exp+0x3c>
 800fcea:	bf00      	nop
 800fcec:	f3af 8000 	nop.w
 800fcf0:	00000000 	.word	0x00000000
 800fcf4:	7ff00000 	.word	0x7ff00000
	...
 800fd00:	fefa39ef 	.word	0xfefa39ef
 800fd04:	40862e42 	.word	0x40862e42
 800fd08:	d52d3051 	.word	0xd52d3051
 800fd0c:	c0874910 	.word	0xc0874910

0800fd10 <log>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	ed2d 8b02 	vpush	{d8}
 800fd16:	ec55 4b10 	vmov	r4, r5, d0
 800fd1a:	f000 f9c9 	bl	80100b0 <__ieee754_log>
 800fd1e:	4622      	mov	r2, r4
 800fd20:	462b      	mov	r3, r5
 800fd22:	4620      	mov	r0, r4
 800fd24:	4629      	mov	r1, r5
 800fd26:	eeb0 8a40 	vmov.f32	s16, s0
 800fd2a:	eef0 8a60 	vmov.f32	s17, s1
 800fd2e:	f7f0 fefd 	bl	8000b2c <__aeabi_dcmpun>
 800fd32:	b998      	cbnz	r0, 800fd5c <log+0x4c>
 800fd34:	2200      	movs	r2, #0
 800fd36:	2300      	movs	r3, #0
 800fd38:	4620      	mov	r0, r4
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	f7f0 feec 	bl	8000b18 <__aeabi_dcmpgt>
 800fd40:	b960      	cbnz	r0, 800fd5c <log+0x4c>
 800fd42:	2200      	movs	r2, #0
 800fd44:	2300      	movs	r3, #0
 800fd46:	4620      	mov	r0, r4
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7f0 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd4e:	b160      	cbz	r0, 800fd6a <log+0x5a>
 800fd50:	f7fe f9e4 	bl	800e11c <__errno>
 800fd54:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fd80 <log+0x70>
 800fd58:	2322      	movs	r3, #34	@ 0x22
 800fd5a:	6003      	str	r3, [r0, #0]
 800fd5c:	eeb0 0a48 	vmov.f32	s0, s16
 800fd60:	eef0 0a68 	vmov.f32	s1, s17
 800fd64:	ecbd 8b02 	vpop	{d8}
 800fd68:	bd38      	pop	{r3, r4, r5, pc}
 800fd6a:	f7fe f9d7 	bl	800e11c <__errno>
 800fd6e:	ecbd 8b02 	vpop	{d8}
 800fd72:	2321      	movs	r3, #33	@ 0x21
 800fd74:	6003      	str	r3, [r0, #0]
 800fd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd7a:	4803      	ldr	r0, [pc, #12]	@ (800fd88 <log+0x78>)
 800fd7c:	f000 b814 	b.w	800fda8 <nan>
 800fd80:	00000000 	.word	0x00000000
 800fd84:	fff00000 	.word	0xfff00000
 800fd88:	08010a60 	.word	0x08010a60

0800fd8c <finite>:
 800fd8c:	b082      	sub	sp, #8
 800fd8e:	ed8d 0b00 	vstr	d0, [sp]
 800fd92:	9801      	ldr	r0, [sp, #4]
 800fd94:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fd98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fd9c:	0fc0      	lsrs	r0, r0, #31
 800fd9e:	b002      	add	sp, #8
 800fda0:	4770      	bx	lr
 800fda2:	0000      	movs	r0, r0
 800fda4:	0000      	movs	r0, r0
	...

0800fda8 <nan>:
 800fda8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fdb0 <nan+0x8>
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	00000000 	.word	0x00000000
 800fdb4:	7ff80000 	.word	0x7ff80000

0800fdb8 <__ieee754_exp>:
 800fdb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdbc:	ec55 4b10 	vmov	r4, r5, d0
 800fdc0:	49b1      	ldr	r1, [pc, #708]	@ (8010088 <__ieee754_exp+0x2d0>)
 800fdc2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fdc6:	428a      	cmp	r2, r1
 800fdc8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800fdcc:	d936      	bls.n	800fe3c <__ieee754_exp+0x84>
 800fdce:	49af      	ldr	r1, [pc, #700]	@ (801008c <__ieee754_exp+0x2d4>)
 800fdd0:	428a      	cmp	r2, r1
 800fdd2:	d914      	bls.n	800fdfe <__ieee754_exp+0x46>
 800fdd4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fdd8:	4323      	orrs	r3, r4
 800fdda:	4622      	mov	r2, r4
 800fddc:	d007      	beq.n	800fdee <__ieee754_exp+0x36>
 800fdde:	462b      	mov	r3, r5
 800fde0:	4620      	mov	r0, r4
 800fde2:	4629      	mov	r1, r5
 800fde4:	f7f0 fa52 	bl	800028c <__adddf3>
 800fde8:	4604      	mov	r4, r0
 800fdea:	460d      	mov	r5, r1
 800fdec:	e002      	b.n	800fdf4 <__ieee754_exp+0x3c>
 800fdee:	2e00      	cmp	r6, #0
 800fdf0:	f040 8118 	bne.w	8010024 <__ieee754_exp+0x26c>
 800fdf4:	ec45 4b10 	vmov	d0, r4, r5
 800fdf8:	b004      	add	sp, #16
 800fdfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdfe:	a38c      	add	r3, pc, #560	@ (adr r3, 8010030 <__ieee754_exp+0x278>)
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	4620      	mov	r0, r4
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fe86 	bl	8000b18 <__aeabi_dcmpgt>
 800fe0c:	4607      	mov	r7, r0
 800fe0e:	b128      	cbz	r0, 800fe1c <__ieee754_exp+0x64>
 800fe10:	2000      	movs	r0, #0
 800fe12:	b004      	add	sp, #16
 800fe14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe18:	f000 bb36 	b.w	8010488 <__math_oflow>
 800fe1c:	a386      	add	r3, pc, #536	@ (adr r3, 8010038 <__ieee754_exp+0x280>)
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	4620      	mov	r0, r4
 800fe24:	4629      	mov	r1, r5
 800fe26:	f7f0 fe59 	bl	8000adc <__aeabi_dcmplt>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	f000 8087 	beq.w	800ff3e <__ieee754_exp+0x186>
 800fe30:	4638      	mov	r0, r7
 800fe32:	b004      	add	sp, #16
 800fe34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe38:	f000 bb1e 	b.w	8010478 <__math_uflow>
 800fe3c:	4b94      	ldr	r3, [pc, #592]	@ (8010090 <__ieee754_exp+0x2d8>)
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	f240 80a9 	bls.w	800ff96 <__ieee754_exp+0x1de>
 800fe44:	4b93      	ldr	r3, [pc, #588]	@ (8010094 <__ieee754_exp+0x2dc>)
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d879      	bhi.n	800ff3e <__ieee754_exp+0x186>
 800fe4a:	4b93      	ldr	r3, [pc, #588]	@ (8010098 <__ieee754_exp+0x2e0>)
 800fe4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	4620      	mov	r0, r4
 800fe56:	4629      	mov	r1, r5
 800fe58:	f7f0 fa16 	bl	8000288 <__aeabi_dsub>
 800fe5c:	4b8f      	ldr	r3, [pc, #572]	@ (801009c <__ieee754_exp+0x2e4>)
 800fe5e:	00f7      	lsls	r7, r6, #3
 800fe60:	443b      	add	r3, r7
 800fe62:	ed93 7b00 	vldr	d7, [r3]
 800fe66:	ed8d 7b00 	vstr	d7, [sp]
 800fe6a:	f086 0a01 	eor.w	sl, r6, #1
 800fe6e:	4680      	mov	r8, r0
 800fe70:	4689      	mov	r9, r1
 800fe72:	ebaa 0a06 	sub.w	sl, sl, r6
 800fe76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	f7f0 fa03 	bl	8000288 <__aeabi_dsub>
 800fe82:	4604      	mov	r4, r0
 800fe84:	460d      	mov	r5, r1
 800fe86:	4622      	mov	r2, r4
 800fe88:	462b      	mov	r3, r5
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fbb3 	bl	80005f8 <__aeabi_dmul>
 800fe92:	a36b      	add	r3, pc, #428	@ (adr r3, 8010040 <__ieee754_exp+0x288>)
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	4606      	mov	r6, r0
 800fe9a:	460f      	mov	r7, r1
 800fe9c:	f7f0 fbac 	bl	80005f8 <__aeabi_dmul>
 800fea0:	a369      	add	r3, pc, #420	@ (adr r3, 8010048 <__ieee754_exp+0x290>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 f9ef 	bl	8000288 <__aeabi_dsub>
 800feaa:	4632      	mov	r2, r6
 800feac:	463b      	mov	r3, r7
 800feae:	f7f0 fba3 	bl	80005f8 <__aeabi_dmul>
 800feb2:	a367      	add	r3, pc, #412	@ (adr r3, 8010050 <__ieee754_exp+0x298>)
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f7f0 f9e8 	bl	800028c <__adddf3>
 800febc:	4632      	mov	r2, r6
 800febe:	463b      	mov	r3, r7
 800fec0:	f7f0 fb9a 	bl	80005f8 <__aeabi_dmul>
 800fec4:	a364      	add	r3, pc, #400	@ (adr r3, 8010058 <__ieee754_exp+0x2a0>)
 800fec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feca:	f7f0 f9dd 	bl	8000288 <__aeabi_dsub>
 800fece:	4632      	mov	r2, r6
 800fed0:	463b      	mov	r3, r7
 800fed2:	f7f0 fb91 	bl	80005f8 <__aeabi_dmul>
 800fed6:	a362      	add	r3, pc, #392	@ (adr r3, 8010060 <__ieee754_exp+0x2a8>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	f7f0 f9d6 	bl	800028c <__adddf3>
 800fee0:	4632      	mov	r2, r6
 800fee2:	463b      	mov	r3, r7
 800fee4:	f7f0 fb88 	bl	80005f8 <__aeabi_dmul>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4620      	mov	r0, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	f7f0 f9ca 	bl	8000288 <__aeabi_dsub>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	4606      	mov	r6, r0
 800fefa:	460f      	mov	r7, r1
 800fefc:	4620      	mov	r0, r4
 800fefe:	4629      	mov	r1, r5
 800ff00:	f7f0 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ff04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff08:	f1ba 0f00 	cmp.w	sl, #0
 800ff0c:	d15c      	bne.n	800ffc8 <__ieee754_exp+0x210>
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff14:	4630      	mov	r0, r6
 800ff16:	4639      	mov	r1, r7
 800ff18:	f7f0 f9b6 	bl	8000288 <__aeabi_dsub>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff24:	f7f0 fc92 	bl	800084c <__aeabi_ddiv>
 800ff28:	4622      	mov	r2, r4
 800ff2a:	462b      	mov	r3, r5
 800ff2c:	f7f0 f9ac 	bl	8000288 <__aeabi_dsub>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	2000      	movs	r0, #0
 800ff36:	495a      	ldr	r1, [pc, #360]	@ (80100a0 <__ieee754_exp+0x2e8>)
 800ff38:	f7f0 f9a6 	bl	8000288 <__aeabi_dsub>
 800ff3c:	e754      	b.n	800fde8 <__ieee754_exp+0x30>
 800ff3e:	4b59      	ldr	r3, [pc, #356]	@ (80100a4 <__ieee754_exp+0x2ec>)
 800ff40:	4620      	mov	r0, r4
 800ff42:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ff46:	4629      	mov	r1, r5
 800ff48:	a347      	add	r3, pc, #284	@ (adr r3, 8010068 <__ieee754_exp+0x2b0>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 fb53 	bl	80005f8 <__aeabi_dmul>
 800ff52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff56:	f7f0 f999 	bl	800028c <__adddf3>
 800ff5a:	f7f0 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800ff5e:	4682      	mov	sl, r0
 800ff60:	f7f0 fae0 	bl	8000524 <__aeabi_i2d>
 800ff64:	a342      	add	r3, pc, #264	@ (adr r3, 8010070 <__ieee754_exp+0x2b8>)
 800ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	f7f0 fb43 	bl	80005f8 <__aeabi_dmul>
 800ff72:	4602      	mov	r2, r0
 800ff74:	460b      	mov	r3, r1
 800ff76:	4620      	mov	r0, r4
 800ff78:	4629      	mov	r1, r5
 800ff7a:	f7f0 f985 	bl	8000288 <__aeabi_dsub>
 800ff7e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010078 <__ieee754_exp+0x2c0>)
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	4680      	mov	r8, r0
 800ff86:	4689      	mov	r9, r1
 800ff88:	4630      	mov	r0, r6
 800ff8a:	4639      	mov	r1, r7
 800ff8c:	f7f0 fb34 	bl	80005f8 <__aeabi_dmul>
 800ff90:	e9cd 0100 	strd	r0, r1, [sp]
 800ff94:	e76f      	b.n	800fe76 <__ieee754_exp+0xbe>
 800ff96:	4b44      	ldr	r3, [pc, #272]	@ (80100a8 <__ieee754_exp+0x2f0>)
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d810      	bhi.n	800ffbe <__ieee754_exp+0x206>
 800ff9c:	a338      	add	r3, pc, #224	@ (adr r3, 8010080 <__ieee754_exp+0x2c8>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	f7f0 f971 	bl	800028c <__adddf3>
 800ffaa:	4b3d      	ldr	r3, [pc, #244]	@ (80100a0 <__ieee754_exp+0x2e8>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	f7f0 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 800ffb2:	b138      	cbz	r0, 800ffc4 <__ieee754_exp+0x20c>
 800ffb4:	4b3a      	ldr	r3, [pc, #232]	@ (80100a0 <__ieee754_exp+0x2e8>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	4620      	mov	r0, r4
 800ffba:	4629      	mov	r1, r5
 800ffbc:	e712      	b.n	800fde4 <__ieee754_exp+0x2c>
 800ffbe:	f04f 0a00 	mov.w	sl, #0
 800ffc2:	e760      	b.n	800fe86 <__ieee754_exp+0xce>
 800ffc4:	4682      	mov	sl, r0
 800ffc6:	e75e      	b.n	800fe86 <__ieee754_exp+0xce>
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	2000      	movs	r0, #0
 800ffce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ffd2:	f7f0 f959 	bl	8000288 <__aeabi_dsub>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	460b      	mov	r3, r1
 800ffda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffde:	f7f0 fc35 	bl	800084c <__aeabi_ddiv>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffea:	f7f0 f94d 	bl	8000288 <__aeabi_dsub>
 800ffee:	4642      	mov	r2, r8
 800fff0:	464b      	mov	r3, r9
 800fff2:	f7f0 f949 	bl	8000288 <__aeabi_dsub>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	2000      	movs	r0, #0
 800fffc:	4928      	ldr	r1, [pc, #160]	@ (80100a0 <__ieee754_exp+0x2e8>)
 800fffe:	f7f0 f943 	bl	8000288 <__aeabi_dsub>
 8010002:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8010006:	4592      	cmp	sl, r2
 8010008:	db02      	blt.n	8010010 <__ieee754_exp+0x258>
 801000a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801000e:	e6eb      	b.n	800fde8 <__ieee754_exp+0x30>
 8010010:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8010014:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010018:	2200      	movs	r2, #0
 801001a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 801001e:	f7f0 faeb 	bl	80005f8 <__aeabi_dmul>
 8010022:	e6e1      	b.n	800fde8 <__ieee754_exp+0x30>
 8010024:	2400      	movs	r4, #0
 8010026:	2500      	movs	r5, #0
 8010028:	e6e4      	b.n	800fdf4 <__ieee754_exp+0x3c>
 801002a:	bf00      	nop
 801002c:	f3af 8000 	nop.w
 8010030:	fefa39ef 	.word	0xfefa39ef
 8010034:	40862e42 	.word	0x40862e42
 8010038:	d52d3051 	.word	0xd52d3051
 801003c:	c0874910 	.word	0xc0874910
 8010040:	72bea4d0 	.word	0x72bea4d0
 8010044:	3e663769 	.word	0x3e663769
 8010048:	c5d26bf1 	.word	0xc5d26bf1
 801004c:	3ebbbd41 	.word	0x3ebbbd41
 8010050:	af25de2c 	.word	0xaf25de2c
 8010054:	3f11566a 	.word	0x3f11566a
 8010058:	16bebd93 	.word	0x16bebd93
 801005c:	3f66c16c 	.word	0x3f66c16c
 8010060:	5555553e 	.word	0x5555553e
 8010064:	3fc55555 	.word	0x3fc55555
 8010068:	652b82fe 	.word	0x652b82fe
 801006c:	3ff71547 	.word	0x3ff71547
 8010070:	fee00000 	.word	0xfee00000
 8010074:	3fe62e42 	.word	0x3fe62e42
 8010078:	35793c76 	.word	0x35793c76
 801007c:	3dea39ef 	.word	0x3dea39ef
 8010080:	8800759c 	.word	0x8800759c
 8010084:	7e37e43c 	.word	0x7e37e43c
 8010088:	40862e41 	.word	0x40862e41
 801008c:	7fefffff 	.word	0x7fefffff
 8010090:	3fd62e42 	.word	0x3fd62e42
 8010094:	3ff0a2b1 	.word	0x3ff0a2b1
 8010098:	08010c78 	.word	0x08010c78
 801009c:	08010c68 	.word	0x08010c68
 80100a0:	3ff00000 	.word	0x3ff00000
 80100a4:	08010c88 	.word	0x08010c88
 80100a8:	3defffff 	.word	0x3defffff
 80100ac:	00000000 	.word	0x00000000

080100b0 <__ieee754_log>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	ec51 0b10 	vmov	r0, r1, d0
 80100b8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80100bc:	b087      	sub	sp, #28
 80100be:	460d      	mov	r5, r1
 80100c0:	da26      	bge.n	8010110 <__ieee754_log+0x60>
 80100c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80100c6:	4303      	orrs	r3, r0
 80100c8:	4602      	mov	r2, r0
 80100ca:	d10a      	bne.n	80100e2 <__ieee754_log+0x32>
 80100cc:	49ce      	ldr	r1, [pc, #824]	@ (8010408 <__ieee754_log+0x358>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	2300      	movs	r3, #0
 80100d2:	2000      	movs	r0, #0
 80100d4:	f7f0 fbba 	bl	800084c <__aeabi_ddiv>
 80100d8:	ec41 0b10 	vmov	d0, r0, r1
 80100dc:	b007      	add	sp, #28
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e2:	2900      	cmp	r1, #0
 80100e4:	da05      	bge.n	80100f2 <__ieee754_log+0x42>
 80100e6:	460b      	mov	r3, r1
 80100e8:	f7f0 f8ce 	bl	8000288 <__aeabi_dsub>
 80100ec:	2200      	movs	r2, #0
 80100ee:	2300      	movs	r3, #0
 80100f0:	e7f0      	b.n	80100d4 <__ieee754_log+0x24>
 80100f2:	4bc6      	ldr	r3, [pc, #792]	@ (801040c <__ieee754_log+0x35c>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	f7f0 fa7f 	bl	80005f8 <__aeabi_dmul>
 80100fa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80100fe:	460d      	mov	r5, r1
 8010100:	4ac3      	ldr	r2, [pc, #780]	@ (8010410 <__ieee754_log+0x360>)
 8010102:	4295      	cmp	r5, r2
 8010104:	dd06      	ble.n	8010114 <__ieee754_log+0x64>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	f7f0 f8bf 	bl	800028c <__adddf3>
 801010e:	e7e3      	b.n	80100d8 <__ieee754_log+0x28>
 8010110:	2300      	movs	r3, #0
 8010112:	e7f5      	b.n	8010100 <__ieee754_log+0x50>
 8010114:	152c      	asrs	r4, r5, #20
 8010116:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801011a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801011e:	441c      	add	r4, r3
 8010120:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8010124:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8010128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801012c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010130:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8010134:	ea42 0105 	orr.w	r1, r2, r5
 8010138:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801013c:	2200      	movs	r2, #0
 801013e:	4bb5      	ldr	r3, [pc, #724]	@ (8010414 <__ieee754_log+0x364>)
 8010140:	f7f0 f8a2 	bl	8000288 <__aeabi_dsub>
 8010144:	1cab      	adds	r3, r5, #2
 8010146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801014a:	2b02      	cmp	r3, #2
 801014c:	4682      	mov	sl, r0
 801014e:	468b      	mov	fp, r1
 8010150:	f04f 0200 	mov.w	r2, #0
 8010154:	dc53      	bgt.n	80101fe <__ieee754_log+0x14e>
 8010156:	2300      	movs	r3, #0
 8010158:	f7f0 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801015c:	b1d0      	cbz	r0, 8010194 <__ieee754_log+0xe4>
 801015e:	2c00      	cmp	r4, #0
 8010160:	f000 8120 	beq.w	80103a4 <__ieee754_log+0x2f4>
 8010164:	4620      	mov	r0, r4
 8010166:	f7f0 f9dd 	bl	8000524 <__aeabi_i2d>
 801016a:	a391      	add	r3, pc, #580	@ (adr r3, 80103b0 <__ieee754_log+0x300>)
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	4606      	mov	r6, r0
 8010172:	460f      	mov	r7, r1
 8010174:	f7f0 fa40 	bl	80005f8 <__aeabi_dmul>
 8010178:	a38f      	add	r3, pc, #572	@ (adr r3, 80103b8 <__ieee754_log+0x308>)
 801017a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017e:	4604      	mov	r4, r0
 8010180:	460d      	mov	r5, r1
 8010182:	4630      	mov	r0, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f7f0 fa37 	bl	80005f8 <__aeabi_dmul>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4620      	mov	r0, r4
 8010190:	4629      	mov	r1, r5
 8010192:	e7ba      	b.n	801010a <__ieee754_log+0x5a>
 8010194:	a38a      	add	r3, pc, #552	@ (adr r3, 80103c0 <__ieee754_log+0x310>)
 8010196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019a:	4650      	mov	r0, sl
 801019c:	4659      	mov	r1, fp
 801019e:	f7f0 fa2b 	bl	80005f8 <__aeabi_dmul>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	2000      	movs	r0, #0
 80101a8:	499b      	ldr	r1, [pc, #620]	@ (8010418 <__ieee754_log+0x368>)
 80101aa:	f7f0 f86d 	bl	8000288 <__aeabi_dsub>
 80101ae:	4652      	mov	r2, sl
 80101b0:	4606      	mov	r6, r0
 80101b2:	460f      	mov	r7, r1
 80101b4:	465b      	mov	r3, fp
 80101b6:	4650      	mov	r0, sl
 80101b8:	4659      	mov	r1, fp
 80101ba:	f7f0 fa1d 	bl	80005f8 <__aeabi_dmul>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	4630      	mov	r0, r6
 80101c4:	4639      	mov	r1, r7
 80101c6:	f7f0 fa17 	bl	80005f8 <__aeabi_dmul>
 80101ca:	4606      	mov	r6, r0
 80101cc:	460f      	mov	r7, r1
 80101ce:	b914      	cbnz	r4, 80101d6 <__ieee754_log+0x126>
 80101d0:	4632      	mov	r2, r6
 80101d2:	463b      	mov	r3, r7
 80101d4:	e0a0      	b.n	8010318 <__ieee754_log+0x268>
 80101d6:	4620      	mov	r0, r4
 80101d8:	f7f0 f9a4 	bl	8000524 <__aeabi_i2d>
 80101dc:	a374      	add	r3, pc, #464	@ (adr r3, 80103b0 <__ieee754_log+0x300>)
 80101de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e2:	4680      	mov	r8, r0
 80101e4:	4689      	mov	r9, r1
 80101e6:	f7f0 fa07 	bl	80005f8 <__aeabi_dmul>
 80101ea:	a373      	add	r3, pc, #460	@ (adr r3, 80103b8 <__ieee754_log+0x308>)
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	4604      	mov	r4, r0
 80101f2:	460d      	mov	r5, r1
 80101f4:	4640      	mov	r0, r8
 80101f6:	4649      	mov	r1, r9
 80101f8:	f7f0 f9fe 	bl	80005f8 <__aeabi_dmul>
 80101fc:	e0a5      	b.n	801034a <__ieee754_log+0x29a>
 80101fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010202:	f7f0 f843 	bl	800028c <__adddf3>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	4650      	mov	r0, sl
 801020c:	4659      	mov	r1, fp
 801020e:	f7f0 fb1d 	bl	800084c <__aeabi_ddiv>
 8010212:	e9cd 0100 	strd	r0, r1, [sp]
 8010216:	4620      	mov	r0, r4
 8010218:	f7f0 f984 	bl	8000524 <__aeabi_i2d>
 801021c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010224:	4610      	mov	r0, r2
 8010226:	4619      	mov	r1, r3
 8010228:	f7f0 f9e6 	bl	80005f8 <__aeabi_dmul>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010234:	f7f0 f9e0 	bl	80005f8 <__aeabi_dmul>
 8010238:	a363      	add	r3, pc, #396	@ (adr r3, 80103c8 <__ieee754_log+0x318>)
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	4680      	mov	r8, r0
 8010240:	4689      	mov	r9, r1
 8010242:	f7f0 f9d9 	bl	80005f8 <__aeabi_dmul>
 8010246:	a362      	add	r3, pc, #392	@ (adr r3, 80103d0 <__ieee754_log+0x320>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7f0 f81e 	bl	800028c <__adddf3>
 8010250:	4642      	mov	r2, r8
 8010252:	464b      	mov	r3, r9
 8010254:	f7f0 f9d0 	bl	80005f8 <__aeabi_dmul>
 8010258:	a35f      	add	r3, pc, #380	@ (adr r3, 80103d8 <__ieee754_log+0x328>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f815 	bl	800028c <__adddf3>
 8010262:	4642      	mov	r2, r8
 8010264:	464b      	mov	r3, r9
 8010266:	f7f0 f9c7 	bl	80005f8 <__aeabi_dmul>
 801026a:	a35d      	add	r3, pc, #372	@ (adr r3, 80103e0 <__ieee754_log+0x330>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 f80c 	bl	800028c <__adddf3>
 8010274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010278:	f7f0 f9be 	bl	80005f8 <__aeabi_dmul>
 801027c:	a35a      	add	r3, pc, #360	@ (adr r3, 80103e8 <__ieee754_log+0x338>)
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010286:	4640      	mov	r0, r8
 8010288:	4649      	mov	r1, r9
 801028a:	f7f0 f9b5 	bl	80005f8 <__aeabi_dmul>
 801028e:	a358      	add	r3, pc, #352	@ (adr r3, 80103f0 <__ieee754_log+0x340>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	f7ef fffa 	bl	800028c <__adddf3>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	f7f0 f9ac 	bl	80005f8 <__aeabi_dmul>
 80102a0:	a355      	add	r3, pc, #340	@ (adr r3, 80103f8 <__ieee754_log+0x348>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7ef fff1 	bl	800028c <__adddf3>
 80102aa:	4642      	mov	r2, r8
 80102ac:	464b      	mov	r3, r9
 80102ae:	f7f0 f9a3 	bl	80005f8 <__aeabi_dmul>
 80102b2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80102b6:	4602      	mov	r2, r0
 80102b8:	460b      	mov	r3, r1
 80102ba:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80102be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102c2:	f7ef ffe3 	bl	800028c <__adddf3>
 80102c6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80102ca:	3551      	adds	r5, #81	@ 0x51
 80102cc:	4335      	orrs	r5, r6
 80102ce:	2d00      	cmp	r5, #0
 80102d0:	4680      	mov	r8, r0
 80102d2:	4689      	mov	r9, r1
 80102d4:	dd48      	ble.n	8010368 <__ieee754_log+0x2b8>
 80102d6:	4b50      	ldr	r3, [pc, #320]	@ (8010418 <__ieee754_log+0x368>)
 80102d8:	2200      	movs	r2, #0
 80102da:	4650      	mov	r0, sl
 80102dc:	4659      	mov	r1, fp
 80102de:	f7f0 f98b 	bl	80005f8 <__aeabi_dmul>
 80102e2:	4652      	mov	r2, sl
 80102e4:	465b      	mov	r3, fp
 80102e6:	f7f0 f987 	bl	80005f8 <__aeabi_dmul>
 80102ea:	4602      	mov	r2, r0
 80102ec:	460b      	mov	r3, r1
 80102ee:	4606      	mov	r6, r0
 80102f0:	460f      	mov	r7, r1
 80102f2:	4640      	mov	r0, r8
 80102f4:	4649      	mov	r1, r9
 80102f6:	f7ef ffc9 	bl	800028c <__adddf3>
 80102fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102fe:	f7f0 f97b 	bl	80005f8 <__aeabi_dmul>
 8010302:	4680      	mov	r8, r0
 8010304:	4689      	mov	r9, r1
 8010306:	b964      	cbnz	r4, 8010322 <__ieee754_log+0x272>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4630      	mov	r0, r6
 801030e:	4639      	mov	r1, r7
 8010310:	f7ef ffba 	bl	8000288 <__aeabi_dsub>
 8010314:	4602      	mov	r2, r0
 8010316:	460b      	mov	r3, r1
 8010318:	4650      	mov	r0, sl
 801031a:	4659      	mov	r1, fp
 801031c:	f7ef ffb4 	bl	8000288 <__aeabi_dsub>
 8010320:	e6da      	b.n	80100d8 <__ieee754_log+0x28>
 8010322:	a323      	add	r3, pc, #140	@ (adr r3, 80103b0 <__ieee754_log+0x300>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801032c:	f7f0 f964 	bl	80005f8 <__aeabi_dmul>
 8010330:	a321      	add	r3, pc, #132	@ (adr r3, 80103b8 <__ieee754_log+0x308>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	4604      	mov	r4, r0
 8010338:	460d      	mov	r5, r1
 801033a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801033e:	f7f0 f95b 	bl	80005f8 <__aeabi_dmul>
 8010342:	4642      	mov	r2, r8
 8010344:	464b      	mov	r3, r9
 8010346:	f7ef ffa1 	bl	800028c <__adddf3>
 801034a:	4602      	mov	r2, r0
 801034c:	460b      	mov	r3, r1
 801034e:	4630      	mov	r0, r6
 8010350:	4639      	mov	r1, r7
 8010352:	f7ef ff99 	bl	8000288 <__aeabi_dsub>
 8010356:	4652      	mov	r2, sl
 8010358:	465b      	mov	r3, fp
 801035a:	f7ef ff95 	bl	8000288 <__aeabi_dsub>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4620      	mov	r0, r4
 8010364:	4629      	mov	r1, r5
 8010366:	e7d9      	b.n	801031c <__ieee754_log+0x26c>
 8010368:	4602      	mov	r2, r0
 801036a:	460b      	mov	r3, r1
 801036c:	4650      	mov	r0, sl
 801036e:	4659      	mov	r1, fp
 8010370:	f7ef ff8a 	bl	8000288 <__aeabi_dsub>
 8010374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010378:	f7f0 f93e 	bl	80005f8 <__aeabi_dmul>
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
 8010380:	2c00      	cmp	r4, #0
 8010382:	f43f af25 	beq.w	80101d0 <__ieee754_log+0x120>
 8010386:	a30a      	add	r3, pc, #40	@ (adr r3, 80103b0 <__ieee754_log+0x300>)
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010390:	f7f0 f932 	bl	80005f8 <__aeabi_dmul>
 8010394:	a308      	add	r3, pc, #32	@ (adr r3, 80103b8 <__ieee754_log+0x308>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	4604      	mov	r4, r0
 801039c:	460d      	mov	r5, r1
 801039e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103a2:	e729      	b.n	80101f8 <__ieee754_log+0x148>
 80103a4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010400 <__ieee754_log+0x350>
 80103a8:	e698      	b.n	80100dc <__ieee754_log+0x2c>
 80103aa:	bf00      	nop
 80103ac:	f3af 8000 	nop.w
 80103b0:	fee00000 	.word	0xfee00000
 80103b4:	3fe62e42 	.word	0x3fe62e42
 80103b8:	35793c76 	.word	0x35793c76
 80103bc:	3dea39ef 	.word	0x3dea39ef
 80103c0:	55555555 	.word	0x55555555
 80103c4:	3fd55555 	.word	0x3fd55555
 80103c8:	df3e5244 	.word	0xdf3e5244
 80103cc:	3fc2f112 	.word	0x3fc2f112
 80103d0:	96cb03de 	.word	0x96cb03de
 80103d4:	3fc74664 	.word	0x3fc74664
 80103d8:	94229359 	.word	0x94229359
 80103dc:	3fd24924 	.word	0x3fd24924
 80103e0:	55555593 	.word	0x55555593
 80103e4:	3fe55555 	.word	0x3fe55555
 80103e8:	d078c69f 	.word	0xd078c69f
 80103ec:	3fc39a09 	.word	0x3fc39a09
 80103f0:	1d8e78af 	.word	0x1d8e78af
 80103f4:	3fcc71c5 	.word	0x3fcc71c5
 80103f8:	9997fa04 	.word	0x9997fa04
 80103fc:	3fd99999 	.word	0x3fd99999
	...
 8010408:	c3500000 	.word	0xc3500000
 801040c:	43500000 	.word	0x43500000
 8010410:	7fefffff 	.word	0x7fefffff
 8010414:	3ff00000 	.word	0x3ff00000
 8010418:	3fe00000 	.word	0x3fe00000

0801041c <with_errno>:
 801041c:	b510      	push	{r4, lr}
 801041e:	ed2d 8b02 	vpush	{d8}
 8010422:	eeb0 8a40 	vmov.f32	s16, s0
 8010426:	eef0 8a60 	vmov.f32	s17, s1
 801042a:	4604      	mov	r4, r0
 801042c:	f7fd fe76 	bl	800e11c <__errno>
 8010430:	eeb0 0a48 	vmov.f32	s0, s16
 8010434:	eef0 0a68 	vmov.f32	s1, s17
 8010438:	ecbd 8b02 	vpop	{d8}
 801043c:	6004      	str	r4, [r0, #0]
 801043e:	bd10      	pop	{r4, pc}

08010440 <xflow>:
 8010440:	4603      	mov	r3, r0
 8010442:	b507      	push	{r0, r1, r2, lr}
 8010444:	ec51 0b10 	vmov	r0, r1, d0
 8010448:	b183      	cbz	r3, 801046c <xflow+0x2c>
 801044a:	4602      	mov	r2, r0
 801044c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010450:	e9cd 2300 	strd	r2, r3, [sp]
 8010454:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010458:	f7f0 f8ce 	bl	80005f8 <__aeabi_dmul>
 801045c:	ec41 0b10 	vmov	d0, r0, r1
 8010460:	2022      	movs	r0, #34	@ 0x22
 8010462:	b003      	add	sp, #12
 8010464:	f85d eb04 	ldr.w	lr, [sp], #4
 8010468:	f7ff bfd8 	b.w	801041c <with_errno>
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	e7ee      	b.n	8010450 <xflow+0x10>
 8010472:	0000      	movs	r0, r0
 8010474:	0000      	movs	r0, r0
	...

08010478 <__math_uflow>:
 8010478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010480 <__math_uflow+0x8>
 801047c:	f7ff bfe0 	b.w	8010440 <xflow>
 8010480:	00000000 	.word	0x00000000
 8010484:	10000000 	.word	0x10000000

08010488 <__math_oflow>:
 8010488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010490 <__math_oflow+0x8>
 801048c:	f7ff bfd8 	b.w	8010440 <xflow>
 8010490:	00000000 	.word	0x00000000
 8010494:	70000000 	.word	0x70000000

08010498 <_init>:
 8010498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049a:	bf00      	nop
 801049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801049e:	bc08      	pop	{r3}
 80104a0:	469e      	mov	lr, r3
 80104a2:	4770      	bx	lr

080104a4 <_fini>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	bf00      	nop
 80104a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104aa:	bc08      	pop	{r3}
 80104ac:	469e      	mov	lr, r3
 80104ae:	4770      	bx	lr
