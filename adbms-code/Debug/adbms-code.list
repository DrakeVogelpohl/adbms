
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e098  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800e228  0800e228  0000f228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9e0  0800e9e0  000102ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e9e0  0800e9e0  0000f9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9e8  0800e9e8  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9e8  0800e9e8  0000f9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e9ec  0800e9ec  0000f9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  0800e9f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102ec  2**0
                  CONTENTS
 10 .bss          0000208c  200002ec  200002ec  000102ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002378  20002378  000102ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad74  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d0  00000000  00000000  0002b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  0002f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119a  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258eb  00000000  00000000  00031ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1b9  00000000  00000000  000573bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d679d  00000000  00000000  00074576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ad13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073a0  00000000  00000000  0014ad58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001520f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e210 	.word	0x0800e210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	0800e210 	.word	0x0800e210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8000f80:	2310      	movs	r3, #16
 8000f82:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8000f84:	2300      	movs	r3, #0
 8000f86:	737b      	strb	r3, [r7, #13]
 8000f88:	e019      	b.n	8000fbe <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	09db      	lsrs	r3, r3, #7
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	7b7a      	ldrb	r2, [r7, #13]
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	440a      	add	r2, r1
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	4053      	eors	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8000fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	490b      	ldr	r1, [pc, #44]	@ (8000fd8 <Pec15_Calc+0x64>)
 8000fac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4053      	eors	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	7b7a      	ldrb	r2, [r7, #13]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3e1      	bcc.n	8000f8a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b29b      	uxth	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	0800e424 	.word	0x0800e424

08000fdc <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 8000fea:	2310      	movs	r3, #16
 8000fec:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 8000fee:	238f      	movs	r3, #143	@ 0x8f
 8000ff0:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	757b      	strb	r3, [r7, #21]
 8000ff6:	e024      	b.n	8001042 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8000ff8:	7d7b      	ldrb	r3, [r7, #21]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	b29a      	uxth	r2, r3
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	4053      	eors	r3, r2
 8001008:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800100a:	2308      	movs	r3, #8
 800100c:	753b      	strb	r3, [r7, #20]
 800100e:	e012      	b.n	8001036 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800101a:	8afb      	ldrh	r3, [r7, #22]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001020:	8afa      	ldrh	r2, [r7, #22]
 8001022:	8a7b      	ldrh	r3, [r7, #18]
 8001024:	4053      	eors	r3, r2
 8001026:	82fb      	strh	r3, [r7, #22]
 8001028:	e002      	b.n	8001030 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 800102a:	8afb      	ldrh	r3, [r7, #22]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	3b01      	subs	r3, #1
 8001034:	753b      	strb	r3, [r7, #20]
 8001036:	7d3b      	ldrb	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 800103c:	7d7b      	ldrb	r3, [r7, #21]
 800103e:	3301      	adds	r3, #1
 8001040:	757b      	strb	r3, [r7, #21]
 8001042:	7d7b      	ldrb	r3, [r7, #21]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	dcd6      	bgt.n	8000ff8 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00e      	beq.n	800106e <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b21b      	sxth	r3, r3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	b21b      	sxth	r3, r3
 800105e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 8001062:	b21a      	sxth	r2, r3
 8001064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001068:	4053      	eors	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800106e:	2306      	movs	r3, #6
 8001070:	753b      	strb	r3, [r7, #20]
 8001072:	e012      	b.n	800109a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800107e:	8afb      	ldrh	r3, [r7, #22]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001084:	8afa      	ldrh	r2, [r7, #22]
 8001086:	8a7b      	ldrh	r3, [r7, #18]
 8001088:	4053      	eors	r3, r2
 800108a:	82fb      	strh	r3, [r7, #22]
 800108c:	e002      	b.n	8001094 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800108e:	8afb      	ldrh	r3, [r7, #22]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001094:	7d3b      	ldrb	r3, [r7, #20]
 8001096:	3b01      	subs	r3, #1
 8001098:	753b      	strb	r3, [r7, #20]
 800109a:	7d3b      	ldrb	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e9      	bne.n	8001074 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 80010a0:	8afb      	ldrh	r3, [r7, #22]
 80010a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a6:	b29b      	uxth	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	0000      	movs	r0, r0
	...

080010b8 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 80010c2:	230c      	movs	r3, #12
 80010c4:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	a314      	add	r3, pc, #80	@ (adr r3, 8001130 <Set_UnderOver_Voltage_Threshold+0x78>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	2202      	movs	r2, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 8001122:	89bb      	ldrh	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	30553261 	.word	0x30553261
 8001134:	3f63a92a 	.word	0x3f63a92a

08001138 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001146:	3310      	adds	r3, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001178 <ADBMS_getVoltage+0x40>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa50 	bl	80005f8 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd22 	bl	8000ba8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	ee07 3a90 	vmov	s15, r3
}
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	30553261 	.word	0x30553261
 800117c:	3f23a92a 	.word	0x3f23a92a

08001180 <ADBMS_Set_Config_A>:

void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e0f7      	b.n	8001380 <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	b259      	sxtb	r1, r3
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	430b      	orrs	r3, r1
 80011d0:	b259      	sxtb	r1, r3
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	461a      	mov	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1899      	adds	r1, r3, r2
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	3301      	adds	r3, #1
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	784a      	ldrb	r2, [r1, #1]
 8001208:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	01db      	lsls	r3, r3, #7
 8001226:	b259      	sxtb	r1, r3
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	b25b      	sxtb	r3, r3
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	b25b      	sxtb	r3, r3
 8001246:	430b      	orrs	r3, r1
 8001248:	b259      	sxtb	r1, r3
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b25b      	sxtb	r3, r3
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	b25b      	sxtb	r3, r3
 8001268:	430b      	orrs	r3, r1
 800126a:	b259      	sxtb	r1, r3
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	3302      	adds	r3, #2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	b2ca      	uxtb	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	885b      	ldrh	r3, [r3, #2]
 8001292:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001296:	b299      	uxth	r1, r3
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	3303      	adds	r3, #3
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	885b      	ldrh	r3, [r3, #2]
 80012be:	f3c3 1349 	ubfx	r3, r3, #5, #10
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	121b      	asrs	r3, r3, #8
 80012c6:	b2d9      	uxtb	r1, r3
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	3304      	adds	r3, #4
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	f001 0203 	and.w	r2, r1, #3
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	78db      	ldrb	r3, [r3, #3]
 80012f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	015b      	lsls	r3, r3, #5
 80012fc:	b259      	sxtb	r1, r3
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	b25b      	sxtb	r3, r3
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	b25b      	sxtb	r3, r3
 800131c:	430b      	orrs	r3, r1
 800131e:	b259      	sxtb	r1, r3
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	430b      	orrs	r3, r1
 8001340:	b259      	sxtb	r1, r3
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	b25b      	sxtb	r3, r3
 8001362:	430b      	orrs	r3, r1
 8001364:	b259      	sxtb	r1, r3
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3305      	adds	r3, #5
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3301      	adds	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b01      	cmp	r3, #1
 8001384:	f67f af04 	bls.w	8001190 <ADBMS_Set_Config_A+0x10>
    }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e09b      	b.n	80014de <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b4:	b299      	uxth	r1, r3
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	885b      	ldrh	r3, [r3, #2]
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	440b      	add	r3, r1
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	121b      	asrs	r3, r3, #8
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b259      	sxtb	r1, r3
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	3301      	adds	r3, #1
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	b29b      	uxth	r3, r3
 8001422:	1119      	asrs	r1, r3, #4
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	3302      	adds	r3, #2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	b25a      	sxtb	r2, r3
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	440b      	add	r3, r1
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	b25b      	sxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b25a      	sxtb	r2, r3
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	440b      	add	r3, r1
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b259      	sxtb	r1, r3
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	3303      	adds	r3, #3
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	88d9      	ldrh	r1, [r3, #6]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	3304      	adds	r3, #4
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b299      	uxth	r1, r3
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	4613      	mov	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	3305      	adds	r3, #5
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3301      	adds	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f67f af60 	bls.w	80013a6 <ADBMS_Set_Config_B+0x10>
    }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	7138      	strb	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	b21b      	sxth	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21b      	sxth	r3, r3
 8001506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150a:	b21b      	sxth	r3, r3
 800150c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001510:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	b21b      	sxth	r3, r3
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	b21b      	sxth	r3, r3
 800151a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 8001524:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001528:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 800152a:	793b      	ldrb	r3, [r7, #4]
 800152c:	b21b      	sxth	r3, r3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	b21b      	sxth	r3, r3
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 800153c:	793b      	ldrb	r3, [r7, #4]
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b21b      	sxth	r3, r3
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 800154e:	793b      	ldrb	r3, [r7, #4]
 8001550:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	801a      	strh	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <ADBMS_Set_ADAX>:
                        | (0x1 << 3)
                        | (adsv.ow && 0x3);
}

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	7138      	strb	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158e:	b21b      	sxth	r3, r3
 8001590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001594:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	b21b      	sxth	r3, r3
 800159a:	019b      	lsls	r3, r3, #6
 800159c:	b21b      	sxth	r3, r3
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 80015a8:	793a      	ldrb	r2, [r7, #4]
 80015aa:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	2a00      	cmp	r2, #0
 80015b2:	d001      	beq.n	80015b8 <ADBMS_Set_ADAX+0x40>
 80015b4:	2240      	movs	r2, #64	@ 0x40
 80015b6:	e000      	b.n	80015ba <ADBMS_Set_ADAX+0x42>
 80015b8:	2200      	movs	r2, #0
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80015c4:	793b      	ldrb	r3, [r7, #4]
 80015c6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	801a      	strh	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <ADBMS_WakeUP_ICs>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

void ADBMS_WakeUP_ICs()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e012      	b.n	8001622 <ADBMS_WakeUP_ICs+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <ADBMS_WakeUP_ICs+0x44>)
 8001602:	f002 fef3 	bl	80043ec <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f001 fda6 	bl	8003158 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <ADBMS_WakeUP_ICs+0x44>)
 8001612:	f002 feeb 	bl	80043ec <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f001 fd9e 	bl	8003158 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	3301      	adds	r3, #1
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d9e9      	bls.n	80015fc <ADBMS_WakeUP_ICs+0xc>
    }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000

08001638 <ADBMS_Write_CMD>:

void ADBMS_Write_CMD(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
    uint8_t spi_dataBuf[4];
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b29b      	uxth	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	723b      	strb	r3, [r7, #8]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	727b      	strb	r3, [r7, #9]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	2002      	movs	r0, #2
 800165c:	f7ff fc8a 	bl	8000f74 <Pec15_Calc>
 8001660:	4603      	mov	r3, r0
 8001662:	81fb      	strh	r3, [r7, #14]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	b29b      	uxth	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	72bb      	strb	r3, [r7, #10]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	72fb      	strb	r3, [r7, #11]

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2110      	movs	r1, #16
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <ADBMS_Write_CMD+0x68>)
 800167a:	f002 feb7 	bl	80043ec <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800167e:	f107 0108 	add.w	r1, r7, #8
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	2204      	movs	r2, #4
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f004 fe14 	bl	80062b6 <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2110      	movs	r1, #16
 8001692:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <ADBMS_Write_CMD+0x68>)
 8001694:	f002 feaa 	bl	80043ec <HAL_GPIO_WritePin>
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020000 	.word	0x40020000

080016a4 <ADBMS_Write_Data>:

void ADBMS_Write_Data(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_dataBuf)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	817b      	strh	r3, [r7, #10]
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 80016b4:	897b      	ldrh	r3, [r7, #10]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	897a      	ldrh	r2, [r7, #10]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7ff fc51 	bl	8000f74 <Pec15_Calc>
 80016d2:	4603      	mov	r3, r0
 80016d4:	82bb      	strh	r3, [r7, #20]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 80016d6:	8abb      	ldrh	r3, [r7, #20]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	b29a      	uxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3302      	adds	r3, #2
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3303      	adds	r3, #3
 80016e8:	8aba      	ldrh	r2, [r7, #20]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80016ee:	2302      	movs	r3, #2
 80016f0:	75fb      	strb	r3, [r7, #23]
 80016f2:	e04d      	b.n	8001790 <ADBMS_Write_Data+0xec>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	75bb      	strb	r3, [r7, #22]
 80016f8:	e01b      	b.n	8001732 <ADBMS_Write_Data+0x8e>
            spi_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	f1c3 0202 	rsb	r2, r3, #2
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	461a      	mov	r2, r3
 800170a:	7dbb      	ldrb	r3, [r7, #22]
 800170c:	4413      	add	r3, r2
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	441a      	add	r2, r3
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	1d19      	adds	r1, r3, #4
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	f1c3 0302 	rsb	r3, r3, #2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	4619      	mov	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	440b      	add	r3, r1
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	3301      	adds	r3, #1
 8001730:	75bb      	strb	r3, [r7, #22]
 8001732:	7dbb      	ldrb	r3, [r7, #22]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d9e0      	bls.n	80016fa <ADBMS_Write_Data+0x56>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	f1c3 0202 	rsb	r2, r3, #2
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	2106      	movs	r1, #6
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fc43 	bl	8000fdc <Pec10_Calc>
 8001756:	4603      	mov	r3, r0
 8001758:	827b      	strh	r3, [r7, #18]
        spi_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 800175a:	8a7b      	ldrh	r3, [r7, #18]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29a      	uxth	r2, r3
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	f1c3 0302 	rsb	r3, r3, #2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	330a      	adds	r3, #10
 800176a:	4619      	mov	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
        spi_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	f1c3 0302 	rsb	r3, r3, #2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	330b      	adds	r3, #11
 800177e:	461a      	mov	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	8a7a      	ldrh	r2, [r7, #18]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	3b01      	subs	r3, #1
 800178e:	75fb      	strb	r3, [r7, #23]
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ae      	bne.n	80016f4 <ADBMS_Write_Data+0x50>
    }

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2110      	movs	r1, #16
 800179a:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <ADBMS_Write_Data+0x11c>)
 800179c:	f002 fe26 	bl	80043ec <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	2214      	movs	r2, #20
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f004 fd84 	bl	80062b6 <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2110      	movs	r1, #16
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <ADBMS_Write_Data+0x11c>)
 80017b4:	f002 fe1a 	bl	80043ec <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020000 	.word	0x40020000

080017c4 <ADBMS_Read_Data>:

bool ADBMS_Read_Data(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_dataBuf)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	@ 0x30
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[4] = {0};
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	753b      	strb	r3, [r7, #20]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	757b      	strb	r3, [r7, #21]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7ff fbc0 	bl	8000f74 <Pec15_Calc>
 80017f4:	4603      	mov	r3, r0
 80017f6:	847b      	strh	r3, [r7, #34]	@ 0x22
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 80017f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	75bb      	strb	r3, [r7, #22]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001802:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001804:	b2db      	uxtb	r3, r3
 8001806:	75fb      	strb	r3, [r7, #23]

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2110      	movs	r1, #16
 800180c:	4843      	ldr	r0, [pc, #268]	@ (800191c <ADBMS_Read_Data+0x158>)
 800180e:	f002 fded 	bl	80043ec <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 8001812:	f107 0114 	add.w	r1, r7, #20
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2314      	movs	r3, #20
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f004 fe8c 	bl	800653e <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2110      	movs	r1, #16
 800182a:	483c      	ldr	r0, [pc, #240]	@ (800191c <ADBMS_Read_Data+0x158>)
 800182c:	f002 fdde 	bl	80043ec <HAL_GPIO_WritePin>

    // Discard data received during transmit phase
    uint8_t *rx_dataBuf = spi_dataBuf + CMD_LEN + PEC_LEN;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3304      	adds	r3, #4
 8001834:	61fb      	str	r3, [r7, #28]

    // Move the incoming data from the spi data buffer to the correspoding data buffer array in memory
    bool pec_error = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001842:	e060      	b.n	8001906 <ADBMS_Read_Data+0x142>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800184a:	e01c      	b.n	8001886 <ADBMS_Read_Data+0xc2>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 800184c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	1899      	adds	r1, r3, r2
 800185e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	461a      	mov	r2, r3
 800186c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001870:	4413      	add	r3, r2
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	780a      	ldrb	r2, [r1, #0]
 800187a:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800187c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001880:	3301      	adds	r3, #1
 8001882:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001886:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800188a:	2b05      	cmp	r3, #5
 800188c:	d9de      	bls.n	800184c <ADBMS_Read_Data+0x88>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 800188e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	3306      	adds	r3, #6
 8001896:	461a      	mov	r2, r3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	3307      	adds	r3, #7
 80018b2:	4619      	mov	r1, r3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	440b      	add	r3, r1
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b21b      	sxth	r3, r3
 80018c0:	837b      	strh	r3, [r7, #26]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 80018c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	461a      	mov	r2, r3
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	2106      	movs	r1, #6
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fb82 	bl	8000fdc <Pec10_Calc>
 80018d8:	4603      	mov	r3, r0
 80018da:	833b      	strh	r3, [r7, #24]
        pec_error |= (rx_pec != calc_pec);
 80018dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018e0:	8b79      	ldrh	r1, [r7, #26]
 80018e2:	8b3a      	ldrh	r2, [r7, #24]
 80018e4:	4291      	cmp	r1, r2
 80018e6:	bf14      	ite	ne
 80018e8:	2201      	movne	r2, #1
 80018ea:	2200      	moveq	r2, #0
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	4313      	orrs	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001900:	3301      	adds	r3, #1
 8001902:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800190a:	2b01      	cmp	r3, #1
 800190c:	d99a      	bls.n	8001844 <ADBMS_Read_Data+0x80>
    }

    return pec_error;
 800190e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001912:	4618      	mov	r0, r3
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40020000 	.word	0x40020000

08001920 <ADBMS_Initialize>:
#include "adbms_interface.h"

void ADBMS_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    adbms->ICs.hspi = hspi;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	601a      	str	r2, [r3, #0]
    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e042      	b.n	80019bc <ADBMS_Initialize+0x9c>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	440b      	add	r3, r1
 8001944:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8001948:	7813      	ldrb	r3, [r2, #0]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	7013      	strb	r3, [r2, #0]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	440b      	add	r3, r1
 800195e:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8001962:	8853      	ldrh	r3, [r2, #2]
 8001964:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001968:	f361 134e 	bfi	r3, r1, #5, #10
 800196c:	8053      	strh	r3, [r2, #2]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 800196e:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001972:	f7ff fba1 	bl	80010b8 <Set_UnderOver_Voltage_Threshold>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001980:	b291      	uxth	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	3320      	adds	r3, #32
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	889a      	ldrh	r2, [r3, #4]
 800198c:	f361 020b 	bfi	r2, r1, #0, #12
 8001990:	809a      	strh	r2, [r3, #4]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001992:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001a84 <ADBMS_Initialize+0x164>
 8001996:	f7ff fb8f 	bl	80010b8 <Set_UnderOver_Voltage_Threshold>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80019a4:	b291      	uxth	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	3320      	adds	r3, #32
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	88da      	ldrh	r2, [r3, #6]
 80019b0:	f361 020b 	bfi	r2, r1, #0, #12
 80019b4:	80da      	strh	r2, [r3, #6]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d9b9      	bls.n	8001936 <ADBMS_Initialize+0x16>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	f882 3114 	strb.w	r3, [r2, #276]	@ 0x114

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3318      	adds	r3, #24
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f7ff fbcf 	bl	8001180 <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f503 7282 	add.w	r2, r3, #260	@ 0x104
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3324      	adds	r3, #36	@ 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f7ff fcd1 	bl	8001396 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4611      	mov	r1, r2
 80019fe:	f893 0114 	ldrb.w	r0, [r3, #276]	@ 0x114
 8001a02:	f7ff fd77 	bl	80014f4 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	f893 0116 	ldrb.w	r0, [r3, #278]	@ 0x116
 8001a14:	f7ff fdb0 	bl	8001578 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs();
 8001a18:	f7ff fdea 	bl	80015f0 <ADBMS_WakeUP_ICs>
    ADBMS_WakeUP_ICs();
 8001a1c:	f7ff fde8 	bl	80015f0 <ADBMS_WakeUP_ICs>
    ADBMS_Write_Data(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_dataBuf);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <ADBMS_Initialize+0x168>)
 8001a26:	8819      	ldrh	r1, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f103 0218 	add.w	r2, r3, #24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	f7ff fe37 	bl	80016a4 <ADBMS_Write_Data>
    ADBMS_WakeUP_ICs();
 8001a36:	f7ff fddb 	bl	80015f0 <ADBMS_WakeUP_ICs>
    ADBMS_Write_Data(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_dataBuf);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <ADBMS_Initialize+0x16c>)
 8001a40:	8819      	ldrh	r1, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	f7ff fe2a 	bl	80016a4 <ADBMS_Write_Data>

    // Turn on sensing
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.adcv);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7ff fdec 	bl	8001638 <ADBMS_Write_CMD>
    HAL_Delay(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f001 fb79 	bl	8003158 <HAL_Delay>
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.adax);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f7ff fde1 	bl	8001638 <ADBMS_Write_CMD>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001a76:	2008      	movs	r0, #8
 8001a78:	f001 fb6e 	bl	8003158 <HAL_Delay>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40866666 	.word	0x40866666
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000002 	.word	0x20000002

08001a90 <ADBMS_UpdateVoltages>:

void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    bool pec = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs();
 8001a9c:	f7ff fda8 	bl	80015f0 <ADBMS_WakeUP_ICs>

    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVA, (adbms->ICs.cell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <ADBMS_UpdateVoltages+0x100>)
 8001aa6:	8819      	ldrh	r1, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	f7ff fe87 	bl	80017c4 <ADBMS_Read_Data>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVB, (adbms->ICs.cell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <ADBMS_UpdateVoltages+0x104>)
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3338      	adds	r3, #56	@ 0x38
 8001ad6:	f103 020c 	add.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	f7ff fe71 	bl	80017c4 <ADBMS_Read_Data>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVC, (adbms->ICs.cell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <ADBMS_UpdateVoltages+0x108>)
 8001afc:	8819      	ldrh	r1, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3338      	adds	r3, #56	@ 0x38
 8001b02:	f103 0218 	add.w	r2, r3, #24
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	f7ff fe5b 	bl	80017c4 <ADBMS_Read_Data>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVD, (adbms->ICs.cell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <ADBMS_UpdateVoltages+0x10c>)
 8001b28:	8819      	ldrh	r1, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3338      	adds	r3, #56	@ 0x38
 8001b2e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	f7ff fe45 	bl	80017c4 <ADBMS_Read_Data>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <ADBMS_UpdateVoltages+0x110>)
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3338      	adds	r3, #56	@ 0x38
 8001b5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	f7ff fe2f 	bl	80017c4 <ADBMS_Read_Data>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
    adbms->voltage_pec_failure = pec;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f888 	bl	8001c98 <ADBMS_CalculateValues_Voltages>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000004 	.word	0x20000004
 8001b94:	20000006 	.word	0x20000006
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	2000000a 	.word	0x2000000a
 8001ba0:	2000000c 	.word	0x2000000c

08001ba4 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    bool pec = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs();
 8001bb0:	f7ff fd1e 	bl	80015f0 <ADBMS_WakeUP_ICs>
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <ADBMS_UpdateTemps+0xe4>)
 8001bba:	8819      	ldrh	r1, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	f7ff fdfd 	bl	80017c4 <ADBMS_Read_Data>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <ADBMS_UpdateTemps+0xe8>)
 8001be4:	8819      	ldrh	r1, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	33c8      	adds	r3, #200	@ 0xc8
 8001bea:	f103 020c 	add.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	f7ff fde7 	bl	80017c4 <ADBMS_Read_Data>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <ADBMS_UpdateTemps+0xec>)
 8001c10:	8819      	ldrh	r1, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	33c8      	adds	r3, #200	@ 0xc8
 8001c16:	f103 0218 	add.w	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	f7ff fdd1 	bl	80017c4 <ADBMS_Read_Data>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <ADBMS_UpdateTemps+0xf0>)
 8001c3c:	8819      	ldrh	r1, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	33c8      	adds	r3, #200	@ 0xc8
 8001c42:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	f7ff fdbb 	bl	80017c4 <ADBMS_Read_Data>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
    adbms->temp_pec_failure = pec;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.adax);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff fcdf 	bl	8001638 <ADBMS_Write_CMD>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f90c 	bl	8001e98 <ADBMS_CalculateValues_Temps>
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000000e 	.word	0x2000000e
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	20000012 	.word	0x20000012
 8001c94:	20000014 	.word	0x20000014

08001c98 <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <ADBMS_CalculateValues_Voltages+0x42>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <ADBMS_CalculateValues_Voltages+0x42>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d022      	beq.n	8001d2a <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	ed93 7a7d 	vldr	s14, [r3, #500]	@ 0x1f4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	edd3 7a7d 	vldr	s15, [r3, #500]	@ 0x1f4
 8001d08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd04      	ble.n	8001d20 <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001d1e:	e0b5      	b.n	8001e8c <ADBMS_CalculateValues_Voltages+0x1f4>
            adbms->pec_fault_ = 0;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
        return;
 8001d28:	e0b0      	b.n	8001e8c <ADBMS_CalculateValues_Voltages+0x1f4>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    adbms->max_v = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
    adbms->min_v = FLT_MAX;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a54      	ldr	r2, [pc, #336]	@ (8001e94 <ADBMS_CalculateValues_Voltages+0x1fc>)
 8001d42:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
 8001d4a:	e091      	b.n	8001e70 <ADBMS_CalculateValues_Voltages+0x1d8>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	753b      	strb	r3, [r7, #20]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	75bb      	strb	r3, [r7, #22]
 8001d54:	e084      	b.n	8001e60 <ADBMS_CalculateValues_Voltages+0x1c8>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001d56:	2300      	movs	r3, #0
 8001d58:	757b      	strb	r3, [r7, #21]
 8001d5a:	e079      	b.n	8001e50 <ADBMS_CalculateValues_Voltages+0x1b8>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001d5c:	7dba      	ldrb	r2, [r7, #22]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	7d7a      	ldrb	r2, [r7, #21]
 8001d66:	0852      	lsrs	r2, r2, #1
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2b0d      	cmp	r3, #13
 8001d6e:	dc73      	bgt.n	8001e58 <ADBMS_CalculateValues_Voltages+0x1c0>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001d70:	7dba      	ldrb	r2, [r7, #22]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	7dfa      	ldrb	r2, [r7, #23]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	18ca      	adds	r2, r1, r3
 8001d88:	7d7b      	ldrb	r3, [r7, #21]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b219      	sxth	r1, r3
 8001d9c:	7dba      	ldrb	r2, [r7, #22]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4618      	mov	r0, r3
 8001da8:	7dfa      	ldrb	r2, [r7, #23]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	18c2      	adds	r2, r0, r3
 8001db4:	7d7b      	ldrb	r3, [r7, #21]
 8001db6:	4413      	add	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 8001dc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f9b4 	bl	8001138 <ADBMS_getVoltage>
 8001dd0:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8001dd4:	7dfa      	ldrb	r2, [r7, #23]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4619      	mov	r1, r3
 8001de0:	7dba      	ldrb	r2, [r7, #22]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	7d7a      	ldrb	r2, [r7, #21]
 8001dec:	0852      	lsrs	r2, r2, #1
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	4413      	add	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	3346      	adds	r3, #70	@ 0x46
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 8001e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8
                if (curr_voltage > adbms->max_v){
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8001e18:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	dd03      	ble.n	8001e2e <ADBMS_CalculateValues_Voltages+0x196>
                    adbms->max_v = curr_voltage;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
                }
                if (curr_voltage < adbms->min_v){
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	edd3 7a74 	vldr	s15, [r3, #464]	@ 0x1d0
 8001e34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d503      	bpl.n	8001e4a <ADBMS_CalculateValues_Voltages+0x1b2>
                    adbms->min_v = curr_voltage;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001e4a:	7d7b      	ldrb	r3, [r7, #21]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	757b      	strb	r3, [r7, #21]
 8001e50:	7d7b      	ldrb	r3, [r7, #21]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d982      	bls.n	8001d5c <ADBMS_CalculateValues_Voltages+0xc4>
 8001e56:	e000      	b.n	8001e5a <ADBMS_CalculateValues_Voltages+0x1c2>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001e58:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001e5a:	7dbb      	ldrb	r3, [r7, #22]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	75bb      	strb	r3, [r7, #22]
 8001e60:	7dba      	ldrb	r2, [r7, #22]
 8001e62:	7d3b      	ldrb	r3, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f4ff af76 	bcc.w	8001d56 <ADBMS_CalculateValues_Voltages+0xbe>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f67f af6a 	bls.w	8001d4c <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ed93 7a72 	vldr	s14, [r3, #456]	@ 0x1c8
 8001e7e:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8001e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edc3 7a75 	vstr	s15, [r3, #468]	@ 0x1d4
}
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	7f7fffff 	.word	0x7f7fffff

08001e98 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8001ea6:	f083 0301 	eor.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d014      	beq.n	8001eda <ADBMS_CalculateValues_Temps+0x42>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <ADBMS_CalculateValues_Temps+0x42>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d022      	beq.n	8001f2a <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	ed93 7a7d 	vldr	s14, [r3, #500]	@ 0x1f4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 31ec 	ldrb.w	r3, [r3, #492]	@ 0x1ec
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	edd3 7a7d 	vldr	s15, [r3, #500]	@ 0x1f4
 8001f08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	dd04      	ble.n	8001f20 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001f1e:	e0e7      	b.n	80020f0 <ADBMS_CalculateValues_Temps+0x258>
            adbms->pec_fault_ = 0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
        return;
 8001f28:	e0e2      	b.n	80020f0 <ADBMS_CalculateValues_Temps+0x258>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
    adbms->min_temp = FLT_MAX;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a70      	ldr	r2, [pc, #448]	@ (8002100 <ADBMS_CalculateValues_Temps+0x268>)
 8001f3e:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
    bool openwire_temp_fault = false;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e0b1      	b.n	80020b2 <ADBMS_CalculateValues_Temps+0x21a>
    {
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	76fb      	strb	r3, [r7, #27]
 8001f52:	e0a7      	b.n	80020a4 <ADBMS_CalculateValues_Temps+0x20c>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001f54:	2300      	movs	r3, #0
 8001f56:	76bb      	strb	r3, [r7, #26]
 8001f58:	e09d      	b.n	8002096 <ADBMS_CalculateValues_Temps+0x1fe>
            {
                // skip because only want temps 2-10
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8001f5a:	7efb      	ldrb	r3, [r7, #27]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <ADBMS_CalculateValues_Temps+0xd0>
 8001f60:	7ebb      	ldrb	r3, [r7, #26]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	f240 8093 	bls.w	800208e <ADBMS_CalculateValues_Temps+0x1f6>
 8001f68:	7efa      	ldrb	r2, [r7, #27]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	7eba      	ldrb	r2, [r7, #26]
 8001f72:	0852      	lsrs	r2, r2, #1
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	4413      	add	r3, r2
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	f300 8088 	bgt.w	800208e <ADBMS_CalculateValues_Temps+0x1f6>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001f7e:	7efa      	ldrb	r2, [r7, #27]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	18ca      	adds	r2, r1, r3
 8001f96:	7ebb      	ldrb	r3, [r7, #26]
 8001f98:	4413      	add	r3, r2
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b219      	sxth	r1, r3
 8001faa:	7efa      	ldrb	r2, [r7, #27]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	18c2      	adds	r2, r0, r3
 8001fc2:	7ebb      	ldrb	r3, [r7, #26]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	833b      	strh	r3, [r7, #24]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 8001fd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f8ad 	bl	8001138 <ADBMS_getVoltage>
 8001fde:	ed87 0a05 	vstr	s0, [r7, #20]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 8001fe2:	4b48      	ldr	r3, [pc, #288]	@ (8002104 <ADBMS_CalculateValues_Temps+0x26c>)
 8001fe4:	613b      	str	r3, [r7, #16]
                if (vref - raw_temp_voltage < 1e-1)
 8001fe6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff2:	ee17 0a90 	vmov	r0, s15
 8001ff6:	f7fe faa7 	bl	8000548 <__aeabi_f2d>
 8001ffa:	a33f      	add	r3, pc, #252	@ (adr r3, 80020f8 <ADBMS_CalculateValues_Temps+0x260>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fd6c 	bl	8000adc <__aeabi_dcmplt>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <ADBMS_CalculateValues_Temps+0x178>
                    openwire_temp_fault = true;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 8002010:	edd7 0a04 	vldr	s1, [r7, #16]
 8002014:	ed97 0a05 	vldr	s0, [r7, #20]
 8002018:	f000 ff7a 	bl	8002f10 <getTemp>
 800201c:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->temperatures[cic*NUM_TEMPS_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	00d9      	lsls	r1, r3, #3
 8002024:	7efa      	ldrb	r2, [r7, #27]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	440b      	add	r3, r1
 800202e:	7eba      	ldrb	r2, [r7, #26]
 8002030:	0852      	lsrs	r2, r2, #1
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	4413      	add	r3, r2
 8002036:	3b02      	subs	r3, #2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	3362      	adds	r3, #98	@ 0x62
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 8002044:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002048:	edd7 7a03 	vldr	s15, [r7, #12]
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a76 	vldr	s15, [r3, #472]	@ 0x1d8
 800205a:	ed97 7a03 	vldr	s14, [r7, #12]
 800205e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd03      	ble.n	8002070 <ADBMS_CalculateValues_Temps+0x1d8>
                    adbms->max_temp = curr_temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
                if (curr_temp < adbms->min_temp)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	edd3 7a77 	vldr	s15, [r3, #476]	@ 0x1dc
 8002076:	ed97 7a03 	vldr	s14, [r7, #12]
 800207a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	d505      	bpl.n	8002090 <ADBMS_CalculateValues_Temps+0x1f8>
                    adbms->min_temp = curr_temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
 800208c:	e000      	b.n	8002090 <ADBMS_CalculateValues_Temps+0x1f8>
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 800208e:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002090:	7ebb      	ldrb	r3, [r7, #26]
 8002092:	3302      	adds	r3, #2
 8002094:	76bb      	strb	r3, [r7, #26]
 8002096:	7ebb      	ldrb	r3, [r7, #26]
 8002098:	2b05      	cmp	r3, #5
 800209a:	f67f af5e 	bls.w	8001f5a <ADBMS_CalculateValues_Temps+0xc2>
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 800209e:	7efb      	ldrb	r3, [r7, #27]
 80020a0:	3301      	adds	r3, #1
 80020a2:	76fb      	strb	r3, [r7, #27]
 80020a4:	7efb      	ldrb	r3, [r7, #27]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	f67f af54 	bls.w	8001f54 <ADBMS_CalculateValues_Temps+0xbc>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	3301      	adds	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f77f af4a 	ble.w	8001f4e <ADBMS_CalculateValues_Temps+0xb6>
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <ADBMS_CalculateValues_Temps+0x234>
 80020c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <ADBMS_CalculateValues_Temps+0x238>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <ADBMS_CalculateValues_Temps+0x23a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 80020de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	edc3 7a78 	vstr	s15, [r3, #480]	@ 0x1e0
    
}
 80020f0:	3728      	adds	r7, #40	@ 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	9999999a 	.word	0x9999999a
 80020fc:	3fb99999 	.word	0x3fb99999
 8002100:	7f7fffff 	.word	0x7f7fffff
 8002104:	40400000 	.word	0x40400000

08002108 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <UpdateADInternalFault+0x2e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa11 	bl	8000548 <__aeabi_f2d>
 8002126:	a330      	add	r3, pc, #192	@ (adr r3, 80021e8 <UpdateADInternalFault+0xe0>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <UpdateADInternalFault+0x32>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <UpdateADInternalFault+0x34>
 800213a:	2300      	movs	r3, #0
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <UpdateADInternalFault+0x5e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	edd3 7a74 	vldr	s15, [r3, #464]	@ 0x1d0
 8002158:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d501      	bpl.n	800216a <UpdateADInternalFault+0x62>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <UpdateADInternalFault+0x64>
 800216a:	2300      	movs	r3, #0
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <UpdateADInternalFault+0x8e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	edd3 7a76 	vldr	s15, [r3, #472]	@ 0x1d8
 8002188:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80021e0 <UpdateADInternalFault+0xd8>
 800218c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dd01      	ble.n	800219a <UpdateADInternalFault+0x92>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <UpdateADInternalFault+0x94>
 800219a:	2300      	movs	r3, #0
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <UpdateADInternalFault+0xbe>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	edd3 7a77 	vldr	s15, [r3, #476]	@ 0x1dc
 80021b8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80021e4 <UpdateADInternalFault+0xdc>
 80021bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d501      	bpl.n	80021ca <UpdateADInternalFault+0xc2>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <UpdateADInternalFault+0xc4>
 80021ca:	2300      	movs	r3, #0
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	42b40000 	.word	0x42b40000
 80021e4:	c2200000 	.word	0xc2200000
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	4010cccc 	.word	0x4010cccc

080021f0 <ADBMS_Print_Vals>:
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.adsv);
    Delay_ms(1);    // S-Channels are updated at 8ms
}

void ADBMS_Print_Vals(adbms_ *adbms)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 80021f8:	487a      	ldr	r0, [pc, #488]	@ (80023e4 <ADBMS_Print_Vals+0x1f4>)
 80021fa:	f009 fc53 	bl	800baa4 <puts>
    printf("total v: %f\n", adbms->total_v);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f99f 	bl	8000548 <__aeabi_f2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4876      	ldr	r0, [pc, #472]	@ (80023e8 <ADBMS_Print_Vals+0x1f8>)
 8002210:	f009 fbd8 	bl	800b9c4 <iprintf>
    printf("max v: %f\t", adbms->max_v);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4871      	ldr	r0, [pc, #452]	@ (80023ec <ADBMS_Print_Vals+0x1fc>)
 8002226:	f009 fbcd 	bl	800b9c4 <iprintf>
    printf("min v: %f\t", adbms->min_v);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f989 	bl	8000548 <__aeabi_f2d>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	486d      	ldr	r0, [pc, #436]	@ (80023f0 <ADBMS_Print_Vals+0x200>)
 800223c:	f009 fbc2 	bl	800b9c4 <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f97e 	bl	8000548 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4868      	ldr	r0, [pc, #416]	@ (80023f4 <ADBMS_Print_Vals+0x204>)
 8002252:	f009 fbb7 	bl	800b9c4 <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	ed93 7a73 	vldr	s14, [r3, #460]	@ 0x1cc
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7a74 	vldr	s15, [r3, #464]	@ 0x1d0
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002266:	ee17 0a90 	vmov	r0, s15
 800226a:	f7fe f96d 	bl	8000548 <__aeabi_f2d>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4861      	ldr	r0, [pc, #388]	@ (80023f8 <ADBMS_Print_Vals+0x208>)
 8002274:	f009 fba6 	bl	800b9c4 <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e02a      	b.n	80022d4 <ADBMS_Print_Vals+0xe4>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e021      	b.n	80022c8 <ADBMS_Print_Vals+0xd8>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	461a      	mov	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	1c5c      	adds	r4, r3, #1
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	461a      	mov	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	3346      	adds	r3, #70	@ 0x46
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f949 	bl	8000548 <__aeabi_f2d>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4621      	mov	r1, r4
 80022bc:	484f      	ldr	r0, [pc, #316]	@ (80023fc <ADBMS_Print_Vals+0x20c>)
 80022be:	f009 fb81 	bl	800b9c4 <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	3301      	adds	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b0d      	cmp	r3, #13
 80022cc:	ddda      	ble.n	8002284 <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	ddd1      	ble.n	800227e <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 80022da:	200a      	movs	r0, #10
 80022dc:	f009 fb84 	bl	800b9e8 <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 80022e0:	4847      	ldr	r0, [pc, #284]	@ (8002400 <ADBMS_Print_Vals+0x210>)
 80022e2:	f009 fbdf 	bl	800baa4 <puts>
    printf("max temp: %f\t", adbms->max_temp);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f92b 	bl	8000548 <__aeabi_f2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4843      	ldr	r0, [pc, #268]	@ (8002404 <ADBMS_Print_Vals+0x214>)
 80022f8:	f009 fb64 	bl	800b9c4 <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	483e      	ldr	r0, [pc, #248]	@ (8002408 <ADBMS_Print_Vals+0x218>)
 800230e:	f009 fb59 	bl	800b9c4 <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f915 	bl	8000548 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	483a      	ldr	r0, [pc, #232]	@ (800240c <ADBMS_Print_Vals+0x21c>)
 8002324:	f009 fb4e 	bl	800b9c4 <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e022      	b.n	8002374 <ADBMS_Print_Vals+0x184>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	e019      	b.n	8002368 <ADBMS_Print_Vals+0x178>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4413      	add	r3, r2
 800233c:	1c5c      	adds	r4, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	00da      	lsls	r2, r3, #3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4413      	add	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	3362      	adds	r3, #98	@ 0x62
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f8f9 	bl	8000548 <__aeabi_f2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4621      	mov	r1, r4
 800235c:	482c      	ldr	r0, [pc, #176]	@ (8002410 <ADBMS_Print_Vals+0x220>)
 800235e:	f009 fb31 	bl	800b9c4 <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3301      	adds	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b07      	cmp	r3, #7
 800236c:	dde2      	ble.n	8002334 <ADBMS_Print_Vals+0x144>
    for (int i = 0; i < NUM_CHIPS; i++)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	ddd9      	ble.n	800232e <ADBMS_Print_Vals+0x13e>
        }
    }
    printf("\n");
 800237a:	200a      	movs	r0, #10
 800237c:	f009 fb34 	bl	800b9e8 <putchar>

    printf("Faults\n");
 8002380:	4824      	ldr	r0, [pc, #144]	@ (8002414 <ADBMS_Print_Vals+0x224>)
 8002382:	f009 fb8f 	bl	800baa4 <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800238c:	4619      	mov	r1, r3
 800238e:	4822      	ldr	r0, [pc, #136]	@ (8002418 <ADBMS_Print_Vals+0x228>)
 8002390:	f009 fb18 	bl	800b9c4 <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800239a:	4619      	mov	r1, r3
 800239c:	481f      	ldr	r0, [pc, #124]	@ (800241c <ADBMS_Print_Vals+0x22c>)
 800239e:	f009 fb11 	bl	800b9c4 <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 80023a8:	4619      	mov	r1, r3
 80023aa:	481d      	ldr	r0, [pc, #116]	@ (8002420 <ADBMS_Print_Vals+0x230>)
 80023ac:	f009 fb0a 	bl	800b9c4 <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80023b6:	4619      	mov	r1, r3
 80023b8:	481a      	ldr	r0, [pc, #104]	@ (8002424 <ADBMS_Print_Vals+0x234>)
 80023ba:	f009 fb03 	bl	800b9c4 <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 80023c4:	4619      	mov	r1, r3
 80023c6:	4818      	ldr	r0, [pc, #96]	@ (8002428 <ADBMS_Print_Vals+0x238>)
 80023c8:	f009 fafc 	bl	800b9c4 <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 80023d2:	4619      	mov	r1, r3
 80023d4:	4815      	ldr	r0, [pc, #84]	@ (800242c <ADBMS_Print_Vals+0x23c>)
 80023d6:	f009 faf5 	bl	800b9c4 <iprintf>
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800e228 	.word	0x0800e228
 80023e8:	0800e234 	.word	0x0800e234
 80023ec:	0800e244 	.word	0x0800e244
 80023f0:	0800e250 	.word	0x0800e250
 80023f4:	0800e25c 	.word	0x0800e25c
 80023f8:	0800e268 	.word	0x0800e268
 80023fc:	0800e278 	.word	0x0800e278
 8002400:	0800e284 	.word	0x0800e284
 8002404:	0800e28c 	.word	0x0800e28c
 8002408:	0800e29c 	.word	0x0800e29c
 800240c:	0800e2ac 	.word	0x0800e2ac
 8002410:	0800e2bc 	.word	0x0800e2bc
 8002414:	0800e2c4 	.word	0x0800e2c4
 8002418:	0800e2cc 	.word	0x0800e2cc
 800241c:	0800e2e0 	.word	0x0800e2e0
 8002420:	0800e2f4 	.word	0x0800e2f4
 8002424:	0800e300 	.word	0x0800e300
 8002428:	0800e318 	.word	0x0800e318
 800242c:	0800e328 	.word	0x0800e328

08002430 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002438:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800243c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002448:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800244c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002450:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002458:	e000      	b.n	800245c <ITM_SendChar+0x2c>
    {
      __NOP();
 800245a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800245c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f9      	beq.n	800245a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002466:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e009      	b.n	80024a4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ffc9 	bl	8002430 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbf1      	blt.n	8002490 <_write+0x12>
	}
	return len;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024bc:	f000 fdda 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c0:	f000 f836 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c4:	f000 f9fa 	bl	80028bc <MX_GPIO_Init>
  MX_ADC1_Init();
 80024c8:	f000 f89c 	bl	8002604 <MX_ADC1_Init>
  MX_TIM2_Init();
 80024cc:	f000 f9aa 	bl	8002824 <MX_TIM2_Init>
  MX_CAN1_Init();
 80024d0:	f000 f8ea 	bl	80026a8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80024d4:	f000 f93a 	bl	800274c <MX_CAN2_Init>
  MX_SPI1_Init();
 80024d8:	f000 f96e 	bl	80027b8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80024dc:	f008 f866 	bl	800a5ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 80024e0:	2005      	movs	r0, #5
 80024e2:	f000 fe39 	bl	8003158 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2120      	movs	r1, #32
 80024ea:	480d      	ldr	r0, [pc, #52]	@ (8002520 <main+0x68>)
 80024ec:	f001 ff7e 	bl	80043ec <HAL_GPIO_WritePin>
  printf("Board Starting...\n");
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <main+0x6c>)
 80024f2:	f009 fad7 	bl	800baa4 <puts>
  ADBMS_Initialize(&adbms, &hspi1);
 80024f6:	490c      	ldr	r1, [pc, #48]	@ (8002528 <main+0x70>)
 80024f8:	480c      	ldr	r0, [pc, #48]	@ (800252c <main+0x74>)
 80024fa:	f7ff fa11 	bl	8001920 <ADBMS_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ADBMS_UpdateVoltages(&adbms);
 80024fe:	480b      	ldr	r0, [pc, #44]	@ (800252c <main+0x74>)
 8002500:	f7ff fac6 	bl	8001a90 <ADBMS_UpdateVoltages>
	  ADBMS_UpdateTemps(&adbms);
 8002504:	4809      	ldr	r0, [pc, #36]	@ (800252c <main+0x74>)
 8002506:	f7ff fb4d 	bl	8001ba4 <ADBMS_UpdateTemps>
	  UpdateADInternalFault(&adbms);
 800250a:	4808      	ldr	r0, [pc, #32]	@ (800252c <main+0x74>)
 800250c:	f7ff fdfc 	bl	8002108 <UpdateADInternalFault>

    if(ENABLE_PRINTF_DEBUG_COMMS) ADBMS_Print_Vals(&adbms);
 8002510:	4806      	ldr	r0, [pc, #24]	@ (800252c <main+0x74>)
 8002512:	f7ff fe6d 	bl	80021f0 <ADBMS_Print_Vals>
    if(ENABLE_USB_COMMS) ADBMS_USB_Serial_Print_Vals(&adbms);

    HAL_Delay(500);
 8002516:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800251a:	f000 fe1d 	bl	8003158 <HAL_Delay>
    ADBMS_UpdateVoltages(&adbms);
 800251e:	e7ee      	b.n	80024fe <main+0x46>
 8002520:	40020400 	.word	0x40020400
 8002524:	0800e3c8 	.word	0x0800e3c8
 8002528:	200003a0 	.word	0x200003a0
 800252c:	20000440 	.word	0x20000440

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	@ 0x50
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2230      	movs	r2, #48	@ 0x30
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f009 fb90 	bl	800bc64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <SystemClock_Config+0xcc>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4a27      	ldr	r2, [pc, #156]	@ (80025fc <SystemClock_Config+0xcc>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	@ 0x40
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <SystemClock_Config+0xcc>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002570:	2300      	movs	r3, #0
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <SystemClock_Config+0xd0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <SystemClock_Config+0xd0>)
 800257a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <SystemClock_Config+0xd0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800258c:	2301      	movs	r3, #1
 800258e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002596:	2302      	movs	r3, #2
 8002598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025a0:	2304      	movs	r3, #4
 80025a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025a4:	23c0      	movs	r3, #192	@ 0xc0
 80025a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80025a8:	2306      	movs	r3, #6
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80025ac:	2308      	movs	r3, #8
 80025ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 f985 	bl	80058c4 <HAL_RCC_OscConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025c0:	f000 fa22 	bl	8002a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c4:	230f      	movs	r3, #15
 80025c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c8:	2302      	movs	r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fbe6 	bl	8005db4 <HAL_RCC_ClockConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025ee:	f000 fa0b 	bl	8002a08 <Error_Handler>
  }
}
 80025f2:	bf00      	nop
 80025f4:	3750      	adds	r7, #80	@ 0x50
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000

08002604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800260a:	463b      	mov	r3, r7
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <MX_ADC1_Init+0x98>)
 8002618:	4a21      	ldr	r2, [pc, #132]	@ (80026a0 <MX_ADC1_Init+0x9c>)
 800261a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <MX_ADC1_Init+0x98>)
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <MX_ADC1_Init+0x98>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002628:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <MX_ADC1_Init+0x98>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <MX_ADC1_Init+0x98>)
 8002630:	2200      	movs	r2, #0
 8002632:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <MX_ADC1_Init+0x98>)
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_ADC1_Init+0x98>)
 800263e:	2200      	movs	r2, #0
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <MX_ADC1_Init+0x98>)
 8002644:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <MX_ADC1_Init+0xa0>)
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_ADC1_Init+0x98>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800264e:	4b13      	ldr	r3, [pc, #76]	@ (800269c <MX_ADC1_Init+0x98>)
 8002650:	2201      	movs	r2, #1
 8002652:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_ADC1_Init+0x98>)
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_ADC1_Init+0x98>)
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002662:	480e      	ldr	r0, [pc, #56]	@ (800269c <MX_ADC1_Init+0x98>)
 8002664:	f000 fd9c 	bl	80031a0 <HAL_ADC_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 f9cb 	bl	8002a08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002672:	2302      	movs	r3, #2
 8002674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800267e:	463b      	mov	r3, r7
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	@ (800269c <MX_ADC1_Init+0x98>)
 8002684:	f000 fdd0 	bl	8003228 <HAL_ADC_ConfigChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800268e:	f000 f9bb 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000308 	.word	0x20000308
 80026a0:	40012000 	.word	0x40012000
 80026a4:	0f000001 	.word	0x0f000001

080026a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026ae:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026b0:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <MX_CAN1_Init+0xa0>)
 80026b2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026b6:	2210      	movs	r2, #16
 80026b8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026ba:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026c0:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80026da:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80026f8:	4812      	ldr	r0, [pc, #72]	@ (8002744 <MX_CAN1_Init+0x9c>)
 80026fa:	f000 ffb3 	bl	8003664 <HAL_CAN_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002704:	f000 f980 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002708:	2301      	movs	r3, #1
 800270a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800270c:	2312      	movs	r3, #18
 800270e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 8002714:	2300      	movs	r3, #0
 8002716:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002728:	2301      	movs	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800272c:	2314      	movs	r3, #20
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002730:	463b      	mov	r3, r7
 8002732:	4619      	mov	r1, r3
 8002734:	4803      	ldr	r0, [pc, #12]	@ (8002744 <MX_CAN1_Init+0x9c>)
 8002736:	f001 f891 	bl	800385c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	@ 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000350 	.word	0x20000350
 8002748:	40006400 	.word	0x40006400

0800274c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002750:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002752:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <MX_CAN2_Init+0x68>)
 8002754:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8002756:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002758:	2210      	movs	r2, #16
 800275a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <MX_CAN2_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002762:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <MX_CAN2_Init+0x64>)
 800276a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800276e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002770:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <MX_CAN2_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <MX_CAN2_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <MX_CAN2_Init+0x64>)
 8002796:	2200      	movs	r2, #0
 8002798:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_CAN2_Init+0x64>)
 800279c:	f000 ff62 	bl	8003664 <HAL_CAN_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80027a6:	f000 f92f 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000378 	.word	0x20000378
 80027b4:	40006800 	.word	0x40006800

080027b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <MX_SPI1_Init+0x64>)
 80027be:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <MX_SPI1_Init+0x68>)
 80027c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027c2:	4b16      	ldr	r3, [pc, #88]	@ (800281c <MX_SPI1_Init+0x64>)
 80027c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <MX_SPI1_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <MX_SPI1_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <MX_SPI1_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <MX_SPI1_Init+0x64>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <MX_SPI1_Init+0x64>)
 80027e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <MX_SPI1_Init+0x64>)
 80027ec:	2218      	movs	r2, #24
 80027ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <MX_SPI1_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <MX_SPI1_Init+0x64>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <MX_SPI1_Init+0x64>)
 80027fe:	2200      	movs	r2, #0
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <MX_SPI1_Init+0x64>)
 8002804:	220a      	movs	r2, #10
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002808:	4804      	ldr	r0, [pc, #16]	@ (800281c <MX_SPI1_Init+0x64>)
 800280a:	f003 fccb 	bl	80061a4 <HAL_SPI_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002814:	f000 f8f8 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200003a0 	.word	0x200003a0
 8002820:	40013000 	.word	0x40013000

08002824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002840:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <MX_TIM2_Init+0x94>)
 8002842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <MX_TIM2_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <MX_TIM2_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002854:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <MX_TIM2_Init+0x94>)
 8002856:	f04f 32ff 	mov.w	r2, #4294967295
 800285a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <MX_TIM2_Init+0x94>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <MX_TIM2_Init+0x94>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002868:	4813      	ldr	r0, [pc, #76]	@ (80028b8 <MX_TIM2_Init+0x94>)
 800286a:	f004 f8ed 	bl	8006a48 <HAL_TIM_Base_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002874:	f000 f8c8 	bl	8002a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <MX_TIM2_Init+0x94>)
 8002886:	f004 f92e 	bl	8006ae6 <HAL_TIM_ConfigClockSource>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002890:	f000 f8ba 	bl	8002a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800289c:	463b      	mov	r3, r7
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <MX_TIM2_Init+0x94>)
 80028a2:	f004 fb2d 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028ac:	f000 f8ac 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200003f8 	.word	0x200003f8

080028bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b48      	ldr	r3, [pc, #288]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b3e      	ldr	r3, [pc, #248]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a39      	ldr	r2, [pc, #228]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a32      	ldr	r2, [pc, #200]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b30      	ldr	r3, [pc, #192]	@ (80029f8 <MX_GPIO_Init+0x13c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 8002942:	2200      	movs	r2, #0
 8002944:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8002948:	482c      	ldr	r0, [pc, #176]	@ (80029fc <MX_GPIO_Init+0x140>)
 800294a:	f001 fd4f 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002954:	482a      	ldr	r0, [pc, #168]	@ (8002a00 <MX_GPIO_Init+0x144>)
 8002956:	f001 fd49 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	21e0      	movs	r1, #224	@ 0xe0
 800295e:	4829      	ldr	r0, [pc, #164]	@ (8002a04 <MX_GPIO_Init+0x148>)
 8002960:	f001 fd44 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 8002964:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	481f      	ldr	r0, [pc, #124]	@ (80029fc <MX_GPIO_Init+0x140>)
 800297e:	f001 fb99 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 8002982:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	481b      	ldr	r0, [pc, #108]	@ (8002a04 <MX_GPIO_Init+0x148>)
 8002998:	f001 fb8c 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 800299c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80029a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4813      	ldr	r0, [pc, #76]	@ (8002a00 <MX_GPIO_Init+0x144>)
 80029b2:	f001 fb7f 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 80029b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <MX_GPIO_Init+0x144>)
 80029d0:	f001 fb70 	bl	80040b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 80029d4:	23e0      	movs	r3, #224	@ 0xe0
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	@ (8002a04 <MX_GPIO_Init+0x148>)
 80029ec:	f001 fb62 	bl	80040b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80029f0:	bf00      	nop
 80029f2:	3728      	adds	r7, #40	@ 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020400 	.word	0x40020400

08002a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <Error_Handler+0x8>

08002a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a08      	ldr	r2, [pc, #32]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800

08002a64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_ADC_MspInit+0x7c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d127      	bne.n	8002ad6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4a15      	ldr	r2, [pc, #84]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <HAL_ADC_MspInit+0x80>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_ADC_MspInit+0x84>)
 8002ad2:	f001 faef 	bl	80040b4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	@ 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40012000 	.word	0x40012000
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a47      	ldr	r2, [pc, #284]	@ (8002c28 <HAL_CAN_MspInit+0x13c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d13e      	bne.n	8002b8c <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a45      	ldr	r2, [pc, #276]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002b16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002b18:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10d      	bne.n	8002b3c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	4a41      	ldr	r2, [pc, #260]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b30:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4c:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b6a:	2309      	movs	r3, #9
 8002b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	4619      	mov	r1, r3
 8002b74:	482f      	ldr	r0, [pc, #188]	@ (8002c34 <HAL_CAN_MspInit+0x148>)
 8002b76:	f001 fa9d 	bl	80040b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2014      	movs	r0, #20
 8002b80:	f001 fa61 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b84:	2014      	movs	r0, #20
 8002b86:	f001 fa7a 	bl	800407e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002b8a:	e048      	b.n	8002c1e <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <HAL_CAN_MspInit+0x14c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d143      	bne.n	8002c1e <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a24      	ldr	r2, [pc, #144]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002ba0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002bba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_CAN_MspInit+0x140>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10d      	bne.n	8002be0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002bce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_CAN_MspInit+0x144>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002bfc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002c0e:	2309      	movs	r3, #9
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <HAL_CAN_MspInit+0x148>)
 8002c1a:	f001 fa4b 	bl	80040b4 <HAL_GPIO_Init>
}
 8002c1e:	bf00      	nop
 8002c20:	3730      	adds	r7, #48	@ 0x30
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40006400 	.word	0x40006400
 8002c2c:	2000063c 	.word	0x2000063c
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40006800 	.word	0x40006800

08002c3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_SPI_MspInit+0x84>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c96:	23e0      	movs	r3, #224	@ 0xe0
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_SPI_MspInit+0x8c>)
 8002cb2:	f001 f9ff 	bl	80040b4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d10d      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_TIM_Base_MspInit+0x3c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_TIM_Base_MspInit+0x3c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_TIM_Base_MspInit+0x3c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d62:	f000 f9d9 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <CAN1_RX0_IRQHandler+0x10>)
 8002d72:	f000 fe53 	bl	8003a1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000350 	.word	0x20000350

08002d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <OTG_FS_IRQHandler+0x10>)
 8002d86:	f001 fc8e 	bl	80046a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20001b28 	.word	0x20001b28

08002d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return 1;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_kill>:

int _kill(int pid, int sig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dae:	f008 ffab 	bl	800bd08 <__errno>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2216      	movs	r2, #22
 8002db6:	601a      	str	r2, [r3, #0]
  return -1;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_exit>:

void _exit (int status)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <_exit+0x12>

08002dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e00a      	b.n	8002e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dec:	f3af 8000 	nop.w
 8002df0:	4601      	mov	r1, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dbf0      	blt.n	8002dec <_read+0x12>
  }

  return len;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_isatty>:

int _isatty(int file)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e84:	4a14      	ldr	r2, [pc, #80]	@ (8002ed8 <_sbrk+0x5c>)
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <_sbrk+0x60>)
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <_sbrk+0x64>)
 8002e9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <_sbrk+0x68>)
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <_sbrk+0x64>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d207      	bcs.n	8002ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eac:	f008 ff2c 	bl	800bd08 <__errno>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	e009      	b.n	8002ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <_sbrk+0x64>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <_sbrk+0x64>)
 8002ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20020000 	.word	0x20020000
 8002edc:	00000400 	.word	0x00000400
 8002ee0:	20000640 	.word	0x20000640
 8002ee4:	20002378 	.word	0x20002378

08002ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <SystemInit+0x20>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <SystemInit+0x20>)
 8002ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	00000000 	.word	0x00000000

08002f10 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f1c:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8002f20:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <getTemp+0x100>)
 8002f22:	ed93 7a00 	vldr	s14, [r3]
 8002f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f2e:	ed97 7a00 	vldr	s14, [r7]
 8002f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3e:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <getTemp+0x104>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fafe 	bl	8000548 <__aeabi_f2d>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	460d      	mov	r5, r1
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7fd faf9 	bl	8000548 <__aeabi_f2d>
 8002f56:	4680      	mov	r8, r0
 8002f58:	4689      	mov	r9, r1
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <getTemp+0x108>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd faf2 	bl	8000548 <__aeabi_f2d>
 8002f64:	4682      	mov	sl, r0
 8002f66:	468b      	mov	fp, r1
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <getTemp+0x104>)
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eeb1 7a67 	vneg.f32	s14, s15
 8002f72:	4b2a      	ldr	r3, [pc, #168]	@ (800301c <getTemp+0x10c>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f7c:	ee16 0a90 	vmov	r0, s13
 8002f80:	f7fd fae2 	bl	8000548 <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	ec43 2b10 	vmov	d0, r2, r3
 8002f8c:	f00a fd34 	bl	800d9f8 <exp>
 8002f90:	ec53 2b10 	vmov	r2, r3, d0
 8002f94:	4650      	mov	r0, sl
 8002f96:	4659      	mov	r1, fp
 8002f98:	f7fd fb2e 	bl	80005f8 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	f7fd fc52 	bl	800084c <__aeabi_ddiv>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	ec43 2b17 	vmov	d7, r2, r3
 8002fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb4:	eef0 0a67 	vmov.f32	s1, s15
 8002fb8:	f00a fd66 	bl	800da88 <log>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd fc42 	bl	800084c <__aeabi_ddiv>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fdea 	bl	8000ba8 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f7fd fab5 	bl	8000548 <__aeabi_f2d>
 8002fde:	a30a      	add	r3, pc, #40	@ (adr r3, 8003008 <getTemp+0xf8>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd f950 	bl	8000288 <__aeabi_dsub>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f7fd fdda 	bl	8000ba8 <__aeabi_d2f>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	ee07 3a90 	vmov	s15, r3
}
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	66666666 	.word	0x66666666
 800300c:	40711266 	.word	0x40711266
 8003010:	2000001c 	.word	0x2000001c
 8003014:	20000024 	.word	0x20000024
 8003018:	20000020 	.word	0x20000020
 800301c:	20000028 	.word	0x20000028

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003058 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003024:	f7ff ff60 	bl	8002ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	@ (800305c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	@ (8003060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	@ (800306c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800304e:	f008 fe61 	bl	800bd14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7ff fa31 	bl	80024b8 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8003064:	0800e9f0 	.word	0x0800e9f0
  ldr r2, =_sbss
 8003068:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 800306c:	20002378 	.word	0x20002378

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	@ (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 ffc7 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	200f      	movs	r0, #15
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fcb4 	bl	8002a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ffdf 	bl	800409a <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f000 ffa7 	bl	8004046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	@ (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000018 	.word	0x20000018
 8003110:	20000030 	.word	0x20000030
 8003114:	2000002c 	.word	0x2000002c

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000030 	.word	0x20000030
 800313c:	20000644 	.word	0x20000644

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000644 	.word	0x20000644

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000030 	.word	0x20000030

080031a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e033      	b.n	800321e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fc50 	bl	8002a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031e6:	f023 0302 	bic.w	r3, r3, #2
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f93a 	bl	800346c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
 800320e:	e001      	b.n	8003214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x1c>
 8003240:	2302      	movs	r3, #2
 8003242:	e105      	b.n	8003450 <HAL_ADC_ConfigChannel+0x228>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b09      	cmp	r3, #9
 8003252:	d925      	bls.n	80032a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	3b1e      	subs	r3, #30
 800326a:	2207      	movs	r2, #7
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43da      	mvns	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	400a      	ands	r2, r1
 8003278:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68d9      	ldr	r1, [r3, #12]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	4603      	mov	r3, r0
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4403      	add	r3, r0
 8003292:	3b1e      	subs	r3, #30
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	e022      	b.n	80032e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	2207      	movs	r2, #7
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	400a      	ands	r2, r1
 80032c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4403      	add	r3, r0
 80032dc:	409a      	lsls	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d824      	bhi.n	8003338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	3b05      	subs	r3, #5
 8003300:	221f      	movs	r2, #31
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	400a      	ands	r2, r1
 800330e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	4618      	mov	r0, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	3b05      	subs	r3, #5
 800332a:	fa00 f203 	lsl.w	r2, r0, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	@ 0x34
 8003336:	e04c      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d824      	bhi.n	800338a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b23      	subs	r3, #35	@ 0x23
 8003352:	221f      	movs	r2, #31
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43da      	mvns	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	400a      	ands	r2, r1
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b23      	subs	r3, #35	@ 0x23
 800337c:	fa00 f203 	lsl.w	r2, r0, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
 8003388:	e023      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b41      	subs	r3, #65	@ 0x41
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b41      	subs	r3, #65	@ 0x41
 80033c6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d2:	4b22      	ldr	r3, [pc, #136]	@ (800345c <HAL_ADC_ConfigChannel+0x234>)
 80033d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <HAL_ADC_ConfigChannel+0x238>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d109      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1cc>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	@ (8003460 <HAL_ADC_ConfigChannel+0x238>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d123      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x21e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d003      	beq.n	800340e <HAL_ADC_ConfigChannel+0x1e6>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b11      	cmp	r3, #17
 800340c:	d11b      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b10      	cmp	r3, #16
 8003420:	d111      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003422:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <HAL_ADC_ConfigChannel+0x23c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <HAL_ADC_ConfigChannel+0x240>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	0c9a      	lsrs	r2, r3, #18
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003438:	e002      	b.n	8003440 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3b01      	subs	r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f9      	bne.n	800343a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40012300 	.word	0x40012300
 8003460:	40012000 	.word	0x40012000
 8003464:	20000018 	.word	0x20000018
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003474:	4b79      	ldr	r3, [pc, #484]	@ (800365c <ADC_Init+0x1f0>)
 8003476:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	021a      	lsls	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <ADC_Init+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e00f      	b.n	800356a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0202 	bic.w	r2, r2, #2
 8003578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e1b      	ldrb	r3, [r3, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80035b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	035a      	lsls	r2, r3, #13
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e007      	b.n	80035e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	051a      	lsls	r2, r3, #20
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003622:	025a      	lsls	r2, r3, #9
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	029a      	lsls	r2, r3, #10
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40012300 	.word	0x40012300
 8003660:	0f000001 	.word	0x0f000001

08003664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0ed      	b.n	8003852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fa32 	bl	8002aec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003698:	f7ff fd52 	bl	8003140 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800369e:	e012      	b.n	80036c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a0:	f7ff fd4e 	bl	8003140 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b0a      	cmp	r3, #10
 80036ac:	d90b      	bls.n	80036c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2205      	movs	r2, #5
 80036be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0c5      	b.n	8003852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0e5      	beq.n	80036a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0202 	bic.w	r2, r2, #2
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e4:	f7ff fd2c 	bl	8003140 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ea:	e012      	b.n	8003712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036ec:	f7ff fd28 	bl	8003140 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b0a      	cmp	r3, #10
 80036f8:	d90b      	bls.n	8003712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2205      	movs	r2, #5
 800370a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e09f      	b.n	8003852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e5      	bne.n	80036ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7e1b      	ldrb	r3, [r3, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e007      	b.n	800374a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7e5b      	ldrb	r3, [r3, #25]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7e9b      	ldrb	r3, [r3, #26]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0220 	orr.w	r2, r2, #32
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e007      	b.n	800379e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0220 	bic.w	r2, r2, #32
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7edb      	ldrb	r3, [r3, #27]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0210 	bic.w	r2, r2, #16
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e007      	b.n	80037c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0210 	orr.w	r2, r2, #16
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7f1b      	ldrb	r3, [r3, #28]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0208 	bic.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7f5b      	ldrb	r3, [r3, #29]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0204 	orr.w	r2, r2, #4
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e007      	b.n	800381c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	ea42 0103 	orr.w	r1, r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003872:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d003      	beq.n	8003882 <HAL_CAN_ConfigFilter+0x26>
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b02      	cmp	r3, #2
 800387e:	f040 80be 	bne.w	80039fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003882:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_CAN_ConfigFilter+0x1bc>)
 8003884:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800389c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	431a      	orrs	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	401a      	ands	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d123      	bne.n	800392c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003906:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3248      	adds	r2, #72	@ 0x48
 800390c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003920:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	3348      	adds	r3, #72	@ 0x48
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d122      	bne.n	800397a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	431a      	orrs	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003954:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3248      	adds	r2, #72	@ 0x48
 800395a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800396e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003970:	6979      	ldr	r1, [r7, #20]
 8003972:	3348      	adds	r3, #72	@ 0x48
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	401a      	ands	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003994:	e007      	b.n	80039a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	431a      	orrs	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80039c0:	e007      	b.n	80039d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039f0:	f023 0201 	bic.w	r2, r3, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e006      	b.n	8003a0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40006400 	.word	0x40006400

08003a1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d07c      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d023      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f983 	bl	8003d8a <HAL_CAN_TxMailbox0CompleteCallback>
 8003a84:	e016      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	e00c      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aac:	e002      	b.n	8003ab4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f989 	bl	8003dc6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d024      	beq.n	8003b08 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f963 	bl	8003d9e <HAL_CAN_TxMailbox1CompleteCallback>
 8003ad8:	e016      	b.n	8003b08 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	e00c      	b.n	8003b08 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b00:	e002      	b.n	8003b08 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f969 	bl	8003dda <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d024      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f943 	bl	8003db2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003b2c:	e016      	b.n	8003b5c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	e00c      	b.n	8003b5c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	e002      	b.n	8003b5c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f949 	bl	8003dee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f93a 	bl	8003e16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f921 	bl	8003e02 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f91c 	bl	8003e3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f903 	bl	8003e2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f906 	bl	8003e52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8ff 	bl	8003e66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d07b      	beq.n	8003d6a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d072      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	f043 0302 	orr.w	r3, r3, #2
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d043      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03e      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cea:	2b60      	cmp	r3, #96	@ 0x60
 8003cec:	d02b      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x32a>
 8003cee:	2b60      	cmp	r3, #96	@ 0x60
 8003cf0:	d82e      	bhi.n	8003d50 <HAL_CAN_IRQHandler+0x334>
 8003cf2:	2b50      	cmp	r3, #80	@ 0x50
 8003cf4:	d022      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x320>
 8003cf6:	2b50      	cmp	r3, #80	@ 0x50
 8003cf8:	d82a      	bhi.n	8003d50 <HAL_CAN_IRQHandler+0x334>
 8003cfa:	2b40      	cmp	r3, #64	@ 0x40
 8003cfc:	d019      	beq.n	8003d32 <HAL_CAN_IRQHandler+0x316>
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d826      	bhi.n	8003d50 <HAL_CAN_IRQHandler+0x334>
 8003d02:	2b30      	cmp	r3, #48	@ 0x30
 8003d04:	d010      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x30c>
 8003d06:	2b30      	cmp	r3, #48	@ 0x30
 8003d08:	d822      	bhi.n	8003d50 <HAL_CAN_IRQHandler+0x334>
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d002      	beq.n	8003d14 <HAL_CAN_IRQHandler+0x2f8>
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d005      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d12:	e01d      	b.n	8003d50 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	f043 0308 	orr.w	r3, r3, #8
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d1c:	e019      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	f043 0310 	orr.w	r3, r3, #16
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d26:	e014      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d30:	e00f      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d44:	e005      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d4e:	e000      	b.n	8003d52 <HAL_CAN_IRQHandler+0x336>
            break;
 8003d50:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d60:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2204      	movs	r2, #4
 8003d68:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f87c 	bl	8003e7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3728      	adds	r7, #40	@ 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <__NVIC_SetPriorityGrouping>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	@ (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	@ (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	@ (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	@ (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	@ 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	@ 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SysTick_Config>:
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ffc:	d301      	bcc.n	8004002 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00f      	b.n	8004022 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <SysTick_Config+0x40>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400a:	210f      	movs	r1, #15
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f7ff ff8e 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <SysTick_Config+0x40>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	@ (800402c <SysTick_Config+0x40>)
 800401c:	2207      	movs	r2, #7
 800401e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e010 	.word	0xe000e010

08004030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff29 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff3e 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff8e 	bl	8003f84 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff31 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffa2 	bl	8003fec <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	@ 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	e16b      	b.n	80043a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040d0:	2201      	movs	r2, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f040 815a 	bne.w	80043a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d005      	beq.n	8004106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	2b02      	cmp	r3, #2
 8004104:	d130      	bne.n	8004168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2203      	movs	r2, #3
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 0201 	and.w	r2, r3, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d017      	beq.n	80041a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d123      	bne.n	80041f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	220f      	movs	r2, #15
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	08da      	lsrs	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3208      	adds	r2, #8
 80041f2:	69b9      	ldr	r1, [r7, #24]
 80041f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	2203      	movs	r2, #3
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0203 	and.w	r2, r3, #3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80b4 	beq.w	80043a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b60      	ldr	r3, [pc, #384]	@ (80043c0 <HAL_GPIO_Init+0x30c>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	4a5f      	ldr	r2, [pc, #380]	@ (80043c0 <HAL_GPIO_Init+0x30c>)
 8004244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004248:	6453      	str	r3, [r2, #68]	@ 0x44
 800424a:	4b5d      	ldr	r3, [pc, #372]	@ (80043c0 <HAL_GPIO_Init+0x30c>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004256:	4a5b      	ldr	r2, [pc, #364]	@ (80043c4 <HAL_GPIO_Init+0x310>)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	3302      	adds	r3, #2
 800425e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	220f      	movs	r2, #15
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a52      	ldr	r2, [pc, #328]	@ (80043c8 <HAL_GPIO_Init+0x314>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02b      	beq.n	80042da <HAL_GPIO_Init+0x226>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a51      	ldr	r2, [pc, #324]	@ (80043cc <HAL_GPIO_Init+0x318>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d025      	beq.n	80042d6 <HAL_GPIO_Init+0x222>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a50      	ldr	r2, [pc, #320]	@ (80043d0 <HAL_GPIO_Init+0x31c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <HAL_GPIO_Init+0x21e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4f      	ldr	r2, [pc, #316]	@ (80043d4 <HAL_GPIO_Init+0x320>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d019      	beq.n	80042ce <HAL_GPIO_Init+0x21a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4e      	ldr	r2, [pc, #312]	@ (80043d8 <HAL_GPIO_Init+0x324>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_GPIO_Init+0x216>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4d      	ldr	r2, [pc, #308]	@ (80043dc <HAL_GPIO_Init+0x328>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00d      	beq.n	80042c6 <HAL_GPIO_Init+0x212>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4c      	ldr	r2, [pc, #304]	@ (80043e0 <HAL_GPIO_Init+0x32c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <HAL_GPIO_Init+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	@ (80043e4 <HAL_GPIO_Init+0x330>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_GPIO_Init+0x20a>
 80042ba:	2307      	movs	r3, #7
 80042bc:	e00e      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042be:	2308      	movs	r3, #8
 80042c0:	e00c      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e00a      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042c6:	2305      	movs	r3, #5
 80042c8:	e008      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042ca:	2304      	movs	r3, #4
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e004      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e002      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_GPIO_Init+0x228>
 80042da:	2300      	movs	r3, #0
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	f002 0203 	and.w	r2, r2, #3
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	4093      	lsls	r3, r2
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ec:	4935      	ldr	r1, [pc, #212]	@ (80043c4 <HAL_GPIO_Init+0x310>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	3302      	adds	r3, #2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042fa:	4b3b      	ldr	r3, [pc, #236]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800431e:	4a32      	ldr	r2, [pc, #200]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004324:	4b30      	ldr	r3, [pc, #192]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004348:	4a27      	ldr	r2, [pc, #156]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800434e:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004372:	4a1d      	ldr	r2, [pc, #116]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439c:	4a12      	ldr	r2, [pc, #72]	@ (80043e8 <HAL_GPIO_Init+0x334>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	f67f ae90 	bls.w	80040d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020400 	.word	0x40020400
 80043d0:	40020800 	.word	0x40020800
 80043d4:	40020c00 	.word	0x40020c00
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40021400 	.word	0x40021400
 80043e0:	40021800 	.word	0x40021800
 80043e4:	40021c00 	.word	0x40021c00
 80043e8:	40013c00 	.word	0x40013c00

080043ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
 80043f8:	4613      	mov	r3, r2
 80043fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043fc:	787b      	ldrb	r3, [r7, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004408:	e003      	b.n	8004412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	041a      	lsls	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	619a      	str	r2, [r3, #24]
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af02      	add	r7, sp, #8
 8004424:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e101      	b.n	8004634 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f006 fa8e 	bl	800a96c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2203      	movs	r2, #3
 8004454:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800445e:	d102      	bne.n	8004466 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f002 fedb 	bl	8007226 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7c1a      	ldrb	r2, [r3, #16]
 8004478:	f88d 2000 	strb.w	r2, [sp]
 800447c:	3304      	adds	r3, #4
 800447e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004480:	f002 fdba 	bl	8006ff8 <USB_CoreInit>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0ce      	b.n	8004634 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fed3 	bl	8007248 <USB_SetCurrentMode>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0bf      	b.n	8004634 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e04a      	b.n	8004550 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3315      	adds	r3, #21
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3314      	adds	r3, #20
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	b298      	uxth	r0, r3
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	332e      	adds	r3, #46	@ 0x2e
 80044f6:	4602      	mov	r2, r0
 80044f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3318      	adds	r3, #24
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	331c      	adds	r3, #28
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3320      	adds	r3, #32
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3324      	adds	r3, #36	@ 0x24
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	3301      	adds	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	791b      	ldrb	r3, [r3, #4]
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3af      	bcc.n	80044ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e044      	b.n	80045ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045b8:	7bfa      	ldrb	r2, [r7, #15]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	3301      	adds	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	791b      	ldrb	r3, [r3, #4]
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d3b5      	bcc.n	8004560 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7c1a      	ldrb	r2, [r3, #16]
 80045fc:	f88d 2000 	strb.w	r2, [sp]
 8004600:	3304      	adds	r3, #4
 8004602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004604:	f002 fe6c 	bl	80072e0 <USB_DevInit>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00c      	b.n	8004634 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f003 feb6 	bl	800839e <USB_DevDisconnect>

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_PCD_Start+0x1c>
 8004654:	2302      	movs	r3, #2
 8004656:	e022      	b.n	800469e <HAL_PCD_Start+0x62>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004678:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f002 fdbd 	bl	8007204 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fe64 	bl	800835c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046a6:	b590      	push	{r4, r7, lr}
 80046a8:	b08d      	sub	sp, #52	@ 0x34
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f003 ff22 	bl	8008506 <USB_GetMode>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 848c 	bne.w	8004fe2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 fe86 	bl	80083e0 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8482 	beq.w	8004fe0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 fe73 	bl	80083e0 <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f002 0202 	and.w	r2, r2, #2
 8004712:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f003 fe61 	bl	80083e0 <USB_ReadInterrupts>
 800471e:	4603      	mov	r3, r0
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d161      	bne.n	80047ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0210 	bic.w	r2, r2, #16
 8004736:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800475e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004762:	d124      	bne.n	80047ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d035      	beq.n	80047dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800477a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6a38      	ldr	r0, [r7, #32]
 8004784:	f003 fc98 	bl	80080b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004794:	441a      	add	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047a6:	441a      	add	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	615a      	str	r2, [r3, #20]
 80047ac:	e016      	b.n	80047dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80047b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047b8:	d110      	bne.n	80047dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047c0:	2208      	movs	r2, #8
 80047c2:	4619      	mov	r1, r3
 80047c4:	6a38      	ldr	r0, [r7, #32]
 80047c6:	f003 fc77 	bl	80080b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d6:	441a      	add	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0210 	orr.w	r2, r2, #16
 80047ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 fdf5 	bl	80083e0 <USB_ReadInterrupts>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004800:	f040 80a7 	bne.w	8004952 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fdfa 	bl	8008406 <USB_ReadDevAllOutEpInterrupt>
 8004812:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004814:	e099      	b.n	800494a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 808e 	beq.w	800493e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f003 fe1e 	bl	800846e <USB_ReadDevOutEPInterrupt>
 8004832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	461a      	mov	r2, r3
 800484c:	2301      	movs	r3, #1
 800484e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fea4 	bl	80055a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486e:	461a      	mov	r2, r3
 8004870:	2308      	movs	r3, #8
 8004872:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 ff7a 	bl	8005770 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004892:	461a      	mov	r2, r3
 8004894:	2310      	movs	r3, #16
 8004896:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d030      	beq.n	8004904 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b80      	cmp	r3, #128	@ 0x80
 80048ac:	d109      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3304      	adds	r3, #4
 80048d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	78db      	ldrb	r3, [r3, #3]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d108      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f006 f943 	bl	800ab78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	2302      	movs	r3, #2
 8004902:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2320      	movs	r3, #32
 800491e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004936:	461a      	mov	r2, r3
 8004938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800493c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	3301      	adds	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af62 	bne.w	8004816 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f003 fd42 	bl	80083e0 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004962:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004966:	f040 80db 	bne.w	8004b20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f003 fd63 	bl	800843a <USB_ReadDevAllInEpInterrupt>
 8004974:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800497a:	e0cd      	b.n	8004b18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80c2 	beq.w	8004b0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f003 fd89 	bl	80084aa <USB_ReadDevInEPInterrupt>
 8004998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d057      	beq.n	8004a54 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	2201      	movs	r2, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	43db      	mvns	r3, r3
 80049be:	69f9      	ldr	r1, [r7, #28]
 80049c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049c4:	4013      	ands	r3, r2
 80049c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	2301      	movs	r3, #1
 80049d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	799b      	ldrb	r3, [r3, #6]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d132      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	3320      	adds	r3, #32
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4403      	add	r3, r0
 8004a02:	331c      	adds	r3, #28
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4419      	add	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4403      	add	r3, r0
 8004a16:	3320      	adds	r3, #32
 8004a18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d113      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x3a2>
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3324      	adds	r3, #36	@ 0x24
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a40:	461a      	mov	r2, r3
 8004a42:	2101      	movs	r1, #1
 8004a44:	f003 fd90 	bl	8008568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f006 f80d 	bl	800aa6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	2310      	movs	r3, #16
 8004a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2340      	movs	r3, #64	@ 0x40
 8004aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d023      	beq.n	8004afa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ab4:	6a38      	ldr	r0, [r7, #32]
 8004ab6:	f002 fd77 	bl	80075a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3310      	adds	r3, #16
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	3304      	adds	r3, #4
 8004acc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	78db      	ldrb	r3, [r3, #3]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d108      	bne.n	8004ae8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f006 f85a 	bl	800ab9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	2302      	movs	r3, #2
 8004af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fcbd 	bl	8005486 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	3301      	adds	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f47f af2e 	bne.w	800497c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f003 fc5b 	bl	80083e0 <USB_ReadInterrupts>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b34:	d122      	bne.n	8004b7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d108      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fea4 	bl	80058ac <HAL_PCDEx_LPM_Callback>
 8004b64:	e002      	b.n	8004b6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f005 fff8 	bl	800ab5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 fc2d 	bl	80083e0 <USB_ReadInterrupts>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b90:	d112      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f005 ffb4 	bl	800ab10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004bb6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 fc0f 	bl	80083e0 <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bcc:	f040 80b7 	bne.w	8004d3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2110      	movs	r1, #16
 8004bea:	4618      	mov	r0, r3
 8004bec:	f002 fcdc 	bl	80075a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf4:	e046      	b.n	8004c84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c02:	461a      	mov	r2, r3
 8004c04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c36:	461a      	mov	r2, r3
 8004c38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	3301      	adds	r3, #1
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	791b      	ldrb	r3, [r3, #4]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d3b2      	bcc.n	8004bf6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c9e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004ca2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7bdb      	ldrb	r3, [r3, #15]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cbc:	f043 030b 	orr.w	r3, r3, #11
 8004cc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cd2:	f043 030b 	orr.w	r3, r3, #11
 8004cd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cd8:	e015      	b.n	8004d06 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ce8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004cf0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d00:	f043 030b 	orr.w	r3, r3, #11
 8004d04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f003 fc1d 	bl	8008568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fb4c 	bl	80083e0 <USB_ReadInterrupts>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d52:	d123      	bne.n	8004d9c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f003 fbe2 	bl	8008522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f002 fc99 	bl	800769a <USB_GetDevSpeed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681c      	ldr	r4, [r3, #0]
 8004d74:	f001 fa0a 	bl	800618c <HAL_RCC_GetHCLKFreq>
 8004d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4620      	mov	r0, r4
 8004d82:	f002 f99d 	bl	80070c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f005 fe99 	bl	800aabe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 fb1d 	bl	80083e0 <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d10a      	bne.n	8004dc6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f005 fe76 	bl	800aaa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f002 0208 	and.w	r2, r2, #8
 8004dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 fb08 	bl	80083e0 <USB_ReadInterrupts>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd6:	2b80      	cmp	r3, #128	@ 0x80
 8004dd8:	d123      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004de6:	2301      	movs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dea:	e014      	b.n	8004e16 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fb0a 	bl	8005424 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	3301      	adds	r3, #1
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	791b      	ldrb	r3, [r3, #4]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d3e4      	bcc.n	8004dec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fada 	bl	80083e0 <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e36:	d13c      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e38:	2301      	movs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3c:	e02b      	b.n	8004e96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d115      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da12      	bge.n	8004e90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3317      	adds	r3, #23
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 faca 	bl	8005424 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	3301      	adds	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d3cd      	bcc.n	8004e3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f003 fa92 	bl	80083e0 <USB_ReadInterrupts>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ec6:	d156      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ec8:	2301      	movs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ecc:	e045      	b.n	8004f5a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12e      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ef6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da2b      	bge.n	8004f54 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004f08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d121      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f50:	6053      	str	r3, [r2, #4]
            break;
 8004f52:	e008      	b.n	8004f66 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	791b      	ldrb	r3, [r3, #4]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d3b3      	bcc.n	8004ece <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f003 fa30 	bl	80083e0 <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8a:	d10a      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f005 fe17 	bl	800abc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f003 fa1a 	bl	80083e0 <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d115      	bne.n	8004fe2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f005 fe07 	bl	800abdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e000      	b.n	8004fe2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004fe0:	bf00      	nop
    }
  }
}
 8004fe2:	3734      	adds	r7, #52	@ 0x34
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}

08004fe8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_PCD_SetAddress+0x1a>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e012      	b.n	8005028 <HAL_PCD_SetAddress+0x40>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f003 f979 	bl	8008310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4603      	mov	r3, r0
 8005040:	70fb      	strb	r3, [r7, #3]
 8005042:	460b      	mov	r3, r1
 8005044:	803b      	strh	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800504e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da0f      	bge.n	8005076 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	3310      	adds	r3, #16
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	705a      	strb	r2, [r3, #1]
 8005074:	e00f      	b.n	8005096 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	3304      	adds	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050a2:	883b      	ldrh	r3, [r7, #0]
 80050a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	78ba      	ldrb	r2, [r7, #2]
 80050b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050c4:	78bb      	ldrb	r3, [r7, #2]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d102      	bne.n	80050d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_PCD_EP_Open+0xae>
 80050da:	2302      	movs	r3, #2
 80050dc:	e00e      	b.n	80050fc <HAL_PCD_EP_Open+0xcc>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 faf9 	bl	80076e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80050fa:	7afb      	ldrb	r3, [r7, #11]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da0f      	bge.n	8005138 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	f003 020f 	and.w	r2, r3, #15
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3310      	adds	r3, #16
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	3304      	adds	r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	705a      	strb	r2, [r3, #1]
 8005136:	e00f      	b.n	8005158 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 020f 	and.w	r2, r3, #15
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	3304      	adds	r3, #4
 8005150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	b2da      	uxtb	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_PCD_EP_Close+0x6e>
 800516e:	2302      	movs	r3, #2
 8005170:	e00e      	b.n	8005190 <HAL_PCD_EP_Close+0x8c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	f002 fb37 	bl	80077f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	460b      	mov	r3, r1
 80051a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2200      	movs	r2, #0
 80051d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051da:	7afb      	ldrb	r3, [r7, #11]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	799b      	ldrb	r3, [r3, #6]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	799b      	ldrb	r3, [r3, #6]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	f002 fbd4 	bl	80079ac <USB_EPStartXfer>

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005230:	681b      	ldr	r3, [r3, #0]
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	460b      	mov	r3, r1
 800524c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	3310      	adds	r3, #16
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	3304      	adds	r3, #4
 8005264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2201      	movs	r2, #1
 800527c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	b2da      	uxtb	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	799b      	ldrb	r3, [r3, #6]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	799b      	ldrb	r3, [r3, #6]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	f002 fb82 	bl	80079ac <USB_EPStartXfer>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	7912      	ldrb	r2, [r2, #4]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e04f      	b.n	8005370 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	da0f      	bge.n	80052f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	4613      	mov	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	3310      	adds	r3, #16
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4413      	add	r3, r2
 80052ec:	3304      	adds	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	705a      	strb	r2, [r3, #1]
 80052f6:	e00d      	b.n	8005314 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_PCD_EP_SetStall+0x82>
 8005330:	2302      	movs	r3, #2
 8005332:	e01d      	b.n	8005370 <HAL_PCD_EP_SetStall+0xbe>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	f002 ff10 	bl	8008168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7999      	ldrb	r1, [r3, #6]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005360:	461a      	mov	r2, r3
 8005362:	f003 f901 	bl	8008568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	7912      	ldrb	r2, [r2, #4]
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e042      	b.n	800541c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da0f      	bge.n	80053be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	f003 020f 	and.w	r2, r3, #15
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	3310      	adds	r3, #16
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	705a      	strb	r2, [r3, #1]
 80053bc:	e00f      	b.n	80053de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	3304      	adds	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_PCD_EP_ClrStall+0x86>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e00e      	b.n	800541c <HAL_PCD_EP_ClrStall+0xa4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	4618      	mov	r0, r3
 800540e:	f002 ff19 	bl	8008244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005434:	2b00      	cmp	r3, #0
 8005436:	da0c      	bge.n	8005452 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	3310      	adds	r3, #16
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	3304      	adds	r3, #4
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e00c      	b.n	800546c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	4618      	mov	r0, r3
 8005474:	f002 fd38 	bl	8007ee8 <USB_EPStopXfer>
 8005478:	4603      	mov	r3, r0
 800547a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800547c:	7afb      	ldrb	r3, [r7, #11]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b08a      	sub	sp, #40	@ 0x28
 800548a:	af02      	add	r7, sp, #8
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d901      	bls.n	80054be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e06b      	b.n	8005596 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d902      	bls.n	80054da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3303      	adds	r3, #3
 80054de:	089b      	lsrs	r3, r3, #2
 80054e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054e2:	e02a      	b.n	800553a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d902      	bls.n	8005500 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	3303      	adds	r3, #3
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68d9      	ldr	r1, [r3, #12]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	4603      	mov	r3, r0
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f002 fd8d 	bl	800803c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	d809      	bhi.n	8005564 <PCD_WriteEmptyTxFifo+0xde>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005558:	429a      	cmp	r2, r3
 800555a:	d203      	bcs.n	8005564 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1bf      	bne.n	80054e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	429a      	cmp	r2, r3
 800556e:	d811      	bhi.n	8005594 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	2201      	movs	r2, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	43db      	mvns	r3, r3
 800558a:	6939      	ldr	r1, [r7, #16]
 800558c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	333c      	adds	r3, #60	@ 0x3c
 80055b8:	3304      	adds	r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	799b      	ldrb	r3, [r3, #6]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d17b      	bne.n	80056ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4a61      	ldr	r2, [pc, #388]	@ (8005768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	f240 80b9 	bls.w	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80b3 	beq.w	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005608:	6093      	str	r3, [r2, #8]
 800560a:	e0a7      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005622:	461a      	mov	r2, r3
 8005624:	2320      	movs	r3, #32
 8005626:	6093      	str	r3, [r2, #8]
 8005628:	e098      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 8093 	bne.w	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4a4b      	ldr	r2, [pc, #300]	@ (8005768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d90f      	bls.n	800565e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	461a      	mov	r2, r3
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	e07e      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	3304      	adds	r3, #4
 8005672:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	0159      	lsls	r1, r3, #5
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	440b      	add	r3, r1
 8005680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d114      	bne.n	80056c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056a8:	461a      	mov	r2, r3
 80056aa:	2101      	movs	r1, #1
 80056ac:	f002 ff5c 	bl	8008568 <USB_EP0_OutStart>
 80056b0:	e006      	b.n	80056c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f005 f9b6 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
 80056cc:	e046      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4a26      	ldr	r2, [pc, #152]	@ (800576c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d124      	bne.n	8005720 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	461a      	mov	r2, r3
 80056ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	e032      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800570c:	461a      	mov	r2, r3
 800570e:	2320      	movs	r3, #32
 8005710:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f005 f98d 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
 800571e:	e01d      	b.n	800575c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d114      	bne.n	8005750 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d108      	bne.n	8005750 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005748:	461a      	mov	r2, r3
 800574a:	2100      	movs	r1, #0
 800574c:	f002 ff0c 	bl	8008568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f005 f96e 	bl	800aa38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	4f54300a 	.word	0x4f54300a
 800576c:	4f54310a 	.word	0x4f54310a

08005770 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	333c      	adds	r3, #60	@ 0x3c
 8005788:	3304      	adds	r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a15      	ldr	r2, [pc, #84]	@ (80057f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d90e      	bls.n	80057c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f005 f925 	bl	800aa14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d90c      	bls.n	80057ec <PCD_EP_OutSetupPacket_int+0x7c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	799b      	ldrb	r3, [r3, #6]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d108      	bne.n	80057ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057e4:	461a      	mov	r2, r3
 80057e6:	2101      	movs	r1, #1
 80057e8:	f002 febe 	bl	8008568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	4f54300a 	.word	0x4f54300a

080057fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
 8005808:	4613      	mov	r3, r2
 800580a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d107      	bne.n	800582a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800581a:	883b      	ldrh	r3, [r7, #0]
 800581c:	0419      	lsls	r1, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	430a      	orrs	r2, r1
 8005826:	629a      	str	r2, [r3, #40]	@ 0x28
 8005828:	e028      	b.n	800587c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	e00d      	b.n	800585a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3340      	adds	r3, #64	@ 0x40
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4413      	add	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	3301      	adds	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	3b01      	subs	r3, #1
 8005860:	429a      	cmp	r2, r3
 8005862:	d3ec      	bcc.n	800583e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005864:	883b      	ldrh	r3, [r7, #0]
 8005866:	0418      	lsls	r0, r3, #16
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	3b01      	subs	r3, #1
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	4302      	orrs	r2, r0
 8005874:	3340      	adds	r3, #64	@ 0x40
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e267      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d075      	beq.n	80059ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058e2:	4b88      	ldr	r3, [pc, #544]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d00c      	beq.n	8005908 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ee:	4b85      	ldr	r3, [pc, #532]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d112      	bne.n	8005920 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fa:	4b82      	ldr	r3, [pc, #520]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005906:	d10b      	bne.n	8005920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	4b7e      	ldr	r3, [pc, #504]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05b      	beq.n	80059cc <HAL_RCC_OscConfig+0x108>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d157      	bne.n	80059cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e242      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005928:	d106      	bne.n	8005938 <HAL_RCC_OscConfig+0x74>
 800592a:	4b76      	ldr	r3, [pc, #472]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a75      	ldr	r2, [pc, #468]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e01d      	b.n	8005974 <HAL_RCC_OscConfig+0xb0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x98>
 8005942:	4b70      	ldr	r3, [pc, #448]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6f      	ldr	r2, [pc, #444]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6c      	ldr	r2, [pc, #432]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0xb0>
 800595c:	4b69      	ldr	r3, [pc, #420]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a68      	ldr	r2, [pc, #416]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	4b66      	ldr	r3, [pc, #408]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a65      	ldr	r2, [pc, #404]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 800596e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fd fbe0 	bl	8003140 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005984:	f7fd fbdc 	bl	8003140 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b64      	cmp	r3, #100	@ 0x64
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e207      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b5b      	ldr	r3, [pc, #364]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0xc0>
 80059a2:	e014      	b.n	80059ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fd fbcc 	bl	8003140 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ac:	f7fd fbc8 	bl	8003140 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	@ 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e1f3      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059be:	4b51      	ldr	r3, [pc, #324]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0xe8>
 80059ca:	e000      	b.n	80059ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d063      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059da:	4b4a      	ldr	r3, [pc, #296]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e6:	4b47      	ldr	r3, [pc, #284]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d11c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f2:	4b44      	ldr	r3, [pc, #272]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d116      	bne.n	8005a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fe:	4b41      	ldr	r3, [pc, #260]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_RCC_OscConfig+0x152>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d001      	beq.n	8005a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e1c7      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a16:	4b3b      	ldr	r3, [pc, #236]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4937      	ldr	r1, [pc, #220]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2a:	e03a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d020      	beq.n	8005a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a34:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <HAL_RCC_OscConfig+0x244>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fd fb81 	bl	8003140 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a42:	f7fd fb7d 	bl	8003140 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e1a8      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a54:	4b2b      	ldr	r3, [pc, #172]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a60:	4b28      	ldr	r3, [pc, #160]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4925      	ldr	r1, [pc, #148]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]
 8005a74:	e015      	b.n	8005aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a76:	4b24      	ldr	r3, [pc, #144]	@ (8005b08 <HAL_RCC_OscConfig+0x244>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fb60 	bl	8003140 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a84:	f7fd fb5c 	bl	8003140 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e187      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a96:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d036      	beq.n	8005b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab6:	4b15      	ldr	r3, [pc, #84]	@ (8005b0c <HAL_RCC_OscConfig+0x248>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abc:	f7fd fb40 	bl	8003140 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac4:	f7fd fb3c 	bl	8003140 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e167      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x200>
 8005ae2:	e01b      	b.n	8005b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae4:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <HAL_RCC_OscConfig+0x248>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aea:	f7fd fb29 	bl	8003140 <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af0:	e00e      	b.n	8005b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af2:	f7fd fb25 	bl	8003140 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d907      	bls.n	8005b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e150      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
 8005b04:	40023800 	.word	0x40023800
 8005b08:	42470000 	.word	0x42470000
 8005b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b10:	4b88      	ldr	r3, [pc, #544]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ea      	bne.n	8005af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8097 	beq.w	8005c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2e:	4b81      	ldr	r3, [pc, #516]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	4a7c      	ldr	r2, [pc, #496]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	4b77      	ldr	r3, [pc, #476]	@ (8005d38 <HAL_RCC_OscConfig+0x474>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d118      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b66:	4b74      	ldr	r3, [pc, #464]	@ (8005d38 <HAL_RCC_OscConfig+0x474>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a73      	ldr	r2, [pc, #460]	@ (8005d38 <HAL_RCC_OscConfig+0x474>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b72:	f7fd fae5 	bl	8003140 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7a:	f7fd fae1 	bl	8003140 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e10c      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005d38 <HAL_RCC_OscConfig+0x474>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_OscConfig+0x2ea>
 8005ba0:	4b64      	ldr	r3, [pc, #400]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba4:	4a63      	ldr	r2, [pc, #396]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bac:	e01c      	b.n	8005be8 <HAL_RCC_OscConfig+0x324>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x30c>
 8005bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bba:	4a5e      	ldr	r2, [pc, #376]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bce:	e00b      	b.n	8005be8 <HAL_RCC_OscConfig+0x324>
 8005bd0:	4b58      	ldr	r3, [pc, #352]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	4a57      	ldr	r2, [pc, #348]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bdc:	4b55      	ldr	r3, [pc, #340]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a54      	ldr	r2, [pc, #336]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005be2:	f023 0304 	bic.w	r3, r3, #4
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd faa6 	bl	8003140 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fd faa2 	bl	8003140 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e0cb      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0e:	4b49      	ldr	r3, [pc, #292]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0ee      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x334>
 8005c1a:	e014      	b.n	8005c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1c:	f7fd fa90 	bl	8003140 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c24:	f7fd fa8c 	bl	8003140 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0b5      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ee      	bne.n	8005c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4c:	4b39      	ldr	r3, [pc, #228]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	4a38      	ldr	r2, [pc, #224]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80a1 	beq.w	8005da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c62:	4b34      	ldr	r3, [pc, #208]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d05c      	beq.n	8005d28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d141      	bne.n	8005cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c76:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <HAL_RCC_OscConfig+0x478>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fd fa60 	bl	8003140 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fd fa5c 	bl	8003140 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e087      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c96:	4b27      	ldr	r3, [pc, #156]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	019b      	lsls	r3, r3, #6
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	061b      	lsls	r3, r3, #24
 8005cc6:	491b      	ldr	r1, [pc, #108]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d3c <HAL_RCC_OscConfig+0x478>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd2:	f7fd fa35 	bl	8003140 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fd fa31 	bl	8003140 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e05c      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cec:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x416>
 8005cf8:	e054      	b.n	8005da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b10      	ldr	r3, [pc, #64]	@ (8005d3c <HAL_RCC_OscConfig+0x478>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd fa1e 	bl	8003140 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fd fa1a 	bl	8003140 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e045      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x444>
 8005d26:	e03d      	b.n	8005da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e038      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d40:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <HAL_RCC_OscConfig+0x4ec>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d028      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d121      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d11a      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d70:	4013      	ands	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d111      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800

08005db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0cc      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b68      	ldr	r3, [pc, #416]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d90c      	bls.n	8005df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b65      	ldr	r3, [pc, #404]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b63      	ldr	r3, [pc, #396]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0b8      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d020      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e08:	4b59      	ldr	r3, [pc, #356]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a58      	ldr	r2, [pc, #352]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e20:	4b53      	ldr	r3, [pc, #332]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4a52      	ldr	r2, [pc, #328]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e2c:	4b50      	ldr	r3, [pc, #320]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	494d      	ldr	r1, [pc, #308]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d044      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d107      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e52:	4b47      	ldr	r3, [pc, #284]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d119      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e07f      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d107      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e72:	4b3f      	ldr	r3, [pc, #252]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e06f      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e82:	4b3b      	ldr	r3, [pc, #236]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e067      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e92:	4b37      	ldr	r3, [pc, #220]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4934      	ldr	r1, [pc, #208]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea4:	f7fd f94c 	bl	8003140 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eac:	f7fd f948 	bl	8003140 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e04f      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 020c 	and.w	r2, r3, #12
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d1eb      	bne.n	8005eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b25      	ldr	r3, [pc, #148]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d20c      	bcs.n	8005efc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b22      	ldr	r3, [pc, #136]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b20      	ldr	r3, [pc, #128]	@ (8005f6c <HAL_RCC_ClockConfig+0x1b8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e032      	b.n	8005f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f08:	4b19      	ldr	r3, [pc, #100]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4916      	ldr	r1, [pc, #88]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f26:	4b12      	ldr	r3, [pc, #72]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	490e      	ldr	r1, [pc, #56]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f3a:	f000 f821 	bl	8005f80 <HAL_RCC_GetSysClockFreq>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	490a      	ldr	r1, [pc, #40]	@ (8005f74 <HAL_RCC_ClockConfig+0x1c0>)
 8005f4c:	5ccb      	ldrb	r3, [r1, r3]
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	4a09      	ldr	r2, [pc, #36]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c4>)
 8005f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f56:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fd f8ac 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023c00 	.word	0x40023c00
 8005f70:	40023800 	.word	0x40023800
 8005f74:	0800e624 	.word	0x0800e624
 8005f78:	20000018 	.word	0x20000018
 8005f7c:	2000002c 	.word	0x2000002c

08005f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f84:	b094      	sub	sp, #80	@ 0x50
 8005f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f98:	4b79      	ldr	r3, [pc, #484]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d00d      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	f200 80e1 	bhi.w	800616c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d003      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x3a>
 8005fb2:	e0db      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fb4:	4b73      	ldr	r3, [pc, #460]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fb8:	e0db      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fba:	4b73      	ldr	r3, [pc, #460]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fbe:	e0d8      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fca:	4b6d      	ldr	r3, [pc, #436]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d063      	beq.n	800609e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	099b      	lsrs	r3, r3, #6
 8005fdc:	2200      	movs	r2, #0
 8005fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f04f 0000 	mov.w	r0, #0
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	0159      	lsls	r1, r3, #5
 8006000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006004:	0150      	lsls	r0, r2, #5
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4621      	mov	r1, r4
 800600c:	1a51      	subs	r1, r2, r1
 800600e:	6139      	str	r1, [r7, #16]
 8006010:	4629      	mov	r1, r5
 8006012:	eb63 0301 	sbc.w	r3, r3, r1
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006024:	4659      	mov	r1, fp
 8006026:	018b      	lsls	r3, r1, #6
 8006028:	4651      	mov	r1, sl
 800602a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800602e:	4651      	mov	r1, sl
 8006030:	018a      	lsls	r2, r1, #6
 8006032:	4651      	mov	r1, sl
 8006034:	ebb2 0801 	subs.w	r8, r2, r1
 8006038:	4659      	mov	r1, fp
 800603a:	eb63 0901 	sbc.w	r9, r3, r1
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800604a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800604e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006052:	4690      	mov	r8, r2
 8006054:	4699      	mov	r9, r3
 8006056:	4623      	mov	r3, r4
 8006058:	eb18 0303 	adds.w	r3, r8, r3
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	462b      	mov	r3, r5
 8006060:	eb49 0303 	adc.w	r3, r9, r3
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006072:	4629      	mov	r1, r5
 8006074:	024b      	lsls	r3, r1, #9
 8006076:	4621      	mov	r1, r4
 8006078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800607c:	4621      	mov	r1, r4
 800607e:	024a      	lsls	r2, r1, #9
 8006080:	4610      	mov	r0, r2
 8006082:	4619      	mov	r1, r3
 8006084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006086:	2200      	movs	r2, #0
 8006088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800608a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800608c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006090:	f7fa fdda 	bl	8000c48 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4613      	mov	r3, r2
 800609a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800609c:	e058      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609e:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	099b      	lsrs	r3, r3, #6
 80060a4:	2200      	movs	r2, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	4611      	mov	r1, r2
 80060aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	f04f 0000 	mov.w	r0, #0
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	0159      	lsls	r1, r3, #5
 80060c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ca:	0150      	lsls	r0, r2, #5
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4641      	mov	r1, r8
 80060d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060f0:	ebb2 040a 	subs.w	r4, r2, sl
 80060f4:	eb63 050b 	sbc.w	r5, r3, fp
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	00eb      	lsls	r3, r5, #3
 8006102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006106:	00e2      	lsls	r2, r4, #3
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	4643      	mov	r3, r8
 800610e:	18e3      	adds	r3, r4, r3
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	464b      	mov	r3, r9
 8006114:	eb45 0303 	adc.w	r3, r5, r3
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006126:	4629      	mov	r1, r5
 8006128:	028b      	lsls	r3, r1, #10
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006130:	4621      	mov	r1, r4
 8006132:	028a      	lsls	r2, r1, #10
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613a:	2200      	movs	r2, #0
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	61fa      	str	r2, [r7, #28]
 8006140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006144:	f7fa fd80 	bl	8000c48 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4613      	mov	r3, r2
 800614e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x200>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	3301      	adds	r3, #1
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800616a:	e002      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x204>)
 800616e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006174:	4618      	mov	r0, r3
 8006176:	3750      	adds	r7, #80	@ 0x50
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	00f42400 	.word	0x00f42400
 8006188:	007a1200 	.word	0x007a1200

0800618c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006190:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000018 	.word	0x20000018

080061a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e07b      	b.n	80062ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d108      	bne.n	80061d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061c6:	d009      	beq.n	80061dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	61da      	str	r2, [r3, #28]
 80061ce:	e005      	b.n	80061dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc fd20 	bl	8002c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006260:	ea42 0103 	orr.w	r1, r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	f003 0104 	and.w	r1, r3, #4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	f003 0210 	and.w	r2, r3, #16
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800629c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b088      	sub	sp, #32
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c6:	f7fc ff3b 	bl	8003140 <HAL_GetTick>
 80062ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d001      	beq.n	80062e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
 80062de:	e12a      	b.n	8006536 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Transmit+0x36>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e122      	b.n	8006536 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_SPI_Transmit+0x48>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e11b      	b.n	8006536 <HAL_SPI_Transmit+0x280>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2203      	movs	r2, #3
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800634c:	d10f      	bne.n	800636e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800635c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d007      	beq.n	800638c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006394:	d152      	bne.n	800643c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_Transmit+0xee>
 800639e:	8b7b      	ldrh	r3, [r7, #26]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d145      	bne.n	8006430 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063c8:	e032      	b.n	8006430 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d112      	bne.n	80063fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063fc:	e018      	b.n	8006430 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063fe:	f7fc fe9f 	bl	8003140 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d803      	bhi.n	8006416 <HAL_SPI_Transmit+0x160>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d102      	bne.n	800641c <HAL_SPI_Transmit+0x166>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e082      	b.n	8006536 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1c7      	bne.n	80063ca <HAL_SPI_Transmit+0x114>
 800643a:	e053      	b.n	80064e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_SPI_Transmit+0x194>
 8006444:	8b7b      	ldrh	r3, [r7, #26]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d147      	bne.n	80064da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006470:	e033      	b.n	80064da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d113      	bne.n	80064a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064a6:	e018      	b.n	80064da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a8:	f7fc fe4a 	bl	8003140 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d803      	bhi.n	80064c0 <HAL_SPI_Transmit+0x20a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d102      	bne.n	80064c6 <HAL_SPI_Transmit+0x210>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e02d      	b.n	8006536 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1c6      	bne.n	8006472 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa59 	bl	80069a0 <SPI_EndRxTxTransaction>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006534:	2300      	movs	r3, #0
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b08a      	sub	sp, #40	@ 0x28
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006550:	f7fc fdf6 	bl	8003140 <HAL_GetTick>
 8006554:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800655c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006564:	887b      	ldrh	r3, [r7, #2]
 8006566:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006568:	7ffb      	ldrb	r3, [r7, #31]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d00c      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x4a>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006574:	d106      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x46>
 800657e:	7ffb      	ldrb	r3, [r7, #31]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d001      	beq.n	8006588 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
 8006586:	e17f      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_SPI_TransmitReceive+0x5c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_SPI_TransmitReceive+0x5c>
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e174      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x6e>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e16d      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2205      	movs	r2, #5
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	887a      	ldrh	r2, [r7, #2]
 80065de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	887a      	ldrh	r2, [r7, #2]
 80065ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	887a      	ldrh	r2, [r7, #2]
 80065f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d007      	beq.n	800661c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800661a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d17e      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_SPI_TransmitReceive+0xf6>
 800662e:	8afb      	ldrh	r3, [r7, #22]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d16c      	bne.n	800670e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006658:	e059      	b.n	800670e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d11b      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x162>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x162>
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	2b01      	cmp	r3, #1
 8006676:	d113      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x1a4>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d014      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	b292      	uxth	r2, r2
 80066c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	1c9a      	adds	r2, r3, #2
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066e2:	f7fc fd2d 	bl	8003140 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d80d      	bhi.n	800670e <HAL_SPI_TransmitReceive+0x1d0>
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d009      	beq.n	800670e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e0bc      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1a0      	bne.n	800665a <HAL_SPI_TransmitReceive+0x11c>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d19b      	bne.n	800665a <HAL_SPI_TransmitReceive+0x11c>
 8006722:	e082      	b.n	800682a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_TransmitReceive+0x1f4>
 800672c:	8afb      	ldrh	r3, [r7, #22]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d171      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006758:	e05d      	b.n	8006816 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d11c      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x264>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x264>
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	2b01      	cmp	r3, #1
 8006776:	d114      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d119      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x2a6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067e4:	f7fc fcac 	bl	8003140 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d803      	bhi.n	80067fc <HAL_SPI_TransmitReceive+0x2be>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d102      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x2c4>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e038      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d19c      	bne.n	800675a <HAL_SPI_TransmitReceive+0x21c>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d197      	bne.n	800675a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f8b6 	bl	80069a0 <SPI_EndRxTxTransaction>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e01d      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006886:	2300      	movs	r3, #0
  }
}
 8006888:	4618      	mov	r0, r3
 800688a:	3728      	adds	r7, #40	@ 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068a0:	f7fc fc4e 	bl	8003140 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068b0:	f7fc fc46 	bl	8003140 <HAL_GetTick>
 80068b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068b6:	4b39      	ldr	r3, [pc, #228]	@ (800699c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	015b      	lsls	r3, r3, #5
 80068bc:	0d1b      	lsrs	r3, r3, #20
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	fb02 f303 	mul.w	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c6:	e054      	b.n	8006972 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d050      	beq.n	8006972 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068d0:	f7fc fc36 	bl	8003140 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d902      	bls.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d13d      	bne.n	8006962 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068fe:	d111      	bne.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006908:	d004      	beq.n	8006914 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006912:	d107      	bne.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800692c:	d10f      	bne.n	800694e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800694c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e017      	b.n	8006992 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3b01      	subs	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	429a      	cmp	r2, r3
 800698e:	d19b      	bne.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000018 	.word	0x20000018

080069a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2201      	movs	r2, #1
 80069b4:	2102      	movs	r1, #2
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff ff6a 	bl	8006890 <SPI_WaitFlagStateUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e032      	b.n	8006a38 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a40 <SPI_EndRxTxTransaction+0xa0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a44 <SPI_EndRxTxTransaction+0xa4>)
 80069d8:	fba2 2303 	umull	r2, r3, r2, r3
 80069dc:	0d5b      	lsrs	r3, r3, #21
 80069de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069f0:	d112      	bne.n	8006a18 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2180      	movs	r1, #128	@ 0x80
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ff47 	bl	8006890 <SPI_WaitFlagStateUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d016      	beq.n	8006a36 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	f043 0220 	orr.w	r2, r3, #32
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e00f      	b.n	8006a38 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2e:	2b80      	cmp	r3, #128	@ 0x80
 8006a30:	d0f2      	beq.n	8006a18 <SPI_EndRxTxTransaction+0x78>
 8006a32:	e000      	b.n	8006a36 <SPI_EndRxTxTransaction+0x96>
        break;
 8006a34:	bf00      	nop
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000018 	.word	0x20000018
 8006a44:	165e9f81 	.word	0x165e9f81

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e041      	b.n	8006ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fc f92c 	bl	8002ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 f8f4 	bl	8006c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_TIM_ConfigClockSource+0x1c>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e0b4      	b.n	8006c6c <HAL_TIM_ConfigClockSource+0x186>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b3a:	d03e      	beq.n	8006bba <HAL_TIM_ConfigClockSource+0xd4>
 8006b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b40:	f200 8087 	bhi.w	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b48:	f000 8086 	beq.w	8006c58 <HAL_TIM_ConfigClockSource+0x172>
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b50:	d87f      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b52:	2b70      	cmp	r3, #112	@ 0x70
 8006b54:	d01a      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0xa6>
 8006b56:	2b70      	cmp	r3, #112	@ 0x70
 8006b58:	d87b      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b5a:	2b60      	cmp	r3, #96	@ 0x60
 8006b5c:	d050      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0x11a>
 8006b5e:	2b60      	cmp	r3, #96	@ 0x60
 8006b60:	d877      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	2b50      	cmp	r3, #80	@ 0x50
 8006b64:	d03c      	beq.n	8006be0 <HAL_TIM_ConfigClockSource+0xfa>
 8006b66:	2b50      	cmp	r3, #80	@ 0x50
 8006b68:	d873      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	d058      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x13a>
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d86f      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b72:	2b30      	cmp	r3, #48	@ 0x30
 8006b74:	d064      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x15a>
 8006b76:	2b30      	cmp	r3, #48	@ 0x30
 8006b78:	d86b      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d060      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x15a>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d867      	bhi.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d05c      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x15a>
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d05a      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x15a>
 8006b8a:	e062      	b.n	8006c52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b9c:	f000 f990 	bl	8006ec0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
      break;
 8006bb8:	e04f      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bca:	f000 f979 	bl	8006ec0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bdc:	609a      	str	r2, [r3, #8]
      break;
 8006bde:	e03c      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bec:	461a      	mov	r2, r3
 8006bee:	f000 f8ed 	bl	8006dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2150      	movs	r1, #80	@ 0x50
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f946 	bl	8006e8a <TIM_ITRx_SetConfig>
      break;
 8006bfe:	e02c      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f000 f90c 	bl	8006e2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2160      	movs	r1, #96	@ 0x60
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f936 	bl	8006e8a <TIM_ITRx_SetConfig>
      break;
 8006c1e:	e01c      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f000 f8cd 	bl	8006dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2140      	movs	r1, #64	@ 0x40
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f926 	bl	8006e8a <TIM_ITRx_SetConfig>
      break;
 8006c3e:	e00c      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f000 f91d 	bl	8006e8a <TIM_ITRx_SetConfig>
      break;
 8006c50:	e003      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	73fb      	strb	r3, [r7, #15]
      break;
 8006c56:	e000      	b.n	8006c5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a46      	ldr	r2, [pc, #280]	@ (8006da0 <TIM_Base_SetConfig+0x12c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c92:	d00f      	beq.n	8006cb4 <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a43      	ldr	r2, [pc, #268]	@ (8006da4 <TIM_Base_SetConfig+0x130>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a42      	ldr	r2, [pc, #264]	@ (8006da8 <TIM_Base_SetConfig+0x134>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_Base_SetConfig+0x40>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a41      	ldr	r2, [pc, #260]	@ (8006dac <TIM_Base_SetConfig+0x138>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a40      	ldr	r2, [pc, #256]	@ (8006db0 <TIM_Base_SetConfig+0x13c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d108      	bne.n	8006cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a35      	ldr	r2, [pc, #212]	@ (8006da0 <TIM_Base_SetConfig+0x12c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d02b      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd4:	d027      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a32      	ldr	r2, [pc, #200]	@ (8006da4 <TIM_Base_SetConfig+0x130>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d023      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a31      	ldr	r2, [pc, #196]	@ (8006da8 <TIM_Base_SetConfig+0x134>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01f      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a30      	ldr	r2, [pc, #192]	@ (8006dac <TIM_Base_SetConfig+0x138>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01b      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8006db0 <TIM_Base_SetConfig+0x13c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d017      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8006db4 <TIM_Base_SetConfig+0x140>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a2d      	ldr	r2, [pc, #180]	@ (8006db8 <TIM_Base_SetConfig+0x144>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00f      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2c      	ldr	r2, [pc, #176]	@ (8006dbc <TIM_Base_SetConfig+0x148>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc0 <TIM_Base_SetConfig+0x14c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc4 <TIM_Base_SetConfig+0x150>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a29      	ldr	r2, [pc, #164]	@ (8006dc8 <TIM_Base_SetConfig+0x154>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d108      	bne.n	8006d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a10      	ldr	r2, [pc, #64]	@ (8006da0 <TIM_Base_SetConfig+0x12c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_Base_SetConfig+0xf8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a12      	ldr	r2, [pc, #72]	@ (8006db0 <TIM_Base_SetConfig+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d103      	bne.n	8006d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d105      	bne.n	8006d92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f023 0201 	bic.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]
  }
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800
 8006dc0:	40001800 	.word	0x40001800
 8006dc4:	40001c00 	.word	0x40001c00
 8006dc8:	40002000 	.word	0x40002000

08006dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0201 	bic.w	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f023 030a 	bic.w	r3, r3, #10
 8006e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b087      	sub	sp, #28
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f023 0210 	bic.w	r2, r3, #16
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f043 0307 	orr.w	r3, r3, #7
 8006eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	021a      	lsls	r2, r3, #8
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	609a      	str	r2, [r3, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e05a      	b.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a21      	ldr	r2, [pc, #132]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f64:	d01d      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a17      	ldr	r2, [pc, #92]	@ (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10c      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40010400 	.word	0x40010400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40001800 	.word	0x40001800

08006ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	f107 001c 	add.w	r0, r7, #28
 8007006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800700a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800700e:	2b01      	cmp	r3, #1
 8007010:	d123      	bne.n	800705a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800703a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800703e:	2b01      	cmp	r3, #1
 8007040:	d105      	bne.n	800704e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fae8 	bl	8008624 <USB_CoreReset>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
 8007058:	e01b      	b.n	8007092 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fadc 	bl	8008624 <USB_CoreReset>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007070:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	639a      	str	r2, [r3, #56]	@ 0x38
 8007084:	e005      	b.n	8007092 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007092:	7fbb      	ldrb	r3, [r7, #30]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10b      	bne.n	80070b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f043 0206 	orr.w	r2, r3, #6
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070bc:	b004      	add	sp, #16
 80070be:	4770      	bx	lr

080070c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d165      	bne.n	80071a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4a41      	ldr	r2, [pc, #260]	@ (80071dc <USB_SetTurnaroundTime+0x11c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d906      	bls.n	80070ea <USB_SetTurnaroundTime+0x2a>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4a40      	ldr	r2, [pc, #256]	@ (80071e0 <USB_SetTurnaroundTime+0x120>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d202      	bcs.n	80070ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070e4:	230f      	movs	r3, #15
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e062      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4a3c      	ldr	r2, [pc, #240]	@ (80071e0 <USB_SetTurnaroundTime+0x120>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d306      	bcc.n	8007100 <USB_SetTurnaroundTime+0x40>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	4a3b      	ldr	r2, [pc, #236]	@ (80071e4 <USB_SetTurnaroundTime+0x124>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d202      	bcs.n	8007100 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070fa:	230e      	movs	r3, #14
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	e057      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4a38      	ldr	r2, [pc, #224]	@ (80071e4 <USB_SetTurnaroundTime+0x124>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d306      	bcc.n	8007116 <USB_SetTurnaroundTime+0x56>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4a37      	ldr	r2, [pc, #220]	@ (80071e8 <USB_SetTurnaroundTime+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d202      	bcs.n	8007116 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007110:	230d      	movs	r3, #13
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e04c      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	4a33      	ldr	r2, [pc, #204]	@ (80071e8 <USB_SetTurnaroundTime+0x128>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d306      	bcc.n	800712c <USB_SetTurnaroundTime+0x6c>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4a32      	ldr	r2, [pc, #200]	@ (80071ec <USB_SetTurnaroundTime+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d802      	bhi.n	800712c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007126:	230c      	movs	r3, #12
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e041      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4a2f      	ldr	r2, [pc, #188]	@ (80071ec <USB_SetTurnaroundTime+0x12c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d906      	bls.n	8007142 <USB_SetTurnaroundTime+0x82>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4a2e      	ldr	r2, [pc, #184]	@ (80071f0 <USB_SetTurnaroundTime+0x130>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d802      	bhi.n	8007142 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800713c:	230b      	movs	r3, #11
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e036      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4a2a      	ldr	r2, [pc, #168]	@ (80071f0 <USB_SetTurnaroundTime+0x130>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d906      	bls.n	8007158 <USB_SetTurnaroundTime+0x98>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4a29      	ldr	r2, [pc, #164]	@ (80071f4 <USB_SetTurnaroundTime+0x134>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d802      	bhi.n	8007158 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007152:	230a      	movs	r3, #10
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e02b      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4a26      	ldr	r2, [pc, #152]	@ (80071f4 <USB_SetTurnaroundTime+0x134>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d906      	bls.n	800716e <USB_SetTurnaroundTime+0xae>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4a25      	ldr	r2, [pc, #148]	@ (80071f8 <USB_SetTurnaroundTime+0x138>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d202      	bcs.n	800716e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007168:	2309      	movs	r3, #9
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e020      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4a21      	ldr	r2, [pc, #132]	@ (80071f8 <USB_SetTurnaroundTime+0x138>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d306      	bcc.n	8007184 <USB_SetTurnaroundTime+0xc4>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4a20      	ldr	r2, [pc, #128]	@ (80071fc <USB_SetTurnaroundTime+0x13c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d802      	bhi.n	8007184 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800717e:	2308      	movs	r3, #8
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e015      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4a1d      	ldr	r2, [pc, #116]	@ (80071fc <USB_SetTurnaroundTime+0x13c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d906      	bls.n	800719a <USB_SetTurnaroundTime+0xda>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <USB_SetTurnaroundTime+0x140>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d202      	bcs.n	800719a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007194:	2307      	movs	r3, #7
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e00a      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800719a:	2306      	movs	r3, #6
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e007      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d102      	bne.n	80071ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071a6:	2309      	movs	r3, #9
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e001      	b.n	80071b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071ac:	2309      	movs	r3, #9
 80071ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	029b      	lsls	r3, r3, #10
 80071c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80071c8:	431a      	orrs	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	00d8acbf 	.word	0x00d8acbf
 80071e0:	00e4e1c0 	.word	0x00e4e1c0
 80071e4:	00f42400 	.word	0x00f42400
 80071e8:	01067380 	.word	0x01067380
 80071ec:	011a499f 	.word	0x011a499f
 80071f0:	01312cff 	.word	0x01312cff
 80071f4:	014ca43f 	.word	0x014ca43f
 80071f8:	016e3600 	.word	0x016e3600
 80071fc:	01a6ab1f 	.word	0x01a6ab1f
 8007200:	01e84800 	.word	0x01e84800

08007204 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f043 0201 	orr.w	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f023 0201 	bic.w	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d115      	bne.n	8007296 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007276:	200a      	movs	r0, #10
 8007278:	f7fb ff6e 	bl	8003158 <HAL_Delay>
      ms += 10U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	330a      	adds	r3, #10
 8007280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 f93f 	bl	8008506 <USB_GetMode>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d01e      	beq.n	80072cc <USB_SetCurrentMode+0x84>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2bc7      	cmp	r3, #199	@ 0xc7
 8007292:	d9f0      	bls.n	8007276 <USB_SetCurrentMode+0x2e>
 8007294:	e01a      	b.n	80072cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d115      	bne.n	80072c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072a8:	200a      	movs	r0, #10
 80072aa:	f7fb ff55 	bl	8003158 <HAL_Delay>
      ms += 10U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	330a      	adds	r3, #10
 80072b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f926 	bl	8008506 <USB_GetMode>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <USB_SetCurrentMode+0x84>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80072c4:	d9f0      	bls.n	80072a8 <USB_SetCurrentMode+0x60>
 80072c6:	e001      	b.n	80072cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e005      	b.n	80072d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80072d0:	d101      	bne.n	80072d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e0:	b084      	sub	sp, #16
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e009      	b.n	8007314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3340      	adds	r3, #64	@ 0x40
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b0e      	cmp	r3, #14
 8007318:	d9f2      	bls.n	8007300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800731a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11c      	bne.n	800735c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007352:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	639a      	str	r2, [r3, #56]	@ 0x38
 800735a:	e00b      	b.n	8007374 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007360:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800737a:	461a      	mov	r2, r3
 800737c:	2300      	movs	r3, #0
 800737e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007380:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10d      	bne.n	80073a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007390:	2100      	movs	r1, #0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f968 	bl	8007668 <USB_SetDevSpeed>
 8007398:	e008      	b.n	80073ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800739a:	2101      	movs	r1, #1
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f963 	bl	8007668 <USB_SetDevSpeed>
 80073a2:	e003      	b.n	80073ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073a4:	2103      	movs	r1, #3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f95e 	bl	8007668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ac:	2110      	movs	r1, #16
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8fa 	bl	80075a8 <USB_FlushTxFifo>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f924 	bl	800760c <USB_FlushRxFifo>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e0:	461a      	mov	r2, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	e043      	b.n	8007480 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800740a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800740e:	d118      	bne.n	8007442 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	461a      	mov	r2, r3
 8007424:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	e013      	b.n	8007454 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007438:	461a      	mov	r2, r3
 800743a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	e008      	b.n	8007454 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744e:	461a      	mov	r2, r3
 8007450:	2300      	movs	r3, #0
 8007452:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007472:	461a      	mov	r2, r3
 8007474:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007478:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3301      	adds	r3, #1
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007484:	461a      	mov	r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4293      	cmp	r3, r2
 800748a:	d3b5      	bcc.n	80073f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e043      	b.n	800751a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074a8:	d118      	bne.n	80074dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	e013      	b.n	80074ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d2:	461a      	mov	r2, r3
 80074d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e008      	b.n	80074ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e8:	461a      	mov	r2, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750c:	461a      	mov	r2, r3
 800750e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3301      	adds	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800751e:	461a      	mov	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4293      	cmp	r3, r2
 8007524:	d3b5      	bcc.n	8007492 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007538:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007546:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007548:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f043 0210 	orr.w	r2, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <USB_DevInit+0x2c4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007568:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f043 0208 	orr.w	r2, r3, #8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800757c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007580:	2b01      	cmp	r3, #1
 8007582:	d107      	bne.n	8007594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a0:	b004      	add	sp, #16
 80075a2:	4770      	bx	lr
 80075a4:	803c3800 	.word	0x803c3800

080075a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c2:	d901      	bls.n	80075c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e01b      	b.n	8007600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	daf2      	bge.n	80075b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	019b      	lsls	r3, r3, #6
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ec:	d901      	bls.n	80075f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e006      	b.n	8007600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d0f0      	beq.n	80075e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e018      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d0f0      	beq.n	800763c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007688:	4313      	orrs	r3, r2
 800768a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b087      	sub	sp, #28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0306 	and.w	r3, r3, #6
 80076b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
 80076be:	e00a      	b.n	80076d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d002      	beq.n	80076cc <USB_GetDevSpeed+0x32>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b06      	cmp	r3, #6
 80076ca:	d102      	bne.n	80076d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076cc:	2302      	movs	r3, #2
 80076ce:	75fb      	strb	r3, [r7, #23]
 80076d0:	e001      	b.n	80076d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076d2:	230f      	movs	r3, #15
 80076d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d13a      	bne.n	8007776 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800771e:	4313      	orrs	r3, r2
 8007720:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d155      	bne.n	80077e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	791b      	ldrb	r3, [r3, #4]
 8007752:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007754:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800775c:	4313      	orrs	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800776e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e036      	b.n	80077e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	2101      	movs	r1, #1
 8007788:	fa01 f303 	lsl.w	r3, r1, r3
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007794:	4313      	orrs	r3, r2
 8007796:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d11a      	bne.n	80077e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ca:	430b      	orrs	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d161      	bne.n	80078d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007826:	d11f      	bne.n	8007868 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007842:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007846:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007862:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f303 	lsl.w	r3, r1, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	43db      	mvns	r3, r3
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007888:	4013      	ands	r3, r2
 800788a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	2101      	movs	r1, #1
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	43db      	mvns	r3, r3
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078ac:	4013      	ands	r3, r2
 80078ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	0159      	lsls	r1, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ca:	4619      	mov	r1, r3
 80078cc:	4b35      	ldr	r3, [pc, #212]	@ (80079a4 <USB_DeactivateEndpoint+0x1b0>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	600b      	str	r3, [r1, #0]
 80078d2:	e060      	b.n	8007996 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ea:	d11f      	bne.n	800792c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800790a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800792a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	43db      	mvns	r3, r3
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800794c:	4013      	ands	r3, r2
 800794e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	2101      	movs	r1, #1
 8007962:	fa01 f303 	lsl.w	r3, r1, r3
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	43db      	mvns	r3, r3
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007970:	4013      	ands	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	0159      	lsls	r1, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	440b      	add	r3, r1
 800798a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798e:	4619      	mov	r1, r3
 8007990:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <USB_DeactivateEndpoint+0x1b4>)
 8007992:	4013      	ands	r3, r2
 8007994:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	ec337800 	.word	0xec337800
 80079a8:	eff37800 	.word	0xeff37800

080079ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	@ 0x28
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	f040 817f 	bne.w	8007ccc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d132      	bne.n	8007a3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a34:	0cdb      	lsrs	r3, r3, #19
 8007a36:	04db      	lsls	r3, r3, #19
 8007a38:	6113      	str	r3, [r2, #16]
 8007a3a:	e097      	b.n	8007b6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a56:	0cdb      	lsrs	r3, r3, #19
 8007a58:	04db      	lsls	r3, r3, #19
 8007a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d11a      	bne.n	8007abc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d903      	bls.n	8007a9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ab8:	6113      	str	r3, [r2, #16]
 8007aba:	e044      	b.n	8007b46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	1e5a      	subs	r2, r3, #1
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	8afb      	ldrh	r3, [r7, #22]
 8007ae2:	04d9      	lsls	r1, r3, #19
 8007ae4:	4ba4      	ldr	r3, [pc, #656]	@ (8007d78 <USB_EPStartXfer+0x3cc>)
 8007ae6:	400b      	ands	r3, r1
 8007ae8:	69b9      	ldr	r1, [r7, #24]
 8007aea:	0148      	lsls	r0, r1, #5
 8007aec:	69f9      	ldr	r1, [r7, #28]
 8007aee:	4401      	add	r1, r0
 8007af0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007af4:	4313      	orrs	r3, r2
 8007af6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d122      	bne.n	8007b46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	8afb      	ldrh	r3, [r7, #22]
 8007b30:	075b      	lsls	r3, r3, #29
 8007b32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007b36:	69b9      	ldr	r1, [r7, #24]
 8007b38:	0148      	lsls	r0, r1, #5
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	4401      	add	r1, r0
 8007b3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b42:	4313      	orrs	r3, r2
 8007b44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b5c:	69b9      	ldr	r1, [r7, #24]
 8007b5e:	0148      	lsls	r0, r1, #5
 8007b60:	69f9      	ldr	r1, [r7, #28]
 8007b62:	4401      	add	r1, r0
 8007b64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d14b      	bne.n	8007c0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b86:	461a      	mov	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d128      	bne.n	8007be8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d110      	bne.n	8007bc8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	e00f      	b.n	8007be8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e166      	b.n	8007ed8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	0151      	lsls	r1, r2, #5
 8007c1c:	69fa      	ldr	r2, [r7, #28]
 8007c1e:	440a      	add	r2, r1
 8007c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	791b      	ldrb	r3, [r3, #4]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d015      	beq.n	8007c5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 814e 	beq.w	8007ed8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c52:	69f9      	ldr	r1, [r7, #28]
 8007c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c5c:	e13c      	b.n	8007ed8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d110      	bne.n	8007c90 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	e00f      	b.n	8007cb0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	68d9      	ldr	r1, [r3, #12]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	b298      	uxth	r0, r3
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f9b9 	bl	800803c <USB_WritePacket>
 8007cca:	e105      	b.n	8007ed8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce6:	0cdb      	lsrs	r3, r3, #19
 8007ce8:	04db      	lsls	r3, r3, #19
 8007cea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d0e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d132      	bne.n	8007d7c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d44:	69b9      	ldr	r1, [r7, #24]
 8007d46:	0148      	lsls	r0, r1, #5
 8007d48:	69f9      	ldr	r1, [r7, #28]
 8007d4a:	4401      	add	r1, r0
 8007d4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d50:	4313      	orrs	r3, r2
 8007d52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d72:	6113      	str	r3, [r2, #16]
 8007d74:	e062      	b.n	8007e3c <USB_EPStartXfer+0x490>
 8007d76:	bf00      	nop
 8007d78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d123      	bne.n	8007dcc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d9a:	69b9      	ldr	r1, [r7, #24]
 8007d9c:	0148      	lsls	r0, r1, #5
 8007d9e:	69f9      	ldr	r1, [r7, #28]
 8007da0:	4401      	add	r1, r0
 8007da2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007da6:	4313      	orrs	r3, r2
 8007da8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dc8:	6113      	str	r3, [r2, #16]
 8007dca:	e037      	b.n	8007e3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	8afa      	ldrh	r2, [r7, #22]
 8007de8:	fb03 f202 	mul.w	r2, r3, r2
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	8afb      	ldrh	r3, [r7, #22]
 8007e00:	04d9      	lsls	r1, r3, #19
 8007e02:	4b38      	ldr	r3, [pc, #224]	@ (8007ee4 <USB_EPStartXfer+0x538>)
 8007e04:	400b      	ands	r3, r1
 8007e06:	69b9      	ldr	r1, [r7, #24]
 8007e08:	0148      	lsls	r0, r1, #5
 8007e0a:	69f9      	ldr	r1, [r7, #28]
 8007e0c:	4401      	add	r1, r0
 8007e0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	0148      	lsls	r0, r1, #5
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	4401      	add	r1, r0
 8007e34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10d      	bne.n	8007e5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	68d9      	ldr	r1, [r3, #12]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d128      	bne.n	8007eb8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d110      	bne.n	8007e98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e00f      	b.n	8007eb8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	0151      	lsls	r1, r2, #5
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	440a      	add	r2, r1
 8007ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	1ff80000 	.word	0x1ff80000

08007ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d14a      	bne.n	8007f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f1e:	f040 8086 	bne.w	800802e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	7812      	ldrb	r2, [r2, #0]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d902      	bls.n	8007f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f7e:	e056      	b.n	800802e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f98:	d0e7      	beq.n	8007f6a <USB_EPStopXfer+0x82>
 8007f9a:	e048      	b.n	800802e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fb4:	d13b      	bne.n	800802e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f242 7210 	movw	r2, #10000	@ 0x2710
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
          break;
 8008012:	e00c      	b.n	800802e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800802c:	d0e7      	beq.n	8007ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800803c:	b480      	push	{r7}
 800803e:	b089      	sub	sp, #36	@ 0x24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4611      	mov	r1, r2
 8008048:	461a      	mov	r2, r3
 800804a:	460b      	mov	r3, r1
 800804c:	71fb      	strb	r3, [r7, #7]
 800804e:	4613      	mov	r3, r2
 8008050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800805a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800805e:	2b00      	cmp	r3, #0
 8008060:	d123      	bne.n	80080aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008062:	88bb      	ldrh	r3, [r7, #4]
 8008064:	3303      	adds	r3, #3
 8008066:	089b      	lsrs	r3, r3, #2
 8008068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e018      	b.n	80080a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	031a      	lsls	r2, r3, #12
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4413      	add	r3, r2
 8008078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807c:	461a      	mov	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	3301      	adds	r3, #1
 800808e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3301      	adds	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	3301      	adds	r3, #1
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3e2      	bcc.n	8008070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3724      	adds	r7, #36	@ 0x24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b08b      	sub	sp, #44	@ 0x2c
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080de:	2300      	movs	r3, #0
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	e014      	b.n	800810e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	3301      	adds	r3, #1
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	3301      	adds	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	3301      	adds	r3, #1
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	3301      	adds	r3, #1
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3301      	adds	r3, #1
 800810c:	623b      	str	r3, [r7, #32]
 800810e:	6a3a      	ldr	r2, [r7, #32]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	429a      	cmp	r2, r3
 8008114:	d3e6      	bcc.n	80080e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008116:	8bfb      	ldrh	r3, [r7, #30]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01e      	beq.n	800815a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008126:	461a      	mov	r2, r3
 8008128:	f107 0310 	add.w	r3, r7, #16
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	b2da      	uxtb	r2, r3
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	701a      	strb	r2, [r3, #0]
      i++;
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	3301      	adds	r3, #1
 8008146:	623b      	str	r3, [r7, #32]
      pDest++;
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	3301      	adds	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800814e:	8bfb      	ldrh	r3, [r7, #30]
 8008150:	3b01      	subs	r3, #1
 8008152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008154:	8bfb      	ldrh	r3, [r7, #30]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1ea      	bne.n	8008130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800815c:	4618      	mov	r0, r3
 800815e:	372c      	adds	r7, #44	@ 0x2c
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	785b      	ldrb	r3, [r3, #1]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d12c      	bne.n	80081de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	db12      	blt.n	80081bc <USB_EPSetStall+0x54>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00f      	beq.n	80081bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	e02b      	b.n	8008236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db12      	blt.n	8008216 <USB_EPSetStall+0xae>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00f      	beq.n	8008216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008210:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d128      	bne.n	80082b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	440a      	add	r2, r1
 8008276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800827a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800827e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d003      	beq.n	8008290 <USB_EPClearStall+0x4c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d138      	bne.n	8008302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e027      	b.n	8008302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d003      	beq.n	80082e2 <USB_EPClearStall+0x9e>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	791b      	ldrb	r3, [r3, #4]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d10f      	bne.n	8008302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800832e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800834a:	4313      	orrs	r3, r2
 800834c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800838a:	f023 0302 	bic.w	r3, r3, #2
 800838e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083b8:	f023 0303 	bic.w	r3, r3, #3
 80083bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	4013      	ands	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	0c1b      	lsrs	r3, r3, #16
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	4013      	ands	r3, r2
 800845c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	b29b      	uxth	r3, r3
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	4013      	ands	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4013      	ands	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084f8:	68bb      	ldr	r3, [r7, #8]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	f003 0301 	and.w	r3, r3, #1
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800853c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008540:	f023 0307 	bic.w	r3, r3, #7
 8008544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	460b      	mov	r3, r1
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	333c      	adds	r3, #60	@ 0x3c
 800857e:	3304      	adds	r3, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4a26      	ldr	r2, [pc, #152]	@ (8008620 <USB_EP0_OutStart+0xb8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d90a      	bls.n	80085a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800859c:	d101      	bne.n	80085a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	e037      	b.n	8008612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085d0:	f043 0318 	orr.w	r3, r3, #24
 80085d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80085e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10f      	bne.n	8008610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800860a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800860e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	4f54300a 	.word	0x4f54300a

08008624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800863c:	d901      	bls.n	8008642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e01b      	b.n	800867a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	daf2      	bge.n	8008630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f043 0201 	orr.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008666:	d901      	bls.n	800866c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e006      	b.n	800867a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d0f0      	beq.n	800865a <USB_CoreReset+0x36>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
	...

08008688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008694:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008698:	f002 fc38 	bl	800af0c <USBD_static_malloc>
 800869c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	32b0      	adds	r2, #176	@ 0xb0
 80086ae:	2100      	movs	r1, #0
 80086b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e0d4      	b.n	8008862 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80086b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80086bc:	2100      	movs	r1, #0
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f003 fad0 	bl	800bc64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32b0      	adds	r2, #176	@ 0xb0
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32b0      	adds	r2, #176	@ 0xb0
 80086de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	7c1b      	ldrb	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d138      	bne.n	8008762 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086f0:	4b5e      	ldr	r3, [pc, #376]	@ (800886c <USBD_CDC_Init+0x1e4>)
 80086f2:	7819      	ldrb	r1, [r3, #0]
 80086f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086f8:	2202      	movs	r2, #2
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f002 fae3 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008700:	4b5a      	ldr	r3, [pc, #360]	@ (800886c <USBD_CDC_Init+0x1e4>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	3324      	adds	r3, #36	@ 0x24
 8008716:	2201      	movs	r2, #1
 8008718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800871a:	4b55      	ldr	r3, [pc, #340]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 800871c:	7819      	ldrb	r1, [r3, #0]
 800871e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008722:	2202      	movs	r2, #2
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f002 face 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800872a:	4b51      	ldr	r3, [pc, #324]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 020f 	and.w	r2, r3, #15
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008742:	2201      	movs	r2, #1
 8008744:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008746:	4b4b      	ldr	r3, [pc, #300]	@ (8008874 <USBD_CDC_Init+0x1ec>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	3326      	adds	r3, #38	@ 0x26
 800875c:	2210      	movs	r2, #16
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	e035      	b.n	80087ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008762:	4b42      	ldr	r3, [pc, #264]	@ (800886c <USBD_CDC_Init+0x1e4>)
 8008764:	7819      	ldrb	r1, [r3, #0]
 8008766:	2340      	movs	r3, #64	@ 0x40
 8008768:	2202      	movs	r2, #2
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 faab 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008770:	4b3e      	ldr	r3, [pc, #248]	@ (800886c <USBD_CDC_Init+0x1e4>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	3324      	adds	r3, #36	@ 0x24
 8008786:	2201      	movs	r2, #1
 8008788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800878a:	4b39      	ldr	r3, [pc, #228]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 800878c:	7819      	ldrb	r1, [r3, #0]
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	2202      	movs	r2, #2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 fa97 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008798:	4b35      	ldr	r3, [pc, #212]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087b0:	2201      	movs	r2, #1
 80087b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008874 <USBD_CDC_Init+0x1ec>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	3326      	adds	r3, #38	@ 0x26
 80087ca:	2210      	movs	r2, #16
 80087cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087ce:	4b29      	ldr	r3, [pc, #164]	@ (8008874 <USBD_CDC_Init+0x1ec>)
 80087d0:	7819      	ldrb	r1, [r3, #0]
 80087d2:	2308      	movs	r3, #8
 80087d4:	2203      	movs	r2, #3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f002 fa75 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80087dc:	4b25      	ldr	r3, [pc, #148]	@ (8008874 <USBD_CDC_Init+0x1ec>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	3324      	adds	r3, #36	@ 0x24
 80087f2:	2201      	movs	r2, #1
 80087f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	33b0      	adds	r3, #176	@ 0xb0
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800882c:	2302      	movs	r3, #2
 800882e:	e018      	b.n	8008862 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	7c1b      	ldrb	r3, [r3, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008838:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 800883a:	7819      	ldrb	r1, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f002 fb2c 	bl	800aea4 <USBD_LL_PrepareReceive>
 800884c:	e008      	b.n	8008860 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800884e:	4b08      	ldr	r3, [pc, #32]	@ (8008870 <USBD_CDC_Init+0x1e8>)
 8008850:	7819      	ldrb	r1, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008858:	2340      	movs	r3, #64	@ 0x40
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f002 fb22 	bl	800aea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200000bb 	.word	0x200000bb
 8008870:	200000bc 	.word	0x200000bc
 8008874:	200000bd 	.word	0x200000bd

08008878 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008884:	4b3a      	ldr	r3, [pc, #232]	@ (8008970 <USBD_CDC_DeInit+0xf8>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f002 fa41 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008890:	4b37      	ldr	r3, [pc, #220]	@ (8008970 <USBD_CDC_DeInit+0xf8>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	f003 020f 	and.w	r2, r3, #15
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	3324      	adds	r3, #36	@ 0x24
 80088a6:	2200      	movs	r2, #0
 80088a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80088aa:	4b32      	ldr	r3, [pc, #200]	@ (8008974 <USBD_CDC_DeInit+0xfc>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f002 fa2e 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80088b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008974 <USBD_CDC_DeInit+0xfc>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f003 020f 	and.w	r2, r3, #15
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088ce:	2200      	movs	r2, #0
 80088d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80088d2:	4b29      	ldr	r3, [pc, #164]	@ (8008978 <USBD_CDC_DeInit+0x100>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f002 fa1a 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80088de:	4b26      	ldr	r3, [pc, #152]	@ (8008978 <USBD_CDC_DeInit+0x100>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 020f 	and.w	r2, r3, #15
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	3324      	adds	r3, #36	@ 0x24
 80088f4:	2200      	movs	r2, #0
 80088f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008978 <USBD_CDC_DeInit+0x100>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	f003 020f 	and.w	r2, r3, #15
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	3326      	adds	r3, #38	@ 0x26
 800890e:	2200      	movs	r2, #0
 8008910:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	32b0      	adds	r2, #176	@ 0xb0
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01f      	beq.n	8008964 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	33b0      	adds	r3, #176	@ 0xb0
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	@ 0xb0
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	4618      	mov	r0, r3
 8008948:	f002 faee 	bl	800af28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32b0      	adds	r2, #176	@ 0xb0
 8008956:	2100      	movs	r1, #0
 8008958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	200000bb 	.word	0x200000bb
 8008974:	200000bc 	.word	0x200000bc
 8008978:	200000bd 	.word	0x200000bd

0800897c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	32b0      	adds	r2, #176	@ 0xb0
 8008990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e0bf      	b.n	8008b2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d050      	beq.n	8008a5a <USBD_CDC_Setup+0xde>
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	f040 80af 	bne.w	8008b1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	88db      	ldrh	r3, [r3, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d03a      	beq.n	8008a3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b25b      	sxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da1b      	bge.n	8008a08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	33b0      	adds	r3, #176	@ 0xb0
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80089e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	88d2      	ldrh	r2, [r2, #6]
 80089ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	bf28      	it	cs
 80089f6:	2307      	movcs	r3, #7
 80089f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	89fa      	ldrh	r2, [r7, #14]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fd53 	bl	800a4ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a06:	e090      	b.n	8008b2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	785a      	ldrb	r2, [r3, #1]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88db      	ldrh	r3, [r3, #6]
 8008a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a18:	d803      	bhi.n	8008a22 <USBD_CDC_Setup+0xa6>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	e000      	b.n	8008a24 <USBD_CDC_Setup+0xa8>
 8008a22:	2240      	movs	r2, #64	@ 0x40
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a2a:	6939      	ldr	r1, [r7, #16]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008a32:	461a      	mov	r2, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fd65 	bl	800a504 <USBD_CtlPrepareRx>
      break;
 8008a3a:	e076      	b.n	8008b2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	33b0      	adds	r3, #176	@ 0xb0
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	7850      	ldrb	r0, [r2, #1]
 8008a52:	2200      	movs	r2, #0
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	4798      	blx	r3
      break;
 8008a58:	e067      	b.n	8008b2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b0b      	cmp	r3, #11
 8008a60:	d851      	bhi.n	8008b06 <USBD_CDC_Setup+0x18a>
 8008a62:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <USBD_CDC_Setup+0xec>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a99 	.word	0x08008a99
 8008a6c:	08008b15 	.word	0x08008b15
 8008a70:	08008b07 	.word	0x08008b07
 8008a74:	08008b07 	.word	0x08008b07
 8008a78:	08008b07 	.word	0x08008b07
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b07 	.word	0x08008b07
 8008a84:	08008b07 	.word	0x08008b07
 8008a88:	08008b07 	.word	0x08008b07
 8008a8c:	08008b07 	.word	0x08008b07
 8008a90:	08008ac3 	.word	0x08008ac3
 8008a94:	08008aed 	.word	0x08008aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d107      	bne.n	8008ab4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008aa4:	f107 030a 	add.w	r3, r7, #10
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 fcfd 	bl	800a4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab2:	e032      	b.n	8008b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fc7b 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac0:	e02b      	b.n	8008b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d107      	bne.n	8008ade <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ace:	f107 030d 	add.w	r3, r7, #13
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fce8 	bl	800a4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008adc:	e01d      	b.n	8008b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fc66 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8008aea:	e016      	b.n	8008b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d00f      	beq.n	8008b18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fc59 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b04:	e008      	b.n	8008b18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fc52 	bl	800a3b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	75fb      	strb	r3, [r7, #23]
          break;
 8008b12:	e002      	b.n	8008b1a <USBD_CDC_Setup+0x19e>
          break;
 8008b14:	bf00      	nop
 8008b16:	e008      	b.n	8008b2a <USBD_CDC_Setup+0x1ae>
          break;
 8008b18:	bf00      	nop
      }
      break;
 8008b1a:	e006      	b.n	8008b2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 fc47 	bl	800a3b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b24:	2303      	movs	r3, #3
 8008b26:	75fb      	strb	r3, [r7, #23]
      break;
 8008b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	32b0      	adds	r2, #176	@ 0xb0
 8008b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e065      	b.n	8008c2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	32b0      	adds	r2, #176	@ 0xb0
 8008b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b6e:	78fb      	ldrb	r3, [r7, #3]
 8008b70:	f003 020f 	and.w	r2, r3, #15
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	3318      	adds	r3, #24
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02f      	beq.n	8008be8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	f003 020f 	and.w	r2, r3, #15
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 010f 	and.w	r1, r3, #15
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	440b      	add	r3, r1
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4403      	add	r3, r0
 8008bb0:	331c      	adds	r3, #28
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bb8:	fb01 f303 	mul.w	r3, r1, r3
 8008bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d112      	bne.n	8008be8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	f003 020f 	and.w	r2, r3, #15
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bda:	78f9      	ldrb	r1, [r7, #3]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2200      	movs	r2, #0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f002 f93e 	bl	800ae62 <USBD_LL_Transmit>
 8008be6:	e01f      	b.n	8008c28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	33b0      	adds	r3, #176	@ 0xb0
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d010      	beq.n	8008c28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	33b0      	adds	r3, #176	@ 0xb0
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	32b0      	adds	r2, #176	@ 0xb0
 8008c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	32b0      	adds	r2, #176	@ 0xb0
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e01a      	b.n	8008c9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f002 f93c 	bl	800aee6 <USBD_LL_GetRxDataSize>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	33b0      	adds	r3, #176	@ 0xb0
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c94:	4611      	mov	r1, r2
 8008c96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	32b0      	adds	r2, #176	@ 0xb0
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e024      	b.n	8008d0e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	33b0      	adds	r3, #176	@ 0xb0
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d019      	beq.n	8008d0c <USBD_CDC_EP0_RxReady+0x6a>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008cde:	2bff      	cmp	r3, #255	@ 0xff
 8008ce0:	d014      	beq.n	8008d0c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	33b0      	adds	r3, #176	@ 0xb0
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008cfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	22ff      	movs	r2, #255	@ 0xff
 8008d08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d20:	2182      	movs	r1, #130	@ 0x82
 8008d22:	4818      	ldr	r0, [pc, #96]	@ (8008d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d24:	f000 fd0f 	bl	8009746 <USBD_GetEpDesc>
 8008d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	4815      	ldr	r0, [pc, #84]	@ (8008d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d2e:	f000 fd0a 	bl	8009746 <USBD_GetEpDesc>
 8008d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d34:	2181      	movs	r1, #129	@ 0x81
 8008d36:	4813      	ldr	r0, [pc, #76]	@ (8008d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d38:	f000 fd05 	bl	8009746 <USBD_GetEpDesc>
 8008d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2210      	movs	r2, #16
 8008d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d006      	beq.n	8008d5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d58:	711a      	strb	r2, [r3, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d6c:	711a      	strb	r2, [r3, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2243      	movs	r2, #67	@ 0x43
 8008d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d78:	4b02      	ldr	r3, [pc, #8]	@ (8008d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000078 	.word	0x20000078

08008d88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d90:	2182      	movs	r1, #130	@ 0x82
 8008d92:	4818      	ldr	r0, [pc, #96]	@ (8008df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d94:	f000 fcd7 	bl	8009746 <USBD_GetEpDesc>
 8008d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4815      	ldr	r0, [pc, #84]	@ (8008df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d9e:	f000 fcd2 	bl	8009746 <USBD_GetEpDesc>
 8008da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008da4:	2181      	movs	r1, #129	@ 0x81
 8008da6:	4813      	ldr	r0, [pc, #76]	@ (8008df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008da8:	f000 fccd 	bl	8009746 <USBD_GetEpDesc>
 8008dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2210      	movs	r2, #16
 8008db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	711a      	strb	r2, [r3, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f042 0202 	orr.w	r2, r2, #2
 8008dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d006      	beq.n	8008de2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	711a      	strb	r2, [r3, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f042 0202 	orr.w	r2, r2, #2
 8008de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2243      	movs	r2, #67	@ 0x43
 8008de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	@ (8008df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000078 	.word	0x20000078

08008df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e00:	2182      	movs	r1, #130	@ 0x82
 8008e02:	4818      	ldr	r0, [pc, #96]	@ (8008e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e04:	f000 fc9f 	bl	8009746 <USBD_GetEpDesc>
 8008e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	4815      	ldr	r0, [pc, #84]	@ (8008e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e0e:	f000 fc9a 	bl	8009746 <USBD_GetEpDesc>
 8008e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e14:	2181      	movs	r1, #129	@ 0x81
 8008e16:	4813      	ldr	r0, [pc, #76]	@ (8008e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e18:	f000 fc95 	bl	8009746 <USBD_GetEpDesc>
 8008e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2210      	movs	r2, #16
 8008e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e38:	711a      	strb	r2, [r3, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e4c:	711a      	strb	r2, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2243      	movs	r2, #67	@ 0x43
 8008e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e58:	4b02      	ldr	r3, [pc, #8]	@ (8008e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000078 	.word	0x20000078

08008e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	220a      	movs	r2, #10
 8008e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e76:	4b03      	ldr	r3, [pc, #12]	@ (8008e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	20000034 	.word	0x20000034

08008e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e009      	b.n	8008eb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	33b0      	adds	r3, #176	@ 0xb0
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	32b0      	adds	r2, #176	@ 0xb0
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e008      	b.n	8008ef4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32b0      	adds	r2, #176	@ 0xb0
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e004      	b.n	8008f2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	32b0      	adds	r2, #176	@ 0xb0
 8008f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32b0      	adds	r2, #176	@ 0xb0
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e018      	b.n	8008f9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7c1b      	ldrb	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f72:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <USBD_CDC_ReceivePacket+0x68>)
 8008f74:	7819      	ldrb	r1, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 ff8f 	bl	800aea4 <USBD_LL_PrepareReceive>
 8008f86:	e008      	b.n	8008f9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f88:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <USBD_CDC_ReceivePacket+0x68>)
 8008f8a:	7819      	ldrb	r1, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f92:	2340      	movs	r3, #64	@ 0x40
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 ff85 	bl	800aea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200000bc 	.word	0x200000bc

08008fa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e01f      	b.n	8009000 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	79fa      	ldrb	r2, [r7, #7]
 8008ff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f001 fdff 	bl	800abf8 <USBD_LL_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800901c:	2303      	movs	r3, #3
 800901e:	e025      	b.n	800906c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32ae      	adds	r2, #174	@ 0xae
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00f      	beq.n	800905c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32ae      	adds	r2, #174	@ 0xae
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904c:	f107 020e 	add.w	r2, r7, #14
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	4602      	mov	r2, r0
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fe07 	bl	800ac90 <USBD_LL_Start>
 8009082:	4603      	mov	r3, r0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d009      	beq.n	80090d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	4611      	mov	r1, r2
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	4798      	blx	r3
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f001 f90c 	bl	800a33e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	2b02      	cmp	r3, #2
 8009148:	d01a      	beq.n	8009180 <USBD_LL_SetupStage+0x72>
 800914a:	2b02      	cmp	r3, #2
 800914c:	d822      	bhi.n	8009194 <USBD_LL_SetupStage+0x86>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <USBD_LL_SetupStage+0x4a>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d00a      	beq.n	800916c <USBD_LL_SetupStage+0x5e>
 8009156:	e01d      	b.n	8009194 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fb63 	bl	800982c <USBD_StdDevReq>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]
      break;
 800916a:	e020      	b.n	80091ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fbcb 	bl	8009910 <USBD_StdItfReq>
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]
      break;
 800917e:	e016      	b.n	80091ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc2d 	bl	80099e8 <USBD_StdEPReq>
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]
      break;
 8009192:	e00c      	b.n	80091ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800919a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fdd4 	bl	800ad50 <USBD_LL_StallEP>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
      break;
 80091ac:	bf00      	nop
  }

  return ret;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	460b      	mov	r3, r1
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d16e      	bne.n	80092ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80091d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80091de:	2b03      	cmp	r3, #3
 80091e0:	f040 8098 	bne.w	8009314 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d913      	bls.n	8009218 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	1ad2      	subs	r2, r2, r3
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	4293      	cmp	r3, r2
 8009208:	bf28      	it	cs
 800920a:	4613      	movcs	r3, r2
 800920c:	461a      	mov	r2, r3
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 f994 	bl	800a53e <USBD_CtlContinueRx>
 8009216:	e07d      	b.n	8009314 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800921e:	f003 031f 	and.w	r3, r3, #31
 8009222:	2b02      	cmp	r3, #2
 8009224:	d014      	beq.n	8009250 <USBD_LL_DataOutStage+0x98>
 8009226:	2b02      	cmp	r3, #2
 8009228:	d81d      	bhi.n	8009266 <USBD_LL_DataOutStage+0xae>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <USBD_LL_DataOutStage+0x7c>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d003      	beq.n	800923a <USBD_LL_DataOutStage+0x82>
 8009232:	e018      	b.n	8009266 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	75bb      	strb	r3, [r7, #22]
            break;
 8009238:	e018      	b.n	800926c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fa64 	bl	8009712 <USBD_CoreFindIF>
 800924a:	4603      	mov	r3, r0
 800924c:	75bb      	strb	r3, [r7, #22]
            break;
 800924e:	e00d      	b.n	800926c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4619      	mov	r1, r3
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fa66 	bl	800972c <USBD_CoreFindEP>
 8009260:	4603      	mov	r3, r0
 8009262:	75bb      	strb	r3, [r7, #22]
            break;
 8009264:	e002      	b.n	800926c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	75bb      	strb	r3, [r7, #22]
            break;
 800926a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800926c:	7dbb      	ldrb	r3, [r7, #22]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d119      	bne.n	80092a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b03      	cmp	r3, #3
 800927c:	d113      	bne.n	80092a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800927e:	7dba      	ldrb	r2, [r7, #22]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	32ae      	adds	r2, #174	@ 0xae
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800928e:	7dba      	ldrb	r2, [r7, #22]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009296:	7dba      	ldrb	r2, [r7, #22]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	32ae      	adds	r2, #174	@ 0xae
 800929c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f001 f95a 	bl	800a560 <USBD_CtlSendStatus>
 80092ac:	e032      	b.n	8009314 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fa37 	bl	800972c <USBD_CoreFindEP>
 80092be:	4603      	mov	r3, r0
 80092c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c2:	7dbb      	ldrb	r3, [r7, #22]
 80092c4:	2bff      	cmp	r3, #255	@ 0xff
 80092c6:	d025      	beq.n	8009314 <USBD_LL_DataOutStage+0x15c>
 80092c8:	7dbb      	ldrb	r3, [r7, #22]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d122      	bne.n	8009314 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d117      	bne.n	800930a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80092da:	7dba      	ldrb	r2, [r7, #22]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	32ae      	adds	r2, #174	@ 0xae
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00f      	beq.n	800930a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80092ea:	7dba      	ldrb	r2, [r7, #22]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80092f2:	7dba      	ldrb	r2, [r7, #22]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	32ae      	adds	r2, #174	@ 0xae
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	7afa      	ldrb	r2, [r7, #11]
 8009300:	4611      	mov	r1, r2
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	e000      	b.n	8009316 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b086      	sub	sp, #24
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	460b      	mov	r3, r1
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d16f      	bne.n	8009412 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3314      	adds	r3, #20
 8009336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800933e:	2b02      	cmp	r3, #2
 8009340:	d15a      	bne.n	80093f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	429a      	cmp	r2, r3
 800934c:	d914      	bls.n	8009378 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	461a      	mov	r2, r3
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f001 f8bc 	bl	800a4e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800936a:	2300      	movs	r3, #0
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f001 fd97 	bl	800aea4 <USBD_LL_PrepareReceive>
 8009376:	e03f      	b.n	80093f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	d11c      	bne.n	80093be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800938c:	429a      	cmp	r2, r3
 800938e:	d316      	bcc.n	80093be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800939a:	429a      	cmp	r2, r3
 800939c:	d20f      	bcs.n	80093be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800939e:	2200      	movs	r2, #0
 80093a0:	2100      	movs	r1, #0
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f001 f89d 	bl	800a4e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b0:	2300      	movs	r3, #0
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 fd74 	bl	800aea4 <USBD_LL_PrepareReceive>
 80093bc:	e01c      	b.n	80093f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d10f      	bne.n	80093ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ea:	2180      	movs	r1, #128	@ 0x80
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f001 fcaf 	bl	800ad50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f001 f8c7 	bl	800a586 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d03a      	beq.n	8009478 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fe42 	bl	800908c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009410:	e032      	b.n	8009478 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f985 	bl	800972c <USBD_CoreFindEP>
 8009422:	4603      	mov	r3, r0
 8009424:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	2bff      	cmp	r3, #255	@ 0xff
 800942a:	d025      	beq.n	8009478 <USBD_LL_DataInStage+0x15a>
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d122      	bne.n	8009478 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d11c      	bne.n	8009478 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800943e:	7dfa      	ldrb	r2, [r7, #23]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	@ 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d014      	beq.n	8009478 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800944e:	7dfa      	ldrb	r2, [r7, #23]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009456:	7dfa      	ldrb	r2, [r7, #23]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	@ 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	7afa      	ldrb	r2, [r7, #11]
 8009464:	4611      	mov	r1, r2
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	4798      	blx	r3
 800946a:	4603      	mov	r3, r0
 800946c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800946e:	7dbb      	ldrb	r3, [r7, #22]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009474:	7dbb      	ldrb	r3, [r7, #22]
 8009476:	e000      	b.n	800947a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d014      	beq.n	80094e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6852      	ldr	r2, [r2, #4]
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	4611      	mov	r1, r2
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094e8:	2340      	movs	r3, #64	@ 0x40
 80094ea:	2200      	movs	r2, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 fbe9 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2240      	movs	r2, #64	@ 0x40
 8009500:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009504:	2340      	movs	r3, #64	@ 0x40
 8009506:	2200      	movs	r2, #0
 8009508:	2180      	movs	r1, #128	@ 0x80
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fbdb 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2240      	movs	r2, #64	@ 0x40
 800951a:	621a      	str	r2, [r3, #32]

  return ret;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	78fa      	ldrb	r2, [r7, #3]
 8009536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b04      	cmp	r3, #4
 8009558:	d006      	beq.n	8009568 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009560:	b2da      	uxtb	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2204      	movs	r2, #4
 800956c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b04      	cmp	r3, #4
 8009590:	d106      	bne.n	80095a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d110      	bne.n	80095e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00b      	beq.n	80095e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	32ae      	adds	r2, #174	@ 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	e01c      	b.n	800964a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b03      	cmp	r3, #3
 800961a:	d115      	bne.n	8009648 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32ae      	adds	r2, #174	@ 0xae
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32ae      	adds	r2, #174	@ 0xae
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	4611      	mov	r1, r2
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	32ae      	adds	r2, #174	@ 0xae
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	e01c      	b.n	80096ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b03      	cmp	r3, #3
 800967e:	d115      	bne.n	80096ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32ae      	adds	r2, #174	@ 0xae
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	32ae      	adds	r2, #174	@ 0xae
 800969e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	4611      	mov	r1, r2
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00e      	beq.n	8009708 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	6852      	ldr	r2, [r2, #4]
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	4611      	mov	r1, r2
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	4798      	blx	r3
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009704:	2303      	movs	r3, #3
 8009706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800971e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009738:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b086      	sub	sp, #24
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	b29b      	uxth	r3, r3
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	7812      	ldrb	r2, [r2, #0]
 8009768:	4293      	cmp	r3, r2
 800976a:	d91f      	bls.n	80097ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009772:	e013      	b.n	800979c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009774:	f107 030a 	add.w	r3, r7, #10
 8009778:	4619      	mov	r1, r3
 800977a:	6978      	ldr	r0, [r7, #20]
 800977c:	f000 f81b 	bl	80097b6 <USBD_GetNextDesc>
 8009780:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b05      	cmp	r3, #5
 8009788:	d108      	bne.n	800979c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	789b      	ldrb	r3, [r3, #2]
 8009792:	78fa      	ldrb	r2, [r7, #3]
 8009794:	429a      	cmp	r2, r3
 8009796:	d008      	beq.n	80097aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	885b      	ldrh	r3, [r3, #2]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	897b      	ldrh	r3, [r7, #10]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d8e5      	bhi.n	8009774 <USBD_GetEpDesc+0x2e>
 80097a8:	e000      	b.n	80097ac <USBD_GetEpDesc+0x66>
          break;
 80097aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80097ac:	693b      	ldr	r3, [r7, #16]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	4413      	add	r3, r2
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097e0:	68fb      	ldr	r3, [r7, #12]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	3301      	adds	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800980c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	b21a      	sxth	r2, r3
 8009814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009818:	4313      	orrs	r3, r2
 800981a:	b21b      	sxth	r3, r3
 800981c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800981e:	89fb      	ldrh	r3, [r7, #14]
}
 8009820:	4618      	mov	r0, r3
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009842:	2b40      	cmp	r3, #64	@ 0x40
 8009844:	d005      	beq.n	8009852 <USBD_StdDevReq+0x26>
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d857      	bhi.n	80098fa <USBD_StdDevReq+0xce>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00f      	beq.n	800986e <USBD_StdDevReq+0x42>
 800984e:	2b20      	cmp	r3, #32
 8009850:	d153      	bne.n	80098fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	32ae      	adds	r2, #174	@ 0xae
 800985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
      break;
 800986c:	e04a      	b.n	8009904 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b09      	cmp	r3, #9
 8009874:	d83b      	bhi.n	80098ee <USBD_StdDevReq+0xc2>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <USBD_StdDevReq+0x50>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098d1 	.word	0x080098d1
 8009880:	080098e5 	.word	0x080098e5
 8009884:	080098ef 	.word	0x080098ef
 8009888:	080098db 	.word	0x080098db
 800988c:	080098ef 	.word	0x080098ef
 8009890:	080098af 	.word	0x080098af
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098ef 	.word	0x080098ef
 800989c:	080098c7 	.word	0x080098c7
 80098a0:	080098b9 	.word	0x080098b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa3c 	bl	8009d24 <USBD_GetDescriptor>
          break;
 80098ac:	e024      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fba1 	bl	8009ff8 <USBD_SetAddress>
          break;
 80098b6:	e01f      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fbe0 	bl	800a080 <USBD_SetConfig>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
          break;
 80098c4:	e018      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fc83 	bl	800a1d4 <USBD_GetConfig>
          break;
 80098ce:	e013      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fcb4 	bl	800a240 <USBD_GetStatus>
          break;
 80098d8:	e00e      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fce3 	bl	800a2a8 <USBD_SetFeature>
          break;
 80098e2:	e009      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fd07 	bl	800a2fa <USBD_ClrFeature>
          break;
 80098ec:	e004      	b.n	80098f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fd5e 	bl	800a3b2 <USBD_CtlError>
          break;
 80098f6:	bf00      	nop
      }
      break;
 80098f8:	e004      	b.n	8009904 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fd58 	bl	800a3b2 <USBD_CtlError>
      break;
 8009902:	bf00      	nop
  }

  return ret;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop

08009910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009926:	2b40      	cmp	r3, #64	@ 0x40
 8009928:	d005      	beq.n	8009936 <USBD_StdItfReq+0x26>
 800992a:	2b40      	cmp	r3, #64	@ 0x40
 800992c:	d852      	bhi.n	80099d4 <USBD_StdItfReq+0xc4>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <USBD_StdItfReq+0x26>
 8009932:	2b20      	cmp	r3, #32
 8009934:	d14e      	bne.n	80099d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993c:	b2db      	uxtb	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	2b02      	cmp	r3, #2
 8009942:	d840      	bhi.n	80099c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	889b      	ldrh	r3, [r3, #4]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b01      	cmp	r3, #1
 800994c:	d836      	bhi.n	80099bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	889b      	ldrh	r3, [r3, #4]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fedb 	bl	8009712 <USBD_CoreFindIF>
 800995c:	4603      	mov	r3, r0
 800995e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2bff      	cmp	r3, #255	@ 0xff
 8009964:	d01d      	beq.n	80099a2 <USBD_StdItfReq+0x92>
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d11a      	bne.n	80099a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800996c:	7bba      	ldrb	r2, [r7, #14]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32ae      	adds	r2, #174	@ 0xae
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00f      	beq.n	800999c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800997c:	7bba      	ldrb	r2, [r7, #14]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009984:	7bba      	ldrb	r2, [r7, #14]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	32ae      	adds	r2, #174	@ 0xae
 800998a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800999a:	e004      	b.n	80099a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800999c:	2303      	movs	r3, #3
 800999e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099a0:	e001      	b.n	80099a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	88db      	ldrh	r3, [r3, #6]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d110      	bne.n	80099d0 <USBD_StdItfReq+0xc0>
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10d      	bne.n	80099d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fdd3 	bl	800a560 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099ba:	e009      	b.n	80099d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fcf7 	bl	800a3b2 <USBD_CtlError>
          break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fcf2 	bl	800a3b2 <USBD_CtlError>
          break;
 80099ce:	e000      	b.n	80099d2 <USBD_StdItfReq+0xc2>
          break;
 80099d0:	bf00      	nop
      }
      break;
 80099d2:	e004      	b.n	80099de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fceb 	bl	800a3b2 <USBD_CtlError>
      break;
 80099dc:	bf00      	nop
  }

  return ret;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	889b      	ldrh	r3, [r3, #4]
 80099fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a04:	2b40      	cmp	r3, #64	@ 0x40
 8009a06:	d007      	beq.n	8009a18 <USBD_StdEPReq+0x30>
 8009a08:	2b40      	cmp	r3, #64	@ 0x40
 8009a0a:	f200 817f 	bhi.w	8009d0c <USBD_StdEPReq+0x324>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d02a      	beq.n	8009a68 <USBD_StdEPReq+0x80>
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	f040 817a 	bne.w	8009d0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff fe85 	bl	800972c <USBD_CoreFindEP>
 8009a22:	4603      	mov	r3, r0
 8009a24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a26:	7b7b      	ldrb	r3, [r7, #13]
 8009a28:	2bff      	cmp	r3, #255	@ 0xff
 8009a2a:	f000 8174 	beq.w	8009d16 <USBD_StdEPReq+0x32e>
 8009a2e:	7b7b      	ldrb	r3, [r7, #13]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f040 8170 	bne.w	8009d16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a36:	7b7a      	ldrb	r2, [r7, #13]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a3e:	7b7a      	ldrb	r2, [r7, #13]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	32ae      	adds	r2, #174	@ 0xae
 8009a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8163 	beq.w	8009d16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a50:	7b7a      	ldrb	r2, [r7, #13]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32ae      	adds	r2, #174	@ 0xae
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	4798      	blx	r3
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a66:	e156      	b.n	8009d16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d008      	beq.n	8009a82 <USBD_StdEPReq+0x9a>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	f300 8145 	bgt.w	8009d00 <USBD_StdEPReq+0x318>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 809b 	beq.w	8009bb2 <USBD_StdEPReq+0x1ca>
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d03c      	beq.n	8009afa <USBD_StdEPReq+0x112>
 8009a80:	e13e      	b.n	8009d00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d002      	beq.n	8009a94 <USBD_StdEPReq+0xac>
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d016      	beq.n	8009ac0 <USBD_StdEPReq+0xd8>
 8009a92:	e02c      	b.n	8009aee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00d      	beq.n	8009ab6 <USBD_StdEPReq+0xce>
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	2b80      	cmp	r3, #128	@ 0x80
 8009a9e:	d00a      	beq.n	8009ab6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f953 	bl	800ad50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aaa:	2180      	movs	r1, #128	@ 0x80
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 f94f 	bl	800ad50 <USBD_LL_StallEP>
 8009ab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ab4:	e020      	b.n	8009af8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fc7a 	bl	800a3b2 <USBD_CtlError>
              break;
 8009abe:	e01b      	b.n	8009af8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	885b      	ldrh	r3, [r3, #2]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10e      	bne.n	8009ae6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <USBD_StdEPReq+0xfe>
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b80      	cmp	r3, #128	@ 0x80
 8009ad2:	d008      	beq.n	8009ae6 <USBD_StdEPReq+0xfe>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	88db      	ldrh	r3, [r3, #6]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 f935 	bl	800ad50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fd3a 	bl	800a560 <USBD_CtlSendStatus>

              break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc5e 	bl	800a3b2 <USBD_CtlError>
              break;
 8009af6:	bf00      	nop
          }
          break;
 8009af8:	e107      	b.n	8009d0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d002      	beq.n	8009b0c <USBD_StdEPReq+0x124>
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d016      	beq.n	8009b38 <USBD_StdEPReq+0x150>
 8009b0a:	e04b      	b.n	8009ba4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00d      	beq.n	8009b2e <USBD_StdEPReq+0x146>
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b80      	cmp	r3, #128	@ 0x80
 8009b16:	d00a      	beq.n	8009b2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 f917 	bl	800ad50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b22:	2180      	movs	r1, #128	@ 0x80
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 f913 	bl	800ad50 <USBD_LL_StallEP>
 8009b2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b2c:	e040      	b.n	8009bb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc3e 	bl	800a3b2 <USBD_CtlError>
              break;
 8009b36:	e03b      	b.n	8009bb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	885b      	ldrh	r3, [r3, #2]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d136      	bne.n	8009bae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d004      	beq.n	8009b54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 f91d 	bl	800ad8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fd03 	bl	800a560 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fde4 	bl	800972c <USBD_CoreFindEP>
 8009b64:	4603      	mov	r3, r0
 8009b66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b68:	7b7b      	ldrb	r3, [r7, #13]
 8009b6a:	2bff      	cmp	r3, #255	@ 0xff
 8009b6c:	d01f      	beq.n	8009bae <USBD_StdEPReq+0x1c6>
 8009b6e:	7b7b      	ldrb	r3, [r7, #13]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11c      	bne.n	8009bae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b74:	7b7a      	ldrb	r2, [r7, #13]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b7c:	7b7a      	ldrb	r2, [r7, #13]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	32ae      	adds	r2, #174	@ 0xae
 8009b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d010      	beq.n	8009bae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b8c:	7b7a      	ldrb	r2, [r7, #13]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	32ae      	adds	r2, #174	@ 0xae
 8009b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ba2:	e004      	b.n	8009bae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fc03 	bl	800a3b2 <USBD_CtlError>
              break;
 8009bac:	e000      	b.n	8009bb0 <USBD_StdEPReq+0x1c8>
              break;
 8009bae:	bf00      	nop
          }
          break;
 8009bb0:	e0ab      	b.n	8009d0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d002      	beq.n	8009bc4 <USBD_StdEPReq+0x1dc>
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d032      	beq.n	8009c28 <USBD_StdEPReq+0x240>
 8009bc2:	e097      	b.n	8009cf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <USBD_StdEPReq+0x1f2>
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b80      	cmp	r3, #128	@ 0x80
 8009bce:	d004      	beq.n	8009bda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fbed 	bl	800a3b2 <USBD_CtlError>
                break;
 8009bd8:	e091      	b.n	8009cfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da0b      	bge.n	8009bfa <USBD_StdEPReq+0x212>
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	e00b      	b.n	8009c12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	4413      	add	r3, r2
 8009c10:	3304      	adds	r3, #4
 8009c12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fc43 	bl	800a4ac <USBD_CtlSendData>
              break;
 8009c26:	e06a      	b.n	8009cfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da11      	bge.n	8009c54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	f003 020f 	and.w	r2, r3, #15
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	3324      	adds	r3, #36	@ 0x24
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d117      	bne.n	8009c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fbb0 	bl	800a3b2 <USBD_CtlError>
                  break;
 8009c52:	e054      	b.n	8009cfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	f003 020f 	and.w	r2, r3, #15
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb9d 	bl	800a3b2 <USBD_CtlError>
                  break;
 8009c78:	e041      	b.n	8009cfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	da0b      	bge.n	8009c9a <USBD_StdEPReq+0x2b2>
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	3310      	adds	r3, #16
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	4413      	add	r3, r2
 8009c96:	3304      	adds	r3, #4
 8009c98:	e00b      	b.n	8009cb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	4413      	add	r3, r2
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <USBD_StdEPReq+0x2d8>
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b80      	cmp	r3, #128	@ 0x80
 8009cbe:	d103      	bne.n	8009cc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e00e      	b.n	8009ce6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f87d 	bl	800adcc <USBD_LL_IsStallEP>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	e002      	b.n	8009ce6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fbdd 	bl	800a4ac <USBD_CtlSendData>
              break;
 8009cf2:	e004      	b.n	8009cfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb5b 	bl	800a3b2 <USBD_CtlError>
              break;
 8009cfc:	bf00      	nop
          }
          break;
 8009cfe:	e004      	b.n	8009d0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fb55 	bl	800a3b2 <USBD_CtlError>
          break;
 8009d08:	bf00      	nop
      }
      break;
 8009d0a:	e005      	b.n	8009d18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb4f 	bl	800a3b2 <USBD_CtlError>
      break;
 8009d14:	e000      	b.n	8009d18 <USBD_StdEPReq+0x330>
      break;
 8009d16:	bf00      	nop
  }

  return ret;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b06      	cmp	r3, #6
 8009d46:	f200 8128 	bhi.w	8009f9a <USBD_GetDescriptor+0x276>
 8009d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <USBD_GetDescriptor+0x2c>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d6d 	.word	0x08009d6d
 8009d54:	08009d85 	.word	0x08009d85
 8009d58:	08009dc5 	.word	0x08009dc5
 8009d5c:	08009f9b 	.word	0x08009f9b
 8009d60:	08009f9b 	.word	0x08009f9b
 8009d64:	08009f3b 	.word	0x08009f3b
 8009d68:	08009f67 	.word	0x08009f67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	7c12      	ldrb	r2, [r2, #16]
 8009d78:	f107 0108 	add.w	r1, r7, #8
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	60f8      	str	r0, [r7, #12]
      break;
 8009d82:	e112      	b.n	8009faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7c1b      	ldrb	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10d      	bne.n	8009da8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	f107 0208 	add.w	r2, r7, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	2202      	movs	r2, #2
 8009da4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009da6:	e100      	b.n	8009faa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db0:	f107 0208 	add.w	r2, r7, #8
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3
 8009db8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	701a      	strb	r2, [r3, #0]
      break;
 8009dc2:	e0f2      	b.n	8009faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	885b      	ldrh	r3, [r3, #2]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	f200 80ac 	bhi.w	8009f28 <USBD_GetDescriptor+0x204>
 8009dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <USBD_GetDescriptor+0xb4>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009e25 	.word	0x08009e25
 8009de0:	08009e59 	.word	0x08009e59
 8009de4:	08009e8d 	.word	0x08009e8d
 8009de8:	08009ec1 	.word	0x08009ec1
 8009dec:	08009ef5 	.word	0x08009ef5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7c12      	ldrb	r2, [r2, #16]
 8009e08:	f107 0108 	add.w	r1, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e12:	e091      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 facb 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	72fb      	strb	r3, [r7, #11]
          break;
 8009e22:	e089      	b.n	8009f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	7c12      	ldrb	r2, [r2, #16]
 8009e3c:	f107 0108 	add.w	r1, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e46:	e077      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fab1 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009e50:	7afb      	ldrb	r3, [r7, #11]
 8009e52:	3301      	adds	r3, #1
 8009e54:	72fb      	strb	r3, [r7, #11]
          break;
 8009e56:	e06f      	b.n	8009f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7a:	e05d      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa97 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	3301      	adds	r3, #1
 8009e88:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8a:	e055      	b.n	8009f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	7c12      	ldrb	r2, [r2, #16]
 8009ea4:	f107 0108 	add.w	r1, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eae:	e043      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa7d 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ebe:	e03b      	b.n	8009f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7c12      	ldrb	r2, [r2, #16]
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
 8009ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee2:	e029      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa63 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef2:	e021      	b.n	8009f38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f16:	e00f      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa49 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	3301      	adds	r3, #1
 8009f24:	72fb      	strb	r3, [r7, #11]
          break;
 8009f26:	e007      	b.n	8009f38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa41 	bl	800a3b2 <USBD_CtlError>
          err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f36:	bf00      	nop
      }
      break;
 8009f38:	e037      	b.n	8009faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7c1b      	ldrb	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4a:	f107 0208 	add.w	r2, r7, #8
 8009f4e:	4610      	mov	r0, r2
 8009f50:	4798      	blx	r3
 8009f52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f54:	e029      	b.n	8009faa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa2a 	bl	800a3b2 <USBD_CtlError>
        err++;
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	3301      	adds	r3, #1
 8009f62:	72fb      	strb	r3, [r7, #11]
      break;
 8009f64:	e021      	b.n	8009faa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	7c1b      	ldrb	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10d      	bne.n	8009f8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f76:	f107 0208 	add.w	r2, r7, #8
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4798      	blx	r3
 8009f7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3301      	adds	r3, #1
 8009f84:	2207      	movs	r2, #7
 8009f86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f88:	e00f      	b.n	8009faa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa10 	bl	800a3b2 <USBD_CtlError>
        err++;
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	3301      	adds	r3, #1
 8009f96:	72fb      	strb	r3, [r7, #11]
      break;
 8009f98:	e007      	b.n	8009faa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa08 	bl	800a3b2 <USBD_CtlError>
      err++;
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa8:	bf00      	nop
  }

  if (err != 0U)
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11e      	bne.n	8009fee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	88db      	ldrh	r3, [r3, #6]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d016      	beq.n	8009fe6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fb8:	893b      	ldrh	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00e      	beq.n	8009fdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	88da      	ldrh	r2, [r3, #6]
 8009fc2:	893b      	ldrh	r3, [r7, #8]
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	bf28      	it	cs
 8009fc8:	4613      	movcs	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fce:	893b      	ldrh	r3, [r7, #8]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fa69 	bl	800a4ac <USBD_CtlSendData>
 8009fda:	e009      	b.n	8009ff0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f9e7 	bl	800a3b2 <USBD_CtlError>
 8009fe4:	e004      	b.n	8009ff0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 faba 	bl	800a560 <USBD_CtlSendStatus>
 8009fec:	e000      	b.n	8009ff0 <USBD_GetDescriptor+0x2cc>
    return;
 8009fee:	bf00      	nop
  }
}
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop

08009ff8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	889b      	ldrh	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d131      	bne.n	800a06e <USBD_SetAddress+0x76>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d12d      	bne.n	800a06e <USBD_SetAddress+0x76>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	2b7f      	cmp	r3, #127	@ 0x7f
 800a018:	d829      	bhi.n	800a06e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d104      	bne.n	800a03c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9bc 	bl	800a3b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03a:	e01d      	b.n	800a078 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	7bfa      	ldrb	r2, [r7, #15]
 800a040:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 feeb 	bl	800ae24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fa86 	bl	800a560 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d004      	beq.n	800a064 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a062:	e009      	b.n	800a078 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06c:	e004      	b.n	800a078 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f99e 	bl	800a3b2 <USBD_CtlError>
  }
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	885b      	ldrh	r3, [r3, #2]
 800a092:	b2da      	uxtb	r2, r3
 800a094:	4b4e      	ldr	r3, [pc, #312]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a096:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a098:	4b4d      	ldr	r3, [pc, #308]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d905      	bls.n	800a0ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f985 	bl	800a3b2 <USBD_CtlError>
    return USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e08c      	b.n	800a1c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d002      	beq.n	800a0be <USBD_SetConfig+0x3e>
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d029      	beq.n	800a110 <USBD_SetConfig+0x90>
 800a0bc:	e075      	b.n	800a1aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0be:	4b44      	ldr	r3, [pc, #272]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d020      	beq.n	800a108 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a0c6:	4b42      	ldr	r3, [pc, #264]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0d0:	4b3f      	ldr	r3, [pc, #252]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7fe ffe3 	bl	80090a2 <USBD_SetClassConfig>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f962 	bl	800a3b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0f6:	e065      	b.n	800a1c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fa31 	bl	800a560 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a106:	e05d      	b.n	800a1c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fa29 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a10e:	e059      	b.n	800a1c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a110:	4b2f      	ldr	r3, [pc, #188]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d112      	bne.n	800a13e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a120:	4b2b      	ldr	r3, [pc, #172]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a12a:	4b29      	ldr	r3, [pc, #164]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fe ffd2 	bl	80090da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa12 	bl	800a560 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a13c:	e042      	b.n	800a1c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a13e:	4b24      	ldr	r3, [pc, #144]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d02a      	beq.n	800a1a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7fe ffc0 	bl	80090da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a164:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fe ff99 	bl	80090a2 <USBD_SetClassConfig>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00f      	beq.n	800a19a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f918 	bl	800a3b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	b2db      	uxtb	r3, r3
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fe ffa5 	bl	80090da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a198:	e014      	b.n	800a1c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f9e0 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a1a0:	e010      	b.n	800a1c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f9dc 	bl	800a560 <USBD_CtlSendStatus>
      break;
 800a1a8:	e00c      	b.n	800a1c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f900 	bl	800a3b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1b2:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <USBD_SetConfig+0x150>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fe ff8e 	bl	80090da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c2:	bf00      	nop
  }

  return ret;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000648 	.word	0x20000648

0800a1d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	88db      	ldrh	r3, [r3, #6]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d004      	beq.n	800a1f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f8e2 	bl	800a3b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1ee:	e023      	b.n	800a238 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	dc02      	bgt.n	800a202 <USBD_GetConfig+0x2e>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dc03      	bgt.n	800a208 <USBD_GetConfig+0x34>
 800a200:	e015      	b.n	800a22e <USBD_GetConfig+0x5a>
 800a202:	2b03      	cmp	r3, #3
 800a204:	d00b      	beq.n	800a21e <USBD_GetConfig+0x4a>
 800a206:	e012      	b.n	800a22e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3308      	adds	r3, #8
 800a212:	2201      	movs	r2, #1
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f948 	bl	800a4ac <USBD_CtlSendData>
        break;
 800a21c:	e00c      	b.n	800a238 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3304      	adds	r3, #4
 800a222:	2201      	movs	r2, #1
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f940 	bl	800a4ac <USBD_CtlSendData>
        break;
 800a22c:	e004      	b.n	800a238 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f8be 	bl	800a3b2 <USBD_CtlError>
        break;
 800a236:	bf00      	nop
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	2b02      	cmp	r3, #2
 800a256:	d81e      	bhi.n	800a296 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	88db      	ldrh	r3, [r3, #6]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d004      	beq.n	800a26a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8a5 	bl	800a3b2 <USBD_CtlError>
        break;
 800a268:	e01a      	b.n	800a2a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f043 0202 	orr.w	r2, r3, #2
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	330c      	adds	r3, #12
 800a28a:	2202      	movs	r2, #2
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f90c 	bl	800a4ac <USBD_CtlSendData>
      break;
 800a294:	e004      	b.n	800a2a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f88a 	bl	800a3b2 <USBD_CtlError>
      break;
 800a29e:	bf00      	nop
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d107      	bne.n	800a2ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f94c 	bl	800a560 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2c8:	e013      	b.n	800a2f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d10b      	bne.n	800a2ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	889b      	ldrh	r3, [r3, #4]
 800a2d6:	0a1b      	lsrs	r3, r3, #8
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f93c 	bl	800a560 <USBD_CtlSendStatus>
}
 800a2e8:	e003      	b.n	800a2f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f860 	bl	800a3b2 <USBD_CtlError>
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	3b01      	subs	r3, #1
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d80b      	bhi.n	800a32a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	885b      	ldrh	r3, [r3, #2]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d10c      	bne.n	800a334 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f91c 	bl	800a560 <USBD_CtlSendStatus>
      }
      break;
 800a328:	e004      	b.n	800a334 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f840 	bl	800a3b2 <USBD_CtlError>
      break;
 800a332:	e000      	b.n	800a336 <USBD_ClrFeature+0x3c>
      break;
 800a334:	bf00      	nop
  }
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	781a      	ldrb	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	781a      	ldrb	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fa40 	bl	80097ee <SWAPBYTE>
 800a36e:	4603      	mov	r3, r0
 800a370:	461a      	mov	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3301      	adds	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7ff fa33 	bl	80097ee <SWAPBYTE>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3301      	adds	r3, #1
 800a39a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f7ff fa26 	bl	80097ee <SWAPBYTE>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	80da      	strh	r2, [r3, #6]
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3bc:	2180      	movs	r1, #128	@ 0x80
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fcc6 	bl	800ad50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fcc2 	bl	800ad50 <USBD_LL_StallEP>
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d042      	beq.n	800a470 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3ee:	6938      	ldr	r0, [r7, #16]
 800a3f0:	f000 f842 	bl	800a478 <USBD_GetLen>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3fe:	d808      	bhi.n	800a412 <USBD_GetString+0x3e>
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f000 f839 	bl	800a478 <USBD_GetLen>
 800a406:	4603      	mov	r3, r0
 800a408:	3301      	adds	r3, #1
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	e001      	b.n	800a416 <USBD_GetString+0x42>
 800a412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	4413      	add	r3, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	701a      	strb	r2, [r3, #0]
  idx++;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	3301      	adds	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	4413      	add	r3, r2
 800a432:	2203      	movs	r2, #3
 800a434:	701a      	strb	r2, [r3, #0]
  idx++;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	3301      	adds	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a43c:	e013      	b.n	800a466 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]
    idx++;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	3301      	adds	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	4413      	add	r3, r2
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	3301      	adds	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e7      	bne.n	800a43e <USBD_GetString+0x6a>
 800a46e:	e000      	b.n	800a472 <USBD_GetString+0x9e>
    return;
 800a470:	bf00      	nop
  }
}
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a488:	e005      	b.n	800a496 <USBD_GetLen+0x1e>
  {
    len++;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	3301      	adds	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	3301      	adds	r3, #1
 800a494:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f5      	bne.n	800a48a <USBD_GetLen+0x12>
  }

  return len;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fcc5 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fcb4 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2203      	movs	r2, #3
 800a514:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	2100      	movs	r1, #0
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 fcb8 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fca7 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2204      	movs	r2, #4
 800a56c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a570:	2300      	movs	r3, #0
 800a572:	2200      	movs	r2, #0
 800a574:	2100      	movs	r1, #0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fc73 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2205      	movs	r2, #5
 800a592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fc81 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4912      	ldr	r1, [pc, #72]	@ (800a5fc <MX_USB_DEVICE_Init+0x50>)
 800a5b4:	4812      	ldr	r0, [pc, #72]	@ (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5b6:	f7fe fcf7 	bl	8008fa8 <USBD_Init>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5c0:	f7f8 fa22 	bl	8002a08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5c4:	490f      	ldr	r1, [pc, #60]	@ (800a604 <MX_USB_DEVICE_Init+0x58>)
 800a5c6:	480e      	ldr	r0, [pc, #56]	@ (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5c8:	f7fe fd1e 	bl	8009008 <USBD_RegisterClass>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5d2:	f7f8 fa19 	bl	8002a08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5d6:	490c      	ldr	r1, [pc, #48]	@ (800a608 <MX_USB_DEVICE_Init+0x5c>)
 800a5d8:	4809      	ldr	r0, [pc, #36]	@ (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5da:	f7fe fc55 	bl	8008e88 <USBD_CDC_RegisterInterface>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5e4:	f7f8 fa10 	bl	8002a08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5e8:	4805      	ldr	r0, [pc, #20]	@ (800a600 <MX_USB_DEVICE_Init+0x54>)
 800a5ea:	f7fe fd43 	bl	8009074 <USBD_Start>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5f4:	f7f8 fa08 	bl	8002a08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	200000d4 	.word	0x200000d4
 800a600:	2000064c 	.word	0x2000064c
 800a604:	20000040 	.word	0x20000040
 800a608:	200000c0 	.word	0x200000c0

0800a60c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a610:	2200      	movs	r2, #0
 800a612:	4905      	ldr	r1, [pc, #20]	@ (800a628 <CDC_Init_FS+0x1c>)
 800a614:	4805      	ldr	r0, [pc, #20]	@ (800a62c <CDC_Init_FS+0x20>)
 800a616:	f7fe fc51 	bl	8008ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a61a:	4905      	ldr	r1, [pc, #20]	@ (800a630 <CDC_Init_FS+0x24>)
 800a61c:	4803      	ldr	r0, [pc, #12]	@ (800a62c <CDC_Init_FS+0x20>)
 800a61e:	f7fe fc6f 	bl	8008f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a624:	4618      	mov	r0, r3
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20001128 	.word	0x20001128
 800a62c:	2000064c 	.word	0x2000064c
 800a630:	20000928 	.word	0x20000928

0800a634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
 800a650:	4613      	mov	r3, r2
 800a652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	2b23      	cmp	r3, #35	@ 0x23
 800a658:	d84a      	bhi.n	800a6f0 <CDC_Control_FS+0xac>
 800a65a:	a201      	add	r2, pc, #4	@ (adr r2, 800a660 <CDC_Control_FS+0x1c>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a6f1 	.word	0x0800a6f1
 800a664:	0800a6f1 	.word	0x0800a6f1
 800a668:	0800a6f1 	.word	0x0800a6f1
 800a66c:	0800a6f1 	.word	0x0800a6f1
 800a670:	0800a6f1 	.word	0x0800a6f1
 800a674:	0800a6f1 	.word	0x0800a6f1
 800a678:	0800a6f1 	.word	0x0800a6f1
 800a67c:	0800a6f1 	.word	0x0800a6f1
 800a680:	0800a6f1 	.word	0x0800a6f1
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a6f1 	.word	0x0800a6f1
 800a68c:	0800a6f1 	.word	0x0800a6f1
 800a690:	0800a6f1 	.word	0x0800a6f1
 800a694:	0800a6f1 	.word	0x0800a6f1
 800a698:	0800a6f1 	.word	0x0800a6f1
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a6f1 	.word	0x0800a6f1
 800a6a4:	0800a6f1 	.word	0x0800a6f1
 800a6a8:	0800a6f1 	.word	0x0800a6f1
 800a6ac:	0800a6f1 	.word	0x0800a6f1
 800a6b0:	0800a6f1 	.word	0x0800a6f1
 800a6b4:	0800a6f1 	.word	0x0800a6f1
 800a6b8:	0800a6f1 	.word	0x0800a6f1
 800a6bc:	0800a6f1 	.word	0x0800a6f1
 800a6c0:	0800a6f1 	.word	0x0800a6f1
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	0800a6f1 	.word	0x0800a6f1
 800a6cc:	0800a6f1 	.word	0x0800a6f1
 800a6d0:	0800a6f1 	.word	0x0800a6f1
 800a6d4:	0800a6f1 	.word	0x0800a6f1
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f1 	.word	0x0800a6f1
 800a6e0:	0800a6f1 	.word	0x0800a6f1
 800a6e4:	0800a6f1 	.word	0x0800a6f1
 800a6e8:	0800a6f1 	.word	0x0800a6f1
 800a6ec:	0800a6f1 	.word	0x0800a6f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6f0:	bf00      	nop
  }

  return (USBD_OK);
 800a6f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4805      	ldr	r0, [pc, #20]	@ (800a724 <CDC_Receive_FS+0x24>)
 800a70e:	f7fe fbf7 	bl	8008f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a712:	4804      	ldr	r0, [pc, #16]	@ (800a724 <CDC_Receive_FS+0x24>)
 800a714:	f7fe fc12 	bl	8008f3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	2000064c 	.word	0x2000064c

0800a728 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a728:	b480      	push	{r7}
 800a72a:	b087      	sub	sp, #28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	4613      	mov	r3, r2
 800a734:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a73a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
	...

0800a74c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2212      	movs	r2, #18
 800a75c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a75e:	4b03      	ldr	r3, [pc, #12]	@ (800a76c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	200000f0 	.word	0x200000f0

0800a770 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2204      	movs	r2, #4
 800a780:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	@ (800a790 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	20000104 	.word	0x20000104

0800a794 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	4907      	ldr	r1, [pc, #28]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7aa:	4808      	ldr	r0, [pc, #32]	@ (800a7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a7ac:	f7ff fe12 	bl	800a3d4 <USBD_GetString>
 800a7b0:	e004      	b.n	800a7bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	4904      	ldr	r1, [pc, #16]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7b6:	4805      	ldr	r0, [pc, #20]	@ (800a7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a7b8:	f7ff fe0c 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001928 	.word	0x20001928
 800a7cc:	0800e3dc 	.word	0x0800e3dc

0800a7d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	4904      	ldr	r1, [pc, #16]	@ (800a7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7e0:	4804      	ldr	r0, [pc, #16]	@ (800a7f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7e2:	f7ff fdf7 	bl	800a3d4 <USBD_GetString>
  return USBD_StrDesc;
 800a7e6:	4b02      	ldr	r3, [pc, #8]	@ (800a7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20001928 	.word	0x20001928
 800a7f4:	0800e3f4 	.word	0x0800e3f4

0800a7f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	221a      	movs	r2, #26
 800a808:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a80a:	f000 f843 	bl	800a894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a80e:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20000108 	.word	0x20000108

0800a81c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d105      	bne.n	800a83a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4907      	ldr	r1, [pc, #28]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a832:	4808      	ldr	r0, [pc, #32]	@ (800a854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a834:	f7ff fdce 	bl	800a3d4 <USBD_GetString>
 800a838:	e004      	b.n	800a844 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	4904      	ldr	r1, [pc, #16]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a83e:	4805      	ldr	r0, [pc, #20]	@ (800a854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a840:	f7ff fdc8 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a844:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20001928 	.word	0x20001928
 800a854:	0800e408 	.word	0x0800e408

0800a858 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d105      	bne.n	800a876 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4907      	ldr	r1, [pc, #28]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a86e:	4808      	ldr	r0, [pc, #32]	@ (800a890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a870:	f7ff fdb0 	bl	800a3d4 <USBD_GetString>
 800a874:	e004      	b.n	800a880 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4904      	ldr	r1, [pc, #16]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a87a:	4805      	ldr	r0, [pc, #20]	@ (800a890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a87c:	f7ff fdaa 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a880:	4b02      	ldr	r3, [pc, #8]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20001928 	.word	0x20001928
 800a890:	0800e414 	.word	0x0800e414

0800a894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a89a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d8 <Get_SerialNum+0x44>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <Get_SerialNum+0x48>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e0 <Get_SerialNum+0x4c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	4909      	ldr	r1, [pc, #36]	@ (800a8e4 <Get_SerialNum+0x50>)
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f814 	bl	800a8ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	4908      	ldr	r1, [pc, #32]	@ (800a8e8 <Get_SerialNum+0x54>)
 800a8c8:	68b8      	ldr	r0, [r7, #8]
 800a8ca:	f000 f80f 	bl	800a8ec <IntToUnicode>
  }
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	1fff7a10 	.word	0x1fff7a10
 800a8dc:	1fff7a14 	.word	0x1fff7a14
 800a8e0:	1fff7a18 	.word	0x1fff7a18
 800a8e4:	2000010a 	.word	0x2000010a
 800a8e8:	2000011a 	.word	0x2000011a

0800a8ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
 800a902:	e027      	b.n	800a954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	0f1b      	lsrs	r3, r3, #28
 800a908:	2b09      	cmp	r3, #9
 800a90a:	d80b      	bhi.n	800a924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0f1b      	lsrs	r3, r3, #28
 800a910:	b2da      	uxtb	r2, r3
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4619      	mov	r1, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	440b      	add	r3, r1
 800a91c:	3230      	adds	r2, #48	@ 0x30
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e00a      	b.n	800a93a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	0f1b      	lsrs	r3, r3, #28
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4619      	mov	r1, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	440b      	add	r3, r1
 800a934:	3237      	adds	r2, #55	@ 0x37
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	3301      	adds	r3, #1
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	3301      	adds	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
 800a954:	7dfa      	ldrb	r2, [r7, #23]
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d3d3      	bcc.n	800a904 <IntToUnicode+0x18>
  }
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
	...

0800a96c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a98c:	d13a      	bne.n	800aa04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	4b1e      	ldr	r3, [pc, #120]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a996:	4a1d      	ldr	r2, [pc, #116]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a998:	f043 0301 	orr.w	r3, r3, #1
 800a99c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a99e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a9ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9bc:	230a      	movs	r3, #10
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9c0:	f107 0314 	add.w	r3, r7, #20
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4812      	ldr	r0, [pc, #72]	@ (800aa10 <HAL_PCD_MspInit+0xa4>)
 800a9c8:	f7f9 fb74 	bl	80040b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9d0:	4a0e      	ldr	r2, [pc, #56]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d6:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a9e6:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9e8:	4b08      	ldr	r3, [pc, #32]	@ (800aa0c <HAL_PCD_MspInit+0xa0>)
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	2043      	movs	r0, #67	@ 0x43
 800a9fa:	f7f9 fb24 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9fe:	2043      	movs	r0, #67	@ 0x43
 800aa00:	f7f9 fb3d 	bl	800407e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa04:	bf00      	nop
 800aa06:	3728      	adds	r7, #40	@ 0x28
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	40023800 	.word	0x40023800
 800aa10:	40020000 	.word	0x40020000

0800aa14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe fb6f 	bl	800910e <USBD_LL_SetupStage>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa4a:	78fa      	ldrb	r2, [r7, #3]
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	440b      	add	r3, r1
 800aa58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	4619      	mov	r1, r3
 800aa62:	f7fe fba9 	bl	80091b8 <USBD_LL_DataOutStage>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3320      	adds	r3, #32
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f7fe fc42 	bl	800931e <USBD_LL_DataInStage>
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fd7c 	bl	80095ae <USBD_LL_SOF>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	79db      	ldrb	r3, [r3, #7]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
 800aad6:	e008      	b.n	800aaea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	79db      	ldrb	r3, [r3, #7]
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d102      	bne.n	800aae6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	e001      	b.n	800aaea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aae6:	f7f7 ff8f 	bl	8002a08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaf0:	7bfa      	ldrb	r2, [r7, #15]
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fd16 	bl	8009526 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fcbe 	bl	8009482 <USBD_LL_Reset>
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fd11 	bl	8009546 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6812      	ldr	r2, [r2, #0]
 800ab32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	7adb      	ldrb	r3, [r3, #11]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab44:	4b04      	ldr	r3, [pc, #16]	@ (800ab58 <HAL_PCD_SuspendCallback+0x48>)
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	4a03      	ldr	r2, [pc, #12]	@ (800ab58 <HAL_PCD_SuspendCallback+0x48>)
 800ab4a:	f043 0306 	orr.w	r3, r3, #6
 800ab4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed00 	.word	0xe000ed00

0800ab5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fd07 	bl	800957e <USBD_LL_Resume>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab8a:	78fa      	ldrb	r2, [r7, #3]
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd5f 	bl	8009652 <USBD_LL_IsoOUTIncomplete>
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abae:	78fa      	ldrb	r2, [r7, #3]
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fd1b 	bl	80095ee <USBD_LL_IsoINIncomplete>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fd71 	bl	80096b6 <USBD_LL_DevConnected>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fd6e 	bl	80096cc <USBD_LL_DevDisconnected>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d13c      	bne.n	800ac82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac08:	4a20      	ldr	r2, [pc, #128]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a1e      	ldr	r2, [pc, #120]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac14:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac18:	4b1c      	ldr	r3, [pc, #112]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac20:	4b1a      	ldr	r3, [pc, #104]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac22:	2204      	movs	r2, #4
 800ac24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac26:	4b19      	ldr	r3, [pc, #100]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac28:	2202      	movs	r2, #2
 800ac2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac2c:	4b17      	ldr	r3, [pc, #92]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac32:	4b16      	ldr	r3, [pc, #88]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac34:	2202      	movs	r2, #2
 800ac36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac38:	4b14      	ldr	r3, [pc, #80]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac3e:	4b13      	ldr	r3, [pc, #76]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac44:	4b11      	ldr	r3, [pc, #68]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac4a:	4b10      	ldr	r3, [pc, #64]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac50:	4b0e      	ldr	r3, [pc, #56]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac56:	480d      	ldr	r0, [pc, #52]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac58:	f7f9 fbe1 	bl	800441e <HAL_PCD_Init>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac62:	f7f7 fed1 	bl	8002a08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac66:	2180      	movs	r1, #128	@ 0x80
 800ac68:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac6a:	f7fa fe0e 	bl	800588a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac6e:	2240      	movs	r2, #64	@ 0x40
 800ac70:	2100      	movs	r1, #0
 800ac72:	4806      	ldr	r0, [pc, #24]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac74:	f7fa fdc2 	bl	80057fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac78:	2280      	movs	r2, #128	@ 0x80
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	4803      	ldr	r0, [pc, #12]	@ (800ac8c <USBD_LL_Init+0x94>)
 800ac7e:	f7fa fdbd 	bl	80057fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20001b28 	.word	0x20001b28

0800ac90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f9 fcc8 	bl	800463c <HAL_PCD_Start>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f942 	bl	800af3c <USBD_Get_USB_Status>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	4608      	mov	r0, r1
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	70fb      	strb	r3, [r7, #3]
 800acd8:	460b      	mov	r3, r1
 800acda:	70bb      	strb	r3, [r7, #2]
 800acdc:	4613      	mov	r3, r2
 800acde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800acee:	78bb      	ldrb	r3, [r7, #2]
 800acf0:	883a      	ldrh	r2, [r7, #0]
 800acf2:	78f9      	ldrb	r1, [r7, #3]
 800acf4:	f7fa f99c 	bl	8005030 <HAL_PCD_EP_Open>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f91c 	bl	800af3c <USBD_Get_USB_Status>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad2c:	78fa      	ldrb	r2, [r7, #3]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fa f9e7 	bl	8005104 <HAL_PCD_EP_Close>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f8fd 	bl	800af3c <USBD_Get_USB_Status>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fa fa9f 	bl	80052b2 <HAL_PCD_EP_SetStall>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f8de 	bl	800af3c <USBD_Get_USB_Status>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ada8:	78fa      	ldrb	r2, [r7, #3]
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f7fa fae3 	bl	8005378 <HAL_PCD_EP_ClrStall>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f8bf 	bl	800af3c <USBD_Get_USB_Status>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ade0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da0b      	bge.n	800ae00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adee:	68f9      	ldr	r1, [r7, #12]
 800adf0:	4613      	mov	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	3316      	adds	r3, #22
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	e00b      	b.n	800ae18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	440b      	add	r3, r1
 800ae12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae3e:	78fa      	ldrb	r2, [r7, #3]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fa f8d0 	bl	8004fe8 <HAL_PCD_SetAddress>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f874 	bl	800af3c <USBD_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b086      	sub	sp, #24
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae80:	7af9      	ldrb	r1, [r7, #11]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	f7fa f9da 	bl	800523e <HAL_PCD_EP_Transmit>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f853 	bl	800af3c <USBD_Get_USB_Status>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aec2:	7af9      	ldrb	r1, [r7, #11]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f7fa f966 	bl	8005198 <HAL_PCD_EP_Receive>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f832 	bl	800af3c <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fa f986 	bl	800520e <HAL_PCD_EP_GetRxCount>
 800af02:	4603      	mov	r3, r0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af14:	4b03      	ldr	r3, [pc, #12]	@ (800af24 <USBD_static_malloc+0x18>)
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	2000200c 	.word	0x2000200c

0800af28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]

}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d817      	bhi.n	800af80 <USBD_Get_USB_Status+0x44>
 800af50:	a201      	add	r2, pc, #4	@ (adr r2, 800af58 <USBD_Get_USB_Status+0x1c>)
 800af52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af56:	bf00      	nop
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af6f 	.word	0x0800af6f
 800af60:	0800af75 	.word	0x0800af75
 800af64:	0800af7b 	.word	0x0800af7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	73fb      	strb	r3, [r7, #15]
    break;
 800af6c:	e00b      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	73fb      	strb	r3, [r7, #15]
    break;
 800af72:	e008      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af74:	2301      	movs	r3, #1
 800af76:	73fb      	strb	r3, [r7, #15]
    break;
 800af78:	e005      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af7a:	2303      	movs	r3, #3
 800af7c:	73fb      	strb	r3, [r7, #15]
    break;
 800af7e:	e002      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	73fb      	strb	r3, [r7, #15]
    break;
 800af84:	bf00      	nop
  }
  return usb_status;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <__cvt>:
 800af94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	ec57 6b10 	vmov	r6, r7, d0
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	460c      	mov	r4, r1
 800afa0:	4619      	mov	r1, r3
 800afa2:	463b      	mov	r3, r7
 800afa4:	bfbb      	ittet	lt
 800afa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800afaa:	461f      	movlt	r7, r3
 800afac:	2300      	movge	r3, #0
 800afae:	232d      	movlt	r3, #45	@ 0x2d
 800afb0:	700b      	strb	r3, [r1, #0]
 800afb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800afb8:	4691      	mov	r9, r2
 800afba:	f023 0820 	bic.w	r8, r3, #32
 800afbe:	bfbc      	itt	lt
 800afc0:	4632      	movlt	r2, r6
 800afc2:	4616      	movlt	r6, r2
 800afc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afc8:	d005      	beq.n	800afd6 <__cvt+0x42>
 800afca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afce:	d100      	bne.n	800afd2 <__cvt+0x3e>
 800afd0:	3401      	adds	r4, #1
 800afd2:	2102      	movs	r1, #2
 800afd4:	e000      	b.n	800afd8 <__cvt+0x44>
 800afd6:	2103      	movs	r1, #3
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	ab02      	add	r3, sp, #8
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	ec47 6b10 	vmov	d0, r6, r7
 800afe4:	4653      	mov	r3, sl
 800afe6:	4622      	mov	r2, r4
 800afe8:	f000 ff46 	bl	800be78 <_dtoa_r>
 800afec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aff0:	4605      	mov	r5, r0
 800aff2:	d119      	bne.n	800b028 <__cvt+0x94>
 800aff4:	f019 0f01 	tst.w	r9, #1
 800aff8:	d00e      	beq.n	800b018 <__cvt+0x84>
 800affa:	eb00 0904 	add.w	r9, r0, r4
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b00a:	b108      	cbz	r0, 800b010 <__cvt+0x7c>
 800b00c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b010:	2230      	movs	r2, #48	@ 0x30
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	454b      	cmp	r3, r9
 800b016:	d31e      	bcc.n	800b056 <__cvt+0xc2>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b01c:	1b5b      	subs	r3, r3, r5
 800b01e:	4628      	mov	r0, r5
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	b004      	add	sp, #16
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b02c:	eb00 0904 	add.w	r9, r0, r4
 800b030:	d1e5      	bne.n	800affe <__cvt+0x6a>
 800b032:	7803      	ldrb	r3, [r0, #0]
 800b034:	2b30      	cmp	r3, #48	@ 0x30
 800b036:	d10a      	bne.n	800b04e <__cvt+0xba>
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 800b044:	b918      	cbnz	r0, 800b04e <__cvt+0xba>
 800b046:	f1c4 0401 	rsb	r4, r4, #1
 800b04a:	f8ca 4000 	str.w	r4, [sl]
 800b04e:	f8da 3000 	ldr.w	r3, [sl]
 800b052:	4499      	add	r9, r3
 800b054:	e7d3      	b.n	800affe <__cvt+0x6a>
 800b056:	1c59      	adds	r1, r3, #1
 800b058:	9103      	str	r1, [sp, #12]
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e7d9      	b.n	800b012 <__cvt+0x7e>

0800b05e <__exponent>:
 800b05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b060:	2900      	cmp	r1, #0
 800b062:	bfba      	itte	lt
 800b064:	4249      	neglt	r1, r1
 800b066:	232d      	movlt	r3, #45	@ 0x2d
 800b068:	232b      	movge	r3, #43	@ 0x2b
 800b06a:	2909      	cmp	r1, #9
 800b06c:	7002      	strb	r2, [r0, #0]
 800b06e:	7043      	strb	r3, [r0, #1]
 800b070:	dd29      	ble.n	800b0c6 <__exponent+0x68>
 800b072:	f10d 0307 	add.w	r3, sp, #7
 800b076:	461d      	mov	r5, r3
 800b078:	270a      	movs	r7, #10
 800b07a:	461a      	mov	r2, r3
 800b07c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b080:	fb07 1416 	mls	r4, r7, r6, r1
 800b084:	3430      	adds	r4, #48	@ 0x30
 800b086:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b08a:	460c      	mov	r4, r1
 800b08c:	2c63      	cmp	r4, #99	@ 0x63
 800b08e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b092:	4631      	mov	r1, r6
 800b094:	dcf1      	bgt.n	800b07a <__exponent+0x1c>
 800b096:	3130      	adds	r1, #48	@ 0x30
 800b098:	1e94      	subs	r4, r2, #2
 800b09a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b09e:	1c41      	adds	r1, r0, #1
 800b0a0:	4623      	mov	r3, r4
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	d30a      	bcc.n	800b0bc <__exponent+0x5e>
 800b0a6:	f10d 0309 	add.w	r3, sp, #9
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	bf88      	it	hi
 800b0b0:	2300      	movhi	r3, #0
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	4403      	add	r3, r0
 800b0b6:	1a18      	subs	r0, r3, r0
 800b0b8:	b003      	add	sp, #12
 800b0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0c4:	e7ed      	b.n	800b0a2 <__exponent+0x44>
 800b0c6:	2330      	movs	r3, #48	@ 0x30
 800b0c8:	3130      	adds	r1, #48	@ 0x30
 800b0ca:	7083      	strb	r3, [r0, #2]
 800b0cc:	70c1      	strb	r1, [r0, #3]
 800b0ce:	1d03      	adds	r3, r0, #4
 800b0d0:	e7f1      	b.n	800b0b6 <__exponent+0x58>
	...

0800b0d4 <_printf_float>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	b08d      	sub	sp, #52	@ 0x34
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	461f      	mov	r7, r3
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	f000 fdc5 	bl	800bc74 <_localeconv_r>
 800b0ea:	6803      	ldr	r3, [r0, #0]
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f5 f8be 	bl	8000270 <strlen>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0fc:	9005      	str	r0, [sp, #20]
 800b0fe:	3307      	adds	r3, #7
 800b100:	f023 0307 	bic.w	r3, r3, #7
 800b104:	f103 0208 	add.w	r2, r3, #8
 800b108:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b10c:	f8d4 b000 	ldr.w	fp, [r4]
 800b110:	f8c8 2000 	str.w	r2, [r8]
 800b114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b118:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b11c:	9307      	str	r3, [sp, #28]
 800b11e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b122:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b12a:	4b9c      	ldr	r3, [pc, #624]	@ (800b39c <_printf_float+0x2c8>)
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295
 800b130:	f7f5 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 800b134:	bb70      	cbnz	r0, 800b194 <_printf_float+0xc0>
 800b136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13a:	4b98      	ldr	r3, [pc, #608]	@ (800b39c <_printf_float+0x2c8>)
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	f7f5 fcd6 	bl	8000af0 <__aeabi_dcmple>
 800b144:	bb30      	cbnz	r0, 800b194 <_printf_float+0xc0>
 800b146:	2200      	movs	r2, #0
 800b148:	2300      	movs	r3, #0
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 fcc5 	bl	8000adc <__aeabi_dcmplt>
 800b152:	b110      	cbz	r0, 800b15a <_printf_float+0x86>
 800b154:	232d      	movs	r3, #45	@ 0x2d
 800b156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b15a:	4a91      	ldr	r2, [pc, #580]	@ (800b3a0 <_printf_float+0x2cc>)
 800b15c:	4b91      	ldr	r3, [pc, #580]	@ (800b3a4 <_printf_float+0x2d0>)
 800b15e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b162:	bf8c      	ite	hi
 800b164:	4690      	movhi	r8, r2
 800b166:	4698      	movls	r8, r3
 800b168:	2303      	movs	r3, #3
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	f02b 0304 	bic.w	r3, fp, #4
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	f04f 0900 	mov.w	r9, #0
 800b176:	9700      	str	r7, [sp, #0]
 800b178:	4633      	mov	r3, r6
 800b17a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b17c:	4621      	mov	r1, r4
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f9d2 	bl	800b528 <_printf_common>
 800b184:	3001      	adds	r0, #1
 800b186:	f040 808d 	bne.w	800b2a4 <_printf_float+0x1d0>
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	b00d      	add	sp, #52	@ 0x34
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	4642      	mov	r2, r8
 800b196:	464b      	mov	r3, r9
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f5 fcc6 	bl	8000b2c <__aeabi_dcmpun>
 800b1a0:	b140      	cbz	r0, 800b1b4 <_printf_float+0xe0>
 800b1a2:	464b      	mov	r3, r9
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	bfbc      	itt	lt
 800b1a8:	232d      	movlt	r3, #45	@ 0x2d
 800b1aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1ae:	4a7e      	ldr	r2, [pc, #504]	@ (800b3a8 <_printf_float+0x2d4>)
 800b1b0:	4b7e      	ldr	r3, [pc, #504]	@ (800b3ac <_printf_float+0x2d8>)
 800b1b2:	e7d4      	b.n	800b15e <_printf_float+0x8a>
 800b1b4:	6863      	ldr	r3, [r4, #4]
 800b1b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b1ba:	9206      	str	r2, [sp, #24]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	d13b      	bne.n	800b238 <_printf_float+0x164>
 800b1c0:	2306      	movs	r3, #6
 800b1c2:	6063      	str	r3, [r4, #4]
 800b1c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b1d4:	ab09      	add	r3, sp, #36	@ 0x24
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	6861      	ldr	r1, [r4, #4]
 800b1da:	ec49 8b10 	vmov	d0, r8, r9
 800b1de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7ff fed6 	bl	800af94 <__cvt>
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1ec:	2b47      	cmp	r3, #71	@ 0x47
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	d129      	bne.n	800b246 <_printf_float+0x172>
 800b1f2:	1cc8      	adds	r0, r1, #3
 800b1f4:	db02      	blt.n	800b1fc <_printf_float+0x128>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	dd41      	ble.n	800b280 <_printf_float+0x1ac>
 800b1fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b200:	fa5f fa8a 	uxtb.w	sl, sl
 800b204:	3901      	subs	r1, #1
 800b206:	4652      	mov	r2, sl
 800b208:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b20c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b20e:	f7ff ff26 	bl	800b05e <__exponent>
 800b212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b214:	1813      	adds	r3, r2, r0
 800b216:	2a01      	cmp	r2, #1
 800b218:	4681      	mov	r9, r0
 800b21a:	6123      	str	r3, [r4, #16]
 800b21c:	dc02      	bgt.n	800b224 <_printf_float+0x150>
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	07d2      	lsls	r2, r2, #31
 800b222:	d501      	bpl.n	800b228 <_printf_float+0x154>
 800b224:	3301      	adds	r3, #1
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0a2      	beq.n	800b176 <_printf_float+0xa2>
 800b230:	232d      	movs	r3, #45	@ 0x2d
 800b232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b236:	e79e      	b.n	800b176 <_printf_float+0xa2>
 800b238:	9a06      	ldr	r2, [sp, #24]
 800b23a:	2a47      	cmp	r2, #71	@ 0x47
 800b23c:	d1c2      	bne.n	800b1c4 <_printf_float+0xf0>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1c0      	bne.n	800b1c4 <_printf_float+0xf0>
 800b242:	2301      	movs	r3, #1
 800b244:	e7bd      	b.n	800b1c2 <_printf_float+0xee>
 800b246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b24a:	d9db      	bls.n	800b204 <_printf_float+0x130>
 800b24c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b250:	d118      	bne.n	800b284 <_printf_float+0x1b0>
 800b252:	2900      	cmp	r1, #0
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	dd0b      	ble.n	800b270 <_printf_float+0x19c>
 800b258:	6121      	str	r1, [r4, #16]
 800b25a:	b913      	cbnz	r3, 800b262 <_printf_float+0x18e>
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	07d0      	lsls	r0, r2, #31
 800b260:	d502      	bpl.n	800b268 <_printf_float+0x194>
 800b262:	3301      	adds	r3, #1
 800b264:	440b      	add	r3, r1
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b26a:	f04f 0900 	mov.w	r9, #0
 800b26e:	e7db      	b.n	800b228 <_printf_float+0x154>
 800b270:	b913      	cbnz	r3, 800b278 <_printf_float+0x1a4>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x1a8>
 800b278:	3302      	adds	r3, #2
 800b27a:	e7f4      	b.n	800b266 <_printf_float+0x192>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e7f2      	b.n	800b266 <_printf_float+0x192>
 800b280:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b286:	4299      	cmp	r1, r3
 800b288:	db05      	blt.n	800b296 <_printf_float+0x1c2>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	6121      	str	r1, [r4, #16]
 800b28e:	07d8      	lsls	r0, r3, #31
 800b290:	d5ea      	bpl.n	800b268 <_printf_float+0x194>
 800b292:	1c4b      	adds	r3, r1, #1
 800b294:	e7e7      	b.n	800b266 <_printf_float+0x192>
 800b296:	2900      	cmp	r1, #0
 800b298:	bfd4      	ite	le
 800b29a:	f1c1 0202 	rsble	r2, r1, #2
 800b29e:	2201      	movgt	r2, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	e7e0      	b.n	800b266 <_printf_float+0x192>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	055a      	lsls	r2, r3, #21
 800b2a8:	d407      	bmi.n	800b2ba <_printf_float+0x1e6>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d12b      	bne.n	800b310 <_printf_float+0x23c>
 800b2b8:	e767      	b.n	800b18a <_printf_float+0xb6>
 800b2ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2be:	f240 80dd 	bls.w	800b47c <_printf_float+0x3a8>
 800b2c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f7f5 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d033      	beq.n	800b33a <_printf_float+0x266>
 800b2d2:	4a37      	ldr	r2, [pc, #220]	@ (800b3b0 <_printf_float+0x2dc>)
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4628      	mov	r0, r5
 800b2da:	47b8      	blx	r7
 800b2dc:	3001      	adds	r0, #1
 800b2de:	f43f af54 	beq.w	800b18a <_printf_float+0xb6>
 800b2e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2e6:	4543      	cmp	r3, r8
 800b2e8:	db02      	blt.n	800b2f0 <_printf_float+0x21c>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	07d8      	lsls	r0, r3, #31
 800b2ee:	d50f      	bpl.n	800b310 <_printf_float+0x23c>
 800b2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	f43f af45 	beq.w	800b18a <_printf_float+0xb6>
 800b300:	f04f 0900 	mov.w	r9, #0
 800b304:	f108 38ff 	add.w	r8, r8, #4294967295
 800b308:	f104 0a1a 	add.w	sl, r4, #26
 800b30c:	45c8      	cmp	r8, r9
 800b30e:	dc09      	bgt.n	800b324 <_printf_float+0x250>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	079b      	lsls	r3, r3, #30
 800b314:	f100 8103 	bmi.w	800b51e <_printf_float+0x44a>
 800b318:	68e0      	ldr	r0, [r4, #12]
 800b31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b31c:	4298      	cmp	r0, r3
 800b31e:	bfb8      	it	lt
 800b320:	4618      	movlt	r0, r3
 800b322:	e734      	b.n	800b18e <_printf_float+0xba>
 800b324:	2301      	movs	r3, #1
 800b326:	4652      	mov	r2, sl
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af2b 	beq.w	800b18a <_printf_float+0xb6>
 800b334:	f109 0901 	add.w	r9, r9, #1
 800b338:	e7e8      	b.n	800b30c <_printf_float+0x238>
 800b33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dc39      	bgt.n	800b3b4 <_printf_float+0x2e0>
 800b340:	4a1b      	ldr	r2, [pc, #108]	@ (800b3b0 <_printf_float+0x2dc>)
 800b342:	2301      	movs	r3, #1
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af1d 	beq.w	800b18a <_printf_float+0xb6>
 800b350:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b354:	ea59 0303 	orrs.w	r3, r9, r3
 800b358:	d102      	bne.n	800b360 <_printf_float+0x28c>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	07d9      	lsls	r1, r3, #31
 800b35e:	d5d7      	bpl.n	800b310 <_printf_float+0x23c>
 800b360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f af0d 	beq.w	800b18a <_printf_float+0xb6>
 800b370:	f04f 0a00 	mov.w	sl, #0
 800b374:	f104 0b1a 	add.w	fp, r4, #26
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	425b      	negs	r3, r3
 800b37c:	4553      	cmp	r3, sl
 800b37e:	dc01      	bgt.n	800b384 <_printf_float+0x2b0>
 800b380:	464b      	mov	r3, r9
 800b382:	e793      	b.n	800b2ac <_printf_float+0x1d8>
 800b384:	2301      	movs	r3, #1
 800b386:	465a      	mov	r2, fp
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	f43f aefb 	beq.w	800b18a <_printf_float+0xb6>
 800b394:	f10a 0a01 	add.w	sl, sl, #1
 800b398:	e7ee      	b.n	800b378 <_printf_float+0x2a4>
 800b39a:	bf00      	nop
 800b39c:	7fefffff 	.word	0x7fefffff
 800b3a0:	0800e638 	.word	0x0800e638
 800b3a4:	0800e634 	.word	0x0800e634
 800b3a8:	0800e640 	.word	0x0800e640
 800b3ac:	0800e63c 	.word	0x0800e63c
 800b3b0:	0800e644 	.word	0x0800e644
 800b3b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3ba:	4553      	cmp	r3, sl
 800b3bc:	bfa8      	it	ge
 800b3be:	4653      	movge	r3, sl
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	4699      	mov	r9, r3
 800b3c4:	dc36      	bgt.n	800b434 <_printf_float+0x360>
 800b3c6:	f04f 0b00 	mov.w	fp, #0
 800b3ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ce:	f104 021a 	add.w	r2, r4, #26
 800b3d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3d4:	9306      	str	r3, [sp, #24]
 800b3d6:	eba3 0309 	sub.w	r3, r3, r9
 800b3da:	455b      	cmp	r3, fp
 800b3dc:	dc31      	bgt.n	800b442 <_printf_float+0x36e>
 800b3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e0:	459a      	cmp	sl, r3
 800b3e2:	dc3a      	bgt.n	800b45a <_printf_float+0x386>
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	07da      	lsls	r2, r3, #31
 800b3e8:	d437      	bmi.n	800b45a <_printf_float+0x386>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ec:	ebaa 0903 	sub.w	r9, sl, r3
 800b3f0:	9b06      	ldr	r3, [sp, #24]
 800b3f2:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f6:	4599      	cmp	r9, r3
 800b3f8:	bfa8      	it	ge
 800b3fa:	4699      	movge	r9, r3
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	dc33      	bgt.n	800b46a <_printf_float+0x396>
 800b402:	f04f 0800 	mov.w	r8, #0
 800b406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b40a:	f104 0b1a 	add.w	fp, r4, #26
 800b40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b410:	ebaa 0303 	sub.w	r3, sl, r3
 800b414:	eba3 0309 	sub.w	r3, r3, r9
 800b418:	4543      	cmp	r3, r8
 800b41a:	f77f af79 	ble.w	800b310 <_printf_float+0x23c>
 800b41e:	2301      	movs	r3, #1
 800b420:	465a      	mov	r2, fp
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	f43f aeae 	beq.w	800b18a <_printf_float+0xb6>
 800b42e:	f108 0801 	add.w	r8, r8, #1
 800b432:	e7ec      	b.n	800b40e <_printf_float+0x33a>
 800b434:	4642      	mov	r2, r8
 800b436:	4631      	mov	r1, r6
 800b438:	4628      	mov	r0, r5
 800b43a:	47b8      	blx	r7
 800b43c:	3001      	adds	r0, #1
 800b43e:	d1c2      	bne.n	800b3c6 <_printf_float+0x2f2>
 800b440:	e6a3      	b.n	800b18a <_printf_float+0xb6>
 800b442:	2301      	movs	r3, #1
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	9206      	str	r2, [sp, #24]
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f ae9c 	beq.w	800b18a <_printf_float+0xb6>
 800b452:	9a06      	ldr	r2, [sp, #24]
 800b454:	f10b 0b01 	add.w	fp, fp, #1
 800b458:	e7bb      	b.n	800b3d2 <_printf_float+0x2fe>
 800b45a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	d1c0      	bne.n	800b3ea <_printf_float+0x316>
 800b468:	e68f      	b.n	800b18a <_printf_float+0xb6>
 800b46a:	9a06      	ldr	r2, [sp, #24]
 800b46c:	464b      	mov	r3, r9
 800b46e:	4442      	add	r2, r8
 800b470:	4631      	mov	r1, r6
 800b472:	4628      	mov	r0, r5
 800b474:	47b8      	blx	r7
 800b476:	3001      	adds	r0, #1
 800b478:	d1c3      	bne.n	800b402 <_printf_float+0x32e>
 800b47a:	e686      	b.n	800b18a <_printf_float+0xb6>
 800b47c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b480:	f1ba 0f01 	cmp.w	sl, #1
 800b484:	dc01      	bgt.n	800b48a <_printf_float+0x3b6>
 800b486:	07db      	lsls	r3, r3, #31
 800b488:	d536      	bpl.n	800b4f8 <_printf_float+0x424>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4642      	mov	r2, r8
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	f43f ae78 	beq.w	800b18a <_printf_float+0xb6>
 800b49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	47b8      	blx	r7
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f43f ae70 	beq.w	800b18a <_printf_float+0xb6>
 800b4aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4b6:	f7f5 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ba:	b9c0      	cbnz	r0, 800b4ee <_printf_float+0x41a>
 800b4bc:	4653      	mov	r3, sl
 800b4be:	f108 0201 	add.w	r2, r8, #1
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d10c      	bne.n	800b4e6 <_printf_float+0x412>
 800b4cc:	e65d      	b.n	800b18a <_printf_float+0xb6>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	465a      	mov	r2, fp
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f ae56 	beq.w	800b18a <_printf_float+0xb6>
 800b4de:	f108 0801 	add.w	r8, r8, #1
 800b4e2:	45d0      	cmp	r8, sl
 800b4e4:	dbf3      	blt.n	800b4ce <_printf_float+0x3fa>
 800b4e6:	464b      	mov	r3, r9
 800b4e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4ec:	e6df      	b.n	800b2ae <_printf_float+0x1da>
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	f104 0b1a 	add.w	fp, r4, #26
 800b4f6:	e7f4      	b.n	800b4e2 <_printf_float+0x40e>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	e7e1      	b.n	800b4c2 <_printf_float+0x3ee>
 800b4fe:	2301      	movs	r3, #1
 800b500:	464a      	mov	r2, r9
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae3e 	beq.w	800b18a <_printf_float+0xb6>
 800b50e:	f108 0801 	add.w	r8, r8, #1
 800b512:	68e3      	ldr	r3, [r4, #12]
 800b514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b516:	1a5b      	subs	r3, r3, r1
 800b518:	4543      	cmp	r3, r8
 800b51a:	dcf0      	bgt.n	800b4fe <_printf_float+0x42a>
 800b51c:	e6fc      	b.n	800b318 <_printf_float+0x244>
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	f104 0919 	add.w	r9, r4, #25
 800b526:	e7f4      	b.n	800b512 <_printf_float+0x43e>

0800b528 <_printf_common>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	4616      	mov	r6, r2
 800b52e:	4698      	mov	r8, r3
 800b530:	688a      	ldr	r2, [r1, #8]
 800b532:	690b      	ldr	r3, [r1, #16]
 800b534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b538:	4293      	cmp	r3, r2
 800b53a:	bfb8      	it	lt
 800b53c:	4613      	movlt	r3, r2
 800b53e:	6033      	str	r3, [r6, #0]
 800b540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b544:	4607      	mov	r7, r0
 800b546:	460c      	mov	r4, r1
 800b548:	b10a      	cbz	r2, 800b54e <_printf_common+0x26>
 800b54a:	3301      	adds	r3, #1
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	0699      	lsls	r1, r3, #26
 800b552:	bf42      	ittt	mi
 800b554:	6833      	ldrmi	r3, [r6, #0]
 800b556:	3302      	addmi	r3, #2
 800b558:	6033      	strmi	r3, [r6, #0]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	f015 0506 	ands.w	r5, r5, #6
 800b560:	d106      	bne.n	800b570 <_printf_common+0x48>
 800b562:	f104 0a19 	add.w	sl, r4, #25
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	6832      	ldr	r2, [r6, #0]
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dc26      	bgt.n	800b5be <_printf_common+0x96>
 800b570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	3b00      	subs	r3, #0
 800b578:	bf18      	it	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	0692      	lsls	r2, r2, #26
 800b57e:	d42b      	bmi.n	800b5d8 <_printf_common+0xb0>
 800b580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b584:	4641      	mov	r1, r8
 800b586:	4638      	mov	r0, r7
 800b588:	47c8      	blx	r9
 800b58a:	3001      	adds	r0, #1
 800b58c:	d01e      	beq.n	800b5cc <_printf_common+0xa4>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	f003 0306 	and.w	r3, r3, #6
 800b596:	2b04      	cmp	r3, #4
 800b598:	bf02      	ittt	eq
 800b59a:	68e5      	ldreq	r5, [r4, #12]
 800b59c:	6833      	ldreq	r3, [r6, #0]
 800b59e:	1aed      	subeq	r5, r5, r3
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	bf0c      	ite	eq
 800b5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a8:	2500      	movne	r5, #0
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	bfc4      	itt	gt
 800b5ae:	1a9b      	subgt	r3, r3, r2
 800b5b0:	18ed      	addgt	r5, r5, r3
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	341a      	adds	r4, #26
 800b5b6:	42b5      	cmp	r5, r6
 800b5b8:	d11a      	bne.n	800b5f0 <_printf_common+0xc8>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e008      	b.n	800b5d0 <_printf_common+0xa8>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	47c8      	blx	r9
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d103      	bne.n	800b5d4 <_printf_common+0xac>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	e7c6      	b.n	800b566 <_printf_common+0x3e>
 800b5d8:	18e1      	adds	r1, r4, r3
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	2030      	movs	r0, #48	@ 0x30
 800b5de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5e2:	4422      	add	r2, r4
 800b5e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	e7c7      	b.n	800b580 <_printf_common+0x58>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	47c8      	blx	r9
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d0e6      	beq.n	800b5cc <_printf_common+0xa4>
 800b5fe:	3601      	adds	r6, #1
 800b600:	e7d9      	b.n	800b5b6 <_printf_common+0x8e>
	...

0800b604 <_printf_i>:
 800b604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b608:	7e0f      	ldrb	r7, [r1, #24]
 800b60a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b60c:	2f78      	cmp	r7, #120	@ 0x78
 800b60e:	4691      	mov	r9, r2
 800b610:	4680      	mov	r8, r0
 800b612:	460c      	mov	r4, r1
 800b614:	469a      	mov	sl, r3
 800b616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b61a:	d807      	bhi.n	800b62c <_printf_i+0x28>
 800b61c:	2f62      	cmp	r7, #98	@ 0x62
 800b61e:	d80a      	bhi.n	800b636 <_printf_i+0x32>
 800b620:	2f00      	cmp	r7, #0
 800b622:	f000 80d1 	beq.w	800b7c8 <_printf_i+0x1c4>
 800b626:	2f58      	cmp	r7, #88	@ 0x58
 800b628:	f000 80b8 	beq.w	800b79c <_printf_i+0x198>
 800b62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b634:	e03a      	b.n	800b6ac <_printf_i+0xa8>
 800b636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b63a:	2b15      	cmp	r3, #21
 800b63c:	d8f6      	bhi.n	800b62c <_printf_i+0x28>
 800b63e:	a101      	add	r1, pc, #4	@ (adr r1, 800b644 <_printf_i+0x40>)
 800b640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b62d 	.word	0x0800b62d
 800b650:	0800b62d 	.word	0x0800b62d
 800b654:	0800b62d 	.word	0x0800b62d
 800b658:	0800b62d 	.word	0x0800b62d
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b62d 	.word	0x0800b62d
 800b664:	0800b62d 	.word	0x0800b62d
 800b668:	0800b62d 	.word	0x0800b62d
 800b66c:	0800b62d 	.word	0x0800b62d
 800b670:	0800b7af 	.word	0x0800b7af
 800b674:	0800b6db 	.word	0x0800b6db
 800b678:	0800b769 	.word	0x0800b769
 800b67c:	0800b62d 	.word	0x0800b62d
 800b680:	0800b62d 	.word	0x0800b62d
 800b684:	0800b7d1 	.word	0x0800b7d1
 800b688:	0800b62d 	.word	0x0800b62d
 800b68c:	0800b6db 	.word	0x0800b6db
 800b690:	0800b62d 	.word	0x0800b62d
 800b694:	0800b62d 	.word	0x0800b62d
 800b698:	0800b771 	.word	0x0800b771
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	1d1a      	adds	r2, r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6032      	str	r2, [r6, #0]
 800b6a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e09c      	b.n	800b7ea <_printf_i+0x1e6>
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	6820      	ldr	r0, [r4, #0]
 800b6b4:	1d19      	adds	r1, r3, #4
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	0606      	lsls	r6, r0, #24
 800b6ba:	d501      	bpl.n	800b6c0 <_printf_i+0xbc>
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	e003      	b.n	800b6c8 <_printf_i+0xc4>
 800b6c0:	0645      	lsls	r5, r0, #25
 800b6c2:	d5fb      	bpl.n	800b6bc <_printf_i+0xb8>
 800b6c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	da03      	bge.n	800b6d4 <_printf_i+0xd0>
 800b6cc:	232d      	movs	r3, #45	@ 0x2d
 800b6ce:	426d      	negs	r5, r5
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6d4:	4858      	ldr	r0, [pc, #352]	@ (800b838 <_printf_i+0x234>)
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	e011      	b.n	800b6fe <_printf_i+0xfa>
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	0608      	lsls	r0, r1, #24
 800b6e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6e4:	d402      	bmi.n	800b6ec <_printf_i+0xe8>
 800b6e6:	0649      	lsls	r1, r1, #25
 800b6e8:	bf48      	it	mi
 800b6ea:	b2ad      	uxthmi	r5, r5
 800b6ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6ee:	4852      	ldr	r0, [pc, #328]	@ (800b838 <_printf_i+0x234>)
 800b6f0:	6033      	str	r3, [r6, #0]
 800b6f2:	bf14      	ite	ne
 800b6f4:	230a      	movne	r3, #10
 800b6f6:	2308      	moveq	r3, #8
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6fe:	6866      	ldr	r6, [r4, #4]
 800b700:	60a6      	str	r6, [r4, #8]
 800b702:	2e00      	cmp	r6, #0
 800b704:	db05      	blt.n	800b712 <_printf_i+0x10e>
 800b706:	6821      	ldr	r1, [r4, #0]
 800b708:	432e      	orrs	r6, r5
 800b70a:	f021 0104 	bic.w	r1, r1, #4
 800b70e:	6021      	str	r1, [r4, #0]
 800b710:	d04b      	beq.n	800b7aa <_printf_i+0x1a6>
 800b712:	4616      	mov	r6, r2
 800b714:	fbb5 f1f3 	udiv	r1, r5, r3
 800b718:	fb03 5711 	mls	r7, r3, r1, r5
 800b71c:	5dc7      	ldrb	r7, [r0, r7]
 800b71e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b722:	462f      	mov	r7, r5
 800b724:	42bb      	cmp	r3, r7
 800b726:	460d      	mov	r5, r1
 800b728:	d9f4      	bls.n	800b714 <_printf_i+0x110>
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d10b      	bne.n	800b746 <_printf_i+0x142>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	07df      	lsls	r7, r3, #31
 800b732:	d508      	bpl.n	800b746 <_printf_i+0x142>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	6861      	ldr	r1, [r4, #4]
 800b738:	4299      	cmp	r1, r3
 800b73a:	bfde      	ittt	le
 800b73c:	2330      	movle	r3, #48	@ 0x30
 800b73e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b742:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b746:	1b92      	subs	r2, r2, r6
 800b748:	6122      	str	r2, [r4, #16]
 800b74a:	f8cd a000 	str.w	sl, [sp]
 800b74e:	464b      	mov	r3, r9
 800b750:	aa03      	add	r2, sp, #12
 800b752:	4621      	mov	r1, r4
 800b754:	4640      	mov	r0, r8
 800b756:	f7ff fee7 	bl	800b528 <_printf_common>
 800b75a:	3001      	adds	r0, #1
 800b75c:	d14a      	bne.n	800b7f4 <_printf_i+0x1f0>
 800b75e:	f04f 30ff 	mov.w	r0, #4294967295
 800b762:	b004      	add	sp, #16
 800b764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	f043 0320 	orr.w	r3, r3, #32
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	4832      	ldr	r0, [pc, #200]	@ (800b83c <_printf_i+0x238>)
 800b772:	2778      	movs	r7, #120	@ 0x78
 800b774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	6831      	ldr	r1, [r6, #0]
 800b77c:	061f      	lsls	r7, r3, #24
 800b77e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b782:	d402      	bmi.n	800b78a <_printf_i+0x186>
 800b784:	065f      	lsls	r7, r3, #25
 800b786:	bf48      	it	mi
 800b788:	b2ad      	uxthmi	r5, r5
 800b78a:	6031      	str	r1, [r6, #0]
 800b78c:	07d9      	lsls	r1, r3, #31
 800b78e:	bf44      	itt	mi
 800b790:	f043 0320 	orrmi.w	r3, r3, #32
 800b794:	6023      	strmi	r3, [r4, #0]
 800b796:	b11d      	cbz	r5, 800b7a0 <_printf_i+0x19c>
 800b798:	2310      	movs	r3, #16
 800b79a:	e7ad      	b.n	800b6f8 <_printf_i+0xf4>
 800b79c:	4826      	ldr	r0, [pc, #152]	@ (800b838 <_printf_i+0x234>)
 800b79e:	e7e9      	b.n	800b774 <_printf_i+0x170>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	f023 0320 	bic.w	r3, r3, #32
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	e7f6      	b.n	800b798 <_printf_i+0x194>
 800b7aa:	4616      	mov	r6, r2
 800b7ac:	e7bd      	b.n	800b72a <_printf_i+0x126>
 800b7ae:	6833      	ldr	r3, [r6, #0]
 800b7b0:	6825      	ldr	r5, [r4, #0]
 800b7b2:	6961      	ldr	r1, [r4, #20]
 800b7b4:	1d18      	adds	r0, r3, #4
 800b7b6:	6030      	str	r0, [r6, #0]
 800b7b8:	062e      	lsls	r6, r5, #24
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	d501      	bpl.n	800b7c2 <_printf_i+0x1be>
 800b7be:	6019      	str	r1, [r3, #0]
 800b7c0:	e002      	b.n	800b7c8 <_printf_i+0x1c4>
 800b7c2:	0668      	lsls	r0, r5, #25
 800b7c4:	d5fb      	bpl.n	800b7be <_printf_i+0x1ba>
 800b7c6:	8019      	strh	r1, [r3, #0]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	e7bc      	b.n	800b74a <_printf_i+0x146>
 800b7d0:	6833      	ldr	r3, [r6, #0]
 800b7d2:	1d1a      	adds	r2, r3, #4
 800b7d4:	6032      	str	r2, [r6, #0]
 800b7d6:	681e      	ldr	r6, [r3, #0]
 800b7d8:	6862      	ldr	r2, [r4, #4]
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4630      	mov	r0, r6
 800b7de:	f7f4 fcf7 	bl	80001d0 <memchr>
 800b7e2:	b108      	cbz	r0, 800b7e8 <_printf_i+0x1e4>
 800b7e4:	1b80      	subs	r0, r0, r6
 800b7e6:	6060      	str	r0, [r4, #4]
 800b7e8:	6863      	ldr	r3, [r4, #4]
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7f2:	e7aa      	b.n	800b74a <_printf_i+0x146>
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	47d0      	blx	sl
 800b7fe:	3001      	adds	r0, #1
 800b800:	d0ad      	beq.n	800b75e <_printf_i+0x15a>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	079b      	lsls	r3, r3, #30
 800b806:	d413      	bmi.n	800b830 <_printf_i+0x22c>
 800b808:	68e0      	ldr	r0, [r4, #12]
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	4298      	cmp	r0, r3
 800b80e:	bfb8      	it	lt
 800b810:	4618      	movlt	r0, r3
 800b812:	e7a6      	b.n	800b762 <_printf_i+0x15e>
 800b814:	2301      	movs	r3, #1
 800b816:	4632      	mov	r2, r6
 800b818:	4649      	mov	r1, r9
 800b81a:	4640      	mov	r0, r8
 800b81c:	47d0      	blx	sl
 800b81e:	3001      	adds	r0, #1
 800b820:	d09d      	beq.n	800b75e <_printf_i+0x15a>
 800b822:	3501      	adds	r5, #1
 800b824:	68e3      	ldr	r3, [r4, #12]
 800b826:	9903      	ldr	r1, [sp, #12]
 800b828:	1a5b      	subs	r3, r3, r1
 800b82a:	42ab      	cmp	r3, r5
 800b82c:	dcf2      	bgt.n	800b814 <_printf_i+0x210>
 800b82e:	e7eb      	b.n	800b808 <_printf_i+0x204>
 800b830:	2500      	movs	r5, #0
 800b832:	f104 0619 	add.w	r6, r4, #25
 800b836:	e7f5      	b.n	800b824 <_printf_i+0x220>
 800b838:	0800e646 	.word	0x0800e646
 800b83c:	0800e657 	.word	0x0800e657

0800b840 <std>:
 800b840:	2300      	movs	r3, #0
 800b842:	b510      	push	{r4, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	e9c0 3300 	strd	r3, r3, [r0]
 800b84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b84e:	6083      	str	r3, [r0, #8]
 800b850:	8181      	strh	r1, [r0, #12]
 800b852:	6643      	str	r3, [r0, #100]	@ 0x64
 800b854:	81c2      	strh	r2, [r0, #14]
 800b856:	6183      	str	r3, [r0, #24]
 800b858:	4619      	mov	r1, r3
 800b85a:	2208      	movs	r2, #8
 800b85c:	305c      	adds	r0, #92	@ 0x5c
 800b85e:	f000 fa01 	bl	800bc64 <memset>
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <std+0x58>)
 800b864:	6263      	str	r3, [r4, #36]	@ 0x24
 800b866:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <std+0x5c>)
 800b868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b86a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a0 <std+0x60>)
 800b86c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b86e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <std+0x64>)
 800b870:	6323      	str	r3, [r4, #48]	@ 0x30
 800b872:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a8 <std+0x68>)
 800b874:	6224      	str	r4, [r4, #32]
 800b876:	429c      	cmp	r4, r3
 800b878:	d006      	beq.n	800b888 <std+0x48>
 800b87a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b87e:	4294      	cmp	r4, r2
 800b880:	d002      	beq.n	800b888 <std+0x48>
 800b882:	33d0      	adds	r3, #208	@ 0xd0
 800b884:	429c      	cmp	r4, r3
 800b886:	d105      	bne.n	800b894 <std+0x54>
 800b888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b890:	f000 ba64 	b.w	800bd5c <__retarget_lock_init_recursive>
 800b894:	bd10      	pop	{r4, pc}
 800b896:	bf00      	nop
 800b898:	0800bab5 	.word	0x0800bab5
 800b89c:	0800bad7 	.word	0x0800bad7
 800b8a0:	0800bb0f 	.word	0x0800bb0f
 800b8a4:	0800bb33 	.word	0x0800bb33
 800b8a8:	2000222c 	.word	0x2000222c

0800b8ac <stdio_exit_handler>:
 800b8ac:	4a02      	ldr	r2, [pc, #8]	@ (800b8b8 <stdio_exit_handler+0xc>)
 800b8ae:	4903      	ldr	r1, [pc, #12]	@ (800b8bc <stdio_exit_handler+0x10>)
 800b8b0:	4803      	ldr	r0, [pc, #12]	@ (800b8c0 <stdio_exit_handler+0x14>)
 800b8b2:	f000 b869 	b.w	800b988 <_fwalk_sglue>
 800b8b6:	bf00      	nop
 800b8b8:	20000124 	.word	0x20000124
 800b8bc:	0800d699 	.word	0x0800d699
 800b8c0:	20000134 	.word	0x20000134

0800b8c4 <cleanup_stdio>:
 800b8c4:	6841      	ldr	r1, [r0, #4]
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <cleanup_stdio+0x34>)
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	d001      	beq.n	800b8d4 <cleanup_stdio+0x10>
 800b8d0:	f001 fee2 	bl	800d698 <_fflush_r>
 800b8d4:	68a1      	ldr	r1, [r4, #8]
 800b8d6:	4b09      	ldr	r3, [pc, #36]	@ (800b8fc <cleanup_stdio+0x38>)
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	d002      	beq.n	800b8e2 <cleanup_stdio+0x1e>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f001 fedb 	bl	800d698 <_fflush_r>
 800b8e2:	68e1      	ldr	r1, [r4, #12]
 800b8e4:	4b06      	ldr	r3, [pc, #24]	@ (800b900 <cleanup_stdio+0x3c>)
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	d004      	beq.n	800b8f4 <cleanup_stdio+0x30>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f0:	f001 bed2 	b.w	800d698 <_fflush_r>
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	bf00      	nop
 800b8f8:	2000222c 	.word	0x2000222c
 800b8fc:	20002294 	.word	0x20002294
 800b900:	200022fc 	.word	0x200022fc

0800b904 <global_stdio_init.part.0>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4b0b      	ldr	r3, [pc, #44]	@ (800b934 <global_stdio_init.part.0+0x30>)
 800b908:	4c0b      	ldr	r4, [pc, #44]	@ (800b938 <global_stdio_init.part.0+0x34>)
 800b90a:	4a0c      	ldr	r2, [pc, #48]	@ (800b93c <global_stdio_init.part.0+0x38>)
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	4620      	mov	r0, r4
 800b910:	2200      	movs	r2, #0
 800b912:	2104      	movs	r1, #4
 800b914:	f7ff ff94 	bl	800b840 <std>
 800b918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b91c:	2201      	movs	r2, #1
 800b91e:	2109      	movs	r1, #9
 800b920:	f7ff ff8e 	bl	800b840 <std>
 800b924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b928:	2202      	movs	r2, #2
 800b92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b92e:	2112      	movs	r1, #18
 800b930:	f7ff bf86 	b.w	800b840 <std>
 800b934:	20002364 	.word	0x20002364
 800b938:	2000222c 	.word	0x2000222c
 800b93c:	0800b8ad 	.word	0x0800b8ad

0800b940 <__sfp_lock_acquire>:
 800b940:	4801      	ldr	r0, [pc, #4]	@ (800b948 <__sfp_lock_acquire+0x8>)
 800b942:	f000 ba0c 	b.w	800bd5e <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	2000236d 	.word	0x2000236d

0800b94c <__sfp_lock_release>:
 800b94c:	4801      	ldr	r0, [pc, #4]	@ (800b954 <__sfp_lock_release+0x8>)
 800b94e:	f000 ba07 	b.w	800bd60 <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	2000236d 	.word	0x2000236d

0800b958 <__sinit>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	f7ff fff0 	bl	800b940 <__sfp_lock_acquire>
 800b960:	6a23      	ldr	r3, [r4, #32]
 800b962:	b11b      	cbz	r3, 800b96c <__sinit+0x14>
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	f7ff bff0 	b.w	800b94c <__sfp_lock_release>
 800b96c:	4b04      	ldr	r3, [pc, #16]	@ (800b980 <__sinit+0x28>)
 800b96e:	6223      	str	r3, [r4, #32]
 800b970:	4b04      	ldr	r3, [pc, #16]	@ (800b984 <__sinit+0x2c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f5      	bne.n	800b964 <__sinit+0xc>
 800b978:	f7ff ffc4 	bl	800b904 <global_stdio_init.part.0>
 800b97c:	e7f2      	b.n	800b964 <__sinit+0xc>
 800b97e:	bf00      	nop
 800b980:	0800b8c5 	.word	0x0800b8c5
 800b984:	20002364 	.word	0x20002364

0800b988 <_fwalk_sglue>:
 800b988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98c:	4607      	mov	r7, r0
 800b98e:	4688      	mov	r8, r1
 800b990:	4614      	mov	r4, r2
 800b992:	2600      	movs	r6, #0
 800b994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b998:	f1b9 0901 	subs.w	r9, r9, #1
 800b99c:	d505      	bpl.n	800b9aa <_fwalk_sglue+0x22>
 800b99e:	6824      	ldr	r4, [r4, #0]
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	d1f7      	bne.n	800b994 <_fwalk_sglue+0xc>
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d907      	bls.n	800b9c0 <_fwalk_sglue+0x38>
 800b9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	d003      	beq.n	800b9c0 <_fwalk_sglue+0x38>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	47c0      	blx	r8
 800b9be:	4306      	orrs	r6, r0
 800b9c0:	3568      	adds	r5, #104	@ 0x68
 800b9c2:	e7e9      	b.n	800b998 <_fwalk_sglue+0x10>

0800b9c4 <iprintf>:
 800b9c4:	b40f      	push	{r0, r1, r2, r3}
 800b9c6:	b507      	push	{r0, r1, r2, lr}
 800b9c8:	4906      	ldr	r1, [pc, #24]	@ (800b9e4 <iprintf+0x20>)
 800b9ca:	ab04      	add	r3, sp, #16
 800b9cc:	6808      	ldr	r0, [r1, #0]
 800b9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d2:	6881      	ldr	r1, [r0, #8]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	f001 fcc3 	bl	800d360 <_vfiprintf_r>
 800b9da:	b003      	add	sp, #12
 800b9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e0:	b004      	add	sp, #16
 800b9e2:	4770      	bx	lr
 800b9e4:	20000130 	.word	0x20000130

0800b9e8 <putchar>:
 800b9e8:	4b02      	ldr	r3, [pc, #8]	@ (800b9f4 <putchar+0xc>)
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	6882      	ldr	r2, [r0, #8]
 800b9f0:	f001 bedc 	b.w	800d7ac <_putc_r>
 800b9f4:	20000130 	.word	0x20000130

0800b9f8 <_puts_r>:
 800b9f8:	6a03      	ldr	r3, [r0, #32]
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	6884      	ldr	r4, [r0, #8]
 800b9fe:	4605      	mov	r5, r0
 800ba00:	460e      	mov	r6, r1
 800ba02:	b90b      	cbnz	r3, 800ba08 <_puts_r+0x10>
 800ba04:	f7ff ffa8 	bl	800b958 <__sinit>
 800ba08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba0a:	07db      	lsls	r3, r3, #31
 800ba0c:	d405      	bmi.n	800ba1a <_puts_r+0x22>
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	0598      	lsls	r0, r3, #22
 800ba12:	d402      	bmi.n	800ba1a <_puts_r+0x22>
 800ba14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba16:	f000 f9a2 	bl	800bd5e <__retarget_lock_acquire_recursive>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	0719      	lsls	r1, r3, #28
 800ba1e:	d502      	bpl.n	800ba26 <_puts_r+0x2e>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d135      	bne.n	800ba92 <_puts_r+0x9a>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 f8c5 	bl	800bbb8 <__swsetup_r>
 800ba2e:	b380      	cbz	r0, 800ba92 <_puts_r+0x9a>
 800ba30:	f04f 35ff 	mov.w	r5, #4294967295
 800ba34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba36:	07da      	lsls	r2, r3, #31
 800ba38:	d405      	bmi.n	800ba46 <_puts_r+0x4e>
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	059b      	lsls	r3, r3, #22
 800ba3e:	d402      	bmi.n	800ba46 <_puts_r+0x4e>
 800ba40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba42:	f000 f98d 	bl	800bd60 <__retarget_lock_release_recursive>
 800ba46:	4628      	mov	r0, r5
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	da04      	bge.n	800ba58 <_puts_r+0x60>
 800ba4e:	69a2      	ldr	r2, [r4, #24]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	dc17      	bgt.n	800ba84 <_puts_r+0x8c>
 800ba54:	290a      	cmp	r1, #10
 800ba56:	d015      	beq.n	800ba84 <_puts_r+0x8c>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	7019      	strb	r1, [r3, #0]
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba66:	3b01      	subs	r3, #1
 800ba68:	60a3      	str	r3, [r4, #8]
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	d1ed      	bne.n	800ba4a <_puts_r+0x52>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da11      	bge.n	800ba96 <_puts_r+0x9e>
 800ba72:	4622      	mov	r2, r4
 800ba74:	210a      	movs	r1, #10
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 f85f 	bl	800bb3a <__swbuf_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d0d7      	beq.n	800ba30 <_puts_r+0x38>
 800ba80:	250a      	movs	r5, #10
 800ba82:	e7d7      	b.n	800ba34 <_puts_r+0x3c>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 f857 	bl	800bb3a <__swbuf_r>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d1e7      	bne.n	800ba60 <_puts_r+0x68>
 800ba90:	e7ce      	b.n	800ba30 <_puts_r+0x38>
 800ba92:	3e01      	subs	r6, #1
 800ba94:	e7e4      	b.n	800ba60 <_puts_r+0x68>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	6022      	str	r2, [r4, #0]
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	e7ee      	b.n	800ba80 <_puts_r+0x88>
	...

0800baa4 <puts>:
 800baa4:	4b02      	ldr	r3, [pc, #8]	@ (800bab0 <puts+0xc>)
 800baa6:	4601      	mov	r1, r0
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	f7ff bfa5 	b.w	800b9f8 <_puts_r>
 800baae:	bf00      	nop
 800bab0:	20000130 	.word	0x20000130

0800bab4 <__sread>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	f000 f900 	bl	800bcc0 <_read_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	bfab      	itete	ge
 800bac4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bac6:	89a3      	ldrhlt	r3, [r4, #12]
 800bac8:	181b      	addge	r3, r3, r0
 800baca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bace:	bfac      	ite	ge
 800bad0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bad2:	81a3      	strhlt	r3, [r4, #12]
 800bad4:	bd10      	pop	{r4, pc}

0800bad6 <__swrite>:
 800bad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bada:	461f      	mov	r7, r3
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	05db      	lsls	r3, r3, #23
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	4616      	mov	r6, r2
 800bae6:	d505      	bpl.n	800baf4 <__swrite+0x1e>
 800bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baec:	2302      	movs	r3, #2
 800baee:	2200      	movs	r2, #0
 800baf0:	f000 f8d4 	bl	800bc9c <_lseek_r>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bafa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	4632      	mov	r2, r6
 800bb02:	463b      	mov	r3, r7
 800bb04:	4628      	mov	r0, r5
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	f000 b8eb 	b.w	800bce4 <_write_r>

0800bb0e <__sseek>:
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb16:	f000 f8c1 	bl	800bc9c <_lseek_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	bf15      	itete	ne
 800bb20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb2a:	81a3      	strheq	r3, [r4, #12]
 800bb2c:	bf18      	it	ne
 800bb2e:	81a3      	strhne	r3, [r4, #12]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__sclose>:
 800bb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb36:	f000 b8a1 	b.w	800bc7c <_close_r>

0800bb3a <__swbuf_r>:
 800bb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3c:	460e      	mov	r6, r1
 800bb3e:	4614      	mov	r4, r2
 800bb40:	4605      	mov	r5, r0
 800bb42:	b118      	cbz	r0, 800bb4c <__swbuf_r+0x12>
 800bb44:	6a03      	ldr	r3, [r0, #32]
 800bb46:	b90b      	cbnz	r3, 800bb4c <__swbuf_r+0x12>
 800bb48:	f7ff ff06 	bl	800b958 <__sinit>
 800bb4c:	69a3      	ldr	r3, [r4, #24]
 800bb4e:	60a3      	str	r3, [r4, #8]
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	071a      	lsls	r2, r3, #28
 800bb54:	d501      	bpl.n	800bb5a <__swbuf_r+0x20>
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	b943      	cbnz	r3, 800bb6c <__swbuf_r+0x32>
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f000 f82b 	bl	800bbb8 <__swsetup_r>
 800bb62:	b118      	cbz	r0, 800bb6c <__swbuf_r+0x32>
 800bb64:	f04f 37ff 	mov.w	r7, #4294967295
 800bb68:	4638      	mov	r0, r7
 800bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	6922      	ldr	r2, [r4, #16]
 800bb70:	1a98      	subs	r0, r3, r2
 800bb72:	6963      	ldr	r3, [r4, #20]
 800bb74:	b2f6      	uxtb	r6, r6
 800bb76:	4283      	cmp	r3, r0
 800bb78:	4637      	mov	r7, r6
 800bb7a:	dc05      	bgt.n	800bb88 <__swbuf_r+0x4e>
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	4628      	mov	r0, r5
 800bb80:	f001 fd8a 	bl	800d698 <_fflush_r>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d1ed      	bne.n	800bb64 <__swbuf_r+0x2a>
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	60a3      	str	r3, [r4, #8]
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	6022      	str	r2, [r4, #0]
 800bb94:	701e      	strb	r6, [r3, #0]
 800bb96:	6962      	ldr	r2, [r4, #20]
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d004      	beq.n	800bba8 <__swbuf_r+0x6e>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	07db      	lsls	r3, r3, #31
 800bba2:	d5e1      	bpl.n	800bb68 <__swbuf_r+0x2e>
 800bba4:	2e0a      	cmp	r6, #10
 800bba6:	d1df      	bne.n	800bb68 <__swbuf_r+0x2e>
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f001 fd74 	bl	800d698 <_fflush_r>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0d9      	beq.n	800bb68 <__swbuf_r+0x2e>
 800bbb4:	e7d6      	b.n	800bb64 <__swbuf_r+0x2a>
	...

0800bbb8 <__swsetup_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4b29      	ldr	r3, [pc, #164]	@ (800bc60 <__swsetup_r+0xa8>)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	b118      	cbz	r0, 800bbcc <__swsetup_r+0x14>
 800bbc4:	6a03      	ldr	r3, [r0, #32]
 800bbc6:	b90b      	cbnz	r3, 800bbcc <__swsetup_r+0x14>
 800bbc8:	f7ff fec6 	bl	800b958 <__sinit>
 800bbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd0:	0719      	lsls	r1, r3, #28
 800bbd2:	d422      	bmi.n	800bc1a <__swsetup_r+0x62>
 800bbd4:	06da      	lsls	r2, r3, #27
 800bbd6:	d407      	bmi.n	800bbe8 <__swsetup_r+0x30>
 800bbd8:	2209      	movs	r2, #9
 800bbda:	602a      	str	r2, [r5, #0]
 800bbdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe6:	e033      	b.n	800bc50 <__swsetup_r+0x98>
 800bbe8:	0758      	lsls	r0, r3, #29
 800bbea:	d512      	bpl.n	800bc12 <__swsetup_r+0x5a>
 800bbec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbee:	b141      	cbz	r1, 800bc02 <__swsetup_r+0x4a>
 800bbf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbf4:	4299      	cmp	r1, r3
 800bbf6:	d002      	beq.n	800bbfe <__swsetup_r+0x46>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f000 ff0d 	bl	800ca18 <_free_r>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6063      	str	r3, [r4, #4]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f043 0308 	orr.w	r3, r3, #8
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	b94b      	cbnz	r3, 800bc32 <__swsetup_r+0x7a>
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc28:	d003      	beq.n	800bc32 <__swsetup_r+0x7a>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f001 fd81 	bl	800d734 <__smakebuf_r>
 800bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc36:	f013 0201 	ands.w	r2, r3, #1
 800bc3a:	d00a      	beq.n	800bc52 <__swsetup_r+0x9a>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	60a2      	str	r2, [r4, #8]
 800bc40:	6962      	ldr	r2, [r4, #20]
 800bc42:	4252      	negs	r2, r2
 800bc44:	61a2      	str	r2, [r4, #24]
 800bc46:	6922      	ldr	r2, [r4, #16]
 800bc48:	b942      	cbnz	r2, 800bc5c <__swsetup_r+0xa4>
 800bc4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc4e:	d1c5      	bne.n	800bbdc <__swsetup_r+0x24>
 800bc50:	bd38      	pop	{r3, r4, r5, pc}
 800bc52:	0799      	lsls	r1, r3, #30
 800bc54:	bf58      	it	pl
 800bc56:	6962      	ldrpl	r2, [r4, #20]
 800bc58:	60a2      	str	r2, [r4, #8]
 800bc5a:	e7f4      	b.n	800bc46 <__swsetup_r+0x8e>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7f7      	b.n	800bc50 <__swsetup_r+0x98>
 800bc60:	20000130 	.word	0x20000130

0800bc64 <memset>:
 800bc64:	4402      	add	r2, r0
 800bc66:	4603      	mov	r3, r0
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d100      	bne.n	800bc6e <memset+0xa>
 800bc6c:	4770      	bx	lr
 800bc6e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc72:	e7f9      	b.n	800bc68 <memset+0x4>

0800bc74 <_localeconv_r>:
 800bc74:	4800      	ldr	r0, [pc, #0]	@ (800bc78 <_localeconv_r+0x4>)
 800bc76:	4770      	bx	lr
 800bc78:	20000270 	.word	0x20000270

0800bc7c <_close_r>:
 800bc7c:	b538      	push	{r3, r4, r5, lr}
 800bc7e:	4d06      	ldr	r5, [pc, #24]	@ (800bc98 <_close_r+0x1c>)
 800bc80:	2300      	movs	r3, #0
 800bc82:	4604      	mov	r4, r0
 800bc84:	4608      	mov	r0, r1
 800bc86:	602b      	str	r3, [r5, #0]
 800bc88:	f7f7 f8c4 	bl	8002e14 <_close>
 800bc8c:	1c43      	adds	r3, r0, #1
 800bc8e:	d102      	bne.n	800bc96 <_close_r+0x1a>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	b103      	cbz	r3, 800bc96 <_close_r+0x1a>
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	20002368 	.word	0x20002368

0800bc9c <_lseek_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d07      	ldr	r5, [pc, #28]	@ (800bcbc <_lseek_r+0x20>)
 800bca0:	4604      	mov	r4, r0
 800bca2:	4608      	mov	r0, r1
 800bca4:	4611      	mov	r1, r2
 800bca6:	2200      	movs	r2, #0
 800bca8:	602a      	str	r2, [r5, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f7f7 f8d9 	bl	8002e62 <_lseek>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d102      	bne.n	800bcba <_lseek_r+0x1e>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	b103      	cbz	r3, 800bcba <_lseek_r+0x1e>
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	20002368 	.word	0x20002368

0800bcc0 <_read_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d07      	ldr	r5, [pc, #28]	@ (800bce0 <_read_r+0x20>)
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	4608      	mov	r0, r1
 800bcc8:	4611      	mov	r1, r2
 800bcca:	2200      	movs	r2, #0
 800bccc:	602a      	str	r2, [r5, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	f7f7 f883 	bl	8002dda <_read>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d102      	bne.n	800bcde <_read_r+0x1e>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	b103      	cbz	r3, 800bcde <_read_r+0x1e>
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	20002368 	.word	0x20002368

0800bce4 <_write_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d07      	ldr	r5, [pc, #28]	@ (800bd04 <_write_r+0x20>)
 800bce8:	4604      	mov	r4, r0
 800bcea:	4608      	mov	r0, r1
 800bcec:	4611      	mov	r1, r2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	602a      	str	r2, [r5, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f7f6 fbc3 	bl	800247e <_write>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_write_r+0x1e>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_write_r+0x1e>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20002368 	.word	0x20002368

0800bd08 <__errno>:
 800bd08:	4b01      	ldr	r3, [pc, #4]	@ (800bd10 <__errno+0x8>)
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20000130 	.word	0x20000130

0800bd14 <__libc_init_array>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	4d0d      	ldr	r5, [pc, #52]	@ (800bd4c <__libc_init_array+0x38>)
 800bd18:	4c0d      	ldr	r4, [pc, #52]	@ (800bd50 <__libc_init_array+0x3c>)
 800bd1a:	1b64      	subs	r4, r4, r5
 800bd1c:	10a4      	asrs	r4, r4, #2
 800bd1e:	2600      	movs	r6, #0
 800bd20:	42a6      	cmp	r6, r4
 800bd22:	d109      	bne.n	800bd38 <__libc_init_array+0x24>
 800bd24:	4d0b      	ldr	r5, [pc, #44]	@ (800bd54 <__libc_init_array+0x40>)
 800bd26:	4c0c      	ldr	r4, [pc, #48]	@ (800bd58 <__libc_init_array+0x44>)
 800bd28:	f002 fa72 	bl	800e210 <_init>
 800bd2c:	1b64      	subs	r4, r4, r5
 800bd2e:	10a4      	asrs	r4, r4, #2
 800bd30:	2600      	movs	r6, #0
 800bd32:	42a6      	cmp	r6, r4
 800bd34:	d105      	bne.n	800bd42 <__libc_init_array+0x2e>
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3c:	4798      	blx	r3
 800bd3e:	3601      	adds	r6, #1
 800bd40:	e7ee      	b.n	800bd20 <__libc_init_array+0xc>
 800bd42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd46:	4798      	blx	r3
 800bd48:	3601      	adds	r6, #1
 800bd4a:	e7f2      	b.n	800bd32 <__libc_init_array+0x1e>
 800bd4c:	0800e9e8 	.word	0x0800e9e8
 800bd50:	0800e9e8 	.word	0x0800e9e8
 800bd54:	0800e9e8 	.word	0x0800e9e8
 800bd58:	0800e9ec 	.word	0x0800e9ec

0800bd5c <__retarget_lock_init_recursive>:
 800bd5c:	4770      	bx	lr

0800bd5e <__retarget_lock_acquire_recursive>:
 800bd5e:	4770      	bx	lr

0800bd60 <__retarget_lock_release_recursive>:
 800bd60:	4770      	bx	lr

0800bd62 <quorem>:
 800bd62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd66:	6903      	ldr	r3, [r0, #16]
 800bd68:	690c      	ldr	r4, [r1, #16]
 800bd6a:	42a3      	cmp	r3, r4
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	db7e      	blt.n	800be6e <quorem+0x10c>
 800bd70:	3c01      	subs	r4, #1
 800bd72:	f101 0814 	add.w	r8, r1, #20
 800bd76:	00a3      	lsls	r3, r4, #2
 800bd78:	f100 0514 	add.w	r5, r0, #20
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd94:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd98:	d32e      	bcc.n	800bdf8 <quorem+0x96>
 800bd9a:	f04f 0a00 	mov.w	sl, #0
 800bd9e:	46c4      	mov	ip, r8
 800bda0:	46ae      	mov	lr, r5
 800bda2:	46d3      	mov	fp, sl
 800bda4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bda8:	b298      	uxth	r0, r3
 800bdaa:	fb06 a000 	mla	r0, r6, r0, sl
 800bdae:	0c02      	lsrs	r2, r0, #16
 800bdb0:	0c1b      	lsrs	r3, r3, #16
 800bdb2:	fb06 2303 	mla	r3, r6, r3, r2
 800bdb6:	f8de 2000 	ldr.w	r2, [lr]
 800bdba:	b280      	uxth	r0, r0
 800bdbc:	b292      	uxth	r2, r2
 800bdbe:	1a12      	subs	r2, r2, r0
 800bdc0:	445a      	add	r2, fp
 800bdc2:	f8de 0000 	ldr.w	r0, [lr]
 800bdc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bdd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bdd4:	b292      	uxth	r2, r2
 800bdd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdda:	45e1      	cmp	r9, ip
 800bddc:	f84e 2b04 	str.w	r2, [lr], #4
 800bde0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bde4:	d2de      	bcs.n	800bda4 <quorem+0x42>
 800bde6:	9b00      	ldr	r3, [sp, #0]
 800bde8:	58eb      	ldr	r3, [r5, r3]
 800bdea:	b92b      	cbnz	r3, 800bdf8 <quorem+0x96>
 800bdec:	9b01      	ldr	r3, [sp, #4]
 800bdee:	3b04      	subs	r3, #4
 800bdf0:	429d      	cmp	r5, r3
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	d32f      	bcc.n	800be56 <quorem+0xf4>
 800bdf6:	613c      	str	r4, [r7, #16]
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	f001 f97f 	bl	800d0fc <__mcmp>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	db25      	blt.n	800be4e <quorem+0xec>
 800be02:	4629      	mov	r1, r5
 800be04:	2000      	movs	r0, #0
 800be06:	f858 2b04 	ldr.w	r2, [r8], #4
 800be0a:	f8d1 c000 	ldr.w	ip, [r1]
 800be0e:	fa1f fe82 	uxth.w	lr, r2
 800be12:	fa1f f38c 	uxth.w	r3, ip
 800be16:	eba3 030e 	sub.w	r3, r3, lr
 800be1a:	4403      	add	r3, r0
 800be1c:	0c12      	lsrs	r2, r2, #16
 800be1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be26:	b29b      	uxth	r3, r3
 800be28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be2c:	45c1      	cmp	r9, r8
 800be2e:	f841 3b04 	str.w	r3, [r1], #4
 800be32:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be36:	d2e6      	bcs.n	800be06 <quorem+0xa4>
 800be38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be40:	b922      	cbnz	r2, 800be4c <quorem+0xea>
 800be42:	3b04      	subs	r3, #4
 800be44:	429d      	cmp	r5, r3
 800be46:	461a      	mov	r2, r3
 800be48:	d30b      	bcc.n	800be62 <quorem+0x100>
 800be4a:	613c      	str	r4, [r7, #16]
 800be4c:	3601      	adds	r6, #1
 800be4e:	4630      	mov	r0, r6
 800be50:	b003      	add	sp, #12
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	6812      	ldr	r2, [r2, #0]
 800be58:	3b04      	subs	r3, #4
 800be5a:	2a00      	cmp	r2, #0
 800be5c:	d1cb      	bne.n	800bdf6 <quorem+0x94>
 800be5e:	3c01      	subs	r4, #1
 800be60:	e7c6      	b.n	800bdf0 <quorem+0x8e>
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	3b04      	subs	r3, #4
 800be66:	2a00      	cmp	r2, #0
 800be68:	d1ef      	bne.n	800be4a <quorem+0xe8>
 800be6a:	3c01      	subs	r4, #1
 800be6c:	e7ea      	b.n	800be44 <quorem+0xe2>
 800be6e:	2000      	movs	r0, #0
 800be70:	e7ee      	b.n	800be50 <quorem+0xee>
 800be72:	0000      	movs	r0, r0
 800be74:	0000      	movs	r0, r0
	...

0800be78 <_dtoa_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	69c7      	ldr	r7, [r0, #28]
 800be7e:	b097      	sub	sp, #92	@ 0x5c
 800be80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800be84:	ec55 4b10 	vmov	r4, r5, d0
 800be88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800be8a:	9107      	str	r1, [sp, #28]
 800be8c:	4681      	mov	r9, r0
 800be8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800be90:	9311      	str	r3, [sp, #68]	@ 0x44
 800be92:	b97f      	cbnz	r7, 800beb4 <_dtoa_r+0x3c>
 800be94:	2010      	movs	r0, #16
 800be96:	f000 fe09 	bl	800caac <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bea0:	b920      	cbnz	r0, 800beac <_dtoa_r+0x34>
 800bea2:	4ba9      	ldr	r3, [pc, #676]	@ (800c148 <_dtoa_r+0x2d0>)
 800bea4:	21ef      	movs	r1, #239	@ 0xef
 800bea6:	48a9      	ldr	r0, [pc, #676]	@ (800c14c <_dtoa_r+0x2d4>)
 800bea8:	f001 fcf4 	bl	800d894 <__assert_func>
 800beac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800beb0:	6007      	str	r7, [r0, #0]
 800beb2:	60c7      	str	r7, [r0, #12]
 800beb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800beb8:	6819      	ldr	r1, [r3, #0]
 800beba:	b159      	cbz	r1, 800bed4 <_dtoa_r+0x5c>
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	604a      	str	r2, [r1, #4]
 800bec0:	2301      	movs	r3, #1
 800bec2:	4093      	lsls	r3, r2
 800bec4:	608b      	str	r3, [r1, #8]
 800bec6:	4648      	mov	r0, r9
 800bec8:	f000 fee6 	bl	800cc98 <_Bfree>
 800becc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	1e2b      	subs	r3, r5, #0
 800bed6:	bfb9      	ittee	lt
 800bed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bedc:	9305      	strlt	r3, [sp, #20]
 800bede:	2300      	movge	r3, #0
 800bee0:	6033      	strge	r3, [r6, #0]
 800bee2:	9f05      	ldr	r7, [sp, #20]
 800bee4:	4b9a      	ldr	r3, [pc, #616]	@ (800c150 <_dtoa_r+0x2d8>)
 800bee6:	bfbc      	itt	lt
 800bee8:	2201      	movlt	r2, #1
 800beea:	6032      	strlt	r2, [r6, #0]
 800beec:	43bb      	bics	r3, r7
 800beee:	d112      	bne.n	800bf16 <_dtoa_r+0x9e>
 800bef0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800befc:	4323      	orrs	r3, r4
 800befe:	f000 855a 	beq.w	800c9b6 <_dtoa_r+0xb3e>
 800bf02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c164 <_dtoa_r+0x2ec>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 855c 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800bf0e:	f10a 0303 	add.w	r3, sl, #3
 800bf12:	f000 bd56 	b.w	800c9c2 <_dtoa_r+0xb4a>
 800bf16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	ec51 0b17 	vmov	r0, r1, d7
 800bf20:	2300      	movs	r3, #0
 800bf22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf26:	f7f4 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	b158      	cbz	r0, 800bf46 <_dtoa_r+0xce>
 800bf2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf30:	2301      	movs	r3, #1
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf36:	b113      	cbz	r3, 800bf3e <_dtoa_r+0xc6>
 800bf38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf3a:	4b86      	ldr	r3, [pc, #536]	@ (800c154 <_dtoa_r+0x2dc>)
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c168 <_dtoa_r+0x2f0>
 800bf42:	f000 bd40 	b.w	800c9c6 <_dtoa_r+0xb4e>
 800bf46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf4a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf4c:	a915      	add	r1, sp, #84	@ 0x54
 800bf4e:	4648      	mov	r0, r9
 800bf50:	f001 f984 	bl	800d25c <__d2b>
 800bf54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf58:	9002      	str	r0, [sp, #8]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d078      	beq.n	800c050 <_dtoa_r+0x1d8>
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b76      	ldr	r3, [pc, #472]	@ (800c158 <_dtoa_r+0x2e0>)
 800bf7e:	f7f4 f983 	bl	8000288 <__aeabi_dsub>
 800bf82:	a36b      	add	r3, pc, #428	@ (adr r3, 800c130 <_dtoa_r+0x2b8>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fb36 	bl	80005f8 <__aeabi_dmul>
 800bf8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c138 <_dtoa_r+0x2c0>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f97b 	bl	800028c <__adddf3>
 800bf96:	4604      	mov	r4, r0
 800bf98:	4630      	mov	r0, r6
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	f7f4 fac2 	bl	8000524 <__aeabi_i2d>
 800bfa0:	a367      	add	r3, pc, #412	@ (adr r3, 800c140 <_dtoa_r+0x2c8>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f96b 	bl	800028c <__adddf3>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	460d      	mov	r5, r1
 800bfba:	f7f4 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fd88 	bl	8000adc <__aeabi_dcmplt>
 800bfcc:	b140      	cbz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7f4 faa8 	bl	8000524 <__aeabi_i2d>
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	f7f4 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfdc:	b900      	cbnz	r0, 800bfe0 <_dtoa_r+0x168>
 800bfde:	3f01      	subs	r7, #1
 800bfe0:	2f16      	cmp	r7, #22
 800bfe2:	d852      	bhi.n	800c08a <_dtoa_r+0x212>
 800bfe4:	4b5d      	ldr	r3, [pc, #372]	@ (800c15c <_dtoa_r+0x2e4>)
 800bfe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bff2:	f7f4 fd73 	bl	8000adc <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d049      	beq.n	800c08e <_dtoa_r+0x216>
 800bffa:	3f01      	subs	r7, #1
 800bffc:	2300      	movs	r3, #0
 800bffe:	9310      	str	r3, [sp, #64]	@ 0x40
 800c000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c002:	1b9b      	subs	r3, r3, r6
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	bf45      	ittet	mi
 800c008:	f1c3 0301 	rsbmi	r3, r3, #1
 800c00c:	9300      	strmi	r3, [sp, #0]
 800c00e:	2300      	movpl	r3, #0
 800c010:	2300      	movmi	r3, #0
 800c012:	9206      	str	r2, [sp, #24]
 800c014:	bf54      	ite	pl
 800c016:	9300      	strpl	r3, [sp, #0]
 800c018:	9306      	strmi	r3, [sp, #24]
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	db39      	blt.n	800c092 <_dtoa_r+0x21a>
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	970d      	str	r7, [sp, #52]	@ 0x34
 800c022:	443b      	add	r3, r7
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	2300      	movs	r3, #0
 800c028:	9308      	str	r3, [sp, #32]
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	2b09      	cmp	r3, #9
 800c02e:	d863      	bhi.n	800c0f8 <_dtoa_r+0x280>
 800c030:	2b05      	cmp	r3, #5
 800c032:	bfc4      	itt	gt
 800c034:	3b04      	subgt	r3, #4
 800c036:	9307      	strgt	r3, [sp, #28]
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	f1a3 0302 	sub.w	r3, r3, #2
 800c03e:	bfcc      	ite	gt
 800c040:	2400      	movgt	r4, #0
 800c042:	2401      	movle	r4, #1
 800c044:	2b03      	cmp	r3, #3
 800c046:	d863      	bhi.n	800c110 <_dtoa_r+0x298>
 800c048:	e8df f003 	tbb	[pc, r3]
 800c04c:	2b375452 	.word	0x2b375452
 800c050:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c054:	441e      	add	r6, r3
 800c056:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	bfc1      	itttt	gt
 800c05e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c062:	409f      	lslgt	r7, r3
 800c064:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c068:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c06c:	bfd6      	itet	le
 800c06e:	f1c3 0320 	rsble	r3, r3, #32
 800c072:	ea47 0003 	orrgt.w	r0, r7, r3
 800c076:	fa04 f003 	lslle.w	r0, r4, r3
 800c07a:	f7f4 fa43 	bl	8000504 <__aeabi_ui2d>
 800c07e:	2201      	movs	r2, #1
 800c080:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c084:	3e01      	subs	r6, #1
 800c086:	9212      	str	r2, [sp, #72]	@ 0x48
 800c088:	e776      	b.n	800bf78 <_dtoa_r+0x100>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7b7      	b.n	800bffe <_dtoa_r+0x186>
 800c08e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c090:	e7b6      	b.n	800c000 <_dtoa_r+0x188>
 800c092:	9b00      	ldr	r3, [sp, #0]
 800c094:	1bdb      	subs	r3, r3, r7
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	427b      	negs	r3, r7
 800c09a:	9308      	str	r3, [sp, #32]
 800c09c:	2300      	movs	r3, #0
 800c09e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0a0:	e7c3      	b.n	800c02a <_dtoa_r+0x1b2>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0a8:	eb07 0b03 	add.w	fp, r7, r3
 800c0ac:	f10b 0301 	add.w	r3, fp, #1
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	bfb8      	it	lt
 800c0b6:	2301      	movlt	r3, #1
 800c0b8:	e006      	b.n	800c0c8 <_dtoa_r+0x250>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd28      	ble.n	800c116 <_dtoa_r+0x29e>
 800c0c4:	469b      	mov	fp, r3
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2204      	movs	r2, #4
 800c0d0:	f102 0514 	add.w	r5, r2, #20
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	d926      	bls.n	800c126 <_dtoa_r+0x2ae>
 800c0d8:	6041      	str	r1, [r0, #4]
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f000 fd9c 	bl	800cc18 <_Balloc>
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d142      	bne.n	800c16c <_dtoa_r+0x2f4>
 800c0e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c160 <_dtoa_r+0x2e8>)
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0ee:	e6da      	b.n	800bea6 <_dtoa_r+0x2e>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e7e3      	b.n	800c0bc <_dtoa_r+0x244>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e7d5      	b.n	800c0a4 <_dtoa_r+0x22c>
 800c0f8:	2401      	movs	r4, #1
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9307      	str	r3, [sp, #28]
 800c0fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800c100:	f04f 3bff 	mov.w	fp, #4294967295
 800c104:	2200      	movs	r2, #0
 800c106:	f8cd b00c 	str.w	fp, [sp, #12]
 800c10a:	2312      	movs	r3, #18
 800c10c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c10e:	e7db      	b.n	800c0c8 <_dtoa_r+0x250>
 800c110:	2301      	movs	r3, #1
 800c112:	9309      	str	r3, [sp, #36]	@ 0x24
 800c114:	e7f4      	b.n	800c100 <_dtoa_r+0x288>
 800c116:	f04f 0b01 	mov.w	fp, #1
 800c11a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c11e:	465b      	mov	r3, fp
 800c120:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c124:	e7d0      	b.n	800c0c8 <_dtoa_r+0x250>
 800c126:	3101      	adds	r1, #1
 800c128:	0052      	lsls	r2, r2, #1
 800c12a:	e7d1      	b.n	800c0d0 <_dtoa_r+0x258>
 800c12c:	f3af 8000 	nop.w
 800c130:	636f4361 	.word	0x636f4361
 800c134:	3fd287a7 	.word	0x3fd287a7
 800c138:	8b60c8b3 	.word	0x8b60c8b3
 800c13c:	3fc68a28 	.word	0x3fc68a28
 800c140:	509f79fb 	.word	0x509f79fb
 800c144:	3fd34413 	.word	0x3fd34413
 800c148:	0800e675 	.word	0x0800e675
 800c14c:	0800e68c 	.word	0x0800e68c
 800c150:	7ff00000 	.word	0x7ff00000
 800c154:	0800e645 	.word	0x0800e645
 800c158:	3ff80000 	.word	0x3ff80000
 800c15c:	0800e7e0 	.word	0x0800e7e0
 800c160:	0800e6e4 	.word	0x0800e6e4
 800c164:	0800e671 	.word	0x0800e671
 800c168:	0800e644 	.word	0x0800e644
 800c16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c170:	6018      	str	r0, [r3, #0]
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	2b0e      	cmp	r3, #14
 800c176:	f200 80a1 	bhi.w	800c2bc <_dtoa_r+0x444>
 800c17a:	2c00      	cmp	r4, #0
 800c17c:	f000 809e 	beq.w	800c2bc <_dtoa_r+0x444>
 800c180:	2f00      	cmp	r7, #0
 800c182:	dd33      	ble.n	800c1ec <_dtoa_r+0x374>
 800c184:	4b9c      	ldr	r3, [pc, #624]	@ (800c3f8 <_dtoa_r+0x580>)
 800c186:	f007 020f 	and.w	r2, r7, #15
 800c18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c18e:	ed93 7b00 	vldr	d7, [r3]
 800c192:	05f8      	lsls	r0, r7, #23
 800c194:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c19c:	d516      	bpl.n	800c1cc <_dtoa_r+0x354>
 800c19e:	4b97      	ldr	r3, [pc, #604]	@ (800c3fc <_dtoa_r+0x584>)
 800c1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1a8:	f7f4 fb50 	bl	800084c <__aeabi_ddiv>
 800c1ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1b0:	f004 040f 	and.w	r4, r4, #15
 800c1b4:	2603      	movs	r6, #3
 800c1b6:	4d91      	ldr	r5, [pc, #580]	@ (800c3fc <_dtoa_r+0x584>)
 800c1b8:	b954      	cbnz	r4, 800c1d0 <_dtoa_r+0x358>
 800c1ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1c2:	f7f4 fb43 	bl	800084c <__aeabi_ddiv>
 800c1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ca:	e028      	b.n	800c21e <_dtoa_r+0x3a6>
 800c1cc:	2602      	movs	r6, #2
 800c1ce:	e7f2      	b.n	800c1b6 <_dtoa_r+0x33e>
 800c1d0:	07e1      	lsls	r1, r4, #31
 800c1d2:	d508      	bpl.n	800c1e6 <_dtoa_r+0x36e>
 800c1d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	1064      	asrs	r4, r4, #1
 800c1e8:	3508      	adds	r5, #8
 800c1ea:	e7e5      	b.n	800c1b8 <_dtoa_r+0x340>
 800c1ec:	f000 80af 	beq.w	800c34e <_dtoa_r+0x4d6>
 800c1f0:	427c      	negs	r4, r7
 800c1f2:	4b81      	ldr	r3, [pc, #516]	@ (800c3f8 <_dtoa_r+0x580>)
 800c1f4:	4d81      	ldr	r5, [pc, #516]	@ (800c3fc <_dtoa_r+0x584>)
 800c1f6:	f004 020f 	and.w	r2, r4, #15
 800c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c206:	f7f4 f9f7 	bl	80005f8 <__aeabi_dmul>
 800c20a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c20e:	1124      	asrs	r4, r4, #4
 800c210:	2300      	movs	r3, #0
 800c212:	2602      	movs	r6, #2
 800c214:	2c00      	cmp	r4, #0
 800c216:	f040 808f 	bne.w	800c338 <_dtoa_r+0x4c0>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1d3      	bne.n	800c1c6 <_dtoa_r+0x34e>
 800c21e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 8094 	beq.w	800c352 <_dtoa_r+0x4da>
 800c22a:	4b75      	ldr	r3, [pc, #468]	@ (800c400 <_dtoa_r+0x588>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fc53 	bl	8000adc <__aeabi_dcmplt>
 800c236:	2800      	cmp	r0, #0
 800c238:	f000 808b 	beq.w	800c352 <_dtoa_r+0x4da>
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 8087 	beq.w	800c352 <_dtoa_r+0x4da>
 800c244:	f1bb 0f00 	cmp.w	fp, #0
 800c248:	dd34      	ble.n	800c2b4 <_dtoa_r+0x43c>
 800c24a:	4620      	mov	r0, r4
 800c24c:	4b6d      	ldr	r3, [pc, #436]	@ (800c404 <_dtoa_r+0x58c>)
 800c24e:	2200      	movs	r2, #0
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 f9d1 	bl	80005f8 <__aeabi_dmul>
 800c256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c25a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c25e:	3601      	adds	r6, #1
 800c260:	465c      	mov	r4, fp
 800c262:	4630      	mov	r0, r6
 800c264:	f7f4 f95e 	bl	8000524 <__aeabi_i2d>
 800c268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	4b65      	ldr	r3, [pc, #404]	@ (800c408 <_dtoa_r+0x590>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f80a 	bl	800028c <__adddf3>
 800c278:	4605      	mov	r5, r0
 800c27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c27e:	2c00      	cmp	r4, #0
 800c280:	d16a      	bne.n	800c358 <_dtoa_r+0x4e0>
 800c282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c286:	4b61      	ldr	r3, [pc, #388]	@ (800c40c <_dtoa_r+0x594>)
 800c288:	2200      	movs	r2, #0
 800c28a:	f7f3 fffd 	bl	8000288 <__aeabi_dsub>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c296:	462a      	mov	r2, r5
 800c298:	4633      	mov	r3, r6
 800c29a:	f7f4 fc3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f040 8298 	bne.w	800c7d4 <_dtoa_r+0x95c>
 800c2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2ae:	f7f4 fc15 	bl	8000adc <__aeabi_dcmplt>
 800c2b2:	bb38      	cbnz	r0, 800c304 <_dtoa_r+0x48c>
 800c2b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f2c0 8157 	blt.w	800c572 <_dtoa_r+0x6fa>
 800c2c4:	2f0e      	cmp	r7, #14
 800c2c6:	f300 8154 	bgt.w	800c572 <_dtoa_r+0x6fa>
 800c2ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c3f8 <_dtoa_r+0x580>)
 800c2cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2d0:	ed93 7b00 	vldr	d7, [r3]
 800c2d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	ed8d 7b00 	vstr	d7, [sp]
 800c2dc:	f280 80e5 	bge.w	800c4aa <_dtoa_r+0x632>
 800c2e0:	9b03      	ldr	r3, [sp, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f300 80e1 	bgt.w	800c4aa <_dtoa_r+0x632>
 800c2e8:	d10c      	bne.n	800c304 <_dtoa_r+0x48c>
 800c2ea:	4b48      	ldr	r3, [pc, #288]	@ (800c40c <_dtoa_r+0x594>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	ec51 0b17 	vmov	r0, r1, d7
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2fa:	f7f4 fc03 	bl	8000b04 <__aeabi_dcmpge>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f000 8266 	beq.w	800c7d0 <_dtoa_r+0x958>
 800c304:	2400      	movs	r4, #0
 800c306:	4625      	mov	r5, r4
 800c308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c30a:	4656      	mov	r6, sl
 800c30c:	ea6f 0803 	mvn.w	r8, r3
 800c310:	2700      	movs	r7, #0
 800c312:	4621      	mov	r1, r4
 800c314:	4648      	mov	r0, r9
 800c316:	f000 fcbf 	bl	800cc98 <_Bfree>
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	f000 80bd 	beq.w	800c49a <_dtoa_r+0x622>
 800c320:	b12f      	cbz	r7, 800c32e <_dtoa_r+0x4b6>
 800c322:	42af      	cmp	r7, r5
 800c324:	d003      	beq.n	800c32e <_dtoa_r+0x4b6>
 800c326:	4639      	mov	r1, r7
 800c328:	4648      	mov	r0, r9
 800c32a:	f000 fcb5 	bl	800cc98 <_Bfree>
 800c32e:	4629      	mov	r1, r5
 800c330:	4648      	mov	r0, r9
 800c332:	f000 fcb1 	bl	800cc98 <_Bfree>
 800c336:	e0b0      	b.n	800c49a <_dtoa_r+0x622>
 800c338:	07e2      	lsls	r2, r4, #31
 800c33a:	d505      	bpl.n	800c348 <_dtoa_r+0x4d0>
 800c33c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c340:	f7f4 f95a 	bl	80005f8 <__aeabi_dmul>
 800c344:	3601      	adds	r6, #1
 800c346:	2301      	movs	r3, #1
 800c348:	1064      	asrs	r4, r4, #1
 800c34a:	3508      	adds	r5, #8
 800c34c:	e762      	b.n	800c214 <_dtoa_r+0x39c>
 800c34e:	2602      	movs	r6, #2
 800c350:	e765      	b.n	800c21e <_dtoa_r+0x3a6>
 800c352:	9c03      	ldr	r4, [sp, #12]
 800c354:	46b8      	mov	r8, r7
 800c356:	e784      	b.n	800c262 <_dtoa_r+0x3ea>
 800c358:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <_dtoa_r+0x580>)
 800c35a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c35c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c364:	4454      	add	r4, sl
 800c366:	2900      	cmp	r1, #0
 800c368:	d054      	beq.n	800c414 <_dtoa_r+0x59c>
 800c36a:	4929      	ldr	r1, [pc, #164]	@ (800c410 <_dtoa_r+0x598>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f4 fa6d 	bl	800084c <__aeabi_ddiv>
 800c372:	4633      	mov	r3, r6
 800c374:	462a      	mov	r2, r5
 800c376:	f7f3 ff87 	bl	8000288 <__aeabi_dsub>
 800c37a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c37e:	4656      	mov	r6, sl
 800c380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c384:	f7f4 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800c388:	4605      	mov	r5, r0
 800c38a:	f7f4 f8cb 	bl	8000524 <__aeabi_i2d>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	3530      	adds	r5, #48	@ 0x30
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3ac:	f7f4 fb96 	bl	8000adc <__aeabi_dcmplt>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d172      	bne.n	800c49a <_dtoa_r+0x622>
 800c3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3b8:	4911      	ldr	r1, [pc, #68]	@ (800c400 <_dtoa_r+0x588>)
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	f7f3 ff64 	bl	8000288 <__aeabi_dsub>
 800c3c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3c4:	f7f4 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f040 80b4 	bne.w	800c536 <_dtoa_r+0x6be>
 800c3ce:	42a6      	cmp	r6, r4
 800c3d0:	f43f af70 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c404 <_dtoa_r+0x58c>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	4b08      	ldr	r3, [pc, #32]	@ (800c404 <_dtoa_r+0x58c>)
 800c3e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3ec:	f7f4 f904 	bl	80005f8 <__aeabi_dmul>
 800c3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3f4:	e7c4      	b.n	800c380 <_dtoa_r+0x508>
 800c3f6:	bf00      	nop
 800c3f8:	0800e7e0 	.word	0x0800e7e0
 800c3fc:	0800e7b8 	.word	0x0800e7b8
 800c400:	3ff00000 	.word	0x3ff00000
 800c404:	40240000 	.word	0x40240000
 800c408:	401c0000 	.word	0x401c0000
 800c40c:	40140000 	.word	0x40140000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c420:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c422:	4656      	mov	r6, sl
 800c424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c428:	f7f4 fb96 	bl	8000b58 <__aeabi_d2iz>
 800c42c:	4605      	mov	r5, r0
 800c42e:	f7f4 f879 	bl	8000524 <__aeabi_i2d>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	3530      	adds	r5, #48	@ 0x30
 800c440:	f806 5b01 	strb.w	r5, [r6], #1
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	42a6      	cmp	r6, r4
 800c44a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	d124      	bne.n	800c49e <_dtoa_r+0x626>
 800c454:	4baf      	ldr	r3, [pc, #700]	@ (800c714 <_dtoa_r+0x89c>)
 800c456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c45a:	f7f3 ff17 	bl	800028c <__adddf3>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c466:	f7f4 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d163      	bne.n	800c536 <_dtoa_r+0x6be>
 800c46e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c472:	49a8      	ldr	r1, [pc, #672]	@ (800c714 <_dtoa_r+0x89c>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f3 ff07 	bl	8000288 <__aeabi_dsub>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c482:	f7f4 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f af14 	beq.w	800c2b4 <_dtoa_r+0x43c>
 800c48c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c48e:	1e73      	subs	r3, r6, #1
 800c490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c496:	2b30      	cmp	r3, #48	@ 0x30
 800c498:	d0f8      	beq.n	800c48c <_dtoa_r+0x614>
 800c49a:	4647      	mov	r7, r8
 800c49c:	e03b      	b.n	800c516 <_dtoa_r+0x69e>
 800c49e:	4b9e      	ldr	r3, [pc, #632]	@ (800c718 <_dtoa_r+0x8a0>)
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4a8:	e7bc      	b.n	800c424 <_dtoa_r+0x5ac>
 800c4aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4ae:	4656      	mov	r6, sl
 800c4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	f7f4 f9c8 	bl	800084c <__aeabi_ddiv>
 800c4bc:	f7f4 fb4c 	bl	8000b58 <__aeabi_d2iz>
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	f7f4 f82f 	bl	8000524 <__aeabi_i2d>
 800c4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ca:	f7f4 f895 	bl	80005f8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4da:	f7f3 fed5 	bl	8000288 <__aeabi_dsub>
 800c4de:	f806 4b01 	strb.w	r4, [r6], #1
 800c4e2:	9d03      	ldr	r5, [sp, #12]
 800c4e4:	eba6 040a 	sub.w	r4, r6, sl
 800c4e8:	42a5      	cmp	r5, r4
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	d133      	bne.n	800c558 <_dtoa_r+0x6e0>
 800c4f0:	f7f3 fecc 	bl	800028c <__adddf3>
 800c4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	f7f4 fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 800c500:	b9c0      	cbnz	r0, 800c534 <_dtoa_r+0x6bc>
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c50e:	b110      	cbz	r0, 800c516 <_dtoa_r+0x69e>
 800c510:	f018 0f01 	tst.w	r8, #1
 800c514:	d10e      	bne.n	800c534 <_dtoa_r+0x6bc>
 800c516:	9902      	ldr	r1, [sp, #8]
 800c518:	4648      	mov	r0, r9
 800c51a:	f000 fbbd 	bl	800cc98 <_Bfree>
 800c51e:	2300      	movs	r3, #0
 800c520:	7033      	strb	r3, [r6, #0]
 800c522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c524:	3701      	adds	r7, #1
 800c526:	601f      	str	r7, [r3, #0]
 800c528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 824b 	beq.w	800c9c6 <_dtoa_r+0xb4e>
 800c530:	601e      	str	r6, [r3, #0]
 800c532:	e248      	b.n	800c9c6 <_dtoa_r+0xb4e>
 800c534:	46b8      	mov	r8, r7
 800c536:	4633      	mov	r3, r6
 800c538:	461e      	mov	r6, r3
 800c53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c53e:	2a39      	cmp	r2, #57	@ 0x39
 800c540:	d106      	bne.n	800c550 <_dtoa_r+0x6d8>
 800c542:	459a      	cmp	sl, r3
 800c544:	d1f8      	bne.n	800c538 <_dtoa_r+0x6c0>
 800c546:	2230      	movs	r2, #48	@ 0x30
 800c548:	f108 0801 	add.w	r8, r8, #1
 800c54c:	f88a 2000 	strb.w	r2, [sl]
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	3201      	adds	r2, #1
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e7a0      	b.n	800c49a <_dtoa_r+0x622>
 800c558:	4b6f      	ldr	r3, [pc, #444]	@ (800c718 <_dtoa_r+0x8a0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	f7f4 f84c 	bl	80005f8 <__aeabi_dmul>
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	f7f4 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d09f      	beq.n	800c4b0 <_dtoa_r+0x638>
 800c570:	e7d1      	b.n	800c516 <_dtoa_r+0x69e>
 800c572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c574:	2a00      	cmp	r2, #0
 800c576:	f000 80ea 	beq.w	800c74e <_dtoa_r+0x8d6>
 800c57a:	9a07      	ldr	r2, [sp, #28]
 800c57c:	2a01      	cmp	r2, #1
 800c57e:	f300 80cd 	bgt.w	800c71c <_dtoa_r+0x8a4>
 800c582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c584:	2a00      	cmp	r2, #0
 800c586:	f000 80c1 	beq.w	800c70c <_dtoa_r+0x894>
 800c58a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c58e:	9c08      	ldr	r4, [sp, #32]
 800c590:	9e00      	ldr	r6, [sp, #0]
 800c592:	9a00      	ldr	r2, [sp, #0]
 800c594:	441a      	add	r2, r3
 800c596:	9200      	str	r2, [sp, #0]
 800c598:	9a06      	ldr	r2, [sp, #24]
 800c59a:	2101      	movs	r1, #1
 800c59c:	441a      	add	r2, r3
 800c59e:	4648      	mov	r0, r9
 800c5a0:	9206      	str	r2, [sp, #24]
 800c5a2:	f000 fc2d 	bl	800ce00 <__i2b>
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	b166      	cbz	r6, 800c5c4 <_dtoa_r+0x74c>
 800c5aa:	9b06      	ldr	r3, [sp, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd09      	ble.n	800c5c4 <_dtoa_r+0x74c>
 800c5b0:	42b3      	cmp	r3, r6
 800c5b2:	9a00      	ldr	r2, [sp, #0]
 800c5b4:	bfa8      	it	ge
 800c5b6:	4633      	movge	r3, r6
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	9200      	str	r2, [sp, #0]
 800c5bc:	9a06      	ldr	r2, [sp, #24]
 800c5be:	1af6      	subs	r6, r6, r3
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	9b08      	ldr	r3, [sp, #32]
 800c5c6:	b30b      	cbz	r3, 800c60c <_dtoa_r+0x794>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80c6 	beq.w	800c75c <_dtoa_r+0x8e4>
 800c5d0:	2c00      	cmp	r4, #0
 800c5d2:	f000 80c0 	beq.w	800c756 <_dtoa_r+0x8de>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4648      	mov	r0, r9
 800c5dc:	f000 fcc8 	bl	800cf70 <__pow5mult>
 800c5e0:	9a02      	ldr	r2, [sp, #8]
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	4648      	mov	r0, r9
 800c5e8:	f000 fc20 	bl	800ce2c <__multiply>
 800c5ec:	9902      	ldr	r1, [sp, #8]
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4648      	mov	r0, r9
 800c5f2:	f000 fb51 	bl	800cc98 <_Bfree>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	1b1b      	subs	r3, r3, r4
 800c5fa:	9308      	str	r3, [sp, #32]
 800c5fc:	f000 80b1 	beq.w	800c762 <_dtoa_r+0x8ea>
 800c600:	9a08      	ldr	r2, [sp, #32]
 800c602:	4641      	mov	r1, r8
 800c604:	4648      	mov	r0, r9
 800c606:	f000 fcb3 	bl	800cf70 <__pow5mult>
 800c60a:	9002      	str	r0, [sp, #8]
 800c60c:	2101      	movs	r1, #1
 800c60e:	4648      	mov	r0, r9
 800c610:	f000 fbf6 	bl	800ce00 <__i2b>
 800c614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c616:	4604      	mov	r4, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81d8 	beq.w	800c9ce <_dtoa_r+0xb56>
 800c61e:	461a      	mov	r2, r3
 800c620:	4601      	mov	r1, r0
 800c622:	4648      	mov	r0, r9
 800c624:	f000 fca4 	bl	800cf70 <__pow5mult>
 800c628:	9b07      	ldr	r3, [sp, #28]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	4604      	mov	r4, r0
 800c62e:	f300 809f 	bgt.w	800c770 <_dtoa_r+0x8f8>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8097 	bne.w	800c768 <_dtoa_r+0x8f0>
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 8093 	bne.w	800c76c <_dtoa_r+0x8f4>
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c64c:	0d1b      	lsrs	r3, r3, #20
 800c64e:	051b      	lsls	r3, r3, #20
 800c650:	b133      	cbz	r3, 800c660 <_dtoa_r+0x7e8>
 800c652:	9b00      	ldr	r3, [sp, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	3301      	adds	r3, #1
 800c65c:	9306      	str	r3, [sp, #24]
 800c65e:	2301      	movs	r3, #1
 800c660:	9308      	str	r3, [sp, #32]
 800c662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 81b8 	beq.w	800c9da <_dtoa_r+0xb62>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c670:	6918      	ldr	r0, [r3, #16]
 800c672:	f000 fb79 	bl	800cd68 <__hi0bits>
 800c676:	f1c0 0020 	rsb	r0, r0, #32
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	4418      	add	r0, r3
 800c67e:	f010 001f 	ands.w	r0, r0, #31
 800c682:	f000 8082 	beq.w	800c78a <_dtoa_r+0x912>
 800c686:	f1c0 0320 	rsb	r3, r0, #32
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	dd73      	ble.n	800c776 <_dtoa_r+0x8fe>
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	f1c0 001c 	rsb	r0, r0, #28
 800c694:	4403      	add	r3, r0
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	9b06      	ldr	r3, [sp, #24]
 800c69a:	4403      	add	r3, r0
 800c69c:	4406      	add	r6, r0
 800c69e:	9306      	str	r3, [sp, #24]
 800c6a0:	9b00      	ldr	r3, [sp, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dd05      	ble.n	800c6b2 <_dtoa_r+0x83a>
 800c6a6:	9902      	ldr	r1, [sp, #8]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f000 fcba 	bl	800d024 <__lshift>
 800c6b0:	9002      	str	r0, [sp, #8]
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd05      	ble.n	800c6c4 <_dtoa_r+0x84c>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	4648      	mov	r0, r9
 800c6be:	f000 fcb1 	bl	800d024 <__lshift>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d061      	beq.n	800c78e <_dtoa_r+0x916>
 800c6ca:	9802      	ldr	r0, [sp, #8]
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f000 fd15 	bl	800d0fc <__mcmp>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	da5b      	bge.n	800c78e <_dtoa_r+0x916>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9902      	ldr	r1, [sp, #8]
 800c6da:	220a      	movs	r2, #10
 800c6dc:	4648      	mov	r0, r9
 800c6de:	f000 fafd 	bl	800ccdc <__multadd>
 800c6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 8177 	beq.w	800c9de <_dtoa_r+0xb66>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4648      	mov	r0, r9
 800c6f8:	f000 faf0 	bl	800ccdc <__multadd>
 800c6fc:	f1bb 0f00 	cmp.w	fp, #0
 800c700:	4605      	mov	r5, r0
 800c702:	dc6f      	bgt.n	800c7e4 <_dtoa_r+0x96c>
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	2b02      	cmp	r3, #2
 800c708:	dc49      	bgt.n	800c79e <_dtoa_r+0x926>
 800c70a:	e06b      	b.n	800c7e4 <_dtoa_r+0x96c>
 800c70c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c70e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c712:	e73c      	b.n	800c58e <_dtoa_r+0x716>
 800c714:	3fe00000 	.word	0x3fe00000
 800c718:	40240000 	.word	0x40240000
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	1e5c      	subs	r4, r3, #1
 800c720:	9b08      	ldr	r3, [sp, #32]
 800c722:	42a3      	cmp	r3, r4
 800c724:	db09      	blt.n	800c73a <_dtoa_r+0x8c2>
 800c726:	1b1c      	subs	r4, r3, r4
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f6bf af30 	bge.w	800c590 <_dtoa_r+0x718>
 800c730:	9b00      	ldr	r3, [sp, #0]
 800c732:	9a03      	ldr	r2, [sp, #12]
 800c734:	1a9e      	subs	r6, r3, r2
 800c736:	2300      	movs	r3, #0
 800c738:	e72b      	b.n	800c592 <_dtoa_r+0x71a>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c73e:	9408      	str	r4, [sp, #32]
 800c740:	1ae3      	subs	r3, r4, r3
 800c742:	441a      	add	r2, r3
 800c744:	9e00      	ldr	r6, [sp, #0]
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	920d      	str	r2, [sp, #52]	@ 0x34
 800c74a:	2400      	movs	r4, #0
 800c74c:	e721      	b.n	800c592 <_dtoa_r+0x71a>
 800c74e:	9c08      	ldr	r4, [sp, #32]
 800c750:	9e00      	ldr	r6, [sp, #0]
 800c752:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c754:	e728      	b.n	800c5a8 <_dtoa_r+0x730>
 800c756:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c75a:	e751      	b.n	800c600 <_dtoa_r+0x788>
 800c75c:	9a08      	ldr	r2, [sp, #32]
 800c75e:	9902      	ldr	r1, [sp, #8]
 800c760:	e750      	b.n	800c604 <_dtoa_r+0x78c>
 800c762:	f8cd 8008 	str.w	r8, [sp, #8]
 800c766:	e751      	b.n	800c60c <_dtoa_r+0x794>
 800c768:	2300      	movs	r3, #0
 800c76a:	e779      	b.n	800c660 <_dtoa_r+0x7e8>
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	e777      	b.n	800c660 <_dtoa_r+0x7e8>
 800c770:	2300      	movs	r3, #0
 800c772:	9308      	str	r3, [sp, #32]
 800c774:	e779      	b.n	800c66a <_dtoa_r+0x7f2>
 800c776:	d093      	beq.n	800c6a0 <_dtoa_r+0x828>
 800c778:	9a00      	ldr	r2, [sp, #0]
 800c77a:	331c      	adds	r3, #28
 800c77c:	441a      	add	r2, r3
 800c77e:	9200      	str	r2, [sp, #0]
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	441a      	add	r2, r3
 800c784:	441e      	add	r6, r3
 800c786:	9206      	str	r2, [sp, #24]
 800c788:	e78a      	b.n	800c6a0 <_dtoa_r+0x828>
 800c78a:	4603      	mov	r3, r0
 800c78c:	e7f4      	b.n	800c778 <_dtoa_r+0x900>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	46b8      	mov	r8, r7
 800c794:	dc20      	bgt.n	800c7d8 <_dtoa_r+0x960>
 800c796:	469b      	mov	fp, r3
 800c798:	9b07      	ldr	r3, [sp, #28]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	dd1e      	ble.n	800c7dc <_dtoa_r+0x964>
 800c79e:	f1bb 0f00 	cmp.w	fp, #0
 800c7a2:	f47f adb1 	bne.w	800c308 <_dtoa_r+0x490>
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	2205      	movs	r2, #5
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f000 fa95 	bl	800ccdc <__multadd>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	9802      	ldr	r0, [sp, #8]
 800c7b8:	f000 fca0 	bl	800d0fc <__mcmp>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f77f ada3 	ble.w	800c308 <_dtoa_r+0x490>
 800c7c2:	4656      	mov	r6, sl
 800c7c4:	2331      	movs	r3, #49	@ 0x31
 800c7c6:	f806 3b01 	strb.w	r3, [r6], #1
 800c7ca:	f108 0801 	add.w	r8, r8, #1
 800c7ce:	e59f      	b.n	800c310 <_dtoa_r+0x498>
 800c7d0:	9c03      	ldr	r4, [sp, #12]
 800c7d2:	46b8      	mov	r8, r7
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	e7f4      	b.n	800c7c2 <_dtoa_r+0x94a>
 800c7d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 8101 	beq.w	800c9e6 <_dtoa_r+0xb6e>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	dd05      	ble.n	800c7f4 <_dtoa_r+0x97c>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4632      	mov	r2, r6
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f000 fc19 	bl	800d024 <__lshift>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	9b08      	ldr	r3, [sp, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d05c      	beq.n	800c8b4 <_dtoa_r+0xa3c>
 800c7fa:	6869      	ldr	r1, [r5, #4]
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fa0b 	bl	800cc18 <_Balloc>
 800c802:	4606      	mov	r6, r0
 800c804:	b928      	cbnz	r0, 800c812 <_dtoa_r+0x99a>
 800c806:	4b82      	ldr	r3, [pc, #520]	@ (800ca10 <_dtoa_r+0xb98>)
 800c808:	4602      	mov	r2, r0
 800c80a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c80e:	f7ff bb4a 	b.w	800bea6 <_dtoa_r+0x2e>
 800c812:	692a      	ldr	r2, [r5, #16]
 800c814:	3202      	adds	r2, #2
 800c816:	0092      	lsls	r2, r2, #2
 800c818:	f105 010c 	add.w	r1, r5, #12
 800c81c:	300c      	adds	r0, #12
 800c81e:	f001 f82b 	bl	800d878 <memcpy>
 800c822:	2201      	movs	r2, #1
 800c824:	4631      	mov	r1, r6
 800c826:	4648      	mov	r0, r9
 800c828:	f000 fbfc 	bl	800d024 <__lshift>
 800c82c:	f10a 0301 	add.w	r3, sl, #1
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	eb0a 030b 	add.w	r3, sl, fp
 800c836:	9308      	str	r3, [sp, #32]
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	462f      	mov	r7, r5
 800c840:	9306      	str	r3, [sp, #24]
 800c842:	4605      	mov	r5, r0
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	9802      	ldr	r0, [sp, #8]
 800c848:	4621      	mov	r1, r4
 800c84a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c84e:	f7ff fa88 	bl	800bd62 <quorem>
 800c852:	4603      	mov	r3, r0
 800c854:	3330      	adds	r3, #48	@ 0x30
 800c856:	9003      	str	r0, [sp, #12]
 800c858:	4639      	mov	r1, r7
 800c85a:	9802      	ldr	r0, [sp, #8]
 800c85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85e:	f000 fc4d 	bl	800d0fc <__mcmp>
 800c862:	462a      	mov	r2, r5
 800c864:	9004      	str	r0, [sp, #16]
 800c866:	4621      	mov	r1, r4
 800c868:	4648      	mov	r0, r9
 800c86a:	f000 fc63 	bl	800d134 <__mdiff>
 800c86e:	68c2      	ldr	r2, [r0, #12]
 800c870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c872:	4606      	mov	r6, r0
 800c874:	bb02      	cbnz	r2, 800c8b8 <_dtoa_r+0xa40>
 800c876:	4601      	mov	r1, r0
 800c878:	9802      	ldr	r0, [sp, #8]
 800c87a:	f000 fc3f 	bl	800d0fc <__mcmp>
 800c87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c880:	4602      	mov	r2, r0
 800c882:	4631      	mov	r1, r6
 800c884:	4648      	mov	r0, r9
 800c886:	920c      	str	r2, [sp, #48]	@ 0x30
 800c888:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88a:	f000 fa05 	bl	800cc98 <_Bfree>
 800c88e:	9b07      	ldr	r3, [sp, #28]
 800c890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c892:	9e00      	ldr	r6, [sp, #0]
 800c894:	ea42 0103 	orr.w	r1, r2, r3
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	4319      	orrs	r1, r3
 800c89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89e:	d10d      	bne.n	800c8bc <_dtoa_r+0xa44>
 800c8a0:	2b39      	cmp	r3, #57	@ 0x39
 800c8a2:	d027      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	dd01      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	3331      	adds	r3, #49	@ 0x31
 800c8ae:	f88b 3000 	strb.w	r3, [fp]
 800c8b2:	e52e      	b.n	800c312 <_dtoa_r+0x49a>
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	e7b9      	b.n	800c82c <_dtoa_r+0x9b4>
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	e7e2      	b.n	800c882 <_dtoa_r+0xa0a>
 800c8bc:	9904      	ldr	r1, [sp, #16]
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	db04      	blt.n	800c8cc <_dtoa_r+0xa54>
 800c8c2:	9807      	ldr	r0, [sp, #28]
 800c8c4:	4301      	orrs	r1, r0
 800c8c6:	9806      	ldr	r0, [sp, #24]
 800c8c8:	4301      	orrs	r1, r0
 800c8ca:	d120      	bne.n	800c90e <_dtoa_r+0xa96>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	ddee      	ble.n	800c8ae <_dtoa_r+0xa36>
 800c8d0:	9902      	ldr	r1, [sp, #8]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	f000 fba4 	bl	800d024 <__lshift>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	9002      	str	r0, [sp, #8]
 800c8e0:	f000 fc0c 	bl	800d0fc <__mcmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	dc02      	bgt.n	800c8f0 <_dtoa_r+0xa78>
 800c8ea:	d1e0      	bne.n	800c8ae <_dtoa_r+0xa36>
 800c8ec:	07da      	lsls	r2, r3, #31
 800c8ee:	d5de      	bpl.n	800c8ae <_dtoa_r+0xa36>
 800c8f0:	2b39      	cmp	r3, #57	@ 0x39
 800c8f2:	d1da      	bne.n	800c8aa <_dtoa_r+0xa32>
 800c8f4:	2339      	movs	r3, #57	@ 0x39
 800c8f6:	f88b 3000 	strb.w	r3, [fp]
 800c8fa:	4633      	mov	r3, r6
 800c8fc:	461e      	mov	r6, r3
 800c8fe:	3b01      	subs	r3, #1
 800c900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c904:	2a39      	cmp	r2, #57	@ 0x39
 800c906:	d04e      	beq.n	800c9a6 <_dtoa_r+0xb2e>
 800c908:	3201      	adds	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	e501      	b.n	800c312 <_dtoa_r+0x49a>
 800c90e:	2a00      	cmp	r2, #0
 800c910:	dd03      	ble.n	800c91a <_dtoa_r+0xaa2>
 800c912:	2b39      	cmp	r3, #57	@ 0x39
 800c914:	d0ee      	beq.n	800c8f4 <_dtoa_r+0xa7c>
 800c916:	3301      	adds	r3, #1
 800c918:	e7c9      	b.n	800c8ae <_dtoa_r+0xa36>
 800c91a:	9a00      	ldr	r2, [sp, #0]
 800c91c:	9908      	ldr	r1, [sp, #32]
 800c91e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c922:	428a      	cmp	r2, r1
 800c924:	d028      	beq.n	800c978 <_dtoa_r+0xb00>
 800c926:	9902      	ldr	r1, [sp, #8]
 800c928:	2300      	movs	r3, #0
 800c92a:	220a      	movs	r2, #10
 800c92c:	4648      	mov	r0, r9
 800c92e:	f000 f9d5 	bl	800ccdc <__multadd>
 800c932:	42af      	cmp	r7, r5
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	f04f 0300 	mov.w	r3, #0
 800c93a:	f04f 020a 	mov.w	r2, #10
 800c93e:	4639      	mov	r1, r7
 800c940:	4648      	mov	r0, r9
 800c942:	d107      	bne.n	800c954 <_dtoa_r+0xadc>
 800c944:	f000 f9ca 	bl	800ccdc <__multadd>
 800c948:	4607      	mov	r7, r0
 800c94a:	4605      	mov	r5, r0
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	e777      	b.n	800c844 <_dtoa_r+0x9cc>
 800c954:	f000 f9c2 	bl	800ccdc <__multadd>
 800c958:	4629      	mov	r1, r5
 800c95a:	4607      	mov	r7, r0
 800c95c:	2300      	movs	r3, #0
 800c95e:	220a      	movs	r2, #10
 800c960:	4648      	mov	r0, r9
 800c962:	f000 f9bb 	bl	800ccdc <__multadd>
 800c966:	4605      	mov	r5, r0
 800c968:	e7f0      	b.n	800c94c <_dtoa_r+0xad4>
 800c96a:	f1bb 0f00 	cmp.w	fp, #0
 800c96e:	bfcc      	ite	gt
 800c970:	465e      	movgt	r6, fp
 800c972:	2601      	movle	r6, #1
 800c974:	4456      	add	r6, sl
 800c976:	2700      	movs	r7, #0
 800c978:	9902      	ldr	r1, [sp, #8]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	2201      	movs	r2, #1
 800c97e:	4648      	mov	r0, r9
 800c980:	f000 fb50 	bl	800d024 <__lshift>
 800c984:	4621      	mov	r1, r4
 800c986:	9002      	str	r0, [sp, #8]
 800c988:	f000 fbb8 	bl	800d0fc <__mcmp>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dcb4      	bgt.n	800c8fa <_dtoa_r+0xa82>
 800c990:	d102      	bne.n	800c998 <_dtoa_r+0xb20>
 800c992:	9b00      	ldr	r3, [sp, #0]
 800c994:	07db      	lsls	r3, r3, #31
 800c996:	d4b0      	bmi.n	800c8fa <_dtoa_r+0xa82>
 800c998:	4633      	mov	r3, r6
 800c99a:	461e      	mov	r6, r3
 800c99c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9a0:	2a30      	cmp	r2, #48	@ 0x30
 800c9a2:	d0fa      	beq.n	800c99a <_dtoa_r+0xb22>
 800c9a4:	e4b5      	b.n	800c312 <_dtoa_r+0x49a>
 800c9a6:	459a      	cmp	sl, r3
 800c9a8:	d1a8      	bne.n	800c8fc <_dtoa_r+0xa84>
 800c9aa:	2331      	movs	r3, #49	@ 0x31
 800c9ac:	f108 0801 	add.w	r8, r8, #1
 800c9b0:	f88a 3000 	strb.w	r3, [sl]
 800c9b4:	e4ad      	b.n	800c312 <_dtoa_r+0x49a>
 800c9b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca14 <_dtoa_r+0xb9c>
 800c9bc:	b11b      	cbz	r3, 800c9c6 <_dtoa_r+0xb4e>
 800c9be:	f10a 0308 	add.w	r3, sl, #8
 800c9c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	4650      	mov	r0, sl
 800c9c8:	b017      	add	sp, #92	@ 0x5c
 800c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ce:	9b07      	ldr	r3, [sp, #28]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	f77f ae2e 	ble.w	800c632 <_dtoa_r+0x7ba>
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e64d      	b.n	800c67a <_dtoa_r+0x802>
 800c9de:	f1bb 0f00 	cmp.w	fp, #0
 800c9e2:	f77f aed9 	ble.w	800c798 <_dtoa_r+0x920>
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	9802      	ldr	r0, [sp, #8]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f7ff f9b9 	bl	800bd62 <quorem>
 800c9f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c9f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9f8:	eba6 020a 	sub.w	r2, r6, sl
 800c9fc:	4593      	cmp	fp, r2
 800c9fe:	ddb4      	ble.n	800c96a <_dtoa_r+0xaf2>
 800ca00:	9902      	ldr	r1, [sp, #8]
 800ca02:	2300      	movs	r3, #0
 800ca04:	220a      	movs	r2, #10
 800ca06:	4648      	mov	r0, r9
 800ca08:	f000 f968 	bl	800ccdc <__multadd>
 800ca0c:	9002      	str	r0, [sp, #8]
 800ca0e:	e7eb      	b.n	800c9e8 <_dtoa_r+0xb70>
 800ca10:	0800e6e4 	.word	0x0800e6e4
 800ca14:	0800e668 	.word	0x0800e668

0800ca18 <_free_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	d041      	beq.n	800caa4 <_free_r+0x8c>
 800ca20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca24:	1f0c      	subs	r4, r1, #4
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	bfb8      	it	lt
 800ca2a:	18e4      	addlt	r4, r4, r3
 800ca2c:	f000 f8e8 	bl	800cc00 <__malloc_lock>
 800ca30:	4a1d      	ldr	r2, [pc, #116]	@ (800caa8 <_free_r+0x90>)
 800ca32:	6813      	ldr	r3, [r2, #0]
 800ca34:	b933      	cbnz	r3, 800ca44 <_free_r+0x2c>
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	6014      	str	r4, [r2, #0]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca40:	f000 b8e4 	b.w	800cc0c <__malloc_unlock>
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	d908      	bls.n	800ca5a <_free_r+0x42>
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	1821      	adds	r1, r4, r0
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf01      	itttt	eq
 800ca50:	6819      	ldreq	r1, [r3, #0]
 800ca52:	685b      	ldreq	r3, [r3, #4]
 800ca54:	1809      	addeq	r1, r1, r0
 800ca56:	6021      	streq	r1, [r4, #0]
 800ca58:	e7ed      	b.n	800ca36 <_free_r+0x1e>
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b10b      	cbz	r3, 800ca64 <_free_r+0x4c>
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	d9fa      	bls.n	800ca5a <_free_r+0x42>
 800ca64:	6811      	ldr	r1, [r2, #0]
 800ca66:	1850      	adds	r0, r2, r1
 800ca68:	42a0      	cmp	r0, r4
 800ca6a:	d10b      	bne.n	800ca84 <_free_r+0x6c>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	4401      	add	r1, r0
 800ca70:	1850      	adds	r0, r2, r1
 800ca72:	4283      	cmp	r3, r0
 800ca74:	6011      	str	r1, [r2, #0]
 800ca76:	d1e0      	bne.n	800ca3a <_free_r+0x22>
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	6053      	str	r3, [r2, #4]
 800ca7e:	4408      	add	r0, r1
 800ca80:	6010      	str	r0, [r2, #0]
 800ca82:	e7da      	b.n	800ca3a <_free_r+0x22>
 800ca84:	d902      	bls.n	800ca8c <_free_r+0x74>
 800ca86:	230c      	movs	r3, #12
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	e7d6      	b.n	800ca3a <_free_r+0x22>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	1821      	adds	r1, r4, r0
 800ca90:	428b      	cmp	r3, r1
 800ca92:	bf04      	itt	eq
 800ca94:	6819      	ldreq	r1, [r3, #0]
 800ca96:	685b      	ldreq	r3, [r3, #4]
 800ca98:	6063      	str	r3, [r4, #4]
 800ca9a:	bf04      	itt	eq
 800ca9c:	1809      	addeq	r1, r1, r0
 800ca9e:	6021      	streq	r1, [r4, #0]
 800caa0:	6054      	str	r4, [r2, #4]
 800caa2:	e7ca      	b.n	800ca3a <_free_r+0x22>
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	20002374 	.word	0x20002374

0800caac <malloc>:
 800caac:	4b02      	ldr	r3, [pc, #8]	@ (800cab8 <malloc+0xc>)
 800caae:	4601      	mov	r1, r0
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	f000 b825 	b.w	800cb00 <_malloc_r>
 800cab6:	bf00      	nop
 800cab8:	20000130 	.word	0x20000130

0800cabc <sbrk_aligned>:
 800cabc:	b570      	push	{r4, r5, r6, lr}
 800cabe:	4e0f      	ldr	r6, [pc, #60]	@ (800cafc <sbrk_aligned+0x40>)
 800cac0:	460c      	mov	r4, r1
 800cac2:	6831      	ldr	r1, [r6, #0]
 800cac4:	4605      	mov	r5, r0
 800cac6:	b911      	cbnz	r1, 800cace <sbrk_aligned+0x12>
 800cac8:	f000 fec6 	bl	800d858 <_sbrk_r>
 800cacc:	6030      	str	r0, [r6, #0]
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f000 fec1 	bl	800d858 <_sbrk_r>
 800cad6:	1c43      	adds	r3, r0, #1
 800cad8:	d103      	bne.n	800cae2 <sbrk_aligned+0x26>
 800cada:	f04f 34ff 	mov.w	r4, #4294967295
 800cade:	4620      	mov	r0, r4
 800cae0:	bd70      	pop	{r4, r5, r6, pc}
 800cae2:	1cc4      	adds	r4, r0, #3
 800cae4:	f024 0403 	bic.w	r4, r4, #3
 800cae8:	42a0      	cmp	r0, r4
 800caea:	d0f8      	beq.n	800cade <sbrk_aligned+0x22>
 800caec:	1a21      	subs	r1, r4, r0
 800caee:	4628      	mov	r0, r5
 800caf0:	f000 feb2 	bl	800d858 <_sbrk_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d1f2      	bne.n	800cade <sbrk_aligned+0x22>
 800caf8:	e7ef      	b.n	800cada <sbrk_aligned+0x1e>
 800cafa:	bf00      	nop
 800cafc:	20002370 	.word	0x20002370

0800cb00 <_malloc_r>:
 800cb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb04:	1ccd      	adds	r5, r1, #3
 800cb06:	f025 0503 	bic.w	r5, r5, #3
 800cb0a:	3508      	adds	r5, #8
 800cb0c:	2d0c      	cmp	r5, #12
 800cb0e:	bf38      	it	cc
 800cb10:	250c      	movcc	r5, #12
 800cb12:	2d00      	cmp	r5, #0
 800cb14:	4606      	mov	r6, r0
 800cb16:	db01      	blt.n	800cb1c <_malloc_r+0x1c>
 800cb18:	42a9      	cmp	r1, r5
 800cb1a:	d904      	bls.n	800cb26 <_malloc_r+0x26>
 800cb1c:	230c      	movs	r3, #12
 800cb1e:	6033      	str	r3, [r6, #0]
 800cb20:	2000      	movs	r0, #0
 800cb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbfc <_malloc_r+0xfc>
 800cb2a:	f000 f869 	bl	800cc00 <__malloc_lock>
 800cb2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb32:	461c      	mov	r4, r3
 800cb34:	bb44      	cbnz	r4, 800cb88 <_malloc_r+0x88>
 800cb36:	4629      	mov	r1, r5
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ffbf 	bl	800cabc <sbrk_aligned>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	4604      	mov	r4, r0
 800cb42:	d158      	bne.n	800cbf6 <_malloc_r+0xf6>
 800cb44:	f8d8 4000 	ldr.w	r4, [r8]
 800cb48:	4627      	mov	r7, r4
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d143      	bne.n	800cbd6 <_malloc_r+0xd6>
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	d04b      	beq.n	800cbea <_malloc_r+0xea>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	4639      	mov	r1, r7
 800cb56:	4630      	mov	r0, r6
 800cb58:	eb04 0903 	add.w	r9, r4, r3
 800cb5c:	f000 fe7c 	bl	800d858 <_sbrk_r>
 800cb60:	4581      	cmp	r9, r0
 800cb62:	d142      	bne.n	800cbea <_malloc_r+0xea>
 800cb64:	6821      	ldr	r1, [r4, #0]
 800cb66:	1a6d      	subs	r5, r5, r1
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ffa6 	bl	800cabc <sbrk_aligned>
 800cb70:	3001      	adds	r0, #1
 800cb72:	d03a      	beq.n	800cbea <_malloc_r+0xea>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	442b      	add	r3, r5
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	bb62      	cbnz	r2, 800cbdc <_malloc_r+0xdc>
 800cb82:	f8c8 7000 	str.w	r7, [r8]
 800cb86:	e00f      	b.n	800cba8 <_malloc_r+0xa8>
 800cb88:	6822      	ldr	r2, [r4, #0]
 800cb8a:	1b52      	subs	r2, r2, r5
 800cb8c:	d420      	bmi.n	800cbd0 <_malloc_r+0xd0>
 800cb8e:	2a0b      	cmp	r2, #11
 800cb90:	d917      	bls.n	800cbc2 <_malloc_r+0xc2>
 800cb92:	1961      	adds	r1, r4, r5
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	6025      	str	r5, [r4, #0]
 800cb98:	bf18      	it	ne
 800cb9a:	6059      	strne	r1, [r3, #4]
 800cb9c:	6863      	ldr	r3, [r4, #4]
 800cb9e:	bf08      	it	eq
 800cba0:	f8c8 1000 	streq.w	r1, [r8]
 800cba4:	5162      	str	r2, [r4, r5]
 800cba6:	604b      	str	r3, [r1, #4]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 f82f 	bl	800cc0c <__malloc_unlock>
 800cbae:	f104 000b 	add.w	r0, r4, #11
 800cbb2:	1d23      	adds	r3, r4, #4
 800cbb4:	f020 0007 	bic.w	r0, r0, #7
 800cbb8:	1ac2      	subs	r2, r0, r3
 800cbba:	bf1c      	itt	ne
 800cbbc:	1a1b      	subne	r3, r3, r0
 800cbbe:	50a3      	strne	r3, [r4, r2]
 800cbc0:	e7af      	b.n	800cb22 <_malloc_r+0x22>
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	bf0c      	ite	eq
 800cbc8:	f8c8 2000 	streq.w	r2, [r8]
 800cbcc:	605a      	strne	r2, [r3, #4]
 800cbce:	e7eb      	b.n	800cba8 <_malloc_r+0xa8>
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	6864      	ldr	r4, [r4, #4]
 800cbd4:	e7ae      	b.n	800cb34 <_malloc_r+0x34>
 800cbd6:	463c      	mov	r4, r7
 800cbd8:	687f      	ldr	r7, [r7, #4]
 800cbda:	e7b6      	b.n	800cb4a <_malloc_r+0x4a>
 800cbdc:	461a      	mov	r2, r3
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	d1fb      	bne.n	800cbdc <_malloc_r+0xdc>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6053      	str	r3, [r2, #4]
 800cbe8:	e7de      	b.n	800cba8 <_malloc_r+0xa8>
 800cbea:	230c      	movs	r3, #12
 800cbec:	6033      	str	r3, [r6, #0]
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f000 f80c 	bl	800cc0c <__malloc_unlock>
 800cbf4:	e794      	b.n	800cb20 <_malloc_r+0x20>
 800cbf6:	6005      	str	r5, [r0, #0]
 800cbf8:	e7d6      	b.n	800cba8 <_malloc_r+0xa8>
 800cbfa:	bf00      	nop
 800cbfc:	20002374 	.word	0x20002374

0800cc00 <__malloc_lock>:
 800cc00:	4801      	ldr	r0, [pc, #4]	@ (800cc08 <__malloc_lock+0x8>)
 800cc02:	f7ff b8ac 	b.w	800bd5e <__retarget_lock_acquire_recursive>
 800cc06:	bf00      	nop
 800cc08:	2000236c 	.word	0x2000236c

0800cc0c <__malloc_unlock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	@ (800cc14 <__malloc_unlock+0x8>)
 800cc0e:	f7ff b8a7 	b.w	800bd60 <__retarget_lock_release_recursive>
 800cc12:	bf00      	nop
 800cc14:	2000236c 	.word	0x2000236c

0800cc18 <_Balloc>:
 800cc18:	b570      	push	{r4, r5, r6, lr}
 800cc1a:	69c6      	ldr	r6, [r0, #28]
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	b976      	cbnz	r6, 800cc40 <_Balloc+0x28>
 800cc22:	2010      	movs	r0, #16
 800cc24:	f7ff ff42 	bl	800caac <malloc>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	61e0      	str	r0, [r4, #28]
 800cc2c:	b920      	cbnz	r0, 800cc38 <_Balloc+0x20>
 800cc2e:	4b18      	ldr	r3, [pc, #96]	@ (800cc90 <_Balloc+0x78>)
 800cc30:	4818      	ldr	r0, [pc, #96]	@ (800cc94 <_Balloc+0x7c>)
 800cc32:	216b      	movs	r1, #107	@ 0x6b
 800cc34:	f000 fe2e 	bl	800d894 <__assert_func>
 800cc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc3c:	6006      	str	r6, [r0, #0]
 800cc3e:	60c6      	str	r6, [r0, #12]
 800cc40:	69e6      	ldr	r6, [r4, #28]
 800cc42:	68f3      	ldr	r3, [r6, #12]
 800cc44:	b183      	cbz	r3, 800cc68 <_Balloc+0x50>
 800cc46:	69e3      	ldr	r3, [r4, #28]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc4e:	b9b8      	cbnz	r0, 800cc80 <_Balloc+0x68>
 800cc50:	2101      	movs	r1, #1
 800cc52:	fa01 f605 	lsl.w	r6, r1, r5
 800cc56:	1d72      	adds	r2, r6, #5
 800cc58:	0092      	lsls	r2, r2, #2
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 fe38 	bl	800d8d0 <_calloc_r>
 800cc60:	b160      	cbz	r0, 800cc7c <_Balloc+0x64>
 800cc62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc66:	e00e      	b.n	800cc86 <_Balloc+0x6e>
 800cc68:	2221      	movs	r2, #33	@ 0x21
 800cc6a:	2104      	movs	r1, #4
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 fe2f 	bl	800d8d0 <_calloc_r>
 800cc72:	69e3      	ldr	r3, [r4, #28]
 800cc74:	60f0      	str	r0, [r6, #12]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1e4      	bne.n	800cc46 <_Balloc+0x2e>
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}
 800cc80:	6802      	ldr	r2, [r0, #0]
 800cc82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc86:	2300      	movs	r3, #0
 800cc88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc8c:	e7f7      	b.n	800cc7e <_Balloc+0x66>
 800cc8e:	bf00      	nop
 800cc90:	0800e675 	.word	0x0800e675
 800cc94:	0800e6f5 	.word	0x0800e6f5

0800cc98 <_Bfree>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	69c6      	ldr	r6, [r0, #28]
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	b976      	cbnz	r6, 800ccc0 <_Bfree+0x28>
 800cca2:	2010      	movs	r0, #16
 800cca4:	f7ff ff02 	bl	800caac <malloc>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	61e8      	str	r0, [r5, #28]
 800ccac:	b920      	cbnz	r0, 800ccb8 <_Bfree+0x20>
 800ccae:	4b09      	ldr	r3, [pc, #36]	@ (800ccd4 <_Bfree+0x3c>)
 800ccb0:	4809      	ldr	r0, [pc, #36]	@ (800ccd8 <_Bfree+0x40>)
 800ccb2:	218f      	movs	r1, #143	@ 0x8f
 800ccb4:	f000 fdee 	bl	800d894 <__assert_func>
 800ccb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccbc:	6006      	str	r6, [r0, #0]
 800ccbe:	60c6      	str	r6, [r0, #12]
 800ccc0:	b13c      	cbz	r4, 800ccd2 <_Bfree+0x3a>
 800ccc2:	69eb      	ldr	r3, [r5, #28]
 800ccc4:	6862      	ldr	r2, [r4, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cccc:	6021      	str	r1, [r4, #0]
 800ccce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}
 800ccd4:	0800e675 	.word	0x0800e675
 800ccd8:	0800e6f5 	.word	0x0800e6f5

0800ccdc <__multadd>:
 800ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	690d      	ldr	r5, [r1, #16]
 800cce2:	4607      	mov	r7, r0
 800cce4:	460c      	mov	r4, r1
 800cce6:	461e      	mov	r6, r3
 800cce8:	f101 0c14 	add.w	ip, r1, #20
 800ccec:	2000      	movs	r0, #0
 800ccee:	f8dc 3000 	ldr.w	r3, [ip]
 800ccf2:	b299      	uxth	r1, r3
 800ccf4:	fb02 6101 	mla	r1, r2, r1, r6
 800ccf8:	0c1e      	lsrs	r6, r3, #16
 800ccfa:	0c0b      	lsrs	r3, r1, #16
 800ccfc:	fb02 3306 	mla	r3, r2, r6, r3
 800cd00:	b289      	uxth	r1, r1
 800cd02:	3001      	adds	r0, #1
 800cd04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd08:	4285      	cmp	r5, r0
 800cd0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd12:	dcec      	bgt.n	800ccee <__multadd+0x12>
 800cd14:	b30e      	cbz	r6, 800cd5a <__multadd+0x7e>
 800cd16:	68a3      	ldr	r3, [r4, #8]
 800cd18:	42ab      	cmp	r3, r5
 800cd1a:	dc19      	bgt.n	800cd50 <__multadd+0x74>
 800cd1c:	6861      	ldr	r1, [r4, #4]
 800cd1e:	4638      	mov	r0, r7
 800cd20:	3101      	adds	r1, #1
 800cd22:	f7ff ff79 	bl	800cc18 <_Balloc>
 800cd26:	4680      	mov	r8, r0
 800cd28:	b928      	cbnz	r0, 800cd36 <__multadd+0x5a>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd60 <__multadd+0x84>)
 800cd2e:	480d      	ldr	r0, [pc, #52]	@ (800cd64 <__multadd+0x88>)
 800cd30:	21ba      	movs	r1, #186	@ 0xba
 800cd32:	f000 fdaf 	bl	800d894 <__assert_func>
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	3202      	adds	r2, #2
 800cd3a:	f104 010c 	add.w	r1, r4, #12
 800cd3e:	0092      	lsls	r2, r2, #2
 800cd40:	300c      	adds	r0, #12
 800cd42:	f000 fd99 	bl	800d878 <memcpy>
 800cd46:	4621      	mov	r1, r4
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f7ff ffa5 	bl	800cc98 <_Bfree>
 800cd4e:	4644      	mov	r4, r8
 800cd50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd54:	3501      	adds	r5, #1
 800cd56:	615e      	str	r6, [r3, #20]
 800cd58:	6125      	str	r5, [r4, #16]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd60:	0800e6e4 	.word	0x0800e6e4
 800cd64:	0800e6f5 	.word	0x0800e6f5

0800cd68 <__hi0bits>:
 800cd68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	bf36      	itet	cc
 800cd70:	0403      	lslcc	r3, r0, #16
 800cd72:	2000      	movcs	r0, #0
 800cd74:	2010      	movcc	r0, #16
 800cd76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd7a:	bf3c      	itt	cc
 800cd7c:	021b      	lslcc	r3, r3, #8
 800cd7e:	3008      	addcc	r0, #8
 800cd80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd84:	bf3c      	itt	cc
 800cd86:	011b      	lslcc	r3, r3, #4
 800cd88:	3004      	addcc	r0, #4
 800cd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd8e:	bf3c      	itt	cc
 800cd90:	009b      	lslcc	r3, r3, #2
 800cd92:	3002      	addcc	r0, #2
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	db05      	blt.n	800cda4 <__hi0bits+0x3c>
 800cd98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd9c:	f100 0001 	add.w	r0, r0, #1
 800cda0:	bf08      	it	eq
 800cda2:	2020      	moveq	r0, #32
 800cda4:	4770      	bx	lr

0800cda6 <__lo0bits>:
 800cda6:	6803      	ldr	r3, [r0, #0]
 800cda8:	4602      	mov	r2, r0
 800cdaa:	f013 0007 	ands.w	r0, r3, #7
 800cdae:	d00b      	beq.n	800cdc8 <__lo0bits+0x22>
 800cdb0:	07d9      	lsls	r1, r3, #31
 800cdb2:	d421      	bmi.n	800cdf8 <__lo0bits+0x52>
 800cdb4:	0798      	lsls	r0, r3, #30
 800cdb6:	bf49      	itett	mi
 800cdb8:	085b      	lsrmi	r3, r3, #1
 800cdba:	089b      	lsrpl	r3, r3, #2
 800cdbc:	2001      	movmi	r0, #1
 800cdbe:	6013      	strmi	r3, [r2, #0]
 800cdc0:	bf5c      	itt	pl
 800cdc2:	6013      	strpl	r3, [r2, #0]
 800cdc4:	2002      	movpl	r0, #2
 800cdc6:	4770      	bx	lr
 800cdc8:	b299      	uxth	r1, r3
 800cdca:	b909      	cbnz	r1, 800cdd0 <__lo0bits+0x2a>
 800cdcc:	0c1b      	lsrs	r3, r3, #16
 800cdce:	2010      	movs	r0, #16
 800cdd0:	b2d9      	uxtb	r1, r3
 800cdd2:	b909      	cbnz	r1, 800cdd8 <__lo0bits+0x32>
 800cdd4:	3008      	adds	r0, #8
 800cdd6:	0a1b      	lsrs	r3, r3, #8
 800cdd8:	0719      	lsls	r1, r3, #28
 800cdda:	bf04      	itt	eq
 800cddc:	091b      	lsreq	r3, r3, #4
 800cdde:	3004      	addeq	r0, #4
 800cde0:	0799      	lsls	r1, r3, #30
 800cde2:	bf04      	itt	eq
 800cde4:	089b      	lsreq	r3, r3, #2
 800cde6:	3002      	addeq	r0, #2
 800cde8:	07d9      	lsls	r1, r3, #31
 800cdea:	d403      	bmi.n	800cdf4 <__lo0bits+0x4e>
 800cdec:	085b      	lsrs	r3, r3, #1
 800cdee:	f100 0001 	add.w	r0, r0, #1
 800cdf2:	d003      	beq.n	800cdfc <__lo0bits+0x56>
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	4770      	bx	lr
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	4770      	bx	lr
 800cdfc:	2020      	movs	r0, #32
 800cdfe:	4770      	bx	lr

0800ce00 <__i2b>:
 800ce00:	b510      	push	{r4, lr}
 800ce02:	460c      	mov	r4, r1
 800ce04:	2101      	movs	r1, #1
 800ce06:	f7ff ff07 	bl	800cc18 <_Balloc>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	b928      	cbnz	r0, 800ce1a <__i2b+0x1a>
 800ce0e:	4b05      	ldr	r3, [pc, #20]	@ (800ce24 <__i2b+0x24>)
 800ce10:	4805      	ldr	r0, [pc, #20]	@ (800ce28 <__i2b+0x28>)
 800ce12:	f240 1145 	movw	r1, #325	@ 0x145
 800ce16:	f000 fd3d 	bl	800d894 <__assert_func>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	6144      	str	r4, [r0, #20]
 800ce1e:	6103      	str	r3, [r0, #16]
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	bf00      	nop
 800ce24:	0800e6e4 	.word	0x0800e6e4
 800ce28:	0800e6f5 	.word	0x0800e6f5

0800ce2c <__multiply>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	4617      	mov	r7, r2
 800ce32:	690a      	ldr	r2, [r1, #16]
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	bfa8      	it	ge
 800ce3a:	463b      	movge	r3, r7
 800ce3c:	4689      	mov	r9, r1
 800ce3e:	bfa4      	itt	ge
 800ce40:	460f      	movge	r7, r1
 800ce42:	4699      	movge	r9, r3
 800ce44:	693d      	ldr	r5, [r7, #16]
 800ce46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	eb05 060a 	add.w	r6, r5, sl
 800ce52:	42b3      	cmp	r3, r6
 800ce54:	b085      	sub	sp, #20
 800ce56:	bfb8      	it	lt
 800ce58:	3101      	addlt	r1, #1
 800ce5a:	f7ff fedd 	bl	800cc18 <_Balloc>
 800ce5e:	b930      	cbnz	r0, 800ce6e <__multiply+0x42>
 800ce60:	4602      	mov	r2, r0
 800ce62:	4b41      	ldr	r3, [pc, #260]	@ (800cf68 <__multiply+0x13c>)
 800ce64:	4841      	ldr	r0, [pc, #260]	@ (800cf6c <__multiply+0x140>)
 800ce66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce6a:	f000 fd13 	bl	800d894 <__assert_func>
 800ce6e:	f100 0414 	add.w	r4, r0, #20
 800ce72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce76:	4623      	mov	r3, r4
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4573      	cmp	r3, lr
 800ce7c:	d320      	bcc.n	800cec0 <__multiply+0x94>
 800ce7e:	f107 0814 	add.w	r8, r7, #20
 800ce82:	f109 0114 	add.w	r1, r9, #20
 800ce86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	1beb      	subs	r3, r5, r7
 800ce92:	3b15      	subs	r3, #21
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3304      	adds	r3, #4
 800ce9a:	3715      	adds	r7, #21
 800ce9c:	42bd      	cmp	r5, r7
 800ce9e:	bf38      	it	cc
 800cea0:	2304      	movcc	r3, #4
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	9b02      	ldr	r3, [sp, #8]
 800cea6:	9103      	str	r1, [sp, #12]
 800cea8:	428b      	cmp	r3, r1
 800ceaa:	d80c      	bhi.n	800cec6 <__multiply+0x9a>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	dd03      	ble.n	800ceb8 <__multiply+0x8c>
 800ceb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d055      	beq.n	800cf64 <__multiply+0x138>
 800ceb8:	6106      	str	r6, [r0, #16]
 800ceba:	b005      	add	sp, #20
 800cebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	f843 2b04 	str.w	r2, [r3], #4
 800cec4:	e7d9      	b.n	800ce7a <__multiply+0x4e>
 800cec6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ceca:	f1ba 0f00 	cmp.w	sl, #0
 800cece:	d01f      	beq.n	800cf10 <__multiply+0xe4>
 800ced0:	46c4      	mov	ip, r8
 800ced2:	46a1      	mov	r9, r4
 800ced4:	2700      	movs	r7, #0
 800ced6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ceda:	f8d9 3000 	ldr.w	r3, [r9]
 800cede:	fa1f fb82 	uxth.w	fp, r2
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cee8:	443b      	add	r3, r7
 800ceea:	f8d9 7000 	ldr.w	r7, [r9]
 800ceee:	0c12      	lsrs	r2, r2, #16
 800cef0:	0c3f      	lsrs	r7, r7, #16
 800cef2:	fb0a 7202 	mla	r2, sl, r2, r7
 800cef6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf00:	4565      	cmp	r5, ip
 800cf02:	f849 3b04 	str.w	r3, [r9], #4
 800cf06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cf0a:	d8e4      	bhi.n	800ced6 <__multiply+0xaa>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	50e7      	str	r7, [r4, r3]
 800cf10:	9b03      	ldr	r3, [sp, #12]
 800cf12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf16:	3104      	adds	r1, #4
 800cf18:	f1b9 0f00 	cmp.w	r9, #0
 800cf1c:	d020      	beq.n	800cf60 <__multiply+0x134>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	4647      	mov	r7, r8
 800cf22:	46a4      	mov	ip, r4
 800cf24:	f04f 0a00 	mov.w	sl, #0
 800cf28:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf30:	fb09 220b 	mla	r2, r9, fp, r2
 800cf34:	4452      	add	r2, sl
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf3c:	f84c 3b04 	str.w	r3, [ip], #4
 800cf40:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf48:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf4c:	fb09 330a 	mla	r3, r9, sl, r3
 800cf50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf54:	42bd      	cmp	r5, r7
 800cf56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf5a:	d8e5      	bhi.n	800cf28 <__multiply+0xfc>
 800cf5c:	9a01      	ldr	r2, [sp, #4]
 800cf5e:	50a3      	str	r3, [r4, r2]
 800cf60:	3404      	adds	r4, #4
 800cf62:	e79f      	b.n	800cea4 <__multiply+0x78>
 800cf64:	3e01      	subs	r6, #1
 800cf66:	e7a1      	b.n	800ceac <__multiply+0x80>
 800cf68:	0800e6e4 	.word	0x0800e6e4
 800cf6c:	0800e6f5 	.word	0x0800e6f5

0800cf70 <__pow5mult>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	4615      	mov	r5, r2
 800cf76:	f012 0203 	ands.w	r2, r2, #3
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	d007      	beq.n	800cf90 <__pow5mult+0x20>
 800cf80:	4c25      	ldr	r4, [pc, #148]	@ (800d018 <__pow5mult+0xa8>)
 800cf82:	3a01      	subs	r2, #1
 800cf84:	2300      	movs	r3, #0
 800cf86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf8a:	f7ff fea7 	bl	800ccdc <__multadd>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	10ad      	asrs	r5, r5, #2
 800cf92:	d03d      	beq.n	800d010 <__pow5mult+0xa0>
 800cf94:	69fc      	ldr	r4, [r7, #28]
 800cf96:	b97c      	cbnz	r4, 800cfb8 <__pow5mult+0x48>
 800cf98:	2010      	movs	r0, #16
 800cf9a:	f7ff fd87 	bl	800caac <malloc>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	61f8      	str	r0, [r7, #28]
 800cfa2:	b928      	cbnz	r0, 800cfb0 <__pow5mult+0x40>
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <__pow5mult+0xac>)
 800cfa6:	481e      	ldr	r0, [pc, #120]	@ (800d020 <__pow5mult+0xb0>)
 800cfa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfac:	f000 fc72 	bl	800d894 <__assert_func>
 800cfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfb4:	6004      	str	r4, [r0, #0]
 800cfb6:	60c4      	str	r4, [r0, #12]
 800cfb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfc0:	b94c      	cbnz	r4, 800cfd6 <__pow5mult+0x66>
 800cfc2:	f240 2171 	movw	r1, #625	@ 0x271
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff ff1a 	bl	800ce00 <__i2b>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	f04f 0900 	mov.w	r9, #0
 800cfda:	07eb      	lsls	r3, r5, #31
 800cfdc:	d50a      	bpl.n	800cff4 <__pow5mult+0x84>
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7ff ff22 	bl	800ce2c <__multiply>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4680      	mov	r8, r0
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff fe53 	bl	800cc98 <_Bfree>
 800cff2:	4646      	mov	r6, r8
 800cff4:	106d      	asrs	r5, r5, #1
 800cff6:	d00b      	beq.n	800d010 <__pow5mult+0xa0>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	b938      	cbnz	r0, 800d00c <__pow5mult+0x9c>
 800cffc:	4622      	mov	r2, r4
 800cffe:	4621      	mov	r1, r4
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ff13 	bl	800ce2c <__multiply>
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	f8c0 9000 	str.w	r9, [r0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	e7e4      	b.n	800cfda <__pow5mult+0x6a>
 800d010:	4630      	mov	r0, r6
 800d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d016:	bf00      	nop
 800d018:	0800e7a8 	.word	0x0800e7a8
 800d01c:	0800e675 	.word	0x0800e675
 800d020:	0800e6f5 	.word	0x0800e6f5

0800d024 <__lshift>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	4607      	mov	r7, r0
 800d036:	4691      	mov	r9, r2
 800d038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d03c:	f108 0601 	add.w	r6, r8, #1
 800d040:	42b3      	cmp	r3, r6
 800d042:	db0b      	blt.n	800d05c <__lshift+0x38>
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff fde7 	bl	800cc18 <_Balloc>
 800d04a:	4605      	mov	r5, r0
 800d04c:	b948      	cbnz	r0, 800d062 <__lshift+0x3e>
 800d04e:	4602      	mov	r2, r0
 800d050:	4b28      	ldr	r3, [pc, #160]	@ (800d0f4 <__lshift+0xd0>)
 800d052:	4829      	ldr	r0, [pc, #164]	@ (800d0f8 <__lshift+0xd4>)
 800d054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d058:	f000 fc1c 	bl	800d894 <__assert_func>
 800d05c:	3101      	adds	r1, #1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	e7ee      	b.n	800d040 <__lshift+0x1c>
 800d062:	2300      	movs	r3, #0
 800d064:	f100 0114 	add.w	r1, r0, #20
 800d068:	f100 0210 	add.w	r2, r0, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	4553      	cmp	r3, sl
 800d070:	db33      	blt.n	800d0da <__lshift+0xb6>
 800d072:	6920      	ldr	r0, [r4, #16]
 800d074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d078:	f104 0314 	add.w	r3, r4, #20
 800d07c:	f019 091f 	ands.w	r9, r9, #31
 800d080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d088:	d02b      	beq.n	800d0e2 <__lshift+0xbe>
 800d08a:	f1c9 0e20 	rsb	lr, r9, #32
 800d08e:	468a      	mov	sl, r1
 800d090:	2200      	movs	r2, #0
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	fa00 f009 	lsl.w	r0, r0, r9
 800d098:	4310      	orrs	r0, r2
 800d09a:	f84a 0b04 	str.w	r0, [sl], #4
 800d09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a2:	459c      	cmp	ip, r3
 800d0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0a8:	d8f3      	bhi.n	800d092 <__lshift+0x6e>
 800d0aa:	ebac 0304 	sub.w	r3, ip, r4
 800d0ae:	3b15      	subs	r3, #21
 800d0b0:	f023 0303 	bic.w	r3, r3, #3
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	f104 0015 	add.w	r0, r4, #21
 800d0ba:	4560      	cmp	r0, ip
 800d0bc:	bf88      	it	hi
 800d0be:	2304      	movhi	r3, #4
 800d0c0:	50ca      	str	r2, [r1, r3]
 800d0c2:	b10a      	cbz	r2, 800d0c8 <__lshift+0xa4>
 800d0c4:	f108 0602 	add.w	r6, r8, #2
 800d0c8:	3e01      	subs	r6, #1
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	612e      	str	r6, [r5, #16]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f7ff fde2 	bl	800cc98 <_Bfree>
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0de:	3301      	adds	r3, #1
 800d0e0:	e7c5      	b.n	800d06e <__lshift+0x4a>
 800d0e2:	3904      	subs	r1, #4
 800d0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0ec:	459c      	cmp	ip, r3
 800d0ee:	d8f9      	bhi.n	800d0e4 <__lshift+0xc0>
 800d0f0:	e7ea      	b.n	800d0c8 <__lshift+0xa4>
 800d0f2:	bf00      	nop
 800d0f4:	0800e6e4 	.word	0x0800e6e4
 800d0f8:	0800e6f5 	.word	0x0800e6f5

0800d0fc <__mcmp>:
 800d0fc:	690a      	ldr	r2, [r1, #16]
 800d0fe:	4603      	mov	r3, r0
 800d100:	6900      	ldr	r0, [r0, #16]
 800d102:	1a80      	subs	r0, r0, r2
 800d104:	b530      	push	{r4, r5, lr}
 800d106:	d10e      	bne.n	800d126 <__mcmp+0x2a>
 800d108:	3314      	adds	r3, #20
 800d10a:	3114      	adds	r1, #20
 800d10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d11c:	4295      	cmp	r5, r2
 800d11e:	d003      	beq.n	800d128 <__mcmp+0x2c>
 800d120:	d205      	bcs.n	800d12e <__mcmp+0x32>
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	bd30      	pop	{r4, r5, pc}
 800d128:	42a3      	cmp	r3, r4
 800d12a:	d3f3      	bcc.n	800d114 <__mcmp+0x18>
 800d12c:	e7fb      	b.n	800d126 <__mcmp+0x2a>
 800d12e:	2001      	movs	r0, #1
 800d130:	e7f9      	b.n	800d126 <__mcmp+0x2a>
	...

0800d134 <__mdiff>:
 800d134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	4689      	mov	r9, r1
 800d13a:	4606      	mov	r6, r0
 800d13c:	4611      	mov	r1, r2
 800d13e:	4648      	mov	r0, r9
 800d140:	4614      	mov	r4, r2
 800d142:	f7ff ffdb 	bl	800d0fc <__mcmp>
 800d146:	1e05      	subs	r5, r0, #0
 800d148:	d112      	bne.n	800d170 <__mdiff+0x3c>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff fd63 	bl	800cc18 <_Balloc>
 800d152:	4602      	mov	r2, r0
 800d154:	b928      	cbnz	r0, 800d162 <__mdiff+0x2e>
 800d156:	4b3f      	ldr	r3, [pc, #252]	@ (800d254 <__mdiff+0x120>)
 800d158:	f240 2137 	movw	r1, #567	@ 0x237
 800d15c:	483e      	ldr	r0, [pc, #248]	@ (800d258 <__mdiff+0x124>)
 800d15e:	f000 fb99 	bl	800d894 <__assert_func>
 800d162:	2301      	movs	r3, #1
 800d164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d168:	4610      	mov	r0, r2
 800d16a:	b003      	add	sp, #12
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	bfbc      	itt	lt
 800d172:	464b      	movlt	r3, r9
 800d174:	46a1      	movlt	r9, r4
 800d176:	4630      	mov	r0, r6
 800d178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d17c:	bfba      	itte	lt
 800d17e:	461c      	movlt	r4, r3
 800d180:	2501      	movlt	r5, #1
 800d182:	2500      	movge	r5, #0
 800d184:	f7ff fd48 	bl	800cc18 <_Balloc>
 800d188:	4602      	mov	r2, r0
 800d18a:	b918      	cbnz	r0, 800d194 <__mdiff+0x60>
 800d18c:	4b31      	ldr	r3, [pc, #196]	@ (800d254 <__mdiff+0x120>)
 800d18e:	f240 2145 	movw	r1, #581	@ 0x245
 800d192:	e7e3      	b.n	800d15c <__mdiff+0x28>
 800d194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d198:	6926      	ldr	r6, [r4, #16]
 800d19a:	60c5      	str	r5, [r0, #12]
 800d19c:	f109 0310 	add.w	r3, r9, #16
 800d1a0:	f109 0514 	add.w	r5, r9, #20
 800d1a4:	f104 0e14 	add.w	lr, r4, #20
 800d1a8:	f100 0b14 	add.w	fp, r0, #20
 800d1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	46d9      	mov	r9, fp
 800d1b8:	f04f 0c00 	mov.w	ip, #0
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	fa1f f38a 	uxth.w	r3, sl
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	b283      	uxth	r3, r0
 800d1d0:	1acb      	subs	r3, r1, r3
 800d1d2:	0c00      	lsrs	r0, r0, #16
 800d1d4:	4463      	add	r3, ip
 800d1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1e4:	4576      	cmp	r6, lr
 800d1e6:	f849 3b04 	str.w	r3, [r9], #4
 800d1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ee:	d8e5      	bhi.n	800d1bc <__mdiff+0x88>
 800d1f0:	1b33      	subs	r3, r6, r4
 800d1f2:	3b15      	subs	r3, #21
 800d1f4:	f023 0303 	bic.w	r3, r3, #3
 800d1f8:	3415      	adds	r4, #21
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	bf38      	it	cc
 800d200:	2304      	movcc	r3, #4
 800d202:	441d      	add	r5, r3
 800d204:	445b      	add	r3, fp
 800d206:	461e      	mov	r6, r3
 800d208:	462c      	mov	r4, r5
 800d20a:	4544      	cmp	r4, r8
 800d20c:	d30e      	bcc.n	800d22c <__mdiff+0xf8>
 800d20e:	f108 0103 	add.w	r1, r8, #3
 800d212:	1b49      	subs	r1, r1, r5
 800d214:	f021 0103 	bic.w	r1, r1, #3
 800d218:	3d03      	subs	r5, #3
 800d21a:	45a8      	cmp	r8, r5
 800d21c:	bf38      	it	cc
 800d21e:	2100      	movcc	r1, #0
 800d220:	440b      	add	r3, r1
 800d222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d226:	b191      	cbz	r1, 800d24e <__mdiff+0x11a>
 800d228:	6117      	str	r7, [r2, #16]
 800d22a:	e79d      	b.n	800d168 <__mdiff+0x34>
 800d22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d230:	46e6      	mov	lr, ip
 800d232:	0c08      	lsrs	r0, r1, #16
 800d234:	fa1c fc81 	uxtah	ip, ip, r1
 800d238:	4471      	add	r1, lr
 800d23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d23e:	b289      	uxth	r1, r1
 800d240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d244:	f846 1b04 	str.w	r1, [r6], #4
 800d248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d24c:	e7dd      	b.n	800d20a <__mdiff+0xd6>
 800d24e:	3f01      	subs	r7, #1
 800d250:	e7e7      	b.n	800d222 <__mdiff+0xee>
 800d252:	bf00      	nop
 800d254:	0800e6e4 	.word	0x0800e6e4
 800d258:	0800e6f5 	.word	0x0800e6f5

0800d25c <__d2b>:
 800d25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d260:	460f      	mov	r7, r1
 800d262:	2101      	movs	r1, #1
 800d264:	ec59 8b10 	vmov	r8, r9, d0
 800d268:	4616      	mov	r6, r2
 800d26a:	f7ff fcd5 	bl	800cc18 <_Balloc>
 800d26e:	4604      	mov	r4, r0
 800d270:	b930      	cbnz	r0, 800d280 <__d2b+0x24>
 800d272:	4602      	mov	r2, r0
 800d274:	4b23      	ldr	r3, [pc, #140]	@ (800d304 <__d2b+0xa8>)
 800d276:	4824      	ldr	r0, [pc, #144]	@ (800d308 <__d2b+0xac>)
 800d278:	f240 310f 	movw	r1, #783	@ 0x30f
 800d27c:	f000 fb0a 	bl	800d894 <__assert_func>
 800d280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d288:	b10d      	cbz	r5, 800d28e <__d2b+0x32>
 800d28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	f1b8 0300 	subs.w	r3, r8, #0
 800d294:	d023      	beq.n	800d2de <__d2b+0x82>
 800d296:	4668      	mov	r0, sp
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	f7ff fd84 	bl	800cda6 <__lo0bits>
 800d29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2a2:	b1d0      	cbz	r0, 800d2da <__d2b+0x7e>
 800d2a4:	f1c0 0320 	rsb	r3, r0, #32
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	430b      	orrs	r3, r1
 800d2ae:	40c2      	lsrs	r2, r0
 800d2b0:	6163      	str	r3, [r4, #20]
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	61a3      	str	r3, [r4, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bf0c      	ite	eq
 800d2bc:	2201      	moveq	r2, #1
 800d2be:	2202      	movne	r2, #2
 800d2c0:	6122      	str	r2, [r4, #16]
 800d2c2:	b1a5      	cbz	r5, 800d2ee <__d2b+0x92>
 800d2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2c8:	4405      	add	r5, r0
 800d2ca:	603d      	str	r5, [r7, #0]
 800d2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2d0:	6030      	str	r0, [r6, #0]
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	b003      	add	sp, #12
 800d2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2da:	6161      	str	r1, [r4, #20]
 800d2dc:	e7ea      	b.n	800d2b4 <__d2b+0x58>
 800d2de:	a801      	add	r0, sp, #4
 800d2e0:	f7ff fd61 	bl	800cda6 <__lo0bits>
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	6163      	str	r3, [r4, #20]
 800d2e8:	3020      	adds	r0, #32
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	e7e8      	b.n	800d2c0 <__d2b+0x64>
 800d2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2f6:	6038      	str	r0, [r7, #0]
 800d2f8:	6918      	ldr	r0, [r3, #16]
 800d2fa:	f7ff fd35 	bl	800cd68 <__hi0bits>
 800d2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d302:	e7e5      	b.n	800d2d0 <__d2b+0x74>
 800d304:	0800e6e4 	.word	0x0800e6e4
 800d308:	0800e6f5 	.word	0x0800e6f5

0800d30c <__sfputc_r>:
 800d30c:	6893      	ldr	r3, [r2, #8]
 800d30e:	3b01      	subs	r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	b410      	push	{r4}
 800d314:	6093      	str	r3, [r2, #8]
 800d316:	da08      	bge.n	800d32a <__sfputc_r+0x1e>
 800d318:	6994      	ldr	r4, [r2, #24]
 800d31a:	42a3      	cmp	r3, r4
 800d31c:	db01      	blt.n	800d322 <__sfputc_r+0x16>
 800d31e:	290a      	cmp	r1, #10
 800d320:	d103      	bne.n	800d32a <__sfputc_r+0x1e>
 800d322:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d326:	f7fe bc08 	b.w	800bb3a <__swbuf_r>
 800d32a:	6813      	ldr	r3, [r2, #0]
 800d32c:	1c58      	adds	r0, r3, #1
 800d32e:	6010      	str	r0, [r2, #0]
 800d330:	7019      	strb	r1, [r3, #0]
 800d332:	4608      	mov	r0, r1
 800d334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <__sfputs_r>:
 800d33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	4614      	mov	r4, r2
 800d342:	18d5      	adds	r5, r2, r3
 800d344:	42ac      	cmp	r4, r5
 800d346:	d101      	bne.n	800d34c <__sfputs_r+0x12>
 800d348:	2000      	movs	r0, #0
 800d34a:	e007      	b.n	800d35c <__sfputs_r+0x22>
 800d34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d350:	463a      	mov	r2, r7
 800d352:	4630      	mov	r0, r6
 800d354:	f7ff ffda 	bl	800d30c <__sfputc_r>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	d1f3      	bne.n	800d344 <__sfputs_r+0xa>
 800d35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d360 <_vfiprintf_r>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	460d      	mov	r5, r1
 800d366:	b09d      	sub	sp, #116	@ 0x74
 800d368:	4614      	mov	r4, r2
 800d36a:	4698      	mov	r8, r3
 800d36c:	4606      	mov	r6, r0
 800d36e:	b118      	cbz	r0, 800d378 <_vfiprintf_r+0x18>
 800d370:	6a03      	ldr	r3, [r0, #32]
 800d372:	b90b      	cbnz	r3, 800d378 <_vfiprintf_r+0x18>
 800d374:	f7fe faf0 	bl	800b958 <__sinit>
 800d378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d37a:	07d9      	lsls	r1, r3, #31
 800d37c:	d405      	bmi.n	800d38a <_vfiprintf_r+0x2a>
 800d37e:	89ab      	ldrh	r3, [r5, #12]
 800d380:	059a      	lsls	r2, r3, #22
 800d382:	d402      	bmi.n	800d38a <_vfiprintf_r+0x2a>
 800d384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d386:	f7fe fcea 	bl	800bd5e <__retarget_lock_acquire_recursive>
 800d38a:	89ab      	ldrh	r3, [r5, #12]
 800d38c:	071b      	lsls	r3, r3, #28
 800d38e:	d501      	bpl.n	800d394 <_vfiprintf_r+0x34>
 800d390:	692b      	ldr	r3, [r5, #16]
 800d392:	b99b      	cbnz	r3, 800d3bc <_vfiprintf_r+0x5c>
 800d394:	4629      	mov	r1, r5
 800d396:	4630      	mov	r0, r6
 800d398:	f7fe fc0e 	bl	800bbb8 <__swsetup_r>
 800d39c:	b170      	cbz	r0, 800d3bc <_vfiprintf_r+0x5c>
 800d39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3a0:	07dc      	lsls	r4, r3, #31
 800d3a2:	d504      	bpl.n	800d3ae <_vfiprintf_r+0x4e>
 800d3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a8:	b01d      	add	sp, #116	@ 0x74
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	89ab      	ldrh	r3, [r5, #12]
 800d3b0:	0598      	lsls	r0, r3, #22
 800d3b2:	d4f7      	bmi.n	800d3a4 <_vfiprintf_r+0x44>
 800d3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3b6:	f7fe fcd3 	bl	800bd60 <__retarget_lock_release_recursive>
 800d3ba:	e7f3      	b.n	800d3a4 <_vfiprintf_r+0x44>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c0:	2320      	movs	r3, #32
 800d3c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ca:	2330      	movs	r3, #48	@ 0x30
 800d3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d57c <_vfiprintf_r+0x21c>
 800d3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3d4:	f04f 0901 	mov.w	r9, #1
 800d3d8:	4623      	mov	r3, r4
 800d3da:	469a      	mov	sl, r3
 800d3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e0:	b10a      	cbz	r2, 800d3e6 <_vfiprintf_r+0x86>
 800d3e2:	2a25      	cmp	r2, #37	@ 0x25
 800d3e4:	d1f9      	bne.n	800d3da <_vfiprintf_r+0x7a>
 800d3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ea:	d00b      	beq.n	800d404 <_vfiprintf_r+0xa4>
 800d3ec:	465b      	mov	r3, fp
 800d3ee:	4622      	mov	r2, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7ff ffa1 	bl	800d33a <__sfputs_r>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	f000 80a7 	beq.w	800d54c <_vfiprintf_r+0x1ec>
 800d3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d400:	445a      	add	r2, fp
 800d402:	9209      	str	r2, [sp, #36]	@ 0x24
 800d404:	f89a 3000 	ldrb.w	r3, [sl]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 809f 	beq.w	800d54c <_vfiprintf_r+0x1ec>
 800d40e:	2300      	movs	r3, #0
 800d410:	f04f 32ff 	mov.w	r2, #4294967295
 800d414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d418:	f10a 0a01 	add.w	sl, sl, #1
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	9307      	str	r3, [sp, #28]
 800d420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d424:	931a      	str	r3, [sp, #104]	@ 0x68
 800d426:	4654      	mov	r4, sl
 800d428:	2205      	movs	r2, #5
 800d42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42e:	4853      	ldr	r0, [pc, #332]	@ (800d57c <_vfiprintf_r+0x21c>)
 800d430:	f7f2 fece 	bl	80001d0 <memchr>
 800d434:	9a04      	ldr	r2, [sp, #16]
 800d436:	b9d8      	cbnz	r0, 800d470 <_vfiprintf_r+0x110>
 800d438:	06d1      	lsls	r1, r2, #27
 800d43a:	bf44      	itt	mi
 800d43c:	2320      	movmi	r3, #32
 800d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d442:	0713      	lsls	r3, r2, #28
 800d444:	bf44      	itt	mi
 800d446:	232b      	movmi	r3, #43	@ 0x2b
 800d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d44c:	f89a 3000 	ldrb.w	r3, [sl]
 800d450:	2b2a      	cmp	r3, #42	@ 0x2a
 800d452:	d015      	beq.n	800d480 <_vfiprintf_r+0x120>
 800d454:	9a07      	ldr	r2, [sp, #28]
 800d456:	4654      	mov	r4, sl
 800d458:	2000      	movs	r0, #0
 800d45a:	f04f 0c0a 	mov.w	ip, #10
 800d45e:	4621      	mov	r1, r4
 800d460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d464:	3b30      	subs	r3, #48	@ 0x30
 800d466:	2b09      	cmp	r3, #9
 800d468:	d94b      	bls.n	800d502 <_vfiprintf_r+0x1a2>
 800d46a:	b1b0      	cbz	r0, 800d49a <_vfiprintf_r+0x13a>
 800d46c:	9207      	str	r2, [sp, #28]
 800d46e:	e014      	b.n	800d49a <_vfiprintf_r+0x13a>
 800d470:	eba0 0308 	sub.w	r3, r0, r8
 800d474:	fa09 f303 	lsl.w	r3, r9, r3
 800d478:	4313      	orrs	r3, r2
 800d47a:	9304      	str	r3, [sp, #16]
 800d47c:	46a2      	mov	sl, r4
 800d47e:	e7d2      	b.n	800d426 <_vfiprintf_r+0xc6>
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	1d19      	adds	r1, r3, #4
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	9103      	str	r1, [sp, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	bfbb      	ittet	lt
 800d48c:	425b      	neglt	r3, r3
 800d48e:	f042 0202 	orrlt.w	r2, r2, #2
 800d492:	9307      	strge	r3, [sp, #28]
 800d494:	9307      	strlt	r3, [sp, #28]
 800d496:	bfb8      	it	lt
 800d498:	9204      	strlt	r2, [sp, #16]
 800d49a:	7823      	ldrb	r3, [r4, #0]
 800d49c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d49e:	d10a      	bne.n	800d4b6 <_vfiprintf_r+0x156>
 800d4a0:	7863      	ldrb	r3, [r4, #1]
 800d4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4a4:	d132      	bne.n	800d50c <_vfiprintf_r+0x1ac>
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	1d1a      	adds	r2, r3, #4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	9203      	str	r2, [sp, #12]
 800d4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4b2:	3402      	adds	r4, #2
 800d4b4:	9305      	str	r3, [sp, #20]
 800d4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d58c <_vfiprintf_r+0x22c>
 800d4ba:	7821      	ldrb	r1, [r4, #0]
 800d4bc:	2203      	movs	r2, #3
 800d4be:	4650      	mov	r0, sl
 800d4c0:	f7f2 fe86 	bl	80001d0 <memchr>
 800d4c4:	b138      	cbz	r0, 800d4d6 <_vfiprintf_r+0x176>
 800d4c6:	9b04      	ldr	r3, [sp, #16]
 800d4c8:	eba0 000a 	sub.w	r0, r0, sl
 800d4cc:	2240      	movs	r2, #64	@ 0x40
 800d4ce:	4082      	lsls	r2, r0
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	3401      	adds	r4, #1
 800d4d4:	9304      	str	r3, [sp, #16]
 800d4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4da:	4829      	ldr	r0, [pc, #164]	@ (800d580 <_vfiprintf_r+0x220>)
 800d4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4e0:	2206      	movs	r2, #6
 800d4e2:	f7f2 fe75 	bl	80001d0 <memchr>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d03f      	beq.n	800d56a <_vfiprintf_r+0x20a>
 800d4ea:	4b26      	ldr	r3, [pc, #152]	@ (800d584 <_vfiprintf_r+0x224>)
 800d4ec:	bb1b      	cbnz	r3, 800d536 <_vfiprintf_r+0x1d6>
 800d4ee:	9b03      	ldr	r3, [sp, #12]
 800d4f0:	3307      	adds	r3, #7
 800d4f2:	f023 0307 	bic.w	r3, r3, #7
 800d4f6:	3308      	adds	r3, #8
 800d4f8:	9303      	str	r3, [sp, #12]
 800d4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4fc:	443b      	add	r3, r7
 800d4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800d500:	e76a      	b.n	800d3d8 <_vfiprintf_r+0x78>
 800d502:	fb0c 3202 	mla	r2, ip, r2, r3
 800d506:	460c      	mov	r4, r1
 800d508:	2001      	movs	r0, #1
 800d50a:	e7a8      	b.n	800d45e <_vfiprintf_r+0xfe>
 800d50c:	2300      	movs	r3, #0
 800d50e:	3401      	adds	r4, #1
 800d510:	9305      	str	r3, [sp, #20]
 800d512:	4619      	mov	r1, r3
 800d514:	f04f 0c0a 	mov.w	ip, #10
 800d518:	4620      	mov	r0, r4
 800d51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51e:	3a30      	subs	r2, #48	@ 0x30
 800d520:	2a09      	cmp	r2, #9
 800d522:	d903      	bls.n	800d52c <_vfiprintf_r+0x1cc>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d0c6      	beq.n	800d4b6 <_vfiprintf_r+0x156>
 800d528:	9105      	str	r1, [sp, #20]
 800d52a:	e7c4      	b.n	800d4b6 <_vfiprintf_r+0x156>
 800d52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d530:	4604      	mov	r4, r0
 800d532:	2301      	movs	r3, #1
 800d534:	e7f0      	b.n	800d518 <_vfiprintf_r+0x1b8>
 800d536:	ab03      	add	r3, sp, #12
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	462a      	mov	r2, r5
 800d53c:	4b12      	ldr	r3, [pc, #72]	@ (800d588 <_vfiprintf_r+0x228>)
 800d53e:	a904      	add	r1, sp, #16
 800d540:	4630      	mov	r0, r6
 800d542:	f7fd fdc7 	bl	800b0d4 <_printf_float>
 800d546:	4607      	mov	r7, r0
 800d548:	1c78      	adds	r0, r7, #1
 800d54a:	d1d6      	bne.n	800d4fa <_vfiprintf_r+0x19a>
 800d54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d54e:	07d9      	lsls	r1, r3, #31
 800d550:	d405      	bmi.n	800d55e <_vfiprintf_r+0x1fe>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	059a      	lsls	r2, r3, #22
 800d556:	d402      	bmi.n	800d55e <_vfiprintf_r+0x1fe>
 800d558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d55a:	f7fe fc01 	bl	800bd60 <__retarget_lock_release_recursive>
 800d55e:	89ab      	ldrh	r3, [r5, #12]
 800d560:	065b      	lsls	r3, r3, #25
 800d562:	f53f af1f 	bmi.w	800d3a4 <_vfiprintf_r+0x44>
 800d566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d568:	e71e      	b.n	800d3a8 <_vfiprintf_r+0x48>
 800d56a:	ab03      	add	r3, sp, #12
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	462a      	mov	r2, r5
 800d570:	4b05      	ldr	r3, [pc, #20]	@ (800d588 <_vfiprintf_r+0x228>)
 800d572:	a904      	add	r1, sp, #16
 800d574:	4630      	mov	r0, r6
 800d576:	f7fe f845 	bl	800b604 <_printf_i>
 800d57a:	e7e4      	b.n	800d546 <_vfiprintf_r+0x1e6>
 800d57c:	0800e74e 	.word	0x0800e74e
 800d580:	0800e758 	.word	0x0800e758
 800d584:	0800b0d5 	.word	0x0800b0d5
 800d588:	0800d33b 	.word	0x0800d33b
 800d58c:	0800e754 	.word	0x0800e754

0800d590 <__sflush_r>:
 800d590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d598:	0716      	lsls	r6, r2, #28
 800d59a:	4605      	mov	r5, r0
 800d59c:	460c      	mov	r4, r1
 800d59e:	d454      	bmi.n	800d64a <__sflush_r+0xba>
 800d5a0:	684b      	ldr	r3, [r1, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dc02      	bgt.n	800d5ac <__sflush_r+0x1c>
 800d5a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dd48      	ble.n	800d63e <__sflush_r+0xae>
 800d5ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5ae:	2e00      	cmp	r6, #0
 800d5b0:	d045      	beq.n	800d63e <__sflush_r+0xae>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5b8:	682f      	ldr	r7, [r5, #0]
 800d5ba:	6a21      	ldr	r1, [r4, #32]
 800d5bc:	602b      	str	r3, [r5, #0]
 800d5be:	d030      	beq.n	800d622 <__sflush_r+0x92>
 800d5c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	0759      	lsls	r1, r3, #29
 800d5c6:	d505      	bpl.n	800d5d4 <__sflush_r+0x44>
 800d5c8:	6863      	ldr	r3, [r4, #4]
 800d5ca:	1ad2      	subs	r2, r2, r3
 800d5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5ce:	b10b      	cbz	r3, 800d5d4 <__sflush_r+0x44>
 800d5d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5d2:	1ad2      	subs	r2, r2, r3
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5d8:	6a21      	ldr	r1, [r4, #32]
 800d5da:	4628      	mov	r0, r5
 800d5dc:	47b0      	blx	r6
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	d106      	bne.n	800d5f2 <__sflush_r+0x62>
 800d5e4:	6829      	ldr	r1, [r5, #0]
 800d5e6:	291d      	cmp	r1, #29
 800d5e8:	d82b      	bhi.n	800d642 <__sflush_r+0xb2>
 800d5ea:	4a2a      	ldr	r2, [pc, #168]	@ (800d694 <__sflush_r+0x104>)
 800d5ec:	40ca      	lsrs	r2, r1
 800d5ee:	07d6      	lsls	r6, r2, #31
 800d5f0:	d527      	bpl.n	800d642 <__sflush_r+0xb2>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	6062      	str	r2, [r4, #4]
 800d5f6:	04d9      	lsls	r1, r3, #19
 800d5f8:	6922      	ldr	r2, [r4, #16]
 800d5fa:	6022      	str	r2, [r4, #0]
 800d5fc:	d504      	bpl.n	800d608 <__sflush_r+0x78>
 800d5fe:	1c42      	adds	r2, r0, #1
 800d600:	d101      	bne.n	800d606 <__sflush_r+0x76>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b903      	cbnz	r3, 800d608 <__sflush_r+0x78>
 800d606:	6560      	str	r0, [r4, #84]	@ 0x54
 800d608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d60a:	602f      	str	r7, [r5, #0]
 800d60c:	b1b9      	cbz	r1, 800d63e <__sflush_r+0xae>
 800d60e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d612:	4299      	cmp	r1, r3
 800d614:	d002      	beq.n	800d61c <__sflush_r+0x8c>
 800d616:	4628      	mov	r0, r5
 800d618:	f7ff f9fe 	bl	800ca18 <_free_r>
 800d61c:	2300      	movs	r3, #0
 800d61e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d620:	e00d      	b.n	800d63e <__sflush_r+0xae>
 800d622:	2301      	movs	r3, #1
 800d624:	4628      	mov	r0, r5
 800d626:	47b0      	blx	r6
 800d628:	4602      	mov	r2, r0
 800d62a:	1c50      	adds	r0, r2, #1
 800d62c:	d1c9      	bne.n	800d5c2 <__sflush_r+0x32>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0c6      	beq.n	800d5c2 <__sflush_r+0x32>
 800d634:	2b1d      	cmp	r3, #29
 800d636:	d001      	beq.n	800d63c <__sflush_r+0xac>
 800d638:	2b16      	cmp	r3, #22
 800d63a:	d11e      	bne.n	800d67a <__sflush_r+0xea>
 800d63c:	602f      	str	r7, [r5, #0]
 800d63e:	2000      	movs	r0, #0
 800d640:	e022      	b.n	800d688 <__sflush_r+0xf8>
 800d642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d646:	b21b      	sxth	r3, r3
 800d648:	e01b      	b.n	800d682 <__sflush_r+0xf2>
 800d64a:	690f      	ldr	r7, [r1, #16]
 800d64c:	2f00      	cmp	r7, #0
 800d64e:	d0f6      	beq.n	800d63e <__sflush_r+0xae>
 800d650:	0793      	lsls	r3, r2, #30
 800d652:	680e      	ldr	r6, [r1, #0]
 800d654:	bf08      	it	eq
 800d656:	694b      	ldreq	r3, [r1, #20]
 800d658:	600f      	str	r7, [r1, #0]
 800d65a:	bf18      	it	ne
 800d65c:	2300      	movne	r3, #0
 800d65e:	eba6 0807 	sub.w	r8, r6, r7
 800d662:	608b      	str	r3, [r1, #8]
 800d664:	f1b8 0f00 	cmp.w	r8, #0
 800d668:	dde9      	ble.n	800d63e <__sflush_r+0xae>
 800d66a:	6a21      	ldr	r1, [r4, #32]
 800d66c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d66e:	4643      	mov	r3, r8
 800d670:	463a      	mov	r2, r7
 800d672:	4628      	mov	r0, r5
 800d674:	47b0      	blx	r6
 800d676:	2800      	cmp	r0, #0
 800d678:	dc08      	bgt.n	800d68c <__sflush_r+0xfc>
 800d67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	4407      	add	r7, r0
 800d68e:	eba8 0800 	sub.w	r8, r8, r0
 800d692:	e7e7      	b.n	800d664 <__sflush_r+0xd4>
 800d694:	20400001 	.word	0x20400001

0800d698 <_fflush_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	690b      	ldr	r3, [r1, #16]
 800d69c:	4605      	mov	r5, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	b913      	cbnz	r3, 800d6a8 <_fflush_r+0x10>
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	b118      	cbz	r0, 800d6b2 <_fflush_r+0x1a>
 800d6aa:	6a03      	ldr	r3, [r0, #32]
 800d6ac:	b90b      	cbnz	r3, 800d6b2 <_fflush_r+0x1a>
 800d6ae:	f7fe f953 	bl	800b958 <__sinit>
 800d6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0f3      	beq.n	800d6a2 <_fflush_r+0xa>
 800d6ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6bc:	07d0      	lsls	r0, r2, #31
 800d6be:	d404      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c0:	0599      	lsls	r1, r3, #22
 800d6c2:	d402      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6c6:	f7fe fb4a 	bl	800bd5e <__retarget_lock_acquire_recursive>
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f7ff ff5f 	bl	800d590 <__sflush_r>
 800d6d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6d4:	07da      	lsls	r2, r3, #31
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	d4e4      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	059b      	lsls	r3, r3, #22
 800d6de:	d4e1      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6e2:	f7fe fb3d 	bl	800bd60 <__retarget_lock_release_recursive>
 800d6e6:	e7dd      	b.n	800d6a4 <_fflush_r+0xc>

0800d6e8 <__swhatbuf_r>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	b096      	sub	sp, #88	@ 0x58
 800d6f4:	4615      	mov	r5, r2
 800d6f6:	461e      	mov	r6, r3
 800d6f8:	da0d      	bge.n	800d716 <__swhatbuf_r+0x2e>
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d700:	f04f 0100 	mov.w	r1, #0
 800d704:	bf14      	ite	ne
 800d706:	2340      	movne	r3, #64	@ 0x40
 800d708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d70c:	2000      	movs	r0, #0
 800d70e:	6031      	str	r1, [r6, #0]
 800d710:	602b      	str	r3, [r5, #0]
 800d712:	b016      	add	sp, #88	@ 0x58
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	466a      	mov	r2, sp
 800d718:	f000 f87c 	bl	800d814 <_fstat_r>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	dbec      	blt.n	800d6fa <__swhatbuf_r+0x12>
 800d720:	9901      	ldr	r1, [sp, #4]
 800d722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d72a:	4259      	negs	r1, r3
 800d72c:	4159      	adcs	r1, r3
 800d72e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d732:	e7eb      	b.n	800d70c <__swhatbuf_r+0x24>

0800d734 <__smakebuf_r>:
 800d734:	898b      	ldrh	r3, [r1, #12]
 800d736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d738:	079d      	lsls	r5, r3, #30
 800d73a:	4606      	mov	r6, r0
 800d73c:	460c      	mov	r4, r1
 800d73e:	d507      	bpl.n	800d750 <__smakebuf_r+0x1c>
 800d740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	6123      	str	r3, [r4, #16]
 800d748:	2301      	movs	r3, #1
 800d74a:	6163      	str	r3, [r4, #20]
 800d74c:	b003      	add	sp, #12
 800d74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d750:	ab01      	add	r3, sp, #4
 800d752:	466a      	mov	r2, sp
 800d754:	f7ff ffc8 	bl	800d6e8 <__swhatbuf_r>
 800d758:	9f00      	ldr	r7, [sp, #0]
 800d75a:	4605      	mov	r5, r0
 800d75c:	4639      	mov	r1, r7
 800d75e:	4630      	mov	r0, r6
 800d760:	f7ff f9ce 	bl	800cb00 <_malloc_r>
 800d764:	b948      	cbnz	r0, 800d77a <__smakebuf_r+0x46>
 800d766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d76a:	059a      	lsls	r2, r3, #22
 800d76c:	d4ee      	bmi.n	800d74c <__smakebuf_r+0x18>
 800d76e:	f023 0303 	bic.w	r3, r3, #3
 800d772:	f043 0302 	orr.w	r3, r3, #2
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	e7e2      	b.n	800d740 <__smakebuf_r+0xc>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	6020      	str	r0, [r4, #0]
 800d77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	9b01      	ldr	r3, [sp, #4]
 800d786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d78a:	b15b      	cbz	r3, 800d7a4 <__smakebuf_r+0x70>
 800d78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d790:	4630      	mov	r0, r6
 800d792:	f000 f851 	bl	800d838 <_isatty_r>
 800d796:	b128      	cbz	r0, 800d7a4 <__smakebuf_r+0x70>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f023 0303 	bic.w	r3, r3, #3
 800d79e:	f043 0301 	orr.w	r3, r3, #1
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	431d      	orrs	r5, r3
 800d7a8:	81a5      	strh	r5, [r4, #12]
 800d7aa:	e7cf      	b.n	800d74c <__smakebuf_r+0x18>

0800d7ac <_putc_r>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	460d      	mov	r5, r1
 800d7b0:	4614      	mov	r4, r2
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	b118      	cbz	r0, 800d7be <_putc_r+0x12>
 800d7b6:	6a03      	ldr	r3, [r0, #32]
 800d7b8:	b90b      	cbnz	r3, 800d7be <_putc_r+0x12>
 800d7ba:	f7fe f8cd 	bl	800b958 <__sinit>
 800d7be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7c0:	07d8      	lsls	r0, r3, #31
 800d7c2:	d405      	bmi.n	800d7d0 <_putc_r+0x24>
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	0599      	lsls	r1, r3, #22
 800d7c8:	d402      	bmi.n	800d7d0 <_putc_r+0x24>
 800d7ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7cc:	f7fe fac7 	bl	800bd5e <__retarget_lock_acquire_recursive>
 800d7d0:	68a3      	ldr	r3, [r4, #8]
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	60a3      	str	r3, [r4, #8]
 800d7d8:	da05      	bge.n	800d7e6 <_putc_r+0x3a>
 800d7da:	69a2      	ldr	r2, [r4, #24]
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	db12      	blt.n	800d806 <_putc_r+0x5a>
 800d7e0:	b2eb      	uxtb	r3, r5
 800d7e2:	2b0a      	cmp	r3, #10
 800d7e4:	d00f      	beq.n	800d806 <_putc_r+0x5a>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	6022      	str	r2, [r4, #0]
 800d7ec:	701d      	strb	r5, [r3, #0]
 800d7ee:	b2ed      	uxtb	r5, r5
 800d7f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7f2:	07da      	lsls	r2, r3, #31
 800d7f4:	d405      	bmi.n	800d802 <_putc_r+0x56>
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	059b      	lsls	r3, r3, #22
 800d7fa:	d402      	bmi.n	800d802 <_putc_r+0x56>
 800d7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7fe:	f7fe faaf 	bl	800bd60 <__retarget_lock_release_recursive>
 800d802:	4628      	mov	r0, r5
 800d804:	bd70      	pop	{r4, r5, r6, pc}
 800d806:	4629      	mov	r1, r5
 800d808:	4622      	mov	r2, r4
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7fe f995 	bl	800bb3a <__swbuf_r>
 800d810:	4605      	mov	r5, r0
 800d812:	e7ed      	b.n	800d7f0 <_putc_r+0x44>

0800d814 <_fstat_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4d07      	ldr	r5, [pc, #28]	@ (800d834 <_fstat_r+0x20>)
 800d818:	2300      	movs	r3, #0
 800d81a:	4604      	mov	r4, r0
 800d81c:	4608      	mov	r0, r1
 800d81e:	4611      	mov	r1, r2
 800d820:	602b      	str	r3, [r5, #0]
 800d822:	f7f5 fb03 	bl	8002e2c <_fstat>
 800d826:	1c43      	adds	r3, r0, #1
 800d828:	d102      	bne.n	800d830 <_fstat_r+0x1c>
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	b103      	cbz	r3, 800d830 <_fstat_r+0x1c>
 800d82e:	6023      	str	r3, [r4, #0]
 800d830:	bd38      	pop	{r3, r4, r5, pc}
 800d832:	bf00      	nop
 800d834:	20002368 	.word	0x20002368

0800d838 <_isatty_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d06      	ldr	r5, [pc, #24]	@ (800d854 <_isatty_r+0x1c>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4604      	mov	r4, r0
 800d840:	4608      	mov	r0, r1
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	f7f5 fb02 	bl	8002e4c <_isatty>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_isatty_r+0x1a>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_isatty_r+0x1a>
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	20002368 	.word	0x20002368

0800d858 <_sbrk_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4d06      	ldr	r5, [pc, #24]	@ (800d874 <_sbrk_r+0x1c>)
 800d85c:	2300      	movs	r3, #0
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	602b      	str	r3, [r5, #0]
 800d864:	f7f5 fb0a 	bl	8002e7c <_sbrk>
 800d868:	1c43      	adds	r3, r0, #1
 800d86a:	d102      	bne.n	800d872 <_sbrk_r+0x1a>
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	b103      	cbz	r3, 800d872 <_sbrk_r+0x1a>
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	bd38      	pop	{r3, r4, r5, pc}
 800d874:	20002368 	.word	0x20002368

0800d878 <memcpy>:
 800d878:	440a      	add	r2, r1
 800d87a:	4291      	cmp	r1, r2
 800d87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d880:	d100      	bne.n	800d884 <memcpy+0xc>
 800d882:	4770      	bx	lr
 800d884:	b510      	push	{r4, lr}
 800d886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d88e:	4291      	cmp	r1, r2
 800d890:	d1f9      	bne.n	800d886 <memcpy+0xe>
 800d892:	bd10      	pop	{r4, pc}

0800d894 <__assert_func>:
 800d894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d896:	4614      	mov	r4, r2
 800d898:	461a      	mov	r2, r3
 800d89a:	4b09      	ldr	r3, [pc, #36]	@ (800d8c0 <__assert_func+0x2c>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4605      	mov	r5, r0
 800d8a0:	68d8      	ldr	r0, [r3, #12]
 800d8a2:	b14c      	cbz	r4, 800d8b8 <__assert_func+0x24>
 800d8a4:	4b07      	ldr	r3, [pc, #28]	@ (800d8c4 <__assert_func+0x30>)
 800d8a6:	9100      	str	r1, [sp, #0]
 800d8a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8ac:	4906      	ldr	r1, [pc, #24]	@ (800d8c8 <__assert_func+0x34>)
 800d8ae:	462b      	mov	r3, r5
 800d8b0:	f000 f842 	bl	800d938 <fiprintf>
 800d8b4:	f000 f852 	bl	800d95c <abort>
 800d8b8:	4b04      	ldr	r3, [pc, #16]	@ (800d8cc <__assert_func+0x38>)
 800d8ba:	461c      	mov	r4, r3
 800d8bc:	e7f3      	b.n	800d8a6 <__assert_func+0x12>
 800d8be:	bf00      	nop
 800d8c0:	20000130 	.word	0x20000130
 800d8c4:	0800e769 	.word	0x0800e769
 800d8c8:	0800e776 	.word	0x0800e776
 800d8cc:	0800e7a4 	.word	0x0800e7a4

0800d8d0 <_calloc_r>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	fba1 5402 	umull	r5, r4, r1, r2
 800d8d6:	b934      	cbnz	r4, 800d8e6 <_calloc_r+0x16>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7ff f911 	bl	800cb00 <_malloc_r>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	b928      	cbnz	r0, 800d8ee <_calloc_r+0x1e>
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	bd70      	pop	{r4, r5, r6, pc}
 800d8e6:	220c      	movs	r2, #12
 800d8e8:	6002      	str	r2, [r0, #0]
 800d8ea:	2600      	movs	r6, #0
 800d8ec:	e7f9      	b.n	800d8e2 <_calloc_r+0x12>
 800d8ee:	462a      	mov	r2, r5
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	f7fe f9b7 	bl	800bc64 <memset>
 800d8f6:	e7f4      	b.n	800d8e2 <_calloc_r+0x12>

0800d8f8 <__ascii_mbtowc>:
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	b901      	cbnz	r1, 800d8fe <__ascii_mbtowc+0x6>
 800d8fc:	a901      	add	r1, sp, #4
 800d8fe:	b142      	cbz	r2, 800d912 <__ascii_mbtowc+0x1a>
 800d900:	b14b      	cbz	r3, 800d916 <__ascii_mbtowc+0x1e>
 800d902:	7813      	ldrb	r3, [r2, #0]
 800d904:	600b      	str	r3, [r1, #0]
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	1e10      	subs	r0, r2, #0
 800d90a:	bf18      	it	ne
 800d90c:	2001      	movne	r0, #1
 800d90e:	b002      	add	sp, #8
 800d910:	4770      	bx	lr
 800d912:	4610      	mov	r0, r2
 800d914:	e7fb      	b.n	800d90e <__ascii_mbtowc+0x16>
 800d916:	f06f 0001 	mvn.w	r0, #1
 800d91a:	e7f8      	b.n	800d90e <__ascii_mbtowc+0x16>

0800d91c <__ascii_wctomb>:
 800d91c:	4603      	mov	r3, r0
 800d91e:	4608      	mov	r0, r1
 800d920:	b141      	cbz	r1, 800d934 <__ascii_wctomb+0x18>
 800d922:	2aff      	cmp	r2, #255	@ 0xff
 800d924:	d904      	bls.n	800d930 <__ascii_wctomb+0x14>
 800d926:	228a      	movs	r2, #138	@ 0x8a
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	f04f 30ff 	mov.w	r0, #4294967295
 800d92e:	4770      	bx	lr
 800d930:	700a      	strb	r2, [r1, #0]
 800d932:	2001      	movs	r0, #1
 800d934:	4770      	bx	lr
	...

0800d938 <fiprintf>:
 800d938:	b40e      	push	{r1, r2, r3}
 800d93a:	b503      	push	{r0, r1, lr}
 800d93c:	4601      	mov	r1, r0
 800d93e:	ab03      	add	r3, sp, #12
 800d940:	4805      	ldr	r0, [pc, #20]	@ (800d958 <fiprintf+0x20>)
 800d942:	f853 2b04 	ldr.w	r2, [r3], #4
 800d946:	6800      	ldr	r0, [r0, #0]
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	f7ff fd09 	bl	800d360 <_vfiprintf_r>
 800d94e:	b002      	add	sp, #8
 800d950:	f85d eb04 	ldr.w	lr, [sp], #4
 800d954:	b003      	add	sp, #12
 800d956:	4770      	bx	lr
 800d958:	20000130 	.word	0x20000130

0800d95c <abort>:
 800d95c:	b508      	push	{r3, lr}
 800d95e:	2006      	movs	r0, #6
 800d960:	f000 f82c 	bl	800d9bc <raise>
 800d964:	2001      	movs	r0, #1
 800d966:	f7f5 fa2d 	bl	8002dc4 <_exit>

0800d96a <_raise_r>:
 800d96a:	291f      	cmp	r1, #31
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4605      	mov	r5, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d904      	bls.n	800d97e <_raise_r+0x14>
 800d974:	2316      	movs	r3, #22
 800d976:	6003      	str	r3, [r0, #0]
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	bd38      	pop	{r3, r4, r5, pc}
 800d97e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d980:	b112      	cbz	r2, 800d988 <_raise_r+0x1e>
 800d982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d986:	b94b      	cbnz	r3, 800d99c <_raise_r+0x32>
 800d988:	4628      	mov	r0, r5
 800d98a:	f000 f831 	bl	800d9f0 <_getpid_r>
 800d98e:	4622      	mov	r2, r4
 800d990:	4601      	mov	r1, r0
 800d992:	4628      	mov	r0, r5
 800d994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d998:	f000 b818 	b.w	800d9cc <_kill_r>
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d00a      	beq.n	800d9b6 <_raise_r+0x4c>
 800d9a0:	1c59      	adds	r1, r3, #1
 800d9a2:	d103      	bne.n	800d9ac <_raise_r+0x42>
 800d9a4:	2316      	movs	r3, #22
 800d9a6:	6003      	str	r3, [r0, #0]
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	e7e7      	b.n	800d97c <_raise_r+0x12>
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4798      	blx	r3
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	e7e0      	b.n	800d97c <_raise_r+0x12>
	...

0800d9bc <raise>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	@ (800d9c8 <raise+0xc>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f7ff bfd2 	b.w	800d96a <_raise_r>
 800d9c6:	bf00      	nop
 800d9c8:	20000130 	.word	0x20000130

0800d9cc <_kill_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	@ (800d9ec <_kill_r+0x20>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7f5 f9e3 	bl	8002da4 <_kill>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_kill_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_kill_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20002368 	.word	0x20002368

0800d9f0 <_getpid_r>:
 800d9f0:	f7f5 b9d0 	b.w	8002d94 <_getpid>
 800d9f4:	0000      	movs	r0, r0
	...

0800d9f8 <exp>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	ed2d 8b02 	vpush	{d8}
 800d9fe:	ec55 4b10 	vmov	r4, r5, d0
 800da02:	f000 f895 	bl	800db30 <__ieee754_exp>
 800da06:	eeb0 8a40 	vmov.f32	s16, s0
 800da0a:	eef0 8a60 	vmov.f32	s17, s1
 800da0e:	ec45 4b10 	vmov	d0, r4, r5
 800da12:	f000 f877 	bl	800db04 <finite>
 800da16:	b168      	cbz	r0, 800da34 <exp+0x3c>
 800da18:	a317      	add	r3, pc, #92	@ (adr r3, 800da78 <exp+0x80>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	4620      	mov	r0, r4
 800da20:	4629      	mov	r1, r5
 800da22:	f7f3 f879 	bl	8000b18 <__aeabi_dcmpgt>
 800da26:	b160      	cbz	r0, 800da42 <exp+0x4a>
 800da28:	f7fe f96e 	bl	800bd08 <__errno>
 800da2c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800da68 <exp+0x70>
 800da30:	2322      	movs	r3, #34	@ 0x22
 800da32:	6003      	str	r3, [r0, #0]
 800da34:	eeb0 0a48 	vmov.f32	s0, s16
 800da38:	eef0 0a68 	vmov.f32	s1, s17
 800da3c:	ecbd 8b02 	vpop	{d8}
 800da40:	bd38      	pop	{r3, r4, r5, pc}
 800da42:	a30f      	add	r3, pc, #60	@ (adr r3, 800da80 <exp+0x88>)
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	4620      	mov	r0, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	f7f3 f846 	bl	8000adc <__aeabi_dcmplt>
 800da50:	2800      	cmp	r0, #0
 800da52:	d0ef      	beq.n	800da34 <exp+0x3c>
 800da54:	f7fe f958 	bl	800bd08 <__errno>
 800da58:	2322      	movs	r3, #34	@ 0x22
 800da5a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800da70 <exp+0x78>
 800da5e:	6003      	str	r3, [r0, #0]
 800da60:	e7e8      	b.n	800da34 <exp+0x3c>
 800da62:	bf00      	nop
 800da64:	f3af 8000 	nop.w
 800da68:	00000000 	.word	0x00000000
 800da6c:	7ff00000 	.word	0x7ff00000
	...
 800da78:	fefa39ef 	.word	0xfefa39ef
 800da7c:	40862e42 	.word	0x40862e42
 800da80:	d52d3051 	.word	0xd52d3051
 800da84:	c0874910 	.word	0xc0874910

0800da88 <log>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	ed2d 8b02 	vpush	{d8}
 800da8e:	ec55 4b10 	vmov	r4, r5, d0
 800da92:	f000 f9c9 	bl	800de28 <__ieee754_log>
 800da96:	4622      	mov	r2, r4
 800da98:	462b      	mov	r3, r5
 800da9a:	4620      	mov	r0, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	eeb0 8a40 	vmov.f32	s16, s0
 800daa2:	eef0 8a60 	vmov.f32	s17, s1
 800daa6:	f7f3 f841 	bl	8000b2c <__aeabi_dcmpun>
 800daaa:	b998      	cbnz	r0, 800dad4 <log+0x4c>
 800daac:	2200      	movs	r2, #0
 800daae:	2300      	movs	r3, #0
 800dab0:	4620      	mov	r0, r4
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7f3 f830 	bl	8000b18 <__aeabi_dcmpgt>
 800dab8:	b960      	cbnz	r0, 800dad4 <log+0x4c>
 800daba:	2200      	movs	r2, #0
 800dabc:	2300      	movs	r3, #0
 800dabe:	4620      	mov	r0, r4
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7f3 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 800dac6:	b160      	cbz	r0, 800dae2 <log+0x5a>
 800dac8:	f7fe f91e 	bl	800bd08 <__errno>
 800dacc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800daf8 <log+0x70>
 800dad0:	2322      	movs	r3, #34	@ 0x22
 800dad2:	6003      	str	r3, [r0, #0]
 800dad4:	eeb0 0a48 	vmov.f32	s0, s16
 800dad8:	eef0 0a68 	vmov.f32	s1, s17
 800dadc:	ecbd 8b02 	vpop	{d8}
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	f7fe f911 	bl	800bd08 <__errno>
 800dae6:	ecbd 8b02 	vpop	{d8}
 800daea:	2321      	movs	r3, #33	@ 0x21
 800daec:	6003      	str	r3, [r0, #0]
 800daee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daf2:	4803      	ldr	r0, [pc, #12]	@ (800db00 <log+0x78>)
 800daf4:	f000 b814 	b.w	800db20 <nan>
 800daf8:	00000000 	.word	0x00000000
 800dafc:	fff00000 	.word	0xfff00000
 800db00:	0800e7a4 	.word	0x0800e7a4

0800db04 <finite>:
 800db04:	b082      	sub	sp, #8
 800db06:	ed8d 0b00 	vstr	d0, [sp]
 800db0a:	9801      	ldr	r0, [sp, #4]
 800db0c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800db10:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800db14:	0fc0      	lsrs	r0, r0, #31
 800db16:	b002      	add	sp, #8
 800db18:	4770      	bx	lr
 800db1a:	0000      	movs	r0, r0
 800db1c:	0000      	movs	r0, r0
	...

0800db20 <nan>:
 800db20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db28 <nan+0x8>
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	00000000 	.word	0x00000000
 800db2c:	7ff80000 	.word	0x7ff80000

0800db30 <__ieee754_exp>:
 800db30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	ec55 4b10 	vmov	r4, r5, d0
 800db38:	49b1      	ldr	r1, [pc, #708]	@ (800de00 <__ieee754_exp+0x2d0>)
 800db3a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800db3e:	428a      	cmp	r2, r1
 800db40:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800db44:	d936      	bls.n	800dbb4 <__ieee754_exp+0x84>
 800db46:	49af      	ldr	r1, [pc, #700]	@ (800de04 <__ieee754_exp+0x2d4>)
 800db48:	428a      	cmp	r2, r1
 800db4a:	d914      	bls.n	800db76 <__ieee754_exp+0x46>
 800db4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800db50:	4323      	orrs	r3, r4
 800db52:	4622      	mov	r2, r4
 800db54:	d007      	beq.n	800db66 <__ieee754_exp+0x36>
 800db56:	462b      	mov	r3, r5
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f2 fb96 	bl	800028c <__adddf3>
 800db60:	4604      	mov	r4, r0
 800db62:	460d      	mov	r5, r1
 800db64:	e002      	b.n	800db6c <__ieee754_exp+0x3c>
 800db66:	2e00      	cmp	r6, #0
 800db68:	f040 8118 	bne.w	800dd9c <__ieee754_exp+0x26c>
 800db6c:	ec45 4b10 	vmov	d0, r4, r5
 800db70:	b004      	add	sp, #16
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	a38c      	add	r3, pc, #560	@ (adr r3, 800dda8 <__ieee754_exp+0x278>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 ffca 	bl	8000b18 <__aeabi_dcmpgt>
 800db84:	4607      	mov	r7, r0
 800db86:	b128      	cbz	r0, 800db94 <__ieee754_exp+0x64>
 800db88:	2000      	movs	r0, #0
 800db8a:	b004      	add	sp, #16
 800db8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	f000 bb36 	b.w	800e200 <__math_oflow>
 800db94:	a386      	add	r3, pc, #536	@ (adr r3, 800ddb0 <__ieee754_exp+0x280>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	4620      	mov	r0, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	f7f2 ff9d 	bl	8000adc <__aeabi_dcmplt>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	f000 8087 	beq.w	800dcb6 <__ieee754_exp+0x186>
 800dba8:	4638      	mov	r0, r7
 800dbaa:	b004      	add	sp, #16
 800dbac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	f000 bb1e 	b.w	800e1f0 <__math_uflow>
 800dbb4:	4b94      	ldr	r3, [pc, #592]	@ (800de08 <__ieee754_exp+0x2d8>)
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	f240 80a9 	bls.w	800dd0e <__ieee754_exp+0x1de>
 800dbbc:	4b93      	ldr	r3, [pc, #588]	@ (800de0c <__ieee754_exp+0x2dc>)
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d879      	bhi.n	800dcb6 <__ieee754_exp+0x186>
 800dbc2:	4b93      	ldr	r3, [pc, #588]	@ (800de10 <__ieee754_exp+0x2e0>)
 800dbc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbcc:	4620      	mov	r0, r4
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	4b8f      	ldr	r3, [pc, #572]	@ (800de14 <__ieee754_exp+0x2e4>)
 800dbd6:	00f7      	lsls	r7, r6, #3
 800dbd8:	443b      	add	r3, r7
 800dbda:	ed93 7b00 	vldr	d7, [r3]
 800dbde:	ed8d 7b00 	vstr	d7, [sp]
 800dbe2:	f086 0a01 	eor.w	sl, r6, #1
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4689      	mov	r9, r1
 800dbea:	ebaa 0a06 	sub.w	sl, sl, r6
 800dbee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	4649      	mov	r1, r9
 800dbf6:	f7f2 fb47 	bl	8000288 <__aeabi_dsub>
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	460d      	mov	r5, r1
 800dbfe:	4622      	mov	r2, r4
 800dc00:	462b      	mov	r3, r5
 800dc02:	4620      	mov	r0, r4
 800dc04:	4629      	mov	r1, r5
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ddb8 <__ieee754_exp+0x288>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	4606      	mov	r6, r0
 800dc12:	460f      	mov	r7, r1
 800dc14:	f7f2 fcf0 	bl	80005f8 <__aeabi_dmul>
 800dc18:	a369      	add	r3, pc, #420	@ (adr r3, 800ddc0 <__ieee754_exp+0x290>)
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f7f2 fb33 	bl	8000288 <__aeabi_dsub>
 800dc22:	4632      	mov	r2, r6
 800dc24:	463b      	mov	r3, r7
 800dc26:	f7f2 fce7 	bl	80005f8 <__aeabi_dmul>
 800dc2a:	a367      	add	r3, pc, #412	@ (adr r3, 800ddc8 <__ieee754_exp+0x298>)
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	f7f2 fb2c 	bl	800028c <__adddf3>
 800dc34:	4632      	mov	r2, r6
 800dc36:	463b      	mov	r3, r7
 800dc38:	f7f2 fcde 	bl	80005f8 <__aeabi_dmul>
 800dc3c:	a364      	add	r3, pc, #400	@ (adr r3, 800ddd0 <__ieee754_exp+0x2a0>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	f7f2 fb21 	bl	8000288 <__aeabi_dsub>
 800dc46:	4632      	mov	r2, r6
 800dc48:	463b      	mov	r3, r7
 800dc4a:	f7f2 fcd5 	bl	80005f8 <__aeabi_dmul>
 800dc4e:	a362      	add	r3, pc, #392	@ (adr r3, 800ddd8 <__ieee754_exp+0x2a8>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	f7f2 fb1a 	bl	800028c <__adddf3>
 800dc58:	4632      	mov	r2, r6
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	f7f2 fccc 	bl	80005f8 <__aeabi_dmul>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 fb0e 	bl	8000288 <__aeabi_dsub>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	4620      	mov	r0, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc80:	f1ba 0f00 	cmp.w	sl, #0
 800dc84:	d15c      	bne.n	800dd40 <__ieee754_exp+0x210>
 800dc86:	2200      	movs	r2, #0
 800dc88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f7f2 fafa 	bl	8000288 <__aeabi_dsub>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc9c:	f7f2 fdd6 	bl	800084c <__aeabi_ddiv>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	2000      	movs	r0, #0
 800dcae:	495a      	ldr	r1, [pc, #360]	@ (800de18 <__ieee754_exp+0x2e8>)
 800dcb0:	f7f2 faea 	bl	8000288 <__aeabi_dsub>
 800dcb4:	e754      	b.n	800db60 <__ieee754_exp+0x30>
 800dcb6:	4b59      	ldr	r3, [pc, #356]	@ (800de1c <__ieee754_exp+0x2ec>)
 800dcb8:	4620      	mov	r0, r4
 800dcba:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	a347      	add	r3, pc, #284	@ (adr r3, 800dde0 <__ieee754_exp+0x2b0>)
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcce:	f7f2 fadd 	bl	800028c <__adddf3>
 800dcd2:	f7f2 ff41 	bl	8000b58 <__aeabi_d2iz>
 800dcd6:	4682      	mov	sl, r0
 800dcd8:	f7f2 fc24 	bl	8000524 <__aeabi_i2d>
 800dcdc:	a342      	add	r3, pc, #264	@ (adr r3, 800dde8 <__ieee754_exp+0x2b8>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	4606      	mov	r6, r0
 800dce4:	460f      	mov	r7, r1
 800dce6:	f7f2 fc87 	bl	80005f8 <__aeabi_dmul>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 fac9 	bl	8000288 <__aeabi_dsub>
 800dcf6:	a33e      	add	r3, pc, #248	@ (adr r3, 800ddf0 <__ieee754_exp+0x2c0>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	4689      	mov	r9, r1
 800dd00:	4630      	mov	r0, r6
 800dd02:	4639      	mov	r1, r7
 800dd04:	f7f2 fc78 	bl	80005f8 <__aeabi_dmul>
 800dd08:	e9cd 0100 	strd	r0, r1, [sp]
 800dd0c:	e76f      	b.n	800dbee <__ieee754_exp+0xbe>
 800dd0e:	4b44      	ldr	r3, [pc, #272]	@ (800de20 <__ieee754_exp+0x2f0>)
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d810      	bhi.n	800dd36 <__ieee754_exp+0x206>
 800dd14:	a338      	add	r3, pc, #224	@ (adr r3, 800ddf8 <__ieee754_exp+0x2c8>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	f7f2 fab5 	bl	800028c <__adddf3>
 800dd22:	4b3d      	ldr	r3, [pc, #244]	@ (800de18 <__ieee754_exp+0x2e8>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	f7f2 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800dd2a:	b138      	cbz	r0, 800dd3c <__ieee754_exp+0x20c>
 800dd2c:	4b3a      	ldr	r3, [pc, #232]	@ (800de18 <__ieee754_exp+0x2e8>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	4620      	mov	r0, r4
 800dd32:	4629      	mov	r1, r5
 800dd34:	e712      	b.n	800db5c <__ieee754_exp+0x2c>
 800dd36:	f04f 0a00 	mov.w	sl, #0
 800dd3a:	e760      	b.n	800dbfe <__ieee754_exp+0xce>
 800dd3c:	4682      	mov	sl, r0
 800dd3e:	e75e      	b.n	800dbfe <__ieee754_exp+0xce>
 800dd40:	4632      	mov	r2, r6
 800dd42:	463b      	mov	r3, r7
 800dd44:	2000      	movs	r0, #0
 800dd46:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800dd4a:	f7f2 fa9d 	bl	8000288 <__aeabi_dsub>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd56:	f7f2 fd79 	bl	800084c <__aeabi_ddiv>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd62:	f7f2 fa91 	bl	8000288 <__aeabi_dsub>
 800dd66:	4642      	mov	r2, r8
 800dd68:	464b      	mov	r3, r9
 800dd6a:	f7f2 fa8d 	bl	8000288 <__aeabi_dsub>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	2000      	movs	r0, #0
 800dd74:	4928      	ldr	r1, [pc, #160]	@ (800de18 <__ieee754_exp+0x2e8>)
 800dd76:	f7f2 fa87 	bl	8000288 <__aeabi_dsub>
 800dd7a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800dd7e:	4592      	cmp	sl, r2
 800dd80:	db02      	blt.n	800dd88 <__ieee754_exp+0x258>
 800dd82:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dd86:	e6eb      	b.n	800db60 <__ieee754_exp+0x30>
 800dd88:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800dd8c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dd90:	2200      	movs	r2, #0
 800dd92:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800dd96:	f7f2 fc2f 	bl	80005f8 <__aeabi_dmul>
 800dd9a:	e6e1      	b.n	800db60 <__ieee754_exp+0x30>
 800dd9c:	2400      	movs	r4, #0
 800dd9e:	2500      	movs	r5, #0
 800dda0:	e6e4      	b.n	800db6c <__ieee754_exp+0x3c>
 800dda2:	bf00      	nop
 800dda4:	f3af 8000 	nop.w
 800dda8:	fefa39ef 	.word	0xfefa39ef
 800ddac:	40862e42 	.word	0x40862e42
 800ddb0:	d52d3051 	.word	0xd52d3051
 800ddb4:	c0874910 	.word	0xc0874910
 800ddb8:	72bea4d0 	.word	0x72bea4d0
 800ddbc:	3e663769 	.word	0x3e663769
 800ddc0:	c5d26bf1 	.word	0xc5d26bf1
 800ddc4:	3ebbbd41 	.word	0x3ebbbd41
 800ddc8:	af25de2c 	.word	0xaf25de2c
 800ddcc:	3f11566a 	.word	0x3f11566a
 800ddd0:	16bebd93 	.word	0x16bebd93
 800ddd4:	3f66c16c 	.word	0x3f66c16c
 800ddd8:	5555553e 	.word	0x5555553e
 800dddc:	3fc55555 	.word	0x3fc55555
 800dde0:	652b82fe 	.word	0x652b82fe
 800dde4:	3ff71547 	.word	0x3ff71547
 800dde8:	fee00000 	.word	0xfee00000
 800ddec:	3fe62e42 	.word	0x3fe62e42
 800ddf0:	35793c76 	.word	0x35793c76
 800ddf4:	3dea39ef 	.word	0x3dea39ef
 800ddf8:	8800759c 	.word	0x8800759c
 800ddfc:	7e37e43c 	.word	0x7e37e43c
 800de00:	40862e41 	.word	0x40862e41
 800de04:	7fefffff 	.word	0x7fefffff
 800de08:	3fd62e42 	.word	0x3fd62e42
 800de0c:	3ff0a2b1 	.word	0x3ff0a2b1
 800de10:	0800e9c0 	.word	0x0800e9c0
 800de14:	0800e9b0 	.word	0x0800e9b0
 800de18:	3ff00000 	.word	0x3ff00000
 800de1c:	0800e9d0 	.word	0x0800e9d0
 800de20:	3defffff 	.word	0x3defffff
 800de24:	00000000 	.word	0x00000000

0800de28 <__ieee754_log>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	ec51 0b10 	vmov	r0, r1, d0
 800de30:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800de34:	b087      	sub	sp, #28
 800de36:	460d      	mov	r5, r1
 800de38:	da26      	bge.n	800de88 <__ieee754_log+0x60>
 800de3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800de3e:	4303      	orrs	r3, r0
 800de40:	4602      	mov	r2, r0
 800de42:	d10a      	bne.n	800de5a <__ieee754_log+0x32>
 800de44:	49ce      	ldr	r1, [pc, #824]	@ (800e180 <__ieee754_log+0x358>)
 800de46:	2200      	movs	r2, #0
 800de48:	2300      	movs	r3, #0
 800de4a:	2000      	movs	r0, #0
 800de4c:	f7f2 fcfe 	bl	800084c <__aeabi_ddiv>
 800de50:	ec41 0b10 	vmov	d0, r0, r1
 800de54:	b007      	add	sp, #28
 800de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5a:	2900      	cmp	r1, #0
 800de5c:	da05      	bge.n	800de6a <__ieee754_log+0x42>
 800de5e:	460b      	mov	r3, r1
 800de60:	f7f2 fa12 	bl	8000288 <__aeabi_dsub>
 800de64:	2200      	movs	r2, #0
 800de66:	2300      	movs	r3, #0
 800de68:	e7f0      	b.n	800de4c <__ieee754_log+0x24>
 800de6a:	4bc6      	ldr	r3, [pc, #792]	@ (800e184 <__ieee754_log+0x35c>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	f7f2 fbc3 	bl	80005f8 <__aeabi_dmul>
 800de72:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800de76:	460d      	mov	r5, r1
 800de78:	4ac3      	ldr	r2, [pc, #780]	@ (800e188 <__ieee754_log+0x360>)
 800de7a:	4295      	cmp	r5, r2
 800de7c:	dd06      	ble.n	800de8c <__ieee754_log+0x64>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	f7f2 fa03 	bl	800028c <__adddf3>
 800de86:	e7e3      	b.n	800de50 <__ieee754_log+0x28>
 800de88:	2300      	movs	r3, #0
 800de8a:	e7f5      	b.n	800de78 <__ieee754_log+0x50>
 800de8c:	152c      	asrs	r4, r5, #20
 800de8e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800de92:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800de96:	441c      	add	r4, r3
 800de98:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800de9c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800dea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dea4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800dea8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800deac:	ea42 0105 	orr.w	r1, r2, r5
 800deb0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800deb4:	2200      	movs	r2, #0
 800deb6:	4bb5      	ldr	r3, [pc, #724]	@ (800e18c <__ieee754_log+0x364>)
 800deb8:	f7f2 f9e6 	bl	8000288 <__aeabi_dsub>
 800debc:	1cab      	adds	r3, r5, #2
 800debe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	4682      	mov	sl, r0
 800dec6:	468b      	mov	fp, r1
 800dec8:	f04f 0200 	mov.w	r2, #0
 800decc:	dc53      	bgt.n	800df76 <__ieee754_log+0x14e>
 800dece:	2300      	movs	r3, #0
 800ded0:	f7f2 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ded4:	b1d0      	cbz	r0, 800df0c <__ieee754_log+0xe4>
 800ded6:	2c00      	cmp	r4, #0
 800ded8:	f000 8120 	beq.w	800e11c <__ieee754_log+0x2f4>
 800dedc:	4620      	mov	r0, r4
 800dede:	f7f2 fb21 	bl	8000524 <__aeabi_i2d>
 800dee2:	a391      	add	r3, pc, #580	@ (adr r3, 800e128 <__ieee754_log+0x300>)
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	f7f2 fb84 	bl	80005f8 <__aeabi_dmul>
 800def0:	a38f      	add	r3, pc, #572	@ (adr r3, 800e130 <__ieee754_log+0x308>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	4604      	mov	r4, r0
 800def8:	460d      	mov	r5, r1
 800defa:	4630      	mov	r0, r6
 800defc:	4639      	mov	r1, r7
 800defe:	f7f2 fb7b 	bl	80005f8 <__aeabi_dmul>
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	e7ba      	b.n	800de82 <__ieee754_log+0x5a>
 800df0c:	a38a      	add	r3, pc, #552	@ (adr r3, 800e138 <__ieee754_log+0x310>)
 800df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df12:	4650      	mov	r0, sl
 800df14:	4659      	mov	r1, fp
 800df16:	f7f2 fb6f 	bl	80005f8 <__aeabi_dmul>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	2000      	movs	r0, #0
 800df20:	499b      	ldr	r1, [pc, #620]	@ (800e190 <__ieee754_log+0x368>)
 800df22:	f7f2 f9b1 	bl	8000288 <__aeabi_dsub>
 800df26:	4652      	mov	r2, sl
 800df28:	4606      	mov	r6, r0
 800df2a:	460f      	mov	r7, r1
 800df2c:	465b      	mov	r3, fp
 800df2e:	4650      	mov	r0, sl
 800df30:	4659      	mov	r1, fp
 800df32:	f7f2 fb61 	bl	80005f8 <__aeabi_dmul>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 fb5b 	bl	80005f8 <__aeabi_dmul>
 800df42:	4606      	mov	r6, r0
 800df44:	460f      	mov	r7, r1
 800df46:	b914      	cbnz	r4, 800df4e <__ieee754_log+0x126>
 800df48:	4632      	mov	r2, r6
 800df4a:	463b      	mov	r3, r7
 800df4c:	e0a0      	b.n	800e090 <__ieee754_log+0x268>
 800df4e:	4620      	mov	r0, r4
 800df50:	f7f2 fae8 	bl	8000524 <__aeabi_i2d>
 800df54:	a374      	add	r3, pc, #464	@ (adr r3, 800e128 <__ieee754_log+0x300>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	4680      	mov	r8, r0
 800df5c:	4689      	mov	r9, r1
 800df5e:	f7f2 fb4b 	bl	80005f8 <__aeabi_dmul>
 800df62:	a373      	add	r3, pc, #460	@ (adr r3, 800e130 <__ieee754_log+0x308>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	4604      	mov	r4, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	4640      	mov	r0, r8
 800df6e:	4649      	mov	r1, r9
 800df70:	f7f2 fb42 	bl	80005f8 <__aeabi_dmul>
 800df74:	e0a5      	b.n	800e0c2 <__ieee754_log+0x29a>
 800df76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df7a:	f7f2 f987 	bl	800028c <__adddf3>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4650      	mov	r0, sl
 800df84:	4659      	mov	r1, fp
 800df86:	f7f2 fc61 	bl	800084c <__aeabi_ddiv>
 800df8a:	e9cd 0100 	strd	r0, r1, [sp]
 800df8e:	4620      	mov	r0, r4
 800df90:	f7f2 fac8 	bl	8000524 <__aeabi_i2d>
 800df94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df9c:	4610      	mov	r0, r2
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f7f2 fb2a 	bl	80005f8 <__aeabi_dmul>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfac:	f7f2 fb24 	bl	80005f8 <__aeabi_dmul>
 800dfb0:	a363      	add	r3, pc, #396	@ (adr r3, 800e140 <__ieee754_log+0x318>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	4680      	mov	r8, r0
 800dfb8:	4689      	mov	r9, r1
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	a362      	add	r3, pc, #392	@ (adr r3, 800e148 <__ieee754_log+0x320>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 f962 	bl	800028c <__adddf3>
 800dfc8:	4642      	mov	r2, r8
 800dfca:	464b      	mov	r3, r9
 800dfcc:	f7f2 fb14 	bl	80005f8 <__aeabi_dmul>
 800dfd0:	a35f      	add	r3, pc, #380	@ (adr r3, 800e150 <__ieee754_log+0x328>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f959 	bl	800028c <__adddf3>
 800dfda:	4642      	mov	r2, r8
 800dfdc:	464b      	mov	r3, r9
 800dfde:	f7f2 fb0b 	bl	80005f8 <__aeabi_dmul>
 800dfe2:	a35d      	add	r3, pc, #372	@ (adr r3, 800e158 <__ieee754_log+0x330>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 f950 	bl	800028c <__adddf3>
 800dfec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	a35a      	add	r3, pc, #360	@ (adr r3, 800e160 <__ieee754_log+0x338>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dffe:	4640      	mov	r0, r8
 800e000:	4649      	mov	r1, r9
 800e002:	f7f2 faf9 	bl	80005f8 <__aeabi_dmul>
 800e006:	a358      	add	r3, pc, #352	@ (adr r3, 800e168 <__ieee754_log+0x340>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	f7f2 f93e 	bl	800028c <__adddf3>
 800e010:	4642      	mov	r2, r8
 800e012:	464b      	mov	r3, r9
 800e014:	f7f2 faf0 	bl	80005f8 <__aeabi_dmul>
 800e018:	a355      	add	r3, pc, #340	@ (adr r3, 800e170 <__ieee754_log+0x348>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 f935 	bl	800028c <__adddf3>
 800e022:	4642      	mov	r2, r8
 800e024:	464b      	mov	r3, r9
 800e026:	f7f2 fae7 	bl	80005f8 <__aeabi_dmul>
 800e02a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e03a:	f7f2 f927 	bl	800028c <__adddf3>
 800e03e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e042:	3551      	adds	r5, #81	@ 0x51
 800e044:	4335      	orrs	r5, r6
 800e046:	2d00      	cmp	r5, #0
 800e048:	4680      	mov	r8, r0
 800e04a:	4689      	mov	r9, r1
 800e04c:	dd48      	ble.n	800e0e0 <__ieee754_log+0x2b8>
 800e04e:	4b50      	ldr	r3, [pc, #320]	@ (800e190 <__ieee754_log+0x368>)
 800e050:	2200      	movs	r2, #0
 800e052:	4650      	mov	r0, sl
 800e054:	4659      	mov	r1, fp
 800e056:	f7f2 facf 	bl	80005f8 <__aeabi_dmul>
 800e05a:	4652      	mov	r2, sl
 800e05c:	465b      	mov	r3, fp
 800e05e:	f7f2 facb 	bl	80005f8 <__aeabi_dmul>
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	4640      	mov	r0, r8
 800e06c:	4649      	mov	r1, r9
 800e06e:	f7f2 f90d 	bl	800028c <__adddf3>
 800e072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e076:	f7f2 fabf 	bl	80005f8 <__aeabi_dmul>
 800e07a:	4680      	mov	r8, r0
 800e07c:	4689      	mov	r9, r1
 800e07e:	b964      	cbnz	r4, 800e09a <__ieee754_log+0x272>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	4630      	mov	r0, r6
 800e086:	4639      	mov	r1, r7
 800e088:	f7f2 f8fe 	bl	8000288 <__aeabi_dsub>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4650      	mov	r0, sl
 800e092:	4659      	mov	r1, fp
 800e094:	f7f2 f8f8 	bl	8000288 <__aeabi_dsub>
 800e098:	e6da      	b.n	800de50 <__ieee754_log+0x28>
 800e09a:	a323      	add	r3, pc, #140	@ (adr r3, 800e128 <__ieee754_log+0x300>)
 800e09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0a4:	f7f2 faa8 	bl	80005f8 <__aeabi_dmul>
 800e0a8:	a321      	add	r3, pc, #132	@ (adr r3, 800e130 <__ieee754_log+0x308>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0b6:	f7f2 fa9f 	bl	80005f8 <__aeabi_dmul>
 800e0ba:	4642      	mov	r2, r8
 800e0bc:	464b      	mov	r3, r9
 800e0be:	f7f2 f8e5 	bl	800028c <__adddf3>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	f7f2 f8dd 	bl	8000288 <__aeabi_dsub>
 800e0ce:	4652      	mov	r2, sl
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	f7f2 f8d9 	bl	8000288 <__aeabi_dsub>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4620      	mov	r0, r4
 800e0dc:	4629      	mov	r1, r5
 800e0de:	e7d9      	b.n	800e094 <__ieee754_log+0x26c>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4650      	mov	r0, sl
 800e0e6:	4659      	mov	r1, fp
 800e0e8:	f7f2 f8ce 	bl	8000288 <__aeabi_dsub>
 800e0ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0f0:	f7f2 fa82 	bl	80005f8 <__aeabi_dmul>
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	460f      	mov	r7, r1
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	f43f af25 	beq.w	800df48 <__ieee754_log+0x120>
 800e0fe:	a30a      	add	r3, pc, #40	@ (adr r3, 800e128 <__ieee754_log+0x300>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e108:	f7f2 fa76 	bl	80005f8 <__aeabi_dmul>
 800e10c:	a308      	add	r3, pc, #32	@ (adr r3, 800e130 <__ieee754_log+0x308>)
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	4604      	mov	r4, r0
 800e114:	460d      	mov	r5, r1
 800e116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e11a:	e729      	b.n	800df70 <__ieee754_log+0x148>
 800e11c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e178 <__ieee754_log+0x350>
 800e120:	e698      	b.n	800de54 <__ieee754_log+0x2c>
 800e122:	bf00      	nop
 800e124:	f3af 8000 	nop.w
 800e128:	fee00000 	.word	0xfee00000
 800e12c:	3fe62e42 	.word	0x3fe62e42
 800e130:	35793c76 	.word	0x35793c76
 800e134:	3dea39ef 	.word	0x3dea39ef
 800e138:	55555555 	.word	0x55555555
 800e13c:	3fd55555 	.word	0x3fd55555
 800e140:	df3e5244 	.word	0xdf3e5244
 800e144:	3fc2f112 	.word	0x3fc2f112
 800e148:	96cb03de 	.word	0x96cb03de
 800e14c:	3fc74664 	.word	0x3fc74664
 800e150:	94229359 	.word	0x94229359
 800e154:	3fd24924 	.word	0x3fd24924
 800e158:	55555593 	.word	0x55555593
 800e15c:	3fe55555 	.word	0x3fe55555
 800e160:	d078c69f 	.word	0xd078c69f
 800e164:	3fc39a09 	.word	0x3fc39a09
 800e168:	1d8e78af 	.word	0x1d8e78af
 800e16c:	3fcc71c5 	.word	0x3fcc71c5
 800e170:	9997fa04 	.word	0x9997fa04
 800e174:	3fd99999 	.word	0x3fd99999
	...
 800e180:	c3500000 	.word	0xc3500000
 800e184:	43500000 	.word	0x43500000
 800e188:	7fefffff 	.word	0x7fefffff
 800e18c:	3ff00000 	.word	0x3ff00000
 800e190:	3fe00000 	.word	0x3fe00000

0800e194 <with_errno>:
 800e194:	b510      	push	{r4, lr}
 800e196:	ed2d 8b02 	vpush	{d8}
 800e19a:	eeb0 8a40 	vmov.f32	s16, s0
 800e19e:	eef0 8a60 	vmov.f32	s17, s1
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	f7fd fdb0 	bl	800bd08 <__errno>
 800e1a8:	eeb0 0a48 	vmov.f32	s0, s16
 800e1ac:	eef0 0a68 	vmov.f32	s1, s17
 800e1b0:	ecbd 8b02 	vpop	{d8}
 800e1b4:	6004      	str	r4, [r0, #0]
 800e1b6:	bd10      	pop	{r4, pc}

0800e1b8 <xflow>:
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	b507      	push	{r0, r1, r2, lr}
 800e1bc:	ec51 0b10 	vmov	r0, r1, d0
 800e1c0:	b183      	cbz	r3, 800e1e4 <xflow+0x2c>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e1cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d0:	f7f2 fa12 	bl	80005f8 <__aeabi_dmul>
 800e1d4:	ec41 0b10 	vmov	d0, r0, r1
 800e1d8:	2022      	movs	r0, #34	@ 0x22
 800e1da:	b003      	add	sp, #12
 800e1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e0:	f7ff bfd8 	b.w	800e194 <with_errno>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	e7ee      	b.n	800e1c8 <xflow+0x10>
 800e1ea:	0000      	movs	r0, r0
 800e1ec:	0000      	movs	r0, r0
	...

0800e1f0 <__math_uflow>:
 800e1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1f8 <__math_uflow+0x8>
 800e1f4:	f7ff bfe0 	b.w	800e1b8 <xflow>
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	10000000 	.word	0x10000000

0800e200 <__math_oflow>:
 800e200:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e208 <__math_oflow+0x8>
 800e204:	f7ff bfd8 	b.w	800e1b8 <xflow>
 800e208:	00000000 	.word	0x00000000
 800e20c:	70000000 	.word	0x70000000

0800e210 <_init>:
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e212:	bf00      	nop
 800e214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e216:	bc08      	pop	{r3}
 800e218:	469e      	mov	lr, r3
 800e21a:	4770      	bx	lr

0800e21c <_fini>:
 800e21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21e:	bf00      	nop
 800e220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e222:	bc08      	pop	{r3}
 800e224:	469e      	mov	lr, r3
 800e226:	4770      	bx	lr
