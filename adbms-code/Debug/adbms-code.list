
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800fd20  0800fd20  00010d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010500  08010500  000122ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010500  08010500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010508  08010508  000122ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010508  08010508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801050c  0801050c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08010510  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122ec  2**0
                  CONTENTS
 10 .bss          0000220c  200002ec  200002ec  000122ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024f8  200024f8  000122ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f23b  00000000  00000000  0001231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c38  00000000  00000000  00031557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  00036190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001289  00000000  00000000  000379b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026864  00000000  00000000  00038c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205f1  00000000  00000000  0005f4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e0e  00000000  00000000  0007fa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001568a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000784c  00000000  00000000  001568e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0015e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd08 	.word	0x0800fd08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	0800fd08 	.word	0x0800fd08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a8 	b.w	8000fb0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcb7 	bl	80005f8 <__aeabi_dmul>
 8000c8a:	f000 f993 	bl	8000fb4 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc38 	bl	8000504 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcae 	bl	80005f8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf0 	bl	8000288 <__aeabi_dsub>
 8000ca8:	f000 f984 	bl	8000fb4 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001004:	2300      	movs	r3, #0
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	e019      	b.n	800103e <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b29b      	uxth	r3, r3
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4053      	eors	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	490b      	ldr	r1, [pc, #44]	@ (8001058 <Pec15_Calc+0x64>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3e1      	bcc.n	800100a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	0800ff48 	.word	0x0800ff48

0800105c <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800106a:	2310      	movs	r3, #16
 800106c:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800106e:	238f      	movs	r3, #143	@ 0x8f
 8001070:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
 8001076:	e024      	b.n	80010c2 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	4053      	eors	r3, r2
 8001088:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800108a:	2308      	movs	r3, #8
 800108c:	753b      	strb	r3, [r7, #20]
 800108e:	e012      	b.n	80010b6 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800109a:	8afb      	ldrh	r3, [r7, #22]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	4053      	eors	r3, r2
 80010a6:	82fb      	strh	r3, [r7, #22]
 80010a8:	e002      	b.n	80010b0 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	753b      	strb	r3, [r7, #20]
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dcd6      	bgt.n	8001078 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010ee:	2306      	movs	r3, #6
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	e012      	b.n	800111a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001104:	8afa      	ldrh	r2, [r7, #22]
 8001106:	8a7b      	ldrh	r3, [r7, #18]
 8001108:	4053      	eors	r3, r2
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	e002      	b.n	8001114 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001114:	7d3b      	ldrb	r3, [r7, #20]
 8001116:	3b01      	subs	r3, #1
 8001118:	753b      	strb	r3, [r7, #20]
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e9      	bne.n	80010f4 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29b      	uxth	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 8001142:	230c      	movs	r3, #12
 8001144:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800114e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	a314      	add	r3, pc, #80	@ (adr r3, 80011b0 <Set_UnderOver_Voltage_Threshold+0x78>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb73 	bl	800084c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b01      	subs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 80011a2:	89bb      	ldrh	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	30553261 	.word	0x30553261
 80011b4:	3f63a92a 	.word	0x3f63a92a

080011b8 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <ADBMS_getVoltage+0x40>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	30553261 	.word	0x30553261
 80011fc:	3f23a92a 	.word	0x3f23a92a

08001200 <ADBMS_Set_Config_A>:

void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e0f7      	b.n	8001400 <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	b259      	sxtb	r1, r3
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	b25b      	sxtb	r3, r3
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	b25b      	sxtb	r3, r3
 800124e:	430b      	orrs	r3, r1
 8001250:	b259      	sxtb	r1, r3
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	1899      	adds	r1, r3, r2
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	3301      	adds	r3, #1
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	784a      	ldrb	r2, [r1, #1]
 8001288:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	01db      	lsls	r3, r3, #7
 80012a6:	b259      	sxtb	r1, r3
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	019b      	lsls	r3, r3, #6
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	430b      	orrs	r3, r1
 80012c8:	b259      	sxtb	r1, r3
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	430b      	orrs	r3, r1
 80012ea:	b259      	sxtb	r1, r3
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	3302      	adds	r3, #2
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	b2ca      	uxtb	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	885b      	ldrh	r3, [r3, #2]
 8001312:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001316:	b299      	uxth	r1, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3303      	adds	r3, #3
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001342:	b29b      	uxth	r3, r3
 8001344:	121b      	asrs	r3, r3, #8
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	3304      	adds	r3, #4
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	f001 0203 	and.w	r2, r1, #3
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	78db      	ldrb	r3, [r3, #3]
 8001372:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	b25b      	sxtb	r3, r3
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	b259      	sxtb	r1, r3
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b25b      	sxtb	r3, r3
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	b25b      	sxtb	r3, r3
 800139c:	430b      	orrs	r3, r1
 800139e:	b259      	sxtb	r1, r3
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	791b      	ldrb	r3, [r3, #4]
 80013b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	430b      	orrs	r3, r1
 80013c0:	b259      	sxtb	r1, r3
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	791b      	ldrb	r3, [r3, #4]
 80013d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	430b      	orrs	r3, r1
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	3305      	adds	r3, #5
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f67f af04 	bls.w	8001210 <ADBMS_Set_Config_A+0x10>
    }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e09b      	b.n	800155e <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	b299      	uxth	r1, r3
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	461a      	mov	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	b2ca      	uxtb	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	885b      	ldrh	r3, [r3, #2]
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	b29b      	uxth	r3, r3
 800145a:	b25b      	sxtb	r3, r3
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	b25a      	sxtb	r2, r3
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	440b      	add	r3, r1
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146e:	b29b      	uxth	r3, r3
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	b25b      	sxtb	r3, r3
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	b25b      	sxtb	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b259      	sxtb	r1, r3
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	3301      	adds	r3, #1
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	885b      	ldrh	r3, [r3, #2]
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	1119      	asrs	r1, r3, #4
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	3302      	adds	r3, #2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	440b      	add	r3, r1
 80014d6:	78db      	ldrb	r3, [r3, #3]
 80014d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	019b      	lsls	r3, r3, #6
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	440b      	add	r3, r1
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b259      	sxtb	r1, r3
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	3303      	adds	r3, #3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	b2ca      	uxtb	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	88d9      	ldrh	r1, [r3, #6]
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	3304      	adds	r3, #4
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	88db      	ldrh	r3, [r3, #6]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	b299      	uxth	r1, r3
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	3305      	adds	r3, #5
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b01      	cmp	r3, #1
 8001562:	f67f af60 	bls.w	8001426 <ADBMS_Set_Config_B+0x10>
    }
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	7138      	strb	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	b21b      	sxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21b      	sxth	r3, r3
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	b21b      	sxth	r3, r3
 800158c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001590:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 8001592:	793b      	ldrb	r3, [r7, #4]
 8001594:	b21b      	sxth	r3, r3
 8001596:	019b      	lsls	r3, r3, #6
 8001598:	b21b      	sxth	r3, r3
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 80015a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015a8:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 80015bc:	793b      	ldrb	r3, [r7, #4]
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 80015ce:	793b      	ldrb	r3, [r7, #4]
 80015d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf14      	ite	ne
 80015da:	2301      	movne	r3, #1
 80015dc:	2300      	moveq	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	801a      	strh	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <ADBMS_Set_ADSV>:

void ADBMS_Set_ADSV(adsv_ adsv, uint16_t *adsv_cmd_buffer)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	7138      	strb	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    *adsv_cmd_buffer = (0x1 << 8)
                        | ((adsv.cont && 0x1) << 7)
 8001602:	793b      	ldrb	r3, [r7, #4]
 8001604:	b21b      	sxth	r3, r3
 8001606:	01db      	lsls	r3, r3, #7
 8001608:	b21b      	sxth	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b21b      	sxth	r3, r3
                        | (0x3 << 5)
 800160e:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 8001612:	b21a      	sxth	r2, r3
                        | ((adsv.dcp && 0x1) << 4)
 8001614:	793b      	ldrb	r3, [r7, #4]
 8001616:	b21b      	sxth	r3, r3
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	b21b      	sxth	r3, r3
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
                        | (0x1 << 3)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
                        | (adsv.ow && 0x3);
 800162c:	793b      	ldrb	r3, [r7, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21b      	sxth	r3, r3
 8001644:	b29a      	uxth	r2, r3
    *adsv_cmd_buffer = (0x1 << 8)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	801a      	strh	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <ADBMS_Set_ADAX>:

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	7138      	strb	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 8001660:	793b      	ldrb	r3, [r7, #4]
 8001662:	b21b      	sxth	r3, r3
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21b      	sxth	r3, r3
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	b21b      	sxth	r3, r3
 800166e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001672:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 8001674:	793b      	ldrb	r3, [r7, #4]
 8001676:	b21b      	sxth	r3, r3
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	b21b      	sxth	r3, r3
 800167c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 8001686:	793a      	ldrb	r2, [r7, #4]
 8001688:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	2a00      	cmp	r2, #0
 8001690:	d001      	beq.n	8001696 <ADBMS_Set_ADAX+0x40>
 8001692:	2240      	movs	r2, #64	@ 0x40
 8001694:	e000      	b.n	8001698 <ADBMS_Set_ADAX+0x42>
 8001696:	2200      	movs	r2, #0
 8001698:	4313      	orrs	r3, r2
 800169a:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80016a2:	793b      	ldrb	r3, [r7, #4]
 80016a4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	801a      	strh	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <ADBMS_WakeUP_ICs_Polling>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

void ADBMS_WakeUP_ICs_Polling()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80016d2:	2300      	movs	r3, #0
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e012      	b.n	80016fe <ADBMS_WakeUP_ICs_Polling+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2110      	movs	r1, #16
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80016de:	f004 fc03 	bl	8005ee8 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f002 ffc6 	bl	8004674 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2110      	movs	r1, #16
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80016ee:	f004 fbfb 	bl	8005ee8 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f002 ffbe 	bl	8004674 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3301      	adds	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d9e9      	bls.n	80016d8 <ADBMS_WakeUP_ICs_Polling+0xc>
    }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020000 	.word	0x40020000

08001714 <ADBMS_Write_CMD_Polling>:

void ADBMS_Write_CMD_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
    uint8_t spi_dataBuf[4];
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	723b      	strb	r3, [r7, #8]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	727b      	strb	r3, [r7, #9]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4619      	mov	r1, r3
 8001736:	2002      	movs	r0, #2
 8001738:	f7ff fc5c 	bl	8000ff4 <Pec15_Calc>
 800173c:	4603      	mov	r3, r0
 800173e:	81fb      	strh	r3, [r7, #14]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	72bb      	strb	r3, [r7, #10]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	72fb      	strb	r3, [r7, #11]

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <ADBMS_Write_CMD_Polling+0x68>)
 8001756:	f004 fbc7 	bl	8005ee8 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800175a:	f107 0108 	add.w	r1, r7, #8
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	2204      	movs	r2, #4
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f006 fb24 	bl	8007db2 <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2110      	movs	r1, #16
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <ADBMS_Write_CMD_Polling+0x68>)
 8001770:	f004 fbba 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020000 	.word	0x40020000

08001780 <ADBMS_Write_Data_RegGrp_Polling>:

void ADBMS_Write_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_dataBuf)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	460b      	mov	r3, r1
 800178e:	817b      	strh	r3, [r7, #10]
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	b2da      	uxtb	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	897a      	ldrh	r2, [r7, #10]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fc23 	bl	8000ff4 <Pec15_Calc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	82bb      	strh	r3, [r7, #20]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 80017b2:	8abb      	ldrh	r3, [r7, #20]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	3302      	adds	r3, #2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3303      	adds	r3, #3
 80017c4:	8aba      	ldrh	r2, [r7, #20]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80017ca:	2302      	movs	r3, #2
 80017cc:	75fb      	strb	r3, [r7, #23]
 80017ce:	e04d      	b.n	800186c <ADBMS_Write_Data_RegGrp_Polling+0xec>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 80017d0:	2300      	movs	r3, #0
 80017d2:	75bb      	strb	r3, [r7, #22]
 80017d4:	e01b      	b.n	800180e <ADBMS_Write_Data_RegGrp_Polling+0x8e>
            spi_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	f1c3 0202 	rsb	r2, r3, #2
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	7dbb      	ldrb	r3, [r7, #22]
 80017e8:	4413      	add	r3, r2
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	441a      	add	r2, r3
 80017f0:	7dbb      	ldrb	r3, [r7, #22]
 80017f2:	1d19      	adds	r1, r3, #4
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	f1c3 0302 	rsb	r3, r3, #2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	4619      	mov	r1, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	440b      	add	r3, r1
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	3301      	adds	r3, #1
 800180c:	75bb      	strb	r3, [r7, #22]
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d9e0      	bls.n	80017d6 <ADBMS_Write_Data_RegGrp_Polling+0x56>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	f1c3 0202 	rsb	r2, r3, #2
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	461a      	mov	r2, r3
 800182a:	2106      	movs	r1, #6
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fc15 	bl	800105c <Pec10_Calc>
 8001832:	4603      	mov	r3, r0
 8001834:	827b      	strh	r3, [r7, #18]
        spi_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 8001836:	8a7b      	ldrh	r3, [r7, #18]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b29a      	uxth	r2, r3
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	f1c3 0302 	rsb	r3, r3, #2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	330a      	adds	r3, #10
 8001846:	4619      	mov	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	440b      	add	r3, r1
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
        spi_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	f1c3 0302 	rsb	r3, r3, #2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	330b      	adds	r3, #11
 800185a:	461a      	mov	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	8a7a      	ldrh	r2, [r7, #18]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	3b01      	subs	r3, #1
 800186a:	75fb      	strb	r3, [r7, #23]
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ae      	bne.n	80017d0 <ADBMS_Write_Data_RegGrp_Polling+0x50>
    }

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2110      	movs	r1, #16
 8001876:	4809      	ldr	r0, [pc, #36]	@ (800189c <ADBMS_Write_Data_RegGrp_Polling+0x11c>)
 8001878:	f004 fb36 	bl	8005ee8 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	2214      	movs	r2, #20
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f006 fa94 	bl	8007db2 <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2110      	movs	r1, #16
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <ADBMS_Write_Data_RegGrp_Polling+0x11c>)
 8001890:	f004 fb2a 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40020000 	.word	0x40020000

080018a0 <ADBMS_Read_Data_RegGrp_Polling>:
//     }
//     return pec_error;
// }

bool ADBMS_Read_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_dataBuf)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	@ 0x40
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	460b      	mov	r3, r1
 80018ae:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[DATABUF_LEN] = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 80018c0:	897b      	ldrh	r3, [r7, #10]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	753b      	strb	r3, [r7, #20]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 80018ca:	897b      	ldrh	r3, [r7, #10]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	757b      	strb	r3, [r7, #21]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff fb8c 	bl	8000ff4 <Pec15_Calc>
 80018dc:	4603      	mov	r3, r0
 80018de:	867b      	strh	r3, [r7, #50]	@ 0x32
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 80018e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	75bb      	strb	r3, [r7, #22]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 80018ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	75fb      	strb	r3, [r7, #23]

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2110      	movs	r1, #16
 80018f4:	4843      	ldr	r0, [pc, #268]	@ (8001a04 <ADBMS_Read_Data_RegGrp_Polling+0x164>)
 80018f6:	f004 faf7 	bl	8005ee8 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 80018fa:	f107 0114 	add.w	r1, r7, #20
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2314      	movs	r3, #20
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f006 fb96 	bl	800803a <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2110      	movs	r1, #16
 8001912:	483c      	ldr	r0, [pc, #240]	@ (8001a04 <ADBMS_Read_Data_RegGrp_Polling+0x164>)
 8001914:	f004 fae8 	bl	8005ee8 <HAL_GPIO_WritePin>

    // Discard data received during transmit phase
    uint8_t *rx_dataBuf = spi_dataBuf + CMD_LEN + PEC_LEN;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3304      	adds	r3, #4
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Move the incoming data from the spi data buffer to the correspoding data buffer array in memory
    bool pec_error = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800192a:	e060      	b.n	80019ee <ADBMS_Read_Data_RegGrp_Polling+0x14e>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001932:	e01c      	b.n	800196e <ADBMS_Read_Data_RegGrp_Polling+0xce>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001934:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001938:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	461a      	mov	r2, r3
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	1899      	adds	r1, r3, r2
 8001946:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	461a      	mov	r2, r3
 8001954:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001958:	4413      	add	r3, r2
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	780a      	ldrb	r2, [r1, #0]
 8001962:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001964:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001968:	3301      	adds	r3, #1
 800196a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800196e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001972:	2b05      	cmp	r3, #5
 8001974:	d9de      	bls.n	8001934 <ADBMS_Read_Data_RegGrp_Polling+0x94>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 8001976:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	3306      	adds	r3, #6
 800197e:	461a      	mov	r2, r3
 8001980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b21b      	sxth	r3, r3
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21b      	sxth	r3, r3
 800198c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001990:	b21a      	sxth	r2, r3
 8001992:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	3307      	adds	r3, #7
 800199a:	4619      	mov	r1, r3
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	440b      	add	r3, r1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 80019aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	461a      	mov	r2, r3
 80019b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b4:	4413      	add	r3, r2
 80019b6:	461a      	mov	r2, r3
 80019b8:	2106      	movs	r1, #6
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fb4e 	bl	800105c <Pec10_Calc>
 80019c0:	4603      	mov	r3, r0
 80019c2:	853b      	strh	r3, [r7, #40]	@ 0x28
        pec_error |= (rx_pec != calc_pec);
 80019c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019c8:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80019ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019cc:	4291      	cmp	r1, r2
 80019ce:	bf14      	ite	ne
 80019d0:	2201      	movne	r2, #1
 80019d2:	2200      	moveq	r2, #0
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	4313      	orrs	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80019e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80019e8:	3301      	adds	r3, #1
 80019ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80019ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d99a      	bls.n	800192c <ADBMS_Read_Data_RegGrp_Polling+0x8c>
    }

    return pec_error;
 80019f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3738      	adds	r7, #56	@ 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40020000 	.word	0x40020000

08001a08 <ADBMS_Initialize>:
#include "adbms_interface.h"

void ADBMS_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    adbms->ICs.hspi = hspi;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]
    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e042      	b.n	8001aa4 <ADBMS_Initialize+0x9c>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f503 72b0 	add.w	r2, r3, #352	@ 0x160
 8001a30:	7813      	ldrb	r3, [r2, #0]
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	7013      	strb	r3, [r2, #0]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	f503 72b0 	add.w	r2, r3, #352	@ 0x160
 8001a4a:	8853      	ldrh	r3, [r2, #2]
 8001a4c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001a50:	f361 134e 	bfi	r3, r1, #5, #10
 8001a54:	8053      	strh	r3, [r2, #2]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001a56:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001a5a:	f7ff fb6d 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001a68:	b291      	uxth	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	332d      	adds	r3, #45	@ 0x2d
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	889a      	ldrh	r2, [r3, #4]
 8001a74:	f361 020b 	bfi	r2, r1, #0, #12
 8001a78:	809a      	strh	r2, [r3, #4]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001a7a:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001b70 <ADBMS_Initialize+0x168>
 8001a7e:	f7ff fb5b 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001a8c:	b291      	uxth	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	332d      	adds	r3, #45	@ 0x2d
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	88da      	ldrh	r2, [r3, #6]
 8001a98:	f361 020b 	bfi	r2, r1, #0, #12
 8001a9c:	80da      	strh	r2, [r3, #6]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d9b9      	bls.n	8001a1e <ADBMS_Initialize+0x16>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	f892 317c 	ldrb.w	r3, [r2, #380]	@ 0x17c
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	f882 317c 	strb.w	r3, [r2, #380]	@ 0x17c

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 72b0 	add.w	r2, r3, #352	@ 0x160
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3380      	adds	r3, #128	@ 0x80
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff fb9b 	bl	8001200 <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	338c      	adds	r3, #140	@ 0x8c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7ff fc9d 	bl	8001416 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f893 017c 	ldrb.w	r0, [r3, #380]	@ 0x17c
 8001aea:	f7ff fd43 	bl	8001574 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4611      	mov	r1, r2
 8001af8:	f893 017e 	ldrb.w	r0, [r3, #382]	@ 0x17e
 8001afc:	f7ff fdab 	bl	8001656 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs_Polling();
 8001b00:	f7ff fde4 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001b04:	f7ff fde2 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_dataBuf);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <ADBMS_Initialize+0x16c>)
 8001b0e:	8819      	ldrh	r1, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3308      	adds	r3, #8
 8001b1a:	f7ff fe31 	bl	8001780 <ADBMS_Write_Data_RegGrp_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001b1e:	f7ff fdd5 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_dataBuf);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <ADBMS_Initialize+0x170>)
 8001b28:	8819      	ldrh	r1, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3308      	adds	r3, #8
 8001b34:	f7ff fe24 	bl	8001780 <ADBMS_Write_Data_RegGrp_Polling>

    // Turn on sensing
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adcv);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f7ff fde5 	bl	8001714 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f002 fd92 	bl	8004674 <HAL_Delay>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fdd9 	bl	8001714 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001b62:	2008      	movs	r0, #8
 8001b64:	f002 fd86 	bl	8004674 <HAL_Delay>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40866666 	.word	0x40866666
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000002 	.word	0x20000002

08001b7c <ADBMS_UpdateVoltages>:

void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    bool pec = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001b88:	f7ff fda0 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    // pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
    // uint16_t vregs[5] = {RDCVA, RDCVB, RDCVC, RDCVD, RDCVE};

    // uint16_t vregs[2] = {RDCVA, RDCVB};
    // pec |= ADBMS_Read_Data_Regs_Polling(adbms->ICs.hspi, 2, vregs, adbms->ICs.cell, adbms->ICs.spi_rx_dataBuf);
    adbms->voltage_pec_failure = pec;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f883 	bl	8001ca0 <ADBMS_CalculateValues_Voltages>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    bool pec = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001bb0:	f7ff fd8c 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <ADBMS_UpdateTemps+0xec>)
 8001bba:	8819      	ldrh	r1, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 7298 	add.w	r2, r3, #304	@ 0x130
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	f7ff fe6b 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <ADBMS_UpdateTemps+0xf0>)
 8001be4:	8819      	ldrh	r1, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001bec:	f103 020c 	add.w	r2, r3, #12
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	f7ff fe54 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <ADBMS_UpdateTemps+0xf4>)
 8001c12:	8819      	ldrh	r1, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001c1a:	f103 0218 	add.w	r2, r3, #24
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3308      	adds	r3, #8
 8001c22:	f7ff fe3d 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <ADBMS_UpdateTemps+0xf8>)
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001c48:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3308      	adds	r3, #8
 8001c50:	f7ff fe26 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
    adbms->temp_pec_failure = pec;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7ff fd49 	bl	8001714 <ADBMS_Write_CMD_Polling>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f90c 	bl	8001ea0 <ADBMS_CalculateValues_Temps>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000000e 	.word	0x2000000e
 8001c94:	20000010 	.word	0x20000010
 8001c98:	20000012 	.word	0x20000012
 8001c9c:	20000014 	.word	0x20000014

08001ca0 <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d014      	beq.n	8001ce2 <ADBMS_CalculateValues_Voltages+0x42>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00c      	beq.n	8001ce2 <ADBMS_CalculateValues_Voltages+0x42>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3255 	ldrb.w	r3, [r3, #597]	@ 0x255
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d022      	beq.n	8001d32 <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	ed93 7a97 	vldr	s14, [r3, #604]	@ 0x25c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	edc3 7a97 	vstr	s15, [r3, #604]	@ 0x25c
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8001d10:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd04      	ble.n	8001d28 <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001d26:	e0b5      	b.n	8001e94 <ADBMS_CalculateValues_Voltages+0x1f4>
            adbms->pec_fault_ = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        return;
 8001d30:	e0b0      	b.n	8001e94 <ADBMS_CalculateValues_Voltages+0x1f4>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
    adbms->max_v = 0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
    adbms->min_v = FLT_MAX;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a54      	ldr	r2, [pc, #336]	@ (8001e9c <ADBMS_CalculateValues_Voltages+0x1fc>)
 8001d4a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
 8001d52:	e091      	b.n	8001e78 <ADBMS_CalculateValues_Voltages+0x1d8>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8001d54:	2305      	movs	r3, #5
 8001d56:	753b      	strb	r3, [r7, #20]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	75bb      	strb	r3, [r7, #22]
 8001d5c:	e084      	b.n	8001e68 <ADBMS_CalculateValues_Voltages+0x1c8>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	757b      	strb	r3, [r7, #21]
 8001d62:	e079      	b.n	8001e58 <ADBMS_CalculateValues_Voltages+0x1b8>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001d64:	7dba      	ldrb	r2, [r7, #22]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	7d7a      	ldrb	r2, [r7, #21]
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4413      	add	r3, r2
 8001d74:	2b0d      	cmp	r3, #13
 8001d76:	dc73      	bgt.n	8001e60 <ADBMS_CalculateValues_Voltages+0x1c0>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001d78:	7dba      	ldrb	r2, [r7, #22]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4619      	mov	r1, r3
 8001d84:	7dfa      	ldrb	r2, [r7, #23]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	18ca      	adds	r2, r1, r3
 8001d90:	7d7b      	ldrb	r3, [r7, #21]
 8001d92:	4413      	add	r3, r2
 8001d94:	3301      	adds	r3, #1
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b219      	sxth	r1, r3
 8001da4:	7dba      	ldrb	r2, [r7, #22]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	7dfa      	ldrb	r2, [r7, #23]
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	18c2      	adds	r2, r0, r3
 8001dbc:	7d7b      	ldrb	r3, [r7, #21]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 8001dce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f9f0 	bl	80011b8 <ADBMS_getVoltage>
 8001dd8:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8001ddc:	7dfa      	ldrb	r2, [r7, #23]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4619      	mov	r1, r3
 8001de8:	7dba      	ldrb	r2, [r7, #22]
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	7d7a      	ldrb	r2, [r7, #21]
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4413      	add	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	3360      	adds	r3, #96	@ 0x60
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	ed93 7a8c 	vldr	s14, [r3, #560]	@ 0x230
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edc3 7a8c 	vstr	s15, [r3, #560]	@ 0x230
                if (curr_voltage > adbms->max_v){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 8001e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	dd03      	ble.n	8001e36 <ADBMS_CalculateValues_Voltages+0x196>
                    adbms->max_v = curr_voltage;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
                }
                if (curr_voltage < adbms->min_v){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8001e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d503      	bpl.n	8001e52 <ADBMS_CalculateValues_Voltages+0x1b2>
                    adbms->min_v = curr_voltage;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001e52:	7d7b      	ldrb	r3, [r7, #21]
 8001e54:	3302      	adds	r3, #2
 8001e56:	757b      	strb	r3, [r7, #21]
 8001e58:	7d7b      	ldrb	r3, [r7, #21]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d982      	bls.n	8001d64 <ADBMS_CalculateValues_Voltages+0xc4>
 8001e5e:	e000      	b.n	8001e62 <ADBMS_CalculateValues_Voltages+0x1c2>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001e60:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001e62:	7dbb      	ldrb	r3, [r7, #22]
 8001e64:	3301      	adds	r3, #1
 8001e66:	75bb      	strb	r3, [r7, #22]
 8001e68:	7dba      	ldrb	r2, [r7, #22]
 8001e6a:	7d3b      	ldrb	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f4ff af76 	bcc.w	8001d5e <ADBMS_CalculateValues_Voltages+0xbe>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	3301      	adds	r3, #1
 8001e76:	75fb      	strb	r3, [r7, #23]
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f67f af6a 	bls.w	8001d54 <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	ed93 7a8c 	vldr	s14, [r3, #560]	@ 0x230
 8001e86:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8001e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edc3 7a8f 	vstr	s15, [r3, #572]	@ 0x23c
}
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	7f7fffff 	.word	0x7f7fffff

08001ea0 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3253 	ldrb.w	r3, [r3, #595]	@ 0x253
 8001eae:	f083 0301 	eor.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d014      	beq.n	8001ee2 <ADBMS_CalculateValues_Temps+0x42>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <ADBMS_CalculateValues_Temps+0x42>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3255 	ldrb.w	r3, [r3, #597]	@ 0x255
 8001ece:	f083 0301 	eor.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d022      	beq.n	8001f32 <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	ed93 7a97 	vldr	s14, [r3, #604]	@ 0x25c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edc3 7a97 	vstr	s15, [r3, #604]	@ 0x25c
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8001f10:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	dd04      	ble.n	8001f28 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001f26:	e0e7      	b.n	80020f8 <ADBMS_CalculateValues_Temps+0x258>
            adbms->pec_fault_ = 0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        return;
 8001f30:	e0e2      	b.n	80020f8 <ADBMS_CalculateValues_Temps+0x258>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    adbms->min_temp = FLT_MAX;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a70      	ldr	r2, [pc, #448]	@ (8002108 <ADBMS_CalculateValues_Temps+0x268>)
 8001f46:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    bool openwire_temp_fault = false;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e0b1      	b.n	80020ba <ADBMS_CalculateValues_Temps+0x21a>
    {
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	76fb      	strb	r3, [r7, #27]
 8001f5a:	e0a7      	b.n	80020ac <ADBMS_CalculateValues_Temps+0x20c>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	76bb      	strb	r3, [r7, #26]
 8001f60:	e09d      	b.n	800209e <ADBMS_CalculateValues_Temps+0x1fe>
            {
                // skip because only want temps 2-10
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8001f62:	7efb      	ldrb	r3, [r7, #27]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <ADBMS_CalculateValues_Temps+0xd0>
 8001f68:	7ebb      	ldrb	r3, [r7, #26]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	f240 8093 	bls.w	8002096 <ADBMS_CalculateValues_Temps+0x1f6>
 8001f70:	7efa      	ldrb	r2, [r7, #27]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	7eba      	ldrb	r2, [r7, #26]
 8001f7a:	0852      	lsrs	r2, r2, #1
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4413      	add	r3, r2
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	f300 8088 	bgt.w	8002096 <ADBMS_CalculateValues_Temps+0x1f6>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001f86:	7efa      	ldrb	r2, [r7, #27]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4619      	mov	r1, r3
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	18ca      	adds	r2, r1, r3
 8001f9e:	7ebb      	ldrb	r3, [r7, #26]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b219      	sxth	r1, r3
 8001fb2:	7efa      	ldrb	r2, [r7, #27]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	18c2      	adds	r2, r0, r3
 8001fca:	7ebb      	ldrb	r3, [r7, #26]
 8001fcc:	4413      	add	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	833b      	strh	r3, [r7, #24]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 8001fdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f8e9 	bl	80011b8 <ADBMS_getVoltage>
 8001fe6:	ed87 0a05 	vstr	s0, [r7, #20]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 8001fea:	4b48      	ldr	r3, [pc, #288]	@ (800210c <ADBMS_CalculateValues_Temps+0x26c>)
 8001fec:	613b      	str	r3, [r7, #16]
                if (vref - raw_temp_voltage < 1e-1)
 8001fee:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	ee17 0a90 	vmov	r0, s15
 8001ffe:	f7fe faa3 	bl	8000548 <__aeabi_f2d>
 8002002:	a33f      	add	r3, pc, #252	@ (adr r3, 8002100 <ADBMS_CalculateValues_Temps+0x260>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fd68 	bl	8000adc <__aeabi_dcmplt>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <ADBMS_CalculateValues_Temps+0x178>
                    openwire_temp_fault = true;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 8002018:	edd7 0a04 	vldr	s1, [r7, #16]
 800201c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002020:	f002 f992 	bl	8004348 <getTemp>
 8002024:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->temperatures[cic*NUM_TEMPS_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	00d9      	lsls	r1, r3, #3
 800202c:	7efa      	ldrb	r2, [r7, #27]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	440b      	add	r3, r1
 8002036:	7eba      	ldrb	r2, [r7, #26]
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	4413      	add	r3, r2
 800203e:	3b02      	subs	r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	337c      	adds	r3, #124	@ 0x7c
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 800204c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002050:	edd7 7a03 	vldr	s15, [r7, #12]
 8002054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002058:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8002062:	ed97 7a03 	vldr	s14, [r7, #12]
 8002066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	dd03      	ble.n	8002078 <ADBMS_CalculateValues_Temps+0x1d8>
                    adbms->max_temp = curr_temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
                if (curr_temp < adbms->min_temp)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 800207e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d505      	bpl.n	8002098 <ADBMS_CalculateValues_Temps+0x1f8>
                    adbms->min_temp = curr_temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
 8002094:	e000      	b.n	8002098 <ADBMS_CalculateValues_Temps+0x1f8>
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8002096:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002098:	7ebb      	ldrb	r3, [r7, #26]
 800209a:	3302      	adds	r3, #2
 800209c:	76bb      	strb	r3, [r7, #26]
 800209e:	7ebb      	ldrb	r3, [r7, #26]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	f67f af5e 	bls.w	8001f62 <ADBMS_CalculateValues_Temps+0xc2>
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 80020a6:	7efb      	ldrb	r3, [r7, #27]
 80020a8:	3301      	adds	r3, #1
 80020aa:	76fb      	strb	r3, [r7, #27]
 80020ac:	7efb      	ldrb	r3, [r7, #27]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	f67f af54 	bls.w	8001f5c <ADBMS_CalculateValues_Temps+0xbc>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f77f af4a 	ble.w	8001f56 <ADBMS_CalculateValues_Temps+0xb6>
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <ADBMS_CalculateValues_Temps+0x234>
 80020cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ADBMS_CalculateValues_Temps+0x238>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <ADBMS_CalculateValues_Temps+0x23a>
 80020d8:	2300      	movs	r3, #0
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 80020e6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020ea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a92 	vstr	s15, [r3, #584]	@ 0x248
    
}
 80020f8:	3728      	adds	r7, #40	@ 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	9999999a 	.word	0x9999999a
 8002104:	3fb99999 	.word	0x3fb99999
 8002108:	7f7fffff 	.word	0x7f7fffff
 800210c:	40400000 	.word	0x40400000

08002110 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <UpdateADInternalFault+0x2e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	a330      	add	r3, pc, #192	@ (adr r3, 80021f0 <UpdateADInternalFault+0xe0>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fcf0 	bl	8000b18 <__aeabi_dcmpgt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <UpdateADInternalFault+0x32>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <UpdateADInternalFault+0x34>
 8002142:	2300      	movs	r3, #0
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <UpdateADInternalFault+0x5e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8002160:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	d501      	bpl.n	8002172 <UpdateADInternalFault+0x62>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <UpdateADInternalFault+0x64>
 8002172:	2300      	movs	r3, #0
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <UpdateADInternalFault+0x8e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8002190:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80021e8 <UpdateADInternalFault+0xd8>
 8002194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	dd01      	ble.n	80021a2 <UpdateADInternalFault+0x92>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <UpdateADInternalFault+0x94>
 80021a2:	2300      	movs	r3, #0
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <UpdateADInternalFault+0xbe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 80021c0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80021ec <UpdateADInternalFault+0xdc>
 80021c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	d501      	bpl.n	80021d2 <UpdateADInternalFault+0xc2>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <UpdateADInternalFault+0xc4>
 80021d2:	2300      	movs	r3, #0
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	42b40000 	.word	0x42b40000
 80021ec:	c2200000 	.word	0xc2200000
 80021f0:	cccccccd 	.word	0xcccccccd
 80021f4:	4010cccc 	.word	0x4010cccc

080021f8 <cellBalanceOff>:
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_dataBuf);
}

void cellBalanceOff(adbms_ *adbms)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
    // Turn off CB indication LED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	4815      	ldr	r0, [pc, #84]	@ (800225c <cellBalanceOff+0x64>)
 8002206:	f003 fe6f 	bl	8005ee8 <HAL_GPIO_WritePin>

    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e009      	b.n	8002224 <cellBalanceOff+0x2c>
    {
        adbms->cfb[cic].dcc = 0;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	332d      	adds	r3, #45	@ 0x2d
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	2200      	movs	r2, #0
 800221c:	815a      	strh	r2, [r3, #10]
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	ddf2      	ble.n	8002210 <cellBalanceOff+0x18>
    }
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	338c      	adds	r3, #140	@ 0x8c
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7ff f8ed 	bl	8001416 <ADBMS_Set_Config_B>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_dataBuf);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <cellBalanceOff+0x68>)
 8002242:	8819      	ldrh	r1, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3308      	adds	r3, #8
 800224e:	f7ff fa97 	bl	8001780 <ADBMS_Write_Data_RegGrp_Polling>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020400 	.word	0x40020400
 8002260:	20000002 	.word	0x20000002

08002264 <UpdateOWCFault>:

void UpdateOWCFault(adbms_ *adbms)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    // check openwire fault
    ADBMS_WakeUP_ICs_Polling();
 800226c:	f7ff fa2e 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    cellBalanceOff(adbms);   // need to turn off cell balancing to check for OWC
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffc1 	bl	80021f8 <cellBalanceOff>

    /// OWC EVEN Check
    adbms->adsv.cont = 1;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    adbms->adsv.ow = 1; // Enable OW on even-channel 
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 800228a:	2101      	movs	r1, #1
 800228c:	f361 0383 	bfi	r3, r1, #2, #2
 8002290:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4611      	mov	r1, r2
 800229e:	f893 017d 	ldrb.w	r0, [r3, #381]	@ 0x17d
 80022a2:	f7ff f9a9 	bl	80015f8 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fa2e 	bl	8001714 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 80022b8:	2008      	movs	r0, #8
 80022ba:	f002 f9db 	bl	8004674 <HAL_Delay>

    // Get new s-channel voltages
    bool pec = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	747b      	strb	r3, [r7, #17]
    ADBMS_WakeUP_ICs_Polling();
 80022c2:	f7ff fa03 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <UpdateOWCFault+0x234>)
 80022cc:	8819      	ldrh	r1, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3308      	adds	r3, #8
 80022d8:	f7ff fae2 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7c7b      	ldrb	r3, [r7, #17]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	4b69      	ldr	r3, [pc, #420]	@ (800249c <UpdateOWCFault+0x238>)
 80022f6:	8819      	ldrh	r1, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	33e8      	adds	r3, #232	@ 0xe8
 80022fc:	f103 020c 	add.w	r2, r3, #12
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3308      	adds	r3, #8
 8002304:	f7ff facc 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	7c7b      	ldrb	r3, [r7, #17]
 800230e:	4313      	orrs	r3, r2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4b5f      	ldr	r3, [pc, #380]	@ (80024a0 <UpdateOWCFault+0x23c>)
 8002322:	8819      	ldrh	r1, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	33e8      	adds	r3, #232	@ 0xe8
 8002328:	f103 0218 	add.w	r2, r3, #24
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3308      	adds	r3, #8
 8002330:	f7ff fab6 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	7c7b      	ldrb	r3, [r7, #17]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4b55      	ldr	r3, [pc, #340]	@ (80024a4 <UpdateOWCFault+0x240>)
 800234e:	8819      	ldrh	r1, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	33e8      	adds	r3, #232	@ 0xe8
 8002354:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3308      	adds	r3, #8
 800235c:	f7ff faa0 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	7c7b      	ldrb	r3, [r7, #17]
 8002366:	4313      	orrs	r3, r2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <UpdateOWCFault+0x244>)
 800237a:	8819      	ldrh	r1, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	33e8      	adds	r3, #232	@ 0xe8
 8002380:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3308      	adds	r3, #8
 8002388:	f7ff fa8a 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	7c7b      	ldrb	r3, [r7, #17]
 8002392:	4313      	orrs	r3, r2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	747b      	strb	r3, [r7, #17]

    if(pec){
 80023a0:	7c7b      	ldrb	r3, [r7, #17]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <UpdateOWCFault+0x176>
        adbms->current_owc_failures += 1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edd3 7a96 	vldr	s15, [r3, #600]	@ 0x258
 80023ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	edc3 7a96 	vstr	s15, [r3, #600]	@ 0x258
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	edd3 7a96 	vldr	s15, [r3, #600]	@ 0x258
 80023c0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80023c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	dc00      	bgt.n	80023d0 <UpdateOWCFault+0x16c>
            adbms->pec_fault_ = 1;
        }
        return;
 80023ce:	e1bb      	b.n	8002748 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        return;
 80023d8:	e1b6      	b.n	8002748 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
 80023e8:	e06b      	b.n	80024c2 <UpdateOWCFault+0x25e>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 80023ea:	2305      	movs	r3, #5
 80023ec:	737b      	strb	r3, [r7, #13]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	75bb      	strb	r3, [r7, #22]
 80023f2:	e05f      	b.n	80024b4 <UpdateOWCFault+0x250>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80023f4:	2300      	movs	r3, #0
 80023f6:	757b      	strb	r3, [r7, #21]
 80023f8:	e04a      	b.n	8002490 <UpdateOWCFault+0x22c>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80023fa:	7dba      	ldrb	r2, [r7, #22]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	7d7a      	ldrb	r2, [r7, #21]
 8002404:	0852      	lsrs	r2, r2, #1
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	4413      	add	r3, r2
 800240a:	2b0d      	cmp	r3, #13
 800240c:	dc4e      	bgt.n	80024ac <UpdateOWCFault+0x248>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 800240e:	7dba      	ldrb	r2, [r7, #22]
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4619      	mov	r1, r3
 800241a:	7dfa      	ldrb	r2, [r7, #23]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	18ca      	adds	r2, r1, r3
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	4413      	add	r3, r2
 800242a:	3301      	adds	r3, #1
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002434:	b21b      	sxth	r3, r3
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b219      	sxth	r1, r3
 800243a:	7dba      	ldrb	r2, [r7, #22]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4618      	mov	r0, r3
 8002446:	7dfa      	ldrb	r2, [r7, #23]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	18c2      	adds	r2, r0, r3
 8002452:	7d7b      	ldrb	r3, [r7, #21]
 8002454:	4413      	add	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800245e:	b21b      	sxth	r3, r3
 8002460:	430b      	orrs	r3, r1
 8002462:	817b      	strh	r3, [r7, #10]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 8002464:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fea5 	bl	80011b8 <ADBMS_getVoltage>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d504      	bpl.n	800248a <UpdateOWCFault+0x226>
                {
                    adbms->openwire_fault_ = 1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250
                    return;
 8002488:	e15e      	b.n	8002748 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 800248a:	7d7b      	ldrb	r3, [r7, #21]
 800248c:	3302      	adds	r3, #2
 800248e:	757b      	strb	r3, [r7, #21]
 8002490:	7d7b      	ldrb	r3, [r7, #21]
 8002492:	2b05      	cmp	r3, #5
 8002494:	d9b1      	bls.n	80023fa <UpdateOWCFault+0x196>
 8002496:	e00a      	b.n	80024ae <UpdateOWCFault+0x24a>
 8002498:	20000004 	.word	0x20000004
 800249c:	20000006 	.word	0x20000006
 80024a0:	20000008 	.word	0x20000008
 80024a4:	2000000a 	.word	0x2000000a
 80024a8:	2000000c 	.word	0x2000000c
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80024ac:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	3301      	adds	r3, #1
 80024b2:	75bb      	strb	r3, [r7, #22]
 80024b4:	7dba      	ldrb	r2, [r7, #22]
 80024b6:	7b7b      	ldrb	r3, [r7, #13]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d39b      	bcc.n	80023f4 <UpdateOWCFault+0x190>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	3301      	adds	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d990      	bls.n	80023ea <UpdateOWCFault+0x186>
            }
        }
    }

    /// OWC ODD Check
    adbms->adsv.cont = 1;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    adbms->adsv.ow = 2; // Enable OW on odd-channel 
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 80024dc:	2102      	movs	r1, #2
 80024de:	f361 0383 	bfi	r3, r1, #2, #2
 80024e2:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4611      	mov	r1, r2
 80024f0:	f893 017d 	ldrb.w	r0, [r3, #381]	@ 0x17d
 80024f4:	f7ff f880 	bl	80015f8 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7ff f905 	bl	8001714 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 800250a:	2008      	movs	r0, #8
 800250c:	f002 f8b2 	bl	8004674 <HAL_Delay>

    // Get new s-channel voltages
    ADBMS_WakeUP_ICs_Polling();
 8002510:	f7ff f8dc 	bl	80016cc <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	4b8d      	ldr	r3, [pc, #564]	@ (8002750 <UpdateOWCFault+0x4ec>)
 800251a:	8819      	ldrh	r1, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3308      	adds	r3, #8
 8002526:	f7ff f9bb 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	7c7b      	ldrb	r3, [r7, #17]
 8002530:	4313      	orrs	r3, r2
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	4b84      	ldr	r3, [pc, #528]	@ (8002754 <UpdateOWCFault+0x4f0>)
 8002544:	8819      	ldrh	r1, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	33e8      	adds	r3, #232	@ 0xe8
 800254a:	f103 020c 	add.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3308      	adds	r3, #8
 8002552:	f7ff f9a5 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	7c7b      	ldrb	r3, [r7, #17]
 800255c:	4313      	orrs	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <UpdateOWCFault+0x4f4>)
 8002570:	8819      	ldrh	r1, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	33e8      	adds	r3, #232	@ 0xe8
 8002576:	f103 0218 	add.w	r2, r3, #24
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3308      	adds	r3, #8
 800257e:	f7ff f98f 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	7c7b      	ldrb	r3, [r7, #17]
 8002588:	4313      	orrs	r3, r2
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	4b70      	ldr	r3, [pc, #448]	@ (800275c <UpdateOWCFault+0x4f8>)
 800259c:	8819      	ldrh	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	33e8      	adds	r3, #232	@ 0xe8
 80025a2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3308      	adds	r3, #8
 80025aa:	f7ff f979 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	7c7b      	ldrb	r3, [r7, #17]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	4b66      	ldr	r3, [pc, #408]	@ (8002760 <UpdateOWCFault+0x4fc>)
 80025c8:	8819      	ldrh	r1, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	33e8      	adds	r3, #232	@ 0xe8
 80025ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3308      	adds	r3, #8
 80025d6:	f7ff f963 	bl	80018a0 <ADBMS_Read_Data_RegGrp_Polling>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	7c7b      	ldrb	r3, [r7, #17]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	747b      	strb	r3, [r7, #17]

    if(pec){
 80025ee:	7c7b      	ldrb	r3, [r7, #17]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d019      	beq.n	8002628 <UpdateOWCFault+0x3c4>
        adbms->current_owc_failures += 1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edd3 7a96 	vldr	s15, [r3, #600]	@ 0x258
 80025fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	edc3 7a96 	vstr	s15, [r3, #600]	@ 0x258
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	edd3 7a96 	vldr	s15, [r3, #600]	@ 0x258
 800260e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	dc00      	bgt.n	800261e <UpdateOWCFault+0x3ba>
            adbms->pec_fault_ = 1;
        }
        return;
 800261c:	e094      	b.n	8002748 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
        return;
 8002626:	e08f      	b.n	8002748 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002632:	2300      	movs	r3, #0
 8002634:	753b      	strb	r3, [r7, #20]
 8002636:	e061      	b.n	80026fc <UpdateOWCFault+0x498>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8002638:	2305      	movs	r3, #5
 800263a:	743b      	strb	r3, [r7, #16]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
 8002640:	e055      	b.n	80026ee <UpdateOWCFault+0x48a>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002642:	2300      	movs	r3, #0
 8002644:	74bb      	strb	r3, [r7, #18]
 8002646:	e04a      	b.n	80026de <UpdateOWCFault+0x47a>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002648:	7cfa      	ldrb	r2, [r7, #19]
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	7cba      	ldrb	r2, [r7, #18]
 8002652:	0852      	lsrs	r2, r2, #1
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4413      	add	r3, r2
 8002658:	2b0d      	cmp	r3, #13
 800265a:	dc44      	bgt.n	80026e6 <UpdateOWCFault+0x482>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 800265c:	7cfa      	ldrb	r2, [r7, #19]
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4619      	mov	r1, r3
 8002668:	7d3a      	ldrb	r2, [r7, #20]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	18ca      	adds	r2, r1, r3
 8002674:	7cbb      	ldrb	r3, [r7, #18]
 8002676:	4413      	add	r3, r2
 8002678:	3301      	adds	r3, #1
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002682:	b21b      	sxth	r3, r3
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	b219      	sxth	r1, r3
 8002688:	7cfa      	ldrb	r2, [r7, #19]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4618      	mov	r0, r3
 8002694:	7d3a      	ldrb	r2, [r7, #20]
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	18c2      	adds	r2, r0, r3
 80026a0:	7cbb      	ldrb	r3, [r7, #18]
 80026a2:	4413      	add	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	430b      	orrs	r3, r1
 80026b0:	81fb      	strh	r3, [r7, #14]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 80026b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd7e 	bl	80011b8 <ADBMS_getVoltage>
 80026bc:	eef0 7a40 	vmov.f32	s15, s0
 80026c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d504      	bpl.n	80026d8 <UpdateOWCFault+0x474>
                {
                    adbms->openwire_fault_ = 1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250
                    return;
 80026d6:	e037      	b.n	8002748 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80026d8:	7cbb      	ldrb	r3, [r7, #18]
 80026da:	3302      	adds	r3, #2
 80026dc:	74bb      	strb	r3, [r7, #18]
 80026de:	7cbb      	ldrb	r3, [r7, #18]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d9b1      	bls.n	8002648 <UpdateOWCFault+0x3e4>
 80026e4:	e000      	b.n	80026e8 <UpdateOWCFault+0x484>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80026e6:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	3301      	adds	r3, #1
 80026ec:	74fb      	strb	r3, [r7, #19]
 80026ee:	7cfa      	ldrb	r2, [r7, #19]
 80026f0:	7c3b      	ldrb	r3, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d3a5      	bcc.n	8002642 <UpdateOWCFault+0x3de>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80026f6:	7d3b      	ldrb	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	753b      	strb	r3, [r7, #20]
 80026fc:	7d3b      	ldrb	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d99a      	bls.n	8002638 <UpdateOWCFault+0x3d4>
            }
        }
    }

    /// Turn off owc
    adbms->adsv.cont = 0;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    adbms->adsv.ow = 0; // Enable OW on odd-channel 
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	f892 317d 	ldrb.w	r3, [r2, #381]	@ 0x17d
 8002716:	f023 030c 	bic.w	r3, r3, #12
 800271a:	f882 317d 	strb.w	r3, [r2, #381]	@ 0x17d
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4611      	mov	r1, r2
 8002728:	f893 017d 	ldrb.w	r0, [r3, #381]	@ 0x17d
 800272c:	f7fe ff64 	bl	80015f8 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fe ffe9 	bl	8001714 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);    // S-Channels are updated at 8ms
 8002742:	2001      	movs	r0, #1
 8002744:	f001 ff96 	bl	8004674 <HAL_Delay>
}
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004
 8002754:	20000006 	.word	0x20000006
 8002758:	20000008 	.word	0x20000008
 800275c:	2000000a 	.word	0x2000000a
 8002760:	2000000c 	.word	0x2000000c

08002764 <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 800276c:	487a      	ldr	r0, [pc, #488]	@ (8002958 <ADBMS_Print_Vals+0x1f4>)
 800276e:	f00a ffcd 	bl	800d70c <puts>
    printf("total v: %f\n", adbms->total_v);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fee5 	bl	8000548 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4876      	ldr	r0, [pc, #472]	@ (800295c <ADBMS_Print_Vals+0x1f8>)
 8002784:	f00a ff52 	bl	800d62c <iprintf>
    printf("max v: %f\t", adbms->max_v);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd feda 	bl	8000548 <__aeabi_f2d>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4871      	ldr	r0, [pc, #452]	@ (8002960 <ADBMS_Print_Vals+0x1fc>)
 800279a:	f00a ff47 	bl	800d62c <iprintf>
    printf("min v: %f\t", adbms->min_v);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fecf 	bl	8000548 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	486d      	ldr	r0, [pc, #436]	@ (8002964 <ADBMS_Print_Vals+0x200>)
 80027b0:	f00a ff3c 	bl	800d62c <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fec4 	bl	8000548 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4868      	ldr	r0, [pc, #416]	@ (8002968 <ADBMS_Print_Vals+0x204>)
 80027c6:	f00a ff31 	bl	800d62c <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	ed93 7a8d 	vldr	s14, [r3, #564]	@ 0x234
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 80027d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027da:	ee17 0a90 	vmov	r0, s15
 80027de:	f7fd feb3 	bl	8000548 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4861      	ldr	r0, [pc, #388]	@ (800296c <ADBMS_Print_Vals+0x208>)
 80027e8:	f00a ff20 	bl	800d62c <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e02a      	b.n	8002848 <ADBMS_Print_Vals+0xe4>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e021      	b.n	800283c <ADBMS_Print_Vals+0xd8>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	461a      	mov	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	1c5c      	adds	r4, r3, #1
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	461a      	mov	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	3360      	adds	r3, #96	@ 0x60
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe8f 	bl	8000548 <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4621      	mov	r1, r4
 8002830:	484f      	ldr	r0, [pc, #316]	@ (8002970 <ADBMS_Print_Vals+0x20c>)
 8002832:	f00a fefb 	bl	800d62c <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3301      	adds	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b0d      	cmp	r3, #13
 8002840:	ddda      	ble.n	80027f8 <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b01      	cmp	r3, #1
 800284c:	ddd1      	ble.n	80027f2 <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 800284e:	200a      	movs	r0, #10
 8002850:	f00a fefe 	bl	800d650 <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 8002854:	4847      	ldr	r0, [pc, #284]	@ (8002974 <ADBMS_Print_Vals+0x210>)
 8002856:	f00a ff59 	bl	800d70c <puts>
    printf("max temp: %f\t", adbms->max_temp);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe71 	bl	8000548 <__aeabi_f2d>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4843      	ldr	r0, [pc, #268]	@ (8002978 <ADBMS_Print_Vals+0x214>)
 800286c:	f00a fede 	bl	800d62c <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3244 	ldr.w	r3, [r3, #580]	@ 0x244
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe66 	bl	8000548 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	483e      	ldr	r0, [pc, #248]	@ (800297c <ADBMS_Print_Vals+0x218>)
 8002882:	f00a fed3 	bl	800d62c <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe5b 	bl	8000548 <__aeabi_f2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	483a      	ldr	r0, [pc, #232]	@ (8002980 <ADBMS_Print_Vals+0x21c>)
 8002898:	f00a fec8 	bl	800d62c <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e022      	b.n	80028e8 <ADBMS_Print_Vals+0x184>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	e019      	b.n	80028dc <ADBMS_Print_Vals+0x178>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	00da      	lsls	r2, r3, #3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4413      	add	r3, r2
 80028b0:	1c5c      	adds	r4, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	00da      	lsls	r2, r3, #3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4413      	add	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	337c      	adds	r3, #124	@ 0x7c
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe3f 	bl	8000548 <__aeabi_f2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4621      	mov	r1, r4
 80028d0:	482c      	ldr	r0, [pc, #176]	@ (8002984 <ADBMS_Print_Vals+0x220>)
 80028d2:	f00a feab 	bl	800d62c <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3301      	adds	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	dde2      	ble.n	80028a8 <ADBMS_Print_Vals+0x144>
    for (int i = 0; i < NUM_CHIPS; i++)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	ddd9      	ble.n	80028a2 <ADBMS_Print_Vals+0x13e>
        }
    }
    printf("\n");
 80028ee:	200a      	movs	r0, #10
 80028f0:	f00a feae 	bl	800d650 <putchar>

    printf("Faults\n");
 80028f4:	4824      	ldr	r0, [pc, #144]	@ (8002988 <ADBMS_Print_Vals+0x224>)
 80028f6:	f00a ff09 	bl	800d70c <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8002900:	4619      	mov	r1, r3
 8002902:	4822      	ldr	r0, [pc, #136]	@ (800298c <ADBMS_Print_Vals+0x228>)
 8002904:	f00a fe92 	bl	800d62c <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 800290e:	4619      	mov	r1, r3
 8002910:	481f      	ldr	r0, [pc, #124]	@ (8002990 <ADBMS_Print_Vals+0x22c>)
 8002912:	f00a fe8b 	bl	800d62c <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 800291c:	4619      	mov	r1, r3
 800291e:	481d      	ldr	r0, [pc, #116]	@ (8002994 <ADBMS_Print_Vals+0x230>)
 8002920:	f00a fe84 	bl	800d62c <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 800292a:	4619      	mov	r1, r3
 800292c:	481a      	ldr	r0, [pc, #104]	@ (8002998 <ADBMS_Print_Vals+0x234>)
 800292e:	f00a fe7d 	bl	800d62c <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8002938:	4619      	mov	r1, r3
 800293a:	4818      	ldr	r0, [pc, #96]	@ (800299c <ADBMS_Print_Vals+0x238>)
 800293c:	f00a fe76 	bl	800d62c <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8002946:	4619      	mov	r1, r3
 8002948:	4815      	ldr	r0, [pc, #84]	@ (80029a0 <ADBMS_Print_Vals+0x23c>)
 800294a:	f00a fe6f 	bl	800d62c <iprintf>
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	0800fd20 	.word	0x0800fd20
 800295c:	0800fd2c 	.word	0x0800fd2c
 8002960:	0800fd3c 	.word	0x0800fd3c
 8002964:	0800fd48 	.word	0x0800fd48
 8002968:	0800fd54 	.word	0x0800fd54
 800296c:	0800fd60 	.word	0x0800fd60
 8002970:	0800fd70 	.word	0x0800fd70
 8002974:	0800fd7c 	.word	0x0800fd7c
 8002978:	0800fd84 	.word	0x0800fd84
 800297c:	0800fd94 	.word	0x0800fd94
 8002980:	0800fda4 	.word	0x0800fda4
 8002984:	0800fdb4 	.word	0x0800fdb4
 8002988:	0800fdbc 	.word	0x0800fdbc
 800298c:	0800fdc4 	.word	0x0800fdc4
 8002990:	0800fdd8 	.word	0x0800fdd8
 8002994:	0800fdec 	.word	0x0800fdec
 8002998:	0800fdf8 	.word	0x0800fdf8
 800299c:	0800fe10 	.word	0x0800fe10
 80029a0:	0800fe20 	.word	0x0800fe20

080029a4 <bms_mainbaord_setup>:
#include "bms.h"

mainboard_ mainboard;

void bms_mainbaord_setup(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc, CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09c      	sub	sp, #112	@ 0x70
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	// initialize handles
	mainboard.hadc = hadc;
 80029b2:	4a36      	ldr	r2, [pc, #216]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
	mainboard.hcan_drive = hcan1;
 80029ba:	4a34      	ldr	r2, [pc, #208]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
	mainboard.hcan_data = hcan2;
 80029c2:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

	// get offset for current
	mainboard.current_offset = getCurrentOffset(mainboard.hadc);
 80029ca:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fe21 	bl	8003618 <getCurrentOffset>
 80029d6:	eef0 7a40 	vmov.f32	s15, s0
 80029da:	4b2c      	ldr	r3, [pc, #176]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029dc:	edc3 7aa0 	vstr	s15, [r3, #640]	@ 0x280

	// initialize ad chip;
	ADBMS_Initialize(&mainboard.adbms, hspi);
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	482a      	ldr	r0, [pc, #168]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029e4:	f7ff f810 	bl	8001a08 <ADBMS_Initialize>

	// initialize CAN;
	BMS_Initialize_Can(&mainboard);
 80029e8:	4828      	ldr	r0, [pc, #160]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 80029ea:	f000 f961 	bl	8002cb0 <BMS_Initialize_Can>

	// initialize the timers: adbms_mainboard_loop, drive_can, data_can
	timer_ t_adbms = CreateTimer(500, bms_mainboard_loop);
 80029ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029f2:	4a27      	ldr	r2, [pc, #156]	@ (8002a90 <bms_mainbaord_setup+0xec>)
 80029f4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fd2d 	bl	8004458 <CreateTimer>
	timer_ t_adbms_owc_check = CreateTimer(30000, adbms_owc_loop);
 80029fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a02:	4a24      	ldr	r2, [pc, #144]	@ (8002a94 <bms_mainbaord_setup+0xf0>)
 8002a04:	f247 5130 	movw	r1, #30000	@ 0x7530
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fd25 	bl	8004458 <CreateTimer>
	timer_ t_drive_can = CreateTimer(100, drive_can_loop);
 8002a0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a12:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <bms_mainbaord_setup+0xf4>)
 8002a14:	2164      	movs	r1, #100	@ 0x64
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fd1e 	bl	8004458 <CreateTimer>
	timer_ t_data_can = CreateTimer(1000, data_can_loop);
 8002a1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <bms_mainbaord_setup+0xf8>)
 8002a22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fd16 	bl	8004458 <CreateTimer>
	timer_ timers[NUM_TIMERS] = {t_adbms, t_adbms_owc_check, t_drive_can, t_data_can};
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002a34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a4c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002a50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a5a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mainboard.tg = CreateTimerGroup(timers);
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fd10 	bl	800448e <CreateTimerGroup>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a06      	ldr	r2, [pc, #24]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 8002a72:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

	mainboard.start_time = HAL_GetTick();
 8002a76:	f001 fdf1 	bl	800465c <HAL_GetTick>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a03      	ldr	r2, [pc, #12]	@ (8002a8c <bms_mainbaord_setup+0xe8>)
 8002a7e:	f8c2 328c 	str.w	r3, [r2, #652]	@ 0x28c
}
 8002a82:	bf00      	nop
 8002a84:	3770      	adds	r7, #112	@ 0x70
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000308 	.word	0x20000308
 8002a90:	08002ab9 	.word	0x08002ab9
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002de1 	.word	0x08002de1
 8002a9c:	08002e51 	.word	0x08002e51

08002aa0 <tick_mainboard_timers>:

void tick_mainboard_timers()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	TickTimerGroup(mainboard.tg);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <tick_mainboard_timers+0x14>)
 8002aa6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 fd08 	bl	80044c0 <TickTimerGroup>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000308 	.word	0x20000308

08002ab8 <bms_mainboard_loop>:

// ADBMS loop that gets ticked
void bms_mainboard_loop()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	UpdateValues();
 8002abc:	f000 f80e 	bl	8002adc <UpdateValues>
	CheckFaults();
 8002ac0:	f000 f87a 	bl	8002bb8 <CheckFaults>
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <adbms_owc_loop>:

// Seprate loop that gets ticked to run OWC
void adbms_owc_loop(){ UpdateOWCFault(&mainboard.adbms); }
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <adbms_owc_loop+0x10>)
 8002ace:	f7ff fbc9 	bl	8002264 <UpdateOWCFault>
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000308 	.word	0x20000308

08002adc <UpdateValues>:

void UpdateValues()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	// ADBMS values
	ADBMS_UpdateVoltages(&mainboard.adbms);
 8002ae0:	4831      	ldr	r0, [pc, #196]	@ (8002ba8 <UpdateValues+0xcc>)
 8002ae2:	f7ff f84b 	bl	8001b7c <ADBMS_UpdateVoltages>
	ADBMS_UpdateTemps(&mainboard.adbms);
 8002ae6:	4830      	ldr	r0, [pc, #192]	@ (8002ba8 <UpdateValues+0xcc>)
 8002ae8:	f7ff f85c 	bl	8001ba4 <ADBMS_UpdateTemps>

	UpdateADInternalFault(&mainboard.adbms);
 8002aec:	482e      	ldr	r0, [pc, #184]	@ (8002ba8 <UpdateValues+0xcc>)
 8002aee:	f7ff fb0f 	bl	8002110 <UpdateADInternalFault>

	// update STM32 Pin values
	// reads: shutdown_contactors, IMD_Status, 6822_State
	mainboard.shutdown_present = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); 	   // shutdown status
 8002af2:	2102      	movs	r1, #2
 8002af4:	482d      	ldr	r0, [pc, #180]	@ (8002bac <UpdateValues+0xd0>)
 8002af6:	f003 f9df 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b08:	f883 2285 	strb.w	r2, [r3, #645]	@ 0x285
	mainboard.imd_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			   // IMD_Status
 8002b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b10:	4827      	ldr	r0, [pc, #156]	@ (8002bb0 <UpdateValues+0xd4>)
 8002b12:	f003 f9d1 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b24:	f883 2286 	strb.w	r2, [r3, #646]	@ 0x286
	mainboard.comms_6822_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);	   // 6822_State
 8002b28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b2c:	481f      	ldr	r0, [pc, #124]	@ (8002bac <UpdateValues+0xd0>)
 8002b2e:	f003 f9c3 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b40:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
	mainboard.charger_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);		   // Charger_Pin
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	481a      	ldr	r0, [pc, #104]	@ (8002bb0 <UpdateValues+0xd4>)
 8002b48:	f003 f9b6 	bl	8005eb8 <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b5a:	f883 2287 	strb.w	r2, [r3, #647]	@ 0x287

	// get current
	mainboard.current = getCurrent(mainboard.hadc) - mainboard.current_offset;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b60:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fce7 	bl	8003538 <getCurrent>
 8002b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b70:	edd3 7aa0 	vldr	s15, [r3, #640]	@ 0x280
 8002b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b7a:	edc3 7a9f 	vstr	s15, [r3, #636]	@ 0x27c
	mainboard.overcurrent_fault = mainboard.current > OVERCURRENT;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b80:	edd3 7a9f 	vldr	s15, [r3, #636]	@ 0x27c
 8002b84:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002bb4 <UpdateValues+0xd8>
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	bfcc      	ite	gt
 8002b92:	2301      	movgt	r3, #1
 8002b94:	2300      	movle	r3, #0
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <UpdateValues+0xcc>)
 8002b9a:	f883 2284 	strb.w	r2, [r3, #644]	@ 0x284

	if(ENABLE_PRINTF_DEBUG_COMMS) send_data_over_printf(); 
 8002b9e:	f000 f871 	bl	8002c84 <send_data_over_printf>
	if(ENABLE_USB_COMMS) send_data_over_USB(); 
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000308 	.word	0x20000308
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	43070000 	.word	0x43070000

08002bb8 <CheckFaults>:

void CheckFaults()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	// raise fault flag if any fault is true
	// faults are latching
	mainboard.bms_fault = mainboard.bms_fault 
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c78 <CheckFaults+0xc0>)
 8002bbe:	f893 3279 	ldrb.w	r3, [r3, #633]	@ 0x279
							|| mainboard.adbms.overtemperature_fault_
							|| mainboard.adbms.undertemperature_fault_
							|| mainboard.adbms.openwire_fault_
							|| mainboard.adbms.openwire_temp_fault_
							|| mainboard.adbms.pec_fault_
							|| mainboard.overcurrent_fault;
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d127      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.overvoltage_fault_
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c78 <CheckFaults+0xc0>)
 8002bc8:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d122      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.undervoltage_fault_
 8002bd0:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <CheckFaults+0xc0>)
 8002bd2:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11d      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.overtemperature_fault_
 8002bda:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <CheckFaults+0xc0>)
 8002bdc:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d118      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.undertemperature_fault_
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <CheckFaults+0xc0>)
 8002be6:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d113      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_fault_
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <CheckFaults+0xc0>)
 8002bf0:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_temp_fault_
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <CheckFaults+0xc0>)
 8002bfa:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.adbms.pec_fault_
 8002c02:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <CheckFaults+0xc0>)
 8002c04:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <CheckFaults+0x5e>
							|| mainboard.overcurrent_fault;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <CheckFaults+0xc0>)
 8002c0e:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <CheckFaults+0x62>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <CheckFaults+0x64>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	b2da      	uxtb	r2, r3
	mainboard.bms_fault = mainboard.bms_fault 
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <CheckFaults+0xc0>)
 8002c24:	f883 2279 	strb.w	r2, [r3, #633]	@ 0x279

	// write BMS_Status - healthy is high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !mainboard.bms_fault);
 8002c28:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <CheckFaults+0xc0>)
 8002c2a:	f893 3279 	ldrb.w	r3, [r3, #633]	@ 0x279
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c3a:	4810      	ldr	r0, [pc, #64]	@ (8002c7c <CheckFaults+0xc4>)
 8002c3c:	f003 f954 	bl	8005ee8 <HAL_GPIO_WritePin>


	// set external faults
	mainboard.external_fault = !mainboard.shutdown_present;
 8002c40:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <CheckFaults+0xc0>)
 8002c42:	f893 3285 	ldrb.w	r3, [r3, #645]	@ 0x285
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <CheckFaults+0xc0>)
 8002c5e:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278

	// Turns on external LED if external fault
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, mainboard.external_fault);
 8002c62:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <CheckFaults+0xc0>)
 8002c64:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	4804      	ldr	r0, [pc, #16]	@ (8002c80 <CheckFaults+0xc8>)
 8002c6e:	f003 f93b 	bl	8005ee8 <HAL_GPIO_WritePin>

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000308 	.word	0x20000308
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	40020400 	.word	0x40020400

08002c84 <send_data_over_printf>:

void send_data_over_printf()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	// AD Prints
	ADBMS_Print_Vals(&mainboard.adbms);
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <send_data_over_printf+0x24>)
 8002c8a:	f7ff fd6b 	bl	8002764 <ADBMS_Print_Vals>

	// Mainboard Prints
	printf("Time: %d\n", (int)(HAL_GetTick() - mainboard.start_time));
 8002c8e:	f001 fce5 	bl	800465c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <send_data_over_printf+0x24>)
 8002c96:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4803      	ldr	r0, [pc, #12]	@ (8002cac <send_data_over_printf+0x28>)
 8002ca0:	f00a fcc4 	bl	800d62c <iprintf>
//	printf("External fault: %d\n", mainboard.external_fault);
//	printf("Current: %f\n", mainboard.current);
	
	// TODO Add more prints as needed

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000308 	.word	0x20000308
 8002cac:	0800fec0 	.word	0x0800fec0

08002cb0 <BMS_Initialize_Can>:
#include "bms_can.h"

bms_can_ bms_can;

void BMS_Initialize_Can(mainboard_ *mainboard)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	// Start CAN
	bms_can.mainboard = mainboard;
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
	HAL_CAN_Start(bms_can.mainboard->hcan_drive);
 8002cbe:	4b39      	ldr	r3, [pc, #228]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fad4 	bl	8005274 <HAL_CAN_Start>
	HAL_CAN_Start(bms_can.mainboard->hcan_data);
 8002ccc:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 facd 	bl	8005274 <HAL_CAN_Start>

	// Enable notifications (interrupts) for CAN, uses FIFO scheduling to receive msgs
	HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_drive, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002cda:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fbd9 	bl	800549c <HAL_CAN_ActivateNotification>
	// HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_data, CAN_IT_RX_FIFO0_MSG_PENDING);	// Don't need to read Data CAN

	// SOC header initialization
	bms_can.TxHeaderSOC_.StdId = 0x150;
 8002cea:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cec:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
	bms_can.TxHeaderSOC_.IDE = CAN_ID_STD;
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	635a      	str	r2, [r3, #52]	@ 0x34
	bms_can.TxHeaderSOC_.RTR = CAN_RTR_DATA;
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	639a      	str	r2, [r3, #56]	@ 0x38
	bms_can.TxHeaderSOC_.DLC = 8; // we're sending 8 bytes of data for SOE
 8002cfe:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d00:	2208      	movs	r2, #8
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Faults header initialization
	bms_can.TxHeaderFaults_.StdId = 0x151;
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d06:	f240 1251 	movw	r2, #337	@ 0x151
 8002d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
	bms_can.TxHeaderFaults_.IDE = CAN_ID_STD;
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
	bms_can.TxHeaderFaults_.RTR = CAN_RTR_DATA;
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	659a      	str	r2, [r3, #88]	@ 0x58
	bms_can.TxHeaderFaults_.DLC = 8;
 8002d18:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Status header initialization
	bms_can.TxHeaderStatus_.StdId = 0x152;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d20:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8002d24:	66da      	str	r2, [r3, #108]	@ 0x6c
	bms_can.TxHeaderStatus_.IDE = CAN_ID_STD;
 8002d26:	4b1f      	ldr	r3, [pc, #124]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	675a      	str	r2, [r3, #116]	@ 0x74
	bms_can.TxHeaderStatus_.RTR = CAN_RTR_DATA;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	679a      	str	r2, [r3, #120]	@ 0x78
	bms_can.TxHeaderStatus_.DLC = 8;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d34:	2208      	movs	r2, #8
 8002d36:	67da      	str	r2, [r3, #124]	@ 0x7c

	// Charger header initialization
	bms_can.TxHeaderCharger_.ExtId = 0x1806E5F4;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <BMS_Initialize_Can+0xf8>)
 8002d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	bms_can.TxHeaderCharger_.IDE = CAN_ID_EXT;
 8002d40:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d42:	2204      	movs	r2, #4
 8002d44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	bms_can.TxHeaderCharger_.RTR = CAN_RTR_DATA;
 8002d48:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	bms_can.TxHeaderCharger_.DLC = 8;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d52:	2208      	movs	r2, #8
 8002d54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	// Voltages header initialization
	bms_can.TxHeaderVoltages_.StdId = 0x153;
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d5a:	f240 1253 	movw	r2, #339	@ 0x153
 8002d5e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	bms_can.TxHeaderVoltages_.IDE = CAN_ID_STD;
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	bms_can.TxHeaderVoltages_.RTR = CAN_RTR_DATA;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	bms_can.TxHeaderVoltages_.DLC = 8;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d74:	2208      	movs	r2, #8
 8002d76:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Temperatures header initialization
	bms_can.TxHeaderTemperatures_.StdId = 0x167;
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d7c:	f240 1267 	movw	r2, #359	@ 0x167
 8002d80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	bms_can.TxHeaderTemperatures_.IDE = CAN_ID_STD;
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	bms_can.TxHeaderTemperatures_.RTR = CAN_RTR_DATA;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	bms_can.TxHeaderTemperatures_.DLC = 8;
 8002d94:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <BMS_Initialize_Can+0xf4>)
 8002d96:	2208      	movs	r2, #8
 8002d98:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000598 	.word	0x20000598
 8002da8:	1806e5f4 	.word	0x1806e5f4

08002dac <send_can_messages>:

uint8_t send_can_messages(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *TxHeader, uint8_t *data, uint32_t *TxMailBox)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
	// send msg
	HAL_StatusTypeDef msg_status = HAL_CAN_AddTxMessage(hcan, TxHeader, data, TxMailBox);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f002 fa9b 	bl	80052fc <HAL_CAN_AddTxMessage>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]

	if (msg_status != HAL_OK)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <send_can_messages+0x28>
	{
		// Error handling
//		printf("CAN Message failed\n");
		return 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <send_can_messages+0x2a>
	}
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <drive_can_loop>:

void drive_can_loop()
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	// printf("Sending Drive CAN\n");

	// update and send soc
	populateBMS_SOC(bms_can.txDataSOC_);
 8002de4:	4812      	ldr	r0, [pc, #72]	@ (8002e30 <drive_can_loop+0x50>)
 8002de6:	f000 f88b 	bl	8002f00 <populateBMS_SOC>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderSOC_, bms_can.txDataSOC_, &bms_can.TxMailBox_);
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <drive_can_loop+0x54>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <drive_can_loop+0x58>)
 8002df4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e30 <drive_can_loop+0x50>)
 8002df6:	4911      	ldr	r1, [pc, #68]	@ (8002e3c <drive_can_loop+0x5c>)
 8002df8:	f7ff ffd8 	bl	8002dac <send_can_messages>

	// update and send faults
	populateBMS_Faults(bms_can.txDataFaults_);
 8002dfc:	4810      	ldr	r0, [pc, #64]	@ (8002e40 <drive_can_loop+0x60>)
 8002dfe:	f000 f903 	bl	8003008 <populateBMS_Faults>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderFaults_, bms_can.txDataFaults_, &bms_can.TxMailBox_);
 8002e02:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <drive_can_loop+0x54>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <drive_can_loop+0x58>)
 8002e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <drive_can_loop+0x60>)
 8002e0e:	490d      	ldr	r1, [pc, #52]	@ (8002e44 <drive_can_loop+0x64>)
 8002e10:	f7ff ffcc 	bl	8002dac <send_can_messages>

	// update and send status
	populateBMS_Status(bms_can.txDataStatus_);
 8002e14:	480c      	ldr	r0, [pc, #48]	@ (8002e48 <drive_can_loop+0x68>)
 8002e16:	f000 f9ed 	bl	80031f4 <populateBMS_Status>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderStatus_, bms_can.txDataStatus_, &bms_can.TxMailBox_);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <drive_can_loop+0x54>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <drive_can_loop+0x58>)
 8002e24:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <drive_can_loop+0x68>)
 8002e26:	4909      	ldr	r1, [pc, #36]	@ (8002e4c <drive_can_loop+0x6c>)
 8002e28:	f7ff ffc0 	bl	8002dac <send_can_messages>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200005dc 	.word	0x200005dc
 8002e34:	20000598 	.word	0x20000598
 8002e38:	2000059c 	.word	0x2000059c
 8002e3c:	200005c4 	.word	0x200005c4
 8002e40:	200005fc 	.word	0x200005fc
 8002e44:	200005e4 	.word	0x200005e4
 8002e48:	2000061c 	.word	0x2000061c
 8002e4c:	20000604 	.word	0x20000604

08002e50 <data_can_loop>:

void data_can_loop()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
	// send voltage messages
	bms_can.TxHeaderVoltages_.StdId = 0x153; // set the message id for next iteration
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <data_can_loop+0x98>)
 8002e58:	f240 1253 	movw	r2, #339	@ 0x153
 8002e5c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	e016      	b.n	8002e94 <data_can_loop+0x44>
		populateBMS_VoltageMessages(bms_can.txDataVoltages_, i);
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4820      	ldr	r0, [pc, #128]	@ (8002eec <data_can_loop+0x9c>)
 8002e6a:	f000 fa77 	bl	800335c <populateBMS_VoltageMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderVoltages_, bms_can.txDataVoltages_, &bms_can.TxMailBox_);
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <data_can_loop+0x98>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d3 0274 	ldr.w	r0, [r3, #628]	@ 0x274
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <data_can_loop+0xa0>)
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <data_can_loop+0x9c>)
 8002e7a:	491e      	ldr	r1, [pc, #120]	@ (8002ef4 <data_can_loop+0xa4>)
 8002e7c:	f7ff ff96 	bl	8002dac <send_can_messages>
		bms_can.TxHeaderVoltages_.StdId++;
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <data_can_loop+0x98>)
 8002e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <data_can_loop+0x98>)
 8002e8a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3301      	adds	r3, #1
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	dde5      	ble.n	8002e66 <data_can_loop+0x16>
	}

	// send temperature messages
	bms_can.TxHeaderTemperatures_.StdId = 0x167; // set the message id for next iteration
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <data_can_loop+0x98>)
 8002e9c:	f240 1267 	movw	r2, #359	@ 0x167
 8002ea0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	e016      	b.n	8002ed8 <data_can_loop+0x88>
		populateBMS_TemperatureMessages(bms_can.txDataTemperatures_, i);
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	4812      	ldr	r0, [pc, #72]	@ (8002ef8 <data_can_loop+0xa8>)
 8002eae:	f000 fad5 	bl	800345c <populateBMS_TemperatureMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderTemperatures_, bms_can.txDataTemperatures_, &bms_can.TxMailBox_);
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <data_can_loop+0x98>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8d3 0274 	ldr.w	r0, [r3, #628]	@ 0x274
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <data_can_loop+0xa0>)
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef8 <data_can_loop+0xa8>)
 8002ebe:	490f      	ldr	r1, [pc, #60]	@ (8002efc <data_can_loop+0xac>)
 8002ec0:	f7ff ff74 	bl	8002dac <send_can_messages>
		bms_can.TxHeaderTemperatures_.StdId++;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <data_can_loop+0x98>)
 8002ec6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a06      	ldr	r2, [pc, #24]	@ (8002ee8 <data_can_loop+0x98>)
 8002ece:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	dde5      	ble.n	8002eaa <data_can_loop+0x5a>
	}
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000598 	.word	0x20000598
 8002eec:	2000065c 	.word	0x2000065c
 8002ef0:	2000059c 	.word	0x2000059c
 8002ef4:	20000644 	.word	0x20000644
 8002ef8:	2000067c 	.word	0x2000067c
 8002efc:	20000664 	.word	0x20000664

08002f00 <populateBMS_SOC>:

void populateBMS_SOC(uint8_t *data)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b0a9      	sub	sp, #164	@ 0xa4
 8002f04:	af12      	add	r7, sp, #72	@ 0x48
 8002f06:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[5];
	populateRawMessage(&signals[0], 0, 12, 0.1, 0);									  // max discharge current
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f10:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002ff8 <populateBMS_SOC+0xf8>
 8002f14:	210c      	movs	r1, #12
 8002f16:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fe8e 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[1], 0, 12, 0.1, 0);									  // max regen current
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	3310      	adds	r3, #16
 8002f26:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f2a:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002ff8 <populateBMS_SOC+0xf8>
 8002f2e:	210c      	movs	r1, #12
 8002f30:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fe81 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.total_v, 16, 0.01, 0);   // battery voltage
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <populateBMS_SOC+0xfc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	3320      	adds	r3, #32
 8002f48:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f4c:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8003000 <populateBMS_SOC+0x100>
 8002f50:	2110      	movs	r1, #16
 8002f52:	eeb0 0a67 	vmov.f32	s0, s15
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fe70 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.avg_temp, 8, 1, -40);    // battery temp
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <populateBMS_SOC+0xfc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	3330      	adds	r3, #48	@ 0x30
 8002f6a:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8003004 <populateBMS_SOC+0x104>
 8002f6e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002f72:	2108      	movs	r1, #8
 8002f74:	eeb0 0a67 	vmov.f32	s0, s15
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fe5f 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->current, 16, 0.01, 0);		  // battery current
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ffc <populateBMS_SOC+0xfc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	edd3 7a9f 	vldr	s15, [r3, #636]	@ 0x27c
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	3340      	adds	r3, #64	@ 0x40
 8002f8c:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002ff4 <populateBMS_SOC+0xf4>
 8002f90:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8003000 <populateBMS_SOC+0x100>
 8002f94:	2110      	movs	r1, #16
 8002f96:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fe4e 	bl	8003c3c <populateRawMessage>
	encodeSignals(data, 5, signals[0], signals[1], signals[2], signals[3], signals[4]);
 8002fa0:	ac0e      	add	r4, sp, #56	@ 0x38
 8002fa2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fac:	ac0a      	add	r4, sp, #40	@ 0x28
 8002fae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fb8:	ac06      	add	r4, sp, #24
 8002fba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fc4:	ac02      	add	r4, sp, #8
 8002fc6:	f107 0318 	add.w	r3, r7, #24
 8002fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fd0:	466a      	mov	r2, sp
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fda:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	cb0c      	ldmia	r3, {r2, r3}
 8002fe4:	2105      	movs	r1, #5
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fe87 	bl	8003cfa <encodeSignals>
}
 8002fec:	bf00      	nop
 8002fee:	375c      	adds	r7, #92	@ 0x5c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	00000000 	.word	0x00000000
 8002ff8:	3dcccccd 	.word	0x3dcccccd
 8002ffc:	20000598 	.word	0x20000598
 8003000:	3c23d70a 	.word	0x3c23d70a
 8003004:	c2200000 	.word	0xc2200000

08003008 <populateBMS_Faults>:

void populateBMS_Faults(uint8_t *data)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b0c1      	sub	sp, #260	@ 0x104
 800300c:	af1e      	add	r7, sp, #120	@ 0x78
 800300e:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[8];
	populateRawMessage(&signals[0], bms_can.mainboard->bms_fault, 1, 1, 0);																  	// fault summary
 8003010:	4b76      	ldr	r3, [pc, #472]	@ (80031ec <populateBMS_Faults+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f893 3279 	ldrb.w	r3, [r3, #633]	@ 0x279
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 80031f0 <populateBMS_Faults+0x1e8>
 8003028:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800302c:	2101      	movs	r1, #1
 800302e:	eeb0 0a67 	vmov.f32	s0, s15
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fe02 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->adbms.undervoltage_fault_, 1, 1, 0);												  	// undervoltage fault
 8003038:	4b6c      	ldr	r3, [pc, #432]	@ (80031ec <populateBMS_Faults+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	3310      	adds	r3, #16
 800304e:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 80031f0 <populateBMS_Faults+0x1e8>
 8003052:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003056:	2101      	movs	r1, #1
 8003058:	eeb0 0a67 	vmov.f32	s0, s15
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fded 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.overvoltage_fault_, 1, 1, 0);												   	// overvoltage fault
 8003062:	4b62      	ldr	r3, [pc, #392]	@ (80031ec <populateBMS_Faults+0x1e4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	3320      	adds	r3, #32
 8003078:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 80031f0 <populateBMS_Faults+0x1e8>
 800307c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003080:	2101      	movs	r1, #1
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fdd8 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.undertemperature_fault_, 1, 1, 0);												// undertemp fault
 800308c:	4b57      	ldr	r3, [pc, #348]	@ (80031ec <populateBMS_Faults+0x1e4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	3330      	adds	r3, #48	@ 0x30
 80030a2:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 80031f0 <populateBMS_Faults+0x1e8>
 80030a6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030aa:	2101      	movs	r1, #1
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fdc3 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.overtemperature_fault_, 1, 1, 0);											 	// overemp fault
 80030b6:	4b4d      	ldr	r3, [pc, #308]	@ (80031ec <populateBMS_Faults+0x1e4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f893 324f 	ldrb.w	r3, [r3, #591]	@ 0x24f
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	3340      	adds	r3, #64	@ 0x40
 80030cc:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80031f0 <populateBMS_Faults+0x1e8>
 80030d0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030d4:	2101      	movs	r1, #1
 80030d6:	eeb0 0a67 	vmov.f32	s0, s15
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fdae 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->overcurrent_fault, 1, 1, 0);														 	// overcurrent fault
 80030e0:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <populateBMS_Faults+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f893 3284 	ldrb.w	r3, [r3, #644]	@ 0x284
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	f107 0308 	add.w	r3, r7, #8
 80030f4:	3350      	adds	r3, #80	@ 0x50
 80030f6:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 80031f0 <populateBMS_Faults+0x1e8>
 80030fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030fe:	2101      	movs	r1, #1
 8003100:	eeb0 0a67 	vmov.f32	s0, s15
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fd99 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[6], bms_can.mainboard->external_fault, 1, 1, 0);													   			// external fault
 800310a:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <populateBMS_Faults+0x1e4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	3360      	adds	r3, #96	@ 0x60
 8003120:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 80031f0 <populateBMS_Faults+0x1e8>
 8003124:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003128:	2101      	movs	r1, #1
 800312a:	eeb0 0a67 	vmov.f32	s0, s15
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd84 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[7], (bms_can.mainboard->adbms.openwire_fault_ || bms_can.mainboard->adbms.openwire_temp_fault_), 1, 1, 0);	// open wire fault
 8003134:	4b2d      	ldr	r3, [pc, #180]	@ (80031ec <populateBMS_Faults+0x1e4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <populateBMS_Faults+0x144>
 8003140:	4b2a      	ldr	r3, [pc, #168]	@ (80031ec <populateBMS_Faults+0x1e4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <populateBMS_Faults+0x148>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <populateBMS_Faults+0x14a>
 8003150:	2300      	movs	r3, #0
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	3370      	adds	r3, #112	@ 0x70
 8003160:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80031f0 <populateBMS_Faults+0x1e8>
 8003164:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003168:	2101      	movs	r1, #1
 800316a:	eeb0 0a67 	vmov.f32	s0, s15
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fd64 	bl	8003c3c <populateRawMessage>
	encodeSignals(data, 8, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003174:	ac1a      	add	r4, sp, #104	@ 0x68
 8003176:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800317a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800317c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003180:	ac16      	add	r4, sp, #88	@ 0x58
 8003182:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800318c:	ac12      	add	r4, sp, #72	@ 0x48
 800318e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003198:	ac0e      	add	r4, sp, #56	@ 0x38
 800319a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800319e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031a4:	ac0a      	add	r4, sp, #40	@ 0x28
 80031a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031b0:	ac06      	add	r4, sp, #24
 80031b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031bc:	ac02      	add	r4, sp, #8
 80031be:	f107 0318 	add.w	r3, r7, #24
 80031c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031c8:	466a      	mov	r2, sp
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	cb0c      	ldmia	r3, {r2, r3}
 80031dc:	2108      	movs	r1, #8
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fd8b 	bl	8003cfa <encodeSignals>
}
 80031e4:	bf00      	nop
 80031e6:	378c      	adds	r7, #140	@ 0x8c
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	20000598 	.word	0x20000598
 80031f0:	00000000 	.word	0x00000000

080031f4 <populateBMS_Status>:

void populateBMS_Status(uint8_t *data)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b0b9      	sub	sp, #228	@ 0xe4
 80031f8:	af1a      	add	r7, sp, #104	@ 0x68
 80031fa:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[7];

	populateRawMessage(&signals[0], 0, 8, 1, 0);		 // BMS State
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800334c <populateBMS_Status+0x158>
 8003204:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003208:	2108      	movs	r1, #8
 800320a:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 800334c <populateBMS_Status+0x158>
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd14 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->imd_status, 8, 1, 0);		 // IMD State
 8003214:	4b4e      	ldr	r3, [pc, #312]	@ (8003350 <populateBMS_Status+0x15c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f893 3286 	ldrb.w	r3, [r3, #646]	@ 0x286
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	3310      	adds	r3, #16
 800322a:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800334c <populateBMS_Status+0x158>
 800322e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003232:	2108      	movs	r1, #8
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fcff 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.max_temp, 8, 1, -40);   // max cell temp
 800323e:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <populateBMS_Status+0x15c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	edd3 7a90 	vldr	s15, [r3, #576]	@ 0x240
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	3320      	adds	r3, #32
 800324c:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 8003354 <populateBMS_Status+0x160>
 8003250:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003254:	2108      	movs	r1, #8
 8003256:	eeb0 0a67 	vmov.f32	s0, s15
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fcee 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.min_temp, 8, 1, -40);   // min cell temp
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <populateBMS_Status+0x15c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	3330      	adds	r3, #48	@ 0x30
 800326e:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8003354 <populateBMS_Status+0x160>
 8003272:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003276:	2108      	movs	r1, #8
 8003278:	eeb0 0a67 	vmov.f32	s0, s15
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fcdd 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.max_v, 8, 0.012, 2);	 // max cell voltage
 8003282:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <populateBMS_Status+0x15c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	3340      	adds	r3, #64	@ 0x40
 8003290:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003294:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8003358 <populateBMS_Status+0x164>
 8003298:	2108      	movs	r1, #8
 800329a:	eeb0 0a67 	vmov.f32	s0, s15
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fccc 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->adbms.min_v, 8, 0.012, 2);	 // min cell voltage
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <populateBMS_Status+0x15c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	3350      	adds	r3, #80	@ 0x50
 80032b2:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 80032b6:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003358 <populateBMS_Status+0x164>
 80032ba:	2108      	movs	r1, #8
 80032bc:	eeb0 0a67 	vmov.f32	s0, s15
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fcbb 	bl	8003c3c <populateRawMessage>
	populateRawMessage(&signals[6], 0, 8, 0.5, 0);									 // BMS SOC
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	3360      	adds	r3, #96	@ 0x60
 80032cc:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 800334c <populateBMS_Status+0x158>
 80032d0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80032d4:	2108      	movs	r1, #8
 80032d6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800334c <populateBMS_Status+0x158>
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fcae 	bl	8003c3c <populateRawMessage>
	encodeSignals(data, 7, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6]);
 80032e0:	ac16      	add	r4, sp, #88	@ 0x58
 80032e2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032ec:	ac12      	add	r4, sp, #72	@ 0x48
 80032ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80032f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032f8:	ac0e      	add	r4, sp, #56	@ 0x38
 80032fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003304:	ac0a      	add	r4, sp, #40	@ 0x28
 8003306:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800330a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800330c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003310:	ac06      	add	r4, sp, #24
 8003312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800331c:	ac02      	add	r4, sp, #8
 800331e:	f107 0318 	add.w	r3, r7, #24
 8003322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003328:	466a      	mov	r2, sp
 800332a:	f107 0310 	add.w	r3, r7, #16
 800332e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003332:	e882 0003 	stmia.w	r2, {r0, r1}
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	cb0c      	ldmia	r3, {r2, r3}
 800333c:	2107      	movs	r1, #7
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fcdb 	bl	8003cfa <encodeSignals>
}
 8003344:	bf00      	nop
 8003346:	377c      	adds	r7, #124	@ 0x7c
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	00000000 	.word	0x00000000
 8003350:	20000598 	.word	0x20000598
 8003354:	c2200000 	.word	0xc2200000
 8003358:	3c449ba6 	.word	0x3c449ba6

0800335c <populateBMS_VoltageMessages>:


void populateBMS_VoltageMessages(uint8_t *data, int volt_msg_num)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b0c3      	sub	sp, #268	@ 0x10c
 8003360:	af1e      	add	r7, sp, #120	@ 0x78
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800336c:	e021      	b.n	80033b2 <populateBMS_VoltageMessages+0x56>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.voltages[volt_msg_num * NUM_DATA_CAN_VOLTAGES_PER_MSG + i], 8, 0.012, 2);
 800336e:	f107 0208 	add.w	r2, r7, #8
 8003372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	18d0      	adds	r0, r2, r3
 800337a:	4b34      	ldr	r3, [pc, #208]	@ (800344c <populateBMS_VoltageMessages+0xf0>)
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	1a9a      	subs	r2, r3, r2
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	4413      	add	r3, r2
 800338c:	3360      	adds	r3, #96	@ 0x60
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800339a:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8003450 <populateBMS_VoltageMessages+0xf4>
 800339e:	2108      	movs	r1, #8
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	f000 fc4a 	bl	8003c3c <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ac:	3301      	adds	r3, #1
 80033ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	ddd9      	ble.n	800336e <populateBMS_VoltageMessages+0x12>
	}
	populateRawMessage(&signals[7], 0, 8, 0.004, 0);	// OCV msg that is legacy from BQ code and only included for backwards compatibility
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	3370      	adds	r3, #112	@ 0x70
 80033c0:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8003454 <populateBMS_VoltageMessages+0xf8>
 80033c4:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8003458 <populateBMS_VoltageMessages+0xfc>
 80033c8:	2108      	movs	r1, #8
 80033ca:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003454 <populateBMS_VoltageMessages+0xf8>
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fc34 	bl	8003c3c <populateRawMessage>
	// num_per_msg + 1 because includes the added OCV msg
	encodeSignals(data, NUM_DATA_CAN_VOLTAGES_PER_MSG+1, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 80033d4:	ac1a      	add	r4, sp, #104	@ 0x68
 80033d6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80033da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033e0:	ac16      	add	r4, sp, #88	@ 0x58
 80033e2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80033e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033ec:	ac12      	add	r4, sp, #72	@ 0x48
 80033ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033f8:	ac0e      	add	r4, sp, #56	@ 0x38
 80033fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003404:	ac0a      	add	r4, sp, #40	@ 0x28
 8003406:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800340a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003410:	ac06      	add	r4, sp, #24
 8003412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800341c:	ac02      	add	r4, sp, #8
 800341e:	f107 0318 	add.w	r3, r7, #24
 8003422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003428:	466a      	mov	r2, sp
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003432:	e882 0003 	stmia.w	r2, {r0, r1}
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	cb0c      	ldmia	r3, {r2, r3}
 800343c:	2108      	movs	r1, #8
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fc5b 	bl	8003cfa <encodeSignals>
}
 8003444:	bf00      	nop
 8003446:	3794      	adds	r7, #148	@ 0x94
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	20000598 	.word	0x20000598
 8003450:	3c449ba6 	.word	0x3c449ba6
 8003454:	00000000 	.word	0x00000000
 8003458:	3b83126f 	.word	0x3b83126f

0800345c <populateBMS_TemperatureMessages>:

void populateBMS_TemperatureMessages(uint8_t *data, int temp_num)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b0c3      	sub	sp, #268	@ 0x10c
 8003460:	af1e      	add	r7, sp, #120	@ 0x78
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800346c:	e01f      	b.n	80034ae <populateBMS_TemperatureMessages+0x52>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.temperatures[temp_num * NUM_DATA_CAN_TEMPS_PER_MSG + i], 8, 1, -40);
 800346e:	f107 0208 	add.w	r2, r7, #8
 8003472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	18d0      	adds	r0, r2, r3
 800347a:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <populateBMS_TemperatureMessages+0xd4>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	00d9      	lsls	r1, r3, #3
 8003482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003486:	440b      	add	r3, r1
 8003488:	337c      	adds	r3, #124	@ 0x7c
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 8003534 <populateBMS_TemperatureMessages+0xd8>
 8003496:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800349a:	2108      	movs	r1, #8
 800349c:	eeb0 0a67 	vmov.f32	s0, s15
 80034a0:	f000 fbcc 	bl	8003c3c <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 80034a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a8:	3301      	adds	r3, #1
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b2:	2b07      	cmp	r3, #7
 80034b4:	dddb      	ble.n	800346e <populateBMS_TemperatureMessages+0x12>
	}
	encodeSignals(data, NUM_DATA_CAN_TEMPS_PER_MSG, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 80034b6:	ac1a      	add	r4, sp, #104	@ 0x68
 80034b8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80034bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034c2:	ac16      	add	r4, sp, #88	@ 0x58
 80034c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034ce:	ac12      	add	r4, sp, #72	@ 0x48
 80034d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80034d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034da:	ac0e      	add	r4, sp, #56	@ 0x38
 80034dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034e6:	ac0a      	add	r4, sp, #40	@ 0x28
 80034e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034f2:	ac06      	add	r4, sp, #24
 80034f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034fe:	ac02      	add	r4, sp, #8
 8003500:	f107 0318 	add.w	r3, r7, #24
 8003504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800350a:	466a      	mov	r2, sp
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003514:	e882 0003 	stmia.w	r2, {r0, r1}
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	cb0c      	ldmia	r3, {r2, r3}
 800351e:	2108      	movs	r1, #8
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fbea 	bl	8003cfa <encodeSignals>
}
 8003526:	bf00      	nop
 8003528:	3794      	adds	r7, #148	@ 0x94
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	bf00      	nop
 8003530:	20000598 	.word	0x20000598
 8003534:	c2200000 	.word	0xc2200000

08003538 <getCurrent>:
#include "current_driver.h"

float getCurrent(ADC_HandleTypeDef *hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    // Start ADC and poll it
	HAL_ADC_Start(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f001 f8ff 	bl	8004744 <HAL_ADC_Start>
	HAL_StatusTypeDef adc_poll_status = HAL_ADC_PollForConversion(hadc, 5000);
 8003546:	f241 3188 	movw	r1, #5000	@ 0x1388
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f001 f9ff 	bl	800494e <HAL_ADC_PollForConversion>
 8003550:	4603      	mov	r3, r0
 8003552:	77fb      	strb	r3, [r7, #31]

    // lazy handling of adc polling
    if(adc_poll_status != HAL_OK){
 8003554:	7ffb      	ldrb	r3, [r7, #31]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <getCurrent+0x32>
    	HAL_ADC_Stop(hadc);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f001 f9c4 	bl	80048e8 <HAL_ADC_Stop>
    	printf("current is not OK\n");
 8003560:	482b      	ldr	r0, [pc, #172]	@ (8003610 <getCurrent+0xd8>)
 8003562:	f00a f8d3 	bl	800d70c <puts>
        return -1;
 8003566:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <getCurrent+0xdc>)
 8003568:	e03d      	b.n	80035e6 <getCurrent+0xae>
    }

    // take 12 bit adc and convert into volts
    float raw_current = ((float) HAL_ADC_GetValue(hadc));
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 fa7a 	bl	8004a64 <HAL_ADC_GetValue>
 8003570:	ee07 0a90 	vmov	s15, r0
 8003574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003578:	edc7 7a06 	vstr	s15, [r7, #24]
	float current_adc_voltage = raw_current*3.3/4095;
 800357c:	69b8      	ldr	r0, [r7, #24]
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_f2d>
 8003582:	a31d      	add	r3, pc, #116	@ (adr r3, 80035f8 <getCurrent+0xc0>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fd f836 	bl	80005f8 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	a31a      	add	r3, pc, #104	@ (adr r3, 8003600 <getCurrent+0xc8>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fd f957 	bl	800084c <__aeabi_ddiv>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f7fd faff 	bl	8000ba8 <__aeabi_d2f>
 80035aa:	4603      	mov	r3, r0
 80035ac:	617b      	str	r3, [r7, #20]
	// i = v/r
	// Offset of 1.25V so can read both positive and negative current
	// where negative current is charging and positive is discharging
	// (adc_voltage - 1.65V) / (diff-op-amp gain of 2 * iso amp fixed gain of 41 (AMC3302DWE))
	// shunt resistance = 100u Ohms (SH6918F500BHEP)
	float current_adc_offset = current_adc_voltage - 1.25;
 80035ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80035b2:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 80035b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035ba:	edc7 7a04 	vstr	s15, [r7, #16]
	float current = current_adc_offset/(2*41*0.0001);
 80035be:	6938      	ldr	r0, [r7, #16]
 80035c0:	f7fc ffc2 	bl	8000548 <__aeabi_f2d>
 80035c4:	a310      	add	r3, pc, #64	@ (adr r3, 8003608 <getCurrent+0xd0>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fd f93f 	bl	800084c <__aeabi_ddiv>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7fd fae7 	bl	8000ba8 <__aeabi_d2f>
 80035da:	4603      	mov	r3, r0
 80035dc:	60fb      	str	r3, [r7, #12]

    // Stop ADC
	HAL_ADC_Stop(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f982 	bl	80048e8 <HAL_ADC_Stop>
    return current;
 80035e4:	68fb      	ldr	r3, [r7, #12]
}
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	f3af 8000 	nop.w
 80035f8:	66666666 	.word	0x66666666
 80035fc:	400a6666 	.word	0x400a6666
 8003600:	00000000 	.word	0x00000000
 8003604:	40affe00 	.word	0x40affe00
 8003608:	5e9e1b09 	.word	0x5e9e1b09
 800360c:	3f80cb29 	.word	0x3f80cb29
 8003610:	0800fed8 	.word	0x0800fed8
 8003614:	bf800000 	.word	0xbf800000

08003618 <getCurrentOffset>:


float getCurrentOffset(ADC_HandleTypeDef *hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	float total_current = 0;
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	e00d      	b.n	8003648 <getCurrentOffset+0x30>
		total_current += getCurrent(hadc);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff83 	bl	8003538 <getCurrent>
 8003632:	eeb0 7a40 	vmov.f32	s14, s0
 8003636:	edd7 7a03 	vldr	s15, [r7, #12]
 800363a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800363e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b09      	cmp	r3, #9
 800364c:	ddee      	ble.n	800362c <getCurrentOffset+0x14>
	}
	return total_current / NUM_CURRENT_OFFSET_CYCLES;
 800364e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003652:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003656:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800365a:	eef0 7a66 	vmov.f32	s15, s13
}
 800365e:	eeb0 0a67 	vmov.f32	s0, s15
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003670:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003674:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003680:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003684:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003688:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003690:	e000      	b.n	8003694 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003692:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003694:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f9      	beq.n	8003692 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800369e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80036a8:	687b      	ldr	r3, [r7, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e009      	b.n	80036dc <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	60ba      	str	r2, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffc9 	bl	8003668 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf1      	blt.n	80036c8 <_write+0x12>
	}
	return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036f4:	f000 ff4c 	bl	8004590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f8:	f000 f82e 	bl	8003758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036fc:	f000 f9f2 	bl	8003ae4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003700:	f000 f894 	bl	800382c <MX_ADC1_Init>
  MX_TIM2_Init();
 8003704:	f000 f9a2 	bl	8003a4c <MX_TIM2_Init>
  MX_CAN1_Init();
 8003708:	f000 f8e2 	bl	80038d0 <MX_CAN1_Init>
  MX_CAN2_Init();
 800370c:	f000 f932 	bl	8003974 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003710:	f000 f966 	bl	80039e0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8003714:	f008 fcc8 	bl	800c0a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 8003718:	2005      	movs	r0, #5
 800371a:	f000 ffab 	bl	8004674 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800371e:	2201      	movs	r2, #1
 8003720:	2120      	movs	r1, #32
 8003722:	4807      	ldr	r0, [pc, #28]	@ (8003740 <main+0x50>)
 8003724:	f002 fbe0 	bl	8005ee8 <HAL_GPIO_WritePin>

  // init mainboard
  bms_mainbaord_setup(&hspi1, &hadc1, &hcan1, &hcan2);
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <main+0x54>)
 800372a:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <main+0x58>)
 800372c:	4907      	ldr	r1, [pc, #28]	@ (800374c <main+0x5c>)
 800372e:	4808      	ldr	r0, [pc, #32]	@ (8003750 <main+0x60>)
 8003730:	f7ff f938 	bl	80029a4 <bms_mainbaord_setup>

  printf("Board Starting...\n");
 8003734:	4807      	ldr	r0, [pc, #28]	@ (8003754 <main+0x64>)
 8003736:	f009 ffe9 	bl	800d70c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    tick_mainboard_timers();
 800373a:	f7ff f9b1 	bl	8002aa0 <tick_mainboard_timers>
 800373e:	e7fc      	b.n	800373a <main+0x4a>
 8003740:	40020400 	.word	0x40020400
 8003744:	200006f4 	.word	0x200006f4
 8003748:	200006cc 	.word	0x200006cc
 800374c:	20000684 	.word	0x20000684
 8003750:	2000071c 	.word	0x2000071c
 8003754:	0800feec 	.word	0x0800feec

08003758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b094      	sub	sp, #80	@ 0x50
 800375c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800375e:	f107 0320 	add.w	r3, r7, #32
 8003762:	2230      	movs	r2, #48	@ 0x30
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f00a f8b0 	bl	800d8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <SystemClock_Config+0xcc>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <SystemClock_Config+0xcc>)
 8003786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378a:	6413      	str	r3, [r2, #64]	@ 0x40
 800378c:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <SystemClock_Config+0xcc>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	4b22      	ldr	r3, [pc, #136]	@ (8003828 <SystemClock_Config+0xd0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a21      	ldr	r2, [pc, #132]	@ (8003828 <SystemClock_Config+0xd0>)
 80037a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <SystemClock_Config+0xd0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037be:	2302      	movs	r3, #2
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037c8:	2304      	movs	r3, #4
 80037ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80037cc:	23c0      	movs	r3, #192	@ 0xc0
 80037ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80037d0:	2306      	movs	r3, #6
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80037d4:	2308      	movs	r3, #8
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d8:	f107 0320 	add.w	r3, r7, #32
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 fdef 	bl	80073c0 <HAL_RCC_OscConfig>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037e8:	f000 fa22 	bl	8003c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ec:	230f      	movs	r3, #15
 80037ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f0:	2302      	movs	r3, #2
 80037f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	2102      	movs	r1, #2
 800380a:	4618      	mov	r0, r3
 800380c:	f004 f850 	bl	80078b0 <HAL_RCC_ClockConfig>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003816:	f000 fa0b 	bl	8003c30 <Error_Handler>
  }
}
 800381a:	bf00      	nop
 800381c:	3750      	adds	r7, #80	@ 0x50
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003832:	463b      	mov	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800383e:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003840:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <MX_ADC1_Init+0x9c>)
 8003842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003844:	4b1f      	ldr	r3, [pc, #124]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800384a:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <MX_ADC1_Init+0x98>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003856:	4b1b      	ldr	r3, [pc, #108]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003858:	2200      	movs	r2, #0
 800385a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800385c:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <MX_ADC1_Init+0x98>)
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003866:	2200      	movs	r2, #0
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <MX_ADC1_Init+0x98>)
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <MX_ADC1_Init+0xa0>)
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003870:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003876:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003878:	2201      	movs	r2, #1
 800387a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <MX_ADC1_Init+0x98>)
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003884:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <MX_ADC1_Init+0x98>)
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800388a:	480e      	ldr	r0, [pc, #56]	@ (80038c4 <MX_ADC1_Init+0x98>)
 800388c:	f000 ff16 	bl	80046bc <HAL_ADC_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003896:	f000 f9cb 	bl	8003c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800389a:	2302      	movs	r3, #2
 800389c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a6:	463b      	mov	r3, r7
 80038a8:	4619      	mov	r1, r3
 80038aa:	4806      	ldr	r0, [pc, #24]	@ (80038c4 <MX_ADC1_Init+0x98>)
 80038ac:	f001 f8e8 	bl	8004a80 <HAL_ADC_ConfigChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80038b6:	f000 f9bb 	bl	8003c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000684 	.word	0x20000684
 80038c8:	40012000 	.word	0x40012000
 80038cc:	0f000001 	.word	0x0f000001

080038d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80038d6:	4b25      	ldr	r3, [pc, #148]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038d8:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <MX_CAN1_Init+0xa0>)
 80038da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80038dc:	4b23      	ldr	r3, [pc, #140]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038de:	2210      	movs	r2, #16
 80038e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80038e2:	4b22      	ldr	r3, [pc, #136]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038e8:	4b20      	ldr	r3, [pc, #128]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80038ee:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <MX_CAN1_Init+0x9c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003902:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <MX_CAN1_Init+0x9c>)
 8003904:	2200      	movs	r2, #0
 8003906:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003908:	4b18      	ldr	r3, [pc, #96]	@ (800396c <MX_CAN1_Init+0x9c>)
 800390a:	2200      	movs	r2, #0
 800390c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800390e:	4b17      	ldr	r3, [pc, #92]	@ (800396c <MX_CAN1_Init+0x9c>)
 8003910:	2200      	movs	r2, #0
 8003912:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003914:	4b15      	ldr	r3, [pc, #84]	@ (800396c <MX_CAN1_Init+0x9c>)
 8003916:	2200      	movs	r2, #0
 8003918:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800391a:	4b14      	ldr	r3, [pc, #80]	@ (800396c <MX_CAN1_Init+0x9c>)
 800391c:	2200      	movs	r2, #0
 800391e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003920:	4812      	ldr	r0, [pc, #72]	@ (800396c <MX_CAN1_Init+0x9c>)
 8003922:	f001 facb 	bl	8004ebc <HAL_CAN_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800392c:	f000 f980 	bl	8003c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003930:	2301      	movs	r3, #1
 8003932:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8003934:	2312      	movs	r3, #18
 8003936:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 800393c:	2300      	movs	r3, #0
 800393e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003950:	2301      	movs	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8003954:	2314      	movs	r3, #20
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8003958:	463b      	mov	r3, r7
 800395a:	4619      	mov	r1, r3
 800395c:	4803      	ldr	r0, [pc, #12]	@ (800396c <MX_CAN1_Init+0x9c>)
 800395e:	f001 fba9 	bl	80050b4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003962:	bf00      	nop
 8003964:	3728      	adds	r7, #40	@ 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200006cc 	.word	0x200006cc
 8003970:	40006400 	.word	0x40006400

08003974 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003978:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <MX_CAN2_Init+0x64>)
 800397a:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <MX_CAN2_Init+0x68>)
 800397c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800397e:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <MX_CAN2_Init+0x64>)
 8003980:	2210      	movs	r2, #16
 8003982:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <MX_CAN2_Init+0x64>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800398a:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <MX_CAN2_Init+0x64>)
 800398c:	2200      	movs	r2, #0
 800398e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <MX_CAN2_Init+0x64>)
 8003992:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003996:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003998:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <MX_CAN2_Init+0x64>)
 800399a:	2200      	movs	r2, #0
 800399c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800399e:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80039bc:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039be:	2200      	movs	r2, #0
 80039c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80039c2:	4805      	ldr	r0, [pc, #20]	@ (80039d8 <MX_CAN2_Init+0x64>)
 80039c4:	f001 fa7a 	bl	8004ebc <HAL_CAN_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80039ce:	f000 f92f 	bl	8003c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200006f4 	.word	0x200006f4
 80039dc:	40006800 	.word	0x40006800

080039e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <MX_SPI1_Init+0x64>)
 80039e6:	4a18      	ldr	r2, [pc, #96]	@ (8003a48 <MX_SPI1_Init+0x68>)
 80039e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <MX_SPI1_Init+0x64>)
 80039ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <MX_SPI1_Init+0x64>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <MX_SPI1_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a14:	2218      	movs	r2, #24
 8003a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a24:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a2c:	220a      	movs	r2, #10
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a30:	4804      	ldr	r0, [pc, #16]	@ (8003a44 <MX_SPI1_Init+0x64>)
 8003a32:	f004 f935 	bl	8007ca0 <HAL_SPI_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a3c:	f000 f8f8 	bl	8003c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000071c 	.word	0x2000071c
 8003a48:	40013000 	.word	0x40013000

08003a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a60:	463b      	mov	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a84:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a90:	4813      	ldr	r0, [pc, #76]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003a92:	f004 fd57 	bl	8008544 <HAL_TIM_Base_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003a9c:	f000 f8c8 	bl	8003c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	4619      	mov	r1, r3
 8003aac:	480c      	ldr	r0, [pc, #48]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003aae:	f004 fd98 	bl	80085e2 <HAL_TIM_ConfigClockSource>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003ab8:	f000 f8ba 	bl	8003c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <MX_TIM2_Init+0x94>)
 8003aca:	f004 ff97 	bl	80089fc <HAL_TIMEx_MasterConfigSynchronization>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003ad4:	f000 f8ac 	bl	8003c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000774 	.word	0x20000774

08003ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a47      	ldr	r2, [pc, #284]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b45      	ldr	r3, [pc, #276]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	4a39      	ldr	r2, [pc, #228]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	4a32      	ldr	r2, [pc, #200]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5e:	4b30      	ldr	r3, [pc, #192]	@ (8003c20 <MX_GPIO_Init+0x13c>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8003b70:	482c      	ldr	r0, [pc, #176]	@ (8003c24 <MX_GPIO_Init+0x140>)
 8003b72:	f002 f9b9 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 8003b76:	2200      	movs	r2, #0
 8003b78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b7c:	482a      	ldr	r0, [pc, #168]	@ (8003c28 <MX_GPIO_Init+0x144>)
 8003b7e:	f002 f9b3 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 8003b82:	2200      	movs	r2, #0
 8003b84:	21e0      	movs	r1, #224	@ 0xe0
 8003b86:	4829      	ldr	r0, [pc, #164]	@ (8003c2c <MX_GPIO_Init+0x148>)
 8003b88:	f002 f9ae 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 8003b8c:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	481f      	ldr	r0, [pc, #124]	@ (8003c24 <MX_GPIO_Init+0x140>)
 8003ba6:	f001 ffeb 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 8003baa:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	481b      	ldr	r0, [pc, #108]	@ (8003c2c <MX_GPIO_Init+0x148>)
 8003bc0:	f001 ffde 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8003bc4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4813      	ldr	r0, [pc, #76]	@ (8003c28 <MX_GPIO_Init+0x144>)
 8003bda:	f001 ffd1 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 8003bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	480c      	ldr	r0, [pc, #48]	@ (8003c28 <MX_GPIO_Init+0x144>)
 8003bf8:	f001 ffc2 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 8003bfc:	23e0      	movs	r3, #224	@ 0xe0
 8003bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c00:	2301      	movs	r3, #1
 8003c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	4806      	ldr	r0, [pc, #24]	@ (8003c2c <MX_GPIO_Init+0x148>)
 8003c14:	f001 ffb4 	bl	8005b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c18:	bf00      	nop
 8003c1a:	3728      	adds	r7, #40	@ 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020000 	.word	0x40020000
 8003c28:	40020800 	.word	0x40020800
 8003c2c:	40020400 	.word	0x40020400

08003c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c34:	b672      	cpsid	i
}
 8003c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c38:	bf00      	nop
 8003c3a:	e7fd      	b.n	8003c38 <Error_Handler+0x8>

08003c3c <populateRawMessage>:
#include "nfr_can_driver.h"

// Populates a RawCanSignal with data, given a start bit, lenght, factor, and offset
void populateRawMessage(RawCanSignal *signal, float raw_data, int length, float factor, float offset)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6178      	str	r0, [r7, #20]
 8003c44:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c48:	60f9      	str	r1, [r7, #12]
 8003c4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c4e:	ed87 1a01 	vstr	s2, [r7, #4]
    // offset and factor data
    uint64_t raw_value = (uint64_t)((raw_data - offset) / factor);
 8003c52:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c66:	ee16 0a90 	vmov	r0, s13
 8003c6a:	f7fd f805 	bl	8000c78 <__aeabi_f2ulz>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // copy data into RawCanSignal
    memcpy(&(signal->raw_data), &raw_value, sizeof(raw_value));
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c7c:	600a      	str	r2, [r1, #0]
 8003c7e:	604b      	str	r3, [r1, #4]
    signal->length = length;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	609a      	str	r2, [r3, #8]

}
 8003c86:	bf00      	nop
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <generateMask>:
    printf("\n");
}

// Generates a mask for given position and length
uint64_t generateMask(int pos, int len)
{
 8003c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
    return (0xFFFFFFFFFFFFFFFFull << (64 - len) >> (64 - len - pos));
 8003c98:	6839      	ldr	r1, [r7, #0]
 8003c9a:	f1c1 0640 	rsb	r6, r1, #64	@ 0x40
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca6:	f1a6 0e20 	sub.w	lr, r6, #32
 8003caa:	f1c6 0c20 	rsb	ip, r6, #32
 8003cae:	fa01 f306 	lsl.w	r3, r1, r6
 8003cb2:	fa00 fe0e 	lsl.w	lr, r0, lr
 8003cb6:	ea43 030e 	orr.w	r3, r3, lr
 8003cba:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003cbe:	ea43 030c 	orr.w	r3, r3, ip
 8003cc2:	fa00 f206 	lsl.w	r2, r0, r6
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	f1c1 0040 	rsb	r0, r1, #64	@ 0x40
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	1a41      	subs	r1, r0, r1
 8003cd0:	f1c1 0620 	rsb	r6, r1, #32
 8003cd4:	f1a1 0020 	sub.w	r0, r1, #32
 8003cd8:	fa22 f401 	lsr.w	r4, r2, r1
 8003cdc:	fa03 f606 	lsl.w	r6, r3, r6
 8003ce0:	4334      	orrs	r4, r6
 8003ce2:	fa23 f000 	lsr.w	r0, r3, r0
 8003ce6:	4304      	orrs	r4, r0
 8003ce8:	fa23 f501 	lsr.w	r5, r3, r1
 8003cec:	4622      	mov	r2, r4
 8003cee:	462b      	mov	r3, r5
}
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cfa <encodeSignals>:

// Encodes a CAN msg with number of sub-messages
void encodeSignals(uint8_t *data, int count, ...)
{
 8003cfa:	b40e      	push	{r1, r2, r3}
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	b092      	sub	sp, #72	@ 0x48
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
    va_list args;
    va_start(args, count);
 8003d06:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t buffer = 0;
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    int len_ptr = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d20:	e03c      	b.n	8003d9c <encodeSignals+0xa2>
    {
        RawCanSignal temp = va_arg(args, RawCanSignal);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	3307      	adds	r3, #7
 8003d26:	f023 0307 	bic.w	r3, r3, #7
 8003d2a:	f103 0210 	add.w	r2, r3, #16
 8003d2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d30:	f107 0610 	add.w	r6, r7, #16
 8003d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d36:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // shift data over and apply mask then add to buffer
        uint64_t mask = generateMask(len_ptr, temp.length);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d40:	f7ff ffa5 	bl	8003c8e <generateMask>
 8003d44:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        buffer |= (temp.raw_data.as_uint64 << len_ptr) & mask;
 8003d48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d4e:	f1a1 0620 	sub.w	r6, r1, #32
 8003d52:	f1c1 0020 	rsb	r0, r1, #32
 8003d56:	fa03 f501 	lsl.w	r5, r3, r1
 8003d5a:	fa02 f606 	lsl.w	r6, r2, r6
 8003d5e:	4335      	orrs	r5, r6
 8003d60:	fa22 f000 	lsr.w	r0, r2, r0
 8003d64:	4305      	orrs	r5, r0
 8003d66:	fa02 f401 	lsl.w	r4, r2, r1
 8003d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d6e:	ea04 0a02 	and.w	sl, r4, r2
 8003d72:	ea05 0b03 	and.w	fp, r5, r3
 8003d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d7a:	ea42 010a 	orr.w	r1, r2, sl
 8003d7e:	6039      	str	r1, [r7, #0]
 8003d80:	ea43 030b 	orr.w	r3, r3, fp
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // update length
        len_ptr += temp.length;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d92:	4413      	add	r3, r2
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	3301      	adds	r3, #1
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3be      	bcc.n	8003d22 <encodeSignals+0x28>
    }

    // fill in msg
    for (size_t i = 0; i < 8; i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da8:	e01c      	b.n	8003de4 <encodeSignals+0xea>
    {
        data[i] = (buffer >> (i * 8)) & 0xFF;
 8003daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dac:	00d9      	lsls	r1, r3, #3
 8003dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003db2:	f1c1 0420 	rsb	r4, r1, #32
 8003db6:	f1a1 0020 	sub.w	r0, r1, #32
 8003dba:	fa22 f801 	lsr.w	r8, r2, r1
 8003dbe:	fa03 f404 	lsl.w	r4, r3, r4
 8003dc2:	ea48 0804 	orr.w	r8, r8, r4
 8003dc6:	fa23 f000 	lsr.w	r0, r3, r0
 8003dca:	ea48 0800 	orr.w	r8, r8, r0
 8003dce:	fa23 f901 	lsr.w	r9, r3, r1
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	4413      	add	r3, r2
 8003dd8:	fa5f f288 	uxtb.w	r2, r8
 8003ddc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; i++)
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de0:	3301      	adds	r3, #1
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	2b07      	cmp	r3, #7
 8003de8:	d9df      	bls.n	8003daa <encodeSignals+0xb0>
    }
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3748      	adds	r7, #72	@ 0x48
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	b003      	add	sp, #12
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_MspInit+0x4c>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	@ 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <HAL_ADC_MspInit+0x7c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d127      	bne.n	8003ebe <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	4a0e      	ldr	r2, [pc, #56]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_ADC_MspInit+0x80>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <HAL_ADC_MspInit+0x84>)
 8003eba:	f001 fe61 	bl	8005b80 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003ebe:	bf00      	nop
 8003ec0:	3728      	adds	r7, #40	@ 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40012000 	.word	0x40012000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a47      	ldr	r2, [pc, #284]	@ (8004010 <HAL_CAN_MspInit+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d13e      	bne.n	8003f74 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	4a45      	ldr	r2, [pc, #276]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003efe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f00:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10d      	bne.n	8003f24 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	4b42      	ldr	r3, [pc, #264]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	4a41      	ldr	r2, [pc, #260]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f18:	4b3f      	ldr	r3, [pc, #252]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f2e:	f043 0302 	orr.w	r3, r3, #2
 8003f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f34:	4b38      	ldr	r3, [pc, #224]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f52:	2309      	movs	r3, #9
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f56:	f107 031c 	add.w	r3, r7, #28
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	482f      	ldr	r0, [pc, #188]	@ (800401c <HAL_CAN_MspInit+0x148>)
 8003f5e:	f001 fe0f 	bl	8005b80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	2014      	movs	r0, #20
 8003f68:	f001 fdd3 	bl	8005b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003f6c:	2014      	movs	r0, #20
 8003f6e:	f001 fdec 	bl	8005b4a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003f72:	e048      	b.n	8004006 <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a29      	ldr	r2, [pc, #164]	@ (8004020 <HAL_CAN_MspInit+0x14c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d143      	bne.n	8004006 <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	4b25      	ldr	r3, [pc, #148]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	4a24      	ldr	r2, [pc, #144]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f8e:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003fa2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_CAN_MspInit+0x140>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10d      	bne.n	8003fc8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fbc:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	4a11      	ldr	r2, [pc, #68]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fd2:	f043 0302 	orr.w	r3, r3, #2
 8003fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <HAL_CAN_MspInit+0x144>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003fe4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003ff6:	2309      	movs	r3, #9
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffa:	f107 031c 	add.w	r3, r7, #28
 8003ffe:	4619      	mov	r1, r3
 8004000:	4806      	ldr	r0, [pc, #24]	@ (800401c <HAL_CAN_MspInit+0x148>)
 8004002:	f001 fdbd 	bl	8005b80 <HAL_GPIO_Init>
}
 8004006:	bf00      	nop
 8004008:	3730      	adds	r7, #48	@ 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40006400 	.word	0x40006400
 8004014:	200007bc 	.word	0x200007bc
 8004018:	40023800 	.word	0x40023800
 800401c:	40020400 	.word	0x40020400
 8004020:	40006800 	.word	0x40006800

08004024 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_SPI_MspInit+0x84>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12b      	bne.n	800409e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004054:	6453      	str	r3, [r2, #68]	@ 0x44
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6313      	str	r3, [r2, #48]	@ 0x30
 8004072:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800407e:	23e0      	movs	r3, #224	@ 0xe0
 8004080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408a:	2303      	movs	r3, #3
 800408c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800408e:	2305      	movs	r3, #5
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4619      	mov	r1, r3
 8004098:	4805      	ldr	r0, [pc, #20]	@ (80040b0 <HAL_SPI_MspInit+0x8c>)
 800409a:	f001 fd71 	bl	8005b80 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800409e:	bf00      	nop
 80040a0:	3728      	adds	r7, #40	@ 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40013000 	.word	0x40013000
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020000 	.word	0x40020000

080040b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c4:	d10d      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_TIM_Base_MspInit+0x3c>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800

080040f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040fe:	4802      	ldr	r0, [pc, #8]	@ (8004108 <NMI_Handler+0x14>)
 8004100:	f001 fef2 	bl	8005ee8 <HAL_GPIO_WritePin>
 8004104:	e7f8      	b.n	80040f8 <NMI_Handler+0x4>
 8004106:	bf00      	nop
 8004108:	40020800 	.word	0x40020800

0800410c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004116:	4802      	ldr	r0, [pc, #8]	@ (8004120 <HardFault_Handler+0x14>)
 8004118:	f001 fee6 	bl	8005ee8 <HAL_GPIO_WritePin>
 800411c:	e7f8      	b.n	8004110 <HardFault_Handler+0x4>
 800411e:	bf00      	nop
 8004120:	40020800 	.word	0x40020800

08004124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800412e:	4802      	ldr	r0, [pc, #8]	@ (8004138 <MemManage_Handler+0x14>)
 8004130:	f001 feda 	bl	8005ee8 <HAL_GPIO_WritePin>
 8004134:	e7f8      	b.n	8004128 <MemManage_Handler+0x4>
 8004136:	bf00      	nop
 8004138:	40020800 	.word	0x40020800

0800413c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004140:	2200      	movs	r2, #0
 8004142:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004146:	4802      	ldr	r0, [pc, #8]	@ (8004150 <BusFault_Handler+0x14>)
 8004148:	f001 fece 	bl	8005ee8 <HAL_GPIO_WritePin>
 800414c:	e7f8      	b.n	8004140 <BusFault_Handler+0x4>
 800414e:	bf00      	nop
 8004150:	40020800 	.word	0x40020800

08004154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800415e:	4802      	ldr	r0, [pc, #8]	@ (8004168 <UsageFault_Handler+0x14>)
 8004160:	f001 fec2 	bl	8005ee8 <HAL_GPIO_WritePin>
 8004164:	e7f8      	b.n	8004158 <UsageFault_Handler+0x4>
 8004166:	bf00      	nop
 8004168:	40020800 	.word	0x40020800

0800416c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800419a:	f000 fa4b 	bl	8004634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041a8:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <CAN1_RX0_IRQHandler+0x10>)
 80041aa:	f001 f99d 	bl	80054e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200006cc 	.word	0x200006cc

080041b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041bc:	4802      	ldr	r0, [pc, #8]	@ (80041c8 <OTG_FS_IRQHandler+0x10>)
 80041be:	f001 fff0 	bl	80061a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20001ca8 	.word	0x20001ca8

080041cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return 1;
 80041d0:	2301      	movs	r3, #1
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_kill>:

int _kill(int pid, int sig)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041e6:	f009 fbd3 	bl	800d990 <__errno>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2216      	movs	r2, #22
 80041ee:	601a      	str	r2, [r3, #0]
  return -1;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_exit>:

void _exit (int status)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffe7 	bl	80041dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <_exit+0x12>

08004212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e00a      	b.n	800423a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004224:	f3af 8000 	nop.w
 8004228:	4601      	mov	r1, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	60ba      	str	r2, [r7, #8]
 8004230:	b2ca      	uxtb	r2, r1
 8004232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	dbf0      	blt.n	8004224 <_read+0x12>
  }

  return len;
 8004242:	687b      	ldr	r3, [r7, #4]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_close>:
  }
  return len;
}

int _close(int file)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004274:	605a      	str	r2, [r3, #4]
  return 0;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_isatty>:

int _isatty(int file)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800428c:	2301      	movs	r3, #1
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <_sbrk+0x5c>)
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <_sbrk+0x60>)
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <_sbrk+0x64>)
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <_sbrk+0x68>)
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d207      	bcs.n	80042f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e4:	f009 fb54 	bl	800d990 <__errno>
 80042e8:	4603      	mov	r3, r0
 80042ea:	220c      	movs	r2, #12
 80042ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	e009      	b.n	8004308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f4:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	4a05      	ldr	r2, [pc, #20]	@ (8004318 <_sbrk+0x64>)
 8004304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20020000 	.word	0x20020000
 8004314:	00000400 	.word	0x00000400
 8004318:	200007c0 	.word	0x200007c0
 800431c:	200024f8 	.word	0x200024f8

08004320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <SystemInit+0x20>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <SystemInit+0x20>)
 800432c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	00000000 	.word	0x00000000

08004348 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8004348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	ed87 0a01 	vstr	s0, [r7, #4]
 8004354:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8004358:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <getTemp+0x100>)
 800435a:	ed93 7a00 	vldr	s14, [r3]
 800435e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004362:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004366:	ed97 7a00 	vldr	s14, [r7]
 800436a:	edd7 7a01 	vldr	s15, [r7, #4]
 800436e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004376:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 800437a:	4b34      	ldr	r3, [pc, #208]	@ (800444c <getTemp+0x104>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8e2 	bl	8000548 <__aeabi_f2d>
 8004384:	4604      	mov	r4, r0
 8004386:	460d      	mov	r5, r1
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7fc f8dd 	bl	8000548 <__aeabi_f2d>
 800438e:	4680      	mov	r8, r0
 8004390:	4689      	mov	r9, r1
 8004392:	4b2f      	ldr	r3, [pc, #188]	@ (8004450 <getTemp+0x108>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f8d6 	bl	8000548 <__aeabi_f2d>
 800439c:	4682      	mov	sl, r0
 800439e:	468b      	mov	fp, r1
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <getTemp+0x104>)
 80043a2:	edd3 7a00 	vldr	s15, [r3]
 80043a6:	eeb1 7a67 	vneg.f32	s14, s15
 80043aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004454 <getTemp+0x10c>)
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043b4:	ee16 0a90 	vmov	r0, s13
 80043b8:	f7fc f8c6 	bl	8000548 <__aeabi_f2d>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	ec43 2b10 	vmov	d0, r2, r3
 80043c4:	f00b f894 	bl	800f4f0 <exp>
 80043c8:	ec53 2b10 	vmov	r2, r3, d0
 80043cc:	4650      	mov	r0, sl
 80043ce:	4659      	mov	r1, fp
 80043d0:	f7fc f912 	bl	80005f8 <__aeabi_dmul>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4640      	mov	r0, r8
 80043da:	4649      	mov	r1, r9
 80043dc:	f7fc fa36 	bl	800084c <__aeabi_ddiv>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	ec43 2b17 	vmov	d7, r2, r3
 80043e8:	eeb0 0a47 	vmov.f32	s0, s14
 80043ec:	eef0 0a67 	vmov.f32	s1, s15
 80043f0:	f00b f8c6 	bl	800f580 <log>
 80043f4:	ec53 2b10 	vmov	r2, r3, d0
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fc fa26 	bl	800084c <__aeabi_ddiv>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fbce 	bl	8000ba8 <__aeabi_d2f>
 800440c:	4603      	mov	r3, r0
 800440e:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f7fc f899 	bl	8000548 <__aeabi_f2d>
 8004416:	a30a      	add	r3, pc, #40	@ (adr r3, 8004440 <getTemp+0xf8>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fb ff34 	bl	8000288 <__aeabi_dsub>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f7fc fbbe 	bl	8000ba8 <__aeabi_d2f>
 800442c:	4603      	mov	r3, r0
 800442e:	ee07 3a90 	vmov	s15, r3
}
 8004432:	eeb0 0a67 	vmov.f32	s0, s15
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	66666666 	.word	0x66666666
 8004444:	40711266 	.word	0x40711266
 8004448:	2000001c 	.word	0x2000001c
 800444c:	20000024 	.word	0x20000024
 8004450:	20000020 	.word	0x20000020
 8004454:	20000028 	.word	0x20000028

08004458 <CreateTimer>:
#include "virtual_timer.h"

// Creates a new timer
timer_ CreateTimer(uint32_t duration_ms, Callback cb)
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b089      	sub	sp, #36	@ 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8004464:	f000 f8fa 	bl	800465c <HAL_GetTick>
 8004468:	61f8      	str	r0, [r7, #28]
	timer_ timer = {tickstart, duration_ms, cb};
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	61bb      	str	r3, [r7, #24]
	return timer;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	461c      	mov	r4, r3
 800447a:	f107 0310 	add.w	r3, r7, #16
 800447e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	3724      	adds	r7, #36	@ 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}

0800448e <CreateTimerGroup>:

timer_group_ *CreateTimerGroup(timer_ timers[NUM_TIMERS])
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
	// Allocate the timer group structure
	timer_group_ *tg = (timer_group_ *)malloc(sizeof(timer_group_));
 8004496:	2030      	movs	r0, #48	@ 0x30
 8004498:	f008 fafa 	bl	800ca90 <malloc>
 800449c:	4603      	mov	r3, r0
 800449e:	60fb      	str	r3, [r7, #12]
	if (!tg)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <CreateTimerGroup+0x1c>
	{
		return NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e006      	b.n	80044b8 <CreateTimerGroup+0x2a>
	}

	memcpy(tg->timers, timers, sizeof(timer_) * NUM_TIMERS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2230      	movs	r2, #48	@ 0x30
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f009 fa9a 	bl	800d9ea <memcpy>
	return tg;
 80044b6:	68fb      	ldr	r3, [r7, #12]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <TickTimerGroup>:

// Ticks a timer group
void TickTimerGroup(timer_group_ *tg)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e02d      	b.n	800452a <TickTimerGroup+0x6a>
	{
		// HAL_GetTick is in ms
		// will error with a HAL_GetTick overflow
		if ((HAL_GetTick() - tg->timers[i].tickstart) > tg->timers[i].durations_ms)
 80044ce:	f000 f8c5 	bl	800465c <HAL_GetTick>
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1ac1      	subs	r1, r0, r3
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	3304      	adds	r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4299      	cmp	r1, r3
 80044f8:	d914      	bls.n	8004524 <TickTimerGroup+0x64>
		{
			tg->timers[i].tickstart = HAL_GetTick();
 80044fa:	7bfc      	ldrb	r4, [r7, #15]
 80044fc:	f000 f8ae 	bl	800465c <HAL_GetTick>
 8004500:	4601      	mov	r1, r0
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4623      	mov	r3, r4
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4423      	add	r3, r4
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	6019      	str	r1, [r3, #0]
			tg->timers[i].cb();
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3308      	adds	r3, #8
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	3301      	adds	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d9ce      	bls.n	80044ce <TickTimerGroup+0xe>
		}
	}
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}
	...

0800453c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800453c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004574 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004540:	f7ff feee 	bl	8004320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004544:	480c      	ldr	r0, [pc, #48]	@ (8004578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004546:	490d      	ldr	r1, [pc, #52]	@ (800457c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004548:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800454a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800454c:	e002      	b.n	8004554 <LoopCopyDataInit>

0800454e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800454e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004552:	3304      	adds	r3, #4

08004554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004558:	d3f9      	bcc.n	800454e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800455a:	4a0a      	ldr	r2, [pc, #40]	@ (8004584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800455c:	4c0a      	ldr	r4, [pc, #40]	@ (8004588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004560:	e001      	b.n	8004566 <LoopFillZerobss>

08004562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004564:	3204      	adds	r2, #4

08004566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004568:	d3fb      	bcc.n	8004562 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800456a:	f009 fa17 	bl	800d99c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800456e:	f7ff f8bf 	bl	80036f0 <main>
  bx  lr    
 8004572:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800457c:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8004580:	08010510 	.word	0x08010510
  ldr r2, =_sbss
 8004584:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8004588:	200024f8 	.word	0x200024f8

0800458c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800458c:	e7fe      	b.n	800458c <ADC_IRQHandler>
	...

08004590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004594:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <HAL_Init+0x40>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_Init+0x40>)
 800459a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800459e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_Init+0x40>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <HAL_Init+0x40>)
 80045a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <HAL_Init+0x40>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a07      	ldr	r2, [pc, #28]	@ (80045d0 <HAL_Init+0x40>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b8:	2003      	movs	r0, #3
 80045ba:	f001 fa9f 	bl	8005afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045be:	200f      	movs	r0, #15
 80045c0:	f000 f808 	bl	80045d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045c4:	f7ff fc1a 	bl	8003dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023c00 	.word	0x40023c00

080045d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045dc:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <HAL_InitTick+0x54>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b12      	ldr	r3, [pc, #72]	@ (800462c <HAL_InitTick+0x58>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fab7 	bl	8005b66 <HAL_SYSTICK_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e00e      	b.n	8004620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	d80a      	bhi.n	800461e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004608:	2200      	movs	r2, #0
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	f001 fa7f 	bl	8005b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004614:	4a06      	ldr	r2, [pc, #24]	@ (8004630 <HAL_InitTick+0x5c>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000018 	.word	0x20000018
 800462c:	20000030 	.word	0x20000030
 8004630:	2000002c 	.word	0x2000002c

08004634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_IncTick+0x20>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_IncTick+0x24>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4413      	add	r3, r2
 8004644:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <HAL_IncTick+0x24>)
 8004646:	6013      	str	r3, [r2, #0]
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000030 	.word	0x20000030
 8004658:	200007c4 	.word	0x200007c4

0800465c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return uwTick;
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <HAL_GetTick+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200007c4 	.word	0x200007c4

08004674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800467c:	f7ff ffee 	bl	800465c <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d005      	beq.n	800469a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_Delay+0x44>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800469a:	bf00      	nop
 800469c:	f7ff ffde 	bl	800465c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d8f7      	bhi.n	800469c <HAL_Delay+0x28>
  {
  }
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000030 	.word	0x20000030

080046bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e033      	b.n	800473a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fbb6 	bl	8003e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004702:	f023 0302 	bic.w	r3, r3, #2
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fad8 	bl	8004cc4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
 800472a:	e001      	b.n	8004730 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_ADC_Start+0x1a>
 800475a:	2302      	movs	r3, #2
 800475c:	e0b2      	b.n	80048c4 <HAL_ADC_Start+0x180>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d018      	beq.n	80047a6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004784:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <HAL_ADC_Start+0x18c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a52      	ldr	r2, [pc, #328]	@ (80048d4 <HAL_ADC_Start+0x190>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0c9a      	lsrs	r2, r3, #18
 8004790:	4613      	mov	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4413      	add	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004798:	e002      	b.n	80047a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3b01      	subs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f9      	bne.n	800479a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d17a      	bne.n	80048aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f2:	d106      	bne.n	8004802 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f8:	f023 0206 	bic.w	r2, r3, #6
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8004800:	e002      	b.n	8004808 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004810:	4b31      	ldr	r3, [pc, #196]	@ (80048d8 <HAL_ADC_Start+0x194>)
 8004812:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800481c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2b00      	cmp	r3, #0
 8004828:	d12a      	bne.n	8004880 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2b      	ldr	r2, [pc, #172]	@ (80048dc <HAL_ADC_Start+0x198>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d015      	beq.n	8004860 <HAL_ADC_Start+0x11c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a29      	ldr	r2, [pc, #164]	@ (80048e0 <HAL_ADC_Start+0x19c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d105      	bne.n	800484a <HAL_ADC_Start+0x106>
 800483e:	4b26      	ldr	r3, [pc, #152]	@ (80048d8 <HAL_ADC_Start+0x194>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <HAL_ADC_Start+0x1a0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d136      	bne.n	80048c2 <HAL_ADC_Start+0x17e>
 8004854:	4b20      	ldr	r3, [pc, #128]	@ (80048d8 <HAL_ADC_Start+0x194>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d130      	bne.n	80048c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d129      	bne.n	80048c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	e020      	b.n	80048c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <HAL_ADC_Start+0x198>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d11b      	bne.n	80048c2 <HAL_ADC_Start+0x17e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d114      	bne.n	80048c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	e00b      	b.n	80048c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	f043 0210 	orr.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	f043 0201 	orr.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000018 	.word	0x20000018
 80048d4:	431bde83 	.word	0x431bde83
 80048d8:	40012300 	.word	0x40012300
 80048dc:	40012000 	.word	0x40012000
 80048e0:	40012100 	.word	0x40012100
 80048e4:	40012200 	.word	0x40012200

080048e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_Stop+0x16>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e021      	b.n	8004942 <HAL_ADC_Stop+0x5a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496a:	d113      	bne.n	8004994 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497a:	d10b      	bne.n	8004994 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e063      	b.n	8004a5c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004994:	f7ff fe62 	bl	800465c <HAL_GetTick>
 8004998:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800499a:	e021      	b.n	80049e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d01d      	beq.n	80049e0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_ADC_PollForConversion+0x6c>
 80049aa:	f7ff fe57 	bl	800465c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d212      	bcs.n	80049e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d00b      	beq.n	80049e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e03d      	b.n	8004a5c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d1d6      	bne.n	800499c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0212 	mvn.w	r2, #18
 80049f6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d123      	bne.n	8004a5a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11f      	bne.n	8004a5a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d111      	bne.n	8004a5a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d105      	bne.n	8004a5a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e105      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x228>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	d925      	bls.n	8004af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4613      	mov	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b1e      	subs	r3, #30
 8004ac2:	2207      	movs	r2, #7
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	400a      	ands	r2, r1
 8004ad0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68d9      	ldr	r1, [r3, #12]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4403      	add	r3, r0
 8004aea:	3b1e      	subs	r3, #30
 8004aec:	409a      	lsls	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e022      	b.n	8004b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43da      	mvns	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	400a      	ands	r2, r1
 8004b1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6919      	ldr	r1, [r3, #16]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4403      	add	r3, r0
 8004b34:	409a      	lsls	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b06      	cmp	r3, #6
 8004b44:	d824      	bhi.n	8004b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	3b05      	subs	r3, #5
 8004b58:	221f      	movs	r2, #31
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	400a      	ands	r2, r1
 8004b66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b05      	subs	r3, #5
 8004b82:	fa00 f203 	lsl.w	r2, r0, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b8e:	e04c      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d824      	bhi.n	8004be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3b23      	subs	r3, #35	@ 0x23
 8004baa:	221f      	movs	r2, #31
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3b23      	subs	r3, #35	@ 0x23
 8004bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
 8004be0:	e023      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3b41      	subs	r3, #65	@ 0x41
 8004bf4:	221f      	movs	r2, #31
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	400a      	ands	r2, r1
 8004c02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4618      	mov	r0, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b41      	subs	r3, #65	@ 0x41
 8004c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x234>)
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a21      	ldr	r2, [pc, #132]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x238>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d109      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x1cc>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b12      	cmp	r3, #18
 8004c3e:	d105      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a19      	ldr	r2, [pc, #100]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x238>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d123      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x21e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d003      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0x1e6>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b11      	cmp	r3, #17
 8004c64:	d11b      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d111      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_ADC_ConfigChannel+0x23c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a10      	ldr	r2, [pc, #64]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x240>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9a      	lsrs	r2, r3, #18
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c90:	e002      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f9      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40012300 	.word	0x40012300
 8004cb8:	40012000 	.word	0x40012000
 8004cbc:	20000018 	.word	0x20000018
 8004cc0:	431bde83 	.word	0x431bde83

08004cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ccc:	4b79      	ldr	r3, [pc, #484]	@ (8004eb4 <ADC_Init+0x1f0>)
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	021a      	lsls	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	4a58      	ldr	r2, [pc, #352]	@ (8004eb8 <ADC_Init+0x1f4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	e00f      	b.n	8004dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0202 	bic.w	r2, r2, #2
 8004dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7e1b      	ldrb	r3, [r3, #24]
 8004ddc:	005a      	lsls	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dfe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	035a      	lsls	r2, r3, #13
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	e007      	b.n	8004e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e36:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	051a      	lsls	r2, r3, #20
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e7a:	025a      	lsls	r2, r3, #9
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6899      	ldr	r1, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	029a      	lsls	r2, r3, #10
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012300 	.word	0x40012300
 8004eb8:	0f000001 	.word	0x0f000001

08004ebc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0ed      	b.n	80050aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fe fffa 	bl	8003ed4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef0:	f7ff fbb4 	bl	800465c <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ef6:	e012      	b.n	8004f1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ef8:	f7ff fbb0 	bl	800465c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b0a      	cmp	r3, #10
 8004f04:	d90b      	bls.n	8004f1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2205      	movs	r2, #5
 8004f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0c5      	b.n	80050aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0e5      	beq.n	8004ef8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0202 	bic.w	r2, r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f3c:	f7ff fb8e 	bl	800465c <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f42:	e012      	b.n	8004f6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f44:	f7ff fb8a 	bl	800465c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b0a      	cmp	r3, #10
 8004f50:	d90b      	bls.n	8004f6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2205      	movs	r2, #5
 8004f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e09f      	b.n	80050aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7e1b      	ldrb	r3, [r3, #24]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e007      	b.n	8004fa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7e5b      	ldrb	r3, [r3, #25]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d108      	bne.n	8004fbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e007      	b.n	8004fcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7e9b      	ldrb	r3, [r3, #26]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d108      	bne.n	8004fe6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0220 	orr.w	r2, r2, #32
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e007      	b.n	8004ff6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0220 	bic.w	r2, r2, #32
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7edb      	ldrb	r3, [r3, #27]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d108      	bne.n	8005010 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0210 	bic.w	r2, r2, #16
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e007      	b.n	8005020 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0210 	orr.w	r2, r2, #16
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	7f1b      	ldrb	r3, [r3, #28]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d108      	bne.n	800503a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e007      	b.n	800504a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0208 	bic.w	r2, r2, #8
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7f5b      	ldrb	r3, [r3, #29]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d108      	bne.n	8005064 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0204 	orr.w	r2, r2, #4
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e007      	b.n	8005074 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	ea42 0103 	orr.w	r1, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <HAL_CAN_ConfigFilter+0x26>
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	f040 80be 	bne.w	8005256 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80050da:	4b65      	ldr	r3, [pc, #404]	@ (8005270 <HAL_CAN_ConfigFilter+0x1bc>)
 80050dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050f4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	431a      	orrs	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2201      	movs	r2, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	401a      	ands	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d123      	bne.n	8005184 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800515e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3248      	adds	r2, #72	@ 0x48
 8005164:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005178:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	3348      	adds	r3, #72	@ 0x48
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d122      	bne.n	80051d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	431a      	orrs	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3248      	adds	r2, #72	@ 0x48
 80051b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	3348      	adds	r3, #72	@ 0x48
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	401a      	ands	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80051ec:	e007      	b.n	80051fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	43db      	mvns	r3, r3
 8005210:	401a      	ands	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005218:	e007      	b.n	800522a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	431a      	orrs	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	431a      	orrs	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005248:	f023 0201 	bic.w	r2, r3, #1
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e006      	b.n	8005264 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40006400 	.word	0x40006400

08005274 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d12e      	bne.n	80052e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052a0:	f7ff f9dc 	bl	800465c <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052a6:	e012      	b.n	80052ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052a8:	f7ff f9d8 	bl	800465c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b0a      	cmp	r3, #10
 80052b4:	d90b      	bls.n	80052ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2205      	movs	r2, #5
 80052c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e012      	b.n	80052f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e006      	b.n	80052f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
  }
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	@ 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005310:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d003      	beq.n	8005328 <HAL_CAN_AddTxMessage+0x2c>
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	2b02      	cmp	r3, #2
 8005324:	f040 80ad 	bne.w	8005482 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8095 	beq.w	8005472 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	0e1b      	lsrs	r3, r3, #24
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005352:	2201      	movs	r2, #1
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	409a      	lsls	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10d      	bne.n	8005380 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	6809      	ldr	r1, [r1, #0]
 8005372:	431a      	orrs	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3318      	adds	r3, #24
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	440b      	add	r3, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e00f      	b.n	80053a0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800538a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005394:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3318      	adds	r3, #24
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	440b      	add	r3, r1
 800539e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3318      	adds	r3, #24
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	440b      	add	r3, r1
 80053b0:	3304      	adds	r3, #4
 80053b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	7d1b      	ldrb	r3, [r3, #20]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d111      	bne.n	80053e0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3318      	adds	r3, #24
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	6811      	ldr	r1, [r2, #0]
 80053d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3318      	adds	r3, #24
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	440b      	add	r3, r1
 80053dc:	3304      	adds	r3, #4
 80053de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3307      	adds	r3, #7
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	061a      	lsls	r2, r3, #24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3306      	adds	r3, #6
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3305      	adds	r3, #5
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	4313      	orrs	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	3204      	adds	r2, #4
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	4610      	mov	r0, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	6811      	ldr	r1, [r2, #0]
 8005408:	ea43 0200 	orr.w	r2, r3, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	440b      	add	r3, r1
 8005412:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005416:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3303      	adds	r3, #3
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	061a      	lsls	r2, r3, #24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3302      	adds	r3, #2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3301      	adds	r3, #1
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	4313      	orrs	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	4610      	mov	r0, r2
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	ea43 0200 	orr.w	r2, r3, r0
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	440b      	add	r3, r1
 8005448:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800544c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	3318      	adds	r3, #24
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6811      	ldr	r1, [r2, #0]
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3318      	adds	r3, #24
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	440b      	add	r3, r1
 800546c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e00e      	b.n	8005490 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e006      	b.n	8005490 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
  }
}
 8005490:	4618      	mov	r0, r3
 8005492:	3724      	adds	r7, #36	@ 0x24
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d002      	beq.n	80054ba <HAL_CAN_ActivateNotification+0x1e>
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d109      	bne.n	80054ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6959      	ldr	r1, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e006      	b.n	80054dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d07c      	beq.n	8005628 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d023      	beq.n	8005580 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f983 	bl	8005856 <HAL_CAN_TxMailbox0CompleteCallback>
 8005550:	e016      	b.n	8005580 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	e00c      	b.n	8005580 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
 8005578:	e002      	b.n	8005580 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f989 	bl	8005892 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d024      	beq.n	80055d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005592:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f963 	bl	800586a <HAL_CAN_TxMailbox1CompleteCallback>
 80055a4:	e016      	b.n	80055d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b8:	e00c      	b.n	80055d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80055cc:	e002      	b.n	80055d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f969 	bl	80058a6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d024      	beq.n	8005628 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80055e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f943 	bl	800587e <HAL_CAN_TxMailbox2CompleteCallback>
 80055f8:	e016      	b.n	8005628 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e00c      	b.n	8005628 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005620:	e002      	b.n	8005628 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f949 	bl	80058ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2210      	movs	r2, #16
 800564a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2208      	movs	r2, #8
 8005666:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f93a 	bl	80058e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f921 	bl	80058ce <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2210      	movs	r2, #16
 80056ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f91c 	bl	800590a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f903 	bl	80058f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2210      	movs	r2, #16
 800570a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f906 	bl	800591e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2208      	movs	r2, #8
 800572c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8ff 	bl	8005932 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d07b      	beq.n	8005836 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d072      	beq.n	800582e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d043      	beq.n	800582e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03e      	beq.n	800582e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057b6:	2b60      	cmp	r3, #96	@ 0x60
 80057b8:	d02b      	beq.n	8005812 <HAL_CAN_IRQHandler+0x32a>
 80057ba:	2b60      	cmp	r3, #96	@ 0x60
 80057bc:	d82e      	bhi.n	800581c <HAL_CAN_IRQHandler+0x334>
 80057be:	2b50      	cmp	r3, #80	@ 0x50
 80057c0:	d022      	beq.n	8005808 <HAL_CAN_IRQHandler+0x320>
 80057c2:	2b50      	cmp	r3, #80	@ 0x50
 80057c4:	d82a      	bhi.n	800581c <HAL_CAN_IRQHandler+0x334>
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d019      	beq.n	80057fe <HAL_CAN_IRQHandler+0x316>
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d826      	bhi.n	800581c <HAL_CAN_IRQHandler+0x334>
 80057ce:	2b30      	cmp	r3, #48	@ 0x30
 80057d0:	d010      	beq.n	80057f4 <HAL_CAN_IRQHandler+0x30c>
 80057d2:	2b30      	cmp	r3, #48	@ 0x30
 80057d4:	d822      	bhi.n	800581c <HAL_CAN_IRQHandler+0x334>
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d002      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x2f8>
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d005      	beq.n	80057ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80057de:	e01d      	b.n	800581c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	f043 0308 	orr.w	r3, r3, #8
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057e8:	e019      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	f043 0310 	orr.w	r3, r3, #16
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057f2:	e014      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	f043 0320 	orr.w	r3, r3, #32
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80057fc:	e00f      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005806:	e00a      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005810:	e005      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800581a:	e000      	b.n	800581e <HAL_CAN_IRQHandler+0x336>
            break;
 800581c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800582c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2204      	movs	r2, #4
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f87c 	bl	8005946 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800584e:	bf00      	nop
 8005850:	3728      	adds	r7, #40	@ 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <__NVIC_SetPriorityGrouping>:
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800596c:	4b0c      	ldr	r3, [pc, #48]	@ (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005978:	4013      	ands	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800598e:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	60d3      	str	r3, [r2, #12]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <__NVIC_GetPriorityGrouping>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a8:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <__NVIC_GetPriorityGrouping+0x18>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	f003 0307 	and.w	r3, r3, #7
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <__NVIC_EnableIRQ>:
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db0b      	blt.n	80059ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f003 021f 	and.w	r2, r3, #31
 80059d8:	4907      	ldr	r1, [pc, #28]	@ (80059f8 <__NVIC_EnableIRQ+0x38>)
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2001      	movs	r0, #1
 80059e2:	fa00 f202 	lsl.w	r2, r0, r2
 80059e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	e000e100 	.word	0xe000e100

080059fc <__NVIC_SetPriority>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db0a      	blt.n	8005a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	490c      	ldr	r1, [pc, #48]	@ (8005a48 <__NVIC_SetPriority+0x4c>)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	440b      	add	r3, r1
 8005a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a24:	e00a      	b.n	8005a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4908      	ldr	r1, [pc, #32]	@ (8005a4c <__NVIC_SetPriority+0x50>)
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3b04      	subs	r3, #4
 8005a34:	0112      	lsls	r2, r2, #4
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	440b      	add	r3, r1
 8005a3a:	761a      	strb	r2, [r3, #24]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000e100 	.word	0xe000e100
 8005a4c:	e000ed00 	.word	0xe000ed00

08005a50 <NVIC_EncodePriority>:
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	@ 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f1c3 0307 	rsb	r3, r3, #7
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	bf28      	it	cs
 8005a6e:	2304      	movcs	r3, #4
 8005a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3304      	adds	r3, #4
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d902      	bls.n	8005a80 <NVIC_EncodePriority+0x30>
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3b03      	subs	r3, #3
 8005a7e:	e000      	b.n	8005a82 <NVIC_EncodePriority+0x32>
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	401a      	ands	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a98:	f04f 31ff 	mov.w	r1, #4294967295
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa2:	43d9      	mvns	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa8:	4313      	orrs	r3, r2
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <SysTick_Config>:
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ac8:	d301      	bcc.n	8005ace <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005aca:	2301      	movs	r3, #1
 8005acc:	e00f      	b.n	8005aee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ace:	4a0a      	ldr	r2, [pc, #40]	@ (8005af8 <SysTick_Config+0x40>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	f7ff ff8e 	bl	80059fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <SysTick_Config+0x40>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ae6:	4b04      	ldr	r3, [pc, #16]	@ (8005af8 <SysTick_Config+0x40>)
 8005ae8:	2207      	movs	r2, #7
 8005aea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	e000e010 	.word	0xe000e010

08005afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ff29 	bl	800595c <__NVIC_SetPriorityGrouping>
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b24:	f7ff ff3e 	bl	80059a4 <__NVIC_GetPriorityGrouping>
 8005b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f7ff ff8e 	bl	8005a50 <NVIC_EncodePriority>
 8005b34:	4602      	mov	r2, r0
 8005b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff5d 	bl	80059fc <__NVIC_SetPriority>
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4603      	mov	r3, r0
 8005b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff ff31 	bl	80059c0 <__NVIC_EnableIRQ>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ffa2 	bl	8005ab8 <SysTick_Config>
 8005b74:	4603      	mov	r3, r0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	@ 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e16b      	b.n	8005e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	f040 815a 	bne.w	8005e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d005      	beq.n	8005bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d130      	bne.n	8005c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2203      	movs	r2, #3
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c08:	2201      	movs	r2, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 0201 	and.w	r2, r3, #1
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d017      	beq.n	8005c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d123      	bne.n	8005cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	08da      	lsrs	r2, r3, #3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3208      	adds	r2, #8
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	220f      	movs	r2, #15
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	08da      	lsrs	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3208      	adds	r2, #8
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	2203      	movs	r2, #3
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0203 	and.w	r2, r3, #3
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80b4 	beq.w	8005e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	4b60      	ldr	r3, [pc, #384]	@ (8005e8c <HAL_GPIO_Init+0x30c>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005e8c <HAL_GPIO_Init+0x30c>)
 8005d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d16:	4b5d      	ldr	r3, [pc, #372]	@ (8005e8c <HAL_GPIO_Init+0x30c>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d22:	4a5b      	ldr	r2, [pc, #364]	@ (8005e90 <HAL_GPIO_Init+0x310>)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	220f      	movs	r2, #15
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a52      	ldr	r2, [pc, #328]	@ (8005e94 <HAL_GPIO_Init+0x314>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d02b      	beq.n	8005da6 <HAL_GPIO_Init+0x226>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a51      	ldr	r2, [pc, #324]	@ (8005e98 <HAL_GPIO_Init+0x318>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d025      	beq.n	8005da2 <HAL_GPIO_Init+0x222>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a50      	ldr	r2, [pc, #320]	@ (8005e9c <HAL_GPIO_Init+0x31c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01f      	beq.n	8005d9e <HAL_GPIO_Init+0x21e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea0 <HAL_GPIO_Init+0x320>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d019      	beq.n	8005d9a <HAL_GPIO_Init+0x21a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4e      	ldr	r2, [pc, #312]	@ (8005ea4 <HAL_GPIO_Init+0x324>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_GPIO_Init+0x216>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a4d      	ldr	r2, [pc, #308]	@ (8005ea8 <HAL_GPIO_Init+0x328>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00d      	beq.n	8005d92 <HAL_GPIO_Init+0x212>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4c      	ldr	r2, [pc, #304]	@ (8005eac <HAL_GPIO_Init+0x32c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <HAL_GPIO_Init+0x20e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a4b      	ldr	r2, [pc, #300]	@ (8005eb0 <HAL_GPIO_Init+0x330>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_GPIO_Init+0x20a>
 8005d86:	2307      	movs	r3, #7
 8005d88:	e00e      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	e00c      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d8e:	2306      	movs	r3, #6
 8005d90:	e00a      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d92:	2305      	movs	r3, #5
 8005d94:	e008      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d96:	2304      	movs	r3, #4
 8005d98:	e006      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e004      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e002      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_GPIO_Init+0x228>
 8005da6:	2300      	movs	r3, #0
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f002 0203 	and.w	r2, r2, #3
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	4093      	lsls	r3, r2
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005db8:	4935      	ldr	r1, [pc, #212]	@ (8005e90 <HAL_GPIO_Init+0x310>)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dea:	4a32      	ldr	r2, [pc, #200]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005df0:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e14:	4a27      	ldr	r2, [pc, #156]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e44:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e68:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	f67f ae90 	bls.w	8005b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	3724      	adds	r7, #36	@ 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40020000 	.word	0x40020000
 8005e98:	40020400 	.word	0x40020400
 8005e9c:	40020800 	.word	0x40020800
 8005ea0:	40020c00 	.word	0x40020c00
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40021400 	.word	0x40021400
 8005eac:	40021800 	.word	0x40021800
 8005eb0:	40021c00 	.word	0x40021c00
 8005eb4:	40013c00 	.word	0x40013c00

08005eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
 8005ed4:	e001      	b.n	8005eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef8:	787b      	ldrb	r3, [r7, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f04:	e003      	b.n	8005f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	041a      	lsls	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b086      	sub	sp, #24
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e101      	b.n	8006130 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f006 fa8e 	bl	800c468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f5a:	d102      	bne.n	8005f62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 fedb 	bl	8008d22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7c1a      	ldrb	r2, [r3, #16]
 8005f74:	f88d 2000 	strb.w	r2, [sp]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f7c:	f002 fdba 	bl	8008af4 <USB_CoreInit>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0ce      	b.n	8006130 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f002 fed3 	bl	8008d44 <USB_SetCurrentMode>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0bf      	b.n	8006130 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
 8005fb4:	e04a      	b.n	800604c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	3315      	adds	r3, #21
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fca:	7bfa      	ldrb	r2, [r7, #15]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	3314      	adds	r3, #20
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fde:	7bfa      	ldrb	r2, [r7, #15]
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	b298      	uxth	r0, r3
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	332e      	adds	r3, #46	@ 0x2e
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ff6:	7bfa      	ldrb	r2, [r7, #15]
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3318      	adds	r3, #24
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800600a:	7bfa      	ldrb	r2, [r7, #15]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	331c      	adds	r3, #28
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800601e:	7bfa      	ldrb	r2, [r7, #15]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	3320      	adds	r3, #32
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3324      	adds	r3, #36	@ 0x24
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	3301      	adds	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	429a      	cmp	r2, r3
 8006054:	d3af      	bcc.n	8005fb6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
 800605a:	e044      	b.n	80060e6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800605c:	7bfa      	ldrb	r2, [r7, #15]
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006088:	7bfa      	ldrb	r2, [r7, #15]
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800609e:	7bfa      	ldrb	r2, [r7, #15]
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060b4:	7bfa      	ldrb	r2, [r7, #15]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	3301      	adds	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	791b      	ldrb	r3, [r3, #4]
 80060ea:	7bfa      	ldrb	r2, [r7, #15]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d3b5      	bcc.n	800605c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7c1a      	ldrb	r2, [r3, #16]
 80060f8:	f88d 2000 	strb.w	r2, [sp]
 80060fc:	3304      	adds	r3, #4
 80060fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006100:	f002 fe6c 	bl	8008ddc <USB_DevInit>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e00c      	b.n	8006130 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f003 feb6 	bl	8009e9a <USB_DevDisconnect>

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_PCD_Start+0x1c>
 8006150:	2302      	movs	r3, #2
 8006152:	e022      	b.n	800619a <HAL_PCD_Start+0x62>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006174:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f002 fdbd 	bl	8008d00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f003 fe64 	bl	8009e58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061a2:	b590      	push	{r4, r7, lr}
 80061a4:	b08d      	sub	sp, #52	@ 0x34
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f003 ff22 	bl	800a002 <USB_GetMode>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f040 848c 	bne.w	8006ade <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f003 fe86 	bl	8009edc <USB_ReadInterrupts>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8482 	beq.w	8006adc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f003 fe73 	bl	8009edc <USB_ReadInterrupts>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d107      	bne.n	8006210 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f002 0202 	and.w	r2, r2, #2
 800620e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f003 fe61 	bl	8009edc <USB_ReadInterrupts>
 800621a:	4603      	mov	r3, r0
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d161      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0210 	bic.w	r2, r2, #16
 8006232:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f003 020f 	and.w	r2, r3, #15
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	3304      	adds	r3, #4
 8006252:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800625a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800625e:	d124      	bne.n	80062aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006266:	4013      	ands	r3, r2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d035      	beq.n	80062d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6a38      	ldr	r0, [r7, #32]
 8006280:	f003 fc98 	bl	8009bb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006290:	441a      	add	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a2:	441a      	add	r2, r3
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	615a      	str	r2, [r3, #20]
 80062a8:	e016      	b.n	80062d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80062b4:	d110      	bne.n	80062d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062bc:	2208      	movs	r2, #8
 80062be:	4619      	mov	r1, r3
 80062c0:	6a38      	ldr	r0, [r7, #32]
 80062c2:	f003 fc77 	bl	8009bb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d2:	441a      	add	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0210 	orr.w	r2, r2, #16
 80062e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f003 fdf5 	bl	8009edc <USB_ReadInterrupts>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062fc:	f040 80a7 	bne.w	800644e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f003 fdfa 	bl	8009f02 <USB_ReadDevAllOutEpInterrupt>
 800630e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006310:	e099      	b.n	8006446 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 808e 	beq.w	800643a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f003 fe1e 	bl	8009f6a <USB_ReadDevOutEPInterrupt>
 800632e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006346:	461a      	mov	r2, r3
 8006348:	2301      	movs	r3, #1
 800634a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800634c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fea4 	bl	800709c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	461a      	mov	r2, r3
 800636c:	2308      	movs	r3, #8
 800636e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 ff7a 	bl	800726c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	461a      	mov	r2, r3
 8006390:	2310      	movs	r3, #16
 8006392:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d030      	beq.n	8006400 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b80      	cmp	r3, #128	@ 0x80
 80063a8:	d109      	bne.n	80063be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80063be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
 80063d0:	3304      	adds	r3, #4
 80063d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d108      	bne.n	80063ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f006 f943 	bl	800c674 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	2302      	movs	r3, #2
 80063fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	2320      	movs	r3, #32
 800641a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006432:	461a      	mov	r2, r3
 8006434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006438:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	3301      	adds	r3, #1
 800643e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f af62 	bne.w	8006312 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f003 fd42 	bl	8009edc <USB_ReadInterrupts>
 8006458:	4603      	mov	r3, r0
 800645a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800645e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006462:	f040 80db 	bne.w	800661c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f003 fd63 	bl	8009f36 <USB_ReadDevAllInEpInterrupt>
 8006470:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006476:	e0cd      	b.n	8006614 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80c2 	beq.w	8006608 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f003 fd89 	bl	8009fa6 <USB_ReadDevInEPInterrupt>
 8006494:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d057      	beq.n	8006550 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	2201      	movs	r2, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69f9      	ldr	r1, [r7, #28]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064c0:	4013      	ands	r3, r2
 80064c2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d0:	461a      	mov	r2, r3
 80064d2:	2301      	movs	r3, #1
 80064d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	799b      	ldrb	r3, [r3, #6]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d132      	bne.n	8006544 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	3320      	adds	r3, #32
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f4:	4613      	mov	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4403      	add	r3, r0
 80064fe:	331c      	adds	r3, #28
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4419      	add	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006508:	4613      	mov	r3, r2
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4403      	add	r3, r0
 8006512:	3320      	adds	r3, #32
 8006514:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d113      	bne.n	8006544 <HAL_PCD_IRQHandler+0x3a2>
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	3324      	adds	r3, #36	@ 0x24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d108      	bne.n	8006544 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800653c:	461a      	mov	r2, r3
 800653e:	2101      	movs	r1, #1
 8006540:	f003 fd90 	bl	800a064 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f006 f80d 	bl	800c56a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006566:	461a      	mov	r2, r3
 8006568:	2308      	movs	r3, #8
 800656a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	2310      	movs	r3, #16
 8006586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800659e:	461a      	mov	r2, r3
 80065a0:	2340      	movs	r3, #64	@ 0x40
 80065a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d023      	beq.n	80065f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80065ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065b0:	6a38      	ldr	r0, [r7, #32]
 80065b2:	f002 fd77 	bl	80090a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	3310      	adds	r3, #16
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	3304      	adds	r3, #4
 80065c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d108      	bne.n	80065e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f006 f85a 	bl	800c698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	461a      	mov	r2, r3
 80065f2:	2302      	movs	r3, #2
 80065f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fcbd 	bl	8006f82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	3301      	adds	r3, #1
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	f47f af2e 	bne.w	8006478 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f003 fc5b 	bl	8009edc <USB_ReadInterrupts>
 8006626:	4603      	mov	r3, r0
 8006628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800662c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006630:	d122      	bne.n	8006678 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800664c:	2b01      	cmp	r3, #1
 800664e:	d108      	bne.n	8006662 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006658:	2100      	movs	r1, #0
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fea4 	bl	80073a8 <HAL_PCDEx_LPM_Callback>
 8006660:	e002      	b.n	8006668 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f005 fff8 	bl	800c658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f003 fc2d 	bl	8009edc <USB_ReadInterrupts>
 8006682:	4603      	mov	r3, r0
 8006684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800668c:	d112      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d102      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f005 ffb4 	bl	800c60c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80066b2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f003 fc0f 	bl	8009edc <USB_ReadInterrupts>
 80066be:	4603      	mov	r3, r0
 80066c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c8:	f040 80b7 	bne.w	800683a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2110      	movs	r1, #16
 80066e6:	4618      	mov	r0, r3
 80066e8:	f002 fcdc 	bl	80090a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f0:	e046      	b.n	8006780 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fe:	461a      	mov	r2, r3
 8006700:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006704:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006720:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006724:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006738:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006754:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006758:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006774:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006778:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	3301      	adds	r3, #1
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	4293      	cmp	r3, r2
 800678a:	d3b2      	bcc.n	80066f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800679a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800679e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7bdb      	ldrb	r3, [r3, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d016      	beq.n	80067d6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067b8:	f043 030b 	orr.w	r3, r3, #11
 80067bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067ce:	f043 030b 	orr.w	r3, r3, #11
 80067d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80067d4:	e015      	b.n	8006802 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80067e8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80067ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067fc:	f043 030b 	orr.w	r3, r3, #11
 8006800:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006810:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006814:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006824:	461a      	mov	r2, r3
 8006826:	f003 fc1d 	bl	800a064 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f003 fb4c 	bl	8009edc <USB_ReadInterrupts>
 8006844:	4603      	mov	r3, r0
 8006846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	d123      	bne.n	8006898 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f003 fbe2 	bl	800a01e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f002 fc99 	bl	8009196 <USB_GetDevSpeed>
 8006864:	4603      	mov	r3, r0
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681c      	ldr	r4, [r3, #0]
 8006870:	f001 fa0a 	bl	8007c88 <HAL_RCC_GetHCLKFreq>
 8006874:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800687a:	461a      	mov	r2, r3
 800687c:	4620      	mov	r0, r4
 800687e:	f002 f99d 	bl	8008bbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f005 fe99 	bl	800c5ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006896:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f003 fb1d 	bl	8009edc <USB_ReadInterrupts>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d10a      	bne.n	80068c2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f005 fe76 	bl	800c59e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f002 0208 	and.w	r2, r2, #8
 80068c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f003 fb08 	bl	8009edc <USB_ReadInterrupts>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	d123      	bne.n	800691e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068e2:	2301      	movs	r3, #1
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e014      	b.n	8006912 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d105      	bne.n	800690c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	b2db      	uxtb	r3, r3
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb0a 	bl	8006f20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	3301      	adds	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	461a      	mov	r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	4293      	cmp	r3, r2
 800691c:	d3e4      	bcc.n	80068e8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f003 fada 	bl	8009edc <USB_ReadInterrupts>
 8006928:	4603      	mov	r3, r0
 800692a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006932:	d13c      	bne.n	80069ae <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006934:	2301      	movs	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	e02b      	b.n	8006992 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3318      	adds	r3, #24
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d115      	bne.n	800698c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006960:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006962:	2b00      	cmp	r3, #0
 8006964:	da12      	bge.n	800698c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	3317      	adds	r3, #23
 8006976:	2201      	movs	r2, #1
 8006978:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 faca 	bl	8006f20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	3301      	adds	r3, #1
 8006990:	627b      	str	r3, [r7, #36]	@ 0x24
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	791b      	ldrb	r3, [r3, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	4293      	cmp	r3, r2
 800699c:	d3cd      	bcc.n	800693a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80069ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f003 fa92 	bl	8009edc <USB_ReadInterrupts>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c2:	d156      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069c4:	2301      	movs	r3, #1
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c8:	e045      	b.n	8006a56 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d12e      	bne.n	8006a50 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80069f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	da2b      	bge.n	8006a50 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006a04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d121      	bne.n	8006a50 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006a1e:	2201      	movs	r2, #1
 8006a20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a4c:	6053      	str	r3, [r2, #4]
            break;
 8006a4e:	e008      	b.n	8006a62 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	791b      	ldrb	r3, [r3, #4]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d3b3      	bcc.n	80069ca <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f003 fa30 	bl	8009edc <USB_ReadInterrupts>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a86:	d10a      	bne.n	8006a9e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f005 fe17 	bl	800c6bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f003 fa1a 	bl	8009edc <USB_ReadInterrupts>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d115      	bne.n	8006ade <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f005 fe07 	bl	800c6d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6859      	ldr	r1, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	e000      	b.n	8006ade <HAL_PCD_IRQHandler+0x93c>
      return;
 8006adc:	bf00      	nop
    }
  }
}
 8006ade:	3734      	adds	r7, #52	@ 0x34
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd90      	pop	{r4, r7, pc}

08006ae4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_PCD_SetAddress+0x1a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e012      	b.n	8006b24 <HAL_PCD_SetAddress+0x40>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f003 f979 	bl	8009e0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	70fb      	strb	r3, [r7, #3]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	803b      	strh	r3, [r7, #0]
 8006b42:	4613      	mov	r3, r2
 8006b44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da0f      	bge.n	8006b72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	f003 020f 	and.w	r2, r3, #15
 8006b58:	4613      	mov	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	3310      	adds	r3, #16
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	4413      	add	r3, r2
 8006b66:	3304      	adds	r3, #4
 8006b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	705a      	strb	r2, [r3, #1]
 8006b70:	e00f      	b.n	8006b92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006b9e:	883b      	ldrh	r3, [r7, #0]
 8006ba0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	78ba      	ldrb	r2, [r7, #2]
 8006bac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006bc0:	78bb      	ldrb	r3, [r7, #2]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d102      	bne.n	8006bcc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_PCD_EP_Open+0xae>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e00e      	b.n	8006bf8 <HAL_PCD_EP_Open+0xcc>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 faf9 	bl	80091e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da0f      	bge.n	8006c34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	3310      	adds	r3, #16
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	705a      	strb	r2, [r3, #1]
 8006c32:	e00f      	b.n	8006c54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	f003 020f 	and.w	r2, r3, #15
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_PCD_EP_Close+0x6e>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e00e      	b.n	8006c8c <HAL_PCD_EP_Close+0x8c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 fb37 	bl	80092f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	4613      	mov	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	3304      	adds	r3, #4
 8006cbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	799b      	ldrb	r3, [r3, #6]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d102      	bne.n	8006cf0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	799b      	ldrb	r3, [r3, #6]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6979      	ldr	r1, [r7, #20]
 8006cfc:	f002 fbd4 	bl	80094a8 <USB_EPStartXfer>

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006d2c:	681b      	ldr	r3, [r3, #0]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	460b      	mov	r3, r1
 8006d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	f003 020f 	and.w	r2, r3, #15
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3310      	adds	r3, #16
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2201      	movs	r2, #1
 8006d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	799b      	ldrb	r3, [r3, #6]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d102      	bne.n	8006d94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	f002 fb82 	bl	80094a8 <USB_EPStartXfer>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	7912      	ldrb	r2, [r2, #4]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e04f      	b.n	8006e6c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da0f      	bge.n	8006df4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	3310      	adds	r3, #16
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	3304      	adds	r3, #4
 8006dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	705a      	strb	r2, [r3, #1]
 8006df2:	e00d      	b.n	8006e10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	4613      	mov	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	3304      	adds	r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_PCD_EP_SetStall+0x82>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e01d      	b.n	8006e6c <HAL_PCD_EP_SetStall+0xbe>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f002 ff10 	bl	8009c64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7999      	ldrb	r1, [r3, #6]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f003 f901 	bl	800a064 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	7912      	ldrb	r2, [r2, #4]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e042      	b.n	8006f18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da0f      	bge.n	8006eba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	705a      	strb	r2, [r3, #1]
 8006eb8:	e00f      	b.n	8006eda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_PCD_EP_ClrStall+0x86>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e00e      	b.n	8006f18 <HAL_PCD_EP_ClrStall+0xa4>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 ff19 	bl	8009d40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da0c      	bge.n	8006f4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	f003 020f 	and.w	r2, r3, #15
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	3310      	adds	r3, #16
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	4413      	add	r3, r2
 8006f48:	3304      	adds	r3, #4
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	e00c      	b.n	8006f68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	3304      	adds	r3, #4
 8006f66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 fd38 	bl	80099e4 <USB_EPStopXfer>
 8006f74:	4603      	mov	r3, r0
 8006f76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f78:	7afb      	ldrb	r3, [r7, #11]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b08a      	sub	sp, #40	@ 0x28
 8006f86:	af02      	add	r7, sp, #8
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	3310      	adds	r3, #16
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d901      	bls.n	8006fba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e06b      	b.n	8007092 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d902      	bls.n	8006fd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3303      	adds	r3, #3
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006fde:	e02a      	b.n	8007036 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d902      	bls.n	8006ffc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3303      	adds	r3, #3
 8007000:	089b      	lsrs	r3, r3, #2
 8007002:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68d9      	ldr	r1, [r3, #12]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4603      	mov	r3, r0
 8007018:	6978      	ldr	r0, [r7, #20]
 800701a:	f002 fd8d 	bl	8009b38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	441a      	add	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d809      	bhi.n	8007060 <PCD_WriteEmptyTxFifo+0xde>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007054:	429a      	cmp	r2, r3
 8007056:	d203      	bcs.n	8007060 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1bf      	bne.n	8006fe0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	d811      	bhi.n	8007090 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	43db      	mvns	r3, r3
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800708c:	4013      	ands	r3, r2
 800708e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	333c      	adds	r3, #60	@ 0x3c
 80070b4:	3304      	adds	r3, #4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	799b      	ldrb	r3, [r3, #6]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d17b      	bne.n	80071ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d015      	beq.n	8007108 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4a61      	ldr	r2, [pc, #388]	@ (8007264 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	f240 80b9 	bls.w	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80b3 	beq.w	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	461a      	mov	r2, r3
 8007100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007104:	6093      	str	r3, [r2, #8]
 8007106:	e0a7      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711e:	461a      	mov	r2, r3
 8007120:	2320      	movs	r3, #32
 8007122:	6093      	str	r3, [r2, #8]
 8007124:	e098      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 8093 	bne.w	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4a4b      	ldr	r2, [pc, #300]	@ (8007264 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d90f      	bls.n	800715a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007150:	461a      	mov	r2, r3
 8007152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007156:	6093      	str	r3, [r2, #8]
 8007158:	e07e      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	0159      	lsls	r1, r3, #5
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	440b      	add	r3, r1
 800717c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d114      	bne.n	80071bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071a4:	461a      	mov	r2, r3
 80071a6:	2101      	movs	r1, #1
 80071a8:	f002 ff5c 	bl	800a064 <USB_EP0_OutStart>
 80071ac:	e006      	b.n	80071bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	441a      	add	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f005 f9b6 	bl	800c534 <HAL_PCD_DataOutStageCallback>
 80071c8:	e046      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4a26      	ldr	r2, [pc, #152]	@ (8007268 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d124      	bne.n	800721c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e8:	461a      	mov	r2, r3
 80071ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ee:	6093      	str	r3, [r2, #8]
 80071f0:	e032      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007208:	461a      	mov	r2, r3
 800720a:	2320      	movs	r3, #32
 800720c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f005 f98d 	bl	800c534 <HAL_PCD_DataOutStageCallback>
 800721a:	e01d      	b.n	8007258 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d114      	bne.n	800724c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007244:	461a      	mov	r2, r3
 8007246:	2100      	movs	r1, #0
 8007248:	f002 ff0c 	bl	800a064 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f005 f96e 	bl	800c534 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	4f54300a 	.word	0x4f54300a
 8007268:	4f54310a 	.word	0x4f54310a

0800726c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	333c      	adds	r3, #60	@ 0x3c
 8007284:	3304      	adds	r3, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a15      	ldr	r2, [pc, #84]	@ (80072f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d90e      	bls.n	80072c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b8:	461a      	mov	r2, r3
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f005 f925 	bl	800c510 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a0a      	ldr	r2, [pc, #40]	@ (80072f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d90c      	bls.n	80072e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	799b      	ldrb	r3, [r3, #6]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d108      	bne.n	80072e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072e0:	461a      	mov	r2, r3
 80072e2:	2101      	movs	r1, #1
 80072e4:	f002 febe 	bl	800a064 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	4f54300a 	.word	0x4f54300a

080072f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
 8007304:	4613      	mov	r3, r2
 8007306:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007316:	883b      	ldrh	r3, [r7, #0]
 8007318:	0419      	lsls	r1, r3, #16
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	430a      	orrs	r2, r1
 8007322:	629a      	str	r2, [r3, #40]	@ 0x28
 8007324:	e028      	b.n	8007378 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
 8007338:	e00d      	b.n	8007356 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	3340      	adds	r3, #64	@ 0x40
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	3301      	adds	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	7bfa      	ldrb	r2, [r7, #15]
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	3b01      	subs	r3, #1
 800735c:	429a      	cmp	r2, r3
 800735e:	d3ec      	bcc.n	800733a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007360:	883b      	ldrh	r3, [r7, #0]
 8007362:	0418      	lsls	r0, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	3b01      	subs	r3, #1
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	4302      	orrs	r2, r0
 8007370:	3340      	adds	r3, #64	@ 0x40
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e267      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d075      	beq.n	80074ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073de:	4b88      	ldr	r3, [pc, #544]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 030c 	and.w	r3, r3, #12
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d00c      	beq.n	8007404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073ea:	4b85      	ldr	r3, [pc, #532]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d112      	bne.n	800741c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f6:	4b82      	ldr	r3, [pc, #520]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007402:	d10b      	bne.n	800741c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007404:	4b7e      	ldr	r3, [pc, #504]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05b      	beq.n	80074c8 <HAL_RCC_OscConfig+0x108>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d157      	bne.n	80074c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e242      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007424:	d106      	bne.n	8007434 <HAL_RCC_OscConfig+0x74>
 8007426:	4b76      	ldr	r3, [pc, #472]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a75      	ldr	r2, [pc, #468]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e01d      	b.n	8007470 <HAL_RCC_OscConfig+0xb0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800743c:	d10c      	bne.n	8007458 <HAL_RCC_OscConfig+0x98>
 800743e:	4b70      	ldr	r3, [pc, #448]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a6f      	ldr	r2, [pc, #444]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4b6d      	ldr	r3, [pc, #436]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a6c      	ldr	r2, [pc, #432]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	e00b      	b.n	8007470 <HAL_RCC_OscConfig+0xb0>
 8007458:	4b69      	ldr	r3, [pc, #420]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a68      	ldr	r2, [pc, #416]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800745e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b66      	ldr	r3, [pc, #408]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a65      	ldr	r2, [pc, #404]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800746a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800746e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d013      	beq.n	80074a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007478:	f7fd f8f0 	bl	800465c <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007480:	f7fd f8ec 	bl	800465c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b64      	cmp	r3, #100	@ 0x64
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e207      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007492:	4b5b      	ldr	r3, [pc, #364]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0f0      	beq.n	8007480 <HAL_RCC_OscConfig+0xc0>
 800749e:	e014      	b.n	80074ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fd f8dc 	bl	800465c <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a8:	f7fd f8d8 	bl	800465c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b64      	cmp	r3, #100	@ 0x64
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e1f3      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ba:	4b51      	ldr	r3, [pc, #324]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0xe8>
 80074c6:	e000      	b.n	80074ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d063      	beq.n	800759e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 030c 	and.w	r3, r3, #12
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074e2:	4b47      	ldr	r3, [pc, #284]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d11c      	bne.n	8007528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ee:	4b44      	ldr	r3, [pc, #272]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d116      	bne.n	8007528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074fa:	4b41      	ldr	r3, [pc, #260]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_RCC_OscConfig+0x152>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d001      	beq.n	8007512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e1c7      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007512:	4b3b      	ldr	r3, [pc, #236]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4937      	ldr	r1, [pc, #220]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007526:	e03a      	b.n	800759e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d020      	beq.n	8007572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007530:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <HAL_RCC_OscConfig+0x244>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fd f891 	bl	800465c <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753e:	f7fd f88d 	bl	800465c <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e1a8      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007550:	4b2b      	ldr	r3, [pc, #172]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f0      	beq.n	800753e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800755c:	4b28      	ldr	r3, [pc, #160]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4925      	ldr	r1, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800756c:	4313      	orrs	r3, r2
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	e015      	b.n	800759e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <HAL_RCC_OscConfig+0x244>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fd f870 	bl	800465c <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007580:	f7fd f86c 	bl	800465c <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e187      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007592:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d036      	beq.n	8007618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b2:	4b15      	ldr	r3, [pc, #84]	@ (8007608 <HAL_RCC_OscConfig+0x248>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b8:	f7fd f850 	bl	800465c <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c0:	f7fd f84c 	bl	800465c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e167      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80075d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0x200>
 80075de:	e01b      	b.n	8007618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <HAL_RCC_OscConfig+0x248>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075e6:	f7fd f839 	bl	800465c <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ec:	e00e      	b.n	800760c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ee:	f7fd f835 	bl	800465c <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d907      	bls.n	800760c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e150      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
 8007600:	40023800 	.word	0x40023800
 8007604:	42470000 	.word	0x42470000
 8007608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800760c:	4b88      	ldr	r3, [pc, #544]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800760e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1ea      	bne.n	80075ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8097 	beq.w	8007754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800762a:	4b81      	ldr	r3, [pc, #516]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10f      	bne.n	8007656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	4b7d      	ldr	r3, [pc, #500]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	4a7c      	ldr	r2, [pc, #496]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007644:	6413      	str	r3, [r2, #64]	@ 0x40
 8007646:	4b7a      	ldr	r3, [pc, #488]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007652:	2301      	movs	r3, #1
 8007654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007656:	4b77      	ldr	r3, [pc, #476]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d118      	bne.n	8007694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007662:	4b74      	ldr	r3, [pc, #464]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a73      	ldr	r2, [pc, #460]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800766c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800766e:	f7fc fff5 	bl	800465c <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007676:	f7fc fff1 	bl	800465c <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e10c      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007688:	4b6a      	ldr	r3, [pc, #424]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d106      	bne.n	80076aa <HAL_RCC_OscConfig+0x2ea>
 800769c:	4b64      	ldr	r3, [pc, #400]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800769e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a0:	4a63      	ldr	r2, [pc, #396]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076a8:	e01c      	b.n	80076e4 <HAL_RCC_OscConfig+0x324>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d10c      	bne.n	80076cc <HAL_RCC_OscConfig+0x30c>
 80076b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076b8:	f043 0304 	orr.w	r3, r3, #4
 80076bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80076be:	4b5c      	ldr	r3, [pc, #368]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c2:	4a5b      	ldr	r2, [pc, #364]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ca:	e00b      	b.n	80076e4 <HAL_RCC_OscConfig+0x324>
 80076cc:	4b58      	ldr	r3, [pc, #352]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d0:	4a57      	ldr	r2, [pc, #348]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d8:	4b55      	ldr	r3, [pc, #340]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076dc:	4a54      	ldr	r2, [pc, #336]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076de:	f023 0304 	bic.w	r3, r3, #4
 80076e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ec:	f7fc ffb6 	bl	800465c <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f2:	e00a      	b.n	800770a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f4:	f7fc ffb2 	bl	800465c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e0cb      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770a:	4b49      	ldr	r3, [pc, #292]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0ee      	beq.n	80076f4 <HAL_RCC_OscConfig+0x334>
 8007716:	e014      	b.n	8007742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007718:	f7fc ffa0 	bl	800465c <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800771e:	e00a      	b.n	8007736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007720:	f7fc ff9c 	bl	800465c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e0b5      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007736:	4b3e      	ldr	r3, [pc, #248]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1ee      	bne.n	8007720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007748:	4b39      	ldr	r3, [pc, #228]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	4a38      	ldr	r2, [pc, #224]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a1 	beq.w	80078a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800775e:	4b34      	ldr	r3, [pc, #208]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b08      	cmp	r3, #8
 8007768:	d05c      	beq.n	8007824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d141      	bne.n	80077f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007772:	4b31      	ldr	r3, [pc, #196]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007778:	f7fc ff70 	bl	800465c <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007780:	f7fc ff6c 	bl	800465c <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e087      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007792:	4b27      	ldr	r3, [pc, #156]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69da      	ldr	r2, [r3, #28]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	019b      	lsls	r3, r3, #6
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	3b01      	subs	r3, #1
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	061b      	lsls	r3, r3, #24
 80077c2:	491b      	ldr	r1, [pc, #108]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ce:	f7fc ff45 	bl	800465c <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d6:	f7fc ff41 	bl	800465c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e05c      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e8:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0f0      	beq.n	80077d6 <HAL_RCC_OscConfig+0x416>
 80077f4:	e054      	b.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f6:	4b10      	ldr	r3, [pc, #64]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fc:	f7fc ff2e 	bl	800465c <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007804:	f7fc ff2a 	bl	800465c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e045      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007816:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x444>
 8007822:	e03d      	b.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d107      	bne.n	800783c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e038      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
 8007830:	40023800 	.word	0x40023800
 8007834:	40007000 	.word	0x40007000
 8007838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800783c:	4b1b      	ldr	r3, [pc, #108]	@ (80078ac <HAL_RCC_OscConfig+0x4ec>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d028      	beq.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d121      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007862:	429a      	cmp	r2, r3
 8007864:	d11a      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007874:	4293      	cmp	r3, r2
 8007876:	d111      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	3b01      	subs	r3, #1
 8007886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d107      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800

080078b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0cc      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c4:	4b68      	ldr	r3, [pc, #416]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d90c      	bls.n	80078ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b65      	ldr	r3, [pc, #404]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078da:	4b63      	ldr	r3, [pc, #396]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0b8      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d020      	beq.n	800793a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007904:	4b59      	ldr	r3, [pc, #356]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4a58      	ldr	r2, [pc, #352]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800790e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800791c:	4b53      	ldr	r3, [pc, #332]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	4a52      	ldr	r2, [pc, #328]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007928:	4b50      	ldr	r3, [pc, #320]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	494d      	ldr	r1, [pc, #308]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d044      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d107      	bne.n	800795e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794e:	4b47      	ldr	r3, [pc, #284]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d119      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e07f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d003      	beq.n	800796e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800796a:	2b03      	cmp	r3, #3
 800796c:	d107      	bne.n	800797e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800796e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e06f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e067      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800798e:	4b37      	ldr	r3, [pc, #220]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 0203 	bic.w	r2, r3, #3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4934      	ldr	r1, [pc, #208]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800799c:	4313      	orrs	r3, r2
 800799e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079a0:	f7fc fe5c 	bl	800465c <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	e00a      	b.n	80079be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a8:	f7fc fe58 	bl	800465c <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e04f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	4b2b      	ldr	r3, [pc, #172]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 020c 	and.w	r2, r3, #12
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1eb      	bne.n	80079a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079d0:	4b25      	ldr	r3, [pc, #148]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20c      	bcs.n	80079f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079de:	4b22      	ldr	r3, [pc, #136]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d001      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e032      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a04:	4b19      	ldr	r3, [pc, #100]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	4916      	ldr	r1, [pc, #88]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a22:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	490e      	ldr	r1, [pc, #56]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a36:	f000 f821 	bl	8007a7c <HAL_RCC_GetSysClockFreq>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	490a      	ldr	r1, [pc, #40]	@ (8007a70 <HAL_RCC_ClockConfig+0x1c0>)
 8007a48:	5ccb      	ldrb	r3, [r1, r3]
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	4a09      	ldr	r2, [pc, #36]	@ (8007a74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCC_ClockConfig+0x1c8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fc fdbc 	bl	80045d4 <HAL_InitTick>

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40023c00 	.word	0x40023c00
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	08010148 	.word	0x08010148
 8007a74:	20000018 	.word	0x20000018
 8007a78:	2000002c 	.word	0x2000002c

08007a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a80:	b094      	sub	sp, #80	@ 0x50
 8007a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a94:	4b79      	ldr	r3, [pc, #484]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d00d      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0x40>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	f200 80e1 	bhi.w	8007c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007aae:	e0db      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ab0:	4b73      	ldr	r3, [pc, #460]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ab4:	e0db      	b.n	8007c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ab6:	4b73      	ldr	r3, [pc, #460]	@ (8007c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007aba:	e0d8      	b.n	8007c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007abc:	4b6f      	ldr	r3, [pc, #444]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d063      	beq.n	8007b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	2200      	movs	r2, #0
 8007ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	f04f 0000 	mov.w	r0, #0
 8007af6:	f04f 0100 	mov.w	r1, #0
 8007afa:	0159      	lsls	r1, r3, #5
 8007afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b00:	0150      	lsls	r0, r2, #5
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4621      	mov	r1, r4
 8007b08:	1a51      	subs	r1, r2, r1
 8007b0a:	6139      	str	r1, [r7, #16]
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b20:	4659      	mov	r1, fp
 8007b22:	018b      	lsls	r3, r1, #6
 8007b24:	4651      	mov	r1, sl
 8007b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b2a:	4651      	mov	r1, sl
 8007b2c:	018a      	lsls	r2, r1, #6
 8007b2e:	4651      	mov	r1, sl
 8007b30:	ebb2 0801 	subs.w	r8, r2, r1
 8007b34:	4659      	mov	r1, fp
 8007b36:	eb63 0901 	sbc.w	r9, r3, r1
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b4e:	4690      	mov	r8, r2
 8007b50:	4699      	mov	r9, r3
 8007b52:	4623      	mov	r3, r4
 8007b54:	eb18 0303 	adds.w	r3, r8, r3
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	eb49 0303 	adc.w	r3, r9, r3
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b6e:	4629      	mov	r1, r5
 8007b70:	024b      	lsls	r3, r1, #9
 8007b72:	4621      	mov	r1, r4
 8007b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b78:	4621      	mov	r1, r4
 8007b7a:	024a      	lsls	r2, r1, #9
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b82:	2200      	movs	r2, #0
 8007b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b8c:	f7f9 f85c 	bl	8000c48 <__aeabi_uldivmod>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4613      	mov	r3, r2
 8007b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b98:	e058      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b9a:	4b38      	ldr	r3, [pc, #224]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	099b      	lsrs	r3, r3, #6
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	f04f 0000 	mov.w	r0, #0
 8007bbc:	f04f 0100 	mov.w	r1, #0
 8007bc0:	0159      	lsls	r1, r3, #5
 8007bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bc6:	0150      	lsls	r0, r2, #5
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4641      	mov	r1, r8
 8007bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bec:	ebb2 040a 	subs.w	r4, r2, sl
 8007bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	00eb      	lsls	r3, r5, #3
 8007bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c02:	00e2      	lsls	r2, r4, #3
 8007c04:	4614      	mov	r4, r2
 8007c06:	461d      	mov	r5, r3
 8007c08:	4643      	mov	r3, r8
 8007c0a:	18e3      	adds	r3, r4, r3
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	464b      	mov	r3, r9
 8007c10:	eb45 0303 	adc.w	r3, r5, r3
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c22:	4629      	mov	r1, r5
 8007c24:	028b      	lsls	r3, r1, #10
 8007c26:	4621      	mov	r1, r4
 8007c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	028a      	lsls	r2, r1, #10
 8007c30:	4610      	mov	r0, r2
 8007c32:	4619      	mov	r1, r3
 8007c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c36:	2200      	movs	r2, #0
 8007c38:	61bb      	str	r3, [r7, #24]
 8007c3a:	61fa      	str	r2, [r7, #28]
 8007c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c40:	f7f9 f802 	bl	8000c48 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4613      	mov	r3, r2
 8007c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	3301      	adds	r3, #1
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c66:	e002      	b.n	8007c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c68:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3750      	adds	r7, #80	@ 0x50
 8007c74:	46bd      	mov	sp, r7
 8007c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	00f42400 	.word	0x00f42400
 8007c84:	007a1200 	.word	0x007a1200

08007c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c8c:	4b03      	ldr	r3, [pc, #12]	@ (8007c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	20000018 	.word	0x20000018

08007ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e07b      	b.n	8007daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d108      	bne.n	8007ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cc2:	d009      	beq.n	8007cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	61da      	str	r2, [r3, #28]
 8007cca:	e005      	b.n	8007cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fc f996 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d20:	431a      	orrs	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5c:	ea42 0103 	orr.w	r1, r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	0c1b      	lsrs	r3, r3, #16
 8007d76:	f003 0104 	and.w	r1, r3, #4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	f003 0210 	and.w	r2, r3, #16
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	603b      	str	r3, [r7, #0]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dc2:	f7fc fc4b 	bl	800465c <HAL_GetTick>
 8007dc6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d001      	beq.n	8007ddc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e12a      	b.n	8008032 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <HAL_SPI_Transmit+0x36>
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e122      	b.n	8008032 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_SPI_Transmit+0x48>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e11b      	b.n	8008032 <HAL_SPI_Transmit+0x280>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2203      	movs	r2, #3
 8007e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	88fa      	ldrh	r2, [r7, #6]
 8007e1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d10f      	bne.n	8007e6a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e74:	2b40      	cmp	r3, #64	@ 0x40
 8007e76:	d007      	beq.n	8007e88 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e90:	d152      	bne.n	8007f38 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_SPI_Transmit+0xee>
 8007e9a:	8b7b      	ldrh	r3, [r7, #26]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d145      	bne.n	8007f2c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb0:	1c9a      	adds	r2, r3, #2
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ec4:	e032      	b.n	8007f2c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d112      	bne.n	8007efa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	881a      	ldrh	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ef8:	e018      	b.n	8007f2c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007efa:	f7fc fbaf 	bl	800465c <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d803      	bhi.n	8007f12 <HAL_SPI_Transmit+0x160>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d102      	bne.n	8007f18 <HAL_SPI_Transmit+0x166>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e082      	b.n	8008032 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1c7      	bne.n	8007ec6 <HAL_SPI_Transmit+0x114>
 8007f36:	e053      	b.n	8007fe0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_Transmit+0x194>
 8007f40:	8b7b      	ldrh	r3, [r7, #26]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d147      	bne.n	8007fd6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f6c:	e033      	b.n	8007fd6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d113      	bne.n	8007fa4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	7812      	ldrb	r2, [r2, #0]
 8007f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007fa2:	e018      	b.n	8007fd6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fa4:	f7fc fb5a 	bl	800465c <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d803      	bhi.n	8007fbc <HAL_SPI_Transmit+0x20a>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d102      	bne.n	8007fc2 <HAL_SPI_Transmit+0x210>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d109      	bne.n	8007fd6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e02d      	b.n	8008032 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1c6      	bne.n	8007f6e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fa59 	bl	800849c <SPI_EndRxTxTransaction>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008030:	2300      	movs	r3, #0
  }
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b08a      	sub	sp, #40	@ 0x28
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008048:	2301      	movs	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800804c:	f7fc fb06 	bl	800465c <HAL_GetTick>
 8008050:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008058:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008060:	887b      	ldrh	r3, [r7, #2]
 8008062:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008064:	7ffb      	ldrb	r3, [r7, #31]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d00c      	beq.n	8008084 <HAL_SPI_TransmitReceive+0x4a>
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008070:	d106      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x46>
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d001      	beq.n	8008084 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008080:	2302      	movs	r3, #2
 8008082:	e17f      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x5c>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x5c>
 8008090:	887b      	ldrh	r3, [r7, #2]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e174      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_SPI_TransmitReceive+0x6e>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e16d      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d003      	beq.n	80080c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2205      	movs	r2, #5
 80080c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	887a      	ldrh	r2, [r7, #2]
 80080da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	887a      	ldrh	r2, [r7, #2]
 80080e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d007      	beq.n	8008118 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008120:	d17e      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_SPI_TransmitReceive+0xf6>
 800812a:	8afb      	ldrh	r3, [r7, #22]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d16c      	bne.n	800820a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008134:	881a      	ldrh	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008140:	1c9a      	adds	r2, r3, #2
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008154:	e059      	b.n	800820a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b02      	cmp	r3, #2
 8008162:	d11b      	bne.n	800819c <HAL_SPI_TransmitReceive+0x162>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <HAL_SPI_TransmitReceive+0x162>
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	2b01      	cmp	r3, #1
 8008172:	d113      	bne.n	800819c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008178:	881a      	ldrh	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008184:	1c9a      	adds	r2, r3, #2
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800818e:	b29b      	uxth	r3, r3
 8008190:	3b01      	subs	r3, #1
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d119      	bne.n	80081de <HAL_SPI_TransmitReceive+0x1a4>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d014      	beq.n	80081de <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081be:	b292      	uxth	r2, r2
 80081c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081da:	2301      	movs	r3, #1
 80081dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081de:	f7fc fa3d 	bl	800465c <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d80d      	bhi.n	800820a <HAL_SPI_TransmitReceive+0x1d0>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d009      	beq.n	800820a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e0bc      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1a0      	bne.n	8008156 <HAL_SPI_TransmitReceive+0x11c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d19b      	bne.n	8008156 <HAL_SPI_TransmitReceive+0x11c>
 800821e:	e082      	b.n	8008326 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_SPI_TransmitReceive+0x1f4>
 8008228:	8afb      	ldrh	r3, [r7, #22]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d171      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008254:	e05d      	b.n	8008312 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d11c      	bne.n	800829e <HAL_SPI_TransmitReceive+0x264>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <HAL_SPI_TransmitReceive+0x264>
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	2b01      	cmp	r3, #1
 8008272:	d114      	bne.n	800829e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	330c      	adds	r3, #12
 800827e:	7812      	ldrb	r2, [r2, #0]
 8008280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d119      	bne.n	80082e0 <HAL_SPI_TransmitReceive+0x2a6>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d014      	beq.n	80082e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082dc:	2301      	movs	r3, #1
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082e0:	f7fc f9bc 	bl	800465c <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d803      	bhi.n	80082f8 <HAL_SPI_TransmitReceive+0x2be>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d102      	bne.n	80082fe <HAL_SPI_TransmitReceive+0x2c4>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e038      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d19c      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x21c>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d197      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008326:	6a3a      	ldr	r2, [r7, #32]
 8008328:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f8b6 	bl	800849c <SPI_EndRxTxTransaction>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d008      	beq.n	8008348 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e01d      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008382:	2300      	movs	r3, #0
  }
}
 8008384:	4618      	mov	r0, r3
 8008386:	3728      	adds	r7, #40	@ 0x28
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	4613      	mov	r3, r2
 800839a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800839c:	f7fc f95e 	bl	800465c <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083ac:	f7fc f956 	bl	800465c <HAL_GetTick>
 80083b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083b2:	4b39      	ldr	r3, [pc, #228]	@ (8008498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	015b      	lsls	r3, r3, #5
 80083b8:	0d1b      	lsrs	r3, r3, #20
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	fb02 f303 	mul.w	r3, r2, r3
 80083c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083c2:	e054      	b.n	800846e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d050      	beq.n	800846e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083cc:	f7fc f946 	bl	800465c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	69fa      	ldr	r2, [r7, #28]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d902      	bls.n	80083e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d13d      	bne.n	800845e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083fa:	d111      	bne.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008404:	d004      	beq.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800840e:	d107      	bne.n	8008420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800841e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008428:	d10f      	bne.n	800844a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e017      	b.n	800848e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3b01      	subs	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4013      	ands	r3, r2
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	429a      	cmp	r2, r3
 800848a:	d19b      	bne.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3720      	adds	r7, #32
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000018 	.word	0x20000018

0800849c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2201      	movs	r2, #1
 80084b0:	2102      	movs	r1, #2
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff ff6a 	bl	800838c <SPI_WaitFlagStateUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c2:	f043 0220 	orr.w	r2, r3, #32
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e032      	b.n	8008534 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80084ce:	4b1b      	ldr	r3, [pc, #108]	@ (800853c <SPI_EndRxTxTransaction+0xa0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008540 <SPI_EndRxTxTransaction+0xa4>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	0d5b      	lsrs	r3, r3, #21
 80084da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084de:	fb02 f303 	mul.w	r3, r2, r3
 80084e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084ec:	d112      	bne.n	8008514 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2200      	movs	r2, #0
 80084f6:	2180      	movs	r1, #128	@ 0x80
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff ff47 	bl	800838c <SPI_WaitFlagStateUntilTimeout>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d016      	beq.n	8008532 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008508:	f043 0220 	orr.w	r2, r3, #32
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e00f      	b.n	8008534 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	3b01      	subs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852a:	2b80      	cmp	r3, #128	@ 0x80
 800852c:	d0f2      	beq.n	8008514 <SPI_EndRxTxTransaction+0x78>
 800852e:	e000      	b.n	8008532 <SPI_EndRxTxTransaction+0x96>
        break;
 8008530:	bf00      	nop
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000018 	.word	0x20000018
 8008540:	165e9f81 	.word	0x165e9f81

08008544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e041      	b.n	80085da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fb fda2 	bl	80040b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3304      	adds	r3, #4
 8008580:	4619      	mov	r1, r3
 8008582:	4610      	mov	r0, r2
 8008584:	f000 f8f4 	bl	8008770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_TIM_ConfigClockSource+0x1c>
 80085fa:	2302      	movs	r3, #2
 80085fc:	e0b4      	b.n	8008768 <HAL_TIM_ConfigClockSource+0x186>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800861c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008624:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008636:	d03e      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0xd4>
 8008638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863c:	f200 8087 	bhi.w	800874e <HAL_TIM_ConfigClockSource+0x16c>
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008644:	f000 8086 	beq.w	8008754 <HAL_TIM_ConfigClockSource+0x172>
 8008648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800864c:	d87f      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 800864e:	2b70      	cmp	r3, #112	@ 0x70
 8008650:	d01a      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0xa6>
 8008652:	2b70      	cmp	r3, #112	@ 0x70
 8008654:	d87b      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 8008656:	2b60      	cmp	r3, #96	@ 0x60
 8008658:	d050      	beq.n	80086fc <HAL_TIM_ConfigClockSource+0x11a>
 800865a:	2b60      	cmp	r3, #96	@ 0x60
 800865c:	d877      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 800865e:	2b50      	cmp	r3, #80	@ 0x50
 8008660:	d03c      	beq.n	80086dc <HAL_TIM_ConfigClockSource+0xfa>
 8008662:	2b50      	cmp	r3, #80	@ 0x50
 8008664:	d873      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 8008666:	2b40      	cmp	r3, #64	@ 0x40
 8008668:	d058      	beq.n	800871c <HAL_TIM_ConfigClockSource+0x13a>
 800866a:	2b40      	cmp	r3, #64	@ 0x40
 800866c:	d86f      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 800866e:	2b30      	cmp	r3, #48	@ 0x30
 8008670:	d064      	beq.n	800873c <HAL_TIM_ConfigClockSource+0x15a>
 8008672:	2b30      	cmp	r3, #48	@ 0x30
 8008674:	d86b      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 8008676:	2b20      	cmp	r3, #32
 8008678:	d060      	beq.n	800873c <HAL_TIM_ConfigClockSource+0x15a>
 800867a:	2b20      	cmp	r3, #32
 800867c:	d867      	bhi.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d05c      	beq.n	800873c <HAL_TIM_ConfigClockSource+0x15a>
 8008682:	2b10      	cmp	r3, #16
 8008684:	d05a      	beq.n	800873c <HAL_TIM_ConfigClockSource+0x15a>
 8008686:	e062      	b.n	800874e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008698:	f000 f990 	bl	80089bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	609a      	str	r2, [r3, #8]
      break;
 80086b4:	e04f      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c6:	f000 f979 	bl	80089bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086d8:	609a      	str	r2, [r3, #8]
      break;
 80086da:	e03c      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e8:	461a      	mov	r2, r3
 80086ea:	f000 f8ed 	bl	80088c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2150      	movs	r1, #80	@ 0x50
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f946 	bl	8008986 <TIM_ITRx_SetConfig>
      break;
 80086fa:	e02c      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008708:	461a      	mov	r2, r3
 800870a:	f000 f90c 	bl	8008926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2160      	movs	r1, #96	@ 0x60
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f936 	bl	8008986 <TIM_ITRx_SetConfig>
      break;
 800871a:	e01c      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008728:	461a      	mov	r2, r3
 800872a:	f000 f8cd 	bl	80088c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2140      	movs	r1, #64	@ 0x40
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f926 	bl	8008986 <TIM_ITRx_SetConfig>
      break;
 800873a:	e00c      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f000 f91d 	bl	8008986 <TIM_ITRx_SetConfig>
      break;
 800874c:	e003      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
      break;
 8008752:	e000      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008754:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a46      	ldr	r2, [pc, #280]	@ (800889c <TIM_Base_SetConfig+0x12c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d013      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878e:	d00f      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a43      	ldr	r2, [pc, #268]	@ (80088a0 <TIM_Base_SetConfig+0x130>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00b      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a42      	ldr	r2, [pc, #264]	@ (80088a4 <TIM_Base_SetConfig+0x134>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d007      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a41      	ldr	r2, [pc, #260]	@ (80088a8 <TIM_Base_SetConfig+0x138>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a40      	ldr	r2, [pc, #256]	@ (80088ac <TIM_Base_SetConfig+0x13c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d108      	bne.n	80087c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a35      	ldr	r2, [pc, #212]	@ (800889c <TIM_Base_SetConfig+0x12c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d02b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d0:	d027      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a32      	ldr	r2, [pc, #200]	@ (80088a0 <TIM_Base_SetConfig+0x130>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d023      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a31      	ldr	r2, [pc, #196]	@ (80088a4 <TIM_Base_SetConfig+0x134>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01f      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a30      	ldr	r2, [pc, #192]	@ (80088a8 <TIM_Base_SetConfig+0x138>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2f      	ldr	r2, [pc, #188]	@ (80088ac <TIM_Base_SetConfig+0x13c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d017      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2e      	ldr	r2, [pc, #184]	@ (80088b0 <TIM_Base_SetConfig+0x140>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2d      	ldr	r2, [pc, #180]	@ (80088b4 <TIM_Base_SetConfig+0x144>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2c      	ldr	r2, [pc, #176]	@ (80088b8 <TIM_Base_SetConfig+0x148>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2b      	ldr	r2, [pc, #172]	@ (80088bc <TIM_Base_SetConfig+0x14c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2a      	ldr	r2, [pc, #168]	@ (80088c0 <TIM_Base_SetConfig+0x150>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a29      	ldr	r2, [pc, #164]	@ (80088c4 <TIM_Base_SetConfig+0x154>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a10      	ldr	r2, [pc, #64]	@ (800889c <TIM_Base_SetConfig+0x12c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_Base_SetConfig+0xf8>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a12      	ldr	r2, [pc, #72]	@ (80088ac <TIM_Base_SetConfig+0x13c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d103      	bne.n	8008870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b01      	cmp	r3, #1
 8008880:	d105      	bne.n	800888e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f023 0201 	bic.w	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	611a      	str	r2, [r3, #16]
  }
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400
 80088b8:	40014800 	.word	0x40014800
 80088bc:	40001800 	.word	0x40001800
 80088c0:	40001c00 	.word	0x40001c00
 80088c4:	40002000 	.word	0x40002000

080088c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f023 0201 	bic.w	r2, r3, #1
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f023 030a 	bic.w	r3, r3, #10
 8008904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	621a      	str	r2, [r3, #32]
}
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008926:	b480      	push	{r7}
 8008928:	b087      	sub	sp, #28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f023 0210 	bic.w	r2, r3, #16
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	031b      	lsls	r3, r3, #12
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	621a      	str	r2, [r3, #32]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f043 0307 	orr.w	r3, r3, #7
 80089a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	021a      	lsls	r2, r3, #8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	431a      	orrs	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	609a      	str	r2, [r3, #8]
}
 80089f0:	bf00      	nop
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e05a      	b.n	8008aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a21      	ldr	r2, [pc, #132]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d022      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a60:	d01d      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1d      	ldr	r2, [pc, #116]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d018      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00e      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a18      	ldr	r2, [pc, #96]	@ (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a17      	ldr	r2, [pc, #92]	@ (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d004      	beq.n	8008a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a15      	ldr	r2, [pc, #84]	@ (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d10c      	bne.n	8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40010400 	.word	0x40010400
 8008aec:	40014000 	.word	0x40014000
 8008af0:	40001800 	.word	0x40001800

08008af4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008af4:	b084      	sub	sp, #16
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	f107 001c 	add.w	r0, r7, #28
 8008b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d123      	bne.n	8008b56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d105      	bne.n	8008b4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 fae8 	bl	800a120 <USB_CoreReset>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
 8008b54:	e01b      	b.n	8008b8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 fadc 	bl	800a120 <USB_CoreReset>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d106      	bne.n	8008b82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b80:	e005      	b.n	8008b8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b8e:	7fbb      	ldrb	r3, [r7, #30]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d10b      	bne.n	8008bac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f043 0206 	orr.w	r2, r3, #6
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f043 0220 	orr.w	r2, r3, #32
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bb8:	b004      	add	sp, #16
 8008bba:	4770      	bx	lr

08008bbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d165      	bne.n	8008c9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a41      	ldr	r2, [pc, #260]	@ (8008cd8 <USB_SetTurnaroundTime+0x11c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d906      	bls.n	8008be6 <USB_SetTurnaroundTime+0x2a>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4a40      	ldr	r2, [pc, #256]	@ (8008cdc <USB_SetTurnaroundTime+0x120>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d202      	bcs.n	8008be6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008be0:	230f      	movs	r3, #15
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e062      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4a3c      	ldr	r2, [pc, #240]	@ (8008cdc <USB_SetTurnaroundTime+0x120>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d306      	bcc.n	8008bfc <USB_SetTurnaroundTime+0x40>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ce0 <USB_SetTurnaroundTime+0x124>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d202      	bcs.n	8008bfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008bf6:	230e      	movs	r3, #14
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e057      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4a38      	ldr	r2, [pc, #224]	@ (8008ce0 <USB_SetTurnaroundTime+0x124>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d306      	bcc.n	8008c12 <USB_SetTurnaroundTime+0x56>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	4a37      	ldr	r2, [pc, #220]	@ (8008ce4 <USB_SetTurnaroundTime+0x128>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d202      	bcs.n	8008c12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c0c:	230d      	movs	r3, #13
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e04c      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4a33      	ldr	r2, [pc, #204]	@ (8008ce4 <USB_SetTurnaroundTime+0x128>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d306      	bcc.n	8008c28 <USB_SetTurnaroundTime+0x6c>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4a32      	ldr	r2, [pc, #200]	@ (8008ce8 <USB_SetTurnaroundTime+0x12c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d802      	bhi.n	8008c28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c22:	230c      	movs	r3, #12
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e041      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ce8 <USB_SetTurnaroundTime+0x12c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d906      	bls.n	8008c3e <USB_SetTurnaroundTime+0x82>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4a2e      	ldr	r2, [pc, #184]	@ (8008cec <USB_SetTurnaroundTime+0x130>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d802      	bhi.n	8008c3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c38:	230b      	movs	r3, #11
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e036      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	4a2a      	ldr	r2, [pc, #168]	@ (8008cec <USB_SetTurnaroundTime+0x130>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d906      	bls.n	8008c54 <USB_SetTurnaroundTime+0x98>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4a29      	ldr	r2, [pc, #164]	@ (8008cf0 <USB_SetTurnaroundTime+0x134>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d802      	bhi.n	8008c54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c4e:	230a      	movs	r3, #10
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	e02b      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4a26      	ldr	r2, [pc, #152]	@ (8008cf0 <USB_SetTurnaroundTime+0x134>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d906      	bls.n	8008c6a <USB_SetTurnaroundTime+0xae>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4a25      	ldr	r2, [pc, #148]	@ (8008cf4 <USB_SetTurnaroundTime+0x138>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d202      	bcs.n	8008c6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c64:	2309      	movs	r3, #9
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e020      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4a21      	ldr	r2, [pc, #132]	@ (8008cf4 <USB_SetTurnaroundTime+0x138>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d306      	bcc.n	8008c80 <USB_SetTurnaroundTime+0xc4>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4a20      	ldr	r2, [pc, #128]	@ (8008cf8 <USB_SetTurnaroundTime+0x13c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d802      	bhi.n	8008c80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	e015      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <USB_SetTurnaroundTime+0x13c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d906      	bls.n	8008c96 <USB_SetTurnaroundTime+0xda>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cfc <USB_SetTurnaroundTime+0x140>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d202      	bcs.n	8008c96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c90:	2307      	movs	r3, #7
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	e00a      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c96:	2306      	movs	r3, #6
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e007      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ca2:	2309      	movs	r3, #9
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	e001      	b.n	8008cac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ca8:	2309      	movs	r3, #9
 8008caa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	029b      	lsls	r3, r3, #10
 8008cc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	00d8acbf 	.word	0x00d8acbf
 8008cdc:	00e4e1c0 	.word	0x00e4e1c0
 8008ce0:	00f42400 	.word	0x00f42400
 8008ce4:	01067380 	.word	0x01067380
 8008ce8:	011a499f 	.word	0x011a499f
 8008cec:	01312cff 	.word	0x01312cff
 8008cf0:	014ca43f 	.word	0x014ca43f
 8008cf4:	016e3600 	.word	0x016e3600
 8008cf8:	01a6ab1f 	.word	0x01a6ab1f
 8008cfc:	01e84800 	.word	0x01e84800

08008d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f043 0201 	orr.w	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 0201 	bic.w	r2, r3, #1
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d115      	bne.n	8008d92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d72:	200a      	movs	r0, #10
 8008d74:	f7fb fc7e 	bl	8004674 <HAL_Delay>
      ms += 10U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	330a      	adds	r3, #10
 8008d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 f93f 	bl	800a002 <USB_GetMode>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d01e      	beq.n	8008dc8 <USB_SetCurrentMode+0x84>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d8e:	d9f0      	bls.n	8008d72 <USB_SetCurrentMode+0x2e>
 8008d90:	e01a      	b.n	8008dc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d115      	bne.n	8008dc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008da4:	200a      	movs	r0, #10
 8008da6:	f7fb fc65 	bl	8004674 <HAL_Delay>
      ms += 10U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	330a      	adds	r3, #10
 8008dae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f926 	bl	800a002 <USB_GetMode>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <USB_SetCurrentMode+0x84>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8008dc0:	d9f0      	bls.n	8008da4 <USB_SetCurrentMode+0x60>
 8008dc2:	e001      	b.n	8008dc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e005      	b.n	8008dd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2bc8      	cmp	r3, #200	@ 0xc8
 8008dcc:	d101      	bne.n	8008dd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ddc:	b084      	sub	sp, #16
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	e009      	b.n	8008e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3340      	adds	r3, #64	@ 0x40
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	2200      	movs	r2, #0
 8008e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b0e      	cmp	r3, #14
 8008e14:	d9f2      	bls.n	8008dfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d11c      	bne.n	8008e58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e56:	e00b      	b.n	8008e70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e76:	461a      	mov	r2, r3
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10d      	bne.n	8008ea0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f968 	bl	8009164 <USB_SetDevSpeed>
 8008e94:	e008      	b.n	8008ea8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e96:	2101      	movs	r1, #1
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f963 	bl	8009164 <USB_SetDevSpeed>
 8008e9e:	e003      	b.n	8008ea8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ea0:	2103      	movs	r1, #3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f95e 	bl	8009164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ea8:	2110      	movs	r1, #16
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f8fa 	bl	80090a4 <USB_FlushTxFifo>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f924 	bl	8009108 <USB_FlushRxFifo>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008edc:	461a      	mov	r2, r3
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e043      	b.n	8008f7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f0a:	d118      	bne.n	8008f3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	e013      	b.n	8008f50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f34:	461a      	mov	r2, r3
 8008f36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e008      	b.n	8008f50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f80:	461a      	mov	r2, r3
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d3b5      	bcc.n	8008ef4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	e043      	b.n	8009016 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fa4:	d118      	bne.n	8008fd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	e013      	b.n	8008fea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e008      	b.n	8008fea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009008:	461a      	mov	r2, r3
 800900a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800900e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800901a:	461a      	mov	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	4293      	cmp	r3, r2
 8009020:	d3b5      	bcc.n	8008f8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009048:	2b00      	cmp	r3, #0
 800904a:	d105      	bne.n	8009058 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f043 0210 	orr.w	r2, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <USB_DevInit+0x2c4>)
 800905e:	4313      	orrs	r3, r2
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f043 0208 	orr.w	r2, r3, #8
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009078:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800907c:	2b01      	cmp	r3, #1
 800907e:	d107      	bne.n	8009090 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009088:	f043 0304 	orr.w	r3, r3, #4
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909c:	b004      	add	sp, #16
 800909e:	4770      	bx	lr
 80090a0:	803c3800 	.word	0x803c3800

080090a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090be:	d901      	bls.n	80090c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e01b      	b.n	80090fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	daf2      	bge.n	80090b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	019b      	lsls	r3, r3, #6
 80090d4:	f043 0220 	orr.w	r2, r3, #32
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090e8:	d901      	bls.n	80090ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e006      	b.n	80090fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d0f0      	beq.n	80090dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009120:	d901      	bls.n	8009126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e018      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	daf2      	bge.n	8009114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2210      	movs	r2, #16
 8009136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009144:	d901      	bls.n	800914a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e006      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0310 	and.w	r3, r3, #16
 8009152:	2b10      	cmp	r3, #16
 8009154:	d0f0      	beq.n	8009138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009184:	4313      	orrs	r3, r2
 8009186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009196:	b480      	push	{r7}
 8009198:	b087      	sub	sp, #28
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e00a      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d002      	beq.n	80091c8 <USB_GetDevSpeed+0x32>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d102      	bne.n	80091ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80091c8:	2302      	movs	r3, #2
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	e001      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80091ce:	230f      	movs	r3, #15
 80091d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d13a      	bne.n	8009272 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800921a:	4313      	orrs	r3, r2
 800921c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d155      	bne.n	80092e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	059b      	lsls	r3, r3, #22
 8009256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009258:	4313      	orrs	r3, r2
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800926a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	e036      	b.n	80092e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	2101      	movs	r1, #1
 8009284:	fa01 f303 	lsl.w	r3, r1, r3
 8009288:	041b      	lsls	r3, r3, #16
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009290:	4313      	orrs	r3, r2
 8009292:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d11a      	bne.n	80092e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	791b      	ldrb	r3, [r3, #4]
 80092c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092c6:	430b      	orrs	r3, r1
 80092c8:	4313      	orrs	r3, r2
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	0151      	lsls	r1, r2, #5
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	440a      	add	r2, r1
 80092d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d161      	bne.n	80093d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009322:	d11f      	bne.n	8009364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800933e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800935e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	b29b      	uxth	r3, r3
 800937c:	43db      	mvns	r3, r3
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009384:	4013      	ands	r3, r2
 8009386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	2101      	movs	r1, #1
 800939a:	fa01 f303 	lsl.w	r3, r1, r3
 800939e:	b29b      	uxth	r3, r3
 80093a0:	43db      	mvns	r3, r3
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093a8:	4013      	ands	r3, r2
 80093aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	0159      	lsls	r1, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c6:	4619      	mov	r1, r3
 80093c8:	4b35      	ldr	r3, [pc, #212]	@ (80094a0 <USB_DeactivateEndpoint+0x1b0>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]
 80093ce:	e060      	b.n	8009492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093e6:	d11f      	bne.n	8009428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	2101      	movs	r1, #1
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	43db      	mvns	r3, r3
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009448:	4013      	ands	r3, r2
 800944a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	43db      	mvns	r3, r3
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800946c:	4013      	ands	r3, r2
 800946e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	0159      	lsls	r1, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	440b      	add	r3, r1
 8009486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948a:	4619      	mov	r1, r3
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <USB_DeactivateEndpoint+0x1b4>)
 800948e:	4013      	ands	r3, r2
 8009490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	ec337800 	.word	0xec337800
 80094a4:	eff37800 	.word	0xeff37800

080094a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	@ 0x28
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	f040 817f 	bne.w	80097c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d132      	bne.n	8009538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009530:	0cdb      	lsrs	r3, r3, #19
 8009532:	04db      	lsls	r3, r3, #19
 8009534:	6113      	str	r3, [r2, #16]
 8009536:	e097      	b.n	8009668 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	0151      	lsls	r1, r2, #5
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	440a      	add	r2, r1
 800954e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009552:	0cdb      	lsrs	r3, r3, #19
 8009554:	04db      	lsls	r3, r3, #19
 8009556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	440a      	add	r2, r1
 800956e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009572:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009576:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800957a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d11a      	bne.n	80095b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d903      	bls.n	8009596 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	0151      	lsls	r1, r2, #5
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	440a      	add	r2, r1
 80095ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095b4:	6113      	str	r3, [r2, #16]
 80095b6:	e044      	b.n	8009642 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	1e5a      	subs	r2, r3, #1
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	8afb      	ldrh	r3, [r7, #22]
 80095de:	04d9      	lsls	r1, r3, #19
 80095e0:	4ba4      	ldr	r3, [pc, #656]	@ (8009874 <USB_EPStartXfer+0x3cc>)
 80095e2:	400b      	ands	r3, r1
 80095e4:	69b9      	ldr	r1, [r7, #24]
 80095e6:	0148      	lsls	r0, r1, #5
 80095e8:	69f9      	ldr	r1, [r7, #28]
 80095ea:	4401      	add	r1, r0
 80095ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095f0:	4313      	orrs	r3, r2
 80095f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	791b      	ldrb	r3, [r3, #4]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d122      	bne.n	8009642 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	440a      	add	r2, r1
 8009612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009616:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800961a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	8afb      	ldrh	r3, [r7, #22]
 800962c:	075b      	lsls	r3, r3, #29
 800962e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009632:	69b9      	ldr	r1, [r7, #24]
 8009634:	0148      	lsls	r0, r1, #5
 8009636:	69f9      	ldr	r1, [r7, #28]
 8009638:	4401      	add	r1, r0
 800963a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800963e:	4313      	orrs	r3, r2
 8009640:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009658:	69b9      	ldr	r1, [r7, #24]
 800965a:	0148      	lsls	r0, r1, #5
 800965c:	69f9      	ldr	r1, [r7, #28]
 800965e:	4401      	add	r1, r0
 8009660:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009664:	4313      	orrs	r3, r2
 8009666:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d14b      	bne.n	8009706 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009682:	461a      	mov	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	791b      	ldrb	r3, [r3, #4]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d128      	bne.n	80096e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d110      	bne.n	80096c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	0151      	lsls	r1, r2, #5
 80096b4:	69fa      	ldr	r2, [r7, #28]
 80096b6:	440a      	add	r2, r1
 80096b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	e00f      	b.n	80096e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	0151      	lsls	r1, r2, #5
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	440a      	add	r2, r1
 80096da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	69fa      	ldr	r2, [r7, #28]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e166      	b.n	80099d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009720:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009724:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	791b      	ldrb	r3, [r3, #4]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d015      	beq.n	800975a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 814e 	beq.w	80099d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800973e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	2101      	movs	r1, #1
 800974a:	fa01 f303 	lsl.w	r3, r1, r3
 800974e:	69f9      	ldr	r1, [r7, #28]
 8009750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009754:	4313      	orrs	r3, r2
 8009756:	634b      	str	r3, [r1, #52]	@ 0x34
 8009758:	e13c      	b.n	80099d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009766:	2b00      	cmp	r3, #0
 8009768:	d110      	bne.n	800978c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009784:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e00f      	b.n	80097ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	68d9      	ldr	r1, [r3, #12]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	b298      	uxth	r0, r3
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4603      	mov	r3, r0
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 f9b9 	bl	8009b38 <USB_WritePacket>
 80097c6:	e105      	b.n	80099d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097e2:	0cdb      	lsrs	r3, r3, #19
 80097e4:	04db      	lsls	r3, r3, #19
 80097e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009802:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009806:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800980a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d132      	bne.n	8009878 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009836:	691a      	ldr	r2, [r3, #16]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009840:	69b9      	ldr	r1, [r7, #24]
 8009842:	0148      	lsls	r0, r1, #5
 8009844:	69f9      	ldr	r1, [r7, #28]
 8009846:	4401      	add	r1, r0
 8009848:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800984c:	4313      	orrs	r3, r2
 800984e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	0151      	lsls	r1, r2, #5
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	440a      	add	r2, r1
 8009866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800986a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800986e:	6113      	str	r3, [r2, #16]
 8009870:	e062      	b.n	8009938 <USB_EPStartXfer+0x490>
 8009872:	bf00      	nop
 8009874:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d123      	bne.n	80098c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009896:	69b9      	ldr	r1, [r7, #24]
 8009898:	0148      	lsls	r0, r1, #5
 800989a:	69f9      	ldr	r1, [r7, #28]
 800989c:	4401      	add	r1, r0
 800989e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098a2:	4313      	orrs	r3, r2
 80098a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098c4:	6113      	str	r3, [r2, #16]
 80098c6:	e037      	b.n	8009938 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	4413      	add	r3, r2
 80098d2:	1e5a      	subs	r2, r3, #1
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	8afa      	ldrh	r2, [r7, #22]
 80098e4:	fb03 f202 	mul.w	r2, r3, r2
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	691a      	ldr	r2, [r3, #16]
 80098fa:	8afb      	ldrh	r3, [r7, #22]
 80098fc:	04d9      	lsls	r1, r3, #19
 80098fe:	4b38      	ldr	r3, [pc, #224]	@ (80099e0 <USB_EPStartXfer+0x538>)
 8009900:	400b      	ands	r3, r1
 8009902:	69b9      	ldr	r1, [r7, #24]
 8009904:	0148      	lsls	r0, r1, #5
 8009906:	69f9      	ldr	r1, [r7, #28]
 8009908:	4401      	add	r1, r0
 800990a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800990e:	4313      	orrs	r3, r2
 8009910:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009928:	69b9      	ldr	r1, [r7, #24]
 800992a:	0148      	lsls	r0, r1, #5
 800992c:	69f9      	ldr	r1, [r7, #28]
 800992e:	4401      	add	r1, r0
 8009930:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009934:	4313      	orrs	r3, r2
 8009936:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d10d      	bne.n	800995a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d009      	beq.n	800995a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	68d9      	ldr	r1, [r3, #12]
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009956:	460a      	mov	r2, r1
 8009958:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	791b      	ldrb	r3, [r3, #4]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d128      	bne.n	80099b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800996e:	2b00      	cmp	r3, #0
 8009970:	d110      	bne.n	8009994 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800998c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	e00f      	b.n	80099b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	1ff80000 	.word	0x1ff80000

080099e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	785b      	ldrb	r3, [r3, #1]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d14a      	bne.n	8009a98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a1a:	f040 8086 	bne.w	8009b2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	7812      	ldrb	r2, [r2, #0]
 8009a32:	0151      	lsls	r1, r2, #5
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	440a      	add	r2, r1
 8009a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d902      	bls.n	8009a7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
          break;
 8009a7a:	e056      	b.n	8009b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a94:	d0e7      	beq.n	8009a66 <USB_EPStopXfer+0x82>
 8009a96:	e048      	b.n	8009b2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ab0:	d13b      	bne.n	8009b2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ad0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ad4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	0151      	lsls	r1, r2, #5
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	440a      	add	r2, r1
 8009af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d902      	bls.n	8009b10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b0e:	e00c      	b.n	8009b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b28:	d0e7      	beq.n	8009afa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b089      	sub	sp, #36	@ 0x24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4611      	mov	r1, r2
 8009b44:	461a      	mov	r2, r3
 8009b46:	460b      	mov	r3, r1
 8009b48:	71fb      	strb	r3, [r7, #7]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d123      	bne.n	8009ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b5e:	88bb      	ldrh	r3, [r7, #4]
 8009b60:	3303      	adds	r3, #3
 8009b62:	089b      	lsrs	r3, r3, #2
 8009b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b66:	2300      	movs	r3, #0
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e018      	b.n	8009b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	031a      	lsls	r2, r3, #12
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b78:	461a      	mov	r2, r3
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	3301      	adds	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d3e2      	bcc.n	8009b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3724      	adds	r7, #36	@ 0x24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b08b      	sub	sp, #44	@ 0x2c
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	089b      	lsrs	r3, r3, #2
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	f003 0303 	and.w	r3, r3, #3
 8009bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	623b      	str	r3, [r7, #32]
 8009bde:	e014      	b.n	8009c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	3301      	adds	r3, #1
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	3301      	adds	r3, #1
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	3301      	adds	r3, #1
 8009c08:	623b      	str	r3, [r7, #32]
 8009c0a:	6a3a      	ldr	r2, [r7, #32]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d3e6      	bcc.n	8009be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c12:	8bfb      	ldrh	r3, [r7, #30]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01e      	beq.n	8009c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c22:	461a      	mov	r2, r3
 8009c24:	f107 0310 	add.w	r3, r7, #16
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	fa22 f303 	lsr.w	r3, r2, r3
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	3301      	adds	r3, #1
 8009c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	3301      	adds	r3, #1
 8009c48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009c4a:	8bfb      	ldrh	r3, [r7, #30]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c50:	8bfb      	ldrh	r3, [r7, #30]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1ea      	bne.n	8009c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	372c      	adds	r7, #44	@ 0x2c
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d12c      	bne.n	8009cda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	db12      	blt.n	8009cb8 <USB_EPSetStall+0x54>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00f      	beq.n	8009cb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009cb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	0151      	lsls	r1, r2, #5
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	440a      	add	r2, r1
 8009cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	e02b      	b.n	8009d32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	db12      	blt.n	8009d12 <USB_EPSetStall+0xae>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00f      	beq.n	8009d12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	0151      	lsls	r1, r2, #5
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	440a      	add	r2, r1
 8009d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d128      	bne.n	8009dae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	0151      	lsls	r1, r2, #5
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	440a      	add	r2, r1
 8009d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d003      	beq.n	8009d8c <USB_EPClearStall+0x4c>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	791b      	ldrb	r3, [r3, #4]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d138      	bne.n	8009dfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	0151      	lsls	r1, r2, #5
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	440a      	add	r2, r1
 8009da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	e027      	b.n	8009dfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009dcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	791b      	ldrb	r3, [r3, #4]
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d003      	beq.n	8009dde <USB_EPClearStall+0x9e>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	791b      	ldrb	r3, [r3, #4]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d10f      	bne.n	8009dfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009e2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009e40:	68f9      	ldr	r1, [r7, #12]
 8009e42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e46:	4313      	orrs	r3, r2
 8009e48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e72:	f023 0303 	bic.w	r3, r3, #3
 8009e76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e86:	f023 0302 	bic.w	r3, r3, #2
 8009e8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009eb4:	f023 0303 	bic.w	r3, r3, #3
 8009eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ec8:	f043 0302 	orr.w	r3, r3, #2
 8009ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b085      	sub	sp, #20
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	4013      	ands	r3, r2
 8009f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	0c1b      	lsrs	r3, r3, #16
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	4013      	ands	r3, r2
 8009f58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	b29b      	uxth	r3, r3
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	460b      	mov	r3, r1
 8009f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	4013      	ands	r3, r2
 8009f96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f98:	68bb      	ldr	r3, [r7, #8]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 030f 	and.w	r3, r3, #15
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd6:	01db      	lsls	r3, r3, #7
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	f003 0301 	and.w	r3, r3, #1
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a01e:	b480      	push	{r7}
 800a020:	b085      	sub	sp, #20
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a038:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a03c:	f023 0307 	bic.w	r3, r3, #7
 800a040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	460b      	mov	r3, r1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	333c      	adds	r3, #60	@ 0x3c
 800a07a:	3304      	adds	r3, #4
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	4a26      	ldr	r2, [pc, #152]	@ (800a11c <USB_EP0_OutStart+0xb8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d90a      	bls.n	800a09e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a098:	d101      	bne.n	800a09e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e037      	b.n	800a10e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0cc:	f043 0318 	orr.w	r3, r3, #24
 800a0d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a0e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0e6:	7afb      	ldrb	r3, [r7, #11]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d10f      	bne.n	800a10c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a106:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a10a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	4f54300a 	.word	0x4f54300a

0800a120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3301      	adds	r3, #1
 800a130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a138:	d901      	bls.n	800a13e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e01b      	b.n	800a176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	daf2      	bge.n	800a12c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a146:	2300      	movs	r3, #0
 800a148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	f043 0201 	orr.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a162:	d901      	bls.n	800a168 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e006      	b.n	800a176 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b01      	cmp	r3, #1
 800a172:	d0f0      	beq.n	800a156 <USB_CoreReset+0x36>

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
	...

0800a184 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a190:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a194:	f002 fc38 	bl	800ca08 <USBD_static_malloc>
 800a198:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d109      	bne.n	800a1b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	32b0      	adds	r2, #176	@ 0xb0
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e0d4      	b.n	800a35e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a1b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f003 fb86 	bl	800d8cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	32b0      	adds	r2, #176	@ 0xb0
 800a1ca:	68f9      	ldr	r1, [r7, #12]
 800a1cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32b0      	adds	r2, #176	@ 0xb0
 800a1da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7c1b      	ldrb	r3, [r3, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d138      	bne.n	800a25e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1ec:	4b5e      	ldr	r3, [pc, #376]	@ (800a368 <USBD_CDC_Init+0x1e4>)
 800a1ee:	7819      	ldrb	r1, [r3, #0]
 800a1f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f002 fae3 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1fc:	4b5a      	ldr	r3, [pc, #360]	@ (800a368 <USBD_CDC_Init+0x1e4>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 020f 	and.w	r2, r3, #15
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	3324      	adds	r3, #36	@ 0x24
 800a212:	2201      	movs	r2, #1
 800a214:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a216:	4b55      	ldr	r3, [pc, #340]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a218:	7819      	ldrb	r1, [r3, #0]
 800a21a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a21e:	2202      	movs	r2, #2
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f002 face 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a226:	4b51      	ldr	r3, [pc, #324]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	f003 020f 	and.w	r2, r3, #15
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	440b      	add	r3, r1
 800a23a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a23e:	2201      	movs	r2, #1
 800a240:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a242:	4b4b      	ldr	r3, [pc, #300]	@ (800a370 <USBD_CDC_Init+0x1ec>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	f003 020f 	and.w	r2, r3, #15
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	3326      	adds	r3, #38	@ 0x26
 800a258:	2210      	movs	r2, #16
 800a25a:	801a      	strh	r2, [r3, #0]
 800a25c:	e035      	b.n	800a2ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a25e:	4b42      	ldr	r3, [pc, #264]	@ (800a368 <USBD_CDC_Init+0x1e4>)
 800a260:	7819      	ldrb	r1, [r3, #0]
 800a262:	2340      	movs	r3, #64	@ 0x40
 800a264:	2202      	movs	r2, #2
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f002 faab 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a26c:	4b3e      	ldr	r3, [pc, #248]	@ (800a368 <USBD_CDC_Init+0x1e4>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 020f 	and.w	r2, r3, #15
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	3324      	adds	r3, #36	@ 0x24
 800a282:	2201      	movs	r2, #1
 800a284:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a286:	4b39      	ldr	r3, [pc, #228]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a288:	7819      	ldrb	r1, [r3, #0]
 800a28a:	2340      	movs	r3, #64	@ 0x40
 800a28c:	2202      	movs	r2, #2
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f002 fa97 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a294:	4b35      	ldr	r3, [pc, #212]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f003 020f 	and.w	r2, r3, #15
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a2b0:	4b2f      	ldr	r3, [pc, #188]	@ (800a370 <USBD_CDC_Init+0x1ec>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	f003 020f 	and.w	r2, r3, #15
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3326      	adds	r3, #38	@ 0x26
 800a2c6:	2210      	movs	r2, #16
 800a2c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a2ca:	4b29      	ldr	r3, [pc, #164]	@ (800a370 <USBD_CDC_Init+0x1ec>)
 800a2cc:	7819      	ldrb	r1, [r3, #0]
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f002 fa75 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a2d8:	4b25      	ldr	r3, [pc, #148]	@ (800a370 <USBD_CDC_Init+0x1ec>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 020f 	and.w	r2, r3, #15
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	3324      	adds	r3, #36	@ 0x24
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	33b0      	adds	r3, #176	@ 0xb0
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a328:	2302      	movs	r3, #2
 800a32a:	e018      	b.n	800a35e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	7c1b      	ldrb	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a334:	4b0d      	ldr	r3, [pc, #52]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a336:	7819      	ldrb	r1, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a33e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f002 fb2c 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800a348:	e008      	b.n	800a35c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a34a:	4b08      	ldr	r3, [pc, #32]	@ (800a36c <USBD_CDC_Init+0x1e8>)
 800a34c:	7819      	ldrb	r1, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a354:	2340      	movs	r3, #64	@ 0x40
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f002 fb22 	bl	800c9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200000bb 	.word	0x200000bb
 800a36c:	200000bc 	.word	0x200000bc
 800a370:	200000bd 	.word	0x200000bd

0800a374 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a380:	4b3a      	ldr	r3, [pc, #232]	@ (800a46c <USBD_CDC_DeInit+0xf8>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f002 fa41 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a38c:	4b37      	ldr	r3, [pc, #220]	@ (800a46c <USBD_CDC_DeInit+0xf8>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 020f 	and.w	r2, r3, #15
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	440b      	add	r3, r1
 800a3a0:	3324      	adds	r3, #36	@ 0x24
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a3a6:	4b32      	ldr	r3, [pc, #200]	@ (800a470 <USBD_CDC_DeInit+0xfc>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f002 fa2e 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a3b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a470 <USBD_CDC_DeInit+0xfc>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f003 020f 	and.w	r2, r3, #15
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a3ce:	4b29      	ldr	r3, [pc, #164]	@ (800a474 <USBD_CDC_DeInit+0x100>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f002 fa1a 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a3da:	4b26      	ldr	r3, [pc, #152]	@ (800a474 <USBD_CDC_DeInit+0x100>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 020f 	and.w	r2, r3, #15
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	3324      	adds	r3, #36	@ 0x24
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a3f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a474 <USBD_CDC_DeInit+0x100>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f003 020f 	and.w	r2, r3, #15
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	3326      	adds	r3, #38	@ 0x26
 800a40a:	2200      	movs	r2, #0
 800a40c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	32b0      	adds	r2, #176	@ 0xb0
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d01f      	beq.n	800a460 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	33b0      	adds	r3, #176	@ 0xb0
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	32b0      	adds	r2, #176	@ 0xb0
 800a43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a442:	4618      	mov	r0, r3
 800a444:	f002 faee 	bl	800ca24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32b0      	adds	r2, #176	@ 0xb0
 800a452:	2100      	movs	r1, #0
 800a454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200000bb 	.word	0x200000bb
 800a470:	200000bc 	.word	0x200000bc
 800a474:	200000bd 	.word	0x200000bd

0800a478 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	32b0      	adds	r2, #176	@ 0xb0
 800a48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a490:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e0bf      	b.n	800a628 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d050      	beq.n	800a556 <USBD_CDC_Setup+0xde>
 800a4b4:	2b20      	cmp	r3, #32
 800a4b6:	f040 80af 	bne.w	800a618 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	88db      	ldrh	r3, [r3, #6]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d03a      	beq.n	800a538 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da1b      	bge.n	800a504 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	33b0      	adds	r3, #176	@ 0xb0
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a4e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	88d2      	ldrh	r2, [r2, #6]
 800a4e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	88db      	ldrh	r3, [r3, #6]
 800a4ee:	2b07      	cmp	r3, #7
 800a4f0:	bf28      	it	cs
 800a4f2:	2307      	movcs	r3, #7
 800a4f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	89fa      	ldrh	r2, [r7, #14]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fd53 	bl	800bfa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a502:	e090      	b.n	800a626 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	785a      	ldrb	r2, [r3, #1]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88db      	ldrh	r3, [r3, #6]
 800a512:	2b3f      	cmp	r3, #63	@ 0x3f
 800a514:	d803      	bhi.n	800a51e <USBD_CDC_Setup+0xa6>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88db      	ldrh	r3, [r3, #6]
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	e000      	b.n	800a520 <USBD_CDC_Setup+0xa8>
 800a51e:	2240      	movs	r2, #64	@ 0x40
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a526:	6939      	ldr	r1, [r7, #16]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a52e:	461a      	mov	r2, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fd65 	bl	800c000 <USBD_CtlPrepareRx>
      break;
 800a536:	e076      	b.n	800a626 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	33b0      	adds	r3, #176	@ 0xb0
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	7850      	ldrb	r0, [r2, #1]
 800a54e:	2200      	movs	r2, #0
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	4798      	blx	r3
      break;
 800a554:	e067      	b.n	800a626 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	2b0b      	cmp	r3, #11
 800a55c:	d851      	bhi.n	800a602 <USBD_CDC_Setup+0x18a>
 800a55e:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <USBD_CDC_Setup+0xec>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a595 	.word	0x0800a595
 800a568:	0800a611 	.word	0x0800a611
 800a56c:	0800a603 	.word	0x0800a603
 800a570:	0800a603 	.word	0x0800a603
 800a574:	0800a603 	.word	0x0800a603
 800a578:	0800a603 	.word	0x0800a603
 800a57c:	0800a603 	.word	0x0800a603
 800a580:	0800a603 	.word	0x0800a603
 800a584:	0800a603 	.word	0x0800a603
 800a588:	0800a603 	.word	0x0800a603
 800a58c:	0800a5bf 	.word	0x0800a5bf
 800a590:	0800a5e9 	.word	0x0800a5e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d107      	bne.n	800a5b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5a0:	f107 030a 	add.w	r3, r7, #10
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 fcfd 	bl	800bfa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ae:	e032      	b.n	800a616 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 fc7b 	bl	800beae <USBD_CtlError>
            ret = USBD_FAIL;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	75fb      	strb	r3, [r7, #23]
          break;
 800a5bc:	e02b      	b.n	800a616 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d107      	bne.n	800a5da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5ca:	f107 030d 	add.w	r3, r7, #13
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fce8 	bl	800bfa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5d8:	e01d      	b.n	800a616 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fc66 	bl	800beae <USBD_CtlError>
            ret = USBD_FAIL;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a5e6:	e016      	b.n	800a616 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d00f      	beq.n	800a614 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fc59 	bl	800beae <USBD_CtlError>
            ret = USBD_FAIL;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a600:	e008      	b.n	800a614 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fc52 	bl	800beae <USBD_CtlError>
          ret = USBD_FAIL;
 800a60a:	2303      	movs	r3, #3
 800a60c:	75fb      	strb	r3, [r7, #23]
          break;
 800a60e:	e002      	b.n	800a616 <USBD_CDC_Setup+0x19e>
          break;
 800a610:	bf00      	nop
 800a612:	e008      	b.n	800a626 <USBD_CDC_Setup+0x1ae>
          break;
 800a614:	bf00      	nop
      }
      break;
 800a616:	e006      	b.n	800a626 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fc47 	bl	800beae <USBD_CtlError>
      ret = USBD_FAIL;
 800a620:	2303      	movs	r3, #3
 800a622:	75fb      	strb	r3, [r7, #23]
      break;
 800a624:	bf00      	nop
  }

  return (uint8_t)ret;
 800a626:	7dfb      	ldrb	r3, [r7, #23]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a642:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32b0      	adds	r2, #176	@ 0xb0
 800a64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	e065      	b.n	800a726 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	32b0      	adds	r2, #176	@ 0xb0
 800a664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a668:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a66a:	78fb      	ldrb	r3, [r7, #3]
 800a66c:	f003 020f 	and.w	r2, r3, #15
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	3318      	adds	r3, #24
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02f      	beq.n	800a6e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a684:	78fb      	ldrb	r3, [r7, #3]
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	440b      	add	r3, r1
 800a696:	3318      	adds	r3, #24
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	f003 010f 	and.w	r1, r3, #15
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	440b      	add	r3, r1
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4403      	add	r3, r0
 800a6ac:	331c      	adds	r3, #28
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6b4:	fb01 f303 	mul.w	r3, r1, r3
 800a6b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d112      	bne.n	800a6e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	f003 020f 	and.w	r2, r3, #15
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	3318      	adds	r3, #24
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6d6:	78f9      	ldrb	r1, [r7, #3]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f002 f93e 	bl	800c95e <USBD_LL_Transmit>
 800a6e2:	e01f      	b.n	800a724 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	33b0      	adds	r3, #176	@ 0xb0
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d010      	beq.n	800a724 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	33b0      	adds	r3, #176	@ 0xb0
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a720:	78fa      	ldrb	r2, [r7, #3]
 800a722:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	32b0      	adds	r2, #176	@ 0xb0
 800a744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a748:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	32b0      	adds	r2, #176	@ 0xb0
 800a754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e01a      	b.n	800a796 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f002 f93c 	bl	800c9e2 <USBD_LL_GetRxDataSize>
 800a76a:	4602      	mov	r2, r0
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	33b0      	adds	r3, #176	@ 0xb0
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a790:	4611      	mov	r1, r2
 800a792:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	32b0      	adds	r2, #176	@ 0xb0
 800a7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e024      	b.n	800a80a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	33b0      	adds	r3, #176	@ 0xb0
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d019      	beq.n	800a808 <USBD_CDC_EP0_RxReady+0x6a>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a7da:	2bff      	cmp	r3, #255	@ 0xff
 800a7dc:	d014      	beq.n	800a808 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	33b0      	adds	r3, #176	@ 0xb0
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a7f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a7fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	22ff      	movs	r2, #255	@ 0xff
 800a804:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a81c:	2182      	movs	r1, #130	@ 0x82
 800a81e:	4818      	ldr	r0, [pc, #96]	@ (800a880 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a820:	f000 fd0f 	bl	800b242 <USBD_GetEpDesc>
 800a824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a826:	2101      	movs	r1, #1
 800a828:	4815      	ldr	r0, [pc, #84]	@ (800a880 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a82a:	f000 fd0a 	bl	800b242 <USBD_GetEpDesc>
 800a82e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a830:	2181      	movs	r1, #129	@ 0x81
 800a832:	4813      	ldr	r0, [pc, #76]	@ (800a880 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a834:	f000 fd05 	bl	800b242 <USBD_GetEpDesc>
 800a838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2210      	movs	r2, #16
 800a844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	2200      	movs	r2, #0
 800a850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a854:	711a      	strb	r2, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d006      	beq.n	800a86e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a868:	711a      	strb	r2, [r3, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2243      	movs	r2, #67	@ 0x43
 800a872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a874:	4b02      	ldr	r3, [pc, #8]	@ (800a880 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000078 	.word	0x20000078

0800a884 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a88c:	2182      	movs	r1, #130	@ 0x82
 800a88e:	4818      	ldr	r0, [pc, #96]	@ (800a8f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a890:	f000 fcd7 	bl	800b242 <USBD_GetEpDesc>
 800a894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a896:	2101      	movs	r1, #1
 800a898:	4815      	ldr	r0, [pc, #84]	@ (800a8f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a89a:	f000 fcd2 	bl	800b242 <USBD_GetEpDesc>
 800a89e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8a0:	2181      	movs	r1, #129	@ 0x81
 800a8a2:	4813      	ldr	r0, [pc, #76]	@ (800a8f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a8a4:	f000 fccd 	bl	800b242 <USBD_GetEpDesc>
 800a8a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2210      	movs	r2, #16
 800a8b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	711a      	strb	r2, [r3, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f042 0202 	orr.w	r2, r2, #2
 800a8c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	711a      	strb	r2, [r3, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f042 0202 	orr.w	r2, r2, #2
 800a8dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2243      	movs	r2, #67	@ 0x43
 800a8e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8e4:	4b02      	ldr	r3, [pc, #8]	@ (800a8f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000078 	.word	0x20000078

0800a8f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8fc:	2182      	movs	r1, #130	@ 0x82
 800a8fe:	4818      	ldr	r0, [pc, #96]	@ (800a960 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a900:	f000 fc9f 	bl	800b242 <USBD_GetEpDesc>
 800a904:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a906:	2101      	movs	r1, #1
 800a908:	4815      	ldr	r0, [pc, #84]	@ (800a960 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a90a:	f000 fc9a 	bl	800b242 <USBD_GetEpDesc>
 800a90e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a910:	2181      	movs	r1, #129	@ 0x81
 800a912:	4813      	ldr	r0, [pc, #76]	@ (800a960 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a914:	f000 fc95 	bl	800b242 <USBD_GetEpDesc>
 800a918:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2210      	movs	r2, #16
 800a924:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d006      	beq.n	800a93a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2200      	movs	r2, #0
 800a930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a934:	711a      	strb	r2, [r3, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d006      	beq.n	800a94e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a948:	711a      	strb	r2, [r3, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2243      	movs	r2, #67	@ 0x43
 800a952:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a954:	4b02      	ldr	r3, [pc, #8]	@ (800a960 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000078 	.word	0x20000078

0800a964 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	220a      	movs	r2, #10
 800a970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a972:	4b03      	ldr	r3, [pc, #12]	@ (800a980 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20000034 	.word	0x20000034

0800a984 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a994:	2303      	movs	r3, #3
 800a996:	e009      	b.n	800a9ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	33b0      	adds	r3, #176	@ 0xb0
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	32b0      	adds	r2, #176	@ 0xb0
 800a9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e008      	b.n	800a9f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	371c      	adds	r7, #28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	32b0      	adds	r2, #176	@ 0xb0
 800aa10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e004      	b.n	800aa2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
	...

0800aa38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	32b0      	adds	r2, #176	@ 0xb0
 800aa4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	32b0      	adds	r2, #176	@ 0xb0
 800aa5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e018      	b.n	800aa98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	7c1b      	ldrb	r3, [r3, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10a      	bne.n	800aa84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <USBD_CDC_ReceivePacket+0x68>)
 800aa70:	7819      	ldrb	r1, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 ff8f 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800aa82:	e008      	b.n	800aa96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa84:	4b06      	ldr	r3, [pc, #24]	@ (800aaa0 <USBD_CDC_ReceivePacket+0x68>)
 800aa86:	7819      	ldrb	r1, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa8e:	2340      	movs	r3, #64	@ 0x40
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 ff85 	bl	800c9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	200000bc 	.word	0x200000bc

0800aaa4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e01f      	b.n	800aafc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	79fa      	ldrb	r2, [r7, #7]
 800aaee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f001 fdff 	bl	800c6f4 <USBD_LL_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e025      	b.n	800ab68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	32ae      	adds	r2, #174	@ 0xae
 800ab2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00f      	beq.n	800ab58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	32ae      	adds	r2, #174	@ 0xae
 800ab42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	f107 020e 	add.w	r2, r7, #14
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	4798      	blx	r3
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 fe07 	bl	800c78c <USBD_LL_Start>
 800ab7e:	4603      	mov	r3, r0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	78fa      	ldrb	r2, [r7, #3]
 800abc2:	4611      	mov	r1, r2
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800abfc:	2303      	movs	r3, #3
 800abfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 f90c 	bl	800be3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac30:	461a      	mov	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac3e:	f003 031f 	and.w	r3, r3, #31
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d01a      	beq.n	800ac7c <USBD_LL_SetupStage+0x72>
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d822      	bhi.n	800ac90 <USBD_LL_SetupStage+0x86>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <USBD_LL_SetupStage+0x4a>
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d00a      	beq.n	800ac68 <USBD_LL_SetupStage+0x5e>
 800ac52:	e01d      	b.n	800ac90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fb63 	bl	800b328 <USBD_StdDevReq>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
      break;
 800ac66:	e020      	b.n	800acaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fbcb 	bl	800b40c <USBD_StdItfReq>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
      break;
 800ac7a:	e016      	b.n	800acaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc2d 	bl	800b4e4 <USBD_StdEPReq>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8e:	e00c      	b.n	800acaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fdd4 	bl	800c84c <USBD_LL_StallEP>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]
      break;
 800aca8:	bf00      	nop
  }

  return ret;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	460b      	mov	r3, r1
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800acc6:	7afb      	ldrb	r3, [r7, #11]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d16e      	bne.n	800adaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800acd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acda:	2b03      	cmp	r3, #3
 800acdc:	f040 8098 	bne.w	800ae10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d913      	bls.n	800ad14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	689a      	ldr	r2, [r3, #8]
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	1ad2      	subs	r2, r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	4293      	cmp	r3, r2
 800ad04:	bf28      	it	cs
 800ad06:	4613      	movcs	r3, r2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f001 f994 	bl	800c03a <USBD_CtlContinueRx>
 800ad12:	e07d      	b.n	800ae10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad1a:	f003 031f 	and.w	r3, r3, #31
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d014      	beq.n	800ad4c <USBD_LL_DataOutStage+0x98>
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d81d      	bhi.n	800ad62 <USBD_LL_DataOutStage+0xae>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <USBD_LL_DataOutStage+0x7c>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d003      	beq.n	800ad36 <USBD_LL_DataOutStage+0x82>
 800ad2e:	e018      	b.n	800ad62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75bb      	strb	r3, [r7, #22]
            break;
 800ad34:	e018      	b.n	800ad68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	4619      	mov	r1, r3
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 fa64 	bl	800b20e <USBD_CoreFindIF>
 800ad46:	4603      	mov	r3, r0
 800ad48:	75bb      	strb	r3, [r7, #22]
            break;
 800ad4a:	e00d      	b.n	800ad68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	4619      	mov	r1, r3
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fa66 	bl	800b228 <USBD_CoreFindEP>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	75bb      	strb	r3, [r7, #22]
            break;
 800ad60:	e002      	b.n	800ad68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75bb      	strb	r3, [r7, #22]
            break;
 800ad66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad68:	7dbb      	ldrb	r3, [r7, #22]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d119      	bne.n	800ada2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d113      	bne.n	800ada2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad7a:	7dba      	ldrb	r2, [r7, #22]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	32ae      	adds	r2, #174	@ 0xae
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00b      	beq.n	800ada2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ad8a:	7dba      	ldrb	r2, [r7, #22]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ad92:	7dba      	ldrb	r2, [r7, #22]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	32ae      	adds	r2, #174	@ 0xae
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f001 f95a 	bl	800c05c <USBD_CtlSendStatus>
 800ada8:	e032      	b.n	800ae10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	4619      	mov	r1, r3
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 fa37 	bl	800b228 <USBD_CoreFindEP>
 800adba:	4603      	mov	r3, r0
 800adbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adbe:	7dbb      	ldrb	r3, [r7, #22]
 800adc0:	2bff      	cmp	r3, #255	@ 0xff
 800adc2:	d025      	beq.n	800ae10 <USBD_LL_DataOutStage+0x15c>
 800adc4:	7dbb      	ldrb	r3, [r7, #22]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d122      	bne.n	800ae10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b03      	cmp	r3, #3
 800add4:	d117      	bne.n	800ae06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800add6:	7dba      	ldrb	r2, [r7, #22]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	32ae      	adds	r2, #174	@ 0xae
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00f      	beq.n	800ae06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ade6:	7dba      	ldrb	r2, [r7, #22]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800adee:	7dba      	ldrb	r2, [r7, #22]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	32ae      	adds	r2, #174	@ 0xae
 800adf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	7afa      	ldrb	r2, [r7, #11]
 800adfc:	4611      	mov	r1, r2
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	4798      	blx	r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	e000      	b.n	800ae12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b086      	sub	sp, #24
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	460b      	mov	r3, r1
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d16f      	bne.n	800af0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3314      	adds	r3, #20
 800ae32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d15a      	bne.n	800aef4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	689a      	ldr	r2, [r3, #8]
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d914      	bls.n	800ae74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	1ad2      	subs	r2, r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f001 f8bc 	bl	800bfde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae66:	2300      	movs	r3, #0
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f001 fd97 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800ae72:	e03f      	b.n	800aef4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d11c      	bne.n	800aeba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d316      	bcc.n	800aeba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d20f      	bcs.n	800aeba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f001 f89d 	bl	800bfde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aeac:	2300      	movs	r3, #0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f001 fd74 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800aeb8:	e01c      	b.n	800aef4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d10f      	bne.n	800aee6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d009      	beq.n	800aee6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aee6:	2180      	movs	r1, #128	@ 0x80
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f001 fcaf 	bl	800c84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f001 f8c7 	bl	800c082 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d03a      	beq.n	800af74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f7ff fe42 	bl	800ab88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af0c:	e032      	b.n	800af74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af14:	b2db      	uxtb	r3, r3
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 f985 	bl	800b228 <USBD_CoreFindEP>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	2bff      	cmp	r3, #255	@ 0xff
 800af26:	d025      	beq.n	800af74 <USBD_LL_DataInStage+0x15a>
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d122      	bne.n	800af74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b03      	cmp	r3, #3
 800af38:	d11c      	bne.n	800af74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af3a:	7dfa      	ldrb	r2, [r7, #23]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	32ae      	adds	r2, #174	@ 0xae
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d014      	beq.n	800af74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af4a:	7dfa      	ldrb	r2, [r7, #23]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af52:	7dfa      	ldrb	r2, [r7, #23]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	32ae      	adds	r2, #174	@ 0xae
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	7afa      	ldrb	r2, [r7, #11]
 800af60:	4611      	mov	r1, r2
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	4798      	blx	r3
 800af66:	4603      	mov	r3, r0
 800af68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af6a:	7dbb      	ldrb	r3, [r7, #22]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af70:	7dbb      	ldrb	r3, [r7, #22]
 800af72:	e000      	b.n	800af76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d014      	beq.n	800afe4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00e      	beq.n	800afe4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6852      	ldr	r2, [r2, #4]
 800afd2:	b2d2      	uxtb	r2, r2
 800afd4:	4611      	mov	r1, r2
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afe4:	2340      	movs	r3, #64	@ 0x40
 800afe6:	2200      	movs	r2, #0
 800afe8:	2100      	movs	r1, #0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 fbe9 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2240      	movs	r2, #64	@ 0x40
 800affc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b000:	2340      	movs	r3, #64	@ 0x40
 800b002:	2200      	movs	r2, #0
 800b004:	2180      	movs	r1, #128	@ 0x80
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fbdb 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2240      	movs	r2, #64	@ 0x40
 800b016:	621a      	str	r2, [r3, #32]

  return ret;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	78fa      	ldrb	r2, [r7, #3]
 800b032:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b04      	cmp	r3, #4
 800b054:	d006      	beq.n	800b064 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2204      	movs	r2, #4
 800b068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d106      	bne.n	800b09c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b094:	b2da      	uxtb	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d110      	bne.n	800b0e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d005      	beq.n	800b0e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	32ae      	adds	r2, #174	@ 0xae
 800b100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	e01c      	b.n	800b146 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b03      	cmp	r3, #3
 800b116:	d115      	bne.n	800b144 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	32ae      	adds	r2, #174	@ 0xae
 800b122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	32ae      	adds	r2, #174	@ 0xae
 800b136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4611      	mov	r1, r2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	32ae      	adds	r2, #174	@ 0xae
 800b164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e01c      	b.n	800b1aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d115      	bne.n	800b1a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32ae      	adds	r2, #174	@ 0xae
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	32ae      	adds	r2, #174	@ 0xae
 800b19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a0:	78fa      	ldrb	r2, [r7, #3]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00e      	beq.n	800b204 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6852      	ldr	r2, [r2, #4]
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	4798      	blx	r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b21a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b234:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b086      	sub	sp, #24
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	885b      	ldrh	r3, [r3, #2]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	7812      	ldrb	r2, [r2, #0]
 800b264:	4293      	cmp	r3, r2
 800b266:	d91f      	bls.n	800b2a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b26e:	e013      	b.n	800b298 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b270:	f107 030a 	add.w	r3, r7, #10
 800b274:	4619      	mov	r1, r3
 800b276:	6978      	ldr	r0, [r7, #20]
 800b278:	f000 f81b 	bl	800b2b2 <USBD_GetNextDesc>
 800b27c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	785b      	ldrb	r3, [r3, #1]
 800b282:	2b05      	cmp	r3, #5
 800b284:	d108      	bne.n	800b298 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	789b      	ldrb	r3, [r3, #2]
 800b28e:	78fa      	ldrb	r2, [r7, #3]
 800b290:	429a      	cmp	r2, r3
 800b292:	d008      	beq.n	800b2a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b294:	2300      	movs	r3, #0
 800b296:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	897b      	ldrh	r3, [r7, #10]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d8e5      	bhi.n	800b270 <USBD_GetEpDesc+0x2e>
 800b2a4:	e000      	b.n	800b2a8 <USBD_GetEpDesc+0x66>
          break;
 800b2a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2a8:	693b      	ldr	r3, [r7, #16]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	7812      	ldrb	r2, [r2, #0]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4413      	add	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3714      	adds	r7, #20
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b087      	sub	sp, #28
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	3301      	adds	r3, #1
 800b300:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b308:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	b21a      	sxth	r2, r3
 800b310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b314:	4313      	orrs	r3, r2
 800b316:	b21b      	sxth	r3, r3
 800b318:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b31a:	89fb      	ldrh	r3, [r7, #14]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b33e:	2b40      	cmp	r3, #64	@ 0x40
 800b340:	d005      	beq.n	800b34e <USBD_StdDevReq+0x26>
 800b342:	2b40      	cmp	r3, #64	@ 0x40
 800b344:	d857      	bhi.n	800b3f6 <USBD_StdDevReq+0xce>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00f      	beq.n	800b36a <USBD_StdDevReq+0x42>
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d153      	bne.n	800b3f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	32ae      	adds	r2, #174	@ 0xae
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	4798      	blx	r3
 800b364:	4603      	mov	r3, r0
 800b366:	73fb      	strb	r3, [r7, #15]
      break;
 800b368:	e04a      	b.n	800b400 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	785b      	ldrb	r3, [r3, #1]
 800b36e:	2b09      	cmp	r3, #9
 800b370:	d83b      	bhi.n	800b3ea <USBD_StdDevReq+0xc2>
 800b372:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <USBD_StdDevReq+0x50>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b3cd 	.word	0x0800b3cd
 800b37c:	0800b3e1 	.word	0x0800b3e1
 800b380:	0800b3eb 	.word	0x0800b3eb
 800b384:	0800b3d7 	.word	0x0800b3d7
 800b388:	0800b3eb 	.word	0x0800b3eb
 800b38c:	0800b3ab 	.word	0x0800b3ab
 800b390:	0800b3a1 	.word	0x0800b3a1
 800b394:	0800b3eb 	.word	0x0800b3eb
 800b398:	0800b3c3 	.word	0x0800b3c3
 800b39c:	0800b3b5 	.word	0x0800b3b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fa3c 	bl	800b820 <USBD_GetDescriptor>
          break;
 800b3a8:	e024      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fba1 	bl	800baf4 <USBD_SetAddress>
          break;
 800b3b2:	e01f      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fbe0 	bl	800bb7c <USBD_SetConfig>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]
          break;
 800b3c0:	e018      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fc83 	bl	800bcd0 <USBD_GetConfig>
          break;
 800b3ca:	e013      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fcb4 	bl	800bd3c <USBD_GetStatus>
          break;
 800b3d4:	e00e      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fce3 	bl	800bda4 <USBD_SetFeature>
          break;
 800b3de:	e009      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fd07 	bl	800bdf6 <USBD_ClrFeature>
          break;
 800b3e8:	e004      	b.n	800b3f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fd5e 	bl	800beae <USBD_CtlError>
          break;
 800b3f2:	bf00      	nop
      }
      break;
 800b3f4:	e004      	b.n	800b400 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fd58 	bl	800beae <USBD_CtlError>
      break;
 800b3fe:	bf00      	nop
  }

  return ret;
 800b400:	7bfb      	ldrb	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop

0800b40c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b422:	2b40      	cmp	r3, #64	@ 0x40
 800b424:	d005      	beq.n	800b432 <USBD_StdItfReq+0x26>
 800b426:	2b40      	cmp	r3, #64	@ 0x40
 800b428:	d852      	bhi.n	800b4d0 <USBD_StdItfReq+0xc4>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <USBD_StdItfReq+0x26>
 800b42e:	2b20      	cmp	r3, #32
 800b430:	d14e      	bne.n	800b4d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d840      	bhi.n	800b4c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	889b      	ldrh	r3, [r3, #4]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b01      	cmp	r3, #1
 800b448:	d836      	bhi.n	800b4b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	889b      	ldrh	r3, [r3, #4]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fedb 	bl	800b20e <USBD_CoreFindIF>
 800b458:	4603      	mov	r3, r0
 800b45a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2bff      	cmp	r3, #255	@ 0xff
 800b460:	d01d      	beq.n	800b49e <USBD_StdItfReq+0x92>
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d11a      	bne.n	800b49e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b468:	7bba      	ldrb	r2, [r7, #14]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	32ae      	adds	r2, #174	@ 0xae
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00f      	beq.n	800b498 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b478:	7bba      	ldrb	r2, [r7, #14]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b480:	7bba      	ldrb	r2, [r7, #14]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	32ae      	adds	r2, #174	@ 0xae
 800b486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	4798      	blx	r3
 800b492:	4603      	mov	r3, r0
 800b494:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b496:	e004      	b.n	800b4a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b49c:	e001      	b.n	800b4a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	88db      	ldrh	r3, [r3, #6]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d110      	bne.n	800b4cc <USBD_StdItfReq+0xc0>
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10d      	bne.n	800b4cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fdd3 	bl	800c05c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4b6:	e009      	b.n	800b4cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fcf7 	bl	800beae <USBD_CtlError>
          break;
 800b4c0:	e004      	b.n	800b4cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fcf2 	bl	800beae <USBD_CtlError>
          break;
 800b4ca:	e000      	b.n	800b4ce <USBD_StdItfReq+0xc2>
          break;
 800b4cc:	bf00      	nop
      }
      break;
 800b4ce:	e004      	b.n	800b4da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fceb 	bl	800beae <USBD_CtlError>
      break;
 800b4d8:	bf00      	nop
  }

  return ret;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	889b      	ldrh	r3, [r3, #4]
 800b4f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b500:	2b40      	cmp	r3, #64	@ 0x40
 800b502:	d007      	beq.n	800b514 <USBD_StdEPReq+0x30>
 800b504:	2b40      	cmp	r3, #64	@ 0x40
 800b506:	f200 817f 	bhi.w	800b808 <USBD_StdEPReq+0x324>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d02a      	beq.n	800b564 <USBD_StdEPReq+0x80>
 800b50e:	2b20      	cmp	r3, #32
 800b510:	f040 817a 	bne.w	800b808 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b514:	7bbb      	ldrb	r3, [r7, #14]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fe85 	bl	800b228 <USBD_CoreFindEP>
 800b51e:	4603      	mov	r3, r0
 800b520:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b522:	7b7b      	ldrb	r3, [r7, #13]
 800b524:	2bff      	cmp	r3, #255	@ 0xff
 800b526:	f000 8174 	beq.w	800b812 <USBD_StdEPReq+0x32e>
 800b52a:	7b7b      	ldrb	r3, [r7, #13]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f040 8170 	bne.w	800b812 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b532:	7b7a      	ldrb	r2, [r7, #13]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b53a:	7b7a      	ldrb	r2, [r7, #13]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	32ae      	adds	r2, #174	@ 0xae
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8163 	beq.w	800b812 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b54c:	7b7a      	ldrb	r2, [r7, #13]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	32ae      	adds	r2, #174	@ 0xae
 800b552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b562:	e156      	b.n	800b812 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d008      	beq.n	800b57e <USBD_StdEPReq+0x9a>
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	f300 8145 	bgt.w	800b7fc <USBD_StdEPReq+0x318>
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 809b 	beq.w	800b6ae <USBD_StdEPReq+0x1ca>
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d03c      	beq.n	800b5f6 <USBD_StdEPReq+0x112>
 800b57c:	e13e      	b.n	800b7fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b02      	cmp	r3, #2
 800b588:	d002      	beq.n	800b590 <USBD_StdEPReq+0xac>
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d016      	beq.n	800b5bc <USBD_StdEPReq+0xd8>
 800b58e:	e02c      	b.n	800b5ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00d      	beq.n	800b5b2 <USBD_StdEPReq+0xce>
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	2b80      	cmp	r3, #128	@ 0x80
 800b59a:	d00a      	beq.n	800b5b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f953 	bl	800c84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5a6:	2180      	movs	r1, #128	@ 0x80
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 f94f 	bl	800c84c <USBD_LL_StallEP>
 800b5ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5b0:	e020      	b.n	800b5f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fc7a 	bl	800beae <USBD_CtlError>
              break;
 800b5ba:	e01b      	b.n	800b5f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	885b      	ldrh	r3, [r3, #2]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10e      	bne.n	800b5e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <USBD_StdEPReq+0xfe>
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b80      	cmp	r3, #128	@ 0x80
 800b5ce:	d008      	beq.n	800b5e2 <USBD_StdEPReq+0xfe>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	88db      	ldrh	r3, [r3, #6]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 f935 	bl	800c84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fd3a 	bl	800c05c <USBD_CtlSendStatus>

              break;
 800b5e8:	e004      	b.n	800b5f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fc5e 	bl	800beae <USBD_CtlError>
              break;
 800b5f2:	bf00      	nop
          }
          break;
 800b5f4:	e107      	b.n	800b806 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d002      	beq.n	800b608 <USBD_StdEPReq+0x124>
 800b602:	2b03      	cmp	r3, #3
 800b604:	d016      	beq.n	800b634 <USBD_StdEPReq+0x150>
 800b606:	e04b      	b.n	800b6a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00d      	beq.n	800b62a <USBD_StdEPReq+0x146>
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b80      	cmp	r3, #128	@ 0x80
 800b612:	d00a      	beq.n	800b62a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 f917 	bl	800c84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b61e:	2180      	movs	r1, #128	@ 0x80
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 f913 	bl	800c84c <USBD_LL_StallEP>
 800b626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b628:	e040      	b.n	800b6ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fc3e 	bl	800beae <USBD_CtlError>
              break;
 800b632:	e03b      	b.n	800b6ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	885b      	ldrh	r3, [r3, #2]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d136      	bne.n	800b6aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 f91d 	bl	800c88a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fd03 	bl	800c05c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b656:	7bbb      	ldrb	r3, [r7, #14]
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fde4 	bl	800b228 <USBD_CoreFindEP>
 800b660:	4603      	mov	r3, r0
 800b662:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b664:	7b7b      	ldrb	r3, [r7, #13]
 800b666:	2bff      	cmp	r3, #255	@ 0xff
 800b668:	d01f      	beq.n	800b6aa <USBD_StdEPReq+0x1c6>
 800b66a:	7b7b      	ldrb	r3, [r7, #13]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d11c      	bne.n	800b6aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b670:	7b7a      	ldrb	r2, [r7, #13]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b678:	7b7a      	ldrb	r2, [r7, #13]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	32ae      	adds	r2, #174	@ 0xae
 800b67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d010      	beq.n	800b6aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b688:	7b7a      	ldrb	r2, [r7, #13]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	32ae      	adds	r2, #174	@ 0xae
 800b68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b69e:	e004      	b.n	800b6aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fc03 	bl	800beae <USBD_CtlError>
              break;
 800b6a8:	e000      	b.n	800b6ac <USBD_StdEPReq+0x1c8>
              break;
 800b6aa:	bf00      	nop
          }
          break;
 800b6ac:	e0ab      	b.n	800b806 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d002      	beq.n	800b6c0 <USBD_StdEPReq+0x1dc>
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d032      	beq.n	800b724 <USBD_StdEPReq+0x240>
 800b6be:	e097      	b.n	800b7f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d007      	beq.n	800b6d6 <USBD_StdEPReq+0x1f2>
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	2b80      	cmp	r3, #128	@ 0x80
 800b6ca:	d004      	beq.n	800b6d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fbed 	bl	800beae <USBD_CtlError>
                break;
 800b6d4:	e091      	b.n	800b7fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	da0b      	bge.n	800b6f6 <USBD_StdEPReq+0x212>
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	3310      	adds	r3, #16
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	e00b      	b.n	800b70e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	4413      	add	r3, r2
 800b70c:	3304      	adds	r3, #4
 800b70e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2200      	movs	r2, #0
 800b714:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2202      	movs	r2, #2
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fc43 	bl	800bfa8 <USBD_CtlSendData>
              break;
 800b722:	e06a      	b.n	800b7fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	da11      	bge.n	800b750 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	f003 020f 	and.w	r2, r3, #15
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	440b      	add	r3, r1
 800b73e:	3324      	adds	r3, #36	@ 0x24
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d117      	bne.n	800b776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fbb0 	bl	800beae <USBD_CtlError>
                  break;
 800b74e:	e054      	b.n	800b7fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	f003 020f 	and.w	r2, r3, #15
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	440b      	add	r3, r1
 800b762:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d104      	bne.n	800b776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb9d 	bl	800beae <USBD_CtlError>
                  break;
 800b774:	e041      	b.n	800b7fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da0b      	bge.n	800b796 <USBD_StdEPReq+0x2b2>
 800b77e:	7bbb      	ldrb	r3, [r7, #14]
 800b780:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	3310      	adds	r3, #16
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	4413      	add	r3, r2
 800b792:	3304      	adds	r3, #4
 800b794:	e00b      	b.n	800b7ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b796:	7bbb      	ldrb	r3, [r7, #14]
 800b798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <USBD_StdEPReq+0x2d8>
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b80      	cmp	r3, #128	@ 0x80
 800b7ba:	d103      	bne.n	800b7c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	e00e      	b.n	800b7e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 f87d 	bl	800c8c8 <USBD_LL_IsStallEP>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	e002      	b.n	800b7e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fbdd 	bl	800bfa8 <USBD_CtlSendData>
              break;
 800b7ee:	e004      	b.n	800b7fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fb5b 	bl	800beae <USBD_CtlError>
              break;
 800b7f8:	bf00      	nop
          }
          break;
 800b7fa:	e004      	b.n	800b806 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fb55 	bl	800beae <USBD_CtlError>
          break;
 800b804:	bf00      	nop
      }
      break;
 800b806:	e005      	b.n	800b814 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fb4f 	bl	800beae <USBD_CtlError>
      break;
 800b810:	e000      	b.n	800b814 <USBD_StdEPReq+0x330>
      break;
 800b812:	bf00      	nop
  }

  return ret;
 800b814:	7bfb      	ldrb	r3, [r7, #15]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b832:	2300      	movs	r3, #0
 800b834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	0a1b      	lsrs	r3, r3, #8
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	2b06      	cmp	r3, #6
 800b842:	f200 8128 	bhi.w	800ba96 <USBD_GetDescriptor+0x276>
 800b846:	a201      	add	r2, pc, #4	@ (adr r2, 800b84c <USBD_GetDescriptor+0x2c>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b869 	.word	0x0800b869
 800b850:	0800b881 	.word	0x0800b881
 800b854:	0800b8c1 	.word	0x0800b8c1
 800b858:	0800ba97 	.word	0x0800ba97
 800b85c:	0800ba97 	.word	0x0800ba97
 800b860:	0800ba37 	.word	0x0800ba37
 800b864:	0800ba63 	.word	0x0800ba63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	7c12      	ldrb	r2, [r2, #16]
 800b874:	f107 0108 	add.w	r1, r7, #8
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
 800b87c:	60f8      	str	r0, [r7, #12]
      break;
 800b87e:	e112      	b.n	800baa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7c1b      	ldrb	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10d      	bne.n	800b8a4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b890:	f107 0208 	add.w	r2, r7, #8
 800b894:	4610      	mov	r0, r2
 800b896:	4798      	blx	r3
 800b898:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3301      	adds	r3, #1
 800b89e:	2202      	movs	r2, #2
 800b8a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8a2:	e100      	b.n	800baa6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	f107 0208 	add.w	r2, r7, #8
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4798      	blx	r3
 800b8b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	701a      	strb	r2, [r3, #0]
      break;
 800b8be:	e0f2      	b.n	800baa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	885b      	ldrh	r3, [r3, #2]
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b05      	cmp	r3, #5
 800b8c8:	f200 80ac 	bhi.w	800ba24 <USBD_GetDescriptor+0x204>
 800b8cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d4 <USBD_GetDescriptor+0xb4>)
 800b8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d2:	bf00      	nop
 800b8d4:	0800b8ed 	.word	0x0800b8ed
 800b8d8:	0800b921 	.word	0x0800b921
 800b8dc:	0800b955 	.word	0x0800b955
 800b8e0:	0800b989 	.word	0x0800b989
 800b8e4:	0800b9bd 	.word	0x0800b9bd
 800b8e8:	0800b9f1 	.word	0x0800b9f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90e:	e091      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 facb 	bl	800beae <USBD_CtlError>
            err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
          break;
 800b91e:	e089      	b.n	800ba34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00b      	beq.n	800b944 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	7c12      	ldrb	r2, [r2, #16]
 800b938:	f107 0108 	add.w	r1, r7, #8
 800b93c:	4610      	mov	r0, r2
 800b93e:	4798      	blx	r3
 800b940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b942:	e077      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fab1 	bl	800beae <USBD_CtlError>
            err++;
 800b94c:	7afb      	ldrb	r3, [r7, #11]
 800b94e:	3301      	adds	r3, #1
 800b950:	72fb      	strb	r3, [r7, #11]
          break;
 800b952:	e06f      	b.n	800ba34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00b      	beq.n	800b978 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7c12      	ldrb	r2, [r2, #16]
 800b96c:	f107 0108 	add.w	r1, r7, #8
 800b970:	4610      	mov	r0, r2
 800b972:	4798      	blx	r3
 800b974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b976:	e05d      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fa97 	bl	800beae <USBD_CtlError>
            err++;
 800b980:	7afb      	ldrb	r3, [r7, #11]
 800b982:	3301      	adds	r3, #1
 800b984:	72fb      	strb	r3, [r7, #11]
          break;
 800b986:	e055      	b.n	800ba34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00b      	beq.n	800b9ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	7c12      	ldrb	r2, [r2, #16]
 800b9a0:	f107 0108 	add.w	r1, r7, #8
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	4798      	blx	r3
 800b9a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9aa:	e043      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fa7d 	bl	800beae <USBD_CtlError>
            err++;
 800b9b4:	7afb      	ldrb	r3, [r7, #11]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ba:	e03b      	b.n	800ba34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00b      	beq.n	800b9e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	7c12      	ldrb	r2, [r2, #16]
 800b9d4:	f107 0108 	add.w	r1, r7, #8
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4798      	blx	r3
 800b9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9de:	e029      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa63 	bl	800beae <USBD_CtlError>
            err++;
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ee:	e021      	b.n	800ba34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	7c12      	ldrb	r2, [r2, #16]
 800ba08:	f107 0108 	add.w	r1, r7, #8
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
 800ba10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba12:	e00f      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fa49 	bl	800beae <USBD_CtlError>
            err++;
 800ba1c:	7afb      	ldrb	r3, [r7, #11]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	72fb      	strb	r3, [r7, #11]
          break;
 800ba22:	e007      	b.n	800ba34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fa41 	bl	800beae <USBD_CtlError>
          err++;
 800ba2c:	7afb      	ldrb	r3, [r7, #11]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba32:	bf00      	nop
      }
      break;
 800ba34:	e037      	b.n	800baa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7c1b      	ldrb	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d109      	bne.n	800ba52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba46:	f107 0208 	add.w	r2, r7, #8
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4798      	blx	r3
 800ba4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba50:	e029      	b.n	800baa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fa2a 	bl	800beae <USBD_CtlError>
        err++;
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ba60:	e021      	b.n	800baa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	7c1b      	ldrb	r3, [r3, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10d      	bne.n	800ba86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba72:	f107 0208 	add.w	r2, r7, #8
 800ba76:	4610      	mov	r0, r2
 800ba78:	4798      	blx	r3
 800ba7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	2207      	movs	r2, #7
 800ba82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba84:	e00f      	b.n	800baa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fa10 	bl	800beae <USBD_CtlError>
        err++;
 800ba8e:	7afb      	ldrb	r3, [r7, #11]
 800ba90:	3301      	adds	r3, #1
 800ba92:	72fb      	strb	r3, [r7, #11]
      break;
 800ba94:	e007      	b.n	800baa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fa08 	bl	800beae <USBD_CtlError>
      err++;
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	3301      	adds	r3, #1
 800baa2:	72fb      	strb	r3, [r7, #11]
      break;
 800baa4:	bf00      	nop
  }

  if (err != 0U)
 800baa6:	7afb      	ldrb	r3, [r7, #11]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d11e      	bne.n	800baea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	88db      	ldrh	r3, [r3, #6]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d016      	beq.n	800bae2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bab4:	893b      	ldrh	r3, [r7, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00e      	beq.n	800bad8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	88da      	ldrh	r2, [r3, #6]
 800babe:	893b      	ldrh	r3, [r7, #8]
 800bac0:	4293      	cmp	r3, r2
 800bac2:	bf28      	it	cs
 800bac4:	4613      	movcs	r3, r2
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800baca:	893b      	ldrh	r3, [r7, #8]
 800bacc:	461a      	mov	r2, r3
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fa69 	bl	800bfa8 <USBD_CtlSendData>
 800bad6:	e009      	b.n	800baec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f9e7 	bl	800beae <USBD_CtlError>
 800bae0:	e004      	b.n	800baec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 faba 	bl	800c05c <USBD_CtlSendStatus>
 800bae8:	e000      	b.n	800baec <USBD_GetDescriptor+0x2cc>
    return;
 800baea:	bf00      	nop
  }
}
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop

0800baf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	889b      	ldrh	r3, [r3, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d131      	bne.n	800bb6a <USBD_SetAddress+0x76>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	88db      	ldrh	r3, [r3, #6]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d12d      	bne.n	800bb6a <USBD_SetAddress+0x76>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	885b      	ldrh	r3, [r3, #2]
 800bb12:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb14:	d829      	bhi.n	800bb6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d104      	bne.n	800bb38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f9bc 	bl	800beae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb36:	e01d      	b.n	800bb74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7bfa      	ldrb	r2, [r7, #15]
 800bb3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 feeb 	bl	800c920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fa86 	bl	800c05c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2202      	movs	r2, #2
 800bb5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5e:	e009      	b.n	800bb74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb68:	e004      	b.n	800bb74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f99e 	bl	800beae <USBD_CtlError>
  }
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	885b      	ldrh	r3, [r3, #2]
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	4b4e      	ldr	r3, [pc, #312]	@ (800bccc <USBD_SetConfig+0x150>)
 800bb92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb94:	4b4d      	ldr	r3, [pc, #308]	@ (800bccc <USBD_SetConfig+0x150>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d905      	bls.n	800bba8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f985 	bl	800beae <USBD_CtlError>
    return USBD_FAIL;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e08c      	b.n	800bcc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d002      	beq.n	800bbba <USBD_SetConfig+0x3e>
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d029      	beq.n	800bc0c <USBD_SetConfig+0x90>
 800bbb8:	e075      	b.n	800bca6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbba:	4b44      	ldr	r3, [pc, #272]	@ (800bccc <USBD_SetConfig+0x150>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d020      	beq.n	800bc04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbc2:	4b42      	ldr	r3, [pc, #264]	@ (800bccc <USBD_SetConfig+0x150>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbcc:	4b3f      	ldr	r3, [pc, #252]	@ (800bccc <USBD_SetConfig+0x150>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7fe ffe3 	bl	800ab9e <USBD_SetClassConfig>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d008      	beq.n	800bbf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f962 	bl	800beae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2202      	movs	r2, #2
 800bbee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbf2:	e065      	b.n	800bcc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fa31 	bl	800c05c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc02:	e05d      	b.n	800bcc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fa29 	bl	800c05c <USBD_CtlSendStatus>
      break;
 800bc0a:	e059      	b.n	800bcc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc0c:	4b2f      	ldr	r3, [pc, #188]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d112      	bne.n	800bc3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc26:	4b29      	ldr	r3, [pc, #164]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7fe ffd2 	bl	800abd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa12 	bl	800c05c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc38:	e042      	b.n	800bcc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc3a:	4b24      	ldr	r3, [pc, #144]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d02a      	beq.n	800bc9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7fe ffc0 	bl	800abd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc56:	4b1d      	ldr	r3, [pc, #116]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc60:	4b1a      	ldr	r3, [pc, #104]	@ (800bccc <USBD_SetConfig+0x150>)
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7fe ff99 	bl	800ab9e <USBD_SetClassConfig>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00f      	beq.n	800bc96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f918 	bl	800beae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7fe ffa5 	bl	800abd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc94:	e014      	b.n	800bcc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f9e0 	bl	800c05c <USBD_CtlSendStatus>
      break;
 800bc9c:	e010      	b.n	800bcc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f9dc 	bl	800c05c <USBD_CtlSendStatus>
      break;
 800bca4:	e00c      	b.n	800bcc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 f900 	bl	800beae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcae:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <USBD_SetConfig+0x150>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fe ff8e 	bl	800abd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbe:	bf00      	nop
  }

  return ret;
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	200007c8 	.word	0x200007c8

0800bcd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	88db      	ldrh	r3, [r3, #6]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d004      	beq.n	800bcec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f8e2 	bl	800beae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcea:	e023      	b.n	800bd34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	dc02      	bgt.n	800bcfe <USBD_GetConfig+0x2e>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	dc03      	bgt.n	800bd04 <USBD_GetConfig+0x34>
 800bcfc:	e015      	b.n	800bd2a <USBD_GetConfig+0x5a>
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d00b      	beq.n	800bd1a <USBD_GetConfig+0x4a>
 800bd02:	e012      	b.n	800bd2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f948 	bl	800bfa8 <USBD_CtlSendData>
        break;
 800bd18:	e00c      	b.n	800bd34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	2201      	movs	r2, #1
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f940 	bl	800bfa8 <USBD_CtlSendData>
        break;
 800bd28:	e004      	b.n	800bd34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f8be 	bl	800beae <USBD_CtlError>
        break;
 800bd32:	bf00      	nop
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d81e      	bhi.n	800bd92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	88db      	ldrh	r3, [r3, #6]
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d004      	beq.n	800bd66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f8a5 	bl	800beae <USBD_CtlError>
        break;
 800bd64:	e01a      	b.n	800bd9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	f043 0202 	orr.w	r2, r3, #2
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	330c      	adds	r3, #12
 800bd86:	2202      	movs	r2, #2
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f90c 	bl	800bfa8 <USBD_CtlSendData>
      break;
 800bd90:	e004      	b.n	800bd9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f88a 	bl	800beae <USBD_CtlError>
      break;
 800bd9a:	bf00      	nop
  }
}
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	885b      	ldrh	r3, [r3, #2]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d107      	bne.n	800bdc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f94c 	bl	800c05c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bdc4:	e013      	b.n	800bdee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	885b      	ldrh	r3, [r3, #2]
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d10b      	bne.n	800bde6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	889b      	ldrh	r3, [r3, #4]
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f93c 	bl	800c05c <USBD_CtlSendStatus>
}
 800bde4:	e003      	b.n	800bdee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f860 	bl	800beae <USBD_CtlError>
}
 800bdee:	bf00      	nop
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be06:	b2db      	uxtb	r3, r3
 800be08:	3b01      	subs	r3, #1
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d80b      	bhi.n	800be26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	885b      	ldrh	r3, [r3, #2]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d10c      	bne.n	800be30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f91c 	bl	800c05c <USBD_CtlSendStatus>
      }
      break;
 800be24:	e004      	b.n	800be30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f840 	bl	800beae <USBD_CtlError>
      break;
 800be2e:	e000      	b.n	800be32 <USBD_ClrFeature+0x3c>
      break;
 800be30:	bf00      	nop
  }
}
 800be32:	bf00      	nop
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	781a      	ldrb	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3301      	adds	r3, #1
 800be54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	781a      	ldrb	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3301      	adds	r3, #1
 800be62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f7ff fa40 	bl	800b2ea <SWAPBYTE>
 800be6a:	4603      	mov	r3, r0
 800be6c:	461a      	mov	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3301      	adds	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff fa33 	bl	800b2ea <SWAPBYTE>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3301      	adds	r3, #1
 800be90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3301      	adds	r3, #1
 800be96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff fa26 	bl	800b2ea <SWAPBYTE>
 800be9e:	4603      	mov	r3, r0
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	80da      	strh	r2, [r3, #6]
}
 800bea6:	bf00      	nop
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800beb8:	2180      	movs	r1, #128	@ 0x80
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fcc6 	bl	800c84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bec0:	2100      	movs	r1, #0
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcc2 	bl	800c84c <USBD_LL_StallEP>
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d042      	beq.n	800bf6c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f000 f842 	bl	800bf74 <USBD_GetLen>
 800bef0:	4603      	mov	r3, r0
 800bef2:	3301      	adds	r3, #1
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800befa:	d808      	bhi.n	800bf0e <USBD_GetString+0x3e>
 800befc:	6938      	ldr	r0, [r7, #16]
 800befe:	f000 f839 	bl	800bf74 <USBD_GetLen>
 800bf02:	4603      	mov	r3, r0
 800bf04:	3301      	adds	r3, #1
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	e001      	b.n	800bf12 <USBD_GetString+0x42>
 800bf0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	7812      	ldrb	r2, [r2, #0]
 800bf20:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	3301      	adds	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	2203      	movs	r2, #3
 800bf30:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	3301      	adds	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf38:	e013      	b.n	800bf62 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf3a:	7dfb      	ldrb	r3, [r7, #23]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	4413      	add	r3, r2
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	613b      	str	r3, [r7, #16]
    idx++;
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	4413      	add	r3, r2
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1e7      	bne.n	800bf3a <USBD_GetString+0x6a>
 800bf6a:	e000      	b.n	800bf6e <USBD_GetString+0x9e>
    return;
 800bf6c:	bf00      	nop
  }
}
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf84:	e005      	b.n	800bf92 <USBD_GetLen+0x1e>
  {
    len++;
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1f5      	bne.n	800bf86 <USBD_GetLen+0x12>
  }

  return len;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 fcc5 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	2100      	movs	r1, #0
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f000 fcb4 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2203      	movs	r2, #3
 800c010:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	2100      	movs	r1, #0
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 fcb8 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	2100      	movs	r1, #0
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 fca7 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2204      	movs	r2, #4
 800c068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c06c:	2300      	movs	r3, #0
 800c06e:	2200      	movs	r2, #0
 800c070:	2100      	movs	r1, #0
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fc73 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2205      	movs	r2, #5
 800c08e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c092:	2300      	movs	r3, #0
 800c094:	2200      	movs	r2, #0
 800c096:	2100      	movs	r1, #0
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc81 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4912      	ldr	r1, [pc, #72]	@ (800c0f8 <MX_USB_DEVICE_Init+0x50>)
 800c0b0:	4812      	ldr	r0, [pc, #72]	@ (800c0fc <MX_USB_DEVICE_Init+0x54>)
 800c0b2:	f7fe fcf7 	bl	800aaa4 <USBD_Init>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c0bc:	f7f7 fdb8 	bl	8003c30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0c0:	490f      	ldr	r1, [pc, #60]	@ (800c100 <MX_USB_DEVICE_Init+0x58>)
 800c0c2:	480e      	ldr	r0, [pc, #56]	@ (800c0fc <MX_USB_DEVICE_Init+0x54>)
 800c0c4:	f7fe fd1e 	bl	800ab04 <USBD_RegisterClass>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c0ce:	f7f7 fdaf 	bl	8003c30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0d2:	490c      	ldr	r1, [pc, #48]	@ (800c104 <MX_USB_DEVICE_Init+0x5c>)
 800c0d4:	4809      	ldr	r0, [pc, #36]	@ (800c0fc <MX_USB_DEVICE_Init+0x54>)
 800c0d6:	f7fe fc55 	bl	800a984 <USBD_CDC_RegisterInterface>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c0e0:	f7f7 fda6 	bl	8003c30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0e4:	4805      	ldr	r0, [pc, #20]	@ (800c0fc <MX_USB_DEVICE_Init+0x54>)
 800c0e6:	f7fe fd43 	bl	800ab70 <USBD_Start>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c0f0:	f7f7 fd9e 	bl	8003c30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0f4:	bf00      	nop
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	200000d4 	.word	0x200000d4
 800c0fc:	200007cc 	.word	0x200007cc
 800c100:	20000040 	.word	0x20000040
 800c104:	200000c0 	.word	0x200000c0

0800c108 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c10c:	2200      	movs	r2, #0
 800c10e:	4905      	ldr	r1, [pc, #20]	@ (800c124 <CDC_Init_FS+0x1c>)
 800c110:	4805      	ldr	r0, [pc, #20]	@ (800c128 <CDC_Init_FS+0x20>)
 800c112:	f7fe fc51 	bl	800a9b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c116:	4905      	ldr	r1, [pc, #20]	@ (800c12c <CDC_Init_FS+0x24>)
 800c118:	4803      	ldr	r0, [pc, #12]	@ (800c128 <CDC_Init_FS+0x20>)
 800c11a:	f7fe fc6f 	bl	800a9fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c11e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c120:	4618      	mov	r0, r3
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200012a8 	.word	0x200012a8
 800c128:	200007cc 	.word	0x200007cc
 800c12c:	20000aa8 	.word	0x20000aa8

0800c130 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c134:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c136:	4618      	mov	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
 800c14c:	4613      	mov	r3, r2
 800c14e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	2b23      	cmp	r3, #35	@ 0x23
 800c154:	d84a      	bhi.n	800c1ec <CDC_Control_FS+0xac>
 800c156:	a201      	add	r2, pc, #4	@ (adr r2, 800c15c <CDC_Control_FS+0x1c>)
 800c158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15c:	0800c1ed 	.word	0x0800c1ed
 800c160:	0800c1ed 	.word	0x0800c1ed
 800c164:	0800c1ed 	.word	0x0800c1ed
 800c168:	0800c1ed 	.word	0x0800c1ed
 800c16c:	0800c1ed 	.word	0x0800c1ed
 800c170:	0800c1ed 	.word	0x0800c1ed
 800c174:	0800c1ed 	.word	0x0800c1ed
 800c178:	0800c1ed 	.word	0x0800c1ed
 800c17c:	0800c1ed 	.word	0x0800c1ed
 800c180:	0800c1ed 	.word	0x0800c1ed
 800c184:	0800c1ed 	.word	0x0800c1ed
 800c188:	0800c1ed 	.word	0x0800c1ed
 800c18c:	0800c1ed 	.word	0x0800c1ed
 800c190:	0800c1ed 	.word	0x0800c1ed
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c1ed 	.word	0x0800c1ed
 800c19c:	0800c1ed 	.word	0x0800c1ed
 800c1a0:	0800c1ed 	.word	0x0800c1ed
 800c1a4:	0800c1ed 	.word	0x0800c1ed
 800c1a8:	0800c1ed 	.word	0x0800c1ed
 800c1ac:	0800c1ed 	.word	0x0800c1ed
 800c1b0:	0800c1ed 	.word	0x0800c1ed
 800c1b4:	0800c1ed 	.word	0x0800c1ed
 800c1b8:	0800c1ed 	.word	0x0800c1ed
 800c1bc:	0800c1ed 	.word	0x0800c1ed
 800c1c0:	0800c1ed 	.word	0x0800c1ed
 800c1c4:	0800c1ed 	.word	0x0800c1ed
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1ed 	.word	0x0800c1ed
 800c1d0:	0800c1ed 	.word	0x0800c1ed
 800c1d4:	0800c1ed 	.word	0x0800c1ed
 800c1d8:	0800c1ed 	.word	0x0800c1ed
 800c1dc:	0800c1ed 	.word	0x0800c1ed
 800c1e0:	0800c1ed 	.word	0x0800c1ed
 800c1e4:	0800c1ed 	.word	0x0800c1ed
 800c1e8:	0800c1ed 	.word	0x0800c1ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c1ec:	bf00      	nop
  }

  return (USBD_OK);
 800c1ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4805      	ldr	r0, [pc, #20]	@ (800c220 <CDC_Receive_FS+0x24>)
 800c20a:	f7fe fbf7 	bl	800a9fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c20e:	4804      	ldr	r0, [pc, #16]	@ (800c220 <CDC_Receive_FS+0x24>)
 800c210:	f7fe fc12 	bl	800aa38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c214:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	200007cc 	.word	0x200007cc

0800c224 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	4613      	mov	r3, r2
 800c230:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
	...

0800c248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	6039      	str	r1, [r7, #0]
 800c252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2212      	movs	r2, #18
 800c258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c25a:	4b03      	ldr	r3, [pc, #12]	@ (800c268 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	200000f0 	.word	0x200000f0

0800c26c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	4603      	mov	r3, r0
 800c274:	6039      	str	r1, [r7, #0]
 800c276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2204      	movs	r2, #4
 800c27c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c27e:	4b03      	ldr	r3, [pc, #12]	@ (800c28c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c280:	4618      	mov	r0, r3
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr
 800c28c:	20000104 	.word	0x20000104

0800c290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	6039      	str	r1, [r7, #0]
 800c29a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d105      	bne.n	800c2ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	4907      	ldr	r1, [pc, #28]	@ (800c2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2a6:	4808      	ldr	r0, [pc, #32]	@ (800c2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a8:	f7ff fe12 	bl	800bed0 <USBD_GetString>
 800c2ac:	e004      	b.n	800c2b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	4904      	ldr	r1, [pc, #16]	@ (800c2c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2b2:	4805      	ldr	r0, [pc, #20]	@ (800c2c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2b4:	f7ff fe0c 	bl	800bed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2b8:	4b02      	ldr	r3, [pc, #8]	@ (800c2c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20001aa8 	.word	0x20001aa8
 800c2c8:	0800ff00 	.word	0x0800ff00

0800c2cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	6039      	str	r1, [r7, #0]
 800c2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	4904      	ldr	r1, [pc, #16]	@ (800c2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2dc:	4804      	ldr	r0, [pc, #16]	@ (800c2f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2de:	f7ff fdf7 	bl	800bed0 <USBD_GetString>
  return USBD_StrDesc;
 800c2e2:	4b02      	ldr	r3, [pc, #8]	@ (800c2ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20001aa8 	.word	0x20001aa8
 800c2f0:	0800ff18 	.word	0x0800ff18

0800c2f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	221a      	movs	r2, #26
 800c304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c306:	f000 f843 	bl	800c390 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c30a:	4b02      	ldr	r3, [pc, #8]	@ (800c314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20000108 	.word	0x20000108

0800c318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	6039      	str	r1, [r7, #0]
 800c322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	4907      	ldr	r1, [pc, #28]	@ (800c34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c32e:	4808      	ldr	r0, [pc, #32]	@ (800c350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c330:	f7ff fdce 	bl	800bed0 <USBD_GetString>
 800c334:	e004      	b.n	800c340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	4904      	ldr	r1, [pc, #16]	@ (800c34c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c33a:	4805      	ldr	r0, [pc, #20]	@ (800c350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c33c:	f7ff fdc8 	bl	800bed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c340:	4b02      	ldr	r3, [pc, #8]	@ (800c34c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20001aa8 	.word	0x20001aa8
 800c350:	0800ff2c 	.word	0x0800ff2c

0800c354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d105      	bne.n	800c372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	4907      	ldr	r1, [pc, #28]	@ (800c388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c36a:	4808      	ldr	r0, [pc, #32]	@ (800c38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c36c:	f7ff fdb0 	bl	800bed0 <USBD_GetString>
 800c370:	e004      	b.n	800c37c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4904      	ldr	r1, [pc, #16]	@ (800c388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c376:	4805      	ldr	r0, [pc, #20]	@ (800c38c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c378:	f7ff fdaa 	bl	800bed0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c37c:	4b02      	ldr	r3, [pc, #8]	@ (800c388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20001aa8 	.word	0x20001aa8
 800c38c:	0800ff38 	.word	0x0800ff38

0800c390 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c396:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d4 <Get_SerialNum+0x44>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c39c:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d8 <Get_SerialNum+0x48>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c3dc <Get_SerialNum+0x4c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d009      	beq.n	800c3ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3b6:	2208      	movs	r2, #8
 800c3b8:	4909      	ldr	r1, [pc, #36]	@ (800c3e0 <Get_SerialNum+0x50>)
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 f814 	bl	800c3e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3c0:	2204      	movs	r2, #4
 800c3c2:	4908      	ldr	r1, [pc, #32]	@ (800c3e4 <Get_SerialNum+0x54>)
 800c3c4:	68b8      	ldr	r0, [r7, #8]
 800c3c6:	f000 f80f 	bl	800c3e8 <IntToUnicode>
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	1fff7a10 	.word	0x1fff7a10
 800c3d8:	1fff7a14 	.word	0x1fff7a14
 800c3dc:	1fff7a18 	.word	0x1fff7a18
 800c3e0:	2000010a 	.word	0x2000010a
 800c3e4:	2000011a 	.word	0x2000011a

0800c3e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	75fb      	strb	r3, [r7, #23]
 800c3fe:	e027      	b.n	800c450 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	0f1b      	lsrs	r3, r3, #28
 800c404:	2b09      	cmp	r3, #9
 800c406:	d80b      	bhi.n	800c420 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	0f1b      	lsrs	r3, r3, #28
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	4619      	mov	r1, r3
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	440b      	add	r3, r1
 800c418:	3230      	adds	r2, #48	@ 0x30
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	e00a      	b.n	800c436 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	0f1b      	lsrs	r3, r3, #28
 800c424:	b2da      	uxtb	r2, r3
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4619      	mov	r1, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	440b      	add	r3, r1
 800c430:	3237      	adds	r2, #55	@ 0x37
 800c432:	b2d2      	uxtb	r2, r2
 800c434:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	3301      	adds	r3, #1
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	4413      	add	r3, r2
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	3301      	adds	r3, #1
 800c44e:	75fb      	strb	r3, [r7, #23]
 800c450:	7dfa      	ldrb	r2, [r7, #23]
 800c452:	79fb      	ldrb	r3, [r7, #7]
 800c454:	429a      	cmp	r2, r3
 800c456:	d3d3      	bcc.n	800c400 <IntToUnicode+0x18>
  }
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	371c      	adds	r7, #28
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
	...

0800c468 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08a      	sub	sp, #40	@ 0x28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c470:	f107 0314 	add.w	r3, r7, #20
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	605a      	str	r2, [r3, #4]
 800c47a:	609a      	str	r2, [r3, #8]
 800c47c:	60da      	str	r2, [r3, #12]
 800c47e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c488:	d13a      	bne.n	800c500 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c48a:	2300      	movs	r3, #0
 800c48c:	613b      	str	r3, [r7, #16]
 800c48e:	4b1e      	ldr	r3, [pc, #120]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c492:	4a1d      	ldr	r2, [pc, #116]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c494:	f043 0301 	orr.w	r3, r3, #1
 800c498:	6313      	str	r3, [r2, #48]	@ 0x30
 800c49a:	4b1b      	ldr	r3, [pc, #108]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c4a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c4aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4b8:	230a      	movs	r3, #10
 800c4ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4bc:	f107 0314 	add.w	r3, r7, #20
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4812      	ldr	r0, [pc, #72]	@ (800c50c <HAL_PCD_MspInit+0xa4>)
 800c4c4:	f7f9 fb5c 	bl	8005b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4cc:	4a0e      	ldr	r2, [pc, #56]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d2:	6353      	str	r3, [r2, #52]	@ 0x34
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c4de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c4e2:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4e4:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <HAL_PCD_MspInit+0xa0>)
 800c4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4ec:	60fb      	str	r3, [r7, #12]
 800c4ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	2043      	movs	r0, #67	@ 0x43
 800c4f6:	f7f9 fb0c 	bl	8005b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4fa:	2043      	movs	r0, #67	@ 0x43
 800c4fc:	f7f9 fb25 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c500:	bf00      	nop
 800c502:	3728      	adds	r7, #40	@ 0x28
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	40023800 	.word	0x40023800
 800c50c:	40020000 	.word	0x40020000

0800c510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c524:	4619      	mov	r1, r3
 800c526:	4610      	mov	r0, r2
 800c528:	f7fe fb6f 	bl	800ac0a <USBD_LL_SetupStage>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c546:	78fa      	ldrb	r2, [r7, #3]
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	4613      	mov	r3, r2
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	440b      	add	r3, r1
 800c554:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	78fb      	ldrb	r3, [r7, #3]
 800c55c:	4619      	mov	r1, r3
 800c55e:	f7fe fba9 	bl	800acb4 <USBD_LL_DataOutStage>
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	460b      	mov	r3, r1
 800c574:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c57c:	78fa      	ldrb	r2, [r7, #3]
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	4613      	mov	r3, r2
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	440b      	add	r3, r1
 800c58a:	3320      	adds	r3, #32
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	78fb      	ldrb	r3, [r7, #3]
 800c590:	4619      	mov	r1, r3
 800c592:	f7fe fc42 	bl	800ae1a <USBD_LL_DataInStage>
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fe fd7c 	bl	800b0aa <USBD_LL_SOF>
}
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b084      	sub	sp, #16
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	79db      	ldrb	r3, [r3, #7]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	73fb      	strb	r3, [r7, #15]
 800c5d2:	e008      	b.n	800c5e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	79db      	ldrb	r3, [r3, #7]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d102      	bne.n	800c5e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	73fb      	strb	r3, [r7, #15]
 800c5e0:	e001      	b.n	800c5e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c5e2:	f7f7 fb25 	bl	8003c30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5ec:	7bfa      	ldrb	r2, [r7, #15]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe fd16 	bl	800b022 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fe fcbe 	bl	800af7e <USBD_LL_Reset>
}
 800c602:	bf00      	nop
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe fd11 	bl	800b042 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6812      	ldr	r2, [r2, #0]
 800c62e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7adb      	ldrb	r3, [r3, #11]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c640:	4b04      	ldr	r3, [pc, #16]	@ (800c654 <HAL_PCD_SuspendCallback+0x48>)
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	4a03      	ldr	r2, [pc, #12]	@ (800c654 <HAL_PCD_SuspendCallback+0x48>)
 800c646:	f043 0306 	orr.w	r3, r3, #6
 800c64a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c64c:	bf00      	nop
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed00 	.word	0xe000ed00

0800c658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe fd07 	bl	800b07a <USBD_LL_Resume>
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	4611      	mov	r1, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe fd5f 	bl	800b14e <USBD_LL_IsoOUTIncomplete>
}
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6aa:	78fa      	ldrb	r2, [r7, #3]
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fd1b 	bl	800b0ea <USBD_LL_IsoINIncomplete>
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe fd71 	bl	800b1b2 <USBD_LL_DevConnected>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fd6e 	bl	800b1c8 <USBD_LL_DevDisconnected>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d13c      	bne.n	800c77e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c704:	4a20      	ldr	r2, [pc, #128]	@ (800c788 <USBD_LL_Init+0x94>)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a1e      	ldr	r2, [pc, #120]	@ (800c788 <USBD_LL_Init+0x94>)
 800c710:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c714:	4b1c      	ldr	r3, [pc, #112]	@ (800c788 <USBD_LL_Init+0x94>)
 800c716:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c71a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c71c:	4b1a      	ldr	r3, [pc, #104]	@ (800c788 <USBD_LL_Init+0x94>)
 800c71e:	2204      	movs	r2, #4
 800c720:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c722:	4b19      	ldr	r3, [pc, #100]	@ (800c788 <USBD_LL_Init+0x94>)
 800c724:	2202      	movs	r2, #2
 800c726:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c728:	4b17      	ldr	r3, [pc, #92]	@ (800c788 <USBD_LL_Init+0x94>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c72e:	4b16      	ldr	r3, [pc, #88]	@ (800c788 <USBD_LL_Init+0x94>)
 800c730:	2202      	movs	r2, #2
 800c732:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c734:	4b14      	ldr	r3, [pc, #80]	@ (800c788 <USBD_LL_Init+0x94>)
 800c736:	2200      	movs	r2, #0
 800c738:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c73a:	4b13      	ldr	r3, [pc, #76]	@ (800c788 <USBD_LL_Init+0x94>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c740:	4b11      	ldr	r3, [pc, #68]	@ (800c788 <USBD_LL_Init+0x94>)
 800c742:	2200      	movs	r2, #0
 800c744:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c746:	4b10      	ldr	r3, [pc, #64]	@ (800c788 <USBD_LL_Init+0x94>)
 800c748:	2200      	movs	r2, #0
 800c74a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c74c:	4b0e      	ldr	r3, [pc, #56]	@ (800c788 <USBD_LL_Init+0x94>)
 800c74e:	2200      	movs	r2, #0
 800c750:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c752:	480d      	ldr	r0, [pc, #52]	@ (800c788 <USBD_LL_Init+0x94>)
 800c754:	f7f9 fbe1 	bl	8005f1a <HAL_PCD_Init>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c75e:	f7f7 fa67 	bl	8003c30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c762:	2180      	movs	r1, #128	@ 0x80
 800c764:	4808      	ldr	r0, [pc, #32]	@ (800c788 <USBD_LL_Init+0x94>)
 800c766:	f7fa fe0e 	bl	8007386 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c76a:	2240      	movs	r2, #64	@ 0x40
 800c76c:	2100      	movs	r1, #0
 800c76e:	4806      	ldr	r0, [pc, #24]	@ (800c788 <USBD_LL_Init+0x94>)
 800c770:	f7fa fdc2 	bl	80072f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c774:	2280      	movs	r2, #128	@ 0x80
 800c776:	2101      	movs	r1, #1
 800c778:	4803      	ldr	r0, [pc, #12]	@ (800c788 <USBD_LL_Init+0x94>)
 800c77a:	f7fa fdbd 	bl	80072f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	20001ca8 	.word	0x20001ca8

0800c78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f9 fcc8 	bl	8006138 <HAL_PCD_Start>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f942 	bl	800ca38 <USBD_Get_USB_Status>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	4608      	mov	r0, r1
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	70fb      	strb	r3, [r7, #3]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70bb      	strb	r3, [r7, #2]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7ea:	78bb      	ldrb	r3, [r7, #2]
 800c7ec:	883a      	ldrh	r2, [r7, #0]
 800c7ee:	78f9      	ldrb	r1, [r7, #3]
 800c7f0:	f7fa f99c 	bl	8006b2c <HAL_PCD_EP_Open>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 f91c 	bl	800ca38 <USBD_Get_USB_Status>
 800c800:	4603      	mov	r3, r0
 800c802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c804:	7bbb      	ldrb	r3, [r7, #14]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fa f9e7 	bl	8006c00 <HAL_PCD_EP_Close>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 f8fd 	bl	800ca38 <USBD_Get_USB_Status>
 800c83e:	4603      	mov	r3, r0
 800c840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c842:	7bbb      	ldrb	r3, [r7, #14]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c866:	78fa      	ldrb	r2, [r7, #3]
 800c868:	4611      	mov	r1, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fa fa9f 	bl	8006dae <HAL_PCD_EP_SetStall>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f8de 	bl	800ca38 <USBD_Get_USB_Status>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c880:	7bbb      	ldrb	r3, [r7, #14]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fa fae3 	bl	8006e74 <HAL_PCD_EP_ClrStall>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f8bf 	bl	800ca38 <USBD_Get_USB_Status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	da0b      	bge.n	800c8fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8e4:	78fb      	ldrb	r3, [r7, #3]
 800c8e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3316      	adds	r3, #22
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	e00b      	b.n	800c914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c902:	68f9      	ldr	r1, [r7, #12]
 800c904:	4613      	mov	r3, r2
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	4413      	add	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	440b      	add	r3, r1
 800c90e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c912:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fa f8d0 	bl	8006ae4 <HAL_PCD_SetAddress>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f874 	bl	800ca38 <USBD_Get_USB_Status>
 800c950:	4603      	mov	r3, r0
 800c952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c954:	7bbb      	ldrb	r3, [r7, #14]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b086      	sub	sp, #24
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	603b      	str	r3, [r7, #0]
 800c96a:	460b      	mov	r3, r1
 800c96c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c97c:	7af9      	ldrb	r1, [r7, #11]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	f7fa f9da 	bl	8006d3a <HAL_PCD_EP_Transmit>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f853 	bl	800ca38 <USBD_Get_USB_Status>
 800c992:	4603      	mov	r3, r0
 800c994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c996:	7dbb      	ldrb	r3, [r7, #22]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	607a      	str	r2, [r7, #4]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c9be:	7af9      	ldrb	r1, [r7, #11]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	f7fa f966 	bl	8006c94 <HAL_PCD_EP_Receive>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f832 	bl	800ca38 <USBD_Get_USB_Status>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9f4:	78fa      	ldrb	r2, [r7, #3]
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fa f986 	bl	8006d0a <HAL_PCD_EP_GetRxCount>
 800c9fe:	4603      	mov	r3, r0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca10:	4b03      	ldr	r3, [pc, #12]	@ (800ca20 <USBD_static_malloc+0x18>)
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	2000218c 	.word	0x2000218c

0800ca24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]

}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d817      	bhi.n	800ca7c <USBD_Get_USB_Status+0x44>
 800ca4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca54 <USBD_Get_USB_Status+0x1c>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800ca65 	.word	0x0800ca65
 800ca58:	0800ca6b 	.word	0x0800ca6b
 800ca5c:	0800ca71 	.word	0x0800ca71
 800ca60:	0800ca77 	.word	0x0800ca77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]
    break;
 800ca68:	e00b      	b.n	800ca82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca6e:	e008      	b.n	800ca82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca70:	2301      	movs	r3, #1
 800ca72:	73fb      	strb	r3, [r7, #15]
    break;
 800ca74:	e005      	b.n	800ca82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca76:	2303      	movs	r3, #3
 800ca78:	73fb      	strb	r3, [r7, #15]
    break;
 800ca7a:	e002      	b.n	800ca82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca80:	bf00      	nop
  }
  return usb_status;
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <malloc>:
 800ca90:	4b02      	ldr	r3, [pc, #8]	@ (800ca9c <malloc+0xc>)
 800ca92:	4601      	mov	r1, r0
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f000 b825 	b.w	800cae4 <_malloc_r>
 800ca9a:	bf00      	nop
 800ca9c:	20000130 	.word	0x20000130

0800caa0 <sbrk_aligned>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	4e0f      	ldr	r6, [pc, #60]	@ (800cae0 <sbrk_aligned+0x40>)
 800caa4:	460c      	mov	r4, r1
 800caa6:	6831      	ldr	r1, [r6, #0]
 800caa8:	4605      	mov	r5, r0
 800caaa:	b911      	cbnz	r1, 800cab2 <sbrk_aligned+0x12>
 800caac:	f000 ff4e 	bl	800d94c <_sbrk_r>
 800cab0:	6030      	str	r0, [r6, #0]
 800cab2:	4621      	mov	r1, r4
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 ff49 	bl	800d94c <_sbrk_r>
 800caba:	1c43      	adds	r3, r0, #1
 800cabc:	d103      	bne.n	800cac6 <sbrk_aligned+0x26>
 800cabe:	f04f 34ff 	mov.w	r4, #4294967295
 800cac2:	4620      	mov	r0, r4
 800cac4:	bd70      	pop	{r4, r5, r6, pc}
 800cac6:	1cc4      	adds	r4, r0, #3
 800cac8:	f024 0403 	bic.w	r4, r4, #3
 800cacc:	42a0      	cmp	r0, r4
 800cace:	d0f8      	beq.n	800cac2 <sbrk_aligned+0x22>
 800cad0:	1a21      	subs	r1, r4, r0
 800cad2:	4628      	mov	r0, r5
 800cad4:	f000 ff3a 	bl	800d94c <_sbrk_r>
 800cad8:	3001      	adds	r0, #1
 800cada:	d1f2      	bne.n	800cac2 <sbrk_aligned+0x22>
 800cadc:	e7ef      	b.n	800cabe <sbrk_aligned+0x1e>
 800cade:	bf00      	nop
 800cae0:	200023ac 	.word	0x200023ac

0800cae4 <_malloc_r>:
 800cae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae8:	1ccd      	adds	r5, r1, #3
 800caea:	f025 0503 	bic.w	r5, r5, #3
 800caee:	3508      	adds	r5, #8
 800caf0:	2d0c      	cmp	r5, #12
 800caf2:	bf38      	it	cc
 800caf4:	250c      	movcc	r5, #12
 800caf6:	2d00      	cmp	r5, #0
 800caf8:	4606      	mov	r6, r0
 800cafa:	db01      	blt.n	800cb00 <_malloc_r+0x1c>
 800cafc:	42a9      	cmp	r1, r5
 800cafe:	d904      	bls.n	800cb0a <_malloc_r+0x26>
 800cb00:	230c      	movs	r3, #12
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	2000      	movs	r0, #0
 800cb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbe0 <_malloc_r+0xfc>
 800cb0e:	f000 f869 	bl	800cbe4 <__malloc_lock>
 800cb12:	f8d8 3000 	ldr.w	r3, [r8]
 800cb16:	461c      	mov	r4, r3
 800cb18:	bb44      	cbnz	r4, 800cb6c <_malloc_r+0x88>
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff ffbf 	bl	800caa0 <sbrk_aligned>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	4604      	mov	r4, r0
 800cb26:	d158      	bne.n	800cbda <_malloc_r+0xf6>
 800cb28:	f8d8 4000 	ldr.w	r4, [r8]
 800cb2c:	4627      	mov	r7, r4
 800cb2e:	2f00      	cmp	r7, #0
 800cb30:	d143      	bne.n	800cbba <_malloc_r+0xd6>
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	d04b      	beq.n	800cbce <_malloc_r+0xea>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	4639      	mov	r1, r7
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	eb04 0903 	add.w	r9, r4, r3
 800cb40:	f000 ff04 	bl	800d94c <_sbrk_r>
 800cb44:	4581      	cmp	r9, r0
 800cb46:	d142      	bne.n	800cbce <_malloc_r+0xea>
 800cb48:	6821      	ldr	r1, [r4, #0]
 800cb4a:	1a6d      	subs	r5, r5, r1
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f7ff ffa6 	bl	800caa0 <sbrk_aligned>
 800cb54:	3001      	adds	r0, #1
 800cb56:	d03a      	beq.n	800cbce <_malloc_r+0xea>
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	442b      	add	r3, r5
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	bb62      	cbnz	r2, 800cbc0 <_malloc_r+0xdc>
 800cb66:	f8c8 7000 	str.w	r7, [r8]
 800cb6a:	e00f      	b.n	800cb8c <_malloc_r+0xa8>
 800cb6c:	6822      	ldr	r2, [r4, #0]
 800cb6e:	1b52      	subs	r2, r2, r5
 800cb70:	d420      	bmi.n	800cbb4 <_malloc_r+0xd0>
 800cb72:	2a0b      	cmp	r2, #11
 800cb74:	d917      	bls.n	800cba6 <_malloc_r+0xc2>
 800cb76:	1961      	adds	r1, r4, r5
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	6025      	str	r5, [r4, #0]
 800cb7c:	bf18      	it	ne
 800cb7e:	6059      	strne	r1, [r3, #4]
 800cb80:	6863      	ldr	r3, [r4, #4]
 800cb82:	bf08      	it	eq
 800cb84:	f8c8 1000 	streq.w	r1, [r8]
 800cb88:	5162      	str	r2, [r4, r5]
 800cb8a:	604b      	str	r3, [r1, #4]
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f000 f82f 	bl	800cbf0 <__malloc_unlock>
 800cb92:	f104 000b 	add.w	r0, r4, #11
 800cb96:	1d23      	adds	r3, r4, #4
 800cb98:	f020 0007 	bic.w	r0, r0, #7
 800cb9c:	1ac2      	subs	r2, r0, r3
 800cb9e:	bf1c      	itt	ne
 800cba0:	1a1b      	subne	r3, r3, r0
 800cba2:	50a3      	strne	r3, [r4, r2]
 800cba4:	e7af      	b.n	800cb06 <_malloc_r+0x22>
 800cba6:	6862      	ldr	r2, [r4, #4]
 800cba8:	42a3      	cmp	r3, r4
 800cbaa:	bf0c      	ite	eq
 800cbac:	f8c8 2000 	streq.w	r2, [r8]
 800cbb0:	605a      	strne	r2, [r3, #4]
 800cbb2:	e7eb      	b.n	800cb8c <_malloc_r+0xa8>
 800cbb4:	4623      	mov	r3, r4
 800cbb6:	6864      	ldr	r4, [r4, #4]
 800cbb8:	e7ae      	b.n	800cb18 <_malloc_r+0x34>
 800cbba:	463c      	mov	r4, r7
 800cbbc:	687f      	ldr	r7, [r7, #4]
 800cbbe:	e7b6      	b.n	800cb2e <_malloc_r+0x4a>
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d1fb      	bne.n	800cbc0 <_malloc_r+0xdc>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	6053      	str	r3, [r2, #4]
 800cbcc:	e7de      	b.n	800cb8c <_malloc_r+0xa8>
 800cbce:	230c      	movs	r3, #12
 800cbd0:	6033      	str	r3, [r6, #0]
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f000 f80c 	bl	800cbf0 <__malloc_unlock>
 800cbd8:	e794      	b.n	800cb04 <_malloc_r+0x20>
 800cbda:	6005      	str	r5, [r0, #0]
 800cbdc:	e7d6      	b.n	800cb8c <_malloc_r+0xa8>
 800cbde:	bf00      	nop
 800cbe0:	200023b0 	.word	0x200023b0

0800cbe4 <__malloc_lock>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	@ (800cbec <__malloc_lock+0x8>)
 800cbe6:	f000 befe 	b.w	800d9e6 <__retarget_lock_acquire_recursive>
 800cbea:	bf00      	nop
 800cbec:	200024f4 	.word	0x200024f4

0800cbf0 <__malloc_unlock>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	@ (800cbf8 <__malloc_unlock+0x8>)
 800cbf2:	f000 bef9 	b.w	800d9e8 <__retarget_lock_release_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	200024f4 	.word	0x200024f4

0800cbfc <__cvt>:
 800cbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc00:	ec57 6b10 	vmov	r6, r7, d0
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4619      	mov	r1, r3
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	bfbb      	ittet	lt
 800cc0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc12:	461f      	movlt	r7, r3
 800cc14:	2300      	movge	r3, #0
 800cc16:	232d      	movlt	r3, #45	@ 0x2d
 800cc18:	700b      	strb	r3, [r1, #0]
 800cc1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc20:	4691      	mov	r9, r2
 800cc22:	f023 0820 	bic.w	r8, r3, #32
 800cc26:	bfbc      	itt	lt
 800cc28:	4632      	movlt	r2, r6
 800cc2a:	4616      	movlt	r6, r2
 800cc2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc30:	d005      	beq.n	800cc3e <__cvt+0x42>
 800cc32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc36:	d100      	bne.n	800cc3a <__cvt+0x3e>
 800cc38:	3401      	adds	r4, #1
 800cc3a:	2102      	movs	r1, #2
 800cc3c:	e000      	b.n	800cc40 <__cvt+0x44>
 800cc3e:	2103      	movs	r1, #3
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	ab02      	add	r3, sp, #8
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	ec47 6b10 	vmov	d0, r6, r7
 800cc4c:	4653      	mov	r3, sl
 800cc4e:	4622      	mov	r2, r4
 800cc50:	f000 ff62 	bl	800db18 <_dtoa_r>
 800cc54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc58:	4605      	mov	r5, r0
 800cc5a:	d119      	bne.n	800cc90 <__cvt+0x94>
 800cc5c:	f019 0f01 	tst.w	r9, #1
 800cc60:	d00e      	beq.n	800cc80 <__cvt+0x84>
 800cc62:	eb00 0904 	add.w	r9, r0, r4
 800cc66:	2200      	movs	r2, #0
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc72:	b108      	cbz	r0, 800cc78 <__cvt+0x7c>
 800cc74:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc78:	2230      	movs	r2, #48	@ 0x30
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	454b      	cmp	r3, r9
 800cc7e:	d31e      	bcc.n	800ccbe <__cvt+0xc2>
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc84:	1b5b      	subs	r3, r3, r5
 800cc86:	4628      	mov	r0, r5
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	b004      	add	sp, #16
 800cc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc94:	eb00 0904 	add.w	r9, r0, r4
 800cc98:	d1e5      	bne.n	800cc66 <__cvt+0x6a>
 800cc9a:	7803      	ldrb	r3, [r0, #0]
 800cc9c:	2b30      	cmp	r3, #48	@ 0x30
 800cc9e:	d10a      	bne.n	800ccb6 <__cvt+0xba>
 800cca0:	2200      	movs	r2, #0
 800cca2:	2300      	movs	r3, #0
 800cca4:	4630      	mov	r0, r6
 800cca6:	4639      	mov	r1, r7
 800cca8:	f7f3 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccac:	b918      	cbnz	r0, 800ccb6 <__cvt+0xba>
 800ccae:	f1c4 0401 	rsb	r4, r4, #1
 800ccb2:	f8ca 4000 	str.w	r4, [sl]
 800ccb6:	f8da 3000 	ldr.w	r3, [sl]
 800ccba:	4499      	add	r9, r3
 800ccbc:	e7d3      	b.n	800cc66 <__cvt+0x6a>
 800ccbe:	1c59      	adds	r1, r3, #1
 800ccc0:	9103      	str	r1, [sp, #12]
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	e7d9      	b.n	800cc7a <__cvt+0x7e>

0800ccc6 <__exponent>:
 800ccc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc8:	2900      	cmp	r1, #0
 800ccca:	bfba      	itte	lt
 800cccc:	4249      	neglt	r1, r1
 800ccce:	232d      	movlt	r3, #45	@ 0x2d
 800ccd0:	232b      	movge	r3, #43	@ 0x2b
 800ccd2:	2909      	cmp	r1, #9
 800ccd4:	7002      	strb	r2, [r0, #0]
 800ccd6:	7043      	strb	r3, [r0, #1]
 800ccd8:	dd29      	ble.n	800cd2e <__exponent+0x68>
 800ccda:	f10d 0307 	add.w	r3, sp, #7
 800ccde:	461d      	mov	r5, r3
 800cce0:	270a      	movs	r7, #10
 800cce2:	461a      	mov	r2, r3
 800cce4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cce8:	fb07 1416 	mls	r4, r7, r6, r1
 800ccec:	3430      	adds	r4, #48	@ 0x30
 800ccee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	2c63      	cmp	r4, #99	@ 0x63
 800ccf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	dcf1      	bgt.n	800cce2 <__exponent+0x1c>
 800ccfe:	3130      	adds	r1, #48	@ 0x30
 800cd00:	1e94      	subs	r4, r2, #2
 800cd02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd06:	1c41      	adds	r1, r0, #1
 800cd08:	4623      	mov	r3, r4
 800cd0a:	42ab      	cmp	r3, r5
 800cd0c:	d30a      	bcc.n	800cd24 <__exponent+0x5e>
 800cd0e:	f10d 0309 	add.w	r3, sp, #9
 800cd12:	1a9b      	subs	r3, r3, r2
 800cd14:	42ac      	cmp	r4, r5
 800cd16:	bf88      	it	hi
 800cd18:	2300      	movhi	r3, #0
 800cd1a:	3302      	adds	r3, #2
 800cd1c:	4403      	add	r3, r0
 800cd1e:	1a18      	subs	r0, r3, r0
 800cd20:	b003      	add	sp, #12
 800cd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd2c:	e7ed      	b.n	800cd0a <__exponent+0x44>
 800cd2e:	2330      	movs	r3, #48	@ 0x30
 800cd30:	3130      	adds	r1, #48	@ 0x30
 800cd32:	7083      	strb	r3, [r0, #2]
 800cd34:	70c1      	strb	r1, [r0, #3]
 800cd36:	1d03      	adds	r3, r0, #4
 800cd38:	e7f1      	b.n	800cd1e <__exponent+0x58>
	...

0800cd3c <_printf_float>:
 800cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	b08d      	sub	sp, #52	@ 0x34
 800cd42:	460c      	mov	r4, r1
 800cd44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd48:	4616      	mov	r6, r2
 800cd4a:	461f      	mov	r7, r3
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	f000 fdc5 	bl	800d8dc <_localeconv_r>
 800cd52:	6803      	ldr	r3, [r0, #0]
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f3 fa8a 	bl	8000270 <strlen>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd60:	f8d8 3000 	ldr.w	r3, [r8]
 800cd64:	9005      	str	r0, [sp, #20]
 800cd66:	3307      	adds	r3, #7
 800cd68:	f023 0307 	bic.w	r3, r3, #7
 800cd6c:	f103 0208 	add.w	r2, r3, #8
 800cd70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd74:	f8d4 b000 	ldr.w	fp, [r4]
 800cd78:	f8c8 2000 	str.w	r2, [r8]
 800cd7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd84:	9307      	str	r3, [sp, #28]
 800cd86:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd92:	4b9c      	ldr	r3, [pc, #624]	@ (800d004 <_printf_float+0x2c8>)
 800cd94:	f04f 32ff 	mov.w	r2, #4294967295
 800cd98:	f7f3 fec8 	bl	8000b2c <__aeabi_dcmpun>
 800cd9c:	bb70      	cbnz	r0, 800cdfc <_printf_float+0xc0>
 800cd9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cda2:	4b98      	ldr	r3, [pc, #608]	@ (800d004 <_printf_float+0x2c8>)
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	f7f3 fea2 	bl	8000af0 <__aeabi_dcmple>
 800cdac:	bb30      	cbnz	r0, 800cdfc <_printf_float+0xc0>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	f7f3 fe91 	bl	8000adc <__aeabi_dcmplt>
 800cdba:	b110      	cbz	r0, 800cdc2 <_printf_float+0x86>
 800cdbc:	232d      	movs	r3, #45	@ 0x2d
 800cdbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdc2:	4a91      	ldr	r2, [pc, #580]	@ (800d008 <_printf_float+0x2cc>)
 800cdc4:	4b91      	ldr	r3, [pc, #580]	@ (800d00c <_printf_float+0x2d0>)
 800cdc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdca:	bf8c      	ite	hi
 800cdcc:	4690      	movhi	r8, r2
 800cdce:	4698      	movls	r8, r3
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	f02b 0304 	bic.w	r3, fp, #4
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	f04f 0900 	mov.w	r9, #0
 800cdde:	9700      	str	r7, [sp, #0]
 800cde0:	4633      	mov	r3, r6
 800cde2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cde4:	4621      	mov	r1, r4
 800cde6:	4628      	mov	r0, r5
 800cde8:	f000 f9d2 	bl	800d190 <_printf_common>
 800cdec:	3001      	adds	r0, #1
 800cdee:	f040 808d 	bne.w	800cf0c <_printf_float+0x1d0>
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	b00d      	add	sp, #52	@ 0x34
 800cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	464b      	mov	r3, r9
 800ce00:	4640      	mov	r0, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f7f3 fe92 	bl	8000b2c <__aeabi_dcmpun>
 800ce08:	b140      	cbz	r0, 800ce1c <_printf_float+0xe0>
 800ce0a:	464b      	mov	r3, r9
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	bfbc      	itt	lt
 800ce10:	232d      	movlt	r3, #45	@ 0x2d
 800ce12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce16:	4a7e      	ldr	r2, [pc, #504]	@ (800d010 <_printf_float+0x2d4>)
 800ce18:	4b7e      	ldr	r3, [pc, #504]	@ (800d014 <_printf_float+0x2d8>)
 800ce1a:	e7d4      	b.n	800cdc6 <_printf_float+0x8a>
 800ce1c:	6863      	ldr	r3, [r4, #4]
 800ce1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce22:	9206      	str	r2, [sp, #24]
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	d13b      	bne.n	800cea0 <_printf_float+0x164>
 800ce28:	2306      	movs	r3, #6
 800ce2a:	6063      	str	r3, [r4, #4]
 800ce2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce30:	2300      	movs	r3, #0
 800ce32:	6022      	str	r2, [r4, #0]
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce3c:	ab09      	add	r3, sp, #36	@ 0x24
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	6861      	ldr	r1, [r4, #4]
 800ce42:	ec49 8b10 	vmov	d0, r8, r9
 800ce46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f7ff fed6 	bl	800cbfc <__cvt>
 800ce50:	9b06      	ldr	r3, [sp, #24]
 800ce52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce54:	2b47      	cmp	r3, #71	@ 0x47
 800ce56:	4680      	mov	r8, r0
 800ce58:	d129      	bne.n	800ceae <_printf_float+0x172>
 800ce5a:	1cc8      	adds	r0, r1, #3
 800ce5c:	db02      	blt.n	800ce64 <_printf_float+0x128>
 800ce5e:	6863      	ldr	r3, [r4, #4]
 800ce60:	4299      	cmp	r1, r3
 800ce62:	dd41      	ble.n	800cee8 <_printf_float+0x1ac>
 800ce64:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce68:	fa5f fa8a 	uxtb.w	sl, sl
 800ce6c:	3901      	subs	r1, #1
 800ce6e:	4652      	mov	r2, sl
 800ce70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce74:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce76:	f7ff ff26 	bl	800ccc6 <__exponent>
 800ce7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce7c:	1813      	adds	r3, r2, r0
 800ce7e:	2a01      	cmp	r2, #1
 800ce80:	4681      	mov	r9, r0
 800ce82:	6123      	str	r3, [r4, #16]
 800ce84:	dc02      	bgt.n	800ce8c <_printf_float+0x150>
 800ce86:	6822      	ldr	r2, [r4, #0]
 800ce88:	07d2      	lsls	r2, r2, #31
 800ce8a:	d501      	bpl.n	800ce90 <_printf_float+0x154>
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0a2      	beq.n	800cdde <_printf_float+0xa2>
 800ce98:	232d      	movs	r3, #45	@ 0x2d
 800ce9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce9e:	e79e      	b.n	800cdde <_printf_float+0xa2>
 800cea0:	9a06      	ldr	r2, [sp, #24]
 800cea2:	2a47      	cmp	r2, #71	@ 0x47
 800cea4:	d1c2      	bne.n	800ce2c <_printf_float+0xf0>
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1c0      	bne.n	800ce2c <_printf_float+0xf0>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e7bd      	b.n	800ce2a <_printf_float+0xee>
 800ceae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ceb2:	d9db      	bls.n	800ce6c <_printf_float+0x130>
 800ceb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ceb8:	d118      	bne.n	800ceec <_printf_float+0x1b0>
 800ceba:	2900      	cmp	r1, #0
 800cebc:	6863      	ldr	r3, [r4, #4]
 800cebe:	dd0b      	ble.n	800ced8 <_printf_float+0x19c>
 800cec0:	6121      	str	r1, [r4, #16]
 800cec2:	b913      	cbnz	r3, 800ceca <_printf_float+0x18e>
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	07d0      	lsls	r0, r2, #31
 800cec8:	d502      	bpl.n	800ced0 <_printf_float+0x194>
 800ceca:	3301      	adds	r3, #1
 800cecc:	440b      	add	r3, r1
 800cece:	6123      	str	r3, [r4, #16]
 800ced0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ced2:	f04f 0900 	mov.w	r9, #0
 800ced6:	e7db      	b.n	800ce90 <_printf_float+0x154>
 800ced8:	b913      	cbnz	r3, 800cee0 <_printf_float+0x1a4>
 800ceda:	6822      	ldr	r2, [r4, #0]
 800cedc:	07d2      	lsls	r2, r2, #31
 800cede:	d501      	bpl.n	800cee4 <_printf_float+0x1a8>
 800cee0:	3302      	adds	r3, #2
 800cee2:	e7f4      	b.n	800cece <_printf_float+0x192>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e7f2      	b.n	800cece <_printf_float+0x192>
 800cee8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ceec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceee:	4299      	cmp	r1, r3
 800cef0:	db05      	blt.n	800cefe <_printf_float+0x1c2>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	6121      	str	r1, [r4, #16]
 800cef6:	07d8      	lsls	r0, r3, #31
 800cef8:	d5ea      	bpl.n	800ced0 <_printf_float+0x194>
 800cefa:	1c4b      	adds	r3, r1, #1
 800cefc:	e7e7      	b.n	800cece <_printf_float+0x192>
 800cefe:	2900      	cmp	r1, #0
 800cf00:	bfd4      	ite	le
 800cf02:	f1c1 0202 	rsble	r2, r1, #2
 800cf06:	2201      	movgt	r2, #1
 800cf08:	4413      	add	r3, r2
 800cf0a:	e7e0      	b.n	800cece <_printf_float+0x192>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	055a      	lsls	r2, r3, #21
 800cf10:	d407      	bmi.n	800cf22 <_printf_float+0x1e6>
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	4642      	mov	r2, r8
 800cf16:	4631      	mov	r1, r6
 800cf18:	4628      	mov	r0, r5
 800cf1a:	47b8      	blx	r7
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d12b      	bne.n	800cf78 <_printf_float+0x23c>
 800cf20:	e767      	b.n	800cdf2 <_printf_float+0xb6>
 800cf22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf26:	f240 80dd 	bls.w	800d0e4 <_printf_float+0x3a8>
 800cf2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2300      	movs	r3, #0
 800cf32:	f7f3 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d033      	beq.n	800cfa2 <_printf_float+0x266>
 800cf3a:	4a37      	ldr	r2, [pc, #220]	@ (800d018 <_printf_float+0x2dc>)
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	f43f af54 	beq.w	800cdf2 <_printf_float+0xb6>
 800cf4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf4e:	4543      	cmp	r3, r8
 800cf50:	db02      	blt.n	800cf58 <_printf_float+0x21c>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	07d8      	lsls	r0, r3, #31
 800cf56:	d50f      	bpl.n	800cf78 <_printf_float+0x23c>
 800cf58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	f43f af45 	beq.w	800cdf2 <_printf_float+0xb6>
 800cf68:	f04f 0900 	mov.w	r9, #0
 800cf6c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf70:	f104 0a1a 	add.w	sl, r4, #26
 800cf74:	45c8      	cmp	r8, r9
 800cf76:	dc09      	bgt.n	800cf8c <_printf_float+0x250>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	079b      	lsls	r3, r3, #30
 800cf7c:	f100 8103 	bmi.w	800d186 <_printf_float+0x44a>
 800cf80:	68e0      	ldr	r0, [r4, #12]
 800cf82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf84:	4298      	cmp	r0, r3
 800cf86:	bfb8      	it	lt
 800cf88:	4618      	movlt	r0, r3
 800cf8a:	e734      	b.n	800cdf6 <_printf_float+0xba>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	4652      	mov	r2, sl
 800cf90:	4631      	mov	r1, r6
 800cf92:	4628      	mov	r0, r5
 800cf94:	47b8      	blx	r7
 800cf96:	3001      	adds	r0, #1
 800cf98:	f43f af2b 	beq.w	800cdf2 <_printf_float+0xb6>
 800cf9c:	f109 0901 	add.w	r9, r9, #1
 800cfa0:	e7e8      	b.n	800cf74 <_printf_float+0x238>
 800cfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dc39      	bgt.n	800d01c <_printf_float+0x2e0>
 800cfa8:	4a1b      	ldr	r2, [pc, #108]	@ (800d018 <_printf_float+0x2dc>)
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4631      	mov	r1, r6
 800cfae:	4628      	mov	r0, r5
 800cfb0:	47b8      	blx	r7
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f43f af1d 	beq.w	800cdf2 <_printf_float+0xb6>
 800cfb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfbc:	ea59 0303 	orrs.w	r3, r9, r3
 800cfc0:	d102      	bne.n	800cfc8 <_printf_float+0x28c>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	07d9      	lsls	r1, r3, #31
 800cfc6:	d5d7      	bpl.n	800cf78 <_printf_float+0x23c>
 800cfc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4628      	mov	r0, r5
 800cfd0:	47b8      	blx	r7
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	f43f af0d 	beq.w	800cdf2 <_printf_float+0xb6>
 800cfd8:	f04f 0a00 	mov.w	sl, #0
 800cfdc:	f104 0b1a 	add.w	fp, r4, #26
 800cfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe2:	425b      	negs	r3, r3
 800cfe4:	4553      	cmp	r3, sl
 800cfe6:	dc01      	bgt.n	800cfec <_printf_float+0x2b0>
 800cfe8:	464b      	mov	r3, r9
 800cfea:	e793      	b.n	800cf14 <_printf_float+0x1d8>
 800cfec:	2301      	movs	r3, #1
 800cfee:	465a      	mov	r2, fp
 800cff0:	4631      	mov	r1, r6
 800cff2:	4628      	mov	r0, r5
 800cff4:	47b8      	blx	r7
 800cff6:	3001      	adds	r0, #1
 800cff8:	f43f aefb 	beq.w	800cdf2 <_printf_float+0xb6>
 800cffc:	f10a 0a01 	add.w	sl, sl, #1
 800d000:	e7ee      	b.n	800cfe0 <_printf_float+0x2a4>
 800d002:	bf00      	nop
 800d004:	7fefffff 	.word	0x7fefffff
 800d008:	0801015c 	.word	0x0801015c
 800d00c:	08010158 	.word	0x08010158
 800d010:	08010164 	.word	0x08010164
 800d014:	08010160 	.word	0x08010160
 800d018:	08010168 	.word	0x08010168
 800d01c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d01e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d022:	4553      	cmp	r3, sl
 800d024:	bfa8      	it	ge
 800d026:	4653      	movge	r3, sl
 800d028:	2b00      	cmp	r3, #0
 800d02a:	4699      	mov	r9, r3
 800d02c:	dc36      	bgt.n	800d09c <_printf_float+0x360>
 800d02e:	f04f 0b00 	mov.w	fp, #0
 800d032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d036:	f104 021a 	add.w	r2, r4, #26
 800d03a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d03c:	9306      	str	r3, [sp, #24]
 800d03e:	eba3 0309 	sub.w	r3, r3, r9
 800d042:	455b      	cmp	r3, fp
 800d044:	dc31      	bgt.n	800d0aa <_printf_float+0x36e>
 800d046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d048:	459a      	cmp	sl, r3
 800d04a:	dc3a      	bgt.n	800d0c2 <_printf_float+0x386>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	07da      	lsls	r2, r3, #31
 800d050:	d437      	bmi.n	800d0c2 <_printf_float+0x386>
 800d052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d054:	ebaa 0903 	sub.w	r9, sl, r3
 800d058:	9b06      	ldr	r3, [sp, #24]
 800d05a:	ebaa 0303 	sub.w	r3, sl, r3
 800d05e:	4599      	cmp	r9, r3
 800d060:	bfa8      	it	ge
 800d062:	4699      	movge	r9, r3
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	dc33      	bgt.n	800d0d2 <_printf_float+0x396>
 800d06a:	f04f 0800 	mov.w	r8, #0
 800d06e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d072:	f104 0b1a 	add.w	fp, r4, #26
 800d076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d078:	ebaa 0303 	sub.w	r3, sl, r3
 800d07c:	eba3 0309 	sub.w	r3, r3, r9
 800d080:	4543      	cmp	r3, r8
 800d082:	f77f af79 	ble.w	800cf78 <_printf_float+0x23c>
 800d086:	2301      	movs	r3, #1
 800d088:	465a      	mov	r2, fp
 800d08a:	4631      	mov	r1, r6
 800d08c:	4628      	mov	r0, r5
 800d08e:	47b8      	blx	r7
 800d090:	3001      	adds	r0, #1
 800d092:	f43f aeae 	beq.w	800cdf2 <_printf_float+0xb6>
 800d096:	f108 0801 	add.w	r8, r8, #1
 800d09a:	e7ec      	b.n	800d076 <_printf_float+0x33a>
 800d09c:	4642      	mov	r2, r8
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d1c2      	bne.n	800d02e <_printf_float+0x2f2>
 800d0a8:	e6a3      	b.n	800cdf2 <_printf_float+0xb6>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	9206      	str	r2, [sp, #24]
 800d0b2:	47b8      	blx	r7
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	f43f ae9c 	beq.w	800cdf2 <_printf_float+0xb6>
 800d0ba:	9a06      	ldr	r2, [sp, #24]
 800d0bc:	f10b 0b01 	add.w	fp, fp, #1
 800d0c0:	e7bb      	b.n	800d03a <_printf_float+0x2fe>
 800d0c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b8      	blx	r7
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	d1c0      	bne.n	800d052 <_printf_float+0x316>
 800d0d0:	e68f      	b.n	800cdf2 <_printf_float+0xb6>
 800d0d2:	9a06      	ldr	r2, [sp, #24]
 800d0d4:	464b      	mov	r3, r9
 800d0d6:	4442      	add	r2, r8
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4628      	mov	r0, r5
 800d0dc:	47b8      	blx	r7
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d1c3      	bne.n	800d06a <_printf_float+0x32e>
 800d0e2:	e686      	b.n	800cdf2 <_printf_float+0xb6>
 800d0e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0e8:	f1ba 0f01 	cmp.w	sl, #1
 800d0ec:	dc01      	bgt.n	800d0f2 <_printf_float+0x3b6>
 800d0ee:	07db      	lsls	r3, r3, #31
 800d0f0:	d536      	bpl.n	800d160 <_printf_float+0x424>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	47b8      	blx	r7
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	f43f ae78 	beq.w	800cdf2 <_printf_float+0xb6>
 800d102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d106:	4631      	mov	r1, r6
 800d108:	4628      	mov	r0, r5
 800d10a:	47b8      	blx	r7
 800d10c:	3001      	adds	r0, #1
 800d10e:	f43f ae70 	beq.w	800cdf2 <_printf_float+0xb6>
 800d112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d116:	2200      	movs	r2, #0
 800d118:	2300      	movs	r3, #0
 800d11a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d11e:	f7f3 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d122:	b9c0      	cbnz	r0, 800d156 <_printf_float+0x41a>
 800d124:	4653      	mov	r3, sl
 800d126:	f108 0201 	add.w	r2, r8, #1
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	d10c      	bne.n	800d14e <_printf_float+0x412>
 800d134:	e65d      	b.n	800cdf2 <_printf_float+0xb6>
 800d136:	2301      	movs	r3, #1
 800d138:	465a      	mov	r2, fp
 800d13a:	4631      	mov	r1, r6
 800d13c:	4628      	mov	r0, r5
 800d13e:	47b8      	blx	r7
 800d140:	3001      	adds	r0, #1
 800d142:	f43f ae56 	beq.w	800cdf2 <_printf_float+0xb6>
 800d146:	f108 0801 	add.w	r8, r8, #1
 800d14a:	45d0      	cmp	r8, sl
 800d14c:	dbf3      	blt.n	800d136 <_printf_float+0x3fa>
 800d14e:	464b      	mov	r3, r9
 800d150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d154:	e6df      	b.n	800cf16 <_printf_float+0x1da>
 800d156:	f04f 0800 	mov.w	r8, #0
 800d15a:	f104 0b1a 	add.w	fp, r4, #26
 800d15e:	e7f4      	b.n	800d14a <_printf_float+0x40e>
 800d160:	2301      	movs	r3, #1
 800d162:	4642      	mov	r2, r8
 800d164:	e7e1      	b.n	800d12a <_printf_float+0x3ee>
 800d166:	2301      	movs	r3, #1
 800d168:	464a      	mov	r2, r9
 800d16a:	4631      	mov	r1, r6
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b8      	blx	r7
 800d170:	3001      	adds	r0, #1
 800d172:	f43f ae3e 	beq.w	800cdf2 <_printf_float+0xb6>
 800d176:	f108 0801 	add.w	r8, r8, #1
 800d17a:	68e3      	ldr	r3, [r4, #12]
 800d17c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d17e:	1a5b      	subs	r3, r3, r1
 800d180:	4543      	cmp	r3, r8
 800d182:	dcf0      	bgt.n	800d166 <_printf_float+0x42a>
 800d184:	e6fc      	b.n	800cf80 <_printf_float+0x244>
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	f104 0919 	add.w	r9, r4, #25
 800d18e:	e7f4      	b.n	800d17a <_printf_float+0x43e>

0800d190 <_printf_common>:
 800d190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d194:	4616      	mov	r6, r2
 800d196:	4698      	mov	r8, r3
 800d198:	688a      	ldr	r2, [r1, #8]
 800d19a:	690b      	ldr	r3, [r1, #16]
 800d19c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bfb8      	it	lt
 800d1a4:	4613      	movlt	r3, r2
 800d1a6:	6033      	str	r3, [r6, #0]
 800d1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b10a      	cbz	r2, 800d1b6 <_printf_common+0x26>
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	6033      	str	r3, [r6, #0]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	0699      	lsls	r1, r3, #26
 800d1ba:	bf42      	ittt	mi
 800d1bc:	6833      	ldrmi	r3, [r6, #0]
 800d1be:	3302      	addmi	r3, #2
 800d1c0:	6033      	strmi	r3, [r6, #0]
 800d1c2:	6825      	ldr	r5, [r4, #0]
 800d1c4:	f015 0506 	ands.w	r5, r5, #6
 800d1c8:	d106      	bne.n	800d1d8 <_printf_common+0x48>
 800d1ca:	f104 0a19 	add.w	sl, r4, #25
 800d1ce:	68e3      	ldr	r3, [r4, #12]
 800d1d0:	6832      	ldr	r2, [r6, #0]
 800d1d2:	1a9b      	subs	r3, r3, r2
 800d1d4:	42ab      	cmp	r3, r5
 800d1d6:	dc26      	bgt.n	800d226 <_printf_common+0x96>
 800d1d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1dc:	6822      	ldr	r2, [r4, #0]
 800d1de:	3b00      	subs	r3, #0
 800d1e0:	bf18      	it	ne
 800d1e2:	2301      	movne	r3, #1
 800d1e4:	0692      	lsls	r2, r2, #26
 800d1e6:	d42b      	bmi.n	800d240 <_printf_common+0xb0>
 800d1e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1ec:	4641      	mov	r1, r8
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	47c8      	blx	r9
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	d01e      	beq.n	800d234 <_printf_common+0xa4>
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	6922      	ldr	r2, [r4, #16]
 800d1fa:	f003 0306 	and.w	r3, r3, #6
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	bf02      	ittt	eq
 800d202:	68e5      	ldreq	r5, [r4, #12]
 800d204:	6833      	ldreq	r3, [r6, #0]
 800d206:	1aed      	subeq	r5, r5, r3
 800d208:	68a3      	ldr	r3, [r4, #8]
 800d20a:	bf0c      	ite	eq
 800d20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d210:	2500      	movne	r5, #0
 800d212:	4293      	cmp	r3, r2
 800d214:	bfc4      	itt	gt
 800d216:	1a9b      	subgt	r3, r3, r2
 800d218:	18ed      	addgt	r5, r5, r3
 800d21a:	2600      	movs	r6, #0
 800d21c:	341a      	adds	r4, #26
 800d21e:	42b5      	cmp	r5, r6
 800d220:	d11a      	bne.n	800d258 <_printf_common+0xc8>
 800d222:	2000      	movs	r0, #0
 800d224:	e008      	b.n	800d238 <_printf_common+0xa8>
 800d226:	2301      	movs	r3, #1
 800d228:	4652      	mov	r2, sl
 800d22a:	4641      	mov	r1, r8
 800d22c:	4638      	mov	r0, r7
 800d22e:	47c8      	blx	r9
 800d230:	3001      	adds	r0, #1
 800d232:	d103      	bne.n	800d23c <_printf_common+0xac>
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23c:	3501      	adds	r5, #1
 800d23e:	e7c6      	b.n	800d1ce <_printf_common+0x3e>
 800d240:	18e1      	adds	r1, r4, r3
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	2030      	movs	r0, #48	@ 0x30
 800d246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d24a:	4422      	add	r2, r4
 800d24c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d254:	3302      	adds	r3, #2
 800d256:	e7c7      	b.n	800d1e8 <_printf_common+0x58>
 800d258:	2301      	movs	r3, #1
 800d25a:	4622      	mov	r2, r4
 800d25c:	4641      	mov	r1, r8
 800d25e:	4638      	mov	r0, r7
 800d260:	47c8      	blx	r9
 800d262:	3001      	adds	r0, #1
 800d264:	d0e6      	beq.n	800d234 <_printf_common+0xa4>
 800d266:	3601      	adds	r6, #1
 800d268:	e7d9      	b.n	800d21e <_printf_common+0x8e>
	...

0800d26c <_printf_i>:
 800d26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d270:	7e0f      	ldrb	r7, [r1, #24]
 800d272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d274:	2f78      	cmp	r7, #120	@ 0x78
 800d276:	4691      	mov	r9, r2
 800d278:	4680      	mov	r8, r0
 800d27a:	460c      	mov	r4, r1
 800d27c:	469a      	mov	sl, r3
 800d27e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d282:	d807      	bhi.n	800d294 <_printf_i+0x28>
 800d284:	2f62      	cmp	r7, #98	@ 0x62
 800d286:	d80a      	bhi.n	800d29e <_printf_i+0x32>
 800d288:	2f00      	cmp	r7, #0
 800d28a:	f000 80d1 	beq.w	800d430 <_printf_i+0x1c4>
 800d28e:	2f58      	cmp	r7, #88	@ 0x58
 800d290:	f000 80b8 	beq.w	800d404 <_printf_i+0x198>
 800d294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d29c:	e03a      	b.n	800d314 <_printf_i+0xa8>
 800d29e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2a2:	2b15      	cmp	r3, #21
 800d2a4:	d8f6      	bhi.n	800d294 <_printf_i+0x28>
 800d2a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d2ac <_printf_i+0x40>)
 800d2a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2ac:	0800d305 	.word	0x0800d305
 800d2b0:	0800d319 	.word	0x0800d319
 800d2b4:	0800d295 	.word	0x0800d295
 800d2b8:	0800d295 	.word	0x0800d295
 800d2bc:	0800d295 	.word	0x0800d295
 800d2c0:	0800d295 	.word	0x0800d295
 800d2c4:	0800d319 	.word	0x0800d319
 800d2c8:	0800d295 	.word	0x0800d295
 800d2cc:	0800d295 	.word	0x0800d295
 800d2d0:	0800d295 	.word	0x0800d295
 800d2d4:	0800d295 	.word	0x0800d295
 800d2d8:	0800d417 	.word	0x0800d417
 800d2dc:	0800d343 	.word	0x0800d343
 800d2e0:	0800d3d1 	.word	0x0800d3d1
 800d2e4:	0800d295 	.word	0x0800d295
 800d2e8:	0800d295 	.word	0x0800d295
 800d2ec:	0800d439 	.word	0x0800d439
 800d2f0:	0800d295 	.word	0x0800d295
 800d2f4:	0800d343 	.word	0x0800d343
 800d2f8:	0800d295 	.word	0x0800d295
 800d2fc:	0800d295 	.word	0x0800d295
 800d300:	0800d3d9 	.word	0x0800d3d9
 800d304:	6833      	ldr	r3, [r6, #0]
 800d306:	1d1a      	adds	r2, r3, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6032      	str	r2, [r6, #0]
 800d30c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d314:	2301      	movs	r3, #1
 800d316:	e09c      	b.n	800d452 <_printf_i+0x1e6>
 800d318:	6833      	ldr	r3, [r6, #0]
 800d31a:	6820      	ldr	r0, [r4, #0]
 800d31c:	1d19      	adds	r1, r3, #4
 800d31e:	6031      	str	r1, [r6, #0]
 800d320:	0606      	lsls	r6, r0, #24
 800d322:	d501      	bpl.n	800d328 <_printf_i+0xbc>
 800d324:	681d      	ldr	r5, [r3, #0]
 800d326:	e003      	b.n	800d330 <_printf_i+0xc4>
 800d328:	0645      	lsls	r5, r0, #25
 800d32a:	d5fb      	bpl.n	800d324 <_printf_i+0xb8>
 800d32c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d330:	2d00      	cmp	r5, #0
 800d332:	da03      	bge.n	800d33c <_printf_i+0xd0>
 800d334:	232d      	movs	r3, #45	@ 0x2d
 800d336:	426d      	negs	r5, r5
 800d338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d33c:	4858      	ldr	r0, [pc, #352]	@ (800d4a0 <_printf_i+0x234>)
 800d33e:	230a      	movs	r3, #10
 800d340:	e011      	b.n	800d366 <_printf_i+0xfa>
 800d342:	6821      	ldr	r1, [r4, #0]
 800d344:	6833      	ldr	r3, [r6, #0]
 800d346:	0608      	lsls	r0, r1, #24
 800d348:	f853 5b04 	ldr.w	r5, [r3], #4
 800d34c:	d402      	bmi.n	800d354 <_printf_i+0xe8>
 800d34e:	0649      	lsls	r1, r1, #25
 800d350:	bf48      	it	mi
 800d352:	b2ad      	uxthmi	r5, r5
 800d354:	2f6f      	cmp	r7, #111	@ 0x6f
 800d356:	4852      	ldr	r0, [pc, #328]	@ (800d4a0 <_printf_i+0x234>)
 800d358:	6033      	str	r3, [r6, #0]
 800d35a:	bf14      	ite	ne
 800d35c:	230a      	movne	r3, #10
 800d35e:	2308      	moveq	r3, #8
 800d360:	2100      	movs	r1, #0
 800d362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d366:	6866      	ldr	r6, [r4, #4]
 800d368:	60a6      	str	r6, [r4, #8]
 800d36a:	2e00      	cmp	r6, #0
 800d36c:	db05      	blt.n	800d37a <_printf_i+0x10e>
 800d36e:	6821      	ldr	r1, [r4, #0]
 800d370:	432e      	orrs	r6, r5
 800d372:	f021 0104 	bic.w	r1, r1, #4
 800d376:	6021      	str	r1, [r4, #0]
 800d378:	d04b      	beq.n	800d412 <_printf_i+0x1a6>
 800d37a:	4616      	mov	r6, r2
 800d37c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d380:	fb03 5711 	mls	r7, r3, r1, r5
 800d384:	5dc7      	ldrb	r7, [r0, r7]
 800d386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d38a:	462f      	mov	r7, r5
 800d38c:	42bb      	cmp	r3, r7
 800d38e:	460d      	mov	r5, r1
 800d390:	d9f4      	bls.n	800d37c <_printf_i+0x110>
 800d392:	2b08      	cmp	r3, #8
 800d394:	d10b      	bne.n	800d3ae <_printf_i+0x142>
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	07df      	lsls	r7, r3, #31
 800d39a:	d508      	bpl.n	800d3ae <_printf_i+0x142>
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	6861      	ldr	r1, [r4, #4]
 800d3a0:	4299      	cmp	r1, r3
 800d3a2:	bfde      	ittt	le
 800d3a4:	2330      	movle	r3, #48	@ 0x30
 800d3a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3ae:	1b92      	subs	r2, r2, r6
 800d3b0:	6122      	str	r2, [r4, #16]
 800d3b2:	f8cd a000 	str.w	sl, [sp]
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	aa03      	add	r2, sp, #12
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4640      	mov	r0, r8
 800d3be:	f7ff fee7 	bl	800d190 <_printf_common>
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	d14a      	bne.n	800d45c <_printf_i+0x1f0>
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	b004      	add	sp, #16
 800d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	f043 0320 	orr.w	r3, r3, #32
 800d3d6:	6023      	str	r3, [r4, #0]
 800d3d8:	4832      	ldr	r0, [pc, #200]	@ (800d4a4 <_printf_i+0x238>)
 800d3da:	2778      	movs	r7, #120	@ 0x78
 800d3dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	6831      	ldr	r1, [r6, #0]
 800d3e4:	061f      	lsls	r7, r3, #24
 800d3e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3ea:	d402      	bmi.n	800d3f2 <_printf_i+0x186>
 800d3ec:	065f      	lsls	r7, r3, #25
 800d3ee:	bf48      	it	mi
 800d3f0:	b2ad      	uxthmi	r5, r5
 800d3f2:	6031      	str	r1, [r6, #0]
 800d3f4:	07d9      	lsls	r1, r3, #31
 800d3f6:	bf44      	itt	mi
 800d3f8:	f043 0320 	orrmi.w	r3, r3, #32
 800d3fc:	6023      	strmi	r3, [r4, #0]
 800d3fe:	b11d      	cbz	r5, 800d408 <_printf_i+0x19c>
 800d400:	2310      	movs	r3, #16
 800d402:	e7ad      	b.n	800d360 <_printf_i+0xf4>
 800d404:	4826      	ldr	r0, [pc, #152]	@ (800d4a0 <_printf_i+0x234>)
 800d406:	e7e9      	b.n	800d3dc <_printf_i+0x170>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	f023 0320 	bic.w	r3, r3, #32
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	e7f6      	b.n	800d400 <_printf_i+0x194>
 800d412:	4616      	mov	r6, r2
 800d414:	e7bd      	b.n	800d392 <_printf_i+0x126>
 800d416:	6833      	ldr	r3, [r6, #0]
 800d418:	6825      	ldr	r5, [r4, #0]
 800d41a:	6961      	ldr	r1, [r4, #20]
 800d41c:	1d18      	adds	r0, r3, #4
 800d41e:	6030      	str	r0, [r6, #0]
 800d420:	062e      	lsls	r6, r5, #24
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	d501      	bpl.n	800d42a <_printf_i+0x1be>
 800d426:	6019      	str	r1, [r3, #0]
 800d428:	e002      	b.n	800d430 <_printf_i+0x1c4>
 800d42a:	0668      	lsls	r0, r5, #25
 800d42c:	d5fb      	bpl.n	800d426 <_printf_i+0x1ba>
 800d42e:	8019      	strh	r1, [r3, #0]
 800d430:	2300      	movs	r3, #0
 800d432:	6123      	str	r3, [r4, #16]
 800d434:	4616      	mov	r6, r2
 800d436:	e7bc      	b.n	800d3b2 <_printf_i+0x146>
 800d438:	6833      	ldr	r3, [r6, #0]
 800d43a:	1d1a      	adds	r2, r3, #4
 800d43c:	6032      	str	r2, [r6, #0]
 800d43e:	681e      	ldr	r6, [r3, #0]
 800d440:	6862      	ldr	r2, [r4, #4]
 800d442:	2100      	movs	r1, #0
 800d444:	4630      	mov	r0, r6
 800d446:	f7f2 fec3 	bl	80001d0 <memchr>
 800d44a:	b108      	cbz	r0, 800d450 <_printf_i+0x1e4>
 800d44c:	1b80      	subs	r0, r0, r6
 800d44e:	6060      	str	r0, [r4, #4]
 800d450:	6863      	ldr	r3, [r4, #4]
 800d452:	6123      	str	r3, [r4, #16]
 800d454:	2300      	movs	r3, #0
 800d456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d45a:	e7aa      	b.n	800d3b2 <_printf_i+0x146>
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	4632      	mov	r2, r6
 800d460:	4649      	mov	r1, r9
 800d462:	4640      	mov	r0, r8
 800d464:	47d0      	blx	sl
 800d466:	3001      	adds	r0, #1
 800d468:	d0ad      	beq.n	800d3c6 <_printf_i+0x15a>
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	079b      	lsls	r3, r3, #30
 800d46e:	d413      	bmi.n	800d498 <_printf_i+0x22c>
 800d470:	68e0      	ldr	r0, [r4, #12]
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	4298      	cmp	r0, r3
 800d476:	bfb8      	it	lt
 800d478:	4618      	movlt	r0, r3
 800d47a:	e7a6      	b.n	800d3ca <_printf_i+0x15e>
 800d47c:	2301      	movs	r3, #1
 800d47e:	4632      	mov	r2, r6
 800d480:	4649      	mov	r1, r9
 800d482:	4640      	mov	r0, r8
 800d484:	47d0      	blx	sl
 800d486:	3001      	adds	r0, #1
 800d488:	d09d      	beq.n	800d3c6 <_printf_i+0x15a>
 800d48a:	3501      	adds	r5, #1
 800d48c:	68e3      	ldr	r3, [r4, #12]
 800d48e:	9903      	ldr	r1, [sp, #12]
 800d490:	1a5b      	subs	r3, r3, r1
 800d492:	42ab      	cmp	r3, r5
 800d494:	dcf2      	bgt.n	800d47c <_printf_i+0x210>
 800d496:	e7eb      	b.n	800d470 <_printf_i+0x204>
 800d498:	2500      	movs	r5, #0
 800d49a:	f104 0619 	add.w	r6, r4, #25
 800d49e:	e7f5      	b.n	800d48c <_printf_i+0x220>
 800d4a0:	0801016a 	.word	0x0801016a
 800d4a4:	0801017b 	.word	0x0801017b

0800d4a8 <std>:
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	b510      	push	{r4, lr}
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4b6:	6083      	str	r3, [r0, #8]
 800d4b8:	8181      	strh	r1, [r0, #12]
 800d4ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4bc:	81c2      	strh	r2, [r0, #14]
 800d4be:	6183      	str	r3, [r0, #24]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	2208      	movs	r2, #8
 800d4c4:	305c      	adds	r0, #92	@ 0x5c
 800d4c6:	f000 fa01 	bl	800d8cc <memset>
 800d4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d500 <std+0x58>)
 800d4cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <std+0x5c>)
 800d4d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d508 <std+0x60>)
 800d4d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d50c <std+0x64>)
 800d4d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d4da:	4b0d      	ldr	r3, [pc, #52]	@ (800d510 <std+0x68>)
 800d4dc:	6224      	str	r4, [r4, #32]
 800d4de:	429c      	cmp	r4, r3
 800d4e0:	d006      	beq.n	800d4f0 <std+0x48>
 800d4e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d4e6:	4294      	cmp	r4, r2
 800d4e8:	d002      	beq.n	800d4f0 <std+0x48>
 800d4ea:	33d0      	adds	r3, #208	@ 0xd0
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	d105      	bne.n	800d4fc <std+0x54>
 800d4f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f8:	f000 ba74 	b.w	800d9e4 <__retarget_lock_init_recursive>
 800d4fc:	bd10      	pop	{r4, pc}
 800d4fe:	bf00      	nop
 800d500:	0800d71d 	.word	0x0800d71d
 800d504:	0800d73f 	.word	0x0800d73f
 800d508:	0800d777 	.word	0x0800d777
 800d50c:	0800d79b 	.word	0x0800d79b
 800d510:	200023b4 	.word	0x200023b4

0800d514 <stdio_exit_handler>:
 800d514:	4a02      	ldr	r2, [pc, #8]	@ (800d520 <stdio_exit_handler+0xc>)
 800d516:	4903      	ldr	r1, [pc, #12]	@ (800d524 <stdio_exit_handler+0x10>)
 800d518:	4803      	ldr	r0, [pc, #12]	@ (800d528 <stdio_exit_handler+0x14>)
 800d51a:	f000 b869 	b.w	800d5f0 <_fwalk_sglue>
 800d51e:	bf00      	nop
 800d520:	20000124 	.word	0x20000124
 800d524:	0800f1cd 	.word	0x0800f1cd
 800d528:	20000134 	.word	0x20000134

0800d52c <cleanup_stdio>:
 800d52c:	6841      	ldr	r1, [r0, #4]
 800d52e:	4b0c      	ldr	r3, [pc, #48]	@ (800d560 <cleanup_stdio+0x34>)
 800d530:	4299      	cmp	r1, r3
 800d532:	b510      	push	{r4, lr}
 800d534:	4604      	mov	r4, r0
 800d536:	d001      	beq.n	800d53c <cleanup_stdio+0x10>
 800d538:	f001 fe48 	bl	800f1cc <_fflush_r>
 800d53c:	68a1      	ldr	r1, [r4, #8]
 800d53e:	4b09      	ldr	r3, [pc, #36]	@ (800d564 <cleanup_stdio+0x38>)
 800d540:	4299      	cmp	r1, r3
 800d542:	d002      	beq.n	800d54a <cleanup_stdio+0x1e>
 800d544:	4620      	mov	r0, r4
 800d546:	f001 fe41 	bl	800f1cc <_fflush_r>
 800d54a:	68e1      	ldr	r1, [r4, #12]
 800d54c:	4b06      	ldr	r3, [pc, #24]	@ (800d568 <cleanup_stdio+0x3c>)
 800d54e:	4299      	cmp	r1, r3
 800d550:	d004      	beq.n	800d55c <cleanup_stdio+0x30>
 800d552:	4620      	mov	r0, r4
 800d554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d558:	f001 be38 	b.w	800f1cc <_fflush_r>
 800d55c:	bd10      	pop	{r4, pc}
 800d55e:	bf00      	nop
 800d560:	200023b4 	.word	0x200023b4
 800d564:	2000241c 	.word	0x2000241c
 800d568:	20002484 	.word	0x20002484

0800d56c <global_stdio_init.part.0>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	4b0b      	ldr	r3, [pc, #44]	@ (800d59c <global_stdio_init.part.0+0x30>)
 800d570:	4c0b      	ldr	r4, [pc, #44]	@ (800d5a0 <global_stdio_init.part.0+0x34>)
 800d572:	4a0c      	ldr	r2, [pc, #48]	@ (800d5a4 <global_stdio_init.part.0+0x38>)
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	4620      	mov	r0, r4
 800d578:	2200      	movs	r2, #0
 800d57a:	2104      	movs	r1, #4
 800d57c:	f7ff ff94 	bl	800d4a8 <std>
 800d580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d584:	2201      	movs	r2, #1
 800d586:	2109      	movs	r1, #9
 800d588:	f7ff ff8e 	bl	800d4a8 <std>
 800d58c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d590:	2202      	movs	r2, #2
 800d592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d596:	2112      	movs	r1, #18
 800d598:	f7ff bf86 	b.w	800d4a8 <std>
 800d59c:	200024ec 	.word	0x200024ec
 800d5a0:	200023b4 	.word	0x200023b4
 800d5a4:	0800d515 	.word	0x0800d515

0800d5a8 <__sfp_lock_acquire>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	@ (800d5b0 <__sfp_lock_acquire+0x8>)
 800d5aa:	f000 ba1c 	b.w	800d9e6 <__retarget_lock_acquire_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	200024f5 	.word	0x200024f5

0800d5b4 <__sfp_lock_release>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	@ (800d5bc <__sfp_lock_release+0x8>)
 800d5b6:	f000 ba17 	b.w	800d9e8 <__retarget_lock_release_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	200024f5 	.word	0x200024f5

0800d5c0 <__sinit>:
 800d5c0:	b510      	push	{r4, lr}
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	f7ff fff0 	bl	800d5a8 <__sfp_lock_acquire>
 800d5c8:	6a23      	ldr	r3, [r4, #32]
 800d5ca:	b11b      	cbz	r3, 800d5d4 <__sinit+0x14>
 800d5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d0:	f7ff bff0 	b.w	800d5b4 <__sfp_lock_release>
 800d5d4:	4b04      	ldr	r3, [pc, #16]	@ (800d5e8 <__sinit+0x28>)
 800d5d6:	6223      	str	r3, [r4, #32]
 800d5d8:	4b04      	ldr	r3, [pc, #16]	@ (800d5ec <__sinit+0x2c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1f5      	bne.n	800d5cc <__sinit+0xc>
 800d5e0:	f7ff ffc4 	bl	800d56c <global_stdio_init.part.0>
 800d5e4:	e7f2      	b.n	800d5cc <__sinit+0xc>
 800d5e6:	bf00      	nop
 800d5e8:	0800d52d 	.word	0x0800d52d
 800d5ec:	200024ec 	.word	0x200024ec

0800d5f0 <_fwalk_sglue>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	4688      	mov	r8, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	2600      	movs	r6, #0
 800d5fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d600:	f1b9 0901 	subs.w	r9, r9, #1
 800d604:	d505      	bpl.n	800d612 <_fwalk_sglue+0x22>
 800d606:	6824      	ldr	r4, [r4, #0]
 800d608:	2c00      	cmp	r4, #0
 800d60a:	d1f7      	bne.n	800d5fc <_fwalk_sglue+0xc>
 800d60c:	4630      	mov	r0, r6
 800d60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d612:	89ab      	ldrh	r3, [r5, #12]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d907      	bls.n	800d628 <_fwalk_sglue+0x38>
 800d618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d61c:	3301      	adds	r3, #1
 800d61e:	d003      	beq.n	800d628 <_fwalk_sglue+0x38>
 800d620:	4629      	mov	r1, r5
 800d622:	4638      	mov	r0, r7
 800d624:	47c0      	blx	r8
 800d626:	4306      	orrs	r6, r0
 800d628:	3568      	adds	r5, #104	@ 0x68
 800d62a:	e7e9      	b.n	800d600 <_fwalk_sglue+0x10>

0800d62c <iprintf>:
 800d62c:	b40f      	push	{r0, r1, r2, r3}
 800d62e:	b507      	push	{r0, r1, r2, lr}
 800d630:	4906      	ldr	r1, [pc, #24]	@ (800d64c <iprintf+0x20>)
 800d632:	ab04      	add	r3, sp, #16
 800d634:	6808      	ldr	r0, [r1, #0]
 800d636:	f853 2b04 	ldr.w	r2, [r3], #4
 800d63a:	6881      	ldr	r1, [r0, #8]
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	f001 fc29 	bl	800ee94 <_vfiprintf_r>
 800d642:	b003      	add	sp, #12
 800d644:	f85d eb04 	ldr.w	lr, [sp], #4
 800d648:	b004      	add	sp, #16
 800d64a:	4770      	bx	lr
 800d64c:	20000130 	.word	0x20000130

0800d650 <putchar>:
 800d650:	4b02      	ldr	r3, [pc, #8]	@ (800d65c <putchar+0xc>)
 800d652:	4601      	mov	r1, r0
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	6882      	ldr	r2, [r0, #8]
 800d658:	f001 be42 	b.w	800f2e0 <_putc_r>
 800d65c:	20000130 	.word	0x20000130

0800d660 <_puts_r>:
 800d660:	6a03      	ldr	r3, [r0, #32]
 800d662:	b570      	push	{r4, r5, r6, lr}
 800d664:	6884      	ldr	r4, [r0, #8]
 800d666:	4605      	mov	r5, r0
 800d668:	460e      	mov	r6, r1
 800d66a:	b90b      	cbnz	r3, 800d670 <_puts_r+0x10>
 800d66c:	f7ff ffa8 	bl	800d5c0 <__sinit>
 800d670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d672:	07db      	lsls	r3, r3, #31
 800d674:	d405      	bmi.n	800d682 <_puts_r+0x22>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	0598      	lsls	r0, r3, #22
 800d67a:	d402      	bmi.n	800d682 <_puts_r+0x22>
 800d67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d67e:	f000 f9b2 	bl	800d9e6 <__retarget_lock_acquire_recursive>
 800d682:	89a3      	ldrh	r3, [r4, #12]
 800d684:	0719      	lsls	r1, r3, #28
 800d686:	d502      	bpl.n	800d68e <_puts_r+0x2e>
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d135      	bne.n	800d6fa <_puts_r+0x9a>
 800d68e:	4621      	mov	r1, r4
 800d690:	4628      	mov	r0, r5
 800d692:	f000 f8c5 	bl	800d820 <__swsetup_r>
 800d696:	b380      	cbz	r0, 800d6fa <_puts_r+0x9a>
 800d698:	f04f 35ff 	mov.w	r5, #4294967295
 800d69c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d69e:	07da      	lsls	r2, r3, #31
 800d6a0:	d405      	bmi.n	800d6ae <_puts_r+0x4e>
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	059b      	lsls	r3, r3, #22
 800d6a6:	d402      	bmi.n	800d6ae <_puts_r+0x4e>
 800d6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6aa:	f000 f99d 	bl	800d9e8 <__retarget_lock_release_recursive>
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	bd70      	pop	{r4, r5, r6, pc}
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	da04      	bge.n	800d6c0 <_puts_r+0x60>
 800d6b6:	69a2      	ldr	r2, [r4, #24]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	dc17      	bgt.n	800d6ec <_puts_r+0x8c>
 800d6bc:	290a      	cmp	r1, #10
 800d6be:	d015      	beq.n	800d6ec <_puts_r+0x8c>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	6022      	str	r2, [r4, #0]
 800d6c6:	7019      	strb	r1, [r3, #0]
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	60a3      	str	r3, [r4, #8]
 800d6d2:	2900      	cmp	r1, #0
 800d6d4:	d1ed      	bne.n	800d6b2 <_puts_r+0x52>
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da11      	bge.n	800d6fe <_puts_r+0x9e>
 800d6da:	4622      	mov	r2, r4
 800d6dc:	210a      	movs	r1, #10
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f000 f85f 	bl	800d7a2 <__swbuf_r>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d0d7      	beq.n	800d698 <_puts_r+0x38>
 800d6e8:	250a      	movs	r5, #10
 800d6ea:	e7d7      	b.n	800d69c <_puts_r+0x3c>
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f000 f857 	bl	800d7a2 <__swbuf_r>
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d1e7      	bne.n	800d6c8 <_puts_r+0x68>
 800d6f8:	e7ce      	b.n	800d698 <_puts_r+0x38>
 800d6fa:	3e01      	subs	r6, #1
 800d6fc:	e7e4      	b.n	800d6c8 <_puts_r+0x68>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	6022      	str	r2, [r4, #0]
 800d704:	220a      	movs	r2, #10
 800d706:	701a      	strb	r2, [r3, #0]
 800d708:	e7ee      	b.n	800d6e8 <_puts_r+0x88>
	...

0800d70c <puts>:
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <puts+0xc>)
 800d70e:	4601      	mov	r1, r0
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f7ff bfa5 	b.w	800d660 <_puts_r>
 800d716:	bf00      	nop
 800d718:	20000130 	.word	0x20000130

0800d71c <__sread>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	460c      	mov	r4, r1
 800d720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d724:	f000 f900 	bl	800d928 <_read_r>
 800d728:	2800      	cmp	r0, #0
 800d72a:	bfab      	itete	ge
 800d72c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d72e:	89a3      	ldrhlt	r3, [r4, #12]
 800d730:	181b      	addge	r3, r3, r0
 800d732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d736:	bfac      	ite	ge
 800d738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d73a:	81a3      	strhlt	r3, [r4, #12]
 800d73c:	bd10      	pop	{r4, pc}

0800d73e <__swrite>:
 800d73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d742:	461f      	mov	r7, r3
 800d744:	898b      	ldrh	r3, [r1, #12]
 800d746:	05db      	lsls	r3, r3, #23
 800d748:	4605      	mov	r5, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	4616      	mov	r6, r2
 800d74e:	d505      	bpl.n	800d75c <__swrite+0x1e>
 800d750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d754:	2302      	movs	r3, #2
 800d756:	2200      	movs	r2, #0
 800d758:	f000 f8d4 	bl	800d904 <_lseek_r>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	4632      	mov	r2, r6
 800d76a:	463b      	mov	r3, r7
 800d76c:	4628      	mov	r0, r5
 800d76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d772:	f000 b8fb 	b.w	800d96c <_write_r>

0800d776 <__sseek>:
 800d776:	b510      	push	{r4, lr}
 800d778:	460c      	mov	r4, r1
 800d77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d77e:	f000 f8c1 	bl	800d904 <_lseek_r>
 800d782:	1c43      	adds	r3, r0, #1
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	bf15      	itete	ne
 800d788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d78a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d78e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d792:	81a3      	strheq	r3, [r4, #12]
 800d794:	bf18      	it	ne
 800d796:	81a3      	strhne	r3, [r4, #12]
 800d798:	bd10      	pop	{r4, pc}

0800d79a <__sclose>:
 800d79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d79e:	f000 b8a1 	b.w	800d8e4 <_close_r>

0800d7a2 <__swbuf_r>:
 800d7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a4:	460e      	mov	r6, r1
 800d7a6:	4614      	mov	r4, r2
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	b118      	cbz	r0, 800d7b4 <__swbuf_r+0x12>
 800d7ac:	6a03      	ldr	r3, [r0, #32]
 800d7ae:	b90b      	cbnz	r3, 800d7b4 <__swbuf_r+0x12>
 800d7b0:	f7ff ff06 	bl	800d5c0 <__sinit>
 800d7b4:	69a3      	ldr	r3, [r4, #24]
 800d7b6:	60a3      	str	r3, [r4, #8]
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	071a      	lsls	r2, r3, #28
 800d7bc:	d501      	bpl.n	800d7c2 <__swbuf_r+0x20>
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	b943      	cbnz	r3, 800d7d4 <__swbuf_r+0x32>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f000 f82b 	bl	800d820 <__swsetup_r>
 800d7ca:	b118      	cbz	r0, 800d7d4 <__swbuf_r+0x32>
 800d7cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	6922      	ldr	r2, [r4, #16]
 800d7d8:	1a98      	subs	r0, r3, r2
 800d7da:	6963      	ldr	r3, [r4, #20]
 800d7dc:	b2f6      	uxtb	r6, r6
 800d7de:	4283      	cmp	r3, r0
 800d7e0:	4637      	mov	r7, r6
 800d7e2:	dc05      	bgt.n	800d7f0 <__swbuf_r+0x4e>
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f001 fcf0 	bl	800f1cc <_fflush_r>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d1ed      	bne.n	800d7cc <__swbuf_r+0x2a>
 800d7f0:	68a3      	ldr	r3, [r4, #8]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	60a3      	str	r3, [r4, #8]
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	6022      	str	r2, [r4, #0]
 800d7fc:	701e      	strb	r6, [r3, #0]
 800d7fe:	6962      	ldr	r2, [r4, #20]
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	429a      	cmp	r2, r3
 800d804:	d004      	beq.n	800d810 <__swbuf_r+0x6e>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	07db      	lsls	r3, r3, #31
 800d80a:	d5e1      	bpl.n	800d7d0 <__swbuf_r+0x2e>
 800d80c:	2e0a      	cmp	r6, #10
 800d80e:	d1df      	bne.n	800d7d0 <__swbuf_r+0x2e>
 800d810:	4621      	mov	r1, r4
 800d812:	4628      	mov	r0, r5
 800d814:	f001 fcda 	bl	800f1cc <_fflush_r>
 800d818:	2800      	cmp	r0, #0
 800d81a:	d0d9      	beq.n	800d7d0 <__swbuf_r+0x2e>
 800d81c:	e7d6      	b.n	800d7cc <__swbuf_r+0x2a>
	...

0800d820 <__swsetup_r>:
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	4b29      	ldr	r3, [pc, #164]	@ (800d8c8 <__swsetup_r+0xa8>)
 800d824:	4605      	mov	r5, r0
 800d826:	6818      	ldr	r0, [r3, #0]
 800d828:	460c      	mov	r4, r1
 800d82a:	b118      	cbz	r0, 800d834 <__swsetup_r+0x14>
 800d82c:	6a03      	ldr	r3, [r0, #32]
 800d82e:	b90b      	cbnz	r3, 800d834 <__swsetup_r+0x14>
 800d830:	f7ff fec6 	bl	800d5c0 <__sinit>
 800d834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d838:	0719      	lsls	r1, r3, #28
 800d83a:	d422      	bmi.n	800d882 <__swsetup_r+0x62>
 800d83c:	06da      	lsls	r2, r3, #27
 800d83e:	d407      	bmi.n	800d850 <__swsetup_r+0x30>
 800d840:	2209      	movs	r2, #9
 800d842:	602a      	str	r2, [r5, #0]
 800d844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d848:	81a3      	strh	r3, [r4, #12]
 800d84a:	f04f 30ff 	mov.w	r0, #4294967295
 800d84e:	e033      	b.n	800d8b8 <__swsetup_r+0x98>
 800d850:	0758      	lsls	r0, r3, #29
 800d852:	d512      	bpl.n	800d87a <__swsetup_r+0x5a>
 800d854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d856:	b141      	cbz	r1, 800d86a <__swsetup_r+0x4a>
 800d858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d85c:	4299      	cmp	r1, r3
 800d85e:	d002      	beq.n	800d866 <__swsetup_r+0x46>
 800d860:	4628      	mov	r0, r5
 800d862:	f000 ff29 	bl	800e6b8 <_free_r>
 800d866:	2300      	movs	r3, #0
 800d868:	6363      	str	r3, [r4, #52]	@ 0x34
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d870:	81a3      	strh	r3, [r4, #12]
 800d872:	2300      	movs	r3, #0
 800d874:	6063      	str	r3, [r4, #4]
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f043 0308 	orr.w	r3, r3, #8
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	6923      	ldr	r3, [r4, #16]
 800d884:	b94b      	cbnz	r3, 800d89a <__swsetup_r+0x7a>
 800d886:	89a3      	ldrh	r3, [r4, #12]
 800d888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d88c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d890:	d003      	beq.n	800d89a <__swsetup_r+0x7a>
 800d892:	4621      	mov	r1, r4
 800d894:	4628      	mov	r0, r5
 800d896:	f001 fce7 	bl	800f268 <__smakebuf_r>
 800d89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d89e:	f013 0201 	ands.w	r2, r3, #1
 800d8a2:	d00a      	beq.n	800d8ba <__swsetup_r+0x9a>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	60a2      	str	r2, [r4, #8]
 800d8a8:	6962      	ldr	r2, [r4, #20]
 800d8aa:	4252      	negs	r2, r2
 800d8ac:	61a2      	str	r2, [r4, #24]
 800d8ae:	6922      	ldr	r2, [r4, #16]
 800d8b0:	b942      	cbnz	r2, 800d8c4 <__swsetup_r+0xa4>
 800d8b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8b6:	d1c5      	bne.n	800d844 <__swsetup_r+0x24>
 800d8b8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ba:	0799      	lsls	r1, r3, #30
 800d8bc:	bf58      	it	pl
 800d8be:	6962      	ldrpl	r2, [r4, #20]
 800d8c0:	60a2      	str	r2, [r4, #8]
 800d8c2:	e7f4      	b.n	800d8ae <__swsetup_r+0x8e>
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e7f7      	b.n	800d8b8 <__swsetup_r+0x98>
 800d8c8:	20000130 	.word	0x20000130

0800d8cc <memset>:
 800d8cc:	4402      	add	r2, r0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d100      	bne.n	800d8d6 <memset+0xa>
 800d8d4:	4770      	bx	lr
 800d8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8da:	e7f9      	b.n	800d8d0 <memset+0x4>

0800d8dc <_localeconv_r>:
 800d8dc:	4800      	ldr	r0, [pc, #0]	@ (800d8e0 <_localeconv_r+0x4>)
 800d8de:	4770      	bx	lr
 800d8e0:	20000270 	.word	0x20000270

0800d8e4 <_close_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d06      	ldr	r5, [pc, #24]	@ (800d900 <_close_r+0x1c>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	602b      	str	r3, [r5, #0]
 800d8f0:	f7f6 fcac 	bl	800424c <_close>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	d102      	bne.n	800d8fe <_close_r+0x1a>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	b103      	cbz	r3, 800d8fe <_close_r+0x1a>
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	200024f0 	.word	0x200024f0

0800d904 <_lseek_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4d07      	ldr	r5, [pc, #28]	@ (800d924 <_lseek_r+0x20>)
 800d908:	4604      	mov	r4, r0
 800d90a:	4608      	mov	r0, r1
 800d90c:	4611      	mov	r1, r2
 800d90e:	2200      	movs	r2, #0
 800d910:	602a      	str	r2, [r5, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	f7f6 fcc1 	bl	800429a <_lseek>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_lseek_r+0x1e>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_lseek_r+0x1e>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	200024f0 	.word	0x200024f0

0800d928 <_read_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	@ (800d948 <_read_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f6 fc6b 	bl	8004212 <_read>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_read_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_read_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	200024f0 	.word	0x200024f0

0800d94c <_sbrk_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d06      	ldr	r5, [pc, #24]	@ (800d968 <_sbrk_r+0x1c>)
 800d950:	2300      	movs	r3, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f6 fcac 	bl	80042b4 <_sbrk>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_sbrk_r+0x1a>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_sbrk_r+0x1a>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	200024f0 	.word	0x200024f0

0800d96c <_write_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d07      	ldr	r5, [pc, #28]	@ (800d98c <_write_r+0x20>)
 800d970:	4604      	mov	r4, r0
 800d972:	4608      	mov	r0, r1
 800d974:	4611      	mov	r1, r2
 800d976:	2200      	movs	r2, #0
 800d978:	602a      	str	r2, [r5, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f7f5 fe9b 	bl	80036b6 <_write>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_write_r+0x1e>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_write_r+0x1e>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	200024f0 	.word	0x200024f0

0800d990 <__errno>:
 800d990:	4b01      	ldr	r3, [pc, #4]	@ (800d998 <__errno+0x8>)
 800d992:	6818      	ldr	r0, [r3, #0]
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	20000130 	.word	0x20000130

0800d99c <__libc_init_array>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	4d0d      	ldr	r5, [pc, #52]	@ (800d9d4 <__libc_init_array+0x38>)
 800d9a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d9d8 <__libc_init_array+0x3c>)
 800d9a2:	1b64      	subs	r4, r4, r5
 800d9a4:	10a4      	asrs	r4, r4, #2
 800d9a6:	2600      	movs	r6, #0
 800d9a8:	42a6      	cmp	r6, r4
 800d9aa:	d109      	bne.n	800d9c0 <__libc_init_array+0x24>
 800d9ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d9dc <__libc_init_array+0x40>)
 800d9ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d9e0 <__libc_init_array+0x44>)
 800d9b0:	f002 f9aa 	bl	800fd08 <_init>
 800d9b4:	1b64      	subs	r4, r4, r5
 800d9b6:	10a4      	asrs	r4, r4, #2
 800d9b8:	2600      	movs	r6, #0
 800d9ba:	42a6      	cmp	r6, r4
 800d9bc:	d105      	bne.n	800d9ca <__libc_init_array+0x2e>
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9c4:	4798      	blx	r3
 800d9c6:	3601      	adds	r6, #1
 800d9c8:	e7ee      	b.n	800d9a8 <__libc_init_array+0xc>
 800d9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ce:	4798      	blx	r3
 800d9d0:	3601      	adds	r6, #1
 800d9d2:	e7f2      	b.n	800d9ba <__libc_init_array+0x1e>
 800d9d4:	08010508 	.word	0x08010508
 800d9d8:	08010508 	.word	0x08010508
 800d9dc:	08010508 	.word	0x08010508
 800d9e0:	0801050c 	.word	0x0801050c

0800d9e4 <__retarget_lock_init_recursive>:
 800d9e4:	4770      	bx	lr

0800d9e6 <__retarget_lock_acquire_recursive>:
 800d9e6:	4770      	bx	lr

0800d9e8 <__retarget_lock_release_recursive>:
 800d9e8:	4770      	bx	lr

0800d9ea <memcpy>:
 800d9ea:	440a      	add	r2, r1
 800d9ec:	4291      	cmp	r1, r2
 800d9ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9f2:	d100      	bne.n	800d9f6 <memcpy+0xc>
 800d9f4:	4770      	bx	lr
 800d9f6:	b510      	push	{r4, lr}
 800d9f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da00:	4291      	cmp	r1, r2
 800da02:	d1f9      	bne.n	800d9f8 <memcpy+0xe>
 800da04:	bd10      	pop	{r4, pc}

0800da06 <quorem>:
 800da06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0a:	6903      	ldr	r3, [r0, #16]
 800da0c:	690c      	ldr	r4, [r1, #16]
 800da0e:	42a3      	cmp	r3, r4
 800da10:	4607      	mov	r7, r0
 800da12:	db7e      	blt.n	800db12 <quorem+0x10c>
 800da14:	3c01      	subs	r4, #1
 800da16:	f101 0814 	add.w	r8, r1, #20
 800da1a:	00a3      	lsls	r3, r4, #2
 800da1c:	f100 0514 	add.w	r5, r0, #20
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da30:	3301      	adds	r3, #1
 800da32:	429a      	cmp	r2, r3
 800da34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da38:	fbb2 f6f3 	udiv	r6, r2, r3
 800da3c:	d32e      	bcc.n	800da9c <quorem+0x96>
 800da3e:	f04f 0a00 	mov.w	sl, #0
 800da42:	46c4      	mov	ip, r8
 800da44:	46ae      	mov	lr, r5
 800da46:	46d3      	mov	fp, sl
 800da48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da4c:	b298      	uxth	r0, r3
 800da4e:	fb06 a000 	mla	r0, r6, r0, sl
 800da52:	0c02      	lsrs	r2, r0, #16
 800da54:	0c1b      	lsrs	r3, r3, #16
 800da56:	fb06 2303 	mla	r3, r6, r3, r2
 800da5a:	f8de 2000 	ldr.w	r2, [lr]
 800da5e:	b280      	uxth	r0, r0
 800da60:	b292      	uxth	r2, r2
 800da62:	1a12      	subs	r2, r2, r0
 800da64:	445a      	add	r2, fp
 800da66:	f8de 0000 	ldr.w	r0, [lr]
 800da6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da6e:	b29b      	uxth	r3, r3
 800da70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800da74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800da78:	b292      	uxth	r2, r2
 800da7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800da7e:	45e1      	cmp	r9, ip
 800da80:	f84e 2b04 	str.w	r2, [lr], #4
 800da84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800da88:	d2de      	bcs.n	800da48 <quorem+0x42>
 800da8a:	9b00      	ldr	r3, [sp, #0]
 800da8c:	58eb      	ldr	r3, [r5, r3]
 800da8e:	b92b      	cbnz	r3, 800da9c <quorem+0x96>
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	3b04      	subs	r3, #4
 800da94:	429d      	cmp	r5, r3
 800da96:	461a      	mov	r2, r3
 800da98:	d32f      	bcc.n	800dafa <quorem+0xf4>
 800da9a:	613c      	str	r4, [r7, #16]
 800da9c:	4638      	mov	r0, r7
 800da9e:	f001 f8c7 	bl	800ec30 <__mcmp>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	db25      	blt.n	800daf2 <quorem+0xec>
 800daa6:	4629      	mov	r1, r5
 800daa8:	2000      	movs	r0, #0
 800daaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800daae:	f8d1 c000 	ldr.w	ip, [r1]
 800dab2:	fa1f fe82 	uxth.w	lr, r2
 800dab6:	fa1f f38c 	uxth.w	r3, ip
 800daba:	eba3 030e 	sub.w	r3, r3, lr
 800dabe:	4403      	add	r3, r0
 800dac0:	0c12      	lsrs	r2, r2, #16
 800dac2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dac6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800daca:	b29b      	uxth	r3, r3
 800dacc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dad0:	45c1      	cmp	r9, r8
 800dad2:	f841 3b04 	str.w	r3, [r1], #4
 800dad6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dada:	d2e6      	bcs.n	800daaa <quorem+0xa4>
 800dadc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dae4:	b922      	cbnz	r2, 800daf0 <quorem+0xea>
 800dae6:	3b04      	subs	r3, #4
 800dae8:	429d      	cmp	r5, r3
 800daea:	461a      	mov	r2, r3
 800daec:	d30b      	bcc.n	800db06 <quorem+0x100>
 800daee:	613c      	str	r4, [r7, #16]
 800daf0:	3601      	adds	r6, #1
 800daf2:	4630      	mov	r0, r6
 800daf4:	b003      	add	sp, #12
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	6812      	ldr	r2, [r2, #0]
 800dafc:	3b04      	subs	r3, #4
 800dafe:	2a00      	cmp	r2, #0
 800db00:	d1cb      	bne.n	800da9a <quorem+0x94>
 800db02:	3c01      	subs	r4, #1
 800db04:	e7c6      	b.n	800da94 <quorem+0x8e>
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	3b04      	subs	r3, #4
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	d1ef      	bne.n	800daee <quorem+0xe8>
 800db0e:	3c01      	subs	r4, #1
 800db10:	e7ea      	b.n	800dae8 <quorem+0xe2>
 800db12:	2000      	movs	r0, #0
 800db14:	e7ee      	b.n	800daf4 <quorem+0xee>
	...

0800db18 <_dtoa_r>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	69c7      	ldr	r7, [r0, #28]
 800db1e:	b097      	sub	sp, #92	@ 0x5c
 800db20:	ed8d 0b04 	vstr	d0, [sp, #16]
 800db24:	ec55 4b10 	vmov	r4, r5, d0
 800db28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800db2a:	9107      	str	r1, [sp, #28]
 800db2c:	4681      	mov	r9, r0
 800db2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db30:	9311      	str	r3, [sp, #68]	@ 0x44
 800db32:	b97f      	cbnz	r7, 800db54 <_dtoa_r+0x3c>
 800db34:	2010      	movs	r0, #16
 800db36:	f7fe ffab 	bl	800ca90 <malloc>
 800db3a:	4602      	mov	r2, r0
 800db3c:	f8c9 001c 	str.w	r0, [r9, #28]
 800db40:	b920      	cbnz	r0, 800db4c <_dtoa_r+0x34>
 800db42:	4ba9      	ldr	r3, [pc, #676]	@ (800dde8 <_dtoa_r+0x2d0>)
 800db44:	21ef      	movs	r1, #239	@ 0xef
 800db46:	48a9      	ldr	r0, [pc, #676]	@ (800ddec <_dtoa_r+0x2d4>)
 800db48:	f001 fc20 	bl	800f38c <__assert_func>
 800db4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800db50:	6007      	str	r7, [r0, #0]
 800db52:	60c7      	str	r7, [r0, #12]
 800db54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800db58:	6819      	ldr	r1, [r3, #0]
 800db5a:	b159      	cbz	r1, 800db74 <_dtoa_r+0x5c>
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	604a      	str	r2, [r1, #4]
 800db60:	2301      	movs	r3, #1
 800db62:	4093      	lsls	r3, r2
 800db64:	608b      	str	r3, [r1, #8]
 800db66:	4648      	mov	r0, r9
 800db68:	f000 fe30 	bl	800e7cc <_Bfree>
 800db6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800db70:	2200      	movs	r2, #0
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	1e2b      	subs	r3, r5, #0
 800db76:	bfb9      	ittee	lt
 800db78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800db7c:	9305      	strlt	r3, [sp, #20]
 800db7e:	2300      	movge	r3, #0
 800db80:	6033      	strge	r3, [r6, #0]
 800db82:	9f05      	ldr	r7, [sp, #20]
 800db84:	4b9a      	ldr	r3, [pc, #616]	@ (800ddf0 <_dtoa_r+0x2d8>)
 800db86:	bfbc      	itt	lt
 800db88:	2201      	movlt	r2, #1
 800db8a:	6032      	strlt	r2, [r6, #0]
 800db8c:	43bb      	bics	r3, r7
 800db8e:	d112      	bne.n	800dbb6 <_dtoa_r+0x9e>
 800db90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db96:	6013      	str	r3, [r2, #0]
 800db98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db9c:	4323      	orrs	r3, r4
 800db9e:	f000 855a 	beq.w	800e656 <_dtoa_r+0xb3e>
 800dba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dba4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800de04 <_dtoa_r+0x2ec>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 855c 	beq.w	800e666 <_dtoa_r+0xb4e>
 800dbae:	f10a 0303 	add.w	r3, sl, #3
 800dbb2:	f000 bd56 	b.w	800e662 <_dtoa_r+0xb4a>
 800dbb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	ec51 0b17 	vmov	r0, r1, d7
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dbc6:	f7f2 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbca:	4680      	mov	r8, r0
 800dbcc:	b158      	cbz	r0, 800dbe6 <_dtoa_r+0xce>
 800dbce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dbd6:	b113      	cbz	r3, 800dbde <_dtoa_r+0xc6>
 800dbd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dbda:	4b86      	ldr	r3, [pc, #536]	@ (800ddf4 <_dtoa_r+0x2dc>)
 800dbdc:	6013      	str	r3, [r2, #0]
 800dbde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800de08 <_dtoa_r+0x2f0>
 800dbe2:	f000 bd40 	b.w	800e666 <_dtoa_r+0xb4e>
 800dbe6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dbea:	aa14      	add	r2, sp, #80	@ 0x50
 800dbec:	a915      	add	r1, sp, #84	@ 0x54
 800dbee:	4648      	mov	r0, r9
 800dbf0:	f001 f8ce 	bl	800ed90 <__d2b>
 800dbf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dbf8:	9002      	str	r0, [sp, #8]
 800dbfa:	2e00      	cmp	r6, #0
 800dbfc:	d078      	beq.n	800dcf0 <_dtoa_r+0x1d8>
 800dbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dc04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dc10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dc14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dc18:	4619      	mov	r1, r3
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4b76      	ldr	r3, [pc, #472]	@ (800ddf8 <_dtoa_r+0x2e0>)
 800dc1e:	f7f2 fb33 	bl	8000288 <__aeabi_dsub>
 800dc22:	a36b      	add	r3, pc, #428	@ (adr r3, 800ddd0 <_dtoa_r+0x2b8>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ddd8 <_dtoa_r+0x2c0>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	f7f2 fb2b 	bl	800028c <__adddf3>
 800dc36:	4604      	mov	r4, r0
 800dc38:	4630      	mov	r0, r6
 800dc3a:	460d      	mov	r5, r1
 800dc3c:	f7f2 fc72 	bl	8000524 <__aeabi_i2d>
 800dc40:	a367      	add	r3, pc, #412	@ (adr r3, 800dde0 <_dtoa_r+0x2c8>)
 800dc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc46:	f7f2 fcd7 	bl	80005f8 <__aeabi_dmul>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4620      	mov	r0, r4
 800dc50:	4629      	mov	r1, r5
 800dc52:	f7f2 fb1b 	bl	800028c <__adddf3>
 800dc56:	4604      	mov	r4, r0
 800dc58:	460d      	mov	r5, r1
 800dc5a:	f7f2 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800dc5e:	2200      	movs	r2, #0
 800dc60:	4607      	mov	r7, r0
 800dc62:	2300      	movs	r3, #0
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 ff38 	bl	8000adc <__aeabi_dcmplt>
 800dc6c:	b140      	cbz	r0, 800dc80 <_dtoa_r+0x168>
 800dc6e:	4638      	mov	r0, r7
 800dc70:	f7f2 fc58 	bl	8000524 <__aeabi_i2d>
 800dc74:	4622      	mov	r2, r4
 800dc76:	462b      	mov	r3, r5
 800dc78:	f7f2 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc7c:	b900      	cbnz	r0, 800dc80 <_dtoa_r+0x168>
 800dc7e:	3f01      	subs	r7, #1
 800dc80:	2f16      	cmp	r7, #22
 800dc82:	d852      	bhi.n	800dd2a <_dtoa_r+0x212>
 800dc84:	4b5d      	ldr	r3, [pc, #372]	@ (800ddfc <_dtoa_r+0x2e4>)
 800dc86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc92:	f7f2 ff23 	bl	8000adc <__aeabi_dcmplt>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d049      	beq.n	800dd2e <_dtoa_r+0x216>
 800dc9a:	3f01      	subs	r7, #1
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dca0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dca2:	1b9b      	subs	r3, r3, r6
 800dca4:	1e5a      	subs	r2, r3, #1
 800dca6:	bf45      	ittet	mi
 800dca8:	f1c3 0301 	rsbmi	r3, r3, #1
 800dcac:	9300      	strmi	r3, [sp, #0]
 800dcae:	2300      	movpl	r3, #0
 800dcb0:	2300      	movmi	r3, #0
 800dcb2:	9206      	str	r2, [sp, #24]
 800dcb4:	bf54      	ite	pl
 800dcb6:	9300      	strpl	r3, [sp, #0]
 800dcb8:	9306      	strmi	r3, [sp, #24]
 800dcba:	2f00      	cmp	r7, #0
 800dcbc:	db39      	blt.n	800dd32 <_dtoa_r+0x21a>
 800dcbe:	9b06      	ldr	r3, [sp, #24]
 800dcc0:	970d      	str	r7, [sp, #52]	@ 0x34
 800dcc2:	443b      	add	r3, r7
 800dcc4:	9306      	str	r3, [sp, #24]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	9308      	str	r3, [sp, #32]
 800dcca:	9b07      	ldr	r3, [sp, #28]
 800dccc:	2b09      	cmp	r3, #9
 800dcce:	d863      	bhi.n	800dd98 <_dtoa_r+0x280>
 800dcd0:	2b05      	cmp	r3, #5
 800dcd2:	bfc4      	itt	gt
 800dcd4:	3b04      	subgt	r3, #4
 800dcd6:	9307      	strgt	r3, [sp, #28]
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	f1a3 0302 	sub.w	r3, r3, #2
 800dcde:	bfcc      	ite	gt
 800dce0:	2400      	movgt	r4, #0
 800dce2:	2401      	movle	r4, #1
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d863      	bhi.n	800ddb0 <_dtoa_r+0x298>
 800dce8:	e8df f003 	tbb	[pc, r3]
 800dcec:	2b375452 	.word	0x2b375452
 800dcf0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dcf4:	441e      	add	r6, r3
 800dcf6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dcfa:	2b20      	cmp	r3, #32
 800dcfc:	bfc1      	itttt	gt
 800dcfe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dd02:	409f      	lslgt	r7, r3
 800dd04:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dd08:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dd0c:	bfd6      	itet	le
 800dd0e:	f1c3 0320 	rsble	r3, r3, #32
 800dd12:	ea47 0003 	orrgt.w	r0, r7, r3
 800dd16:	fa04 f003 	lslle.w	r0, r4, r3
 800dd1a:	f7f2 fbf3 	bl	8000504 <__aeabi_ui2d>
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dd24:	3e01      	subs	r6, #1
 800dd26:	9212      	str	r2, [sp, #72]	@ 0x48
 800dd28:	e776      	b.n	800dc18 <_dtoa_r+0x100>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e7b7      	b.n	800dc9e <_dtoa_r+0x186>
 800dd2e:	9010      	str	r0, [sp, #64]	@ 0x40
 800dd30:	e7b6      	b.n	800dca0 <_dtoa_r+0x188>
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	1bdb      	subs	r3, r3, r7
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	427b      	negs	r3, r7
 800dd3a:	9308      	str	r3, [sp, #32]
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd40:	e7c3      	b.n	800dcca <_dtoa_r+0x1b2>
 800dd42:	2301      	movs	r3, #1
 800dd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd48:	eb07 0b03 	add.w	fp, r7, r3
 800dd4c:	f10b 0301 	add.w	r3, fp, #1
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	9303      	str	r3, [sp, #12]
 800dd54:	bfb8      	it	lt
 800dd56:	2301      	movlt	r3, #1
 800dd58:	e006      	b.n	800dd68 <_dtoa_r+0x250>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dd28      	ble.n	800ddb6 <_dtoa_r+0x29e>
 800dd64:	469b      	mov	fp, r3
 800dd66:	9303      	str	r3, [sp, #12]
 800dd68:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	2204      	movs	r2, #4
 800dd70:	f102 0514 	add.w	r5, r2, #20
 800dd74:	429d      	cmp	r5, r3
 800dd76:	d926      	bls.n	800ddc6 <_dtoa_r+0x2ae>
 800dd78:	6041      	str	r1, [r0, #4]
 800dd7a:	4648      	mov	r0, r9
 800dd7c:	f000 fce6 	bl	800e74c <_Balloc>
 800dd80:	4682      	mov	sl, r0
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d142      	bne.n	800de0c <_dtoa_r+0x2f4>
 800dd86:	4b1e      	ldr	r3, [pc, #120]	@ (800de00 <_dtoa_r+0x2e8>)
 800dd88:	4602      	mov	r2, r0
 800dd8a:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd8e:	e6da      	b.n	800db46 <_dtoa_r+0x2e>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e7e3      	b.n	800dd5c <_dtoa_r+0x244>
 800dd94:	2300      	movs	r3, #0
 800dd96:	e7d5      	b.n	800dd44 <_dtoa_r+0x22c>
 800dd98:	2401      	movs	r4, #1
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	9307      	str	r3, [sp, #28]
 800dd9e:	9409      	str	r4, [sp, #36]	@ 0x24
 800dda0:	f04f 3bff 	mov.w	fp, #4294967295
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ddaa:	2312      	movs	r3, #18
 800ddac:	920c      	str	r2, [sp, #48]	@ 0x30
 800ddae:	e7db      	b.n	800dd68 <_dtoa_r+0x250>
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb4:	e7f4      	b.n	800dda0 <_dtoa_r+0x288>
 800ddb6:	f04f 0b01 	mov.w	fp, #1
 800ddba:	f8cd b00c 	str.w	fp, [sp, #12]
 800ddbe:	465b      	mov	r3, fp
 800ddc0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ddc4:	e7d0      	b.n	800dd68 <_dtoa_r+0x250>
 800ddc6:	3101      	adds	r1, #1
 800ddc8:	0052      	lsls	r2, r2, #1
 800ddca:	e7d1      	b.n	800dd70 <_dtoa_r+0x258>
 800ddcc:	f3af 8000 	nop.w
 800ddd0:	636f4361 	.word	0x636f4361
 800ddd4:	3fd287a7 	.word	0x3fd287a7
 800ddd8:	8b60c8b3 	.word	0x8b60c8b3
 800dddc:	3fc68a28 	.word	0x3fc68a28
 800dde0:	509f79fb 	.word	0x509f79fb
 800dde4:	3fd34413 	.word	0x3fd34413
 800dde8:	08010199 	.word	0x08010199
 800ddec:	080101b0 	.word	0x080101b0
 800ddf0:	7ff00000 	.word	0x7ff00000
 800ddf4:	08010169 	.word	0x08010169
 800ddf8:	3ff80000 	.word	0x3ff80000
 800ddfc:	08010300 	.word	0x08010300
 800de00:	08010208 	.word	0x08010208
 800de04:	08010195 	.word	0x08010195
 800de08:	08010168 	.word	0x08010168
 800de0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de10:	6018      	str	r0, [r3, #0]
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	2b0e      	cmp	r3, #14
 800de16:	f200 80a1 	bhi.w	800df5c <_dtoa_r+0x444>
 800de1a:	2c00      	cmp	r4, #0
 800de1c:	f000 809e 	beq.w	800df5c <_dtoa_r+0x444>
 800de20:	2f00      	cmp	r7, #0
 800de22:	dd33      	ble.n	800de8c <_dtoa_r+0x374>
 800de24:	4b9c      	ldr	r3, [pc, #624]	@ (800e098 <_dtoa_r+0x580>)
 800de26:	f007 020f 	and.w	r2, r7, #15
 800de2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de2e:	ed93 7b00 	vldr	d7, [r3]
 800de32:	05f8      	lsls	r0, r7, #23
 800de34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800de38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800de3c:	d516      	bpl.n	800de6c <_dtoa_r+0x354>
 800de3e:	4b97      	ldr	r3, [pc, #604]	@ (800e09c <_dtoa_r+0x584>)
 800de40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800de44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de48:	f7f2 fd00 	bl	800084c <__aeabi_ddiv>
 800de4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de50:	f004 040f 	and.w	r4, r4, #15
 800de54:	2603      	movs	r6, #3
 800de56:	4d91      	ldr	r5, [pc, #580]	@ (800e09c <_dtoa_r+0x584>)
 800de58:	b954      	cbnz	r4, 800de70 <_dtoa_r+0x358>
 800de5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de62:	f7f2 fcf3 	bl	800084c <__aeabi_ddiv>
 800de66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de6a:	e028      	b.n	800debe <_dtoa_r+0x3a6>
 800de6c:	2602      	movs	r6, #2
 800de6e:	e7f2      	b.n	800de56 <_dtoa_r+0x33e>
 800de70:	07e1      	lsls	r1, r4, #31
 800de72:	d508      	bpl.n	800de86 <_dtoa_r+0x36e>
 800de74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de7c:	f7f2 fbbc 	bl	80005f8 <__aeabi_dmul>
 800de80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de84:	3601      	adds	r6, #1
 800de86:	1064      	asrs	r4, r4, #1
 800de88:	3508      	adds	r5, #8
 800de8a:	e7e5      	b.n	800de58 <_dtoa_r+0x340>
 800de8c:	f000 80af 	beq.w	800dfee <_dtoa_r+0x4d6>
 800de90:	427c      	negs	r4, r7
 800de92:	4b81      	ldr	r3, [pc, #516]	@ (800e098 <_dtoa_r+0x580>)
 800de94:	4d81      	ldr	r5, [pc, #516]	@ (800e09c <_dtoa_r+0x584>)
 800de96:	f004 020f 	and.w	r2, r4, #15
 800de9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dea6:	f7f2 fba7 	bl	80005f8 <__aeabi_dmul>
 800deaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800deae:	1124      	asrs	r4, r4, #4
 800deb0:	2300      	movs	r3, #0
 800deb2:	2602      	movs	r6, #2
 800deb4:	2c00      	cmp	r4, #0
 800deb6:	f040 808f 	bne.w	800dfd8 <_dtoa_r+0x4c0>
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1d3      	bne.n	800de66 <_dtoa_r+0x34e>
 800debe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dec0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f000 8094 	beq.w	800dff2 <_dtoa_r+0x4da>
 800deca:	4b75      	ldr	r3, [pc, #468]	@ (800e0a0 <_dtoa_r+0x588>)
 800decc:	2200      	movs	r2, #0
 800dece:	4620      	mov	r0, r4
 800ded0:	4629      	mov	r1, r5
 800ded2:	f7f2 fe03 	bl	8000adc <__aeabi_dcmplt>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f000 808b 	beq.w	800dff2 <_dtoa_r+0x4da>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f000 8087 	beq.w	800dff2 <_dtoa_r+0x4da>
 800dee4:	f1bb 0f00 	cmp.w	fp, #0
 800dee8:	dd34      	ble.n	800df54 <_dtoa_r+0x43c>
 800deea:	4620      	mov	r0, r4
 800deec:	4b6d      	ldr	r3, [pc, #436]	@ (800e0a4 <_dtoa_r+0x58c>)
 800deee:	2200      	movs	r2, #0
 800def0:	4629      	mov	r1, r5
 800def2:	f7f2 fb81 	bl	80005f8 <__aeabi_dmul>
 800def6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800defa:	f107 38ff 	add.w	r8, r7, #4294967295
 800defe:	3601      	adds	r6, #1
 800df00:	465c      	mov	r4, fp
 800df02:	4630      	mov	r0, r6
 800df04:	f7f2 fb0e 	bl	8000524 <__aeabi_i2d>
 800df08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df0c:	f7f2 fb74 	bl	80005f8 <__aeabi_dmul>
 800df10:	4b65      	ldr	r3, [pc, #404]	@ (800e0a8 <_dtoa_r+0x590>)
 800df12:	2200      	movs	r2, #0
 800df14:	f7f2 f9ba 	bl	800028c <__adddf3>
 800df18:	4605      	mov	r5, r0
 800df1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800df1e:	2c00      	cmp	r4, #0
 800df20:	d16a      	bne.n	800dff8 <_dtoa_r+0x4e0>
 800df22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df26:	4b61      	ldr	r3, [pc, #388]	@ (800e0ac <_dtoa_r+0x594>)
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 f9ad 	bl	8000288 <__aeabi_dsub>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df36:	462a      	mov	r2, r5
 800df38:	4633      	mov	r3, r6
 800df3a:	f7f2 fded 	bl	8000b18 <__aeabi_dcmpgt>
 800df3e:	2800      	cmp	r0, #0
 800df40:	f040 8298 	bne.w	800e474 <_dtoa_r+0x95c>
 800df44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df48:	462a      	mov	r2, r5
 800df4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800df4e:	f7f2 fdc5 	bl	8000adc <__aeabi_dcmplt>
 800df52:	bb38      	cbnz	r0, 800dfa4 <_dtoa_r+0x48c>
 800df54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800df58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800df5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f2c0 8157 	blt.w	800e212 <_dtoa_r+0x6fa>
 800df64:	2f0e      	cmp	r7, #14
 800df66:	f300 8154 	bgt.w	800e212 <_dtoa_r+0x6fa>
 800df6a:	4b4b      	ldr	r3, [pc, #300]	@ (800e098 <_dtoa_r+0x580>)
 800df6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df70:	ed93 7b00 	vldr	d7, [r3]
 800df74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df76:	2b00      	cmp	r3, #0
 800df78:	ed8d 7b00 	vstr	d7, [sp]
 800df7c:	f280 80e5 	bge.w	800e14a <_dtoa_r+0x632>
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f300 80e1 	bgt.w	800e14a <_dtoa_r+0x632>
 800df88:	d10c      	bne.n	800dfa4 <_dtoa_r+0x48c>
 800df8a:	4b48      	ldr	r3, [pc, #288]	@ (800e0ac <_dtoa_r+0x594>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	ec51 0b17 	vmov	r0, r1, d7
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9a:	f7f2 fdb3 	bl	8000b04 <__aeabi_dcmpge>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f000 8266 	beq.w	800e470 <_dtoa_r+0x958>
 800dfa4:	2400      	movs	r4, #0
 800dfa6:	4625      	mov	r5, r4
 800dfa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfaa:	4656      	mov	r6, sl
 800dfac:	ea6f 0803 	mvn.w	r8, r3
 800dfb0:	2700      	movs	r7, #0
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	4648      	mov	r0, r9
 800dfb6:	f000 fc09 	bl	800e7cc <_Bfree>
 800dfba:	2d00      	cmp	r5, #0
 800dfbc:	f000 80bd 	beq.w	800e13a <_dtoa_r+0x622>
 800dfc0:	b12f      	cbz	r7, 800dfce <_dtoa_r+0x4b6>
 800dfc2:	42af      	cmp	r7, r5
 800dfc4:	d003      	beq.n	800dfce <_dtoa_r+0x4b6>
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	4648      	mov	r0, r9
 800dfca:	f000 fbff 	bl	800e7cc <_Bfree>
 800dfce:	4629      	mov	r1, r5
 800dfd0:	4648      	mov	r0, r9
 800dfd2:	f000 fbfb 	bl	800e7cc <_Bfree>
 800dfd6:	e0b0      	b.n	800e13a <_dtoa_r+0x622>
 800dfd8:	07e2      	lsls	r2, r4, #31
 800dfda:	d505      	bpl.n	800dfe8 <_dtoa_r+0x4d0>
 800dfdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfe0:	f7f2 fb0a 	bl	80005f8 <__aeabi_dmul>
 800dfe4:	3601      	adds	r6, #1
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	1064      	asrs	r4, r4, #1
 800dfea:	3508      	adds	r5, #8
 800dfec:	e762      	b.n	800deb4 <_dtoa_r+0x39c>
 800dfee:	2602      	movs	r6, #2
 800dff0:	e765      	b.n	800debe <_dtoa_r+0x3a6>
 800dff2:	9c03      	ldr	r4, [sp, #12]
 800dff4:	46b8      	mov	r8, r7
 800dff6:	e784      	b.n	800df02 <_dtoa_r+0x3ea>
 800dff8:	4b27      	ldr	r3, [pc, #156]	@ (800e098 <_dtoa_r+0x580>)
 800dffa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dffc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e000:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e004:	4454      	add	r4, sl
 800e006:	2900      	cmp	r1, #0
 800e008:	d054      	beq.n	800e0b4 <_dtoa_r+0x59c>
 800e00a:	4929      	ldr	r1, [pc, #164]	@ (800e0b0 <_dtoa_r+0x598>)
 800e00c:	2000      	movs	r0, #0
 800e00e:	f7f2 fc1d 	bl	800084c <__aeabi_ddiv>
 800e012:	4633      	mov	r3, r6
 800e014:	462a      	mov	r2, r5
 800e016:	f7f2 f937 	bl	8000288 <__aeabi_dsub>
 800e01a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e01e:	4656      	mov	r6, sl
 800e020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e024:	f7f2 fd98 	bl	8000b58 <__aeabi_d2iz>
 800e028:	4605      	mov	r5, r0
 800e02a:	f7f2 fa7b 	bl	8000524 <__aeabi_i2d>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e036:	f7f2 f927 	bl	8000288 <__aeabi_dsub>
 800e03a:	3530      	adds	r5, #48	@ 0x30
 800e03c:	4602      	mov	r2, r0
 800e03e:	460b      	mov	r3, r1
 800e040:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e044:	f806 5b01 	strb.w	r5, [r6], #1
 800e048:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e04c:	f7f2 fd46 	bl	8000adc <__aeabi_dcmplt>
 800e050:	2800      	cmp	r0, #0
 800e052:	d172      	bne.n	800e13a <_dtoa_r+0x622>
 800e054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e058:	4911      	ldr	r1, [pc, #68]	@ (800e0a0 <_dtoa_r+0x588>)
 800e05a:	2000      	movs	r0, #0
 800e05c:	f7f2 f914 	bl	8000288 <__aeabi_dsub>
 800e060:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e064:	f7f2 fd3a 	bl	8000adc <__aeabi_dcmplt>
 800e068:	2800      	cmp	r0, #0
 800e06a:	f040 80b4 	bne.w	800e1d6 <_dtoa_r+0x6be>
 800e06e:	42a6      	cmp	r6, r4
 800e070:	f43f af70 	beq.w	800df54 <_dtoa_r+0x43c>
 800e074:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e078:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a4 <_dtoa_r+0x58c>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	f7f2 fabc 	bl	80005f8 <__aeabi_dmul>
 800e080:	4b08      	ldr	r3, [pc, #32]	@ (800e0a4 <_dtoa_r+0x58c>)
 800e082:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e086:	2200      	movs	r2, #0
 800e088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e08c:	f7f2 fab4 	bl	80005f8 <__aeabi_dmul>
 800e090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e094:	e7c4      	b.n	800e020 <_dtoa_r+0x508>
 800e096:	bf00      	nop
 800e098:	08010300 	.word	0x08010300
 800e09c:	080102d8 	.word	0x080102d8
 800e0a0:	3ff00000 	.word	0x3ff00000
 800e0a4:	40240000 	.word	0x40240000
 800e0a8:	401c0000 	.word	0x401c0000
 800e0ac:	40140000 	.word	0x40140000
 800e0b0:	3fe00000 	.word	0x3fe00000
 800e0b4:	4631      	mov	r1, r6
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f7f2 fa9e 	bl	80005f8 <__aeabi_dmul>
 800e0bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e0c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e0c2:	4656      	mov	r6, sl
 800e0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0c8:	f7f2 fd46 	bl	8000b58 <__aeabi_d2iz>
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	f7f2 fa29 	bl	8000524 <__aeabi_i2d>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0da:	f7f2 f8d5 	bl	8000288 <__aeabi_dsub>
 800e0de:	3530      	adds	r5, #48	@ 0x30
 800e0e0:	f806 5b01 	strb.w	r5, [r6], #1
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	42a6      	cmp	r6, r4
 800e0ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	d124      	bne.n	800e13e <_dtoa_r+0x626>
 800e0f4:	4baf      	ldr	r3, [pc, #700]	@ (800e3b4 <_dtoa_r+0x89c>)
 800e0f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e0fa:	f7f2 f8c7 	bl	800028c <__adddf3>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e106:	f7f2 fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d163      	bne.n	800e1d6 <_dtoa_r+0x6be>
 800e10e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e112:	49a8      	ldr	r1, [pc, #672]	@ (800e3b4 <_dtoa_r+0x89c>)
 800e114:	2000      	movs	r0, #0
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e122:	f7f2 fcdb 	bl	8000adc <__aeabi_dcmplt>
 800e126:	2800      	cmp	r0, #0
 800e128:	f43f af14 	beq.w	800df54 <_dtoa_r+0x43c>
 800e12c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e12e:	1e73      	subs	r3, r6, #1
 800e130:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e132:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e136:	2b30      	cmp	r3, #48	@ 0x30
 800e138:	d0f8      	beq.n	800e12c <_dtoa_r+0x614>
 800e13a:	4647      	mov	r7, r8
 800e13c:	e03b      	b.n	800e1b6 <_dtoa_r+0x69e>
 800e13e:	4b9e      	ldr	r3, [pc, #632]	@ (800e3b8 <_dtoa_r+0x8a0>)
 800e140:	f7f2 fa5a 	bl	80005f8 <__aeabi_dmul>
 800e144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e148:	e7bc      	b.n	800e0c4 <_dtoa_r+0x5ac>
 800e14a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e14e:	4656      	mov	r6, sl
 800e150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e154:	4620      	mov	r0, r4
 800e156:	4629      	mov	r1, r5
 800e158:	f7f2 fb78 	bl	800084c <__aeabi_ddiv>
 800e15c:	f7f2 fcfc 	bl	8000b58 <__aeabi_d2iz>
 800e160:	4680      	mov	r8, r0
 800e162:	f7f2 f9df 	bl	8000524 <__aeabi_i2d>
 800e166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e16a:	f7f2 fa45 	bl	80005f8 <__aeabi_dmul>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4620      	mov	r0, r4
 800e174:	4629      	mov	r1, r5
 800e176:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e17a:	f7f2 f885 	bl	8000288 <__aeabi_dsub>
 800e17e:	f806 4b01 	strb.w	r4, [r6], #1
 800e182:	9d03      	ldr	r5, [sp, #12]
 800e184:	eba6 040a 	sub.w	r4, r6, sl
 800e188:	42a5      	cmp	r5, r4
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	d133      	bne.n	800e1f8 <_dtoa_r+0x6e0>
 800e190:	f7f2 f87c 	bl	800028c <__adddf3>
 800e194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e198:	4604      	mov	r4, r0
 800e19a:	460d      	mov	r5, r1
 800e19c:	f7f2 fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 800e1a0:	b9c0      	cbnz	r0, 800e1d4 <_dtoa_r+0x6bc>
 800e1a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1ae:	b110      	cbz	r0, 800e1b6 <_dtoa_r+0x69e>
 800e1b0:	f018 0f01 	tst.w	r8, #1
 800e1b4:	d10e      	bne.n	800e1d4 <_dtoa_r+0x6bc>
 800e1b6:	9902      	ldr	r1, [sp, #8]
 800e1b8:	4648      	mov	r0, r9
 800e1ba:	f000 fb07 	bl	800e7cc <_Bfree>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	7033      	strb	r3, [r6, #0]
 800e1c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1c4:	3701      	adds	r7, #1
 800e1c6:	601f      	str	r7, [r3, #0]
 800e1c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 824b 	beq.w	800e666 <_dtoa_r+0xb4e>
 800e1d0:	601e      	str	r6, [r3, #0]
 800e1d2:	e248      	b.n	800e666 <_dtoa_r+0xb4e>
 800e1d4:	46b8      	mov	r8, r7
 800e1d6:	4633      	mov	r3, r6
 800e1d8:	461e      	mov	r6, r3
 800e1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1de:	2a39      	cmp	r2, #57	@ 0x39
 800e1e0:	d106      	bne.n	800e1f0 <_dtoa_r+0x6d8>
 800e1e2:	459a      	cmp	sl, r3
 800e1e4:	d1f8      	bne.n	800e1d8 <_dtoa_r+0x6c0>
 800e1e6:	2230      	movs	r2, #48	@ 0x30
 800e1e8:	f108 0801 	add.w	r8, r8, #1
 800e1ec:	f88a 2000 	strb.w	r2, [sl]
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	3201      	adds	r2, #1
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	e7a0      	b.n	800e13a <_dtoa_r+0x622>
 800e1f8:	4b6f      	ldr	r3, [pc, #444]	@ (800e3b8 <_dtoa_r+0x8a0>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f7f2 f9fc 	bl	80005f8 <__aeabi_dmul>
 800e200:	2200      	movs	r2, #0
 800e202:	2300      	movs	r3, #0
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	f7f2 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d09f      	beq.n	800e150 <_dtoa_r+0x638>
 800e210:	e7d1      	b.n	800e1b6 <_dtoa_r+0x69e>
 800e212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e214:	2a00      	cmp	r2, #0
 800e216:	f000 80ea 	beq.w	800e3ee <_dtoa_r+0x8d6>
 800e21a:	9a07      	ldr	r2, [sp, #28]
 800e21c:	2a01      	cmp	r2, #1
 800e21e:	f300 80cd 	bgt.w	800e3bc <_dtoa_r+0x8a4>
 800e222:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e224:	2a00      	cmp	r2, #0
 800e226:	f000 80c1 	beq.w	800e3ac <_dtoa_r+0x894>
 800e22a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e22e:	9c08      	ldr	r4, [sp, #32]
 800e230:	9e00      	ldr	r6, [sp, #0]
 800e232:	9a00      	ldr	r2, [sp, #0]
 800e234:	441a      	add	r2, r3
 800e236:	9200      	str	r2, [sp, #0]
 800e238:	9a06      	ldr	r2, [sp, #24]
 800e23a:	2101      	movs	r1, #1
 800e23c:	441a      	add	r2, r3
 800e23e:	4648      	mov	r0, r9
 800e240:	9206      	str	r2, [sp, #24]
 800e242:	f000 fb77 	bl	800e934 <__i2b>
 800e246:	4605      	mov	r5, r0
 800e248:	b166      	cbz	r6, 800e264 <_dtoa_r+0x74c>
 800e24a:	9b06      	ldr	r3, [sp, #24]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	dd09      	ble.n	800e264 <_dtoa_r+0x74c>
 800e250:	42b3      	cmp	r3, r6
 800e252:	9a00      	ldr	r2, [sp, #0]
 800e254:	bfa8      	it	ge
 800e256:	4633      	movge	r3, r6
 800e258:	1ad2      	subs	r2, r2, r3
 800e25a:	9200      	str	r2, [sp, #0]
 800e25c:	9a06      	ldr	r2, [sp, #24]
 800e25e:	1af6      	subs	r6, r6, r3
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	9306      	str	r3, [sp, #24]
 800e264:	9b08      	ldr	r3, [sp, #32]
 800e266:	b30b      	cbz	r3, 800e2ac <_dtoa_r+0x794>
 800e268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 80c6 	beq.w	800e3fc <_dtoa_r+0x8e4>
 800e270:	2c00      	cmp	r4, #0
 800e272:	f000 80c0 	beq.w	800e3f6 <_dtoa_r+0x8de>
 800e276:	4629      	mov	r1, r5
 800e278:	4622      	mov	r2, r4
 800e27a:	4648      	mov	r0, r9
 800e27c:	f000 fc12 	bl	800eaa4 <__pow5mult>
 800e280:	9a02      	ldr	r2, [sp, #8]
 800e282:	4601      	mov	r1, r0
 800e284:	4605      	mov	r5, r0
 800e286:	4648      	mov	r0, r9
 800e288:	f000 fb6a 	bl	800e960 <__multiply>
 800e28c:	9902      	ldr	r1, [sp, #8]
 800e28e:	4680      	mov	r8, r0
 800e290:	4648      	mov	r0, r9
 800e292:	f000 fa9b 	bl	800e7cc <_Bfree>
 800e296:	9b08      	ldr	r3, [sp, #32]
 800e298:	1b1b      	subs	r3, r3, r4
 800e29a:	9308      	str	r3, [sp, #32]
 800e29c:	f000 80b1 	beq.w	800e402 <_dtoa_r+0x8ea>
 800e2a0:	9a08      	ldr	r2, [sp, #32]
 800e2a2:	4641      	mov	r1, r8
 800e2a4:	4648      	mov	r0, r9
 800e2a6:	f000 fbfd 	bl	800eaa4 <__pow5mult>
 800e2aa:	9002      	str	r0, [sp, #8]
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	4648      	mov	r0, r9
 800e2b0:	f000 fb40 	bl	800e934 <__i2b>
 800e2b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 81d8 	beq.w	800e66e <_dtoa_r+0xb56>
 800e2be:	461a      	mov	r2, r3
 800e2c0:	4601      	mov	r1, r0
 800e2c2:	4648      	mov	r0, r9
 800e2c4:	f000 fbee 	bl	800eaa4 <__pow5mult>
 800e2c8:	9b07      	ldr	r3, [sp, #28]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	f300 809f 	bgt.w	800e410 <_dtoa_r+0x8f8>
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f040 8097 	bne.w	800e408 <_dtoa_r+0x8f0>
 800e2da:	9b05      	ldr	r3, [sp, #20]
 800e2dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f040 8093 	bne.w	800e40c <_dtoa_r+0x8f4>
 800e2e6:	9b05      	ldr	r3, [sp, #20]
 800e2e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2ec:	0d1b      	lsrs	r3, r3, #20
 800e2ee:	051b      	lsls	r3, r3, #20
 800e2f0:	b133      	cbz	r3, 800e300 <_dtoa_r+0x7e8>
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	9b06      	ldr	r3, [sp, #24]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	9306      	str	r3, [sp, #24]
 800e2fe:	2301      	movs	r3, #1
 800e300:	9308      	str	r3, [sp, #32]
 800e302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 81b8 	beq.w	800e67a <_dtoa_r+0xb62>
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e310:	6918      	ldr	r0, [r3, #16]
 800e312:	f000 fac3 	bl	800e89c <__hi0bits>
 800e316:	f1c0 0020 	rsb	r0, r0, #32
 800e31a:	9b06      	ldr	r3, [sp, #24]
 800e31c:	4418      	add	r0, r3
 800e31e:	f010 001f 	ands.w	r0, r0, #31
 800e322:	f000 8082 	beq.w	800e42a <_dtoa_r+0x912>
 800e326:	f1c0 0320 	rsb	r3, r0, #32
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	dd73      	ble.n	800e416 <_dtoa_r+0x8fe>
 800e32e:	9b00      	ldr	r3, [sp, #0]
 800e330:	f1c0 001c 	rsb	r0, r0, #28
 800e334:	4403      	add	r3, r0
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	9b06      	ldr	r3, [sp, #24]
 800e33a:	4403      	add	r3, r0
 800e33c:	4406      	add	r6, r0
 800e33e:	9306      	str	r3, [sp, #24]
 800e340:	9b00      	ldr	r3, [sp, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dd05      	ble.n	800e352 <_dtoa_r+0x83a>
 800e346:	9902      	ldr	r1, [sp, #8]
 800e348:	461a      	mov	r2, r3
 800e34a:	4648      	mov	r0, r9
 800e34c:	f000 fc04 	bl	800eb58 <__lshift>
 800e350:	9002      	str	r0, [sp, #8]
 800e352:	9b06      	ldr	r3, [sp, #24]
 800e354:	2b00      	cmp	r3, #0
 800e356:	dd05      	ble.n	800e364 <_dtoa_r+0x84c>
 800e358:	4621      	mov	r1, r4
 800e35a:	461a      	mov	r2, r3
 800e35c:	4648      	mov	r0, r9
 800e35e:	f000 fbfb 	bl	800eb58 <__lshift>
 800e362:	4604      	mov	r4, r0
 800e364:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e366:	2b00      	cmp	r3, #0
 800e368:	d061      	beq.n	800e42e <_dtoa_r+0x916>
 800e36a:	9802      	ldr	r0, [sp, #8]
 800e36c:	4621      	mov	r1, r4
 800e36e:	f000 fc5f 	bl	800ec30 <__mcmp>
 800e372:	2800      	cmp	r0, #0
 800e374:	da5b      	bge.n	800e42e <_dtoa_r+0x916>
 800e376:	2300      	movs	r3, #0
 800e378:	9902      	ldr	r1, [sp, #8]
 800e37a:	220a      	movs	r2, #10
 800e37c:	4648      	mov	r0, r9
 800e37e:	f000 fa47 	bl	800e810 <__multadd>
 800e382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e384:	9002      	str	r0, [sp, #8]
 800e386:	f107 38ff 	add.w	r8, r7, #4294967295
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f000 8177 	beq.w	800e67e <_dtoa_r+0xb66>
 800e390:	4629      	mov	r1, r5
 800e392:	2300      	movs	r3, #0
 800e394:	220a      	movs	r2, #10
 800e396:	4648      	mov	r0, r9
 800e398:	f000 fa3a 	bl	800e810 <__multadd>
 800e39c:	f1bb 0f00 	cmp.w	fp, #0
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	dc6f      	bgt.n	800e484 <_dtoa_r+0x96c>
 800e3a4:	9b07      	ldr	r3, [sp, #28]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	dc49      	bgt.n	800e43e <_dtoa_r+0x926>
 800e3aa:	e06b      	b.n	800e484 <_dtoa_r+0x96c>
 800e3ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e3b2:	e73c      	b.n	800e22e <_dtoa_r+0x716>
 800e3b4:	3fe00000 	.word	0x3fe00000
 800e3b8:	40240000 	.word	0x40240000
 800e3bc:	9b03      	ldr	r3, [sp, #12]
 800e3be:	1e5c      	subs	r4, r3, #1
 800e3c0:	9b08      	ldr	r3, [sp, #32]
 800e3c2:	42a3      	cmp	r3, r4
 800e3c4:	db09      	blt.n	800e3da <_dtoa_r+0x8c2>
 800e3c6:	1b1c      	subs	r4, r3, r4
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f6bf af30 	bge.w	800e230 <_dtoa_r+0x718>
 800e3d0:	9b00      	ldr	r3, [sp, #0]
 800e3d2:	9a03      	ldr	r2, [sp, #12]
 800e3d4:	1a9e      	subs	r6, r3, r2
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e72b      	b.n	800e232 <_dtoa_r+0x71a>
 800e3da:	9b08      	ldr	r3, [sp, #32]
 800e3dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e3de:	9408      	str	r4, [sp, #32]
 800e3e0:	1ae3      	subs	r3, r4, r3
 800e3e2:	441a      	add	r2, r3
 800e3e4:	9e00      	ldr	r6, [sp, #0]
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e3ea:	2400      	movs	r4, #0
 800e3ec:	e721      	b.n	800e232 <_dtoa_r+0x71a>
 800e3ee:	9c08      	ldr	r4, [sp, #32]
 800e3f0:	9e00      	ldr	r6, [sp, #0]
 800e3f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e3f4:	e728      	b.n	800e248 <_dtoa_r+0x730>
 800e3f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e3fa:	e751      	b.n	800e2a0 <_dtoa_r+0x788>
 800e3fc:	9a08      	ldr	r2, [sp, #32]
 800e3fe:	9902      	ldr	r1, [sp, #8]
 800e400:	e750      	b.n	800e2a4 <_dtoa_r+0x78c>
 800e402:	f8cd 8008 	str.w	r8, [sp, #8]
 800e406:	e751      	b.n	800e2ac <_dtoa_r+0x794>
 800e408:	2300      	movs	r3, #0
 800e40a:	e779      	b.n	800e300 <_dtoa_r+0x7e8>
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	e777      	b.n	800e300 <_dtoa_r+0x7e8>
 800e410:	2300      	movs	r3, #0
 800e412:	9308      	str	r3, [sp, #32]
 800e414:	e779      	b.n	800e30a <_dtoa_r+0x7f2>
 800e416:	d093      	beq.n	800e340 <_dtoa_r+0x828>
 800e418:	9a00      	ldr	r2, [sp, #0]
 800e41a:	331c      	adds	r3, #28
 800e41c:	441a      	add	r2, r3
 800e41e:	9200      	str	r2, [sp, #0]
 800e420:	9a06      	ldr	r2, [sp, #24]
 800e422:	441a      	add	r2, r3
 800e424:	441e      	add	r6, r3
 800e426:	9206      	str	r2, [sp, #24]
 800e428:	e78a      	b.n	800e340 <_dtoa_r+0x828>
 800e42a:	4603      	mov	r3, r0
 800e42c:	e7f4      	b.n	800e418 <_dtoa_r+0x900>
 800e42e:	9b03      	ldr	r3, [sp, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	46b8      	mov	r8, r7
 800e434:	dc20      	bgt.n	800e478 <_dtoa_r+0x960>
 800e436:	469b      	mov	fp, r3
 800e438:	9b07      	ldr	r3, [sp, #28]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	dd1e      	ble.n	800e47c <_dtoa_r+0x964>
 800e43e:	f1bb 0f00 	cmp.w	fp, #0
 800e442:	f47f adb1 	bne.w	800dfa8 <_dtoa_r+0x490>
 800e446:	4621      	mov	r1, r4
 800e448:	465b      	mov	r3, fp
 800e44a:	2205      	movs	r2, #5
 800e44c:	4648      	mov	r0, r9
 800e44e:	f000 f9df 	bl	800e810 <__multadd>
 800e452:	4601      	mov	r1, r0
 800e454:	4604      	mov	r4, r0
 800e456:	9802      	ldr	r0, [sp, #8]
 800e458:	f000 fbea 	bl	800ec30 <__mcmp>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	f77f ada3 	ble.w	800dfa8 <_dtoa_r+0x490>
 800e462:	4656      	mov	r6, sl
 800e464:	2331      	movs	r3, #49	@ 0x31
 800e466:	f806 3b01 	strb.w	r3, [r6], #1
 800e46a:	f108 0801 	add.w	r8, r8, #1
 800e46e:	e59f      	b.n	800dfb0 <_dtoa_r+0x498>
 800e470:	9c03      	ldr	r4, [sp, #12]
 800e472:	46b8      	mov	r8, r7
 800e474:	4625      	mov	r5, r4
 800e476:	e7f4      	b.n	800e462 <_dtoa_r+0x94a>
 800e478:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f000 8101 	beq.w	800e686 <_dtoa_r+0xb6e>
 800e484:	2e00      	cmp	r6, #0
 800e486:	dd05      	ble.n	800e494 <_dtoa_r+0x97c>
 800e488:	4629      	mov	r1, r5
 800e48a:	4632      	mov	r2, r6
 800e48c:	4648      	mov	r0, r9
 800e48e:	f000 fb63 	bl	800eb58 <__lshift>
 800e492:	4605      	mov	r5, r0
 800e494:	9b08      	ldr	r3, [sp, #32]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d05c      	beq.n	800e554 <_dtoa_r+0xa3c>
 800e49a:	6869      	ldr	r1, [r5, #4]
 800e49c:	4648      	mov	r0, r9
 800e49e:	f000 f955 	bl	800e74c <_Balloc>
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	b928      	cbnz	r0, 800e4b2 <_dtoa_r+0x99a>
 800e4a6:	4b82      	ldr	r3, [pc, #520]	@ (800e6b0 <_dtoa_r+0xb98>)
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e4ae:	f7ff bb4a 	b.w	800db46 <_dtoa_r+0x2e>
 800e4b2:	692a      	ldr	r2, [r5, #16]
 800e4b4:	3202      	adds	r2, #2
 800e4b6:	0092      	lsls	r2, r2, #2
 800e4b8:	f105 010c 	add.w	r1, r5, #12
 800e4bc:	300c      	adds	r0, #12
 800e4be:	f7ff fa94 	bl	800d9ea <memcpy>
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	4648      	mov	r0, r9
 800e4c8:	f000 fb46 	bl	800eb58 <__lshift>
 800e4cc:	f10a 0301 	add.w	r3, sl, #1
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	eb0a 030b 	add.w	r3, sl, fp
 800e4d6:	9308      	str	r3, [sp, #32]
 800e4d8:	9b04      	ldr	r3, [sp, #16]
 800e4da:	f003 0301 	and.w	r3, r3, #1
 800e4de:	462f      	mov	r7, r5
 800e4e0:	9306      	str	r3, [sp, #24]
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	9b00      	ldr	r3, [sp, #0]
 800e4e6:	9802      	ldr	r0, [sp, #8]
 800e4e8:	4621      	mov	r1, r4
 800e4ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800e4ee:	f7ff fa8a 	bl	800da06 <quorem>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	3330      	adds	r3, #48	@ 0x30
 800e4f6:	9003      	str	r0, [sp, #12]
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	9802      	ldr	r0, [sp, #8]
 800e4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4fe:	f000 fb97 	bl	800ec30 <__mcmp>
 800e502:	462a      	mov	r2, r5
 800e504:	9004      	str	r0, [sp, #16]
 800e506:	4621      	mov	r1, r4
 800e508:	4648      	mov	r0, r9
 800e50a:	f000 fbad 	bl	800ec68 <__mdiff>
 800e50e:	68c2      	ldr	r2, [r0, #12]
 800e510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e512:	4606      	mov	r6, r0
 800e514:	bb02      	cbnz	r2, 800e558 <_dtoa_r+0xa40>
 800e516:	4601      	mov	r1, r0
 800e518:	9802      	ldr	r0, [sp, #8]
 800e51a:	f000 fb89 	bl	800ec30 <__mcmp>
 800e51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e520:	4602      	mov	r2, r0
 800e522:	4631      	mov	r1, r6
 800e524:	4648      	mov	r0, r9
 800e526:	920c      	str	r2, [sp, #48]	@ 0x30
 800e528:	9309      	str	r3, [sp, #36]	@ 0x24
 800e52a:	f000 f94f 	bl	800e7cc <_Bfree>
 800e52e:	9b07      	ldr	r3, [sp, #28]
 800e530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e532:	9e00      	ldr	r6, [sp, #0]
 800e534:	ea42 0103 	orr.w	r1, r2, r3
 800e538:	9b06      	ldr	r3, [sp, #24]
 800e53a:	4319      	orrs	r1, r3
 800e53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e53e:	d10d      	bne.n	800e55c <_dtoa_r+0xa44>
 800e540:	2b39      	cmp	r3, #57	@ 0x39
 800e542:	d027      	beq.n	800e594 <_dtoa_r+0xa7c>
 800e544:	9a04      	ldr	r2, [sp, #16]
 800e546:	2a00      	cmp	r2, #0
 800e548:	dd01      	ble.n	800e54e <_dtoa_r+0xa36>
 800e54a:	9b03      	ldr	r3, [sp, #12]
 800e54c:	3331      	adds	r3, #49	@ 0x31
 800e54e:	f88b 3000 	strb.w	r3, [fp]
 800e552:	e52e      	b.n	800dfb2 <_dtoa_r+0x49a>
 800e554:	4628      	mov	r0, r5
 800e556:	e7b9      	b.n	800e4cc <_dtoa_r+0x9b4>
 800e558:	2201      	movs	r2, #1
 800e55a:	e7e2      	b.n	800e522 <_dtoa_r+0xa0a>
 800e55c:	9904      	ldr	r1, [sp, #16]
 800e55e:	2900      	cmp	r1, #0
 800e560:	db04      	blt.n	800e56c <_dtoa_r+0xa54>
 800e562:	9807      	ldr	r0, [sp, #28]
 800e564:	4301      	orrs	r1, r0
 800e566:	9806      	ldr	r0, [sp, #24]
 800e568:	4301      	orrs	r1, r0
 800e56a:	d120      	bne.n	800e5ae <_dtoa_r+0xa96>
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	ddee      	ble.n	800e54e <_dtoa_r+0xa36>
 800e570:	9902      	ldr	r1, [sp, #8]
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	2201      	movs	r2, #1
 800e576:	4648      	mov	r0, r9
 800e578:	f000 faee 	bl	800eb58 <__lshift>
 800e57c:	4621      	mov	r1, r4
 800e57e:	9002      	str	r0, [sp, #8]
 800e580:	f000 fb56 	bl	800ec30 <__mcmp>
 800e584:	2800      	cmp	r0, #0
 800e586:	9b00      	ldr	r3, [sp, #0]
 800e588:	dc02      	bgt.n	800e590 <_dtoa_r+0xa78>
 800e58a:	d1e0      	bne.n	800e54e <_dtoa_r+0xa36>
 800e58c:	07da      	lsls	r2, r3, #31
 800e58e:	d5de      	bpl.n	800e54e <_dtoa_r+0xa36>
 800e590:	2b39      	cmp	r3, #57	@ 0x39
 800e592:	d1da      	bne.n	800e54a <_dtoa_r+0xa32>
 800e594:	2339      	movs	r3, #57	@ 0x39
 800e596:	f88b 3000 	strb.w	r3, [fp]
 800e59a:	4633      	mov	r3, r6
 800e59c:	461e      	mov	r6, r3
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e5a4:	2a39      	cmp	r2, #57	@ 0x39
 800e5a6:	d04e      	beq.n	800e646 <_dtoa_r+0xb2e>
 800e5a8:	3201      	adds	r2, #1
 800e5aa:	701a      	strb	r2, [r3, #0]
 800e5ac:	e501      	b.n	800dfb2 <_dtoa_r+0x49a>
 800e5ae:	2a00      	cmp	r2, #0
 800e5b0:	dd03      	ble.n	800e5ba <_dtoa_r+0xaa2>
 800e5b2:	2b39      	cmp	r3, #57	@ 0x39
 800e5b4:	d0ee      	beq.n	800e594 <_dtoa_r+0xa7c>
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	e7c9      	b.n	800e54e <_dtoa_r+0xa36>
 800e5ba:	9a00      	ldr	r2, [sp, #0]
 800e5bc:	9908      	ldr	r1, [sp, #32]
 800e5be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e5c2:	428a      	cmp	r2, r1
 800e5c4:	d028      	beq.n	800e618 <_dtoa_r+0xb00>
 800e5c6:	9902      	ldr	r1, [sp, #8]
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	220a      	movs	r2, #10
 800e5cc:	4648      	mov	r0, r9
 800e5ce:	f000 f91f 	bl	800e810 <__multadd>
 800e5d2:	42af      	cmp	r7, r5
 800e5d4:	9002      	str	r0, [sp, #8]
 800e5d6:	f04f 0300 	mov.w	r3, #0
 800e5da:	f04f 020a 	mov.w	r2, #10
 800e5de:	4639      	mov	r1, r7
 800e5e0:	4648      	mov	r0, r9
 800e5e2:	d107      	bne.n	800e5f4 <_dtoa_r+0xadc>
 800e5e4:	f000 f914 	bl	800e810 <__multadd>
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	9b00      	ldr	r3, [sp, #0]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	e777      	b.n	800e4e4 <_dtoa_r+0x9cc>
 800e5f4:	f000 f90c 	bl	800e810 <__multadd>
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4607      	mov	r7, r0
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	220a      	movs	r2, #10
 800e600:	4648      	mov	r0, r9
 800e602:	f000 f905 	bl	800e810 <__multadd>
 800e606:	4605      	mov	r5, r0
 800e608:	e7f0      	b.n	800e5ec <_dtoa_r+0xad4>
 800e60a:	f1bb 0f00 	cmp.w	fp, #0
 800e60e:	bfcc      	ite	gt
 800e610:	465e      	movgt	r6, fp
 800e612:	2601      	movle	r6, #1
 800e614:	4456      	add	r6, sl
 800e616:	2700      	movs	r7, #0
 800e618:	9902      	ldr	r1, [sp, #8]
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	2201      	movs	r2, #1
 800e61e:	4648      	mov	r0, r9
 800e620:	f000 fa9a 	bl	800eb58 <__lshift>
 800e624:	4621      	mov	r1, r4
 800e626:	9002      	str	r0, [sp, #8]
 800e628:	f000 fb02 	bl	800ec30 <__mcmp>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	dcb4      	bgt.n	800e59a <_dtoa_r+0xa82>
 800e630:	d102      	bne.n	800e638 <_dtoa_r+0xb20>
 800e632:	9b00      	ldr	r3, [sp, #0]
 800e634:	07db      	lsls	r3, r3, #31
 800e636:	d4b0      	bmi.n	800e59a <_dtoa_r+0xa82>
 800e638:	4633      	mov	r3, r6
 800e63a:	461e      	mov	r6, r3
 800e63c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e640:	2a30      	cmp	r2, #48	@ 0x30
 800e642:	d0fa      	beq.n	800e63a <_dtoa_r+0xb22>
 800e644:	e4b5      	b.n	800dfb2 <_dtoa_r+0x49a>
 800e646:	459a      	cmp	sl, r3
 800e648:	d1a8      	bne.n	800e59c <_dtoa_r+0xa84>
 800e64a:	2331      	movs	r3, #49	@ 0x31
 800e64c:	f108 0801 	add.w	r8, r8, #1
 800e650:	f88a 3000 	strb.w	r3, [sl]
 800e654:	e4ad      	b.n	800dfb2 <_dtoa_r+0x49a>
 800e656:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e658:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e6b4 <_dtoa_r+0xb9c>
 800e65c:	b11b      	cbz	r3, 800e666 <_dtoa_r+0xb4e>
 800e65e:	f10a 0308 	add.w	r3, sl, #8
 800e662:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	4650      	mov	r0, sl
 800e668:	b017      	add	sp, #92	@ 0x5c
 800e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66e:	9b07      	ldr	r3, [sp, #28]
 800e670:	2b01      	cmp	r3, #1
 800e672:	f77f ae2e 	ble.w	800e2d2 <_dtoa_r+0x7ba>
 800e676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e678:	9308      	str	r3, [sp, #32]
 800e67a:	2001      	movs	r0, #1
 800e67c:	e64d      	b.n	800e31a <_dtoa_r+0x802>
 800e67e:	f1bb 0f00 	cmp.w	fp, #0
 800e682:	f77f aed9 	ble.w	800e438 <_dtoa_r+0x920>
 800e686:	4656      	mov	r6, sl
 800e688:	9802      	ldr	r0, [sp, #8]
 800e68a:	4621      	mov	r1, r4
 800e68c:	f7ff f9bb 	bl	800da06 <quorem>
 800e690:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e694:	f806 3b01 	strb.w	r3, [r6], #1
 800e698:	eba6 020a 	sub.w	r2, r6, sl
 800e69c:	4593      	cmp	fp, r2
 800e69e:	ddb4      	ble.n	800e60a <_dtoa_r+0xaf2>
 800e6a0:	9902      	ldr	r1, [sp, #8]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	220a      	movs	r2, #10
 800e6a6:	4648      	mov	r0, r9
 800e6a8:	f000 f8b2 	bl	800e810 <__multadd>
 800e6ac:	9002      	str	r0, [sp, #8]
 800e6ae:	e7eb      	b.n	800e688 <_dtoa_r+0xb70>
 800e6b0:	08010208 	.word	0x08010208
 800e6b4:	0801018c 	.word	0x0801018c

0800e6b8 <_free_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	2900      	cmp	r1, #0
 800e6be:	d041      	beq.n	800e744 <_free_r+0x8c>
 800e6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6c4:	1f0c      	subs	r4, r1, #4
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	bfb8      	it	lt
 800e6ca:	18e4      	addlt	r4, r4, r3
 800e6cc:	f7fe fa8a 	bl	800cbe4 <__malloc_lock>
 800e6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e748 <_free_r+0x90>)
 800e6d2:	6813      	ldr	r3, [r2, #0]
 800e6d4:	b933      	cbnz	r3, 800e6e4 <_free_r+0x2c>
 800e6d6:	6063      	str	r3, [r4, #4]
 800e6d8:	6014      	str	r4, [r2, #0]
 800e6da:	4628      	mov	r0, r5
 800e6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e0:	f7fe ba86 	b.w	800cbf0 <__malloc_unlock>
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d908      	bls.n	800e6fa <_free_r+0x42>
 800e6e8:	6820      	ldr	r0, [r4, #0]
 800e6ea:	1821      	adds	r1, r4, r0
 800e6ec:	428b      	cmp	r3, r1
 800e6ee:	bf01      	itttt	eq
 800e6f0:	6819      	ldreq	r1, [r3, #0]
 800e6f2:	685b      	ldreq	r3, [r3, #4]
 800e6f4:	1809      	addeq	r1, r1, r0
 800e6f6:	6021      	streq	r1, [r4, #0]
 800e6f8:	e7ed      	b.n	800e6d6 <_free_r+0x1e>
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	b10b      	cbz	r3, 800e704 <_free_r+0x4c>
 800e700:	42a3      	cmp	r3, r4
 800e702:	d9fa      	bls.n	800e6fa <_free_r+0x42>
 800e704:	6811      	ldr	r1, [r2, #0]
 800e706:	1850      	adds	r0, r2, r1
 800e708:	42a0      	cmp	r0, r4
 800e70a:	d10b      	bne.n	800e724 <_free_r+0x6c>
 800e70c:	6820      	ldr	r0, [r4, #0]
 800e70e:	4401      	add	r1, r0
 800e710:	1850      	adds	r0, r2, r1
 800e712:	4283      	cmp	r3, r0
 800e714:	6011      	str	r1, [r2, #0]
 800e716:	d1e0      	bne.n	800e6da <_free_r+0x22>
 800e718:	6818      	ldr	r0, [r3, #0]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	6053      	str	r3, [r2, #4]
 800e71e:	4408      	add	r0, r1
 800e720:	6010      	str	r0, [r2, #0]
 800e722:	e7da      	b.n	800e6da <_free_r+0x22>
 800e724:	d902      	bls.n	800e72c <_free_r+0x74>
 800e726:	230c      	movs	r3, #12
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	e7d6      	b.n	800e6da <_free_r+0x22>
 800e72c:	6820      	ldr	r0, [r4, #0]
 800e72e:	1821      	adds	r1, r4, r0
 800e730:	428b      	cmp	r3, r1
 800e732:	bf04      	itt	eq
 800e734:	6819      	ldreq	r1, [r3, #0]
 800e736:	685b      	ldreq	r3, [r3, #4]
 800e738:	6063      	str	r3, [r4, #4]
 800e73a:	bf04      	itt	eq
 800e73c:	1809      	addeq	r1, r1, r0
 800e73e:	6021      	streq	r1, [r4, #0]
 800e740:	6054      	str	r4, [r2, #4]
 800e742:	e7ca      	b.n	800e6da <_free_r+0x22>
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	bf00      	nop
 800e748:	200023b0 	.word	0x200023b0

0800e74c <_Balloc>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	69c6      	ldr	r6, [r0, #28]
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	b976      	cbnz	r6, 800e774 <_Balloc+0x28>
 800e756:	2010      	movs	r0, #16
 800e758:	f7fe f99a 	bl	800ca90 <malloc>
 800e75c:	4602      	mov	r2, r0
 800e75e:	61e0      	str	r0, [r4, #28]
 800e760:	b920      	cbnz	r0, 800e76c <_Balloc+0x20>
 800e762:	4b18      	ldr	r3, [pc, #96]	@ (800e7c4 <_Balloc+0x78>)
 800e764:	4818      	ldr	r0, [pc, #96]	@ (800e7c8 <_Balloc+0x7c>)
 800e766:	216b      	movs	r1, #107	@ 0x6b
 800e768:	f000 fe10 	bl	800f38c <__assert_func>
 800e76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e770:	6006      	str	r6, [r0, #0]
 800e772:	60c6      	str	r6, [r0, #12]
 800e774:	69e6      	ldr	r6, [r4, #28]
 800e776:	68f3      	ldr	r3, [r6, #12]
 800e778:	b183      	cbz	r3, 800e79c <_Balloc+0x50>
 800e77a:	69e3      	ldr	r3, [r4, #28]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e782:	b9b8      	cbnz	r0, 800e7b4 <_Balloc+0x68>
 800e784:	2101      	movs	r1, #1
 800e786:	fa01 f605 	lsl.w	r6, r1, r5
 800e78a:	1d72      	adds	r2, r6, #5
 800e78c:	0092      	lsls	r2, r2, #2
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 fe1a 	bl	800f3c8 <_calloc_r>
 800e794:	b160      	cbz	r0, 800e7b0 <_Balloc+0x64>
 800e796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e79a:	e00e      	b.n	800e7ba <_Balloc+0x6e>
 800e79c:	2221      	movs	r2, #33	@ 0x21
 800e79e:	2104      	movs	r1, #4
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f000 fe11 	bl	800f3c8 <_calloc_r>
 800e7a6:	69e3      	ldr	r3, [r4, #28]
 800e7a8:	60f0      	str	r0, [r6, #12]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e4      	bne.n	800e77a <_Balloc+0x2e>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	6802      	ldr	r2, [r0, #0]
 800e7b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7c0:	e7f7      	b.n	800e7b2 <_Balloc+0x66>
 800e7c2:	bf00      	nop
 800e7c4:	08010199 	.word	0x08010199
 800e7c8:	08010219 	.word	0x08010219

0800e7cc <_Bfree>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	69c6      	ldr	r6, [r0, #28]
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	b976      	cbnz	r6, 800e7f4 <_Bfree+0x28>
 800e7d6:	2010      	movs	r0, #16
 800e7d8:	f7fe f95a 	bl	800ca90 <malloc>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	61e8      	str	r0, [r5, #28]
 800e7e0:	b920      	cbnz	r0, 800e7ec <_Bfree+0x20>
 800e7e2:	4b09      	ldr	r3, [pc, #36]	@ (800e808 <_Bfree+0x3c>)
 800e7e4:	4809      	ldr	r0, [pc, #36]	@ (800e80c <_Bfree+0x40>)
 800e7e6:	218f      	movs	r1, #143	@ 0x8f
 800e7e8:	f000 fdd0 	bl	800f38c <__assert_func>
 800e7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f0:	6006      	str	r6, [r0, #0]
 800e7f2:	60c6      	str	r6, [r0, #12]
 800e7f4:	b13c      	cbz	r4, 800e806 <_Bfree+0x3a>
 800e7f6:	69eb      	ldr	r3, [r5, #28]
 800e7f8:	6862      	ldr	r2, [r4, #4]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e800:	6021      	str	r1, [r4, #0]
 800e802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	08010199 	.word	0x08010199
 800e80c:	08010219 	.word	0x08010219

0800e810 <__multadd>:
 800e810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e814:	690d      	ldr	r5, [r1, #16]
 800e816:	4607      	mov	r7, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	461e      	mov	r6, r3
 800e81c:	f101 0c14 	add.w	ip, r1, #20
 800e820:	2000      	movs	r0, #0
 800e822:	f8dc 3000 	ldr.w	r3, [ip]
 800e826:	b299      	uxth	r1, r3
 800e828:	fb02 6101 	mla	r1, r2, r1, r6
 800e82c:	0c1e      	lsrs	r6, r3, #16
 800e82e:	0c0b      	lsrs	r3, r1, #16
 800e830:	fb02 3306 	mla	r3, r2, r6, r3
 800e834:	b289      	uxth	r1, r1
 800e836:	3001      	adds	r0, #1
 800e838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e83c:	4285      	cmp	r5, r0
 800e83e:	f84c 1b04 	str.w	r1, [ip], #4
 800e842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e846:	dcec      	bgt.n	800e822 <__multadd+0x12>
 800e848:	b30e      	cbz	r6, 800e88e <__multadd+0x7e>
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	42ab      	cmp	r3, r5
 800e84e:	dc19      	bgt.n	800e884 <__multadd+0x74>
 800e850:	6861      	ldr	r1, [r4, #4]
 800e852:	4638      	mov	r0, r7
 800e854:	3101      	adds	r1, #1
 800e856:	f7ff ff79 	bl	800e74c <_Balloc>
 800e85a:	4680      	mov	r8, r0
 800e85c:	b928      	cbnz	r0, 800e86a <__multadd+0x5a>
 800e85e:	4602      	mov	r2, r0
 800e860:	4b0c      	ldr	r3, [pc, #48]	@ (800e894 <__multadd+0x84>)
 800e862:	480d      	ldr	r0, [pc, #52]	@ (800e898 <__multadd+0x88>)
 800e864:	21ba      	movs	r1, #186	@ 0xba
 800e866:	f000 fd91 	bl	800f38c <__assert_func>
 800e86a:	6922      	ldr	r2, [r4, #16]
 800e86c:	3202      	adds	r2, #2
 800e86e:	f104 010c 	add.w	r1, r4, #12
 800e872:	0092      	lsls	r2, r2, #2
 800e874:	300c      	adds	r0, #12
 800e876:	f7ff f8b8 	bl	800d9ea <memcpy>
 800e87a:	4621      	mov	r1, r4
 800e87c:	4638      	mov	r0, r7
 800e87e:	f7ff ffa5 	bl	800e7cc <_Bfree>
 800e882:	4644      	mov	r4, r8
 800e884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e888:	3501      	adds	r5, #1
 800e88a:	615e      	str	r6, [r3, #20]
 800e88c:	6125      	str	r5, [r4, #16]
 800e88e:	4620      	mov	r0, r4
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e894:	08010208 	.word	0x08010208
 800e898:	08010219 	.word	0x08010219

0800e89c <__hi0bits>:
 800e89c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	bf36      	itet	cc
 800e8a4:	0403      	lslcc	r3, r0, #16
 800e8a6:	2000      	movcs	r0, #0
 800e8a8:	2010      	movcc	r0, #16
 800e8aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e8ae:	bf3c      	itt	cc
 800e8b0:	021b      	lslcc	r3, r3, #8
 800e8b2:	3008      	addcc	r0, #8
 800e8b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8b8:	bf3c      	itt	cc
 800e8ba:	011b      	lslcc	r3, r3, #4
 800e8bc:	3004      	addcc	r0, #4
 800e8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8c2:	bf3c      	itt	cc
 800e8c4:	009b      	lslcc	r3, r3, #2
 800e8c6:	3002      	addcc	r0, #2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	db05      	blt.n	800e8d8 <__hi0bits+0x3c>
 800e8cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e8d0:	f100 0001 	add.w	r0, r0, #1
 800e8d4:	bf08      	it	eq
 800e8d6:	2020      	moveq	r0, #32
 800e8d8:	4770      	bx	lr

0800e8da <__lo0bits>:
 800e8da:	6803      	ldr	r3, [r0, #0]
 800e8dc:	4602      	mov	r2, r0
 800e8de:	f013 0007 	ands.w	r0, r3, #7
 800e8e2:	d00b      	beq.n	800e8fc <__lo0bits+0x22>
 800e8e4:	07d9      	lsls	r1, r3, #31
 800e8e6:	d421      	bmi.n	800e92c <__lo0bits+0x52>
 800e8e8:	0798      	lsls	r0, r3, #30
 800e8ea:	bf49      	itett	mi
 800e8ec:	085b      	lsrmi	r3, r3, #1
 800e8ee:	089b      	lsrpl	r3, r3, #2
 800e8f0:	2001      	movmi	r0, #1
 800e8f2:	6013      	strmi	r3, [r2, #0]
 800e8f4:	bf5c      	itt	pl
 800e8f6:	6013      	strpl	r3, [r2, #0]
 800e8f8:	2002      	movpl	r0, #2
 800e8fa:	4770      	bx	lr
 800e8fc:	b299      	uxth	r1, r3
 800e8fe:	b909      	cbnz	r1, 800e904 <__lo0bits+0x2a>
 800e900:	0c1b      	lsrs	r3, r3, #16
 800e902:	2010      	movs	r0, #16
 800e904:	b2d9      	uxtb	r1, r3
 800e906:	b909      	cbnz	r1, 800e90c <__lo0bits+0x32>
 800e908:	3008      	adds	r0, #8
 800e90a:	0a1b      	lsrs	r3, r3, #8
 800e90c:	0719      	lsls	r1, r3, #28
 800e90e:	bf04      	itt	eq
 800e910:	091b      	lsreq	r3, r3, #4
 800e912:	3004      	addeq	r0, #4
 800e914:	0799      	lsls	r1, r3, #30
 800e916:	bf04      	itt	eq
 800e918:	089b      	lsreq	r3, r3, #2
 800e91a:	3002      	addeq	r0, #2
 800e91c:	07d9      	lsls	r1, r3, #31
 800e91e:	d403      	bmi.n	800e928 <__lo0bits+0x4e>
 800e920:	085b      	lsrs	r3, r3, #1
 800e922:	f100 0001 	add.w	r0, r0, #1
 800e926:	d003      	beq.n	800e930 <__lo0bits+0x56>
 800e928:	6013      	str	r3, [r2, #0]
 800e92a:	4770      	bx	lr
 800e92c:	2000      	movs	r0, #0
 800e92e:	4770      	bx	lr
 800e930:	2020      	movs	r0, #32
 800e932:	4770      	bx	lr

0800e934 <__i2b>:
 800e934:	b510      	push	{r4, lr}
 800e936:	460c      	mov	r4, r1
 800e938:	2101      	movs	r1, #1
 800e93a:	f7ff ff07 	bl	800e74c <_Balloc>
 800e93e:	4602      	mov	r2, r0
 800e940:	b928      	cbnz	r0, 800e94e <__i2b+0x1a>
 800e942:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <__i2b+0x24>)
 800e944:	4805      	ldr	r0, [pc, #20]	@ (800e95c <__i2b+0x28>)
 800e946:	f240 1145 	movw	r1, #325	@ 0x145
 800e94a:	f000 fd1f 	bl	800f38c <__assert_func>
 800e94e:	2301      	movs	r3, #1
 800e950:	6144      	str	r4, [r0, #20]
 800e952:	6103      	str	r3, [r0, #16]
 800e954:	bd10      	pop	{r4, pc}
 800e956:	bf00      	nop
 800e958:	08010208 	.word	0x08010208
 800e95c:	08010219 	.word	0x08010219

0800e960 <__multiply>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	4617      	mov	r7, r2
 800e966:	690a      	ldr	r2, [r1, #16]
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	bfa8      	it	ge
 800e96e:	463b      	movge	r3, r7
 800e970:	4689      	mov	r9, r1
 800e972:	bfa4      	itt	ge
 800e974:	460f      	movge	r7, r1
 800e976:	4699      	movge	r9, r3
 800e978:	693d      	ldr	r5, [r7, #16]
 800e97a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	6879      	ldr	r1, [r7, #4]
 800e982:	eb05 060a 	add.w	r6, r5, sl
 800e986:	42b3      	cmp	r3, r6
 800e988:	b085      	sub	sp, #20
 800e98a:	bfb8      	it	lt
 800e98c:	3101      	addlt	r1, #1
 800e98e:	f7ff fedd 	bl	800e74c <_Balloc>
 800e992:	b930      	cbnz	r0, 800e9a2 <__multiply+0x42>
 800e994:	4602      	mov	r2, r0
 800e996:	4b41      	ldr	r3, [pc, #260]	@ (800ea9c <__multiply+0x13c>)
 800e998:	4841      	ldr	r0, [pc, #260]	@ (800eaa0 <__multiply+0x140>)
 800e99a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e99e:	f000 fcf5 	bl	800f38c <__assert_func>
 800e9a2:	f100 0414 	add.w	r4, r0, #20
 800e9a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e9aa:	4623      	mov	r3, r4
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	4573      	cmp	r3, lr
 800e9b0:	d320      	bcc.n	800e9f4 <__multiply+0x94>
 800e9b2:	f107 0814 	add.w	r8, r7, #20
 800e9b6:	f109 0114 	add.w	r1, r9, #20
 800e9ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e9be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e9c2:	9302      	str	r3, [sp, #8]
 800e9c4:	1beb      	subs	r3, r5, r7
 800e9c6:	3b15      	subs	r3, #21
 800e9c8:	f023 0303 	bic.w	r3, r3, #3
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	3715      	adds	r7, #21
 800e9d0:	42bd      	cmp	r5, r7
 800e9d2:	bf38      	it	cc
 800e9d4:	2304      	movcc	r3, #4
 800e9d6:	9301      	str	r3, [sp, #4]
 800e9d8:	9b02      	ldr	r3, [sp, #8]
 800e9da:	9103      	str	r1, [sp, #12]
 800e9dc:	428b      	cmp	r3, r1
 800e9de:	d80c      	bhi.n	800e9fa <__multiply+0x9a>
 800e9e0:	2e00      	cmp	r6, #0
 800e9e2:	dd03      	ble.n	800e9ec <__multiply+0x8c>
 800e9e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d055      	beq.n	800ea98 <__multiply+0x138>
 800e9ec:	6106      	str	r6, [r0, #16]
 800e9ee:	b005      	add	sp, #20
 800e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	f843 2b04 	str.w	r2, [r3], #4
 800e9f8:	e7d9      	b.n	800e9ae <__multiply+0x4e>
 800e9fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800e9fe:	f1ba 0f00 	cmp.w	sl, #0
 800ea02:	d01f      	beq.n	800ea44 <__multiply+0xe4>
 800ea04:	46c4      	mov	ip, r8
 800ea06:	46a1      	mov	r9, r4
 800ea08:	2700      	movs	r7, #0
 800ea0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ea0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ea12:	fa1f fb82 	uxth.w	fp, r2
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	fb0a 330b 	mla	r3, sl, fp, r3
 800ea1c:	443b      	add	r3, r7
 800ea1e:	f8d9 7000 	ldr.w	r7, [r9]
 800ea22:	0c12      	lsrs	r2, r2, #16
 800ea24:	0c3f      	lsrs	r7, r7, #16
 800ea26:	fb0a 7202 	mla	r2, sl, r2, r7
 800ea2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea34:	4565      	cmp	r5, ip
 800ea36:	f849 3b04 	str.w	r3, [r9], #4
 800ea3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ea3e:	d8e4      	bhi.n	800ea0a <__multiply+0xaa>
 800ea40:	9b01      	ldr	r3, [sp, #4]
 800ea42:	50e7      	str	r7, [r4, r3]
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ea4a:	3104      	adds	r1, #4
 800ea4c:	f1b9 0f00 	cmp.w	r9, #0
 800ea50:	d020      	beq.n	800ea94 <__multiply+0x134>
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	4647      	mov	r7, r8
 800ea56:	46a4      	mov	ip, r4
 800ea58:	f04f 0a00 	mov.w	sl, #0
 800ea5c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ea60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ea64:	fb09 220b 	mla	r2, r9, fp, r2
 800ea68:	4452      	add	r2, sl
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea70:	f84c 3b04 	str.w	r3, [ip], #4
 800ea74:	f857 3b04 	ldr.w	r3, [r7], #4
 800ea78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea7c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ea80:	fb09 330a 	mla	r3, r9, sl, r3
 800ea84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ea88:	42bd      	cmp	r5, r7
 800ea8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea8e:	d8e5      	bhi.n	800ea5c <__multiply+0xfc>
 800ea90:	9a01      	ldr	r2, [sp, #4]
 800ea92:	50a3      	str	r3, [r4, r2]
 800ea94:	3404      	adds	r4, #4
 800ea96:	e79f      	b.n	800e9d8 <__multiply+0x78>
 800ea98:	3e01      	subs	r6, #1
 800ea9a:	e7a1      	b.n	800e9e0 <__multiply+0x80>
 800ea9c:	08010208 	.word	0x08010208
 800eaa0:	08010219 	.word	0x08010219

0800eaa4 <__pow5mult>:
 800eaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	4615      	mov	r5, r2
 800eaaa:	f012 0203 	ands.w	r2, r2, #3
 800eaae:	4607      	mov	r7, r0
 800eab0:	460e      	mov	r6, r1
 800eab2:	d007      	beq.n	800eac4 <__pow5mult+0x20>
 800eab4:	4c25      	ldr	r4, [pc, #148]	@ (800eb4c <__pow5mult+0xa8>)
 800eab6:	3a01      	subs	r2, #1
 800eab8:	2300      	movs	r3, #0
 800eaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eabe:	f7ff fea7 	bl	800e810 <__multadd>
 800eac2:	4606      	mov	r6, r0
 800eac4:	10ad      	asrs	r5, r5, #2
 800eac6:	d03d      	beq.n	800eb44 <__pow5mult+0xa0>
 800eac8:	69fc      	ldr	r4, [r7, #28]
 800eaca:	b97c      	cbnz	r4, 800eaec <__pow5mult+0x48>
 800eacc:	2010      	movs	r0, #16
 800eace:	f7fd ffdf 	bl	800ca90 <malloc>
 800ead2:	4602      	mov	r2, r0
 800ead4:	61f8      	str	r0, [r7, #28]
 800ead6:	b928      	cbnz	r0, 800eae4 <__pow5mult+0x40>
 800ead8:	4b1d      	ldr	r3, [pc, #116]	@ (800eb50 <__pow5mult+0xac>)
 800eada:	481e      	ldr	r0, [pc, #120]	@ (800eb54 <__pow5mult+0xb0>)
 800eadc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eae0:	f000 fc54 	bl	800f38c <__assert_func>
 800eae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eae8:	6004      	str	r4, [r0, #0]
 800eaea:	60c4      	str	r4, [r0, #12]
 800eaec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eaf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eaf4:	b94c      	cbnz	r4, 800eb0a <__pow5mult+0x66>
 800eaf6:	f240 2171 	movw	r1, #625	@ 0x271
 800eafa:	4638      	mov	r0, r7
 800eafc:	f7ff ff1a 	bl	800e934 <__i2b>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb06:	4604      	mov	r4, r0
 800eb08:	6003      	str	r3, [r0, #0]
 800eb0a:	f04f 0900 	mov.w	r9, #0
 800eb0e:	07eb      	lsls	r3, r5, #31
 800eb10:	d50a      	bpl.n	800eb28 <__pow5mult+0x84>
 800eb12:	4631      	mov	r1, r6
 800eb14:	4622      	mov	r2, r4
 800eb16:	4638      	mov	r0, r7
 800eb18:	f7ff ff22 	bl	800e960 <__multiply>
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4680      	mov	r8, r0
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff fe53 	bl	800e7cc <_Bfree>
 800eb26:	4646      	mov	r6, r8
 800eb28:	106d      	asrs	r5, r5, #1
 800eb2a:	d00b      	beq.n	800eb44 <__pow5mult+0xa0>
 800eb2c:	6820      	ldr	r0, [r4, #0]
 800eb2e:	b938      	cbnz	r0, 800eb40 <__pow5mult+0x9c>
 800eb30:	4622      	mov	r2, r4
 800eb32:	4621      	mov	r1, r4
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff ff13 	bl	800e960 <__multiply>
 800eb3a:	6020      	str	r0, [r4, #0]
 800eb3c:	f8c0 9000 	str.w	r9, [r0]
 800eb40:	4604      	mov	r4, r0
 800eb42:	e7e4      	b.n	800eb0e <__pow5mult+0x6a>
 800eb44:	4630      	mov	r0, r6
 800eb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb4a:	bf00      	nop
 800eb4c:	080102cc 	.word	0x080102cc
 800eb50:	08010199 	.word	0x08010199
 800eb54:	08010219 	.word	0x08010219

0800eb58 <__lshift>:
 800eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	6849      	ldr	r1, [r1, #4]
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb66:	68a3      	ldr	r3, [r4, #8]
 800eb68:	4607      	mov	r7, r0
 800eb6a:	4691      	mov	r9, r2
 800eb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb70:	f108 0601 	add.w	r6, r8, #1
 800eb74:	42b3      	cmp	r3, r6
 800eb76:	db0b      	blt.n	800eb90 <__lshift+0x38>
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f7ff fde7 	bl	800e74c <_Balloc>
 800eb7e:	4605      	mov	r5, r0
 800eb80:	b948      	cbnz	r0, 800eb96 <__lshift+0x3e>
 800eb82:	4602      	mov	r2, r0
 800eb84:	4b28      	ldr	r3, [pc, #160]	@ (800ec28 <__lshift+0xd0>)
 800eb86:	4829      	ldr	r0, [pc, #164]	@ (800ec2c <__lshift+0xd4>)
 800eb88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb8c:	f000 fbfe 	bl	800f38c <__assert_func>
 800eb90:	3101      	adds	r1, #1
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	e7ee      	b.n	800eb74 <__lshift+0x1c>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f100 0114 	add.w	r1, r0, #20
 800eb9c:	f100 0210 	add.w	r2, r0, #16
 800eba0:	4618      	mov	r0, r3
 800eba2:	4553      	cmp	r3, sl
 800eba4:	db33      	blt.n	800ec0e <__lshift+0xb6>
 800eba6:	6920      	ldr	r0, [r4, #16]
 800eba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebac:	f104 0314 	add.w	r3, r4, #20
 800ebb0:	f019 091f 	ands.w	r9, r9, #31
 800ebb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebbc:	d02b      	beq.n	800ec16 <__lshift+0xbe>
 800ebbe:	f1c9 0e20 	rsb	lr, r9, #32
 800ebc2:	468a      	mov	sl, r1
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	6818      	ldr	r0, [r3, #0]
 800ebc8:	fa00 f009 	lsl.w	r0, r0, r9
 800ebcc:	4310      	orrs	r0, r2
 800ebce:	f84a 0b04 	str.w	r0, [sl], #4
 800ebd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd6:	459c      	cmp	ip, r3
 800ebd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebdc:	d8f3      	bhi.n	800ebc6 <__lshift+0x6e>
 800ebde:	ebac 0304 	sub.w	r3, ip, r4
 800ebe2:	3b15      	subs	r3, #21
 800ebe4:	f023 0303 	bic.w	r3, r3, #3
 800ebe8:	3304      	adds	r3, #4
 800ebea:	f104 0015 	add.w	r0, r4, #21
 800ebee:	4560      	cmp	r0, ip
 800ebf0:	bf88      	it	hi
 800ebf2:	2304      	movhi	r3, #4
 800ebf4:	50ca      	str	r2, [r1, r3]
 800ebf6:	b10a      	cbz	r2, 800ebfc <__lshift+0xa4>
 800ebf8:	f108 0602 	add.w	r6, r8, #2
 800ebfc:	3e01      	subs	r6, #1
 800ebfe:	4638      	mov	r0, r7
 800ec00:	612e      	str	r6, [r5, #16]
 800ec02:	4621      	mov	r1, r4
 800ec04:	f7ff fde2 	bl	800e7cc <_Bfree>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec12:	3301      	adds	r3, #1
 800ec14:	e7c5      	b.n	800eba2 <__lshift+0x4a>
 800ec16:	3904      	subs	r1, #4
 800ec18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec20:	459c      	cmp	ip, r3
 800ec22:	d8f9      	bhi.n	800ec18 <__lshift+0xc0>
 800ec24:	e7ea      	b.n	800ebfc <__lshift+0xa4>
 800ec26:	bf00      	nop
 800ec28:	08010208 	.word	0x08010208
 800ec2c:	08010219 	.word	0x08010219

0800ec30 <__mcmp>:
 800ec30:	690a      	ldr	r2, [r1, #16]
 800ec32:	4603      	mov	r3, r0
 800ec34:	6900      	ldr	r0, [r0, #16]
 800ec36:	1a80      	subs	r0, r0, r2
 800ec38:	b530      	push	{r4, r5, lr}
 800ec3a:	d10e      	bne.n	800ec5a <__mcmp+0x2a>
 800ec3c:	3314      	adds	r3, #20
 800ec3e:	3114      	adds	r1, #20
 800ec40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ec44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ec48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec50:	4295      	cmp	r5, r2
 800ec52:	d003      	beq.n	800ec5c <__mcmp+0x2c>
 800ec54:	d205      	bcs.n	800ec62 <__mcmp+0x32>
 800ec56:	f04f 30ff 	mov.w	r0, #4294967295
 800ec5a:	bd30      	pop	{r4, r5, pc}
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d3f3      	bcc.n	800ec48 <__mcmp+0x18>
 800ec60:	e7fb      	b.n	800ec5a <__mcmp+0x2a>
 800ec62:	2001      	movs	r0, #1
 800ec64:	e7f9      	b.n	800ec5a <__mcmp+0x2a>
	...

0800ec68 <__mdiff>:
 800ec68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	4689      	mov	r9, r1
 800ec6e:	4606      	mov	r6, r0
 800ec70:	4611      	mov	r1, r2
 800ec72:	4648      	mov	r0, r9
 800ec74:	4614      	mov	r4, r2
 800ec76:	f7ff ffdb 	bl	800ec30 <__mcmp>
 800ec7a:	1e05      	subs	r5, r0, #0
 800ec7c:	d112      	bne.n	800eca4 <__mdiff+0x3c>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7ff fd63 	bl	800e74c <_Balloc>
 800ec86:	4602      	mov	r2, r0
 800ec88:	b928      	cbnz	r0, 800ec96 <__mdiff+0x2e>
 800ec8a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed88 <__mdiff+0x120>)
 800ec8c:	f240 2137 	movw	r1, #567	@ 0x237
 800ec90:	483e      	ldr	r0, [pc, #248]	@ (800ed8c <__mdiff+0x124>)
 800ec92:	f000 fb7b 	bl	800f38c <__assert_func>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	b003      	add	sp, #12
 800eca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca4:	bfbc      	itt	lt
 800eca6:	464b      	movlt	r3, r9
 800eca8:	46a1      	movlt	r9, r4
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ecb0:	bfba      	itte	lt
 800ecb2:	461c      	movlt	r4, r3
 800ecb4:	2501      	movlt	r5, #1
 800ecb6:	2500      	movge	r5, #0
 800ecb8:	f7ff fd48 	bl	800e74c <_Balloc>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	b918      	cbnz	r0, 800ecc8 <__mdiff+0x60>
 800ecc0:	4b31      	ldr	r3, [pc, #196]	@ (800ed88 <__mdiff+0x120>)
 800ecc2:	f240 2145 	movw	r1, #581	@ 0x245
 800ecc6:	e7e3      	b.n	800ec90 <__mdiff+0x28>
 800ecc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eccc:	6926      	ldr	r6, [r4, #16]
 800ecce:	60c5      	str	r5, [r0, #12]
 800ecd0:	f109 0310 	add.w	r3, r9, #16
 800ecd4:	f109 0514 	add.w	r5, r9, #20
 800ecd8:	f104 0e14 	add.w	lr, r4, #20
 800ecdc:	f100 0b14 	add.w	fp, r0, #20
 800ece0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ece4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ece8:	9301      	str	r3, [sp, #4]
 800ecea:	46d9      	mov	r9, fp
 800ecec:	f04f 0c00 	mov.w	ip, #0
 800ecf0:	9b01      	ldr	r3, [sp, #4]
 800ecf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ecf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ecfa:	9301      	str	r3, [sp, #4]
 800ecfc:	fa1f f38a 	uxth.w	r3, sl
 800ed00:	4619      	mov	r1, r3
 800ed02:	b283      	uxth	r3, r0
 800ed04:	1acb      	subs	r3, r1, r3
 800ed06:	0c00      	lsrs	r0, r0, #16
 800ed08:	4463      	add	r3, ip
 800ed0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ed0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ed18:	4576      	cmp	r6, lr
 800ed1a:	f849 3b04 	str.w	r3, [r9], #4
 800ed1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed22:	d8e5      	bhi.n	800ecf0 <__mdiff+0x88>
 800ed24:	1b33      	subs	r3, r6, r4
 800ed26:	3b15      	subs	r3, #21
 800ed28:	f023 0303 	bic.w	r3, r3, #3
 800ed2c:	3415      	adds	r4, #21
 800ed2e:	3304      	adds	r3, #4
 800ed30:	42a6      	cmp	r6, r4
 800ed32:	bf38      	it	cc
 800ed34:	2304      	movcc	r3, #4
 800ed36:	441d      	add	r5, r3
 800ed38:	445b      	add	r3, fp
 800ed3a:	461e      	mov	r6, r3
 800ed3c:	462c      	mov	r4, r5
 800ed3e:	4544      	cmp	r4, r8
 800ed40:	d30e      	bcc.n	800ed60 <__mdiff+0xf8>
 800ed42:	f108 0103 	add.w	r1, r8, #3
 800ed46:	1b49      	subs	r1, r1, r5
 800ed48:	f021 0103 	bic.w	r1, r1, #3
 800ed4c:	3d03      	subs	r5, #3
 800ed4e:	45a8      	cmp	r8, r5
 800ed50:	bf38      	it	cc
 800ed52:	2100      	movcc	r1, #0
 800ed54:	440b      	add	r3, r1
 800ed56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed5a:	b191      	cbz	r1, 800ed82 <__mdiff+0x11a>
 800ed5c:	6117      	str	r7, [r2, #16]
 800ed5e:	e79d      	b.n	800ec9c <__mdiff+0x34>
 800ed60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ed64:	46e6      	mov	lr, ip
 800ed66:	0c08      	lsrs	r0, r1, #16
 800ed68:	fa1c fc81 	uxtah	ip, ip, r1
 800ed6c:	4471      	add	r1, lr
 800ed6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ed72:	b289      	uxth	r1, r1
 800ed74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed78:	f846 1b04 	str.w	r1, [r6], #4
 800ed7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed80:	e7dd      	b.n	800ed3e <__mdiff+0xd6>
 800ed82:	3f01      	subs	r7, #1
 800ed84:	e7e7      	b.n	800ed56 <__mdiff+0xee>
 800ed86:	bf00      	nop
 800ed88:	08010208 	.word	0x08010208
 800ed8c:	08010219 	.word	0x08010219

0800ed90 <__d2b>:
 800ed90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed94:	460f      	mov	r7, r1
 800ed96:	2101      	movs	r1, #1
 800ed98:	ec59 8b10 	vmov	r8, r9, d0
 800ed9c:	4616      	mov	r6, r2
 800ed9e:	f7ff fcd5 	bl	800e74c <_Balloc>
 800eda2:	4604      	mov	r4, r0
 800eda4:	b930      	cbnz	r0, 800edb4 <__d2b+0x24>
 800eda6:	4602      	mov	r2, r0
 800eda8:	4b23      	ldr	r3, [pc, #140]	@ (800ee38 <__d2b+0xa8>)
 800edaa:	4824      	ldr	r0, [pc, #144]	@ (800ee3c <__d2b+0xac>)
 800edac:	f240 310f 	movw	r1, #783	@ 0x30f
 800edb0:	f000 faec 	bl	800f38c <__assert_func>
 800edb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800edb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edbc:	b10d      	cbz	r5, 800edc2 <__d2b+0x32>
 800edbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	f1b8 0300 	subs.w	r3, r8, #0
 800edc8:	d023      	beq.n	800ee12 <__d2b+0x82>
 800edca:	4668      	mov	r0, sp
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	f7ff fd84 	bl	800e8da <__lo0bits>
 800edd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800edd6:	b1d0      	cbz	r0, 800ee0e <__d2b+0x7e>
 800edd8:	f1c0 0320 	rsb	r3, r0, #32
 800eddc:	fa02 f303 	lsl.w	r3, r2, r3
 800ede0:	430b      	orrs	r3, r1
 800ede2:	40c2      	lsrs	r2, r0
 800ede4:	6163      	str	r3, [r4, #20]
 800ede6:	9201      	str	r2, [sp, #4]
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	61a3      	str	r3, [r4, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	bf0c      	ite	eq
 800edf0:	2201      	moveq	r2, #1
 800edf2:	2202      	movne	r2, #2
 800edf4:	6122      	str	r2, [r4, #16]
 800edf6:	b1a5      	cbz	r5, 800ee22 <__d2b+0x92>
 800edf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800edfc:	4405      	add	r5, r0
 800edfe:	603d      	str	r5, [r7, #0]
 800ee00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ee04:	6030      	str	r0, [r6, #0]
 800ee06:	4620      	mov	r0, r4
 800ee08:	b003      	add	sp, #12
 800ee0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	6161      	str	r1, [r4, #20]
 800ee10:	e7ea      	b.n	800ede8 <__d2b+0x58>
 800ee12:	a801      	add	r0, sp, #4
 800ee14:	f7ff fd61 	bl	800e8da <__lo0bits>
 800ee18:	9b01      	ldr	r3, [sp, #4]
 800ee1a:	6163      	str	r3, [r4, #20]
 800ee1c:	3020      	adds	r0, #32
 800ee1e:	2201      	movs	r2, #1
 800ee20:	e7e8      	b.n	800edf4 <__d2b+0x64>
 800ee22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ee2a:	6038      	str	r0, [r7, #0]
 800ee2c:	6918      	ldr	r0, [r3, #16]
 800ee2e:	f7ff fd35 	bl	800e89c <__hi0bits>
 800ee32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee36:	e7e5      	b.n	800ee04 <__d2b+0x74>
 800ee38:	08010208 	.word	0x08010208
 800ee3c:	08010219 	.word	0x08010219

0800ee40 <__sfputc_r>:
 800ee40:	6893      	ldr	r3, [r2, #8]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	b410      	push	{r4}
 800ee48:	6093      	str	r3, [r2, #8]
 800ee4a:	da08      	bge.n	800ee5e <__sfputc_r+0x1e>
 800ee4c:	6994      	ldr	r4, [r2, #24]
 800ee4e:	42a3      	cmp	r3, r4
 800ee50:	db01      	blt.n	800ee56 <__sfputc_r+0x16>
 800ee52:	290a      	cmp	r1, #10
 800ee54:	d103      	bne.n	800ee5e <__sfputc_r+0x1e>
 800ee56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee5a:	f7fe bca2 	b.w	800d7a2 <__swbuf_r>
 800ee5e:	6813      	ldr	r3, [r2, #0]
 800ee60:	1c58      	adds	r0, r3, #1
 800ee62:	6010      	str	r0, [r2, #0]
 800ee64:	7019      	strb	r1, [r3, #0]
 800ee66:	4608      	mov	r0, r1
 800ee68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <__sfputs_r>:
 800ee6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee70:	4606      	mov	r6, r0
 800ee72:	460f      	mov	r7, r1
 800ee74:	4614      	mov	r4, r2
 800ee76:	18d5      	adds	r5, r2, r3
 800ee78:	42ac      	cmp	r4, r5
 800ee7a:	d101      	bne.n	800ee80 <__sfputs_r+0x12>
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	e007      	b.n	800ee90 <__sfputs_r+0x22>
 800ee80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee84:	463a      	mov	r2, r7
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7ff ffda 	bl	800ee40 <__sfputc_r>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d1f3      	bne.n	800ee78 <__sfputs_r+0xa>
 800ee90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee94 <_vfiprintf_r>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	460d      	mov	r5, r1
 800ee9a:	b09d      	sub	sp, #116	@ 0x74
 800ee9c:	4614      	mov	r4, r2
 800ee9e:	4698      	mov	r8, r3
 800eea0:	4606      	mov	r6, r0
 800eea2:	b118      	cbz	r0, 800eeac <_vfiprintf_r+0x18>
 800eea4:	6a03      	ldr	r3, [r0, #32]
 800eea6:	b90b      	cbnz	r3, 800eeac <_vfiprintf_r+0x18>
 800eea8:	f7fe fb8a 	bl	800d5c0 <__sinit>
 800eeac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeae:	07d9      	lsls	r1, r3, #31
 800eeb0:	d405      	bmi.n	800eebe <_vfiprintf_r+0x2a>
 800eeb2:	89ab      	ldrh	r3, [r5, #12]
 800eeb4:	059a      	lsls	r2, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_vfiprintf_r+0x2a>
 800eeb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeba:	f7fe fd94 	bl	800d9e6 <__retarget_lock_acquire_recursive>
 800eebe:	89ab      	ldrh	r3, [r5, #12]
 800eec0:	071b      	lsls	r3, r3, #28
 800eec2:	d501      	bpl.n	800eec8 <_vfiprintf_r+0x34>
 800eec4:	692b      	ldr	r3, [r5, #16]
 800eec6:	b99b      	cbnz	r3, 800eef0 <_vfiprintf_r+0x5c>
 800eec8:	4629      	mov	r1, r5
 800eeca:	4630      	mov	r0, r6
 800eecc:	f7fe fca8 	bl	800d820 <__swsetup_r>
 800eed0:	b170      	cbz	r0, 800eef0 <_vfiprintf_r+0x5c>
 800eed2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eed4:	07dc      	lsls	r4, r3, #31
 800eed6:	d504      	bpl.n	800eee2 <_vfiprintf_r+0x4e>
 800eed8:	f04f 30ff 	mov.w	r0, #4294967295
 800eedc:	b01d      	add	sp, #116	@ 0x74
 800eede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee2:	89ab      	ldrh	r3, [r5, #12]
 800eee4:	0598      	lsls	r0, r3, #22
 800eee6:	d4f7      	bmi.n	800eed8 <_vfiprintf_r+0x44>
 800eee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeea:	f7fe fd7d 	bl	800d9e8 <__retarget_lock_release_recursive>
 800eeee:	e7f3      	b.n	800eed8 <_vfiprintf_r+0x44>
 800eef0:	2300      	movs	r3, #0
 800eef2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eef4:	2320      	movs	r3, #32
 800eef6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eefa:	f8cd 800c 	str.w	r8, [sp, #12]
 800eefe:	2330      	movs	r3, #48	@ 0x30
 800ef00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f0b0 <_vfiprintf_r+0x21c>
 800ef04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef08:	f04f 0901 	mov.w	r9, #1
 800ef0c:	4623      	mov	r3, r4
 800ef0e:	469a      	mov	sl, r3
 800ef10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef14:	b10a      	cbz	r2, 800ef1a <_vfiprintf_r+0x86>
 800ef16:	2a25      	cmp	r2, #37	@ 0x25
 800ef18:	d1f9      	bne.n	800ef0e <_vfiprintf_r+0x7a>
 800ef1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ef1e:	d00b      	beq.n	800ef38 <_vfiprintf_r+0xa4>
 800ef20:	465b      	mov	r3, fp
 800ef22:	4622      	mov	r2, r4
 800ef24:	4629      	mov	r1, r5
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff ffa1 	bl	800ee6e <__sfputs_r>
 800ef2c:	3001      	adds	r0, #1
 800ef2e:	f000 80a7 	beq.w	800f080 <_vfiprintf_r+0x1ec>
 800ef32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef34:	445a      	add	r2, fp
 800ef36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef38:	f89a 3000 	ldrb.w	r3, [sl]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f000 809f 	beq.w	800f080 <_vfiprintf_r+0x1ec>
 800ef42:	2300      	movs	r3, #0
 800ef44:	f04f 32ff 	mov.w	r2, #4294967295
 800ef48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef4c:	f10a 0a01 	add.w	sl, sl, #1
 800ef50:	9304      	str	r3, [sp, #16]
 800ef52:	9307      	str	r3, [sp, #28]
 800ef54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef5a:	4654      	mov	r4, sl
 800ef5c:	2205      	movs	r2, #5
 800ef5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef62:	4853      	ldr	r0, [pc, #332]	@ (800f0b0 <_vfiprintf_r+0x21c>)
 800ef64:	f7f1 f934 	bl	80001d0 <memchr>
 800ef68:	9a04      	ldr	r2, [sp, #16]
 800ef6a:	b9d8      	cbnz	r0, 800efa4 <_vfiprintf_r+0x110>
 800ef6c:	06d1      	lsls	r1, r2, #27
 800ef6e:	bf44      	itt	mi
 800ef70:	2320      	movmi	r3, #32
 800ef72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef76:	0713      	lsls	r3, r2, #28
 800ef78:	bf44      	itt	mi
 800ef7a:	232b      	movmi	r3, #43	@ 0x2b
 800ef7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef80:	f89a 3000 	ldrb.w	r3, [sl]
 800ef84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef86:	d015      	beq.n	800efb4 <_vfiprintf_r+0x120>
 800ef88:	9a07      	ldr	r2, [sp, #28]
 800ef8a:	4654      	mov	r4, sl
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f04f 0c0a 	mov.w	ip, #10
 800ef92:	4621      	mov	r1, r4
 800ef94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef98:	3b30      	subs	r3, #48	@ 0x30
 800ef9a:	2b09      	cmp	r3, #9
 800ef9c:	d94b      	bls.n	800f036 <_vfiprintf_r+0x1a2>
 800ef9e:	b1b0      	cbz	r0, 800efce <_vfiprintf_r+0x13a>
 800efa0:	9207      	str	r2, [sp, #28]
 800efa2:	e014      	b.n	800efce <_vfiprintf_r+0x13a>
 800efa4:	eba0 0308 	sub.w	r3, r0, r8
 800efa8:	fa09 f303 	lsl.w	r3, r9, r3
 800efac:	4313      	orrs	r3, r2
 800efae:	9304      	str	r3, [sp, #16]
 800efb0:	46a2      	mov	sl, r4
 800efb2:	e7d2      	b.n	800ef5a <_vfiprintf_r+0xc6>
 800efb4:	9b03      	ldr	r3, [sp, #12]
 800efb6:	1d19      	adds	r1, r3, #4
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	9103      	str	r1, [sp, #12]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bfbb      	ittet	lt
 800efc0:	425b      	neglt	r3, r3
 800efc2:	f042 0202 	orrlt.w	r2, r2, #2
 800efc6:	9307      	strge	r3, [sp, #28]
 800efc8:	9307      	strlt	r3, [sp, #28]
 800efca:	bfb8      	it	lt
 800efcc:	9204      	strlt	r2, [sp, #16]
 800efce:	7823      	ldrb	r3, [r4, #0]
 800efd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800efd2:	d10a      	bne.n	800efea <_vfiprintf_r+0x156>
 800efd4:	7863      	ldrb	r3, [r4, #1]
 800efd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800efd8:	d132      	bne.n	800f040 <_vfiprintf_r+0x1ac>
 800efda:	9b03      	ldr	r3, [sp, #12]
 800efdc:	1d1a      	adds	r2, r3, #4
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	9203      	str	r2, [sp, #12]
 800efe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efe6:	3402      	adds	r4, #2
 800efe8:	9305      	str	r3, [sp, #20]
 800efea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0c0 <_vfiprintf_r+0x22c>
 800efee:	7821      	ldrb	r1, [r4, #0]
 800eff0:	2203      	movs	r2, #3
 800eff2:	4650      	mov	r0, sl
 800eff4:	f7f1 f8ec 	bl	80001d0 <memchr>
 800eff8:	b138      	cbz	r0, 800f00a <_vfiprintf_r+0x176>
 800effa:	9b04      	ldr	r3, [sp, #16]
 800effc:	eba0 000a 	sub.w	r0, r0, sl
 800f000:	2240      	movs	r2, #64	@ 0x40
 800f002:	4082      	lsls	r2, r0
 800f004:	4313      	orrs	r3, r2
 800f006:	3401      	adds	r4, #1
 800f008:	9304      	str	r3, [sp, #16]
 800f00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f00e:	4829      	ldr	r0, [pc, #164]	@ (800f0b4 <_vfiprintf_r+0x220>)
 800f010:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f014:	2206      	movs	r2, #6
 800f016:	f7f1 f8db 	bl	80001d0 <memchr>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d03f      	beq.n	800f09e <_vfiprintf_r+0x20a>
 800f01e:	4b26      	ldr	r3, [pc, #152]	@ (800f0b8 <_vfiprintf_r+0x224>)
 800f020:	bb1b      	cbnz	r3, 800f06a <_vfiprintf_r+0x1d6>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	3307      	adds	r3, #7
 800f026:	f023 0307 	bic.w	r3, r3, #7
 800f02a:	3308      	adds	r3, #8
 800f02c:	9303      	str	r3, [sp, #12]
 800f02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f030:	443b      	add	r3, r7
 800f032:	9309      	str	r3, [sp, #36]	@ 0x24
 800f034:	e76a      	b.n	800ef0c <_vfiprintf_r+0x78>
 800f036:	fb0c 3202 	mla	r2, ip, r2, r3
 800f03a:	460c      	mov	r4, r1
 800f03c:	2001      	movs	r0, #1
 800f03e:	e7a8      	b.n	800ef92 <_vfiprintf_r+0xfe>
 800f040:	2300      	movs	r3, #0
 800f042:	3401      	adds	r4, #1
 800f044:	9305      	str	r3, [sp, #20]
 800f046:	4619      	mov	r1, r3
 800f048:	f04f 0c0a 	mov.w	ip, #10
 800f04c:	4620      	mov	r0, r4
 800f04e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f052:	3a30      	subs	r2, #48	@ 0x30
 800f054:	2a09      	cmp	r2, #9
 800f056:	d903      	bls.n	800f060 <_vfiprintf_r+0x1cc>
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d0c6      	beq.n	800efea <_vfiprintf_r+0x156>
 800f05c:	9105      	str	r1, [sp, #20]
 800f05e:	e7c4      	b.n	800efea <_vfiprintf_r+0x156>
 800f060:	fb0c 2101 	mla	r1, ip, r1, r2
 800f064:	4604      	mov	r4, r0
 800f066:	2301      	movs	r3, #1
 800f068:	e7f0      	b.n	800f04c <_vfiprintf_r+0x1b8>
 800f06a:	ab03      	add	r3, sp, #12
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	462a      	mov	r2, r5
 800f070:	4b12      	ldr	r3, [pc, #72]	@ (800f0bc <_vfiprintf_r+0x228>)
 800f072:	a904      	add	r1, sp, #16
 800f074:	4630      	mov	r0, r6
 800f076:	f7fd fe61 	bl	800cd3c <_printf_float>
 800f07a:	4607      	mov	r7, r0
 800f07c:	1c78      	adds	r0, r7, #1
 800f07e:	d1d6      	bne.n	800f02e <_vfiprintf_r+0x19a>
 800f080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f082:	07d9      	lsls	r1, r3, #31
 800f084:	d405      	bmi.n	800f092 <_vfiprintf_r+0x1fe>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	059a      	lsls	r2, r3, #22
 800f08a:	d402      	bmi.n	800f092 <_vfiprintf_r+0x1fe>
 800f08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f08e:	f7fe fcab 	bl	800d9e8 <__retarget_lock_release_recursive>
 800f092:	89ab      	ldrh	r3, [r5, #12]
 800f094:	065b      	lsls	r3, r3, #25
 800f096:	f53f af1f 	bmi.w	800eed8 <_vfiprintf_r+0x44>
 800f09a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f09c:	e71e      	b.n	800eedc <_vfiprintf_r+0x48>
 800f09e:	ab03      	add	r3, sp, #12
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	4b05      	ldr	r3, [pc, #20]	@ (800f0bc <_vfiprintf_r+0x228>)
 800f0a6:	a904      	add	r1, sp, #16
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	f7fe f8df 	bl	800d26c <_printf_i>
 800f0ae:	e7e4      	b.n	800f07a <_vfiprintf_r+0x1e6>
 800f0b0:	08010272 	.word	0x08010272
 800f0b4:	0801027c 	.word	0x0801027c
 800f0b8:	0800cd3d 	.word	0x0800cd3d
 800f0bc:	0800ee6f 	.word	0x0800ee6f
 800f0c0:	08010278 	.word	0x08010278

0800f0c4 <__sflush_r>:
 800f0c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	0716      	lsls	r6, r2, #28
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	d454      	bmi.n	800f17e <__sflush_r+0xba>
 800f0d4:	684b      	ldr	r3, [r1, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	dc02      	bgt.n	800f0e0 <__sflush_r+0x1c>
 800f0da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	dd48      	ble.n	800f172 <__sflush_r+0xae>
 800f0e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	d045      	beq.n	800f172 <__sflush_r+0xae>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0ec:	682f      	ldr	r7, [r5, #0]
 800f0ee:	6a21      	ldr	r1, [r4, #32]
 800f0f0:	602b      	str	r3, [r5, #0]
 800f0f2:	d030      	beq.n	800f156 <__sflush_r+0x92>
 800f0f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	0759      	lsls	r1, r3, #29
 800f0fa:	d505      	bpl.n	800f108 <__sflush_r+0x44>
 800f0fc:	6863      	ldr	r3, [r4, #4]
 800f0fe:	1ad2      	subs	r2, r2, r3
 800f100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f102:	b10b      	cbz	r3, 800f108 <__sflush_r+0x44>
 800f104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f106:	1ad2      	subs	r2, r2, r3
 800f108:	2300      	movs	r3, #0
 800f10a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f10c:	6a21      	ldr	r1, [r4, #32]
 800f10e:	4628      	mov	r0, r5
 800f110:	47b0      	blx	r6
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	d106      	bne.n	800f126 <__sflush_r+0x62>
 800f118:	6829      	ldr	r1, [r5, #0]
 800f11a:	291d      	cmp	r1, #29
 800f11c:	d82b      	bhi.n	800f176 <__sflush_r+0xb2>
 800f11e:	4a2a      	ldr	r2, [pc, #168]	@ (800f1c8 <__sflush_r+0x104>)
 800f120:	40ca      	lsrs	r2, r1
 800f122:	07d6      	lsls	r6, r2, #31
 800f124:	d527      	bpl.n	800f176 <__sflush_r+0xb2>
 800f126:	2200      	movs	r2, #0
 800f128:	6062      	str	r2, [r4, #4]
 800f12a:	04d9      	lsls	r1, r3, #19
 800f12c:	6922      	ldr	r2, [r4, #16]
 800f12e:	6022      	str	r2, [r4, #0]
 800f130:	d504      	bpl.n	800f13c <__sflush_r+0x78>
 800f132:	1c42      	adds	r2, r0, #1
 800f134:	d101      	bne.n	800f13a <__sflush_r+0x76>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	b903      	cbnz	r3, 800f13c <__sflush_r+0x78>
 800f13a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f13c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f13e:	602f      	str	r7, [r5, #0]
 800f140:	b1b9      	cbz	r1, 800f172 <__sflush_r+0xae>
 800f142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f146:	4299      	cmp	r1, r3
 800f148:	d002      	beq.n	800f150 <__sflush_r+0x8c>
 800f14a:	4628      	mov	r0, r5
 800f14c:	f7ff fab4 	bl	800e6b8 <_free_r>
 800f150:	2300      	movs	r3, #0
 800f152:	6363      	str	r3, [r4, #52]	@ 0x34
 800f154:	e00d      	b.n	800f172 <__sflush_r+0xae>
 800f156:	2301      	movs	r3, #1
 800f158:	4628      	mov	r0, r5
 800f15a:	47b0      	blx	r6
 800f15c:	4602      	mov	r2, r0
 800f15e:	1c50      	adds	r0, r2, #1
 800f160:	d1c9      	bne.n	800f0f6 <__sflush_r+0x32>
 800f162:	682b      	ldr	r3, [r5, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d0c6      	beq.n	800f0f6 <__sflush_r+0x32>
 800f168:	2b1d      	cmp	r3, #29
 800f16a:	d001      	beq.n	800f170 <__sflush_r+0xac>
 800f16c:	2b16      	cmp	r3, #22
 800f16e:	d11e      	bne.n	800f1ae <__sflush_r+0xea>
 800f170:	602f      	str	r7, [r5, #0]
 800f172:	2000      	movs	r0, #0
 800f174:	e022      	b.n	800f1bc <__sflush_r+0xf8>
 800f176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f17a:	b21b      	sxth	r3, r3
 800f17c:	e01b      	b.n	800f1b6 <__sflush_r+0xf2>
 800f17e:	690f      	ldr	r7, [r1, #16]
 800f180:	2f00      	cmp	r7, #0
 800f182:	d0f6      	beq.n	800f172 <__sflush_r+0xae>
 800f184:	0793      	lsls	r3, r2, #30
 800f186:	680e      	ldr	r6, [r1, #0]
 800f188:	bf08      	it	eq
 800f18a:	694b      	ldreq	r3, [r1, #20]
 800f18c:	600f      	str	r7, [r1, #0]
 800f18e:	bf18      	it	ne
 800f190:	2300      	movne	r3, #0
 800f192:	eba6 0807 	sub.w	r8, r6, r7
 800f196:	608b      	str	r3, [r1, #8]
 800f198:	f1b8 0f00 	cmp.w	r8, #0
 800f19c:	dde9      	ble.n	800f172 <__sflush_r+0xae>
 800f19e:	6a21      	ldr	r1, [r4, #32]
 800f1a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f1a2:	4643      	mov	r3, r8
 800f1a4:	463a      	mov	r2, r7
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b0      	blx	r6
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	dc08      	bgt.n	800f1c0 <__sflush_r+0xfc>
 800f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1b6:	81a3      	strh	r3, [r4, #12]
 800f1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c0:	4407      	add	r7, r0
 800f1c2:	eba8 0800 	sub.w	r8, r8, r0
 800f1c6:	e7e7      	b.n	800f198 <__sflush_r+0xd4>
 800f1c8:	20400001 	.word	0x20400001

0800f1cc <_fflush_r>:
 800f1cc:	b538      	push	{r3, r4, r5, lr}
 800f1ce:	690b      	ldr	r3, [r1, #16]
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	b913      	cbnz	r3, 800f1dc <_fflush_r+0x10>
 800f1d6:	2500      	movs	r5, #0
 800f1d8:	4628      	mov	r0, r5
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	b118      	cbz	r0, 800f1e6 <_fflush_r+0x1a>
 800f1de:	6a03      	ldr	r3, [r0, #32]
 800f1e0:	b90b      	cbnz	r3, 800f1e6 <_fflush_r+0x1a>
 800f1e2:	f7fe f9ed 	bl	800d5c0 <__sinit>
 800f1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0f3      	beq.n	800f1d6 <_fflush_r+0xa>
 800f1ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1f0:	07d0      	lsls	r0, r2, #31
 800f1f2:	d404      	bmi.n	800f1fe <_fflush_r+0x32>
 800f1f4:	0599      	lsls	r1, r3, #22
 800f1f6:	d402      	bmi.n	800f1fe <_fflush_r+0x32>
 800f1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1fa:	f7fe fbf4 	bl	800d9e6 <__retarget_lock_acquire_recursive>
 800f1fe:	4628      	mov	r0, r5
 800f200:	4621      	mov	r1, r4
 800f202:	f7ff ff5f 	bl	800f0c4 <__sflush_r>
 800f206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f208:	07da      	lsls	r2, r3, #31
 800f20a:	4605      	mov	r5, r0
 800f20c:	d4e4      	bmi.n	800f1d8 <_fflush_r+0xc>
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	059b      	lsls	r3, r3, #22
 800f212:	d4e1      	bmi.n	800f1d8 <_fflush_r+0xc>
 800f214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f216:	f7fe fbe7 	bl	800d9e8 <__retarget_lock_release_recursive>
 800f21a:	e7dd      	b.n	800f1d8 <_fflush_r+0xc>

0800f21c <__swhatbuf_r>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	460c      	mov	r4, r1
 800f220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f224:	2900      	cmp	r1, #0
 800f226:	b096      	sub	sp, #88	@ 0x58
 800f228:	4615      	mov	r5, r2
 800f22a:	461e      	mov	r6, r3
 800f22c:	da0d      	bge.n	800f24a <__swhatbuf_r+0x2e>
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f234:	f04f 0100 	mov.w	r1, #0
 800f238:	bf14      	ite	ne
 800f23a:	2340      	movne	r3, #64	@ 0x40
 800f23c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f240:	2000      	movs	r0, #0
 800f242:	6031      	str	r1, [r6, #0]
 800f244:	602b      	str	r3, [r5, #0]
 800f246:	b016      	add	sp, #88	@ 0x58
 800f248:	bd70      	pop	{r4, r5, r6, pc}
 800f24a:	466a      	mov	r2, sp
 800f24c:	f000 f87c 	bl	800f348 <_fstat_r>
 800f250:	2800      	cmp	r0, #0
 800f252:	dbec      	blt.n	800f22e <__swhatbuf_r+0x12>
 800f254:	9901      	ldr	r1, [sp, #4]
 800f256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f25a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f25e:	4259      	negs	r1, r3
 800f260:	4159      	adcs	r1, r3
 800f262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f266:	e7eb      	b.n	800f240 <__swhatbuf_r+0x24>

0800f268 <__smakebuf_r>:
 800f268:	898b      	ldrh	r3, [r1, #12]
 800f26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f26c:	079d      	lsls	r5, r3, #30
 800f26e:	4606      	mov	r6, r0
 800f270:	460c      	mov	r4, r1
 800f272:	d507      	bpl.n	800f284 <__smakebuf_r+0x1c>
 800f274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	6123      	str	r3, [r4, #16]
 800f27c:	2301      	movs	r3, #1
 800f27e:	6163      	str	r3, [r4, #20]
 800f280:	b003      	add	sp, #12
 800f282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f284:	ab01      	add	r3, sp, #4
 800f286:	466a      	mov	r2, sp
 800f288:	f7ff ffc8 	bl	800f21c <__swhatbuf_r>
 800f28c:	9f00      	ldr	r7, [sp, #0]
 800f28e:	4605      	mov	r5, r0
 800f290:	4639      	mov	r1, r7
 800f292:	4630      	mov	r0, r6
 800f294:	f7fd fc26 	bl	800cae4 <_malloc_r>
 800f298:	b948      	cbnz	r0, 800f2ae <__smakebuf_r+0x46>
 800f29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29e:	059a      	lsls	r2, r3, #22
 800f2a0:	d4ee      	bmi.n	800f280 <__smakebuf_r+0x18>
 800f2a2:	f023 0303 	bic.w	r3, r3, #3
 800f2a6:	f043 0302 	orr.w	r3, r3, #2
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	e7e2      	b.n	800f274 <__smakebuf_r+0xc>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	6020      	str	r0, [r4, #0]
 800f2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2b6:	81a3      	strh	r3, [r4, #12]
 800f2b8:	9b01      	ldr	r3, [sp, #4]
 800f2ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2be:	b15b      	cbz	r3, 800f2d8 <__smakebuf_r+0x70>
 800f2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f000 f851 	bl	800f36c <_isatty_r>
 800f2ca:	b128      	cbz	r0, 800f2d8 <__smakebuf_r+0x70>
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	f023 0303 	bic.w	r3, r3, #3
 800f2d2:	f043 0301 	orr.w	r3, r3, #1
 800f2d6:	81a3      	strh	r3, [r4, #12]
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	431d      	orrs	r5, r3
 800f2dc:	81a5      	strh	r5, [r4, #12]
 800f2de:	e7cf      	b.n	800f280 <__smakebuf_r+0x18>

0800f2e0 <_putc_r>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	b118      	cbz	r0, 800f2f2 <_putc_r+0x12>
 800f2ea:	6a03      	ldr	r3, [r0, #32]
 800f2ec:	b90b      	cbnz	r3, 800f2f2 <_putc_r+0x12>
 800f2ee:	f7fe f967 	bl	800d5c0 <__sinit>
 800f2f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2f4:	07d8      	lsls	r0, r3, #31
 800f2f6:	d405      	bmi.n	800f304 <_putc_r+0x24>
 800f2f8:	89a3      	ldrh	r3, [r4, #12]
 800f2fa:	0599      	lsls	r1, r3, #22
 800f2fc:	d402      	bmi.n	800f304 <_putc_r+0x24>
 800f2fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f300:	f7fe fb71 	bl	800d9e6 <__retarget_lock_acquire_recursive>
 800f304:	68a3      	ldr	r3, [r4, #8]
 800f306:	3b01      	subs	r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	60a3      	str	r3, [r4, #8]
 800f30c:	da05      	bge.n	800f31a <_putc_r+0x3a>
 800f30e:	69a2      	ldr	r2, [r4, #24]
 800f310:	4293      	cmp	r3, r2
 800f312:	db12      	blt.n	800f33a <_putc_r+0x5a>
 800f314:	b2eb      	uxtb	r3, r5
 800f316:	2b0a      	cmp	r3, #10
 800f318:	d00f      	beq.n	800f33a <_putc_r+0x5a>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	6022      	str	r2, [r4, #0]
 800f320:	701d      	strb	r5, [r3, #0]
 800f322:	b2ed      	uxtb	r5, r5
 800f324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f326:	07da      	lsls	r2, r3, #31
 800f328:	d405      	bmi.n	800f336 <_putc_r+0x56>
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	059b      	lsls	r3, r3, #22
 800f32e:	d402      	bmi.n	800f336 <_putc_r+0x56>
 800f330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f332:	f7fe fb59 	bl	800d9e8 <__retarget_lock_release_recursive>
 800f336:	4628      	mov	r0, r5
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	4629      	mov	r1, r5
 800f33c:	4622      	mov	r2, r4
 800f33e:	4630      	mov	r0, r6
 800f340:	f7fe fa2f 	bl	800d7a2 <__swbuf_r>
 800f344:	4605      	mov	r5, r0
 800f346:	e7ed      	b.n	800f324 <_putc_r+0x44>

0800f348 <_fstat_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	4d07      	ldr	r5, [pc, #28]	@ (800f368 <_fstat_r+0x20>)
 800f34c:	2300      	movs	r3, #0
 800f34e:	4604      	mov	r4, r0
 800f350:	4608      	mov	r0, r1
 800f352:	4611      	mov	r1, r2
 800f354:	602b      	str	r3, [r5, #0]
 800f356:	f7f4 ff85 	bl	8004264 <_fstat>
 800f35a:	1c43      	adds	r3, r0, #1
 800f35c:	d102      	bne.n	800f364 <_fstat_r+0x1c>
 800f35e:	682b      	ldr	r3, [r5, #0]
 800f360:	b103      	cbz	r3, 800f364 <_fstat_r+0x1c>
 800f362:	6023      	str	r3, [r4, #0]
 800f364:	bd38      	pop	{r3, r4, r5, pc}
 800f366:	bf00      	nop
 800f368:	200024f0 	.word	0x200024f0

0800f36c <_isatty_r>:
 800f36c:	b538      	push	{r3, r4, r5, lr}
 800f36e:	4d06      	ldr	r5, [pc, #24]	@ (800f388 <_isatty_r+0x1c>)
 800f370:	2300      	movs	r3, #0
 800f372:	4604      	mov	r4, r0
 800f374:	4608      	mov	r0, r1
 800f376:	602b      	str	r3, [r5, #0]
 800f378:	f7f4 ff84 	bl	8004284 <_isatty>
 800f37c:	1c43      	adds	r3, r0, #1
 800f37e:	d102      	bne.n	800f386 <_isatty_r+0x1a>
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	b103      	cbz	r3, 800f386 <_isatty_r+0x1a>
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	bd38      	pop	{r3, r4, r5, pc}
 800f388:	200024f0 	.word	0x200024f0

0800f38c <__assert_func>:
 800f38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f38e:	4614      	mov	r4, r2
 800f390:	461a      	mov	r2, r3
 800f392:	4b09      	ldr	r3, [pc, #36]	@ (800f3b8 <__assert_func+0x2c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4605      	mov	r5, r0
 800f398:	68d8      	ldr	r0, [r3, #12]
 800f39a:	b14c      	cbz	r4, 800f3b0 <__assert_func+0x24>
 800f39c:	4b07      	ldr	r3, [pc, #28]	@ (800f3bc <__assert_func+0x30>)
 800f39e:	9100      	str	r1, [sp, #0]
 800f3a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3a4:	4906      	ldr	r1, [pc, #24]	@ (800f3c0 <__assert_func+0x34>)
 800f3a6:	462b      	mov	r3, r5
 800f3a8:	f000 f842 	bl	800f430 <fiprintf>
 800f3ac:	f000 f852 	bl	800f454 <abort>
 800f3b0:	4b04      	ldr	r3, [pc, #16]	@ (800f3c4 <__assert_func+0x38>)
 800f3b2:	461c      	mov	r4, r3
 800f3b4:	e7f3      	b.n	800f39e <__assert_func+0x12>
 800f3b6:	bf00      	nop
 800f3b8:	20000130 	.word	0x20000130
 800f3bc:	0801028d 	.word	0x0801028d
 800f3c0:	0801029a 	.word	0x0801029a
 800f3c4:	080102c8 	.word	0x080102c8

0800f3c8 <_calloc_r>:
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	fba1 5402 	umull	r5, r4, r1, r2
 800f3ce:	b934      	cbnz	r4, 800f3de <_calloc_r+0x16>
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f7fd fb87 	bl	800cae4 <_malloc_r>
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	b928      	cbnz	r0, 800f3e6 <_calloc_r+0x1e>
 800f3da:	4630      	mov	r0, r6
 800f3dc:	bd70      	pop	{r4, r5, r6, pc}
 800f3de:	220c      	movs	r2, #12
 800f3e0:	6002      	str	r2, [r0, #0]
 800f3e2:	2600      	movs	r6, #0
 800f3e4:	e7f9      	b.n	800f3da <_calloc_r+0x12>
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	f7fe fa6f 	bl	800d8cc <memset>
 800f3ee:	e7f4      	b.n	800f3da <_calloc_r+0x12>

0800f3f0 <__ascii_mbtowc>:
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	b901      	cbnz	r1, 800f3f6 <__ascii_mbtowc+0x6>
 800f3f4:	a901      	add	r1, sp, #4
 800f3f6:	b142      	cbz	r2, 800f40a <__ascii_mbtowc+0x1a>
 800f3f8:	b14b      	cbz	r3, 800f40e <__ascii_mbtowc+0x1e>
 800f3fa:	7813      	ldrb	r3, [r2, #0]
 800f3fc:	600b      	str	r3, [r1, #0]
 800f3fe:	7812      	ldrb	r2, [r2, #0]
 800f400:	1e10      	subs	r0, r2, #0
 800f402:	bf18      	it	ne
 800f404:	2001      	movne	r0, #1
 800f406:	b002      	add	sp, #8
 800f408:	4770      	bx	lr
 800f40a:	4610      	mov	r0, r2
 800f40c:	e7fb      	b.n	800f406 <__ascii_mbtowc+0x16>
 800f40e:	f06f 0001 	mvn.w	r0, #1
 800f412:	e7f8      	b.n	800f406 <__ascii_mbtowc+0x16>

0800f414 <__ascii_wctomb>:
 800f414:	4603      	mov	r3, r0
 800f416:	4608      	mov	r0, r1
 800f418:	b141      	cbz	r1, 800f42c <__ascii_wctomb+0x18>
 800f41a:	2aff      	cmp	r2, #255	@ 0xff
 800f41c:	d904      	bls.n	800f428 <__ascii_wctomb+0x14>
 800f41e:	228a      	movs	r2, #138	@ 0x8a
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	f04f 30ff 	mov.w	r0, #4294967295
 800f426:	4770      	bx	lr
 800f428:	700a      	strb	r2, [r1, #0]
 800f42a:	2001      	movs	r0, #1
 800f42c:	4770      	bx	lr
	...

0800f430 <fiprintf>:
 800f430:	b40e      	push	{r1, r2, r3}
 800f432:	b503      	push	{r0, r1, lr}
 800f434:	4601      	mov	r1, r0
 800f436:	ab03      	add	r3, sp, #12
 800f438:	4805      	ldr	r0, [pc, #20]	@ (800f450 <fiprintf+0x20>)
 800f43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f43e:	6800      	ldr	r0, [r0, #0]
 800f440:	9301      	str	r3, [sp, #4]
 800f442:	f7ff fd27 	bl	800ee94 <_vfiprintf_r>
 800f446:	b002      	add	sp, #8
 800f448:	f85d eb04 	ldr.w	lr, [sp], #4
 800f44c:	b003      	add	sp, #12
 800f44e:	4770      	bx	lr
 800f450:	20000130 	.word	0x20000130

0800f454 <abort>:
 800f454:	b508      	push	{r3, lr}
 800f456:	2006      	movs	r0, #6
 800f458:	f000 f82c 	bl	800f4b4 <raise>
 800f45c:	2001      	movs	r0, #1
 800f45e:	f7f4 fecd 	bl	80041fc <_exit>

0800f462 <_raise_r>:
 800f462:	291f      	cmp	r1, #31
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4605      	mov	r5, r0
 800f468:	460c      	mov	r4, r1
 800f46a:	d904      	bls.n	800f476 <_raise_r+0x14>
 800f46c:	2316      	movs	r3, #22
 800f46e:	6003      	str	r3, [r0, #0]
 800f470:	f04f 30ff 	mov.w	r0, #4294967295
 800f474:	bd38      	pop	{r3, r4, r5, pc}
 800f476:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f478:	b112      	cbz	r2, 800f480 <_raise_r+0x1e>
 800f47a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f47e:	b94b      	cbnz	r3, 800f494 <_raise_r+0x32>
 800f480:	4628      	mov	r0, r5
 800f482:	f000 f831 	bl	800f4e8 <_getpid_r>
 800f486:	4622      	mov	r2, r4
 800f488:	4601      	mov	r1, r0
 800f48a:	4628      	mov	r0, r5
 800f48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f490:	f000 b818 	b.w	800f4c4 <_kill_r>
 800f494:	2b01      	cmp	r3, #1
 800f496:	d00a      	beq.n	800f4ae <_raise_r+0x4c>
 800f498:	1c59      	adds	r1, r3, #1
 800f49a:	d103      	bne.n	800f4a4 <_raise_r+0x42>
 800f49c:	2316      	movs	r3, #22
 800f49e:	6003      	str	r3, [r0, #0]
 800f4a0:	2001      	movs	r0, #1
 800f4a2:	e7e7      	b.n	800f474 <_raise_r+0x12>
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	4798      	blx	r3
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	e7e0      	b.n	800f474 <_raise_r+0x12>
	...

0800f4b4 <raise>:
 800f4b4:	4b02      	ldr	r3, [pc, #8]	@ (800f4c0 <raise+0xc>)
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	f7ff bfd2 	b.w	800f462 <_raise_r>
 800f4be:	bf00      	nop
 800f4c0:	20000130 	.word	0x20000130

0800f4c4 <_kill_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d07      	ldr	r5, [pc, #28]	@ (800f4e4 <_kill_r+0x20>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f7f4 fe83 	bl	80041dc <_kill>
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d102      	bne.n	800f4e0 <_kill_r+0x1c>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	b103      	cbz	r3, 800f4e0 <_kill_r+0x1c>
 800f4de:	6023      	str	r3, [r4, #0]
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	bf00      	nop
 800f4e4:	200024f0 	.word	0x200024f0

0800f4e8 <_getpid_r>:
 800f4e8:	f7f4 be70 	b.w	80041cc <_getpid>
 800f4ec:	0000      	movs	r0, r0
	...

0800f4f0 <exp>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	ed2d 8b02 	vpush	{d8}
 800f4f6:	ec55 4b10 	vmov	r4, r5, d0
 800f4fa:	f000 f895 	bl	800f628 <__ieee754_exp>
 800f4fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f502:	eef0 8a60 	vmov.f32	s17, s1
 800f506:	ec45 4b10 	vmov	d0, r4, r5
 800f50a:	f000 f877 	bl	800f5fc <finite>
 800f50e:	b168      	cbz	r0, 800f52c <exp+0x3c>
 800f510:	a317      	add	r3, pc, #92	@ (adr r3, 800f570 <exp+0x80>)
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	f7f1 fafd 	bl	8000b18 <__aeabi_dcmpgt>
 800f51e:	b160      	cbz	r0, 800f53a <exp+0x4a>
 800f520:	f7fe fa36 	bl	800d990 <__errno>
 800f524:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800f560 <exp+0x70>
 800f528:	2322      	movs	r3, #34	@ 0x22
 800f52a:	6003      	str	r3, [r0, #0]
 800f52c:	eeb0 0a48 	vmov.f32	s0, s16
 800f530:	eef0 0a68 	vmov.f32	s1, s17
 800f534:	ecbd 8b02 	vpop	{d8}
 800f538:	bd38      	pop	{r3, r4, r5, pc}
 800f53a:	a30f      	add	r3, pc, #60	@ (adr r3, 800f578 <exp+0x88>)
 800f53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f540:	4620      	mov	r0, r4
 800f542:	4629      	mov	r1, r5
 800f544:	f7f1 faca 	bl	8000adc <__aeabi_dcmplt>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d0ef      	beq.n	800f52c <exp+0x3c>
 800f54c:	f7fe fa20 	bl	800d990 <__errno>
 800f550:	2322      	movs	r3, #34	@ 0x22
 800f552:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800f568 <exp+0x78>
 800f556:	6003      	str	r3, [r0, #0]
 800f558:	e7e8      	b.n	800f52c <exp+0x3c>
 800f55a:	bf00      	nop
 800f55c:	f3af 8000 	nop.w
 800f560:	00000000 	.word	0x00000000
 800f564:	7ff00000 	.word	0x7ff00000
	...
 800f570:	fefa39ef 	.word	0xfefa39ef
 800f574:	40862e42 	.word	0x40862e42
 800f578:	d52d3051 	.word	0xd52d3051
 800f57c:	c0874910 	.word	0xc0874910

0800f580 <log>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	ed2d 8b02 	vpush	{d8}
 800f586:	ec55 4b10 	vmov	r4, r5, d0
 800f58a:	f000 f9c9 	bl	800f920 <__ieee754_log>
 800f58e:	4622      	mov	r2, r4
 800f590:	462b      	mov	r3, r5
 800f592:	4620      	mov	r0, r4
 800f594:	4629      	mov	r1, r5
 800f596:	eeb0 8a40 	vmov.f32	s16, s0
 800f59a:	eef0 8a60 	vmov.f32	s17, s1
 800f59e:	f7f1 fac5 	bl	8000b2c <__aeabi_dcmpun>
 800f5a2:	b998      	cbnz	r0, 800f5cc <log+0x4c>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	f7f1 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 800f5b0:	b960      	cbnz	r0, 800f5cc <log+0x4c>
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	f7f1 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5be:	b160      	cbz	r0, 800f5da <log+0x5a>
 800f5c0:	f7fe f9e6 	bl	800d990 <__errno>
 800f5c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800f5f0 <log+0x70>
 800f5c8:	2322      	movs	r3, #34	@ 0x22
 800f5ca:	6003      	str	r3, [r0, #0]
 800f5cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f5d0:	eef0 0a68 	vmov.f32	s1, s17
 800f5d4:	ecbd 8b02 	vpop	{d8}
 800f5d8:	bd38      	pop	{r3, r4, r5, pc}
 800f5da:	f7fe f9d9 	bl	800d990 <__errno>
 800f5de:	ecbd 8b02 	vpop	{d8}
 800f5e2:	2321      	movs	r3, #33	@ 0x21
 800f5e4:	6003      	str	r3, [r0, #0]
 800f5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5ea:	4803      	ldr	r0, [pc, #12]	@ (800f5f8 <log+0x78>)
 800f5ec:	f000 b814 	b.w	800f618 <nan>
 800f5f0:	00000000 	.word	0x00000000
 800f5f4:	fff00000 	.word	0xfff00000
 800f5f8:	080102c8 	.word	0x080102c8

0800f5fc <finite>:
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	ed8d 0b00 	vstr	d0, [sp]
 800f602:	9801      	ldr	r0, [sp, #4]
 800f604:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f608:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f60c:	0fc0      	lsrs	r0, r0, #31
 800f60e:	b002      	add	sp, #8
 800f610:	4770      	bx	lr
 800f612:	0000      	movs	r0, r0
 800f614:	0000      	movs	r0, r0
	...

0800f618 <nan>:
 800f618:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f620 <nan+0x8>
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	00000000 	.word	0x00000000
 800f624:	7ff80000 	.word	0x7ff80000

0800f628 <__ieee754_exp>:
 800f628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f62c:	ec55 4b10 	vmov	r4, r5, d0
 800f630:	49b1      	ldr	r1, [pc, #708]	@ (800f8f8 <__ieee754_exp+0x2d0>)
 800f632:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f636:	428a      	cmp	r2, r1
 800f638:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800f63c:	d936      	bls.n	800f6ac <__ieee754_exp+0x84>
 800f63e:	49af      	ldr	r1, [pc, #700]	@ (800f8fc <__ieee754_exp+0x2d4>)
 800f640:	428a      	cmp	r2, r1
 800f642:	d914      	bls.n	800f66e <__ieee754_exp+0x46>
 800f644:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f648:	4323      	orrs	r3, r4
 800f64a:	4622      	mov	r2, r4
 800f64c:	d007      	beq.n	800f65e <__ieee754_exp+0x36>
 800f64e:	462b      	mov	r3, r5
 800f650:	4620      	mov	r0, r4
 800f652:	4629      	mov	r1, r5
 800f654:	f7f0 fe1a 	bl	800028c <__adddf3>
 800f658:	4604      	mov	r4, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	e002      	b.n	800f664 <__ieee754_exp+0x3c>
 800f65e:	2e00      	cmp	r6, #0
 800f660:	f040 8118 	bne.w	800f894 <__ieee754_exp+0x26c>
 800f664:	ec45 4b10 	vmov	d0, r4, r5
 800f668:	b004      	add	sp, #16
 800f66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f66e:	a38c      	add	r3, pc, #560	@ (adr r3, 800f8a0 <__ieee754_exp+0x278>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	4620      	mov	r0, r4
 800f676:	4629      	mov	r1, r5
 800f678:	f7f1 fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800f67c:	4607      	mov	r7, r0
 800f67e:	b128      	cbz	r0, 800f68c <__ieee754_exp+0x64>
 800f680:	2000      	movs	r0, #0
 800f682:	b004      	add	sp, #16
 800f684:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f688:	f000 bb36 	b.w	800fcf8 <__math_oflow>
 800f68c:	a386      	add	r3, pc, #536	@ (adr r3, 800f8a8 <__ieee754_exp+0x280>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	f7f1 fa21 	bl	8000adc <__aeabi_dcmplt>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	f000 8087 	beq.w	800f7ae <__ieee754_exp+0x186>
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	b004      	add	sp, #16
 800f6a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a8:	f000 bb1e 	b.w	800fce8 <__math_uflow>
 800f6ac:	4b94      	ldr	r3, [pc, #592]	@ (800f900 <__ieee754_exp+0x2d8>)
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	f240 80a9 	bls.w	800f806 <__ieee754_exp+0x1de>
 800f6b4:	4b93      	ldr	r3, [pc, #588]	@ (800f904 <__ieee754_exp+0x2dc>)
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d879      	bhi.n	800f7ae <__ieee754_exp+0x186>
 800f6ba:	4b93      	ldr	r3, [pc, #588]	@ (800f908 <__ieee754_exp+0x2e0>)
 800f6bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f7f0 fdde 	bl	8000288 <__aeabi_dsub>
 800f6cc:	4b8f      	ldr	r3, [pc, #572]	@ (800f90c <__ieee754_exp+0x2e4>)
 800f6ce:	00f7      	lsls	r7, r6, #3
 800f6d0:	443b      	add	r3, r7
 800f6d2:	ed93 7b00 	vldr	d7, [r3]
 800f6d6:	ed8d 7b00 	vstr	d7, [sp]
 800f6da:	f086 0a01 	eor.w	sl, r6, #1
 800f6de:	4680      	mov	r8, r0
 800f6e0:	4689      	mov	r9, r1
 800f6e2:	ebaa 0a06 	sub.w	sl, sl, r6
 800f6e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f0 fdcb 	bl	8000288 <__aeabi_dsub>
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	4622      	mov	r2, r4
 800f6f8:	462b      	mov	r3, r5
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	f7f0 ff7b 	bl	80005f8 <__aeabi_dmul>
 800f702:	a36b      	add	r3, pc, #428	@ (adr r3, 800f8b0 <__ieee754_exp+0x288>)
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	4606      	mov	r6, r0
 800f70a:	460f      	mov	r7, r1
 800f70c:	f7f0 ff74 	bl	80005f8 <__aeabi_dmul>
 800f710:	a369      	add	r3, pc, #420	@ (adr r3, 800f8b8 <__ieee754_exp+0x290>)
 800f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f716:	f7f0 fdb7 	bl	8000288 <__aeabi_dsub>
 800f71a:	4632      	mov	r2, r6
 800f71c:	463b      	mov	r3, r7
 800f71e:	f7f0 ff6b 	bl	80005f8 <__aeabi_dmul>
 800f722:	a367      	add	r3, pc, #412	@ (adr r3, 800f8c0 <__ieee754_exp+0x298>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	f7f0 fdb0 	bl	800028c <__adddf3>
 800f72c:	4632      	mov	r2, r6
 800f72e:	463b      	mov	r3, r7
 800f730:	f7f0 ff62 	bl	80005f8 <__aeabi_dmul>
 800f734:	a364      	add	r3, pc, #400	@ (adr r3, 800f8c8 <__ieee754_exp+0x2a0>)
 800f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73a:	f7f0 fda5 	bl	8000288 <__aeabi_dsub>
 800f73e:	4632      	mov	r2, r6
 800f740:	463b      	mov	r3, r7
 800f742:	f7f0 ff59 	bl	80005f8 <__aeabi_dmul>
 800f746:	a362      	add	r3, pc, #392	@ (adr r3, 800f8d0 <__ieee754_exp+0x2a8>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	f7f0 fd9e 	bl	800028c <__adddf3>
 800f750:	4632      	mov	r2, r6
 800f752:	463b      	mov	r3, r7
 800f754:	f7f0 ff50 	bl	80005f8 <__aeabi_dmul>
 800f758:	4602      	mov	r2, r0
 800f75a:	460b      	mov	r3, r1
 800f75c:	4620      	mov	r0, r4
 800f75e:	4629      	mov	r1, r5
 800f760:	f7f0 fd92 	bl	8000288 <__aeabi_dsub>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	4606      	mov	r6, r0
 800f76a:	460f      	mov	r7, r1
 800f76c:	4620      	mov	r0, r4
 800f76e:	4629      	mov	r1, r5
 800f770:	f7f0 ff42 	bl	80005f8 <__aeabi_dmul>
 800f774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f778:	f1ba 0f00 	cmp.w	sl, #0
 800f77c:	d15c      	bne.n	800f838 <__ieee754_exp+0x210>
 800f77e:	2200      	movs	r2, #0
 800f780:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	f7f0 fd7e 	bl	8000288 <__aeabi_dsub>
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f794:	f7f1 f85a 	bl	800084c <__aeabi_ddiv>
 800f798:	4622      	mov	r2, r4
 800f79a:	462b      	mov	r3, r5
 800f79c:	f7f0 fd74 	bl	8000288 <__aeabi_dsub>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	495a      	ldr	r1, [pc, #360]	@ (800f910 <__ieee754_exp+0x2e8>)
 800f7a8:	f7f0 fd6e 	bl	8000288 <__aeabi_dsub>
 800f7ac:	e754      	b.n	800f658 <__ieee754_exp+0x30>
 800f7ae:	4b59      	ldr	r3, [pc, #356]	@ (800f914 <__ieee754_exp+0x2ec>)
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	a347      	add	r3, pc, #284	@ (adr r3, 800f8d8 <__ieee754_exp+0x2b0>)
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	f7f0 ff1b 	bl	80005f8 <__aeabi_dmul>
 800f7c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7c6:	f7f0 fd61 	bl	800028c <__adddf3>
 800f7ca:	f7f1 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800f7ce:	4682      	mov	sl, r0
 800f7d0:	f7f0 fea8 	bl	8000524 <__aeabi_i2d>
 800f7d4:	a342      	add	r3, pc, #264	@ (adr r3, 800f8e0 <__ieee754_exp+0x2b8>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460f      	mov	r7, r1
 800f7de:	f7f0 ff0b 	bl	80005f8 <__aeabi_dmul>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	f7f0 fd4d 	bl	8000288 <__aeabi_dsub>
 800f7ee:	a33e      	add	r3, pc, #248	@ (adr r3, 800f8e8 <__ieee754_exp+0x2c0>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	4680      	mov	r8, r0
 800f7f6:	4689      	mov	r9, r1
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	f7f0 fefc 	bl	80005f8 <__aeabi_dmul>
 800f800:	e9cd 0100 	strd	r0, r1, [sp]
 800f804:	e76f      	b.n	800f6e6 <__ieee754_exp+0xbe>
 800f806:	4b44      	ldr	r3, [pc, #272]	@ (800f918 <__ieee754_exp+0x2f0>)
 800f808:	429a      	cmp	r2, r3
 800f80a:	d810      	bhi.n	800f82e <__ieee754_exp+0x206>
 800f80c:	a338      	add	r3, pc, #224	@ (adr r3, 800f8f0 <__ieee754_exp+0x2c8>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	4620      	mov	r0, r4
 800f814:	4629      	mov	r1, r5
 800f816:	f7f0 fd39 	bl	800028c <__adddf3>
 800f81a:	4b3d      	ldr	r3, [pc, #244]	@ (800f910 <__ieee754_exp+0x2e8>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	f7f1 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 800f822:	b138      	cbz	r0, 800f834 <__ieee754_exp+0x20c>
 800f824:	4b3a      	ldr	r3, [pc, #232]	@ (800f910 <__ieee754_exp+0x2e8>)
 800f826:	2200      	movs	r2, #0
 800f828:	4620      	mov	r0, r4
 800f82a:	4629      	mov	r1, r5
 800f82c:	e712      	b.n	800f654 <__ieee754_exp+0x2c>
 800f82e:	f04f 0a00 	mov.w	sl, #0
 800f832:	e760      	b.n	800f6f6 <__ieee754_exp+0xce>
 800f834:	4682      	mov	sl, r0
 800f836:	e75e      	b.n	800f6f6 <__ieee754_exp+0xce>
 800f838:	4632      	mov	r2, r6
 800f83a:	463b      	mov	r3, r7
 800f83c:	2000      	movs	r0, #0
 800f83e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800f842:	f7f0 fd21 	bl	8000288 <__aeabi_dsub>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f84e:	f7f0 fffd 	bl	800084c <__aeabi_ddiv>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f85a:	f7f0 fd15 	bl	8000288 <__aeabi_dsub>
 800f85e:	4642      	mov	r2, r8
 800f860:	464b      	mov	r3, r9
 800f862:	f7f0 fd11 	bl	8000288 <__aeabi_dsub>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	2000      	movs	r0, #0
 800f86c:	4928      	ldr	r1, [pc, #160]	@ (800f910 <__ieee754_exp+0x2e8>)
 800f86e:	f7f0 fd0b 	bl	8000288 <__aeabi_dsub>
 800f872:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800f876:	4592      	cmp	sl, r2
 800f878:	db02      	blt.n	800f880 <__ieee754_exp+0x258>
 800f87a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f87e:	e6eb      	b.n	800f658 <__ieee754_exp+0x30>
 800f880:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800f884:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f888:	2200      	movs	r2, #0
 800f88a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800f88e:	f7f0 feb3 	bl	80005f8 <__aeabi_dmul>
 800f892:	e6e1      	b.n	800f658 <__ieee754_exp+0x30>
 800f894:	2400      	movs	r4, #0
 800f896:	2500      	movs	r5, #0
 800f898:	e6e4      	b.n	800f664 <__ieee754_exp+0x3c>
 800f89a:	bf00      	nop
 800f89c:	f3af 8000 	nop.w
 800f8a0:	fefa39ef 	.word	0xfefa39ef
 800f8a4:	40862e42 	.word	0x40862e42
 800f8a8:	d52d3051 	.word	0xd52d3051
 800f8ac:	c0874910 	.word	0xc0874910
 800f8b0:	72bea4d0 	.word	0x72bea4d0
 800f8b4:	3e663769 	.word	0x3e663769
 800f8b8:	c5d26bf1 	.word	0xc5d26bf1
 800f8bc:	3ebbbd41 	.word	0x3ebbbd41
 800f8c0:	af25de2c 	.word	0xaf25de2c
 800f8c4:	3f11566a 	.word	0x3f11566a
 800f8c8:	16bebd93 	.word	0x16bebd93
 800f8cc:	3f66c16c 	.word	0x3f66c16c
 800f8d0:	5555553e 	.word	0x5555553e
 800f8d4:	3fc55555 	.word	0x3fc55555
 800f8d8:	652b82fe 	.word	0x652b82fe
 800f8dc:	3ff71547 	.word	0x3ff71547
 800f8e0:	fee00000 	.word	0xfee00000
 800f8e4:	3fe62e42 	.word	0x3fe62e42
 800f8e8:	35793c76 	.word	0x35793c76
 800f8ec:	3dea39ef 	.word	0x3dea39ef
 800f8f0:	8800759c 	.word	0x8800759c
 800f8f4:	7e37e43c 	.word	0x7e37e43c
 800f8f8:	40862e41 	.word	0x40862e41
 800f8fc:	7fefffff 	.word	0x7fefffff
 800f900:	3fd62e42 	.word	0x3fd62e42
 800f904:	3ff0a2b1 	.word	0x3ff0a2b1
 800f908:	080104e0 	.word	0x080104e0
 800f90c:	080104d0 	.word	0x080104d0
 800f910:	3ff00000 	.word	0x3ff00000
 800f914:	080104f0 	.word	0x080104f0
 800f918:	3defffff 	.word	0x3defffff
 800f91c:	00000000 	.word	0x00000000

0800f920 <__ieee754_log>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	ec51 0b10 	vmov	r0, r1, d0
 800f928:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f92c:	b087      	sub	sp, #28
 800f92e:	460d      	mov	r5, r1
 800f930:	da26      	bge.n	800f980 <__ieee754_log+0x60>
 800f932:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f936:	4303      	orrs	r3, r0
 800f938:	4602      	mov	r2, r0
 800f93a:	d10a      	bne.n	800f952 <__ieee754_log+0x32>
 800f93c:	49ce      	ldr	r1, [pc, #824]	@ (800fc78 <__ieee754_log+0x358>)
 800f93e:	2200      	movs	r2, #0
 800f940:	2300      	movs	r3, #0
 800f942:	2000      	movs	r0, #0
 800f944:	f7f0 ff82 	bl	800084c <__aeabi_ddiv>
 800f948:	ec41 0b10 	vmov	d0, r0, r1
 800f94c:	b007      	add	sp, #28
 800f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f952:	2900      	cmp	r1, #0
 800f954:	da05      	bge.n	800f962 <__ieee754_log+0x42>
 800f956:	460b      	mov	r3, r1
 800f958:	f7f0 fc96 	bl	8000288 <__aeabi_dsub>
 800f95c:	2200      	movs	r2, #0
 800f95e:	2300      	movs	r3, #0
 800f960:	e7f0      	b.n	800f944 <__ieee754_log+0x24>
 800f962:	4bc6      	ldr	r3, [pc, #792]	@ (800fc7c <__ieee754_log+0x35c>)
 800f964:	2200      	movs	r2, #0
 800f966:	f7f0 fe47 	bl	80005f8 <__aeabi_dmul>
 800f96a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f96e:	460d      	mov	r5, r1
 800f970:	4ac3      	ldr	r2, [pc, #780]	@ (800fc80 <__ieee754_log+0x360>)
 800f972:	4295      	cmp	r5, r2
 800f974:	dd06      	ble.n	800f984 <__ieee754_log+0x64>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	f7f0 fc87 	bl	800028c <__adddf3>
 800f97e:	e7e3      	b.n	800f948 <__ieee754_log+0x28>
 800f980:	2300      	movs	r3, #0
 800f982:	e7f5      	b.n	800f970 <__ieee754_log+0x50>
 800f984:	152c      	asrs	r4, r5, #20
 800f986:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f98a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f98e:	441c      	add	r4, r3
 800f990:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f994:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f99c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f9a0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f9a4:	ea42 0105 	orr.w	r1, r2, r5
 800f9a8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	4bb5      	ldr	r3, [pc, #724]	@ (800fc84 <__ieee754_log+0x364>)
 800f9b0:	f7f0 fc6a 	bl	8000288 <__aeabi_dsub>
 800f9b4:	1cab      	adds	r3, r5, #2
 800f9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	4682      	mov	sl, r0
 800f9be:	468b      	mov	fp, r1
 800f9c0:	f04f 0200 	mov.w	r2, #0
 800f9c4:	dc53      	bgt.n	800fa6e <__ieee754_log+0x14e>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f7f1 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9cc:	b1d0      	cbz	r0, 800fa04 <__ieee754_log+0xe4>
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	f000 8120 	beq.w	800fc14 <__ieee754_log+0x2f4>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7f0 fda5 	bl	8000524 <__aeabi_i2d>
 800f9da:	a391      	add	r3, pc, #580	@ (adr r3, 800fc20 <__ieee754_log+0x300>)
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	460f      	mov	r7, r1
 800f9e4:	f7f0 fe08 	bl	80005f8 <__aeabi_dmul>
 800f9e8:	a38f      	add	r3, pc, #572	@ (adr r3, 800fc28 <__ieee754_log+0x308>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	f7f0 fdff 	bl	80005f8 <__aeabi_dmul>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	4620      	mov	r0, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	e7ba      	b.n	800f97a <__ieee754_log+0x5a>
 800fa04:	a38a      	add	r3, pc, #552	@ (adr r3, 800fc30 <__ieee754_log+0x310>)
 800fa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0a:	4650      	mov	r0, sl
 800fa0c:	4659      	mov	r1, fp
 800fa0e:	f7f0 fdf3 	bl	80005f8 <__aeabi_dmul>
 800fa12:	4602      	mov	r2, r0
 800fa14:	460b      	mov	r3, r1
 800fa16:	2000      	movs	r0, #0
 800fa18:	499b      	ldr	r1, [pc, #620]	@ (800fc88 <__ieee754_log+0x368>)
 800fa1a:	f7f0 fc35 	bl	8000288 <__aeabi_dsub>
 800fa1e:	4652      	mov	r2, sl
 800fa20:	4606      	mov	r6, r0
 800fa22:	460f      	mov	r7, r1
 800fa24:	465b      	mov	r3, fp
 800fa26:	4650      	mov	r0, sl
 800fa28:	4659      	mov	r1, fp
 800fa2a:	f7f0 fde5 	bl	80005f8 <__aeabi_dmul>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	4630      	mov	r0, r6
 800fa34:	4639      	mov	r1, r7
 800fa36:	f7f0 fddf 	bl	80005f8 <__aeabi_dmul>
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	460f      	mov	r7, r1
 800fa3e:	b914      	cbnz	r4, 800fa46 <__ieee754_log+0x126>
 800fa40:	4632      	mov	r2, r6
 800fa42:	463b      	mov	r3, r7
 800fa44:	e0a0      	b.n	800fb88 <__ieee754_log+0x268>
 800fa46:	4620      	mov	r0, r4
 800fa48:	f7f0 fd6c 	bl	8000524 <__aeabi_i2d>
 800fa4c:	a374      	add	r3, pc, #464	@ (adr r3, 800fc20 <__ieee754_log+0x300>)
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	4680      	mov	r8, r0
 800fa54:	4689      	mov	r9, r1
 800fa56:	f7f0 fdcf 	bl	80005f8 <__aeabi_dmul>
 800fa5a:	a373      	add	r3, pc, #460	@ (adr r3, 800fc28 <__ieee754_log+0x308>)
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	4604      	mov	r4, r0
 800fa62:	460d      	mov	r5, r1
 800fa64:	4640      	mov	r0, r8
 800fa66:	4649      	mov	r1, r9
 800fa68:	f7f0 fdc6 	bl	80005f8 <__aeabi_dmul>
 800fa6c:	e0a5      	b.n	800fbba <__ieee754_log+0x29a>
 800fa6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa72:	f7f0 fc0b 	bl	800028c <__adddf3>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4650      	mov	r0, sl
 800fa7c:	4659      	mov	r1, fp
 800fa7e:	f7f0 fee5 	bl	800084c <__aeabi_ddiv>
 800fa82:	e9cd 0100 	strd	r0, r1, [sp]
 800fa86:	4620      	mov	r0, r4
 800fa88:	f7f0 fd4c 	bl	8000524 <__aeabi_i2d>
 800fa8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa94:	4610      	mov	r0, r2
 800fa96:	4619      	mov	r1, r3
 800fa98:	f7f0 fdae 	bl	80005f8 <__aeabi_dmul>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	460b      	mov	r3, r1
 800faa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800faa4:	f7f0 fda8 	bl	80005f8 <__aeabi_dmul>
 800faa8:	a363      	add	r3, pc, #396	@ (adr r3, 800fc38 <__ieee754_log+0x318>)
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	4680      	mov	r8, r0
 800fab0:	4689      	mov	r9, r1
 800fab2:	f7f0 fda1 	bl	80005f8 <__aeabi_dmul>
 800fab6:	a362      	add	r3, pc, #392	@ (adr r3, 800fc40 <__ieee754_log+0x320>)
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	f7f0 fbe6 	bl	800028c <__adddf3>
 800fac0:	4642      	mov	r2, r8
 800fac2:	464b      	mov	r3, r9
 800fac4:	f7f0 fd98 	bl	80005f8 <__aeabi_dmul>
 800fac8:	a35f      	add	r3, pc, #380	@ (adr r3, 800fc48 <__ieee754_log+0x328>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fbdd 	bl	800028c <__adddf3>
 800fad2:	4642      	mov	r2, r8
 800fad4:	464b      	mov	r3, r9
 800fad6:	f7f0 fd8f 	bl	80005f8 <__aeabi_dmul>
 800fada:	a35d      	add	r3, pc, #372	@ (adr r3, 800fc50 <__ieee754_log+0x330>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fbd4 	bl	800028c <__adddf3>
 800fae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fae8:	f7f0 fd86 	bl	80005f8 <__aeabi_dmul>
 800faec:	a35a      	add	r3, pc, #360	@ (adr r3, 800fc58 <__ieee754_log+0x338>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faf6:	4640      	mov	r0, r8
 800faf8:	4649      	mov	r1, r9
 800fafa:	f7f0 fd7d 	bl	80005f8 <__aeabi_dmul>
 800fafe:	a358      	add	r3, pc, #352	@ (adr r3, 800fc60 <__ieee754_log+0x340>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f7f0 fbc2 	bl	800028c <__adddf3>
 800fb08:	4642      	mov	r2, r8
 800fb0a:	464b      	mov	r3, r9
 800fb0c:	f7f0 fd74 	bl	80005f8 <__aeabi_dmul>
 800fb10:	a355      	add	r3, pc, #340	@ (adr r3, 800fc68 <__ieee754_log+0x348>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f7f0 fbb9 	bl	800028c <__adddf3>
 800fb1a:	4642      	mov	r2, r8
 800fb1c:	464b      	mov	r3, r9
 800fb1e:	f7f0 fd6b 	bl	80005f8 <__aeabi_dmul>
 800fb22:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800fb2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb32:	f7f0 fbab 	bl	800028c <__adddf3>
 800fb36:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800fb3a:	3551      	adds	r5, #81	@ 0x51
 800fb3c:	4335      	orrs	r5, r6
 800fb3e:	2d00      	cmp	r5, #0
 800fb40:	4680      	mov	r8, r0
 800fb42:	4689      	mov	r9, r1
 800fb44:	dd48      	ble.n	800fbd8 <__ieee754_log+0x2b8>
 800fb46:	4b50      	ldr	r3, [pc, #320]	@ (800fc88 <__ieee754_log+0x368>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4650      	mov	r0, sl
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7f0 fd53 	bl	80005f8 <__aeabi_dmul>
 800fb52:	4652      	mov	r2, sl
 800fb54:	465b      	mov	r3, fp
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460f      	mov	r7, r1
 800fb62:	4640      	mov	r0, r8
 800fb64:	4649      	mov	r1, r9
 800fb66:	f7f0 fb91 	bl	800028c <__adddf3>
 800fb6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb6e:	f7f0 fd43 	bl	80005f8 <__aeabi_dmul>
 800fb72:	4680      	mov	r8, r0
 800fb74:	4689      	mov	r9, r1
 800fb76:	b964      	cbnz	r4, 800fb92 <__ieee754_log+0x272>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	4639      	mov	r1, r7
 800fb80:	f7f0 fb82 	bl	8000288 <__aeabi_dsub>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4650      	mov	r0, sl
 800fb8a:	4659      	mov	r1, fp
 800fb8c:	f7f0 fb7c 	bl	8000288 <__aeabi_dsub>
 800fb90:	e6da      	b.n	800f948 <__ieee754_log+0x28>
 800fb92:	a323      	add	r3, pc, #140	@ (adr r3, 800fc20 <__ieee754_log+0x300>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb9c:	f7f0 fd2c 	bl	80005f8 <__aeabi_dmul>
 800fba0:	a321      	add	r3, pc, #132	@ (adr r3, 800fc28 <__ieee754_log+0x308>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	4604      	mov	r4, r0
 800fba8:	460d      	mov	r5, r1
 800fbaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbae:	f7f0 fd23 	bl	80005f8 <__aeabi_dmul>
 800fbb2:	4642      	mov	r2, r8
 800fbb4:	464b      	mov	r3, r9
 800fbb6:	f7f0 fb69 	bl	800028c <__adddf3>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	f7f0 fb61 	bl	8000288 <__aeabi_dsub>
 800fbc6:	4652      	mov	r2, sl
 800fbc8:	465b      	mov	r3, fp
 800fbca:	f7f0 fb5d 	bl	8000288 <__aeabi_dsub>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	e7d9      	b.n	800fb8c <__ieee754_log+0x26c>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	4650      	mov	r0, sl
 800fbde:	4659      	mov	r1, fp
 800fbe0:	f7f0 fb52 	bl	8000288 <__aeabi_dsub>
 800fbe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbe8:	f7f0 fd06 	bl	80005f8 <__aeabi_dmul>
 800fbec:	4606      	mov	r6, r0
 800fbee:	460f      	mov	r7, r1
 800fbf0:	2c00      	cmp	r4, #0
 800fbf2:	f43f af25 	beq.w	800fa40 <__ieee754_log+0x120>
 800fbf6:	a30a      	add	r3, pc, #40	@ (adr r3, 800fc20 <__ieee754_log+0x300>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc00:	f7f0 fcfa 	bl	80005f8 <__aeabi_dmul>
 800fc04:	a308      	add	r3, pc, #32	@ (adr r3, 800fc28 <__ieee754_log+0x308>)
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc12:	e729      	b.n	800fa68 <__ieee754_log+0x148>
 800fc14:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800fc70 <__ieee754_log+0x350>
 800fc18:	e698      	b.n	800f94c <__ieee754_log+0x2c>
 800fc1a:	bf00      	nop
 800fc1c:	f3af 8000 	nop.w
 800fc20:	fee00000 	.word	0xfee00000
 800fc24:	3fe62e42 	.word	0x3fe62e42
 800fc28:	35793c76 	.word	0x35793c76
 800fc2c:	3dea39ef 	.word	0x3dea39ef
 800fc30:	55555555 	.word	0x55555555
 800fc34:	3fd55555 	.word	0x3fd55555
 800fc38:	df3e5244 	.word	0xdf3e5244
 800fc3c:	3fc2f112 	.word	0x3fc2f112
 800fc40:	96cb03de 	.word	0x96cb03de
 800fc44:	3fc74664 	.word	0x3fc74664
 800fc48:	94229359 	.word	0x94229359
 800fc4c:	3fd24924 	.word	0x3fd24924
 800fc50:	55555593 	.word	0x55555593
 800fc54:	3fe55555 	.word	0x3fe55555
 800fc58:	d078c69f 	.word	0xd078c69f
 800fc5c:	3fc39a09 	.word	0x3fc39a09
 800fc60:	1d8e78af 	.word	0x1d8e78af
 800fc64:	3fcc71c5 	.word	0x3fcc71c5
 800fc68:	9997fa04 	.word	0x9997fa04
 800fc6c:	3fd99999 	.word	0x3fd99999
	...
 800fc78:	c3500000 	.word	0xc3500000
 800fc7c:	43500000 	.word	0x43500000
 800fc80:	7fefffff 	.word	0x7fefffff
 800fc84:	3ff00000 	.word	0x3ff00000
 800fc88:	3fe00000 	.word	0x3fe00000

0800fc8c <with_errno>:
 800fc8c:	b510      	push	{r4, lr}
 800fc8e:	ed2d 8b02 	vpush	{d8}
 800fc92:	eeb0 8a40 	vmov.f32	s16, s0
 800fc96:	eef0 8a60 	vmov.f32	s17, s1
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	f7fd fe78 	bl	800d990 <__errno>
 800fca0:	eeb0 0a48 	vmov.f32	s0, s16
 800fca4:	eef0 0a68 	vmov.f32	s1, s17
 800fca8:	ecbd 8b02 	vpop	{d8}
 800fcac:	6004      	str	r4, [r0, #0]
 800fcae:	bd10      	pop	{r4, pc}

0800fcb0 <xflow>:
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	b507      	push	{r0, r1, r2, lr}
 800fcb4:	ec51 0b10 	vmov	r0, r1, d0
 800fcb8:	b183      	cbz	r3, 800fcdc <xflow+0x2c>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fcc0:	e9cd 2300 	strd	r2, r3, [sp]
 800fcc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fcc8:	f7f0 fc96 	bl	80005f8 <__aeabi_dmul>
 800fccc:	ec41 0b10 	vmov	d0, r0, r1
 800fcd0:	2022      	movs	r0, #34	@ 0x22
 800fcd2:	b003      	add	sp, #12
 800fcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcd8:	f7ff bfd8 	b.w	800fc8c <with_errno>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	e7ee      	b.n	800fcc0 <xflow+0x10>
 800fce2:	0000      	movs	r0, r0
 800fce4:	0000      	movs	r0, r0
	...

0800fce8 <__math_uflow>:
 800fce8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fcf0 <__math_uflow+0x8>
 800fcec:	f7ff bfe0 	b.w	800fcb0 <xflow>
 800fcf0:	00000000 	.word	0x00000000
 800fcf4:	10000000 	.word	0x10000000

0800fcf8 <__math_oflow>:
 800fcf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd00 <__math_oflow+0x8>
 800fcfc:	f7ff bfd8 	b.w	800fcb0 <xflow>
 800fd00:	00000000 	.word	0x00000000
 800fd04:	70000000 	.word	0x70000000

0800fd08 <_init>:
 800fd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0a:	bf00      	nop
 800fd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd0e:	bc08      	pop	{r3}
 800fd10:	469e      	mov	lr, r3
 800fd12:	4770      	bx	lr

0800fd14 <_fini>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr
