
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010470  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08010600  08010600  00011600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010de8  08010de8  000122f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010de8  08010de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010df0  08010df0  000122f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010df0  08010df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010df4  08010df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  20000000  08010df8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122f4  2**0
                  CONTENTS
 10 .bss          00002294  200002f4  200002f4  000122f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002588  20002588  000122f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fffd  00000000  00000000  00012324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f08  00000000  00000000  00032321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001337  00000000  00000000  00038b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a9a  00000000  00000000  00039e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002184d  00000000  00000000  00060909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d727f  00000000  00000000  00082156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001593d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bfc  00000000  00000000  00159418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00161014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f4 	.word	0x200002f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080105e8 	.word	0x080105e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	080105e8 	.word	0x080105e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a8 	b.w	8000fb0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcb7 	bl	80005f8 <__aeabi_dmul>
 8000c8a:	f000 f993 	bl	8000fb4 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc38 	bl	8000504 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcae 	bl	80005f8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf0 	bl	8000288 <__aeabi_dsub>
 8000ca8:	f000 f984 	bl	8000fb4 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001004:	2300      	movs	r3, #0
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	e019      	b.n	800103e <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b29b      	uxth	r3, r3
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4053      	eors	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	490b      	ldr	r1, [pc, #44]	@ (8001058 <Pec15_Calc+0x64>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3e1      	bcc.n	800100a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	08010828 	.word	0x08010828

0800105c <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800106a:	2310      	movs	r3, #16
 800106c:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800106e:	238f      	movs	r3, #143	@ 0x8f
 8001070:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
 8001076:	e024      	b.n	80010c2 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	4053      	eors	r3, r2
 8001088:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800108a:	2308      	movs	r3, #8
 800108c:	753b      	strb	r3, [r7, #20]
 800108e:	e012      	b.n	80010b6 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800109a:	8afb      	ldrh	r3, [r7, #22]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	4053      	eors	r3, r2
 80010a6:	82fb      	strh	r3, [r7, #22]
 80010a8:	e002      	b.n	80010b0 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	753b      	strb	r3, [r7, #20]
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dcd6      	bgt.n	8001078 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010ee:	2306      	movs	r3, #6
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	e012      	b.n	800111a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001104:	8afa      	ldrh	r2, [r7, #22]
 8001106:	8a7b      	ldrh	r3, [r7, #18]
 8001108:	4053      	eors	r3, r2
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	e002      	b.n	8001114 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001114:	7d3b      	ldrb	r3, [r7, #20]
 8001116:	3b01      	subs	r3, #1
 8001118:	753b      	strb	r3, [r7, #20]
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e9      	bne.n	80010f4 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29b      	uxth	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 8001142:	230c      	movs	r3, #12
 8001144:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800114e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	a314      	add	r3, pc, #80	@ (adr r3, 80011b0 <Set_UnderOver_Voltage_Threshold+0x78>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb73 	bl	800084c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b01      	subs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 80011a2:	89bb      	ldrh	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	30553261 	.word	0x30553261
 80011b4:	3f63a92a 	.word	0x3f63a92a

080011b8 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <ADBMS_getVoltage+0x40>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	30553261 	.word	0x30553261
 80011fc:	3f23a92a 	.word	0x3f23a92a

08001200 <ADBMS_Init>:

void ADBMS_Init(adbms6830_ICs *ICs, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	807b      	strh	r3, [r7, #2]
    ICs->hspi           = hspi;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	601a      	str	r2, [r3, #0]
    ICs->csb_pinBank    = csb_pinBank;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    ICs->csb_pin        = csb_pin;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	811a      	strh	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <ADBMS_Set_Config_A>:


void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e0f7      	b.n	800142c <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	b259      	sxtb	r1, r3
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b25b      	sxtb	r3, r3
 800127a:	430b      	orrs	r3, r1
 800127c:	b259      	sxtb	r1, r3
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1899      	adds	r1, r3, r2
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	3301      	adds	r3, #1
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	784a      	ldrb	r2, [r1, #1]
 80012b4:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	430b      	orrs	r3, r1
 80012f4:	b259      	sxtb	r1, r3
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	430b      	orrs	r3, r1
 8001316:	b259      	sxtb	r1, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001342:	b299      	uxth	r1, r3
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3303      	adds	r3, #3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800136e:	b29b      	uxth	r3, r3
 8001370:	121b      	asrs	r3, r3, #8
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	3304      	adds	r3, #4
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f001 0203 	and.w	r2, r1, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	430b      	orrs	r3, r1
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b25b      	sxtb	r3, r3
 800140e:	430b      	orrs	r3, r1
 8001410:	b259      	sxtb	r1, r3
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	3305      	adds	r3, #5
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f67f af04 	bls.w	800123c <ADBMS_Set_Config_A+0x10>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e09b      	b.n	800158a <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	b299      	uxth	r1, r3
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	b29b      	uxth	r3, r3
 8001486:	b25b      	sxtb	r3, r3
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	b25a      	sxtb	r2, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	b29b      	uxth	r3, r3
 800149c:	121b      	asrs	r3, r3, #8
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b259      	sxtb	r1, r3
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	1119      	asrs	r1, r3, #4
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3302      	adds	r3, #2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	440b      	add	r3, r1
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b259      	sxtb	r1, r3
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3303      	adds	r3, #3
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	88d9      	ldrh	r1, [r3, #6]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3304      	adds	r3, #4
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b299      	uxth	r1, r3
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	3305      	adds	r3, #5
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b01      	cmp	r3, #1
 800158e:	f67f af60 	bls.w	8001452 <ADBMS_Set_Config_B+0x10>
    }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	7138      	strb	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015bc:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 80015d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d4:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	801a      	strh	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <ADBMS_Set_ADSV>:

void ADBMS_Set_ADSV(adsv_ adsv, uint16_t *adsv_cmd_buffer)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	7138      	strb	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    *adsv_cmd_buffer = (0x1 << 8)
                        | ((adsv.cont && 0x1) << 7)
 800162e:	793b      	ldrb	r3, [r7, #4]
 8001630:	b21b      	sxth	r3, r3
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	b21b      	sxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	b21b      	sxth	r3, r3
                        | (0x3 << 5)
 800163a:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 800163e:	b21a      	sxth	r2, r3
                        | ((adsv.dcp && 0x1) << 4)
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	b21b      	sxth	r3, r3
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b21b      	sxth	r3, r3
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
                        | (0x1 << 3)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
                        | (adsv.ow && 0x3);
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
    *adsv_cmd_buffer = (0x1 << 8)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	801a      	strh	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <ADBMS_Set_ADAX>:

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	7138      	strb	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21b      	sxth	r3, r3
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	b21b      	sxth	r3, r3
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 80016b2:	793a      	ldrb	r2, [r7, #4]
 80016b4:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d001      	beq.n	80016c2 <ADBMS_Set_ADAX+0x40>
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	e000      	b.n	80016c4 <ADBMS_Set_ADAX+0x42>
 80016c2:	2200      	movs	r2, #0
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <ADBMS_Pack_CMD>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

ADBMS_Pack_CMD(uint16_t tx_cmd, uint8_t *spi_tx_dataBuf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fc69 	bl	8000ff4 <Pec15_Calc>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3302      	adds	r3, #2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3303      	adds	r3, #3
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <ADBMS_Pack_Write_Data_RegGrp>:

ADBMS_Pack_Write_Data_RegGrp(uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	81fb      	strh	r3, [r7, #14]

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);

    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ffcc 	bl	80016f8 <ADBMS_Pack_CMD>

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 8001760:	2302      	movs	r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	e04d      	b.n	8001802 <ADBMS_Pack_Write_Data_RegGrp+0xba>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 8001766:	2300      	movs	r3, #0
 8001768:	75bb      	strb	r3, [r7, #22]
 800176a:	e01b      	b.n	80017a4 <ADBMS_Pack_Write_Data_RegGrp+0x5c>
            spi_tx_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	f1c3 0202 	rsb	r2, r3, #2
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	461a      	mov	r2, r3
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	441a      	add	r2, r3
 8001786:	7dbb      	ldrb	r3, [r7, #22]
 8001788:	1d19      	adds	r1, r3, #4
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	f1c3 0302 	rsb	r3, r3, #2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	4619      	mov	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	440b      	add	r3, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 800179e:	7dbb      	ldrb	r3, [r7, #22]
 80017a0:	3301      	adds	r3, #1
 80017a2:	75bb      	strb	r3, [r7, #22]
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d9e0      	bls.n	800176c <ADBMS_Pack_Write_Data_RegGrp+0x24>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	f1c3 0202 	rsb	r2, r3, #2
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fc4a 	bl	800105c <Pec10_Calc>
 80017c8:	4603      	mov	r3, r0
 80017ca:	82bb      	strh	r3, [r7, #20]
        spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 80017cc:	8abb      	ldrh	r3, [r7, #20]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	f1c3 0302 	rsb	r3, r3, #2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	330a      	adds	r3, #10
 80017dc:	4619      	mov	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	440b      	add	r3, r1
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
        spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	f1c3 0302 	rsb	r3, r3, #2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	330b      	adds	r3, #11
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	8aba      	ldrh	r2, [r7, #20]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	3b01      	subs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ae      	bne.n	8001766 <ADBMS_Pack_Write_Data_RegGrp+0x1e>
    }
}
 8001808:	bf00      	nop
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <ADBMS_Process_Read_Data_RegGrp>:

bool ADBMS_Process_Read_Data_RegGrp(uint8_t *rx_dataBuf_raw, uint8_t *dataBuf)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    // Move Rx ptr to skip over data during transmit phase 
    uint8_t *rx_dataBuf = rx_dataBuf_raw + CMD_LEN + PEC_LEN;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	613b      	str	r3, [r7, #16]

    bool pec_error = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001826:	2300      	movs	r3, #0
 8001828:	75bb      	strb	r3, [r7, #22]
 800182a:	e051      	b.n	80018d0 <ADBMS_Process_Read_Data_RegGrp+0xbe>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800182c:	2300      	movs	r3, #0
 800182e:	757b      	strb	r3, [r7, #21]
 8001830:	e016      	b.n	8001860 <ADBMS_Process_Read_Data_RegGrp+0x4e>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001832:	7d7a      	ldrb	r2, [r7, #21]
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1899      	adds	r1, r3, r2
 8001840:	7dba      	ldrb	r2, [r7, #22]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	461a      	mov	r2, r3
 800184c:	7d7b      	ldrb	r3, [r7, #21]
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	780a      	ldrb	r2, [r1, #0]
 8001858:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	3301      	adds	r3, #1
 800185e:	757b      	strb	r3, [r7, #21]
 8001860:	7d7b      	ldrb	r3, [r7, #21]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d9e5      	bls.n	8001832 <ADBMS_Process_Read_Data_RegGrp+0x20>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 8001866:	7dbb      	ldrb	r3, [r7, #22]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	3306      	adds	r3, #6
 800186c:	461a      	mov	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b21b      	sxth	r3, r3
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21b      	sxth	r3, r3
 800187a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187e:	b21a      	sxth	r2, r3
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	3307      	adds	r3, #7
 8001886:	4619      	mov	r1, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	440b      	add	r3, r1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	81fb      	strh	r3, [r7, #14]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	461a      	mov	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4413      	add	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	2106      	movs	r1, #6
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fbd9 	bl	800105c <Pec10_Calc>
 80018aa:	4603      	mov	r3, r0
 80018ac:	81bb      	strh	r3, [r7, #12]
        pec_error |= (rx_pec != calc_pec);
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	89f9      	ldrh	r1, [r7, #14]
 80018b2:	89ba      	ldrh	r2, [r7, #12]
 80018b4:	4291      	cmp	r1, r2
 80018b6:	bf14      	ite	ne
 80018b8:	2201      	movne	r2, #1
 80018ba:	2200      	moveq	r2, #0
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4313      	orrs	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	3301      	adds	r3, #1
 80018ce:	75bb      	strb	r3, [r7, #22]
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d9aa      	bls.n	800182c <ADBMS_Process_Read_Data_RegGrp+0x1a>
    }
    return pec_error;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ADBMS_WakeUP_ICs_Polling>:

void ADBMS_WakeUP_ICs_Polling()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e012      	b.n	8001912 <ADBMS_WakeUP_ICs_Polling+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80018f2:	f004 ff67 	bl	80067c4 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f003 f840 	bl	800497c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 8001902:	f004 ff5f 	bl	80067c4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f003 f838 	bl	800497c <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3301      	adds	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d9e9      	bls.n	80018ec <ADBMS_WakeUP_ICs_Polling+0xc>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020000 	.word	0x40020000

08001928 <ADBMS_Write_CMD_Polling>:

void ADBMS_Write_CMD_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
    // spi_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
    // spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fedb 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001948:	f004 ff3c 	bl	80067c4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800194c:	f107 010c 	add.w	r1, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2204      	movs	r2, #4
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fe99 	bl	800868e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001962:	f004 ff2f 	bl	80067c4 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000

08001974 <ADBMS_Write_Data_RegGrp_Polling>:

void ADBMS_Write_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
    //     uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
    //     spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
    //     spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
    // }

    ADBMS_Pack_Write_Data_RegGrp(tx_cmd, data, spi_tx_dataBuf);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fedc 	bl	8001748 <ADBMS_Pack_Write_Data_RegGrp>

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2110      	movs	r1, #16
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 8001996:	f004 ff15 	bl	80067c4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2214      	movs	r2, #20
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f006 fe73 	bl	800868e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4803      	ldr	r0, [pc, #12]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 80019ae:	f004 ff09 	bl	80067c4 <HAL_GPIO_WritePin>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000

080019c0 <ADBMS_Read_Data_RegGrp_Polling>:

bool ADBMS_Read_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_rx_dataBuf)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[DATABUF_LEN] = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	743b      	strb	r3, [r7, #16]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	747b      	strb	r3, [r7, #17]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff fafc 	bl	8000ff4 <Pec15_Calc>
 80019fc:	4603      	mov	r3, r0
 80019fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	74bb      	strb	r3, [r7, #18]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	74fb      	strb	r3, [r7, #19]

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2110      	movs	r1, #16
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <ADBMS_Read_Data_RegGrp_Polling+0x8c>)
 8001a16:	f004 fed5 	bl	80067c4 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_rx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 8001a1a:	f107 0110 	add.w	r1, r7, #16
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2314      	movs	r3, #20
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f006 ff74 	bl	8008916 <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2110      	movs	r1, #16
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <ADBMS_Read_Data_RegGrp_Polling+0x8c>)
 8001a34:	f004 fec6 	bl	80067c4 <HAL_GPIO_WritePin>

    return ADBMS_Process_Read_Data_RegGrp(spi_rx_dataBuf, dataBuf);
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f7ff fee9 	bl	8001812 <ADBMS_Process_Read_Data_RegGrp>
 8001a40:	4603      	mov	r3, r0
    //     }
    //     uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
    //     uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
    //     pec_error |= (rx_pec != calc_pec);
    // }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40020000 	.word	0x40020000

08001a50 <ADBMS_Interface_Initialize>:
#include "adbms_interface.h"

void ADBMS_Interface_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	807b      	strh	r3, [r7, #2]
    ADBMS_Init(&adbms->ICs, hspi, csb_pinBank, csb_pin);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	f7ff fbcb 	bl	8001200 <ADBMS_Init>

    // Define which VoltageReg groups to read
    adbms->vregs[0] = RDCVA;
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c1c <ADBMS_Interface_Initialize+0x1cc>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
    adbms->vregs[1] = RDCVB;
 8001a74:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <ADBMS_Interface_Initialize+0x1d0>)
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
    adbms->vregs[2] = RDCVC;
 8001a7e:	4b69      	ldr	r3, [pc, #420]	@ (8001c24 <ADBMS_Interface_Initialize+0x1d4>)
 8001a80:	881a      	ldrh	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
    adbms->vregs[3] = RDCVD;
 8001a88:	4b67      	ldr	r3, [pc, #412]	@ (8001c28 <ADBMS_Interface_Initialize+0x1d8>)
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
    adbms->vregs[4] = RDCVE;
 8001a92:	4b66      	ldr	r3, [pc, #408]	@ (8001c2c <ADBMS_Interface_Initialize+0x1dc>)
 8001a94:	881a      	ldrh	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c

    // Define which TempReg groups to read
    adbms->tregs[0] = RDAUXA;
 8001a9c:	4b64      	ldr	r3, [pc, #400]	@ (8001c30 <ADBMS_Interface_Initialize+0x1e0>)
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
    adbms->tregs[1] = RDAUXB;
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <ADBMS_Interface_Initialize+0x1e4>)
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    adbms->tregs[2] = RDAUXC;
 8001ab0:	4b61      	ldr	r3, [pc, #388]	@ (8001c38 <ADBMS_Interface_Initialize+0x1e8>)
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    adbms->tregs[3] = RDAUXD;
 8001aba:	4b60      	ldr	r3, [pc, #384]	@ (8001c3c <ADBMS_Interface_Initialize+0x1ec>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124

    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	e042      	b.n	8001b50 <ADBMS_Interface_Initialize+0x100>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001aca:	7dfa      	ldrb	r2, [r7, #23]
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8001adc:	7993      	ldrb	r3, [r2, #6]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	7193      	strb	r3, [r2, #6]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001ae4:	7dfa      	ldrb	r2, [r7, #23]
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8001af6:	8913      	ldrh	r3, [r2, #8]
 8001af8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001afc:	f361 134e 	bfi	r3, r1, #5, #10
 8001b00:	8113      	strh	r3, [r2, #8]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001b02:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001b06:	f7ff fb17 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b14:	b291      	uxth	r1, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	3326      	adds	r3, #38	@ 0x26
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	885a      	ldrh	r2, [r3, #2]
 8001b20:	f361 020b 	bfi	r2, r1, #0, #12
 8001b24:	805a      	strh	r2, [r3, #2]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001b26:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8001c40 <ADBMS_Interface_Initialize+0x1f0>
 8001b2a:	f7ff fb05 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b38:	b291      	uxth	r1, r2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	3326      	adds	r3, #38	@ 0x26
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	889a      	ldrh	r2, [r3, #4]
 8001b44:	f361 020b 	bfi	r2, r1, #0, #12
 8001b48:	809a      	strh	r2, [r3, #4]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d9b9      	bls.n	8001aca <ADBMS_Interface_Initialize+0x7a>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f892 3142 	ldrb.w	r3, [r2, #322]	@ 0x142
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	f882 3142 	strb.w	r3, [r2, #322]	@ 0x142

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f503 7293 	add.w	r2, r3, #294	@ 0x126
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3332      	adds	r3, #50	@ 0x32
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff fb5b 	bl	800122c <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f503 7299 	add.w	r2, r3, #306	@ 0x132
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	333e      	adds	r3, #62	@ 0x3e
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f7ff fc5d 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4611      	mov	r1, r2
 8001b92:	f893 0142 	ldrb.w	r0, [r3, #322]	@ 0x142
 8001b96:	f7ff fd03 	bl	80015a0 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	f893 0144 	ldrb.w	r0, [r3, #324]	@ 0x144
 8001ba8:	f7ff fd6b 	bl	8001682 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs_Polling();
 8001bac:	f7ff fe98 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001bb0:	f7ff fe96 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_tx_dataBuf);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <ADBMS_Interface_Initialize+0x1f4>)
 8001bba:	8819      	ldrh	r1, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	330a      	adds	r3, #10
 8001bc6:	f7ff fed5 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001bca:	f7ff fe89 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <ADBMS_Interface_Initialize+0x1f8>)
 8001bd4:	8819      	ldrh	r1, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	330a      	adds	r3, #10
 8001be0:	f7ff fec8 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>

    // Turn on sensing
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adcv);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f7ff fe99 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f002 fec0 	bl	800497c <HAL_Delay>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7ff fe8d 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001c0e:	2008      	movs	r0, #8
 8001c10:	f002 feb4 	bl	800497c <HAL_Delay>
}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	20000006 	.word	0x20000006
 8001c24:	20000008 	.word	0x20000008
 8001c28:	2000000a 	.word	0x2000000a
 8001c2c:	2000000c 	.word	0x2000000c
 8001c30:	20000018 	.word	0x20000018
 8001c34:	2000001a 	.word	0x2000001a
 8001c38:	2000001c 	.word	0x2000001c
 8001c3c:	2000001e 	.word	0x2000001e
 8001c40:	40866666 	.word	0x40866666
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000002 	.word	0x20000002
 8001c4c:	00000000 	.word	0x00000000

08001c50 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <UpdateADInternalFault+0x2e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc6d 	bl	8000548 <__aeabi_f2d>
 8001c6e:	a330      	add	r3, pc, #192	@ (adr r3, 8001d30 <UpdateADInternalFault+0xe0>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe ff50 	bl	8000b18 <__aeabi_dcmpgt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <UpdateADInternalFault+0x32>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <UpdateADInternalFault+0x34>
 8001c82:	2300      	movs	r3, #0
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <UpdateADInternalFault+0x5e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8001ca0:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	d501      	bpl.n	8001cb2 <UpdateADInternalFault+0x62>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <UpdateADInternalFault+0x64>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <UpdateADInternalFault+0x8e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 8001cd0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d28 <UpdateADInternalFault+0xd8>
 8001cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	dd01      	ble.n	8001ce2 <UpdateADInternalFault+0x92>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <UpdateADInternalFault+0x94>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <UpdateADInternalFault+0xbe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8001d00:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001d2c <UpdateADInternalFault+0xdc>
 8001d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d501      	bpl.n	8001d12 <UpdateADInternalFault+0xc2>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <UpdateADInternalFault+0xc4>
 8001d12:	2300      	movs	r3, #0
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	42b40000 	.word	0x42b40000
 8001d2c:	c2200000 	.word	0xc2200000
 8001d30:	cccccccd 	.word	0xcccccccd
 8001d34:	4010cccc 	.word	0x4010cccc

08001d38 <ADBMS_UpdateVoltages>:


void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    uint8_t pec = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001d44:	f7ff fdcc 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>

    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVA, (adbms->ICs.cell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	4b37      	ldr	r3, [pc, #220]	@ (8001e2c <ADBMS_UpdateVoltages+0xf4>)
 8001d4e:	8819      	ldrh	r1, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 0252 	add.w	r2, r3, #82	@ 0x52
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	330a      	adds	r3, #10
 8001d5a:	f7ff fe31 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4413      	add	r3, r2
 8001d66:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVB, (adbms->ICs.cell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	4b30      	ldr	r3, [pc, #192]	@ (8001e30 <ADBMS_UpdateVoltages+0xf8>)
 8001d6e:	8819      	ldrh	r1, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3352      	adds	r3, #82	@ 0x52
 8001d74:	f103 020c 	add.w	r2, r3, #12
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	f7ff fe20 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4413      	add	r3, r2
 8001d88:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVC, (adbms->ICs.cell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <ADBMS_UpdateVoltages+0xfc>)
 8001d90:	8819      	ldrh	r1, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3352      	adds	r3, #82	@ 0x52
 8001d96:	f103 0218 	add.w	r2, r3, #24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	330a      	adds	r3, #10
 8001d9e:	f7ff fe0f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	4413      	add	r3, r2
 8001daa:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVD, (adbms->ICs.cell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	4b21      	ldr	r3, [pc, #132]	@ (8001e38 <ADBMS_UpdateVoltages+0x100>)
 8001db2:	8819      	ldrh	r1, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3352      	adds	r3, #82	@ 0x52
 8001db8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	330a      	adds	r3, #10
 8001dc0:	f7ff fdfe 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	4413      	add	r3, r2
 8001dcc:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <ADBMS_UpdateVoltages+0x104>)
 8001dd4:	8819      	ldrh	r1, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3352      	adds	r3, #82	@ 0x52
 8001dda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	330a      	adds	r3, #10
 8001de2:	f7ff fded 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	4413      	add	r3, r2
 8001dee:	73fb      	strb	r3, [r7, #15]
    adbms->total_pec_failures += pec;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ed93 7a8a 	vldr	s14, [r3, #552]	@ 0x228
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
    adbms->voltage_pec_failure = pec;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f889 	bl	8001f34 <ADBMS_CalculateValues_Voltages>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20000006 	.word	0x20000006
 8001e34:	20000008 	.word	0x20000008
 8001e38:	2000000a 	.word	0x2000000a
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    uint8_t pec = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001e4c:	f7ff fd48 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <ADBMS_UpdateTemps+0xe4>)
 8001e56:	8819      	ldrh	r1, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f103 02e2 	add.w	r2, r3, #226	@ 0xe2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	331e      	adds	r3, #30
 8001e62:	f7ff fdad 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <ADBMS_UpdateTemps+0xe8>)
 8001e76:	8819      	ldrh	r1, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	33e2      	adds	r3, #226	@ 0xe2
 8001e7c:	f103 020c 	add.w	r2, r3, #12
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	331e      	adds	r3, #30
 8001e84:	f7ff fd9c 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	4413      	add	r3, r2
 8001e90:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <ADBMS_UpdateTemps+0xec>)
 8001e98:	8819      	ldrh	r1, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	33e2      	adds	r3, #226	@ 0xe2
 8001e9e:	f103 0218 	add.w	r2, r3, #24
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	331e      	adds	r3, #30
 8001ea6:	f7ff fd8b 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <ADBMS_UpdateTemps+0xf0>)
 8001eba:	8819      	ldrh	r1, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	33e2      	adds	r3, #226	@ 0xe2
 8001ec0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	331e      	adds	r3, #30
 8001ec8:	f7ff fd7a 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	73fb      	strb	r3, [r7, #15]
    adbms->total_pec_failures += pec;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	ed93 7a8a 	vldr	s14, [r3, #552]	@ 0x228
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
    adbms->temp_pec_failure = pec;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f7ff fd0a 	bl	8001928 <ADBMS_Write_CMD_Polling>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f90b 	bl	8002130 <ADBMS_CalculateValues_Temps>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000018 	.word	0x20000018
 8001f28:	2000001a 	.word	0x2000001a
 8001f2c:	2000001c 	.word	0x2000001c
 8001f30:	2000001e 	.word	0x2000001e

08001f34 <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d014      	beq.n	8001f76 <ADBMS_CalculateValues_Voltages+0x42>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <ADBMS_CalculateValues_Voltages+0x42>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8001f62:	f083 0301 	eor.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d022      	beq.n	8001fc6 <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	ed93 7a89 	vldr	s14, [r3, #548]	@ 0x224
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8001fa4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	dd04      	ble.n	8001fbc <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001fba:	e0b2      	b.n	8002122 <ADBMS_CalculateValues_Voltages+0x1ee>
            adbms->pec_fault_ = 0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        return;
 8001fc4:	e0ad      	b.n	8002122 <ADBMS_CalculateValues_Voltages+0x1ee>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
    adbms->max_v = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
    adbms->min_v = FLT_MAX;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <ADBMS_CalculateValues_Voltages+0x1f4>)
 8001fde:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
 8001fe6:	e08e      	b.n	8002106 <ADBMS_CalculateValues_Voltages+0x1d2>
    {
        for (uint8_t creg_grp = 0; creg_grp < NUM_VREG_GRPS_READ; creg_grp++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75bb      	strb	r3, [r7, #22]
 8001fec:	e084      	b.n	80020f8 <ADBMS_CalculateValues_Voltages+0x1c4>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	757b      	strb	r3, [r7, #21]
 8001ff2:	e079      	b.n	80020e8 <ADBMS_CalculateValues_Voltages+0x1b4>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001ff4:	7dba      	ldrb	r2, [r7, #22]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7d7a      	ldrb	r2, [r7, #21]
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	4413      	add	r3, r2
 8002004:	2b0d      	cmp	r3, #13
 8002006:	dc73      	bgt.n	80020f0 <ADBMS_CalculateValues_Voltages+0x1bc>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8002008:	7dba      	ldrb	r2, [r7, #22]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4619      	mov	r1, r3
 8002014:	7dfa      	ldrb	r2, [r7, #23]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	18ca      	adds	r2, r1, r3
 8002020:	7d7b      	ldrb	r3, [r7, #21]
 8002022:	4413      	add	r3, r2
 8002024:	3301      	adds	r3, #1
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800202e:	b21b      	sxth	r3, r3
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b219      	sxth	r1, r3
 8002034:	7dba      	ldrb	r2, [r7, #22]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4618      	mov	r0, r3
 8002040:	7dfa      	ldrb	r2, [r7, #23]
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	18c2      	adds	r2, r0, r3
 800204c:	7d7b      	ldrb	r3, [r7, #21]
 800204e:	4413      	add	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002058:	b21b      	sxth	r3, r3
 800205a:	430b      	orrs	r3, r1
 800205c:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 800205e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f8a8 	bl	80011b8 <ADBMS_getVoltage>
 8002068:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 800206c:	7dfa      	ldrb	r2, [r7, #23]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4619      	mov	r1, r3
 8002078:	7dba      	ldrb	r2, [r7, #22]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	440b      	add	r3, r1
 8002082:	7d7a      	ldrb	r2, [r7, #21]
 8002084:	0852      	lsrs	r2, r2, #1
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4413      	add	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	3352      	adds	r3, #82	@ 0x52
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	ed93 7a7e 	vldr	s14, [r3, #504]	@ 0x1f8
 800209c:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8
                if (curr_voltage > adbms->max_v){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 80020b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	dd03      	ble.n	80020c6 <ADBMS_CalculateValues_Voltages+0x192>
                    adbms->max_v = curr_voltage;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
                }
                if (curr_voltage < adbms->min_v){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 80020cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80020d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	d503      	bpl.n	80020e2 <ADBMS_CalculateValues_Voltages+0x1ae>
                    adbms->min_v = curr_voltage;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80020e2:	7d7b      	ldrb	r3, [r7, #21]
 80020e4:	3302      	adds	r3, #2
 80020e6:	757b      	strb	r3, [r7, #21]
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d982      	bls.n	8001ff4 <ADBMS_CalculateValues_Voltages+0xc0>
 80020ee:	e000      	b.n	80020f2 <ADBMS_CalculateValues_Voltages+0x1be>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80020f0:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < NUM_VREG_GRPS_READ; creg_grp++)
 80020f2:	7dbb      	ldrb	r3, [r7, #22]
 80020f4:	3301      	adds	r3, #1
 80020f6:	75bb      	strb	r3, [r7, #22]
 80020f8:	7dbb      	ldrb	r3, [r7, #22]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	f67f af77 	bls.w	8001fee <ADBMS_CalculateValues_Voltages+0xba>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	3301      	adds	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	f67f af6d 	bls.w	8001fe8 <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	ed93 7a7e 	vldr	s14, [r3, #504]	@ 0x1f8
 8002114:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8002118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
}
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	7f7fffff 	.word	0x7f7fffff
 800212c:	00000000 	.word	0x00000000

08002130 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d014      	beq.n	8002172 <ADBMS_CalculateValues_Temps+0x42>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <ADBMS_CalculateValues_Temps+0x42>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d022      	beq.n	80021c2 <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	ed93 7a89 	vldr	s14, [r3, #548]	@ 0x224
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 80021a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80021a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd04      	ble.n	80021b8 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 80021b6:	e0e7      	b.n	8002388 <ADBMS_CalculateValues_Temps+0x258>
            adbms->pec_fault_ = 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        return;
 80021c0:	e0e2      	b.n	8002388 <ADBMS_CalculateValues_Temps+0x258>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
    adbms->min_temp = FLT_MAX;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a70      	ldr	r2, [pc, #448]	@ (8002398 <ADBMS_CalculateValues_Temps+0x268>)
 80021d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    bool openwire_temp_fault = false;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	e0b1      	b.n	800234a <ADBMS_CalculateValues_Temps+0x21a>
    {
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	76fb      	strb	r3, [r7, #27]
 80021ea:	e0a7      	b.n	800233c <ADBMS_CalculateValues_Temps+0x20c>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80021ec:	2300      	movs	r3, #0
 80021ee:	76bb      	strb	r3, [r7, #26]
 80021f0:	e09d      	b.n	800232e <ADBMS_CalculateValues_Temps+0x1fe>
            {
                // skip because only want temps 2-10
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 80021f2:	7efb      	ldrb	r3, [r7, #27]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <ADBMS_CalculateValues_Temps+0xd0>
 80021f8:	7ebb      	ldrb	r3, [r7, #26]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	f240 8093 	bls.w	8002326 <ADBMS_CalculateValues_Temps+0x1f6>
 8002200:	7efa      	ldrb	r2, [r7, #27]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	7eba      	ldrb	r2, [r7, #26]
 800220a:	0852      	lsrs	r2, r2, #1
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4413      	add	r3, r2
 8002210:	2b09      	cmp	r3, #9
 8002212:	f300 8088 	bgt.w	8002326 <ADBMS_CalculateValues_Temps+0x1f6>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8002216:	7efa      	ldrb	r2, [r7, #27]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4619      	mov	r1, r3
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	18ca      	adds	r2, r1, r3
 800222e:	7ebb      	ldrb	r3, [r7, #26]
 8002230:	4413      	add	r3, r2
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 800223c:	b21b      	sxth	r3, r3
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b219      	sxth	r1, r3
 8002242:	7efa      	ldrb	r2, [r7, #27]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4618      	mov	r0, r3
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	18c2      	adds	r2, r0, r3
 800225a:	7ebb      	ldrb	r3, [r7, #26]
 800225c:	4413      	add	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002266:	b21b      	sxth	r3, r3
 8002268:	430b      	orrs	r3, r1
 800226a:	833b      	strh	r3, [r7, #24]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 800226c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe ffa1 	bl	80011b8 <ADBMS_getVoltage>
 8002276:	ed87 0a05 	vstr	s0, [r7, #20]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 800227a:	4b48      	ldr	r3, [pc, #288]	@ (800239c <ADBMS_CalculateValues_Temps+0x26c>)
 800227c:	613b      	str	r3, [r7, #16]
                if (vref - raw_temp_voltage < 1e-1)
 800227e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002282:	edd7 7a05 	vldr	s15, [r7, #20]
 8002286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228a:	ee17 0a90 	vmov	r0, s15
 800228e:	f7fe f95b 	bl	8000548 <__aeabi_f2d>
 8002292:	a33f      	add	r3, pc, #252	@ (adr r3, 8002390 <ADBMS_CalculateValues_Temps+0x260>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe fc20 	bl	8000adc <__aeabi_dcmplt>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <ADBMS_CalculateValues_Temps+0x178>
                    openwire_temp_fault = true;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 80022a8:	edd7 0a04 	vldr	s1, [r7, #16]
 80022ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80022b0:	f002 f9ce 	bl	8004650 <getTemp>
 80022b4:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->temperatures[cic*NUM_TEMPS_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	00d9      	lsls	r1, r3, #3
 80022bc:	7efa      	ldrb	r2, [r7, #27]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	7eba      	ldrb	r2, [r7, #26]
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b02      	subs	r3, #2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	336e      	adds	r3, #110	@ 0x6e
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 80022dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 80022f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	dd03      	ble.n	8002308 <ADBMS_CalculateValues_Temps+0x1d8>
                    adbms->max_temp = curr_temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
                if (curr_temp < adbms->min_temp)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 800230e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	d505      	bpl.n	8002328 <ADBMS_CalculateValues_Temps+0x1f8>
                    adbms->min_temp = curr_temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8002324:	e000      	b.n	8002328 <ADBMS_CalculateValues_Temps+0x1f8>
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8002326:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002328:	7ebb      	ldrb	r3, [r7, #26]
 800232a:	3302      	adds	r3, #2
 800232c:	76bb      	strb	r3, [r7, #26]
 800232e:	7ebb      	ldrb	r3, [r7, #26]
 8002330:	2b05      	cmp	r3, #5
 8002332:	f67f af5e 	bls.w	80021f2 <ADBMS_CalculateValues_Temps+0xc2>
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 8002336:	7efb      	ldrb	r3, [r7, #27]
 8002338:	3301      	adds	r3, #1
 800233a:	76fb      	strb	r3, [r7, #27]
 800233c:	7efb      	ldrb	r3, [r7, #27]
 800233e:	2b03      	cmp	r3, #3
 8002340:	f67f af54 	bls.w	80021ec <ADBMS_CalculateValues_Temps+0xbc>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	f77f af4a 	ble.w	80021e6 <ADBMS_CalculateValues_Temps+0xb6>
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002358:	2b00      	cmp	r3, #0
 800235a:	d103      	bne.n	8002364 <ADBMS_CalculateValues_Temps+0x234>
 800235c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <ADBMS_CalculateValues_Temps+0x238>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <ADBMS_CalculateValues_Temps+0x23a>
 8002368:	2300      	movs	r3, #0
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 8002376:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800237a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800237e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210
    
}
 8002388:	3728      	adds	r7, #40	@ 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	9999999a 	.word	0x9999999a
 8002394:	3fb99999 	.word	0x3fb99999
 8002398:	7f7fffff 	.word	0x7f7fffff
 800239c:	40400000 	.word	0x40400000

080023a0 <cellBalanceOff>:
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
}

void cellBalanceOff(adbms_ *adbms)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    // Turn off CB indication LED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2140      	movs	r1, #64	@ 0x40
 80023ac:	4815      	ldr	r0, [pc, #84]	@ (8002404 <cellBalanceOff+0x64>)
 80023ae:	f004 fa09 	bl	80067c4 <HAL_GPIO_WritePin>

    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e009      	b.n	80023cc <cellBalanceOff+0x2c>
    {
        adbms->cfb[cic].dcc = 0;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3326      	adds	r3, #38	@ 0x26
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	811a      	strh	r2, [r3, #8]
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	ddf2      	ble.n	80023b8 <cellBalanceOff+0x18>
    }
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f503 7299 	add.w	r2, r3, #306	@ 0x132
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	333e      	adds	r3, #62	@ 0x3e
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff f82f 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <cellBalanceOff+0x68>)
 80023ea:	8819      	ldrh	r1, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	330a      	adds	r3, #10
 80023f6:	f7ff fabd 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020400 	.word	0x40020400
 8002408:	20000002 	.word	0x20000002

0800240c <UpdateOWCFault>:

void UpdateOWCFault(adbms_ *adbms)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    // check openwire fault
    ADBMS_WakeUP_ICs_Polling();
 8002414:	f7ff fa64 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    cellBalanceOff(adbms);   // need to turn off cell balancing to check for OWC
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffc1 	bl	80023a0 <cellBalanceOff>

    /// OWC EVEN Check
    adbms->adsv.cont = 1;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    adbms->adsv.ow = 1; // Enable OW on even-channel 
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 8002432:	2101      	movs	r1, #1
 8002434:	f361 0383 	bfi	r3, r1, #2, #2
 8002438:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4611      	mov	r1, r2
 8002446:	f893 0143 	ldrb.w	r0, [r3, #323]	@ 0x143
 800244a:	f7ff f8eb 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fa64 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 8002460:	2008      	movs	r0, #8
 8002462:	f002 fa8b 	bl	800497c <HAL_Delay>

    // Get new s-channel voltages
    bool pec = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	747b      	strb	r3, [r7, #17]
    ADBMS_WakeUP_ICs_Polling();
 800246a:	f7ff fa39 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	4b73      	ldr	r3, [pc, #460]	@ (8002640 <UpdateOWCFault+0x234>)
 8002474:	8819      	ldrh	r1, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	331e      	adds	r3, #30
 8002480:	f7ff fa9e 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	7c7b      	ldrb	r3, [r7, #17]
 800248a:	4313      	orrs	r3, r2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	4b69      	ldr	r3, [pc, #420]	@ (8002644 <UpdateOWCFault+0x238>)
 800249e:	8819      	ldrh	r1, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	339a      	adds	r3, #154	@ 0x9a
 80024a4:	f103 020c 	add.w	r2, r3, #12
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	331e      	adds	r3, #30
 80024ac:	f7ff fa88 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	7c7b      	ldrb	r3, [r7, #17]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002648 <UpdateOWCFault+0x23c>)
 80024ca:	8819      	ldrh	r1, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	339a      	adds	r3, #154	@ 0x9a
 80024d0:	f103 0218 	add.w	r2, r3, #24
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	331e      	adds	r3, #30
 80024d8:	f7ff fa72 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	7c7b      	ldrb	r3, [r7, #17]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	4b55      	ldr	r3, [pc, #340]	@ (800264c <UpdateOWCFault+0x240>)
 80024f6:	8819      	ldrh	r1, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	339a      	adds	r3, #154	@ 0x9a
 80024fc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	331e      	adds	r3, #30
 8002504:	f7ff fa5c 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	7c7b      	ldrb	r3, [r7, #17]
 800250e:	4313      	orrs	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	4b4b      	ldr	r3, [pc, #300]	@ (8002650 <UpdateOWCFault+0x244>)
 8002522:	8819      	ldrh	r1, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	339a      	adds	r3, #154	@ 0x9a
 8002528:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	331e      	adds	r3, #30
 8002530:	f7ff fa46 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	7c7b      	ldrb	r3, [r7, #17]
 800253a:	4313      	orrs	r3, r2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	747b      	strb	r3, [r7, #17]

    if(pec){
 8002548:	7c7b      	ldrb	r3, [r7, #17]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d019      	beq.n	8002582 <UpdateOWCFault+0x176>
        adbms->current_owc_failures += 1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 8002554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	edc3 7a88 	vstr	s15, [r3, #544]	@ 0x220
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 8002568:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800256c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	dc00      	bgt.n	8002578 <UpdateOWCFault+0x16c>
            adbms->pec_fault_ = 1;
        }
        return;
 8002576:	e1bb      	b.n	80028f0 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        return;
 8002580:	e1b6      	b.n	80028f0 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800258c:	2300      	movs	r3, #0
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	e06b      	b.n	800266a <UpdateOWCFault+0x25e>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8002592:	2305      	movs	r3, #5
 8002594:	737b      	strb	r3, [r7, #13]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002596:	2300      	movs	r3, #0
 8002598:	75bb      	strb	r3, [r7, #22]
 800259a:	e05f      	b.n	800265c <UpdateOWCFault+0x250>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 800259c:	2300      	movs	r3, #0
 800259e:	757b      	strb	r3, [r7, #21]
 80025a0:	e04a      	b.n	8002638 <UpdateOWCFault+0x22c>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80025a2:	7dba      	ldrb	r2, [r7, #22]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	7d7a      	ldrb	r2, [r7, #21]
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	4413      	add	r3, r2
 80025b2:	2b0d      	cmp	r3, #13
 80025b4:	dc4e      	bgt.n	8002654 <UpdateOWCFault+0x248>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 80025b6:	7dba      	ldrb	r2, [r7, #22]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	7dfa      	ldrb	r2, [r7, #23]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	18ca      	adds	r2, r1, r3
 80025ce:	7d7b      	ldrb	r3, [r7, #21]
 80025d0:	4413      	add	r3, r2
 80025d2:	3301      	adds	r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80025dc:	b21b      	sxth	r3, r3
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b219      	sxth	r1, r3
 80025e2:	7dba      	ldrb	r2, [r7, #22]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	7dfa      	ldrb	r2, [r7, #23]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	18c2      	adds	r2, r0, r3
 80025fa:	7d7b      	ldrb	r3, [r7, #21]
 80025fc:	4413      	add	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002606:	b21b      	sxth	r3, r3
 8002608:	430b      	orrs	r3, r1
 800260a:	817b      	strh	r3, [r7, #10]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 800260c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fdd1 	bl	80011b8 <ADBMS_getVoltage>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800261e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	d504      	bpl.n	8002632 <UpdateOWCFault+0x226>
                {
                    adbms->openwire_fault_ = 1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
                    return;
 8002630:	e15e      	b.n	80028f0 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002632:	7d7b      	ldrb	r3, [r7, #21]
 8002634:	3302      	adds	r3, #2
 8002636:	757b      	strb	r3, [r7, #21]
 8002638:	7d7b      	ldrb	r3, [r7, #21]
 800263a:	2b05      	cmp	r3, #5
 800263c:	d9b1      	bls.n	80025a2 <UpdateOWCFault+0x196>
 800263e:	e00a      	b.n	8002656 <UpdateOWCFault+0x24a>
 8002640:	2000000e 	.word	0x2000000e
 8002644:	20000010 	.word	0x20000010
 8002648:	20000012 	.word	0x20000012
 800264c:	20000014 	.word	0x20000014
 8002650:	20000016 	.word	0x20000016
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002654:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002656:	7dbb      	ldrb	r3, [r7, #22]
 8002658:	3301      	adds	r3, #1
 800265a:	75bb      	strb	r3, [r7, #22]
 800265c:	7dba      	ldrb	r2, [r7, #22]
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	429a      	cmp	r2, r3
 8002662:	d39b      	bcc.n	800259c <UpdateOWCFault+0x190>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	3301      	adds	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d990      	bls.n	8002592 <UpdateOWCFault+0x186>
            }
        }
    }

    /// OWC ODD Check
    adbms->adsv.cont = 1;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    adbms->adsv.ow = 2; // Enable OW on odd-channel 
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 8002684:	2102      	movs	r1, #2
 8002686:	f361 0383 	bfi	r3, r1, #2, #2
 800268a:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4611      	mov	r1, r2
 8002698:	f893 0143 	ldrb.w	r0, [r3, #323]	@ 0x143
 800269c:	f7fe ffc2 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7ff f93b 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 80026b2:	2008      	movs	r0, #8
 80026b4:	f002 f962 	bl	800497c <HAL_Delay>

    // Get new s-channel voltages
    ADBMS_WakeUP_ICs_Polling();
 80026b8:	f7ff f912 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	4b8d      	ldr	r3, [pc, #564]	@ (80028f8 <UpdateOWCFault+0x4ec>)
 80026c2:	8819      	ldrh	r1, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	331e      	adds	r3, #30
 80026ce:	f7ff f977 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	7c7b      	ldrb	r3, [r7, #17]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	4b84      	ldr	r3, [pc, #528]	@ (80028fc <UpdateOWCFault+0x4f0>)
 80026ec:	8819      	ldrh	r1, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	339a      	adds	r3, #154	@ 0x9a
 80026f2:	f103 020c 	add.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	331e      	adds	r3, #30
 80026fa:	f7ff f961 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	7c7b      	ldrb	r3, [r7, #17]
 8002704:	4313      	orrs	r3, r2
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <UpdateOWCFault+0x4f4>)
 8002718:	8819      	ldrh	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	339a      	adds	r3, #154	@ 0x9a
 800271e:	f103 0218 	add.w	r2, r3, #24
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	331e      	adds	r3, #30
 8002726:	f7ff f94b 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	7c7b      	ldrb	r3, [r7, #17]
 8002730:	4313      	orrs	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	4b70      	ldr	r3, [pc, #448]	@ (8002904 <UpdateOWCFault+0x4f8>)
 8002744:	8819      	ldrh	r1, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	339a      	adds	r3, #154	@ 0x9a
 800274a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	331e      	adds	r3, #30
 8002752:	f7ff f935 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	7c7b      	ldrb	r3, [r7, #17]
 800275c:	4313      	orrs	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	4b66      	ldr	r3, [pc, #408]	@ (8002908 <UpdateOWCFault+0x4fc>)
 8002770:	8819      	ldrh	r1, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	339a      	adds	r3, #154	@ 0x9a
 8002776:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	331e      	adds	r3, #30
 800277e:	f7ff f91f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	7c7b      	ldrb	r3, [r7, #17]
 8002788:	4313      	orrs	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	747b      	strb	r3, [r7, #17]

    if(pec){
 8002796:	7c7b      	ldrb	r3, [r7, #17]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d019      	beq.n	80027d0 <UpdateOWCFault+0x3c4>
        adbms->current_owc_failures += 1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 80027a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	edc3 7a88 	vstr	s15, [r3, #544]	@ 0x220
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 80027b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	dc00      	bgt.n	80027c6 <UpdateOWCFault+0x3ba>
            adbms->pec_fault_ = 1;
        }
        return;
 80027c4:	e094      	b.n	80028f0 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
        return;
 80027ce:	e08f      	b.n	80028f0 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80027da:	2300      	movs	r3, #0
 80027dc:	753b      	strb	r3, [r7, #20]
 80027de:	e061      	b.n	80028a4 <UpdateOWCFault+0x498>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 80027e0:	2305      	movs	r3, #5
 80027e2:	743b      	strb	r3, [r7, #16]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	74fb      	strb	r3, [r7, #19]
 80027e8:	e055      	b.n	8002896 <UpdateOWCFault+0x48a>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80027ea:	2300      	movs	r3, #0
 80027ec:	74bb      	strb	r3, [r7, #18]
 80027ee:	e04a      	b.n	8002886 <UpdateOWCFault+0x47a>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80027f0:	7cfa      	ldrb	r2, [r7, #19]
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	7cba      	ldrb	r2, [r7, #18]
 80027fa:	0852      	lsrs	r2, r2, #1
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4413      	add	r3, r2
 8002800:	2b0d      	cmp	r3, #13
 8002802:	dc44      	bgt.n	800288e <UpdateOWCFault+0x482>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8002804:	7cfa      	ldrb	r2, [r7, #19]
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4619      	mov	r1, r3
 8002810:	7d3a      	ldrb	r2, [r7, #20]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	18ca      	adds	r2, r1, r3
 800281c:	7cbb      	ldrb	r3, [r7, #18]
 800281e:	4413      	add	r3, r2
 8002820:	3301      	adds	r3, #1
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800282a:	b21b      	sxth	r3, r3
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b219      	sxth	r1, r3
 8002830:	7cfa      	ldrb	r2, [r7, #19]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4618      	mov	r0, r3
 800283c:	7d3a      	ldrb	r2, [r7, #20]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	18c2      	adds	r2, r0, r3
 8002848:	7cbb      	ldrb	r3, [r7, #18]
 800284a:	4413      	add	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002854:	b21b      	sxth	r3, r3
 8002856:	430b      	orrs	r3, r1
 8002858:	81fb      	strh	r3, [r7, #14]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 800285a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fcaa 	bl	80011b8 <ADBMS_getVoltage>
 8002864:	eef0 7a40 	vmov.f32	s15, s0
 8002868:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d504      	bpl.n	8002880 <UpdateOWCFault+0x474>
                {
                    adbms->openwire_fault_ = 1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
                    return;
 800287e:	e037      	b.n	80028f0 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002880:	7cbb      	ldrb	r3, [r7, #18]
 8002882:	3302      	adds	r3, #2
 8002884:	74bb      	strb	r3, [r7, #18]
 8002886:	7cbb      	ldrb	r3, [r7, #18]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d9b1      	bls.n	80027f0 <UpdateOWCFault+0x3e4>
 800288c:	e000      	b.n	8002890 <UpdateOWCFault+0x484>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 800288e:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	3301      	adds	r3, #1
 8002894:	74fb      	strb	r3, [r7, #19]
 8002896:	7cfa      	ldrb	r2, [r7, #19]
 8002898:	7c3b      	ldrb	r3, [r7, #16]
 800289a:	429a      	cmp	r2, r3
 800289c:	d3a5      	bcc.n	80027ea <UpdateOWCFault+0x3de>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800289e:	7d3b      	ldrb	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	753b      	strb	r3, [r7, #20]
 80028a4:	7d3b      	ldrb	r3, [r7, #20]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d99a      	bls.n	80027e0 <UpdateOWCFault+0x3d4>
            }
        }
    }

    /// Turn off owc
    adbms->adsv.cont = 0;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    adbms->adsv.ow = 0; // Enable OW on odd-channel 
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 80028be:	f023 030c 	bic.w	r3, r3, #12
 80028c2:	f882 3143 	strb.w	r3, [r2, #323]	@ 0x143
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4611      	mov	r1, r2
 80028d0:	f893 0143 	ldrb.w	r0, [r3, #323]	@ 0x143
 80028d4:	f7fe fea6 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7ff f81f 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);    // S-Channels are updated at 8ms
 80028ea:	2001      	movs	r0, #1
 80028ec:	f002 f846 	bl	800497c <HAL_Delay>
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000000e 	.word	0x2000000e
 80028fc:	20000010 	.word	0x20000010
 8002900:	20000012 	.word	0x20000012
 8002904:	20000014 	.word	0x20000014
 8002908:	20000016 	.word	0x20000016

0800290c <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 8002914:	487a      	ldr	r0, [pc, #488]	@ (8002b00 <ADBMS_Print_Vals+0x1f4>)
 8002916:	f00b fb67 	bl	800dfe8 <puts>
    printf("total v: %f\n", adbms->total_v);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe11 	bl	8000548 <__aeabi_f2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4876      	ldr	r0, [pc, #472]	@ (8002b04 <ADBMS_Print_Vals+0x1f8>)
 800292c:	f00b faec 	bl	800df08 <iprintf>
    printf("max v: %f\t", adbms->max_v);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4871      	ldr	r0, [pc, #452]	@ (8002b08 <ADBMS_Print_Vals+0x1fc>)
 8002942:	f00b fae1 	bl	800df08 <iprintf>
    printf("min v: %f\t", adbms->min_v);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fdfb 	bl	8000548 <__aeabi_f2d>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	486d      	ldr	r0, [pc, #436]	@ (8002b0c <ADBMS_Print_Vals+0x200>)
 8002958:	f00b fad6 	bl	800df08 <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fdf0 	bl	8000548 <__aeabi_f2d>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4868      	ldr	r0, [pc, #416]	@ (8002b10 <ADBMS_Print_Vals+0x204>)
 800296e:	f00b facb 	bl	800df08 <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	ed93 7a7f 	vldr	s14, [r3, #508]	@ 0x1fc
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 800297e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002982:	ee17 0a90 	vmov	r0, s15
 8002986:	f7fd fddf 	bl	8000548 <__aeabi_f2d>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4861      	ldr	r0, [pc, #388]	@ (8002b14 <ADBMS_Print_Vals+0x208>)
 8002990:	f00b faba 	bl	800df08 <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e02a      	b.n	80029f0 <ADBMS_Print_Vals+0xe4>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	e021      	b.n	80029e4 <ADBMS_Print_Vals+0xd8>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	461a      	mov	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	1c5c      	adds	r4, r3, #1
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	461a      	mov	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	3352      	adds	r3, #82	@ 0x52
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdbb 	bl	8000548 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4621      	mov	r1, r4
 80029d8:	484f      	ldr	r0, [pc, #316]	@ (8002b18 <ADBMS_Print_Vals+0x20c>)
 80029da:	f00b fa95 	bl	800df08 <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3301      	adds	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0d      	cmp	r3, #13
 80029e8:	ddda      	ble.n	80029a0 <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	ddd1      	ble.n	800299a <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 80029f6:	200a      	movs	r0, #10
 80029f8:	f00b fa98 	bl	800df2c <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 80029fc:	4847      	ldr	r0, [pc, #284]	@ (8002b1c <ADBMS_Print_Vals+0x210>)
 80029fe:	f00b faf3 	bl	800dfe8 <puts>
    printf("max temp: %f\t", adbms->max_temp);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd9d 	bl	8000548 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4843      	ldr	r0, [pc, #268]	@ (8002b20 <ADBMS_Print_Vals+0x214>)
 8002a14:	f00b fa78 	bl	800df08 <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd92 	bl	8000548 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	483e      	ldr	r0, [pc, #248]	@ (8002b24 <ADBMS_Print_Vals+0x218>)
 8002a2a:	f00b fa6d 	bl	800df08 <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd87 	bl	8000548 <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	483a      	ldr	r0, [pc, #232]	@ (8002b28 <ADBMS_Print_Vals+0x21c>)
 8002a40:	f00b fa62 	bl	800df08 <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e022      	b.n	8002a90 <ADBMS_Print_Vals+0x184>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	e019      	b.n	8002a84 <ADBMS_Print_Vals+0x178>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	00da      	lsls	r2, r3, #3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4413      	add	r3, r2
 8002a58:	1c5c      	adds	r4, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	00da      	lsls	r2, r3, #3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4413      	add	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	336e      	adds	r3, #110	@ 0x6e
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd6b 	bl	8000548 <__aeabi_f2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4621      	mov	r1, r4
 8002a78:	482c      	ldr	r0, [pc, #176]	@ (8002b2c <ADBMS_Print_Vals+0x220>)
 8002a7a:	f00b fa45 	bl	800df08 <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	dde2      	ble.n	8002a50 <ADBMS_Print_Vals+0x144>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	ddd9      	ble.n	8002a4a <ADBMS_Print_Vals+0x13e>
        }
    }
    printf("\n");
 8002a96:	200a      	movs	r0, #10
 8002a98:	f00b fa48 	bl	800df2c <putchar>

    printf("Faults\n");
 8002a9c:	4824      	ldr	r0, [pc, #144]	@ (8002b30 <ADBMS_Print_Vals+0x224>)
 8002a9e:	f00b faa3 	bl	800dfe8 <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4822      	ldr	r0, [pc, #136]	@ (8002b34 <ADBMS_Print_Vals+0x228>)
 8002aac:	f00b fa2c 	bl	800df08 <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	481f      	ldr	r0, [pc, #124]	@ (8002b38 <ADBMS_Print_Vals+0x22c>)
 8002aba:	f00b fa25 	bl	800df08 <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	481d      	ldr	r0, [pc, #116]	@ (8002b3c <ADBMS_Print_Vals+0x230>)
 8002ac8:	f00b fa1e 	bl	800df08 <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	481a      	ldr	r0, [pc, #104]	@ (8002b40 <ADBMS_Print_Vals+0x234>)
 8002ad6:	f00b fa17 	bl	800df08 <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4818      	ldr	r0, [pc, #96]	@ (8002b44 <ADBMS_Print_Vals+0x238>)
 8002ae4:	f00b fa10 	bl	800df08 <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002aee:	4619      	mov	r1, r3
 8002af0:	4815      	ldr	r0, [pc, #84]	@ (8002b48 <ADBMS_Print_Vals+0x23c>)
 8002af2:	f00b fa09 	bl	800df08 <iprintf>
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08010600 	.word	0x08010600
 8002b04:	0801060c 	.word	0x0801060c
 8002b08:	0801061c 	.word	0x0801061c
 8002b0c:	08010628 	.word	0x08010628
 8002b10:	08010634 	.word	0x08010634
 8002b14:	08010640 	.word	0x08010640
 8002b18:	08010650 	.word	0x08010650
 8002b1c:	0801065c 	.word	0x0801065c
 8002b20:	08010664 	.word	0x08010664
 8002b24:	08010674 	.word	0x08010674
 8002b28:	08010684 	.word	0x08010684
 8002b2c:	08010694 	.word	0x08010694
 8002b30:	0801069c 	.word	0x0801069c
 8002b34:	080106a4 	.word	0x080106a4
 8002b38:	080106b8 	.word	0x080106b8
 8002b3c:	080106cc 	.word	0x080106cc
 8002b40:	080106d8 	.word	0x080106d8
 8002b44:	080106f0 	.word	0x080106f0
 8002b48:	08010700 	.word	0x08010700

08002b4c <bms_mainbaord_setup>:
#include "bms.h"

mainboard_ mainboard;

void bms_mainbaord_setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin, ADC_HandleTypeDef *hadc, CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b09c      	sub	sp, #112	@ 0x70
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
	// initialize handles
	mainboard.hadc = hadc;
 8002b5c:	4a36      	ldr	r2, [pc, #216]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f8c2 3234 	str.w	r3, [r2, #564]	@ 0x234
	mainboard.hcan_drive = hcan1;
 8002b64:	4a34      	ldr	r2, [pc, #208]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b68:	f8c2 3238 	str.w	r3, [r2, #568]	@ 0x238
	mainboard.hcan_data = hcan2;
 8002b6c:	4a32      	ldr	r2, [pc, #200]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b70:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c

	// get offset for current
	mainboard.current_offset = getCurrentOffset(mainboard.hadc);
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b76:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe24 	bl	80037c8 <getCurrentOffset>
 8002b80:	eef0 7a40 	vmov.f32	s15, s0
 8002b84:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b86:	edc3 7a92 	vstr	s15, [r3, #584]	@ 0x248

	// initialize ad chip;
	ADBMS_Interface_Initialize(&mainboard.adbms, hspi, csb_pinBank, csb_pin);
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4829      	ldr	r0, [pc, #164]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b92:	f7fe ff5d 	bl	8001a50 <ADBMS_Interface_Initialize>

	// initialize CAN;
	BMS_Initialize_Can(&mainboard);
 8002b96:	4828      	ldr	r0, [pc, #160]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002b98:	f000 f960 	bl	8002e5c <BMS_Initialize_Can>

	// initialize the timers: adbms_mainboard_loop, drive_can, data_can
	timer_ t_adbms = CreateTimer(500, bms_mainboard_loop);
 8002b9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ba0:	4a26      	ldr	r2, [pc, #152]	@ (8002c3c <bms_mainbaord_setup+0xf0>)
 8002ba2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fdda 	bl	8004760 <CreateTimer>
	timer_ t_adbms_owc_check = CreateTimer(30000, adbms_owc_loop);
 8002bac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <bms_mainbaord_setup+0xf4>)
 8002bb2:	f247 5130 	movw	r1, #30000	@ 0x7530
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 fdd2 	bl	8004760 <CreateTimer>
	timer_ t_drive_can = CreateTimer(100, drive_can_loop);
 8002bbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bc0:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <bms_mainbaord_setup+0xf8>)
 8002bc2:	2164      	movs	r1, #100	@ 0x64
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fdcb 	bl	8004760 <CreateTimer>
	timer_ t_data_can = CreateTimer(1000, data_can_loop);
 8002bca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bce:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <bms_mainbaord_setup+0xfc>)
 8002bd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 fdc3 	bl	8004760 <CreateTimer>
	timer_ timers[NUM_TIMERS] = {t_adbms, t_adbms_owc_check, t_drive_can, t_data_can};
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002be2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002be4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002bf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bfa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c08:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mainboard.tg = CreateTimerGroup(timers);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fdbd 	bl	8004796 <CreateTimerGroup>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4a06      	ldr	r2, [pc, #24]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002c20:	f8c2 322c 	str.w	r3, [r2, #556]	@ 0x22c

	mainboard.start_time = HAL_GetTick();
 8002c24:	f001 fe9e 	bl	8004964 <HAL_GetTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a03      	ldr	r2, [pc, #12]	@ (8002c38 <bms_mainbaord_setup+0xec>)
 8002c2c:	f8c2 3254 	str.w	r3, [r2, #596]	@ 0x254
}
 8002c30:	bf00      	nop
 8002c32:	3770      	adds	r7, #112	@ 0x70
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000310 	.word	0x20000310
 8002c3c:	08002c65 	.word	0x08002c65
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002f8d 	.word	0x08002f8d
 8002c48:	08002ffd 	.word	0x08002ffd

08002c4c <tick_mainboard_timers>:
{
  ADBMS_DMA_Complete(&mainboard.adbms); 
}

void tick_mainboard_timers()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	TickTimerGroup(mainboard.tg);
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <tick_mainboard_timers+0x14>)
 8002c52:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fdb6 	bl	80047c8 <TickTimerGroup>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000310 	.word	0x20000310

08002c64 <bms_mainboard_loop>:

// ADBMS loop that gets ticked
void bms_mainboard_loop()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	UpdateValues();
 8002c68:	f000 f80e 	bl	8002c88 <UpdateValues>
	CheckFaults();
 8002c6c:	f000 f87a 	bl	8002d64 <CheckFaults>
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <adbms_owc_loop>:

// Seprate loop that gets ticked to run OWC
void adbms_owc_loop(){ UpdateOWCFault(&mainboard.adbms); }
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <adbms_owc_loop+0x10>)
 8002c7a:	f7ff fbc7 	bl	800240c <UpdateOWCFault>
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000310 	.word	0x20000310

08002c88 <UpdateValues>:

void UpdateValues()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	// ADBMS values
	ADBMS_UpdateVoltages(&mainboard.adbms);
 8002c8c:	4831      	ldr	r0, [pc, #196]	@ (8002d54 <UpdateValues+0xcc>)
 8002c8e:	f7ff f853 	bl	8001d38 <ADBMS_UpdateVoltages>
	ADBMS_UpdateTemps(&mainboard.adbms);
 8002c92:	4830      	ldr	r0, [pc, #192]	@ (8002d54 <UpdateValues+0xcc>)
 8002c94:	f7ff f8d4 	bl	8001e40 <ADBMS_UpdateTemps>

	UpdateADInternalFault(&mainboard.adbms);
 8002c98:	482e      	ldr	r0, [pc, #184]	@ (8002d54 <UpdateValues+0xcc>)
 8002c9a:	f7fe ffd9 	bl	8001c50 <UpdateADInternalFault>

	// update STM32 Pin values
	// reads: shutdown_contactors, IMD_Status, 6822_State
	mainboard.shutdown_present = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); 	   // shutdown status
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	482d      	ldr	r0, [pc, #180]	@ (8002d58 <UpdateValues+0xd0>)
 8002ca2:	f003 fd77 	bl	8006794 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <UpdateValues+0xcc>)
 8002cb4:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
	mainboard.imd_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			   // IMD_Status
 8002cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cbc:	4827      	ldr	r0, [pc, #156]	@ (8002d5c <UpdateValues+0xd4>)
 8002cbe:	f003 fd69 	bl	8006794 <HAL_GPIO_ReadPin>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <UpdateValues+0xcc>)
 8002cd0:	f883 224e 	strb.w	r2, [r3, #590]	@ 0x24e
	mainboard.comms_6822_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);	   // 6822_State
 8002cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cd8:	481f      	ldr	r0, [pc, #124]	@ (8002d58 <UpdateValues+0xd0>)
 8002cda:	f003 fd5b 	bl	8006794 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <UpdateValues+0xcc>)
 8002cec:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251
	mainboard.charger_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);		   // Charger_Pin
 8002cf0:	2180      	movs	r1, #128	@ 0x80
 8002cf2:	481a      	ldr	r0, [pc, #104]	@ (8002d5c <UpdateValues+0xd4>)
 8002cf4:	f003 fd4e 	bl	8006794 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <UpdateValues+0xcc>)
 8002d06:	f883 224f 	strb.w	r2, [r3, #591]	@ 0x24f

	// get current
	mainboard.current = getCurrent(mainboard.hadc) - mainboard.current_offset;
 8002d0a:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <UpdateValues+0xcc>)
 8002d0c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fce9 	bl	80036e8 <getCurrent>
 8002d16:	eeb0 7a40 	vmov.f32	s14, s0
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <UpdateValues+0xcc>)
 8002d1c:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8002d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <UpdateValues+0xcc>)
 8002d26:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244
	mainboard.overcurrent_fault = mainboard.current > OVERCURRENT;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <UpdateValues+0xcc>)
 8002d2c:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8002d30:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d60 <UpdateValues+0xd8>
 8002d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	bfcc      	ite	gt
 8002d3e:	2301      	movgt	r3, #1
 8002d40:	2300      	movle	r3, #0
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <UpdateValues+0xcc>)
 8002d46:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c

	if(ENABLE_PRINTF_DEBUG_COMMS) send_data_over_printf(); 
 8002d4a:	f000 f871 	bl	8002e30 <send_data_over_printf>
	if(ENABLE_USB_COMMS) send_data_over_USB(); 
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000310 	.word	0x20000310
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	43070000 	.word	0x43070000

08002d64 <CheckFaults>:

void CheckFaults()
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	// raise fault flag if any fault is true
	// faults are latching
	mainboard.bms_fault = mainboard.bms_fault 
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <CheckFaults+0xc0>)
 8002d6a:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
							|| mainboard.adbms.overtemperature_fault_
							|| mainboard.adbms.undertemperature_fault_
							|| mainboard.adbms.openwire_fault_
							|| mainboard.adbms.openwire_temp_fault_
							|| mainboard.adbms.pec_fault_
							|| mainboard.overcurrent_fault;
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d127      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.overvoltage_fault_
 8002d72:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <CheckFaults+0xc0>)
 8002d74:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d122      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.undervoltage_fault_
 8002d7c:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <CheckFaults+0xc0>)
 8002d7e:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.overtemperature_fault_
 8002d86:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <CheckFaults+0xc0>)
 8002d88:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.undertemperature_fault_
 8002d90:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <CheckFaults+0xc0>)
 8002d92:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_fault_
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <CheckFaults+0xc0>)
 8002d9c:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10e      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_temp_fault_
 8002da4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <CheckFaults+0xc0>)
 8002da6:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.adbms.pec_fault_
 8002dae:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <CheckFaults+0xc0>)
 8002db0:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <CheckFaults+0x5e>
							|| mainboard.overcurrent_fault;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <CheckFaults+0xc0>)
 8002dba:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <CheckFaults+0x62>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <CheckFaults+0x64>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
	mainboard.bms_fault = mainboard.bms_fault 
 8002dce:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <CheckFaults+0xc0>)
 8002dd0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

	// write BMS_Status - healthy is high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !mainboard.bms_fault);
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <CheckFaults+0xc0>)
 8002dd6:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002de6:	4810      	ldr	r0, [pc, #64]	@ (8002e28 <CheckFaults+0xc4>)
 8002de8:	f003 fcec 	bl	80067c4 <HAL_GPIO_WritePin>


	// set external faults
	mainboard.external_fault = !mainboard.shutdown_present;
 8002dec:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <CheckFaults+0xc0>)
 8002dee:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <CheckFaults+0xc0>)
 8002e0a:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240

	// Turns on external LED if external fault
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, mainboard.external_fault);
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <CheckFaults+0xc0>)
 8002e10:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8002e14:	461a      	mov	r2, r3
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <CheckFaults+0xc8>)
 8002e1a:	f003 fcd3 	bl	80067c4 <HAL_GPIO_WritePin>

}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000310 	.word	0x20000310
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020400 	.word	0x40020400

08002e30 <send_data_over_printf>:

void send_data_over_printf()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	// AD Prints
	ADBMS_Print_Vals(&mainboard.adbms);
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <send_data_over_printf+0x24>)
 8002e36:	f7ff fd69 	bl	800290c <ADBMS_Print_Vals>

	// Mainboard Prints
	printf("Time: %d\n", (int)(HAL_GetTick() - mainboard.start_time));
 8002e3a:	f001 fd93 	bl	8004964 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <send_data_over_printf+0x24>)
 8002e42:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4803      	ldr	r0, [pc, #12]	@ (8002e58 <send_data_over_printf+0x28>)
 8002e4c:	f00b f85c 	bl	800df08 <iprintf>
//	printf("External fault: %d\n", mainboard.external_fault);
//	printf("Current: %f\n", mainboard.current);
	
	// TODO Add more prints as needed

}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000310 	.word	0x20000310
 8002e58:	080107a0 	.word	0x080107a0

08002e5c <BMS_Initialize_Can>:
#include "bms_can.h"

bms_can_ bms_can;

void BMS_Initialize_Can(mainboard_ *mainboard)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	// Start CAN
	bms_can.mainboard = mainboard;
 8002e64:	4a3a      	ldr	r2, [pc, #232]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]
	HAL_CAN_Start(bms_can.mainboard->hcan_drive);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fb82 	bl	800557c <HAL_CAN_Start>
	HAL_CAN_Start(bms_can.mainboard->hcan_data);
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fb7b 	bl	800557c <HAL_CAN_Start>

	// Enable notifications (interrupts) for CAN, uses FIFO scheduling to receive msgs
	HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_drive, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002e86:	4b32      	ldr	r3, [pc, #200]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 fc87 	bl	80057a4 <HAL_CAN_ActivateNotification>
	// HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_data, CAN_IT_RX_FIFO0_MSG_PENDING);	// Don't need to read Data CAN

	// SOC header initialization
	bms_can.TxHeaderSOC_.StdId = 0x150;
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002e98:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
	bms_can.TxHeaderSOC_.IDE = CAN_ID_STD;
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	635a      	str	r2, [r3, #52]	@ 0x34
	bms_can.TxHeaderSOC_.RTR = CAN_RTR_DATA;
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38
	bms_can.TxHeaderSOC_.DLC = 8; // we're sending 8 bytes of data for SOE
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002eac:	2208      	movs	r2, #8
 8002eae:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Faults header initialization
	bms_can.TxHeaderFaults_.StdId = 0x151;
 8002eb0:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002eb2:	f240 1251 	movw	r2, #337	@ 0x151
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
	bms_can.TxHeaderFaults_.IDE = CAN_ID_STD;
 8002eb8:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54
	bms_can.TxHeaderFaults_.RTR = CAN_RTR_DATA;
 8002ebe:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	659a      	str	r2, [r3, #88]	@ 0x58
	bms_can.TxHeaderFaults_.DLC = 8;
 8002ec4:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Status header initialization
	bms_can.TxHeaderStatus_.StdId = 0x152;
 8002eca:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ecc:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8002ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
	bms_can.TxHeaderStatus_.IDE = CAN_ID_STD;
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	675a      	str	r2, [r3, #116]	@ 0x74
	bms_can.TxHeaderStatus_.RTR = CAN_RTR_DATA;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	679a      	str	r2, [r3, #120]	@ 0x78
	bms_can.TxHeaderStatus_.DLC = 8;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	67da      	str	r2, [r3, #124]	@ 0x7c

	// Charger header initialization
	bms_can.TxHeaderCharger_.ExtId = 0x1806E5F4;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <BMS_Initialize_Can+0xf8>)
 8002ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	bms_can.TxHeaderCharger_.IDE = CAN_ID_EXT;
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002eee:	2204      	movs	r2, #4
 8002ef0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	bms_can.TxHeaderCharger_.RTR = CAN_RTR_DATA;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	bms_can.TxHeaderCharger_.DLC = 8;
 8002efc:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002efe:	2208      	movs	r2, #8
 8002f00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	// Voltages header initialization
	bms_can.TxHeaderVoltages_.StdId = 0x153;
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f06:	f240 1253 	movw	r2, #339	@ 0x153
 8002f0a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	bms_can.TxHeaderVoltages_.IDE = CAN_ID_STD;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	bms_can.TxHeaderVoltages_.RTR = CAN_RTR_DATA;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	bms_can.TxHeaderVoltages_.DLC = 8;
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f20:	2208      	movs	r2, #8
 8002f22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Temperatures header initialization
	bms_can.TxHeaderTemperatures_.StdId = 0x167;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f28:	f240 1267 	movw	r2, #359	@ 0x167
 8002f2c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	bms_can.TxHeaderTemperatures_.IDE = CAN_ID_STD;
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	bms_can.TxHeaderTemperatures_.RTR = CAN_RTR_DATA;
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	bms_can.TxHeaderTemperatures_.DLC = 8;
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <BMS_Initialize_Can+0xf4>)
 8002f42:	2208      	movs	r2, #8
 8002f44:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000568 	.word	0x20000568
 8002f54:	1806e5f4 	.word	0x1806e5f4

08002f58 <send_can_messages>:

uint8_t send_can_messages(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *TxHeader, uint8_t *data, uint32_t *TxMailBox)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
	// send msg
	HAL_StatusTypeDef msg_status = HAL_CAN_AddTxMessage(hcan, TxHeader, data, TxMailBox);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f002 fb49 	bl	8005604 <HAL_CAN_AddTxMessage>
 8002f72:	4603      	mov	r3, r0
 8002f74:	75fb      	strb	r3, [r7, #23]

	if (msg_status != HAL_OK)
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <send_can_messages+0x28>
	{
		// Error handling
//		printf("CAN Message failed\n");
		return 1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <send_can_messages+0x2a>
	}
	return 0;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <drive_can_loop>:

void drive_can_loop()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	// printf("Sending Drive CAN\n");

	// update and send soc
	populateBMS_SOC(bms_can.txDataSOC_);
 8002f90:	4812      	ldr	r0, [pc, #72]	@ (8002fdc <drive_can_loop+0x50>)
 8002f92:	f000 f88b 	bl	80030ac <populateBMS_SOC>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderSOC_, bms_can.txDataSOC_, &bms_can.TxMailBox_);
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <drive_can_loop+0x54>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8d3 0238 	ldr.w	r0, [r3, #568]	@ 0x238
 8002f9e:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <drive_can_loop+0x58>)
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8002fdc <drive_can_loop+0x50>)
 8002fa2:	4911      	ldr	r1, [pc, #68]	@ (8002fe8 <drive_can_loop+0x5c>)
 8002fa4:	f7ff ffd8 	bl	8002f58 <send_can_messages>

	// update and send faults
	populateBMS_Faults(bms_can.txDataFaults_);
 8002fa8:	4810      	ldr	r0, [pc, #64]	@ (8002fec <drive_can_loop+0x60>)
 8002faa:	f000 f903 	bl	80031b4 <populateBMS_Faults>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderFaults_, bms_can.txDataFaults_, &bms_can.TxMailBox_);
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <drive_can_loop+0x54>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8d3 0238 	ldr.w	r0, [r3, #568]	@ 0x238
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <drive_can_loop+0x58>)
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002fec <drive_can_loop+0x60>)
 8002fba:	490d      	ldr	r1, [pc, #52]	@ (8002ff0 <drive_can_loop+0x64>)
 8002fbc:	f7ff ffcc 	bl	8002f58 <send_can_messages>

	// update and send status
	populateBMS_Status(bms_can.txDataStatus_);
 8002fc0:	480c      	ldr	r0, [pc, #48]	@ (8002ff4 <drive_can_loop+0x68>)
 8002fc2:	f000 f9ed 	bl	80033a0 <populateBMS_Status>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderStatus_, bms_can.txDataStatus_, &bms_can.TxMailBox_);
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <drive_can_loop+0x54>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 0238 	ldr.w	r0, [r3, #568]	@ 0x238
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <drive_can_loop+0x58>)
 8002fd0:	4a08      	ldr	r2, [pc, #32]	@ (8002ff4 <drive_can_loop+0x68>)
 8002fd2:	4909      	ldr	r1, [pc, #36]	@ (8002ff8 <drive_can_loop+0x6c>)
 8002fd4:	f7ff ffc0 	bl	8002f58 <send_can_messages>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200005ac 	.word	0x200005ac
 8002fe0:	20000568 	.word	0x20000568
 8002fe4:	2000056c 	.word	0x2000056c
 8002fe8:	20000594 	.word	0x20000594
 8002fec:	200005cc 	.word	0x200005cc
 8002ff0:	200005b4 	.word	0x200005b4
 8002ff4:	200005ec 	.word	0x200005ec
 8002ff8:	200005d4 	.word	0x200005d4

08002ffc <data_can_loop>:

void data_can_loop()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
	// send voltage messages
	bms_can.TxHeaderVoltages_.StdId = 0x153; // set the message id for next iteration
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <data_can_loop+0x98>)
 8003004:	f240 1253 	movw	r2, #339	@ 0x153
 8003008:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	e016      	b.n	8003040 <data_can_loop+0x44>
		populateBMS_VoltageMessages(bms_can.txDataVoltages_, i);
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4820      	ldr	r0, [pc, #128]	@ (8003098 <data_can_loop+0x9c>)
 8003016:	f000 fa77 	bl	8003508 <populateBMS_VoltageMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderVoltages_, bms_can.txDataVoltages_, &bms_can.TxMailBox_);
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <data_can_loop+0x98>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <data_can_loop+0xa0>)
 8003024:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <data_can_loop+0x9c>)
 8003026:	491e      	ldr	r1, [pc, #120]	@ (80030a0 <data_can_loop+0xa4>)
 8003028:	f7ff ff96 	bl	8002f58 <send_can_messages>
		bms_can.TxHeaderVoltages_.StdId++;
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <data_can_loop+0x98>)
 800302e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003032:	3301      	adds	r3, #1
 8003034:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <data_can_loop+0x98>)
 8003036:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3301      	adds	r3, #1
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	dde5      	ble.n	8003012 <data_can_loop+0x16>
	}

	// send temperature messages
	bms_can.TxHeaderTemperatures_.StdId = 0x167; // set the message id for next iteration
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <data_can_loop+0x98>)
 8003048:	f240 1267 	movw	r2, #359	@ 0x167
 800304c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8003050:	2300      	movs	r3, #0
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	e016      	b.n	8003084 <data_can_loop+0x88>
		populateBMS_TemperatureMessages(bms_can.txDataTemperatures_, i);
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	4812      	ldr	r0, [pc, #72]	@ (80030a4 <data_can_loop+0xa8>)
 800305a:	f000 fad5 	bl	8003608 <populateBMS_TemperatureMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderTemperatures_, bms_can.txDataTemperatures_, &bms_can.TxMailBox_);
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <data_can_loop+0x98>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <data_can_loop+0xa0>)
 8003068:	4a0e      	ldr	r2, [pc, #56]	@ (80030a4 <data_can_loop+0xa8>)
 800306a:	490f      	ldr	r1, [pc, #60]	@ (80030a8 <data_can_loop+0xac>)
 800306c:	f7ff ff74 	bl	8002f58 <send_can_messages>
		bms_can.TxHeaderTemperatures_.StdId++;
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <data_can_loop+0x98>)
 8003072:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003076:	3301      	adds	r3, #1
 8003078:	4a06      	ldr	r2, [pc, #24]	@ (8003094 <data_can_loop+0x98>)
 800307a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	dde5      	ble.n	8003056 <data_can_loop+0x5a>
	}
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000568 	.word	0x20000568
 8003098:	2000062c 	.word	0x2000062c
 800309c:	2000056c 	.word	0x2000056c
 80030a0:	20000614 	.word	0x20000614
 80030a4:	2000064c 	.word	0x2000064c
 80030a8:	20000634 	.word	0x20000634

080030ac <populateBMS_SOC>:

void populateBMS_SOC(uint8_t *data)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b0a9      	sub	sp, #164	@ 0xa4
 80030b0:	af12      	add	r7, sp, #72	@ 0x48
 80030b2:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[5];
	populateRawMessage(&signals[0], 0, 12, 0.1, 0);									  // max discharge current
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 80031a0 <populateBMS_SOC+0xf4>
 80030bc:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80031a4 <populateBMS_SOC+0xf8>
 80030c0:	210c      	movs	r1, #12
 80030c2:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80031a0 <populateBMS_SOC+0xf4>
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fec2 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[1], 0, 12, 0.1, 0);									  // max regen current
 80030cc:	f107 0308 	add.w	r3, r7, #8
 80030d0:	3310      	adds	r3, #16
 80030d2:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 80031a0 <populateBMS_SOC+0xf4>
 80030d6:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80031a4 <populateBMS_SOC+0xf8>
 80030da:	210c      	movs	r1, #12
 80030dc:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80031a0 <populateBMS_SOC+0xf4>
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 feb5 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.total_v, 16, 0.01, 0);   // battery voltage
 80030e6:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <populateBMS_SOC+0xfc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	edd3 7a7e 	vldr	s15, [r3, #504]	@ 0x1f8
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	3320      	adds	r3, #32
 80030f4:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 80031a0 <populateBMS_SOC+0xf4>
 80030f8:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 80031ac <populateBMS_SOC+0x100>
 80030fc:	2110      	movs	r1, #16
 80030fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fea4 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.avg_temp, 8, 1, -40);    // battery temp
 8003108:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <populateBMS_SOC+0xfc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	3330      	adds	r3, #48	@ 0x30
 8003116:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 80031b0 <populateBMS_SOC+0x104>
 800311a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800311e:	2108      	movs	r1, #8
 8003120:	eeb0 0a67 	vmov.f32	s0, s15
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fe93 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->current, 16, 0.01, 0);		  // battery current
 800312a:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <populateBMS_SOC+0xfc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	edd3 7a91 	vldr	s15, [r3, #580]	@ 0x244
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	3340      	adds	r3, #64	@ 0x40
 8003138:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 80031a0 <populateBMS_SOC+0xf4>
 800313c:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80031ac <populateBMS_SOC+0x100>
 8003140:	2110      	movs	r1, #16
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fe82 	bl	8003e50 <populateRawMessage>
	encodeSignals(data, 5, signals[0], signals[1], signals[2], signals[3], signals[4]);
 800314c:	ac0e      	add	r4, sp, #56	@ 0x38
 800314e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003158:	ac0a      	add	r4, sp, #40	@ 0x28
 800315a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800315e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003164:	ac06      	add	r4, sp, #24
 8003166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800316a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800316c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003170:	ac02      	add	r4, sp, #8
 8003172:	f107 0318 	add.w	r3, r7, #24
 8003176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800317c:	466a      	mov	r2, sp
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003186:	e882 0003 	stmia.w	r2, {r0, r1}
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	cb0c      	ldmia	r3, {r2, r3}
 8003190:	2105      	movs	r1, #5
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 febb 	bl	8003f0e <encodeSignals>
}
 8003198:	bf00      	nop
 800319a:	375c      	adds	r7, #92	@ 0x5c
 800319c:	46bd      	mov	sp, r7
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	00000000 	.word	0x00000000
 80031a4:	3dcccccd 	.word	0x3dcccccd
 80031a8:	20000568 	.word	0x20000568
 80031ac:	3c23d70a 	.word	0x3c23d70a
 80031b0:	c2200000 	.word	0xc2200000

080031b4 <populateBMS_Faults>:

void populateBMS_Faults(uint8_t *data)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b0c1      	sub	sp, #260	@ 0x104
 80031b8:	af1e      	add	r7, sp, #120	@ 0x78
 80031ba:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[8];
	populateRawMessage(&signals[0], bms_can.mainboard->bms_fault, 1, 1, 0);																  	// fault summary
 80031bc:	4b76      	ldr	r3, [pc, #472]	@ (8003398 <populateBMS_Faults+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800339c <populateBMS_Faults+0x1e8>
 80031d4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80031d8:	2101      	movs	r1, #1
 80031da:	eeb0 0a67 	vmov.f32	s0, s15
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fe36 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->adbms.undervoltage_fault_, 1, 1, 0);												  	// undervoltage fault
 80031e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003398 <populateBMS_Faults+0x1e4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	3310      	adds	r3, #16
 80031fa:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 800339c <populateBMS_Faults+0x1e8>
 80031fe:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003202:	2101      	movs	r1, #1
 8003204:	eeb0 0a67 	vmov.f32	s0, s15
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fe21 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.overvoltage_fault_, 1, 1, 0);												   	// overvoltage fault
 800320e:	4b62      	ldr	r3, [pc, #392]	@ (8003398 <populateBMS_Faults+0x1e4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	3320      	adds	r3, #32
 8003224:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 800339c <populateBMS_Faults+0x1e8>
 8003228:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800322c:	2101      	movs	r1, #1
 800322e:	eeb0 0a67 	vmov.f32	s0, s15
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe0c 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.undertemperature_fault_, 1, 1, 0);												// undertemp fault
 8003238:	4b57      	ldr	r3, [pc, #348]	@ (8003398 <populateBMS_Faults+0x1e4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	3330      	adds	r3, #48	@ 0x30
 800324e:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800339c <populateBMS_Faults+0x1e8>
 8003252:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003256:	2101      	movs	r1, #1
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fdf7 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.overtemperature_fault_, 1, 1, 0);											 	// overemp fault
 8003262:	4b4d      	ldr	r3, [pc, #308]	@ (8003398 <populateBMS_Faults+0x1e4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003272:	f107 0308 	add.w	r3, r7, #8
 8003276:	3340      	adds	r3, #64	@ 0x40
 8003278:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800339c <populateBMS_Faults+0x1e8>
 800327c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003280:	2101      	movs	r1, #1
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fde2 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->overcurrent_fault, 1, 1, 0);														 	// overcurrent fault
 800328c:	4b42      	ldr	r3, [pc, #264]	@ (8003398 <populateBMS_Faults+0x1e4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	3350      	adds	r3, #80	@ 0x50
 80032a2:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800339c <populateBMS_Faults+0x1e8>
 80032a6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032aa:	2101      	movs	r1, #1
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fdcd 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[6], bms_can.mainboard->external_fault, 1, 1, 0);													   			// external fault
 80032b6:	4b38      	ldr	r3, [pc, #224]	@ (8003398 <populateBMS_Faults+0x1e4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	3360      	adds	r3, #96	@ 0x60
 80032cc:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 800339c <populateBMS_Faults+0x1e8>
 80032d0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032d4:	2101      	movs	r1, #1
 80032d6:	eeb0 0a67 	vmov.f32	s0, s15
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fdb8 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[7], (bms_can.mainboard->adbms.openwire_fault_ || bms_can.mainboard->adbms.openwire_temp_fault_), 1, 1, 0);	// open wire fault
 80032e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <populateBMS_Faults+0x1e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <populateBMS_Faults+0x144>
 80032ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <populateBMS_Faults+0x1e4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <populateBMS_Faults+0x148>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <populateBMS_Faults+0x14a>
 80032fc:	2300      	movs	r3, #0
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	3370      	adds	r3, #112	@ 0x70
 800330c:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 800339c <populateBMS_Faults+0x1e8>
 8003310:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003314:	2101      	movs	r1, #1
 8003316:	eeb0 0a67 	vmov.f32	s0, s15
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd98 	bl	8003e50 <populateRawMessage>
	encodeSignals(data, 8, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003320:	ac1a      	add	r4, sp, #104	@ 0x68
 8003322:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800332c:	ac16      	add	r4, sp, #88	@ 0x58
 800332e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003338:	ac12      	add	r4, sp, #72	@ 0x48
 800333a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003344:	ac0e      	add	r4, sp, #56	@ 0x38
 8003346:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800334a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003350:	ac0a      	add	r4, sp, #40	@ 0x28
 8003352:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800335c:	ac06      	add	r4, sp, #24
 800335e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003368:	ac02      	add	r4, sp, #8
 800336a:	f107 0318 	add.w	r3, r7, #24
 800336e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003374:	466a      	mov	r2, sp
 8003376:	f107 0310 	add.w	r3, r7, #16
 800337a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800337e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	cb0c      	ldmia	r3, {r2, r3}
 8003388:	2108      	movs	r1, #8
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fdbf 	bl	8003f0e <encodeSignals>
}
 8003390:	bf00      	nop
 8003392:	378c      	adds	r7, #140	@ 0x8c
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	20000568 	.word	0x20000568
 800339c:	00000000 	.word	0x00000000

080033a0 <populateBMS_Status>:

void populateBMS_Status(uint8_t *data)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b0b9      	sub	sp, #228	@ 0xe4
 80033a4:	af1a      	add	r7, sp, #104	@ 0x68
 80033a6:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[7];

	populateRawMessage(&signals[0], 0, 8, 1, 0);		 // BMS State
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80034f8 <populateBMS_Status+0x158>
 80033b0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80033b4:	2108      	movs	r1, #8
 80033b6:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 80034f8 <populateBMS_Status+0x158>
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd48 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->imd_status, 8, 1, 0);		 // IMD State
 80033c0:	4b4e      	ldr	r3, [pc, #312]	@ (80034fc <populateBMS_Status+0x15c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f893 324e 	ldrb.w	r3, [r3, #590]	@ 0x24e
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	3310      	adds	r3, #16
 80033d6:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80034f8 <populateBMS_Status+0x158>
 80033da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80033de:	2108      	movs	r1, #8
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fd33 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.max_temp, 8, 1, -40);   // max cell temp
 80033ea:	4b44      	ldr	r3, [pc, #272]	@ (80034fc <populateBMS_Status+0x15c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 80033f2:	f107 0308 	add.w	r3, r7, #8
 80033f6:	3320      	adds	r3, #32
 80033f8:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 8003500 <populateBMS_Status+0x160>
 80033fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003400:	2108      	movs	r1, #8
 8003402:	eeb0 0a67 	vmov.f32	s0, s15
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fd22 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.min_temp, 8, 1, -40);   // min cell temp
 800340c:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <populateBMS_Status+0x15c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	3330      	adds	r3, #48	@ 0x30
 800341a:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8003500 <populateBMS_Status+0x160>
 800341e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003422:	2108      	movs	r1, #8
 8003424:	eeb0 0a67 	vmov.f32	s0, s15
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fd11 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.max_v, 8, 0.012, 2);	 // max cell voltage
 800342e:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <populateBMS_Status+0x15c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	3340      	adds	r3, #64	@ 0x40
 800343c:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003440:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8003504 <populateBMS_Status+0x164>
 8003444:	2108      	movs	r1, #8
 8003446:	eeb0 0a67 	vmov.f32	s0, s15
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fd00 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->adbms.min_v, 8, 0.012, 2);	 // min cell voltage
 8003450:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <populateBMS_Status+0x15c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	3350      	adds	r3, #80	@ 0x50
 800345e:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003462:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003504 <populateBMS_Status+0x164>
 8003466:	2108      	movs	r1, #8
 8003468:	eeb0 0a67 	vmov.f32	s0, s15
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fcef 	bl	8003e50 <populateRawMessage>
	populateRawMessage(&signals[6], 0, 8, 0.5, 0);									 // BMS SOC
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	3360      	adds	r3, #96	@ 0x60
 8003478:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80034f8 <populateBMS_Status+0x158>
 800347c:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8003480:	2108      	movs	r1, #8
 8003482:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80034f8 <populateBMS_Status+0x158>
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fce2 	bl	8003e50 <populateRawMessage>
	encodeSignals(data, 7, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6]);
 800348c:	ac16      	add	r4, sp, #88	@ 0x58
 800348e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003498:	ac12      	add	r4, sp, #72	@ 0x48
 800349a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800349e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034a4:	ac0e      	add	r4, sp, #56	@ 0x38
 80034a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034b0:	ac0a      	add	r4, sp, #40	@ 0x28
 80034b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034bc:	ac06      	add	r4, sp, #24
 80034be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034c8:	ac02      	add	r4, sp, #8
 80034ca:	f107 0318 	add.w	r3, r7, #24
 80034ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034d4:	466a      	mov	r2, sp
 80034d6:	f107 0310 	add.w	r3, r7, #16
 80034da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034de:	e882 0003 	stmia.w	r2, {r0, r1}
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	cb0c      	ldmia	r3, {r2, r3}
 80034e8:	2107      	movs	r1, #7
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fd0f 	bl	8003f0e <encodeSignals>
}
 80034f0:	bf00      	nop
 80034f2:	377c      	adds	r7, #124	@ 0x7c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	00000000 	.word	0x00000000
 80034fc:	20000568 	.word	0x20000568
 8003500:	c2200000 	.word	0xc2200000
 8003504:	3c449ba6 	.word	0x3c449ba6

08003508 <populateBMS_VoltageMessages>:


void populateBMS_VoltageMessages(uint8_t *data, int volt_msg_num)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b0c3      	sub	sp, #268	@ 0x10c
 800350c:	af1e      	add	r7, sp, #120	@ 0x78
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003518:	e021      	b.n	800355e <populateBMS_VoltageMessages+0x56>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.voltages[volt_msg_num * NUM_DATA_CAN_VOLTAGES_PER_MSG + i], 8, 0.012, 2);
 800351a:	f107 0208 	add.w	r2, r7, #8
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	18d0      	adds	r0, r2, r3
 8003526:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <populateBMS_VoltageMessages+0xf0>)
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9a      	subs	r2, r3, r2
 8003532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003536:	4413      	add	r3, r2
 8003538:	3352      	adds	r3, #82	@ 0x52
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003546:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80035fc <populateBMS_VoltageMessages+0xf4>
 800354a:	2108      	movs	r1, #8
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	f000 fc7e 	bl	8003e50 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003558:	3301      	adds	r3, #1
 800355a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003562:	2b06      	cmp	r3, #6
 8003564:	ddd9      	ble.n	800351a <populateBMS_VoltageMessages+0x12>
	}
	populateRawMessage(&signals[7], 0, 8, 0.004, 0);	// OCV msg that is legacy from BQ code and only included for backwards compatibility
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	3370      	adds	r3, #112	@ 0x70
 800356c:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8003600 <populateBMS_VoltageMessages+0xf8>
 8003570:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8003604 <populateBMS_VoltageMessages+0xfc>
 8003574:	2108      	movs	r1, #8
 8003576:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003600 <populateBMS_VoltageMessages+0xf8>
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fc68 	bl	8003e50 <populateRawMessage>
	// num_per_msg + 1 because includes the added OCV msg
	encodeSignals(data, NUM_DATA_CAN_VOLTAGES_PER_MSG+1, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003580:	ac1a      	add	r4, sp, #104	@ 0x68
 8003582:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800358c:	ac16      	add	r4, sp, #88	@ 0x58
 800358e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003598:	ac12      	add	r4, sp, #72	@ 0x48
 800359a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800359e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035a4:	ac0e      	add	r4, sp, #56	@ 0x38
 80035a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80035aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035b0:	ac0a      	add	r4, sp, #40	@ 0x28
 80035b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035bc:	ac06      	add	r4, sp, #24
 80035be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035c8:	ac02      	add	r4, sp, #8
 80035ca:	f107 0318 	add.w	r3, r7, #24
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035d4:	466a      	mov	r2, sp
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035de:	e882 0003 	stmia.w	r2, {r0, r1}
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	cb0c      	ldmia	r3, {r2, r3}
 80035e8:	2108      	movs	r1, #8
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fc8f 	bl	8003f0e <encodeSignals>
}
 80035f0:	bf00      	nop
 80035f2:	3794      	adds	r7, #148	@ 0x94
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd90      	pop	{r4, r7, pc}
 80035f8:	20000568 	.word	0x20000568
 80035fc:	3c449ba6 	.word	0x3c449ba6
 8003600:	00000000 	.word	0x00000000
 8003604:	3b83126f 	.word	0x3b83126f

08003608 <populateBMS_TemperatureMessages>:

void populateBMS_TemperatureMessages(uint8_t *data, int temp_num)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b0c3      	sub	sp, #268	@ 0x10c
 800360c:	af1e      	add	r7, sp, #120	@ 0x78
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003618:	e01f      	b.n	800365a <populateBMS_TemperatureMessages+0x52>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.temperatures[temp_num * NUM_DATA_CAN_TEMPS_PER_MSG + i], 8, 1, -40);
 800361a:	f107 0208 	add.w	r2, r7, #8
 800361e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	18d0      	adds	r0, r2, r3
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <populateBMS_TemperatureMessages+0xd4>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	00d9      	lsls	r1, r3, #3
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003632:	440b      	add	r3, r1
 8003634:	336e      	adds	r3, #110	@ 0x6e
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 80036e0 <populateBMS_TemperatureMessages+0xd8>
 8003642:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003646:	2108      	movs	r1, #8
 8003648:	eeb0 0a67 	vmov.f32	s0, s15
 800364c:	f000 fc00 	bl	8003e50 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 8003650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003654:	3301      	adds	r3, #1
 8003656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800365a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800365e:	2b07      	cmp	r3, #7
 8003660:	dddb      	ble.n	800361a <populateBMS_TemperatureMessages+0x12>
	}
	encodeSignals(data, NUM_DATA_CAN_TEMPS_PER_MSG, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003662:	ac1a      	add	r4, sp, #104	@ 0x68
 8003664:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800366a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800366e:	ac16      	add	r4, sp, #88	@ 0x58
 8003670:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800367a:	ac12      	add	r4, sp, #72	@ 0x48
 800367c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003682:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003686:	ac0e      	add	r4, sp, #56	@ 0x38
 8003688:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800368c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800368e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003692:	ac0a      	add	r4, sp, #40	@ 0x28
 8003694:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800369a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800369e:	ac06      	add	r4, sp, #24
 80036a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036aa:	ac02      	add	r4, sp, #8
 80036ac:	f107 0318 	add.w	r3, r7, #24
 80036b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036b6:	466a      	mov	r2, sp
 80036b8:	f107 0310 	add.w	r3, r7, #16
 80036bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	cb0c      	ldmia	r3, {r2, r3}
 80036ca:	2108      	movs	r1, #8
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fc1e 	bl	8003f0e <encodeSignals>
}
 80036d2:	bf00      	nop
 80036d4:	3794      	adds	r7, #148	@ 0x94
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000568 	.word	0x20000568
 80036e0:	c2200000 	.word	0xc2200000
 80036e4:	00000000 	.word	0x00000000

080036e8 <getCurrent>:
#include "current_driver.h"

float getCurrent(ADC_HandleTypeDef *hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    // Start ADC and poll it
	HAL_ADC_Start(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 f9ab 	bl	8004a4c <HAL_ADC_Start>
	HAL_StatusTypeDef adc_poll_status = HAL_ADC_PollForConversion(hadc, 5000);
 80036f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 faab 	bl	8004c56 <HAL_ADC_PollForConversion>
 8003700:	4603      	mov	r3, r0
 8003702:	77fb      	strb	r3, [r7, #31]

    // lazy handling of adc polling
    if(adc_poll_status != HAL_OK){
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <getCurrent+0x32>
    	HAL_ADC_Stop(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 fa70 	bl	8004bf0 <HAL_ADC_Stop>
    	printf("current is not OK\n");
 8003710:	482b      	ldr	r0, [pc, #172]	@ (80037c0 <getCurrent+0xd8>)
 8003712:	f00a fc69 	bl	800dfe8 <puts>
        return -1;
 8003716:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <getCurrent+0xdc>)
 8003718:	e03d      	b.n	8003796 <getCurrent+0xae>
    }

    // take 12 bit adc and convert into volts
    float raw_current = ((float) HAL_ADC_GetValue(hadc));
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f001 fb26 	bl	8004d6c <HAL_ADC_GetValue>
 8003720:	ee07 0a90 	vmov	s15, r0
 8003724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003728:	edc7 7a06 	vstr	s15, [r7, #24]
	float current_adc_voltage = raw_current*3.3/4095;
 800372c:	69b8      	ldr	r0, [r7, #24]
 800372e:	f7fc ff0b 	bl	8000548 <__aeabi_f2d>
 8003732:	a31d      	add	r3, pc, #116	@ (adr r3, 80037a8 <getCurrent+0xc0>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc ff5e 	bl	80005f8 <__aeabi_dmul>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	a31a      	add	r3, pc, #104	@ (adr r3, 80037b0 <getCurrent+0xc8>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fd f87f 	bl	800084c <__aeabi_ddiv>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f7fd fa27 	bl	8000ba8 <__aeabi_d2f>
 800375a:	4603      	mov	r3, r0
 800375c:	617b      	str	r3, [r7, #20]
	// i = v/r
	// Offset of 1.25V so can read both positive and negative current
	// where negative current is charging and positive is discharging
	// (adc_voltage - 1.65V) / (diff-op-amp gain of 2 * iso amp fixed gain of 41 (AMC3302DWE))
	// shunt resistance = 100u Ohms (SH6918F500BHEP)
	float current_adc_offset = current_adc_voltage - 1.25;
 800375e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003762:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8003766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800376a:	edc7 7a04 	vstr	s15, [r7, #16]
	float current = current_adc_offset/(2*41*0.0001);
 800376e:	6938      	ldr	r0, [r7, #16]
 8003770:	f7fc feea 	bl	8000548 <__aeabi_f2d>
 8003774:	a310      	add	r3, pc, #64	@ (adr r3, 80037b8 <getCurrent+0xd0>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f7fd f867 	bl	800084c <__aeabi_ddiv>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fd fa0f 	bl	8000ba8 <__aeabi_d2f>
 800378a:	4603      	mov	r3, r0
 800378c:	60fb      	str	r3, [r7, #12]

    // Stop ADC
	HAL_ADC_Stop(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f001 fa2e 	bl	8004bf0 <HAL_ADC_Stop>
    return current;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eeb0 0a67 	vmov.f32	s0, s15
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	f3af 8000 	nop.w
 80037a8:	66666666 	.word	0x66666666
 80037ac:	400a6666 	.word	0x400a6666
 80037b0:	00000000 	.word	0x00000000
 80037b4:	40affe00 	.word	0x40affe00
 80037b8:	5e9e1b09 	.word	0x5e9e1b09
 80037bc:	3f80cb29 	.word	0x3f80cb29
 80037c0:	080107b8 	.word	0x080107b8
 80037c4:	bf800000 	.word	0xbf800000

080037c8 <getCurrentOffset>:


float getCurrentOffset(ADC_HandleTypeDef *hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	float total_current = 0;
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	e00d      	b.n	80037f8 <getCurrentOffset+0x30>
		total_current += getCurrent(hadc);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff83 	bl	80036e8 <getCurrent>
 80037e2:	eeb0 7a40 	vmov.f32	s14, s0
 80037e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ee:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	ddee      	ble.n	80037dc <getCurrentOffset+0x14>
	}
	return total_current / NUM_CURRENT_OFFSET_CYCLES;
 80037fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003802:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003806:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800380a:	eef0 7a66 	vmov.f32	s15, s13
}
 800380e:	eeb0 0a67 	vmov.f32	s0, s15
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003820:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003824:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003834:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003838:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003840:	e000      	b.n	8003844 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003842:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003844:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f9      	beq.n	8003842 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800384e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003858:	687b      	ldr	r3, [r7, #4]
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e009      	b.n	800388c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	60ba      	str	r2, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ffc9 	bl	8003818 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	3301      	adds	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	dbf1      	blt.n	8003878 <_write+0x12>
	}
	return len;
 8003894:	687b      	ldr	r3, [r7, #4]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038a6:	f000 fff7 	bl	8004898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038aa:	f000 f837 	bl	800391c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038ae:	f000 fa23 	bl	8003cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80038b2:	f000 f9f9 	bl	8003ca8 <MX_DMA_Init>
  MX_ADC1_Init();
 80038b6:	f000 f89b 	bl	80039f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80038ba:	f000 f9a9 	bl	8003c10 <MX_TIM2_Init>
  MX_CAN1_Init();
 80038be:	f000 f8e9 	bl	8003a94 <MX_CAN1_Init>
  MX_CAN2_Init();
 80038c2:	f000 f939 	bl	8003b38 <MX_CAN2_Init>
  MX_SPI1_Init();
 80038c6:	f000 f96d 	bl	8003ba4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80038ca:	f009 f85b 	bl	800c984 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 80038ce:	2005      	movs	r0, #5
 80038d0:	f001 f854 	bl	800497c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80038d4:	2201      	movs	r2, #1
 80038d6:	2120      	movs	r1, #32
 80038d8:	4809      	ldr	r0, [pc, #36]	@ (8003900 <main+0x60>)
 80038da:	f002 ff73 	bl	80067c4 <HAL_GPIO_WritePin>

  // init mainboard
  bms_mainbaord_setup(&hspi1, GPIOA, GPIO_PIN_4, &hadc1, &hcan1, &hcan2);
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <main+0x64>)
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <main+0x68>)
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <main+0x6c>)
 80038e8:	2210      	movs	r2, #16
 80038ea:	4909      	ldr	r1, [pc, #36]	@ (8003910 <main+0x70>)
 80038ec:	4809      	ldr	r0, [pc, #36]	@ (8003914 <main+0x74>)
 80038ee:	f7ff f92d 	bl	8002b4c <bms_mainbaord_setup>

  printf("Board Starting...\n");
 80038f2:	4809      	ldr	r0, [pc, #36]	@ (8003918 <main+0x78>)
 80038f4:	f00a fb78 	bl	800dfe8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    tick_mainboard_timers();
 80038f8:	f7ff f9a8 	bl	8002c4c <tick_mainboard_timers>
 80038fc:	e7fc      	b.n	80038f8 <main+0x58>
 80038fe:	bf00      	nop
 8003900:	40020400 	.word	0x40020400
 8003904:	200006c4 	.word	0x200006c4
 8003908:	2000069c 	.word	0x2000069c
 800390c:	20000654 	.word	0x20000654
 8003910:	40020000 	.word	0x40020000
 8003914:	200006ec 	.word	0x200006ec
 8003918:	080107cc 	.word	0x080107cc

0800391c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b094      	sub	sp, #80	@ 0x50
 8003920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003922:	f107 0320 	add.w	r3, r7, #32
 8003926:	2230      	movs	r2, #48	@ 0x30
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f00a fc3c 	bl	800e1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <SystemClock_Config+0xcc>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <SystemClock_Config+0xcc>)
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <SystemClock_Config+0xcc>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800395c:	2300      	movs	r3, #0
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <SystemClock_Config+0xd0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <SystemClock_Config+0xd0>)
 8003966:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <SystemClock_Config+0xd0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003978:	2301      	movs	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800397c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003982:	2302      	movs	r3, #2
 8003984:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003986:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800398c:	2304      	movs	r3, #4
 800398e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003990:	23c0      	movs	r3, #192	@ 0xc0
 8003992:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003994:	2306      	movs	r3, #6
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003998:	2308      	movs	r3, #8
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 f97b 	bl	8007c9c <HAL_RCC_OscConfig>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039ac:	f000 fa4a 	bl	8003e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039b0:	230f      	movs	r3, #15
 80039b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b4:	2302      	movs	r3, #2
 80039b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fbdc 	bl	800818c <HAL_RCC_ClockConfig>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039da:	f000 fa33 	bl	8003e44 <Error_Handler>
  }
}
 80039de:	bf00      	nop
 80039e0:	3750      	adds	r7, #80	@ 0x50
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000

080039f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039f6:	463b      	mov	r3, r7
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a02:	4b21      	ldr	r3, [pc, #132]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a04:	4a21      	ldr	r2, [pc, #132]	@ (8003a8c <MX_ADC1_Init+0x9c>)
 8003a06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003a08:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003a14:	4b1c      	ldr	r3, [pc, #112]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a28:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a2e:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a30:	4a17      	ldr	r2, [pc, #92]	@ (8003a90 <MX_ADC1_Init+0xa0>)
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a34:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a40:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a4e:	480e      	ldr	r0, [pc, #56]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a50:	f000 ffb8 	bl	80049c4 <HAL_ADC_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003a5a:	f000 f9f3 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4806      	ldr	r0, [pc, #24]	@ (8003a88 <MX_ADC1_Init+0x98>)
 8003a70:	f001 f98a 	bl	8004d88 <HAL_ADC_ConfigChannel>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003a7a:	f000 f9e3 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000654 	.word	0x20000654
 8003a8c:	40012000 	.word	0x40012000
 8003a90:	0f000001 	.word	0x0f000001

08003a94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	@ 0x28
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a9a:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003a9c:	4a25      	ldr	r2, [pc, #148]	@ (8003b34 <MX_CAN1_Init+0xa0>)
 8003a9e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003aac:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ab4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ab8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003aba:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003acc:	4b18      	ldr	r3, [pc, #96]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003ad2:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003ad8:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003ade:	4b14      	ldr	r3, [pc, #80]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ae4:	4812      	ldr	r0, [pc, #72]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003ae6:	f001 fb6d 	bl	80051c4 <HAL_CAN_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003af0:	f000 f9a8 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8003af8:	2312      	movs	r3, #18
 8003afa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8003b18:	2314      	movs	r3, #20
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4803      	ldr	r0, [pc, #12]	@ (8003b30 <MX_CAN1_Init+0x9c>)
 8003b22:	f001 fc4b 	bl	80053bc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003b26:	bf00      	nop
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000069c 	.word	0x2000069c
 8003b34:	40006400 	.word	0x40006400

08003b38 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003b3c:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <MX_CAN2_Init+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b44:	2210      	movs	r2, #16
 8003b46:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b4e:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b5a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <MX_CAN2_Init+0x64>)
 8003b88:	f001 fb1c 	bl	80051c4 <HAL_CAN_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003b92:	f000 f957 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200006c4 	.word	0x200006c4
 8003ba0:	40006800 	.word	0x40006800

08003ba4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003baa:	4a18      	ldr	r2, [pc, #96]	@ (8003c0c <MX_SPI1_Init+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bae:	4b16      	ldr	r3, [pc, #88]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bd8:	2218      	movs	r2, #24
 8003bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be8:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bf0:	220a      	movs	r2, #10
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bf4:	4804      	ldr	r0, [pc, #16]	@ (8003c08 <MX_SPI1_Init+0x64>)
 8003bf6:	f004 fcc1 	bl	800857c <HAL_SPI_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c00:	f000 f920 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200006ec 	.word	0x200006ec
 8003c0c:	40013000 	.word	0x40013000

08003c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c24:	463b      	mov	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003c40:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c54:	4813      	ldr	r0, [pc, #76]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c56:	f005 f8e3 	bl	8008e20 <HAL_TIM_Base_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003c60:	f000 f8f0 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	4619      	mov	r1, r3
 8003c70:	480c      	ldr	r0, [pc, #48]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c72:	f005 f924 	bl	8008ebe <HAL_TIM_ConfigClockSource>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003c7c:	f000 f8e2 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c80:	2300      	movs	r3, #0
 8003c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c88:	463b      	mov	r3, r7
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4805      	ldr	r0, [pc, #20]	@ (8003ca4 <MX_TIM2_Init+0x94>)
 8003c8e:	f005 fb23 	bl	80092d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003c98:	f000 f8d4 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000804 	.word	0x20000804

08003ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <MX_DMA_Init+0x4c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <MX_DMA_Init+0x4c>)
 8003cb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <MX_DMA_Init+0x4c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2038      	movs	r0, #56	@ 0x38
 8003cd0:	f002 f8a3 	bl	8005e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003cd4:	2038      	movs	r0, #56	@ 0x38
 8003cd6:	f002 f8bc 	bl	8005e52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	203b      	movs	r0, #59	@ 0x3b
 8003ce0:	f002 f89b 	bl	8005e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003ce4:	203b      	movs	r0, #59	@ 0x3b
 8003ce6:	f002 f8b4 	bl	8005e52 <HAL_NVIC_EnableIRQ>

}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	@ 0x28
 8003cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b48      	ldr	r3, [pc, #288]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	4a47      	ldr	r2, [pc, #284]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d1e:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	4a40      	ldr	r2, [pc, #256]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	4a39      	ldr	r2, [pc, #228]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	4b33      	ldr	r3, [pc, #204]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d72:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <MX_GPIO_Init+0x13c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8003d84:	482c      	ldr	r0, [pc, #176]	@ (8003e38 <MX_GPIO_Init+0x140>)
 8003d86:	f002 fd1d 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d90:	482a      	ldr	r0, [pc, #168]	@ (8003e3c <MX_GPIO_Init+0x144>)
 8003d92:	f002 fd17 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 8003d96:	2200      	movs	r2, #0
 8003d98:	21e0      	movs	r1, #224	@ 0xe0
 8003d9a:	4829      	ldr	r0, [pc, #164]	@ (8003e40 <MX_GPIO_Init+0x148>)
 8003d9c:	f002 fd12 	bl	80067c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 8003da0:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db2:	f107 0314 	add.w	r3, r7, #20
 8003db6:	4619      	mov	r1, r3
 8003db8:	481f      	ldr	r0, [pc, #124]	@ (8003e38 <MX_GPIO_Init+0x140>)
 8003dba:	f002 fb4f 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 8003dbe:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	481b      	ldr	r0, [pc, #108]	@ (8003e40 <MX_GPIO_Init+0x148>)
 8003dd4:	f002 fb42 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8003dd8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	4813      	ldr	r0, [pc, #76]	@ (8003e3c <MX_GPIO_Init+0x144>)
 8003dee:	f002 fb35 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 8003df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	4619      	mov	r1, r3
 8003e0a:	480c      	ldr	r0, [pc, #48]	@ (8003e3c <MX_GPIO_Init+0x144>)
 8003e0c:	f002 fb26 	bl	800645c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 8003e10:	23e0      	movs	r3, #224	@ 0xe0
 8003e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e14:	2301      	movs	r3, #1
 8003e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4619      	mov	r1, r3
 8003e26:	4806      	ldr	r0, [pc, #24]	@ (8003e40 <MX_GPIO_Init+0x148>)
 8003e28:	f002 fb18 	bl	800645c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003e2c:	bf00      	nop
 8003e2e:	3728      	adds	r7, #40	@ 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40020400 	.word	0x40020400

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e48:	b672      	cpsid	i
}
 8003e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <Error_Handler+0x8>

08003e50 <populateRawMessage>:
#include "nfr_can_driver.h"

// Populates a RawCanSignal with data, given a start bit, lenght, factor, and offset
void populateRawMessage(RawCanSignal *signal, float raw_data, int length, float factor, float offset)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6178      	str	r0, [r7, #20]
 8003e58:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e5c:	60f9      	str	r1, [r7, #12]
 8003e5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e62:	ed87 1a01 	vstr	s2, [r7, #4]
    // offset and factor data
    uint64_t raw_value = (uint64_t)((raw_data - offset) / factor);
 8003e66:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e7a:	ee16 0a90 	vmov	r0, s13
 8003e7e:	f7fc fefb 	bl	8000c78 <__aeabi_f2ulz>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // copy data into RawCanSignal
    memcpy(&(signal->raw_data), &raw_value, sizeof(raw_value));
 8003e8a:	6979      	ldr	r1, [r7, #20]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	600a      	str	r2, [r1, #0]
 8003e92:	604b      	str	r3, [r1, #4]
    signal->length = length;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	609a      	str	r2, [r3, #8]

}
 8003e9a:	bf00      	nop
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <generateMask>:
    printf("\n");
}

// Generates a mask for given position and length
uint64_t generateMask(int pos, int len)
{
 8003ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
    return (0xFFFFFFFFFFFFFFFFull << (64 - len) >> (64 - len - pos));
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	f1c1 0640 	rsb	r6, r1, #64	@ 0x40
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eba:	f1a6 0e20 	sub.w	lr, r6, #32
 8003ebe:	f1c6 0c20 	rsb	ip, r6, #32
 8003ec2:	fa01 f306 	lsl.w	r3, r1, r6
 8003ec6:	fa00 fe0e 	lsl.w	lr, r0, lr
 8003eca:	ea43 030e 	orr.w	r3, r3, lr
 8003ece:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ed2:	ea43 030c 	orr.w	r3, r3, ip
 8003ed6:	fa00 f206 	lsl.w	r2, r0, r6
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	f1c1 0040 	rsb	r0, r1, #64	@ 0x40
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	1a41      	subs	r1, r0, r1
 8003ee4:	f1c1 0620 	rsb	r6, r1, #32
 8003ee8:	f1a1 0020 	sub.w	r0, r1, #32
 8003eec:	fa22 f401 	lsr.w	r4, r2, r1
 8003ef0:	fa03 f606 	lsl.w	r6, r3, r6
 8003ef4:	4334      	orrs	r4, r6
 8003ef6:	fa23 f000 	lsr.w	r0, r3, r0
 8003efa:	4304      	orrs	r4, r0
 8003efc:	fa23 f501 	lsr.w	r5, r3, r1
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
}
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f0e <encodeSignals>:

// Encodes a CAN msg with number of sub-messages
void encodeSignals(uint8_t *data, int count, ...)
{
 8003f0e:	b40e      	push	{r1, r2, r3}
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	b092      	sub	sp, #72	@ 0x48
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
    va_list args;
    va_start(args, count);
 8003f1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t buffer = 0;
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    int len_ptr = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f34:	e03c      	b.n	8003fb0 <encodeSignals+0xa2>
    {
        RawCanSignal temp = va_arg(args, RawCanSignal);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	3307      	adds	r3, #7
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	f103 0210 	add.w	r2, r3, #16
 8003f42:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f44:	f107 0610 	add.w	r6, r7, #16
 8003f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f4a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // shift data over and apply mask then add to buffer
        uint64_t mask = generateMask(len_ptr, temp.length);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003f54:	f7ff ffa5 	bl	8003ea2 <generateMask>
 8003f58:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        buffer |= (temp.raw_data.as_uint64 << len_ptr) & mask;
 8003f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f62:	f1a1 0620 	sub.w	r6, r1, #32
 8003f66:	f1c1 0020 	rsb	r0, r1, #32
 8003f6a:	fa03 f501 	lsl.w	r5, r3, r1
 8003f6e:	fa02 f606 	lsl.w	r6, r2, r6
 8003f72:	4335      	orrs	r5, r6
 8003f74:	fa22 f000 	lsr.w	r0, r2, r0
 8003f78:	4305      	orrs	r5, r0
 8003f7a:	fa02 f401 	lsl.w	r4, r2, r1
 8003f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f82:	ea04 0a02 	and.w	sl, r4, r2
 8003f86:	ea05 0b03 	and.w	fp, r5, r3
 8003f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f8e:	ea42 010a 	orr.w	r1, r2, sl
 8003f92:	6039      	str	r1, [r7, #0]
 8003f94:	ea43 030b 	orr.w	r3, r3, fp
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // update length
        len_ptr += temp.length;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa6:	4413      	add	r3, r2
 8003fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	3301      	adds	r3, #1
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3be      	bcc.n	8003f36 <encodeSignals+0x28>
    }

    // fill in msg
    for (size_t i = 0; i < 8; i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fbc:	e01c      	b.n	8003ff8 <encodeSignals+0xea>
    {
        data[i] = (buffer >> (i * 8)) & 0xFF;
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc0:	00d9      	lsls	r1, r3, #3
 8003fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fc6:	f1c1 0420 	rsb	r4, r1, #32
 8003fca:	f1a1 0020 	sub.w	r0, r1, #32
 8003fce:	fa22 f801 	lsr.w	r8, r2, r1
 8003fd2:	fa03 f404 	lsl.w	r4, r3, r4
 8003fd6:	ea48 0804 	orr.w	r8, r8, r4
 8003fda:	fa23 f000 	lsr.w	r0, r3, r0
 8003fde:	ea48 0800 	orr.w	r8, r8, r0
 8003fe2:	fa23 f901 	lsr.w	r9, r3, r1
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fea:	4413      	add	r3, r2
 8003fec:	fa5f f288 	uxtb.w	r2, r8
 8003ff0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; i++)
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	d9df      	bls.n	8003fbe <encodeSignals+0xb0>
    }
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	3748      	adds	r7, #72	@ 0x48
 8004004:	46bd      	mov	sp, r7
 8004006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	b003      	add	sp, #12
 800400c:	4770      	bx	lr
	...

08004010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	4b10      	ldr	r3, [pc, #64]	@ (800405c <HAL_MspInit+0x4c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	4a0f      	ldr	r2, [pc, #60]	@ (800405c <HAL_MspInit+0x4c>)
 8004020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004024:	6453      	str	r3, [r2, #68]	@ 0x44
 8004026:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <HAL_MspInit+0x4c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_MspInit+0x4c>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	4a08      	ldr	r2, [pc, #32]	@ (800405c <HAL_MspInit+0x4c>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	@ 0x40
 8004042:	4b06      	ldr	r3, [pc, #24]	@ (800405c <HAL_MspInit+0x4c>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	@ 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	@ (80040dc <HAL_ADC_MspInit+0x7c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d127      	bne.n	80040d2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	4b16      	ldr	r3, [pc, #88]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004090:	6453      	str	r3, [r2, #68]	@ 0x44
 8004092:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	4a0e      	ldr	r2, [pc, #56]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <HAL_ADC_MspInit+0x80>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 80040ba:	2304      	movs	r3, #4
 80040bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040be:	2303      	movs	r3, #3
 80040c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4619      	mov	r1, r3
 80040cc:	4805      	ldr	r0, [pc, #20]	@ (80040e4 <HAL_ADC_MspInit+0x84>)
 80040ce:	f002 f9c5 	bl	800645c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	@ 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40012000 	.word	0x40012000
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020000 	.word	0x40020000

080040e8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	@ 0x30
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a47      	ldr	r2, [pc, #284]	@ (8004224 <HAL_CAN_MspInit+0x13c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d13e      	bne.n	8004188 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800410a:	4b47      	ldr	r3, [pc, #284]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a45      	ldr	r2, [pc, #276]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 8004112:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004114:	4b44      	ldr	r3, [pc, #272]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10d      	bne.n	8004138 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	4b42      	ldr	r3, [pc, #264]	@ (800422c <HAL_CAN_MspInit+0x144>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	4a41      	ldr	r2, [pc, #260]	@ (800422c <HAL_CAN_MspInit+0x144>)
 8004126:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800412a:	6413      	str	r3, [r2, #64]	@ 0x40
 800412c:	4b3f      	ldr	r3, [pc, #252]	@ (800422c <HAL_CAN_MspInit+0x144>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_CAN_MspInit+0x144>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	4a3a      	ldr	r2, [pc, #232]	@ (800422c <HAL_CAN_MspInit+0x144>)
 8004142:	f043 0302 	orr.w	r3, r3, #2
 8004146:	6313      	str	r3, [r2, #48]	@ 0x30
 8004148:	4b38      	ldr	r3, [pc, #224]	@ (800422c <HAL_CAN_MspInit+0x144>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004154:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004166:	2309      	movs	r3, #9
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	482f      	ldr	r0, [pc, #188]	@ (8004230 <HAL_CAN_MspInit+0x148>)
 8004172:	f002 f973 	bl	800645c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	2014      	movs	r0, #20
 800417c:	f001 fe4d 	bl	8005e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004180:	2014      	movs	r0, #20
 8004182:	f001 fe66 	bl	8005e52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004186:	e048      	b.n	800421a <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a29      	ldr	r2, [pc, #164]	@ (8004234 <HAL_CAN_MspInit+0x14c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d143      	bne.n	800421a <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <HAL_CAN_MspInit+0x144>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	4a24      	ldr	r2, [pc, #144]	@ (800422c <HAL_CAN_MspInit+0x144>)
 800419c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a2:	4b22      	ldr	r3, [pc, #136]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 80041b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <HAL_CAN_MspInit+0x140>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d10d      	bne.n	80041dc <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	4a18      	ldr	r2, [pc, #96]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	4a11      	ldr	r2, [pc, #68]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_CAN_MspInit+0x144>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004206:	2303      	movs	r3, #3
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800420a:	2309      	movs	r3, #9
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420e:	f107 031c 	add.w	r3, r7, #28
 8004212:	4619      	mov	r1, r3
 8004214:	4806      	ldr	r0, [pc, #24]	@ (8004230 <HAL_CAN_MspInit+0x148>)
 8004216:	f002 f921 	bl	800645c <HAL_GPIO_Init>
}
 800421a:	bf00      	nop
 800421c:	3730      	adds	r7, #48	@ 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40006400 	.word	0x40006400
 8004228:	2000084c 	.word	0x2000084c
 800422c:	40023800 	.word	0x40023800
 8004230:	40020400 	.word	0x40020400
 8004234:	40006800 	.word	0x40006800

08004238 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	@ 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	@ (8004378 <HAL_SPI_MspInit+0x140>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f040 808a 	bne.w	8004370 <HAL_SPI_MspInit+0x138>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	4b46      	ldr	r3, [pc, #280]	@ (800437c <HAL_SPI_MspInit+0x144>)
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	4a45      	ldr	r2, [pc, #276]	@ (800437c <HAL_SPI_MspInit+0x144>)
 8004266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800426a:	6453      	str	r3, [r2, #68]	@ 0x44
 800426c:	4b43      	ldr	r3, [pc, #268]	@ (800437c <HAL_SPI_MspInit+0x144>)
 800426e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <HAL_SPI_MspInit+0x144>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	4a3e      	ldr	r2, [pc, #248]	@ (800437c <HAL_SPI_MspInit+0x144>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6313      	str	r3, [r2, #48]	@ 0x30
 8004288:	4b3c      	ldr	r3, [pc, #240]	@ (800437c <HAL_SPI_MspInit+0x144>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004294:	23e0      	movs	r3, #224	@ 0xe0
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	2302      	movs	r3, #2
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	2303      	movs	r3, #3
 80042a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042a4:	2305      	movs	r3, #5
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4619      	mov	r1, r3
 80042ae:	4834      	ldr	r0, [pc, #208]	@ (8004380 <HAL_SPI_MspInit+0x148>)
 80042b0:	f002 f8d4 	bl	800645c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80042b4:	4b33      	ldr	r3, [pc, #204]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042b6:	4a34      	ldr	r2, [pc, #208]	@ (8004388 <HAL_SPI_MspInit+0x150>)
 80042b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80042ba:	4b32      	ldr	r3, [pc, #200]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80042c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042c2:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042dc:	4b29      	ldr	r3, [pc, #164]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80042e2:	4b28      	ldr	r3, [pc, #160]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80042e8:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f0:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80042f6:	4823      	ldr	r0, [pc, #140]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 80042f8:	f001 fdc6 	bl	8005e88 <HAL_DMA_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8004302:	f7ff fd9f 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 800430a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800430c:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <HAL_SPI_MspInit+0x14c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004312:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004314:	4a1e      	ldr	r2, [pc, #120]	@ (8004390 <HAL_SPI_MspInit+0x158>)
 8004316:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004318:	4b1c      	ldr	r3, [pc, #112]	@ (800438c <HAL_SPI_MspInit+0x154>)
 800431a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800431e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004322:	2240      	movs	r2, #64	@ 0x40
 8004324:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004326:	4b19      	ldr	r3, [pc, #100]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800432c:	4b17      	ldr	r3, [pc, #92]	@ (800438c <HAL_SPI_MspInit+0x154>)
 800432e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004332:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004334:	4b15      	ldr	r3, [pc, #84]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004336:	2200      	movs	r2, #0
 8004338:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433a:	4b14      	ldr	r3, [pc, #80]	@ (800438c <HAL_SPI_MspInit+0x154>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004340:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004348:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800434c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434e:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004350:	2200      	movs	r2, #0
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004354:	480d      	ldr	r0, [pc, #52]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004356:	f001 fd97 	bl	8005e88 <HAL_DMA_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8004360:	f7ff fd70 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a09      	ldr	r2, [pc, #36]	@ (800438c <HAL_SPI_MspInit+0x154>)
 8004368:	649a      	str	r2, [r3, #72]	@ 0x48
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <HAL_SPI_MspInit+0x154>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004370:	bf00      	nop
 8004372:	3728      	adds	r7, #40	@ 0x28
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40013000 	.word	0x40013000
 800437c:	40023800 	.word	0x40023800
 8004380:	40020000 	.word	0x40020000
 8004384:	20000744 	.word	0x20000744
 8004388:	40026410 	.word	0x40026410
 800438c:	200007a4 	.word	0x200007a4
 8004390:	40026458 	.word	0x40026458

08004394 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a4:	d10d      	bne.n	80043c2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <HAL_TIM_Base_MspInit+0x3c>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	4a08      	ldr	r2, [pc, #32]	@ (80043d0 <HAL_TIM_Base_MspInit+0x3c>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043b6:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <HAL_TIM_Base_MspInit+0x3c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800

080043d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043de:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <NMI_Handler+0x14>)
 80043e0:	f002 f9f0 	bl	80067c4 <HAL_GPIO_WritePin>
 80043e4:	e7f8      	b.n	80043d8 <NMI_Handler+0x4>
 80043e6:	bf00      	nop
 80043e8:	40020800 	.word	0x40020800

080043ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80043f0:	2200      	movs	r2, #0
 80043f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043f6:	4802      	ldr	r0, [pc, #8]	@ (8004400 <HardFault_Handler+0x14>)
 80043f8:	f002 f9e4 	bl	80067c4 <HAL_GPIO_WritePin>
 80043fc:	e7f8      	b.n	80043f0 <HardFault_Handler+0x4>
 80043fe:	bf00      	nop
 8004400:	40020800 	.word	0x40020800

08004404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004408:	2200      	movs	r2, #0
 800440a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800440e:	4802      	ldr	r0, [pc, #8]	@ (8004418 <MemManage_Handler+0x14>)
 8004410:	f002 f9d8 	bl	80067c4 <HAL_GPIO_WritePin>
 8004414:	e7f8      	b.n	8004408 <MemManage_Handler+0x4>
 8004416:	bf00      	nop
 8004418:	40020800 	.word	0x40020800

0800441c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004420:	2200      	movs	r2, #0
 8004422:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004426:	4802      	ldr	r0, [pc, #8]	@ (8004430 <BusFault_Handler+0x14>)
 8004428:	f002 f9cc 	bl	80067c4 <HAL_GPIO_WritePin>
 800442c:	e7f8      	b.n	8004420 <BusFault_Handler+0x4>
 800442e:	bf00      	nop
 8004430:	40020800 	.word	0x40020800

08004434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800443e:	4802      	ldr	r0, [pc, #8]	@ (8004448 <UsageFault_Handler+0x14>)
 8004440:	f002 f9c0 	bl	80067c4 <HAL_GPIO_WritePin>
 8004444:	e7f8      	b.n	8004438 <UsageFault_Handler+0x4>
 8004446:	bf00      	nop
 8004448:	40020800 	.word	0x40020800

0800444c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800447a:	f000 fa5f 	bl	800493c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004488:	4802      	ldr	r0, [pc, #8]	@ (8004494 <CAN1_RX0_IRQHandler+0x10>)
 800448a:	f001 f9b1 	bl	80057f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000069c 	.word	0x2000069c

08004498 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800449c:	4802      	ldr	r0, [pc, #8]	@ (80044a8 <DMA2_Stream0_IRQHandler+0x10>)
 800449e:	f001 fda1 	bl	8005fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000744 	.word	0x20000744

080044ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80044b0:	4802      	ldr	r0, [pc, #8]	@ (80044bc <DMA2_Stream3_IRQHandler+0x10>)
 80044b2:	f001 fd97 	bl	8005fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200007a4 	.word	0x200007a4

080044c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80044c4:	4802      	ldr	r0, [pc, #8]	@ (80044d0 <OTG_FS_IRQHandler+0x10>)
 80044c6:	f002 fada 	bl	8006a7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20001d38 	.word	0x20001d38

080044d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_kill>:

int _kill(int pid, int sig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ee:	f009 febd 	bl	800e26c <__errno>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2216      	movs	r2, #22
 80044f6:	601a      	str	r2, [r3, #0]
  return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_exit>:

void _exit (int status)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffe7 	bl	80044e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <_exit+0x12>

0800451a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	e00a      	b.n	8004542 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800452c:	f3af 8000 	nop.w
 8004530:	4601      	mov	r1, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	60ba      	str	r2, [r7, #8]
 8004538:	b2ca      	uxtb	r2, r1
 800453a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3301      	adds	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	dbf0      	blt.n	800452c <_read+0x12>
  }

  return len;
 800454a:	687b      	ldr	r3, [r7, #4]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800457c:	605a      	str	r2, [r3, #4]
  return 0;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_isatty>:

int _isatty(int file)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c4:	4a14      	ldr	r2, [pc, #80]	@ (8004618 <_sbrk+0x5c>)
 80045c6:	4b15      	ldr	r3, [pc, #84]	@ (800461c <_sbrk+0x60>)
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d0:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <_sbrk+0x64>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d8:	4b11      	ldr	r3, [pc, #68]	@ (8004620 <_sbrk+0x64>)
 80045da:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <_sbrk+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045de:	4b10      	ldr	r3, [pc, #64]	@ (8004620 <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d207      	bcs.n	80045fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045ec:	f009 fe3e 	bl	800e26c <__errno>
 80045f0:	4603      	mov	r3, r0
 80045f2:	220c      	movs	r2, #12
 80045f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e009      	b.n	8004610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045fc:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <_sbrk+0x64>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004602:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <_sbrk+0x64>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	4a05      	ldr	r2, [pc, #20]	@ (8004620 <_sbrk+0x64>)
 800460c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20020000 	.word	0x20020000
 800461c:	00000400 	.word	0x00000400
 8004620:	20000850 	.word	0x20000850
 8004624:	20002588 	.word	0x20002588

08004628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <SystemInit+0x20>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <SystemInit+0x20>)
 8004634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	e000ed00 	.word	0xe000ed00
 800464c:	00000000 	.word	0x00000000

08004650 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	ed87 0a01 	vstr	s0, [r7, #4]
 800465c:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8004660:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <getTemp+0x100>)
 8004662:	ed93 7a00 	vldr	s14, [r3]
 8004666:	edd7 7a01 	vldr	s15, [r7, #4]
 800466a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800466e:	ed97 7a00 	vldr	s14, [r7]
 8004672:	edd7 7a01 	vldr	s15, [r7, #4]
 8004676:	ee37 7a67 	vsub.f32	s14, s14, s15
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <getTemp+0x104>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb ff5e 	bl	8000548 <__aeabi_f2d>
 800468c:	4604      	mov	r4, r0
 800468e:	460d      	mov	r5, r1
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fb ff59 	bl	8000548 <__aeabi_f2d>
 8004696:	4680      	mov	r8, r0
 8004698:	4689      	mov	r9, r1
 800469a:	4b2f      	ldr	r3, [pc, #188]	@ (8004758 <getTemp+0x108>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fb ff52 	bl	8000548 <__aeabi_f2d>
 80046a4:	4682      	mov	sl, r0
 80046a6:	468b      	mov	fp, r1
 80046a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <getTemp+0x104>)
 80046aa:	edd3 7a00 	vldr	s15, [r3]
 80046ae:	eeb1 7a67 	vneg.f32	s14, s15
 80046b2:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <getTemp+0x10c>)
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046bc:	ee16 0a90 	vmov	r0, s13
 80046c0:	f7fb ff42 	bl	8000548 <__aeabi_f2d>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	ec43 2b10 	vmov	d0, r2, r3
 80046cc:	f00b fb80 	bl	800fdd0 <exp>
 80046d0:	ec53 2b10 	vmov	r2, r3, d0
 80046d4:	4650      	mov	r0, sl
 80046d6:	4659      	mov	r1, fp
 80046d8:	f7fb ff8e 	bl	80005f8 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fc f8b2 	bl	800084c <__aeabi_ddiv>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	ec43 2b17 	vmov	d7, r2, r3
 80046f0:	eeb0 0a47 	vmov.f32	s0, s14
 80046f4:	eef0 0a67 	vmov.f32	s1, s15
 80046f8:	f00b fbb2 	bl	800fe60 <log>
 80046fc:	ec53 2b10 	vmov	r2, r3, d0
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	f7fc f8a2 	bl	800084c <__aeabi_ddiv>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	f7fc fa4a 	bl	8000ba8 <__aeabi_d2f>
 8004714:	4603      	mov	r3, r0
 8004716:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 8004718:	68b8      	ldr	r0, [r7, #8]
 800471a:	f7fb ff15 	bl	8000548 <__aeabi_f2d>
 800471e:	a30a      	add	r3, pc, #40	@ (adr r3, 8004748 <getTemp+0xf8>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f7fb fdb0 	bl	8000288 <__aeabi_dsub>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	f7fc fa3a 	bl	8000ba8 <__aeabi_d2f>
 8004734:	4603      	mov	r3, r0
 8004736:	ee07 3a90 	vmov	s15, r3
}
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	66666666 	.word	0x66666666
 800474c:	40711266 	.word	0x40711266
 8004750:	20000024 	.word	0x20000024
 8004754:	2000002c 	.word	0x2000002c
 8004758:	20000028 	.word	0x20000028
 800475c:	20000030 	.word	0x20000030

08004760 <CreateTimer>:
#include "virtual_timer.h"

// Creates a new timer
timer_ CreateTimer(uint32_t duration_ms, Callback cb)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b089      	sub	sp, #36	@ 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800476c:	f000 f8fa 	bl	8004964 <HAL_GetTick>
 8004770:	61f8      	str	r0, [r7, #28]
	timer_ timer = {tickstart, duration_ms, cb};
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	61bb      	str	r3, [r7, #24]
	return timer;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	461c      	mov	r4, r3
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800478a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	3724      	adds	r7, #36	@ 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}

08004796 <CreateTimerGroup>:

timer_group_ *CreateTimerGroup(timer_ timers[NUM_TIMERS])
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
	// Allocate the timer group structure
	timer_group_ *tg = (timer_group_ *)malloc(sizeof(timer_group_));
 800479e:	2030      	movs	r0, #48	@ 0x30
 80047a0:	f008 fde4 	bl	800d36c <malloc>
 80047a4:	4603      	mov	r3, r0
 80047a6:	60fb      	str	r3, [r7, #12]
	if (!tg)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <CreateTimerGroup+0x1c>
	{
		return NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e006      	b.n	80047c0 <CreateTimerGroup+0x2a>
	}

	memcpy(tg->timers, timers, sizeof(timer_) * NUM_TIMERS);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2230      	movs	r2, #48	@ 0x30
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f009 fd84 	bl	800e2c6 <memcpy>
	return tg;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <TickTimerGroup>:

// Ticks a timer group
void TickTimerGroup(timer_group_ *tg)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e02d      	b.n	8004832 <TickTimerGroup+0x6a>
	{
		// HAL_GetTick is in ms
		// will error with a HAL_GetTick overflow
		if ((HAL_GetTick() - tg->timers[i].tickstart) > tg->timers[i].durations_ms)
 80047d6:	f000 f8c5 	bl	8004964 <HAL_GetTick>
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1ac1      	subs	r1, r0, r3
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4403      	add	r3, r0
 80047fa:	3304      	adds	r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4299      	cmp	r1, r3
 8004800:	d914      	bls.n	800482c <TickTimerGroup+0x64>
		{
			tg->timers[i].tickstart = HAL_GetTick();
 8004802:	7bfc      	ldrb	r4, [r7, #15]
 8004804:	f000 f8ae 	bl	8004964 <HAL_GetTick>
 8004808:	4601      	mov	r1, r0
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4623      	mov	r3, r4
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4423      	add	r3, r4
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	6019      	str	r1, [r3, #0]
			tg->timers[i].cb();
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3308      	adds	r3, #8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	3301      	adds	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d9ce      	bls.n	80047d6 <TickTimerGroup+0xe>
		}
	}
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bd90      	pop	{r4, r7, pc}
	...

08004844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800487c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004848:	f7ff feee 	bl	8004628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800484c:	480c      	ldr	r0, [pc, #48]	@ (8004880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800484e:	490d      	ldr	r1, [pc, #52]	@ (8004884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004850:	4a0d      	ldr	r2, [pc, #52]	@ (8004888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004854:	e002      	b.n	800485c <LoopCopyDataInit>

08004856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800485a:	3304      	adds	r3, #4

0800485c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800485c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800485e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004860:	d3f9      	bcc.n	8004856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004862:	4a0a      	ldr	r2, [pc, #40]	@ (800488c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004864:	4c0a      	ldr	r4, [pc, #40]	@ (8004890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004868:	e001      	b.n	800486e <LoopFillZerobss>

0800486a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800486a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800486c:	3204      	adds	r2, #4

0800486e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800486e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004870:	d3fb      	bcc.n	800486a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004872:	f009 fd01 	bl	800e278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004876:	f7ff f813 	bl	80038a0 <main>
  bx  lr    
 800487a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800487c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004884:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8004888:	08010df8 	.word	0x08010df8
  ldr r2, =_sbss
 800488c:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8004890:	20002588 	.word	0x20002588

08004894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004894:	e7fe      	b.n	8004894 <ADC_IRQHandler>
	...

08004898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800489c:	4b0e      	ldr	r3, [pc, #56]	@ (80048d8 <HAL_Init+0x40>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <HAL_Init+0x40>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048a8:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <HAL_Init+0x40>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <HAL_Init+0x40>)
 80048ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048b4:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <HAL_Init+0x40>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a07      	ldr	r2, [pc, #28]	@ (80048d8 <HAL_Init+0x40>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c0:	2003      	movs	r0, #3
 80048c2:	f001 fa9f 	bl	8005e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048c6:	200f      	movs	r0, #15
 80048c8:	f000 f808 	bl	80048dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048cc:	f7ff fba0 	bl	8004010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00

080048dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_InitTick+0x54>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_InitTick+0x58>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fab7 	bl	8005e6e <HAL_SYSTICK_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e00e      	b.n	8004928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d80a      	bhi.n	8004926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004910:	2200      	movs	r2, #0
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	f001 fa7f 	bl	8005e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800491c:	4a06      	ldr	r2, [pc, #24]	@ (8004938 <HAL_InitTick+0x5c>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000020 	.word	0x20000020
 8004934:	20000038 	.word	0x20000038
 8004938:	20000034 	.word	0x20000034

0800493c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004940:	4b06      	ldr	r3, [pc, #24]	@ (800495c <HAL_IncTick+0x20>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_IncTick+0x24>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4413      	add	r3, r2
 800494c:	4a04      	ldr	r2, [pc, #16]	@ (8004960 <HAL_IncTick+0x24>)
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000038 	.word	0x20000038
 8004960:	20000854 	.word	0x20000854

08004964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return uwTick;
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <HAL_GetTick+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000854 	.word	0x20000854

0800497c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004984:	f7ff ffee 	bl	8004964 <HAL_GetTick>
 8004988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d005      	beq.n	80049a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004996:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <HAL_Delay+0x44>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049a2:	bf00      	nop
 80049a4:	f7ff ffde 	bl	8004964 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d8f7      	bhi.n	80049a4 <HAL_Delay+0x28>
  {
  }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000038 	.word	0x20000038

080049c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e033      	b.n	8004a42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fb3c 	bl	8004060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d118      	bne.n	8004a34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a0a:	f023 0302 	bic.w	r3, r3, #2
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fad8 	bl	8004fcc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a32:	e001      	b.n	8004a38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_ADC_Start+0x1a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0b2      	b.n	8004bcc <HAL_ADC_Start+0x180>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d018      	beq.n	8004aae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a8c:	4b52      	ldr	r3, [pc, #328]	@ (8004bd8 <HAL_ADC_Start+0x18c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a52      	ldr	r2, [pc, #328]	@ (8004bdc <HAL_ADC_Start+0x190>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0c9a      	lsrs	r2, r3, #18
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004aa0:	e002      	b.n	8004aa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f9      	bne.n	8004aa2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d17a      	bne.n	8004bb2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ae6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afa:	d106      	bne.n	8004b0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	f023 0206 	bic.w	r2, r3, #6
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b08:	e002      	b.n	8004b10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b18:	4b31      	ldr	r3, [pc, #196]	@ (8004be0 <HAL_ADC_Start+0x194>)
 8004b1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004b24:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12a      	bne.n	8004b88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	@ (8004be4 <HAL_ADC_Start+0x198>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d015      	beq.n	8004b68 <HAL_ADC_Start+0x11c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <HAL_ADC_Start+0x19c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d105      	bne.n	8004b52 <HAL_ADC_Start+0x106>
 8004b46:	4b26      	ldr	r3, [pc, #152]	@ (8004be0 <HAL_ADC_Start+0x194>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a25      	ldr	r2, [pc, #148]	@ (8004bec <HAL_ADC_Start+0x1a0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d136      	bne.n	8004bca <HAL_ADC_Start+0x17e>
 8004b5c:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <HAL_ADC_Start+0x194>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d130      	bne.n	8004bca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d129      	bne.n	8004bca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	e020      	b.n	8004bca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <HAL_ADC_Start+0x198>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d11b      	bne.n	8004bca <HAL_ADC_Start+0x17e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d114      	bne.n	8004bca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	e00b      	b.n	8004bca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	20000020 	.word	0x20000020
 8004bdc:	431bde83 	.word	0x431bde83
 8004be0:	40012300 	.word	0x40012300
 8004be4:	40012000 	.word	0x40012000
 8004be8:	40012100 	.word	0x40012100
 8004bec:	40012200 	.word	0x40012200

08004bf0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_Stop+0x16>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e021      	b.n	8004c4a <HAL_ADC_Stop+0x5a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c72:	d113      	bne.n	8004c9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c82:	d10b      	bne.n	8004c9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e063      	b.n	8004d64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9c:	f7ff fe62 	bl	8004964 <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ca2:	e021      	b.n	8004ce8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d01d      	beq.n	8004ce8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_ADC_PollForConversion+0x6c>
 8004cb2:	f7ff fe57 	bl	8004964 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d212      	bcs.n	8004ce8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d00b      	beq.n	8004ce8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e03d      	b.n	8004d64 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d1d6      	bne.n	8004ca4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0212 	mvn.w	r2, #18
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d123      	bne.n	8004d62 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d11f      	bne.n	8004d62 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d111      	bne.n	8004d62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e105      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x228>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b09      	cmp	r3, #9
 8004db2:	d925      	bls.n	8004e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68d9      	ldr	r1, [r3, #12]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3b1e      	subs	r3, #30
 8004dca:	2207      	movs	r2, #7
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4618      	mov	r0, r3
 8004dec:	4603      	mov	r3, r0
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4403      	add	r3, r0
 8004df2:	3b1e      	subs	r3, #30
 8004df4:	409a      	lsls	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e022      	b.n	8004e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6919      	ldr	r1, [r3, #16]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	2207      	movs	r2, #7
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	400a      	ands	r2, r1
 8004e22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6919      	ldr	r1, [r3, #16]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4618      	mov	r0, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4403      	add	r3, r0
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d824      	bhi.n	8004e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b05      	subs	r3, #5
 8004e60:	221f      	movs	r2, #31
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43da      	mvns	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	3b05      	subs	r3, #5
 8004e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e96:	e04c      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d824      	bhi.n	8004eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b23      	subs	r3, #35	@ 0x23
 8004eb2:	221f      	movs	r2, #31
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4618      	mov	r0, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	3b23      	subs	r3, #35	@ 0x23
 8004edc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ee8:	e023      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	3b41      	subs	r3, #65	@ 0x41
 8004efc:	221f      	movs	r2, #31
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43da      	mvns	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	400a      	ands	r2, r1
 8004f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	3b41      	subs	r3, #65	@ 0x41
 8004f26:	fa00 f203 	lsl.w	r2, r0, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f32:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <HAL_ADC_ConfigChannel+0x234>)
 8004f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x238>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x1cc>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b12      	cmp	r3, #18
 8004f46:	d105      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a19      	ldr	r2, [pc, #100]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x238>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d123      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x21e>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d003      	beq.n	8004f6e <HAL_ADC_ConfigChannel+0x1e6>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b11      	cmp	r3, #17
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d111      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f82:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x23c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a10      	ldr	r2, [pc, #64]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x240>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	0c9a      	lsrs	r2, r3, #18
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f98:	e002      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f9      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40012300 	.word	0x40012300
 8004fc0:	40012000 	.word	0x40012000
 8004fc4:	20000020 	.word	0x20000020
 8004fc8:	431bde83 	.word	0x431bde83

08004fcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fd4:	4b79      	ldr	r3, [pc, #484]	@ (80051bc <ADC_Init+0x1f0>)
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	021a      	lsls	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6899      	ldr	r1, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	4a58      	ldr	r2, [pc, #352]	@ (80051c0 <ADC_Init+0x1f4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6899      	ldr	r1, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	e00f      	b.n	80050ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0202 	bic.w	r2, r2, #2
 80050d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7e1b      	ldrb	r3, [r3, #24]
 80050e4:	005a      	lsls	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005106:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	3b01      	subs	r3, #1
 8005124:	035a      	lsls	r2, r3, #13
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	e007      	b.n	8005140 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800513e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800514e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	3b01      	subs	r3, #1
 800515c:	051a      	lsls	r2, r3, #20
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005182:	025a      	lsls	r2, r3, #9
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800519a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6899      	ldr	r1, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	029a      	lsls	r2, r3, #10
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012300 	.word	0x40012300
 80051c0:	0f000001 	.word	0x0f000001

080051c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0ed      	b.n	80053b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fe ff80 	bl	80040e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f8:	f7ff fbb4 	bl	8004964 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051fe:	e012      	b.n	8005226 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005200:	f7ff fbb0 	bl	8004964 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b0a      	cmp	r3, #10
 800520c:	d90b      	bls.n	8005226 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2205      	movs	r2, #5
 800521e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0c5      	b.n	80053b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0e5      	beq.n	8005200 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0202 	bic.w	r2, r2, #2
 8005242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005244:	f7ff fb8e 	bl	8004964 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800524a:	e012      	b.n	8005272 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800524c:	f7ff fb8a 	bl	8004964 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b0a      	cmp	r3, #10
 8005258:	d90b      	bls.n	8005272 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2205      	movs	r2, #5
 800526a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e09f      	b.n	80053b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7e1b      	ldrb	r3, [r3, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d108      	bne.n	800529a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e007      	b.n	80052aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7e5b      	ldrb	r3, [r3, #25]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d108      	bne.n	80052c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e007      	b.n	80052d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7e9b      	ldrb	r3, [r3, #26]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d108      	bne.n	80052ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0220 	orr.w	r2, r2, #32
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e007      	b.n	80052fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0220 	bic.w	r2, r2, #32
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7edb      	ldrb	r3, [r3, #27]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d108      	bne.n	8005318 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0210 	bic.w	r2, r2, #16
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e007      	b.n	8005328 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0210 	orr.w	r2, r2, #16
 8005326:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7f1b      	ldrb	r3, [r3, #28]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e007      	b.n	8005352 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0208 	bic.w	r2, r2, #8
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7f5b      	ldrb	r3, [r3, #29]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d108      	bne.n	800536c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0204 	orr.w	r2, r2, #4
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0204 	bic.w	r2, r2, #4
 800537a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	ea42 0103 	orr.w	r1, r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1e5a      	subs	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d003      	beq.n	80053e2 <HAL_CAN_ConfigFilter+0x26>
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	f040 80be 	bne.w	800555e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80053e2:	4b65      	ldr	r3, [pc, #404]	@ (8005578 <HAL_CAN_ConfigFilter+0x1bc>)
 80053e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053fc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	431a      	orrs	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2201      	movs	r2, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	43db      	mvns	r3, r3
 8005434:	401a      	ands	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d123      	bne.n	800548c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005466:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3248      	adds	r2, #72	@ 0x48
 800546c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005480:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005482:	6979      	ldr	r1, [r7, #20]
 8005484:	3348      	adds	r3, #72	@ 0x48
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d122      	bne.n	80054da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80054b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3248      	adds	r2, #72	@ 0x48
 80054ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	3348      	adds	r3, #72	@ 0x48
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80054f4:	e007      	b.n	8005506 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	431a      	orrs	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	43db      	mvns	r3, r3
 8005518:	401a      	ands	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005520:	e007      	b.n	8005532 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	431a      	orrs	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	431a      	orrs	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005550:	f023 0201 	bic.w	r2, r3, #1
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e006      	b.n	800556c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40006400 	.word	0x40006400

0800557c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d12e      	bne.n	80055ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a8:	f7ff f9dc 	bl	8004964 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055ae:	e012      	b.n	80055d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055b0:	f7ff f9d8 	bl	8004964 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b0a      	cmp	r3, #10
 80055bc:	d90b      	bls.n	80055d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2205      	movs	r2, #5
 80055ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e012      	b.n	80055fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e006      	b.n	80055fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	@ 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005618:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005622:	7ffb      	ldrb	r3, [r7, #31]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d003      	beq.n	8005630 <HAL_CAN_AddTxMessage+0x2c>
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	2b02      	cmp	r3, #2
 800562c:	f040 80ad 	bne.w	800578a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8095 	beq.w	800577a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	0e1b      	lsrs	r3, r3, #24
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800565a:	2201      	movs	r2, #1
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	409a      	lsls	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	6809      	ldr	r1, [r1, #0]
 800567a:	431a      	orrs	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	3318      	adds	r3, #24
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	440b      	add	r3, r1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e00f      	b.n	80056a8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005692:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005698:	68f9      	ldr	r1, [r7, #12]
 800569a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800569c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3318      	adds	r3, #24
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	440b      	add	r3, r1
 80056a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6819      	ldr	r1, [r3, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3318      	adds	r3, #24
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	440b      	add	r3, r1
 80056b8:	3304      	adds	r3, #4
 80056ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	7d1b      	ldrb	r3, [r3, #20]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d111      	bne.n	80056e8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3318      	adds	r3, #24
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	6811      	ldr	r1, [r2, #0]
 80056d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3318      	adds	r3, #24
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	440b      	add	r3, r1
 80056e4:	3304      	adds	r3, #4
 80056e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3307      	adds	r3, #7
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	061a      	lsls	r2, r3, #24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3306      	adds	r3, #6
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3305      	adds	r3, #5
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	4313      	orrs	r3, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	3204      	adds	r2, #4
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	4610      	mov	r0, r2
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6811      	ldr	r1, [r2, #0]
 8005710:	ea43 0200 	orr.w	r2, r3, r0
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	440b      	add	r3, r1
 800571a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800571e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3303      	adds	r3, #3
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	061a      	lsls	r2, r3, #24
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3302      	adds	r3, #2
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3301      	adds	r3, #1
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	4313      	orrs	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	4610      	mov	r0, r2
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	ea43 0200 	orr.w	r2, r3, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	440b      	add	r3, r1
 8005750:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005754:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	3318      	adds	r3, #24
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	4413      	add	r3, r2
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6811      	ldr	r1, [r2, #0]
 8005768:	f043 0201 	orr.w	r2, r3, #1
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3318      	adds	r3, #24
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	440b      	add	r3, r1
 8005774:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e00e      	b.n	8005798 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e006      	b.n	8005798 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
  }
}
 8005798:	4618      	mov	r0, r3
 800579a:	3724      	adds	r7, #36	@ 0x24
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d002      	beq.n	80057c2 <HAL_CAN_ActivateNotification+0x1e>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d109      	bne.n	80057d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6959      	ldr	r1, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e006      	b.n	80057e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
  }
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d07c      	beq.n	8005930 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d023      	beq.n	8005888 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f983 	bl	8005b5e <HAL_CAN_TxMailbox0CompleteCallback>
 8005858:	e016      	b.n	8005888 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
 800586c:	e00c      	b.n	8005888 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005880:	e002      	b.n	8005888 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f989 	bl	8005b9a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d024      	beq.n	80058dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800589a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f963 	bl	8005b72 <HAL_CAN_TxMailbox1CompleteCallback>
 80058ac:	e016      	b.n	80058dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c0:	e00c      	b.n	80058dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d4:	e002      	b.n	80058dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f969 	bl	8005bae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d024      	beq.n	8005930 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80058ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f943 	bl	8005b86 <HAL_CAN_TxMailbox2CompleteCallback>
 8005900:	e016      	b.n	8005930 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
 8005914:	e00c      	b.n	8005930 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
 8005928:	e002      	b.n	8005930 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f949 	bl	8005bc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2210      	movs	r2, #16
 8005952:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2208      	movs	r2, #8
 800596e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f93a 	bl	8005bea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f921 	bl	8005bd6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2208      	movs	r2, #8
 80059d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f91c 	bl	8005c12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f903 	bl	8005bfe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f906 	bl	8005c26 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2208      	movs	r2, #8
 8005a34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8ff 	bl	8005c3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d07b      	beq.n	8005b3e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d072      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	f043 0302 	orr.w	r3, r3, #2
 8005a86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d043      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d03e      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005abe:	2b60      	cmp	r3, #96	@ 0x60
 8005ac0:	d02b      	beq.n	8005b1a <HAL_CAN_IRQHandler+0x32a>
 8005ac2:	2b60      	cmp	r3, #96	@ 0x60
 8005ac4:	d82e      	bhi.n	8005b24 <HAL_CAN_IRQHandler+0x334>
 8005ac6:	2b50      	cmp	r3, #80	@ 0x50
 8005ac8:	d022      	beq.n	8005b10 <HAL_CAN_IRQHandler+0x320>
 8005aca:	2b50      	cmp	r3, #80	@ 0x50
 8005acc:	d82a      	bhi.n	8005b24 <HAL_CAN_IRQHandler+0x334>
 8005ace:	2b40      	cmp	r3, #64	@ 0x40
 8005ad0:	d019      	beq.n	8005b06 <HAL_CAN_IRQHandler+0x316>
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	d826      	bhi.n	8005b24 <HAL_CAN_IRQHandler+0x334>
 8005ad6:	2b30      	cmp	r3, #48	@ 0x30
 8005ad8:	d010      	beq.n	8005afc <HAL_CAN_IRQHandler+0x30c>
 8005ada:	2b30      	cmp	r3, #48	@ 0x30
 8005adc:	d822      	bhi.n	8005b24 <HAL_CAN_IRQHandler+0x334>
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d002      	beq.n	8005ae8 <HAL_CAN_IRQHandler+0x2f8>
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d005      	beq.n	8005af2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ae6:	e01d      	b.n	8005b24 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	f043 0308 	orr.w	r3, r3, #8
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005af0:	e019      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005afa:	e014      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	f043 0320 	orr.w	r3, r3, #32
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b04:	e00f      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b0e:	e00a      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b18:	e005      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b22:	e000      	b.n	8005b26 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b24:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b34:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f87c 	bl	8005c4e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b56:	bf00      	nop
 8005b58:	3728      	adds	r7, #40	@ 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <__NVIC_SetPriorityGrouping>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c80:	4013      	ands	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c96:	4a04      	ldr	r2, [pc, #16]	@ (8005ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	60d3      	str	r3, [r2, #12]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	e000ed00 	.word	0xe000ed00

08005cac <__NVIC_GetPriorityGrouping>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cb0:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 0307 	and.w	r3, r3, #7
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <__NVIC_EnableIRQ>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	db0b      	blt.n	8005cf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	f003 021f 	and.w	r2, r3, #31
 8005ce0:	4907      	ldr	r1, [pc, #28]	@ (8005d00 <__NVIC_EnableIRQ+0x38>)
 8005ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2001      	movs	r0, #1
 8005cea:	fa00 f202 	lsl.w	r2, r0, r2
 8005cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e100 	.word	0xe000e100

08005d04 <__NVIC_SetPriority>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	db0a      	blt.n	8005d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	490c      	ldr	r1, [pc, #48]	@ (8005d50 <__NVIC_SetPriority+0x4c>)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	0112      	lsls	r2, r2, #4
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	440b      	add	r3, r1
 8005d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d2c:	e00a      	b.n	8005d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4908      	ldr	r1, [pc, #32]	@ (8005d54 <__NVIC_SetPriority+0x50>)
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	3b04      	subs	r3, #4
 8005d3c:	0112      	lsls	r2, r2, #4
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	440b      	add	r3, r1
 8005d42:	761a      	strb	r2, [r3, #24]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	e000e100 	.word	0xe000e100
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <NVIC_EncodePriority>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	@ 0x24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f1c3 0307 	rsb	r3, r3, #7
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	bf28      	it	cs
 8005d76:	2304      	movcs	r3, #4
 8005d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d902      	bls.n	8005d88 <NVIC_EncodePriority+0x30>
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	3b03      	subs	r3, #3
 8005d86:	e000      	b.n	8005d8a <NVIC_EncodePriority+0x32>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43da      	mvns	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005da0:	f04f 31ff 	mov.w	r1, #4294967295
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	fa01 f303 	lsl.w	r3, r1, r3
 8005daa:	43d9      	mvns	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db0:	4313      	orrs	r3, r2
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3724      	adds	r7, #36	@ 0x24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <SysTick_Config>:
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd0:	d301      	bcc.n	8005dd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e00f      	b.n	8005df6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <SysTick_Config+0x40>)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dde:	210f      	movs	r1, #15
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	f7ff ff8e 	bl	8005d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005de8:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <SysTick_Config+0x40>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dee:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <SysTick_Config+0x40>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010

08005e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff29 	bl	8005c64 <__NVIC_SetPriorityGrouping>
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	4603      	mov	r3, r0
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e2c:	f7ff ff3e 	bl	8005cac <__NVIC_GetPriorityGrouping>
 8005e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f7ff ff8e 	bl	8005d58 <NVIC_EncodePriority>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff ff5d 	bl	8005d04 <__NVIC_SetPriority>
}
 8005e4a:	bf00      	nop
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	4603      	mov	r3, r0
 8005e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff31 	bl	8005cc8 <__NVIC_EnableIRQ>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ffa2 	bl	8005dc0 <SysTick_Config>
 8005e7c:	4603      	mov	r3, r0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e94:	f7fe fd66 	bl	8004964 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e099      	b.n	8005fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec4:	e00f      	b.n	8005ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ec6:	f7fe fd4d 	bl	8004964 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d908      	bls.n	8005ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e078      	b.n	8005fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e8      	bne.n	8005ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4b38      	ldr	r3, [pc, #224]	@ (8005fe0 <HAL_DMA_Init+0x158>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d107      	bne.n	8005f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d117      	bne.n	8005faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00e      	beq.n	8005faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9e9 	bl	8006364 <DMA_CheckFifoParam>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2240      	movs	r2, #64	@ 0x40
 8005f9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e016      	b.n	8005fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9a0 	bl	80062f8 <DMA_CalcBaseAndBitshift>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc0:	223f      	movs	r2, #63	@ 0x3f
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	f010803f 	.word	0xf010803f

08005fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800622c <HAL_DMA_IRQHandler+0x248>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8006230 <HAL_DMA_IRQHandler+0x24c>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	0a9b      	lsrs	r3, r3, #10
 8005ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600e:	2208      	movs	r2, #8
 8006010:	409a      	lsls	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01a      	beq.n	8006050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603c:	2208      	movs	r2, #8
 800603e:	409a      	lsls	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	2201      	movs	r2, #1
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d012      	beq.n	8006086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006072:	2201      	movs	r2, #1
 8006074:	409a      	lsls	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608a:	2204      	movs	r2, #4
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a8:	2204      	movs	r2, #4
 80060aa:	409a      	lsls	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c0:	2210      	movs	r2, #16
 80060c2:	409a      	lsls	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d043      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03c      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060de:	2210      	movs	r2, #16
 80060e0:	409a      	lsls	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d024      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	e01f      	b.n	8006154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e016      	b.n	8006154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0208 	bic.w	r2, r2, #8
 8006142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006158:	2220      	movs	r2, #32
 800615a:	409a      	lsls	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 808f 	beq.w	8006284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8087 	beq.w	8006284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	2220      	movs	r2, #32
 800617c:	409a      	lsls	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b05      	cmp	r3, #5
 800618c:	d136      	bne.n	80061fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0216 	bic.w	r2, r2, #22
 800619c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <HAL_DMA_IRQHandler+0x1da>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0208 	bic.w	r2, r2, #8
 80061cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d2:	223f      	movs	r2, #63	@ 0x3f
 80061d4:	409a      	lsls	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d07e      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
        }
        return;
 80061fa:	e079      	b.n	80062f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01d      	beq.n	8006246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10d      	bne.n	8006234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621c:	2b00      	cmp	r3, #0
 800621e:	d031      	beq.n	8006284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
 8006228:	e02c      	b.n	8006284 <HAL_DMA_IRQHandler+0x2a0>
 800622a:	bf00      	nop
 800622c:	20000020 	.word	0x20000020
 8006230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d023      	beq.n	8006284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	e01e      	b.n	8006284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10f      	bne.n	8006274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0210 	bic.w	r2, r2, #16
 8006262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	2b00      	cmp	r3, #0
 800628a:	d032      	beq.n	80062f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d022      	beq.n	80062de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2205      	movs	r2, #5
 800629c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d307      	bcc.n	80062cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f2      	bne.n	80062b0 <HAL_DMA_IRQHandler+0x2cc>
 80062ca:	e000      	b.n	80062ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
 80062ee:	e000      	b.n	80062f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062f0:	bf00      	nop
    }
  }
}
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	3b10      	subs	r3, #16
 8006308:	4a14      	ldr	r2, [pc, #80]	@ (800635c <DMA_CalcBaseAndBitshift+0x64>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006312:	4a13      	ldr	r2, [pc, #76]	@ (8006360 <DMA_CalcBaseAndBitshift+0x68>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d909      	bls.n	800633a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	659a      	str	r2, [r3, #88]	@ 0x58
 8006338:	e007      	b.n	800634a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	aaaaaaab 	.word	0xaaaaaaab
 8006360:	08010a38 	.word	0x08010a38

08006364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11f      	bne.n	80063be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d856      	bhi.n	8006432 <DMA_CheckFifoParam+0xce>
 8006384:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <DMA_CheckFifoParam+0x28>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063af 	.word	0x080063af
 8006394:	0800639d 	.word	0x0800639d
 8006398:	08006433 	.word	0x08006433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d046      	beq.n	8006436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ac:	e043      	b.n	8006436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063b6:	d140      	bne.n	800643a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063bc:	e03d      	b.n	800643a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	d121      	bne.n	800640c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d837      	bhi.n	800643e <DMA_CheckFifoParam+0xda>
 80063ce:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <DMA_CheckFifoParam+0x70>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063eb 	.word	0x080063eb
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	080063fd 	.word	0x080063fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e030      	b.n	800644c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d025      	beq.n	8006442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fa:	e022      	b.n	8006442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006404:	d11f      	bne.n	8006446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800640a:	e01c      	b.n	8006446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d903      	bls.n	800641a <DMA_CheckFifoParam+0xb6>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006418:	e018      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
      break;
 800641e:	e015      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      break;
 8006430:	e00b      	b.n	800644a <DMA_CheckFifoParam+0xe6>
      break;
 8006432:	bf00      	nop
 8006434:	e00a      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 8006436:	bf00      	nop
 8006438:	e008      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800643a:	bf00      	nop
 800643c:	e006      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800643e:	bf00      	nop
 8006440:	e004      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e002      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;   
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
    }
  } 
  
  return status; 
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	@ 0x24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e16b      	b.n	8006750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006478:	2201      	movs	r2, #1
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4013      	ands	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	f040 815a 	bne.w	800674a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d005      	beq.n	80064ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d130      	bne.n	8006510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	2203      	movs	r2, #3
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064e4:	2201      	movs	r2, #1
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	4013      	ands	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 0201 	and.w	r2, r3, #1
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b03      	cmp	r3, #3
 800651a:	d017      	beq.n	800654c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 0303 	and.w	r3, r3, #3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d123      	bne.n	80065a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	08da      	lsrs	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3208      	adds	r2, #8
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	220f      	movs	r2, #15
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	43db      	mvns	r3, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	08da      	lsrs	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3208      	adds	r2, #8
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	2203      	movs	r2, #3
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 0203 	and.w	r2, r3, #3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80b4 	beq.w	800674a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	4b60      	ldr	r3, [pc, #384]	@ (8006768 <HAL_GPIO_Init+0x30c>)
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	4a5f      	ldr	r2, [pc, #380]	@ (8006768 <HAL_GPIO_Init+0x30c>)
 80065ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80065f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006768 <HAL_GPIO_Init+0x30c>)
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065fe:	4a5b      	ldr	r2, [pc, #364]	@ (800676c <HAL_GPIO_Init+0x310>)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	3302      	adds	r3, #2
 8006606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	220f      	movs	r2, #15
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a52      	ldr	r2, [pc, #328]	@ (8006770 <HAL_GPIO_Init+0x314>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02b      	beq.n	8006682 <HAL_GPIO_Init+0x226>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a51      	ldr	r2, [pc, #324]	@ (8006774 <HAL_GPIO_Init+0x318>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d025      	beq.n	800667e <HAL_GPIO_Init+0x222>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a50      	ldr	r2, [pc, #320]	@ (8006778 <HAL_GPIO_Init+0x31c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <HAL_GPIO_Init+0x21e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a4f      	ldr	r2, [pc, #316]	@ (800677c <HAL_GPIO_Init+0x320>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d019      	beq.n	8006676 <HAL_GPIO_Init+0x21a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a4e      	ldr	r2, [pc, #312]	@ (8006780 <HAL_GPIO_Init+0x324>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_GPIO_Init+0x216>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4d      	ldr	r2, [pc, #308]	@ (8006784 <HAL_GPIO_Init+0x328>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00d      	beq.n	800666e <HAL_GPIO_Init+0x212>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a4c      	ldr	r2, [pc, #304]	@ (8006788 <HAL_GPIO_Init+0x32c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <HAL_GPIO_Init+0x20e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a4b      	ldr	r2, [pc, #300]	@ (800678c <HAL_GPIO_Init+0x330>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_GPIO_Init+0x20a>
 8006662:	2307      	movs	r3, #7
 8006664:	e00e      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006666:	2308      	movs	r3, #8
 8006668:	e00c      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800666a:	2306      	movs	r3, #6
 800666c:	e00a      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800666e:	2305      	movs	r3, #5
 8006670:	e008      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006672:	2304      	movs	r3, #4
 8006674:	e006      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006676:	2303      	movs	r3, #3
 8006678:	e004      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800667a:	2302      	movs	r3, #2
 800667c:	e002      	b.n	8006684 <HAL_GPIO_Init+0x228>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_GPIO_Init+0x228>
 8006682:	2300      	movs	r3, #0
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	f002 0203 	and.w	r2, r2, #3
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	4093      	lsls	r3, r2
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4313      	orrs	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006694:	4935      	ldr	r1, [pc, #212]	@ (800676c <HAL_GPIO_Init+0x310>)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	3302      	adds	r3, #2
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006790 <HAL_GPIO_Init+0x334>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066c6:	4a32      	ldr	r2, [pc, #200]	@ (8006790 <HAL_GPIO_Init+0x334>)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066cc:	4b30      	ldr	r3, [pc, #192]	@ (8006790 <HAL_GPIO_Init+0x334>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066f0:	4a27      	ldr	r2, [pc, #156]	@ (8006790 <HAL_GPIO_Init+0x334>)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066f6:	4b26      	ldr	r3, [pc, #152]	@ (8006790 <HAL_GPIO_Init+0x334>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800671a:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_GPIO_Init+0x334>)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006720:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <HAL_GPIO_Init+0x334>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	43db      	mvns	r3, r3
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006744:	4a12      	ldr	r2, [pc, #72]	@ (8006790 <HAL_GPIO_Init+0x334>)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	f67f ae90 	bls.w	8006478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	3724      	adds	r7, #36	@ 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	40013800 	.word	0x40013800
 8006770:	40020000 	.word	0x40020000
 8006774:	40020400 	.word	0x40020400
 8006778:	40020800 	.word	0x40020800
 800677c:	40020c00 	.word	0x40020c00
 8006780:	40021000 	.word	0x40021000
 8006784:	40021400 	.word	0x40021400
 8006788:	40021800 	.word	0x40021800
 800678c:	40021c00 	.word	0x40021c00
 8006790:	40013c00 	.word	0x40013c00

08006794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e001      	b.n	80067b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	807b      	strh	r3, [r7, #2]
 80067d0:	4613      	mov	r3, r2
 80067d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067d4:	787b      	ldrb	r3, [r7, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067da:	887a      	ldrh	r2, [r7, #2]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067e0:	e003      	b.n	80067ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067e2:	887b      	ldrh	r3, [r7, #2]
 80067e4:	041a      	lsls	r2, r3, #16
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	619a      	str	r2, [r3, #24]
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af02      	add	r7, sp, #8
 80067fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e101      	b.n	8006a0c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f006 fa8e 	bl	800cd44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2203      	movs	r2, #3
 800682c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006836:	d102      	bne.n	800683e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f002 fedb 	bl	80095fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7c1a      	ldrb	r2, [r3, #16]
 8006850:	f88d 2000 	strb.w	r2, [sp]
 8006854:	3304      	adds	r3, #4
 8006856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006858:	f002 fdba 	bl	80093d0 <USB_CoreInit>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0ce      	b.n	8006a0c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f002 fed3 	bl	8009620 <USB_SetCurrentMode>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0bf      	b.n	8006a0c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	e04a      	b.n	8006928 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3315      	adds	r3, #21
 80068a2:	2201      	movs	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	3314      	adds	r3, #20
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	b298      	uxth	r0, r3
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	332e      	adds	r3, #46	@ 0x2e
 80068ce:	4602      	mov	r2, r0
 80068d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068d2:	7bfa      	ldrb	r2, [r7, #15]
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3318      	adds	r3, #24
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068e6:	7bfa      	ldrb	r2, [r7, #15]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	331c      	adds	r3, #28
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3320      	adds	r3, #32
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800690e:	7bfa      	ldrb	r2, [r7, #15]
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	3324      	adds	r3, #36	@ 0x24
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	3301      	adds	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	791b      	ldrb	r3, [r3, #4]
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	429a      	cmp	r2, r3
 8006930:	d3af      	bcc.n	8006892 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]
 8006936:	e044      	b.n	80069c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006938:	7bfa      	ldrb	r2, [r7, #15]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800694e:	7bfa      	ldrb	r2, [r7, #15]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800697a:	7bfa      	ldrb	r2, [r7, #15]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006990:	7bfa      	ldrb	r2, [r7, #15]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	4613      	mov	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	3301      	adds	r3, #1
 80069c0:	73fb      	strb	r3, [r7, #15]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d3b5      	bcc.n	8006938 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7c1a      	ldrb	r2, [r3, #16]
 80069d4:	f88d 2000 	strb.w	r2, [sp]
 80069d8:	3304      	adds	r3, #4
 80069da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069dc:	f002 fe6c 	bl	80096b8 <USB_DevInit>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e00c      	b.n	8006a0c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f003 feb6 	bl	800a776 <USB_DevDisconnect>

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_PCD_Start+0x1c>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e022      	b.n	8006a76 <HAL_PCD_Start+0x62>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d105      	bne.n	8006a58 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 fdbd 	bl	80095dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f003 fe64 	bl	800a734 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a7e:	b590      	push	{r4, r7, lr}
 8006a80:	b08d      	sub	sp, #52	@ 0x34
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f003 ff22 	bl	800a8de <USB_GetMode>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 848c 	bne.w	80073ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f003 fe86 	bl	800a7b8 <USB_ReadInterrupts>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8482 	beq.w	80073b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f003 fe73 	bl	800a7b8 <USB_ReadInterrupts>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d107      	bne.n	8006aec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 0202 	and.w	r2, r2, #2
 8006aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f003 fe61 	bl	800a7b8 <USB_ReadInterrupts>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d161      	bne.n	8006bc4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0210 	bic.w	r2, r2, #16
 8006b0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b3a:	d124      	bne.n	8006b86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d035      	beq.n	8006bb4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6a38      	ldr	r0, [r7, #32]
 8006b5c:	f003 fc98 	bl	800a490 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b6c:	441a      	add	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b7e:	441a      	add	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	615a      	str	r2, [r3, #20]
 8006b84:	e016      	b.n	8006bb4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006b90:	d110      	bne.n	8006bb4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b98:	2208      	movs	r2, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6a38      	ldr	r0, [r7, #32]
 8006b9e:	f003 fc77 	bl	800a490 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bae:	441a      	add	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0210 	orr.w	r2, r2, #16
 8006bc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f003 fdf5 	bl	800a7b8 <USB_ReadInterrupts>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006bd8:	f040 80a7 	bne.w	8006d2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f003 fdfa 	bl	800a7de <USB_ReadDevAllOutEpInterrupt>
 8006bea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006bec:	e099      	b.n	8006d22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 808e 	beq.w	8006d16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f003 fe1e 	bl	800a846 <USB_ReadDevOutEPInterrupt>
 8006c0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00c      	beq.n	8006c30 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c22:	461a      	mov	r2, r3
 8006c24:	2301      	movs	r3, #1
 8006c26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fea4 	bl	8007978 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	2308      	movs	r3, #8
 8006c4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 ff7a 	bl	8007b48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d030      	beq.n	8006cdc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c82:	2b80      	cmp	r3, #128	@ 0x80
 8006c84:	d109      	bne.n	8006c9a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c98:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	3304      	adds	r3, #4
 8006cae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d108      	bne.n	8006cca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f006 f943 	bl	800cf50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2302      	movs	r3, #2
 8006cda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	3301      	adds	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f af62 	bne.w	8006bee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f003 fd42 	bl	800a7b8 <USB_ReadInterrupts>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d3e:	f040 80db 	bne.w	8006ef8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 fd63 	bl	800a812 <USB_ReadDevAllInEpInterrupt>
 8006d4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006d52:	e0cd      	b.n	8006ef0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80c2 	beq.w	8006ee4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f003 fd89 	bl	800a882 <USB_ReadDevInEPInterrupt>
 8006d70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d057      	beq.n	8006e2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	2201      	movs	r2, #1
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	69f9      	ldr	r1, [r7, #28]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dac:	461a      	mov	r2, r3
 8006dae:	2301      	movs	r3, #1
 8006db0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	799b      	ldrb	r3, [r3, #6]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d132      	bne.n	8006e20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3320      	adds	r3, #32
 8006dca:	6819      	ldr	r1, [r3, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4403      	add	r3, r0
 8006dda:	331c      	adds	r3, #28
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4419      	add	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4403      	add	r3, r0
 8006dee:	3320      	adds	r3, #32
 8006df0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d113      	bne.n	8006e20 <HAL_PCD_IRQHandler+0x3a2>
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3324      	adds	r3, #36	@ 0x24
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d108      	bne.n	8006e20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	f003 fd90 	bl	800a940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f006 f80d 	bl	800ce46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e42:	461a      	mov	r2, r3
 8006e44:	2308      	movs	r3, #8
 8006e46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2310      	movs	r3, #16
 8006e62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2340      	movs	r3, #64	@ 0x40
 8006e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d023      	beq.n	8006ed2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e8c:	6a38      	ldr	r0, [r7, #32]
 8006e8e:	f002 fd77 	bl	8009980 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	78db      	ldrb	r3, [r3, #3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d108      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f006 f85a 	bl	800cf74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2302      	movs	r3, #2
 8006ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fcbd 	bl	800785e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f47f af2e 	bne.w	8006d54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f003 fc5b 	bl	800a7b8 <USB_ReadInterrupts>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f0c:	d122      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d108      	bne.n	8006f3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fea4 	bl	8007c84 <HAL_PCDEx_LPM_Callback>
 8006f3c:	e002      	b.n	8006f44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f005 fff8 	bl	800cf34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f003 fc2d 	bl	800a7b8 <USB_ReadInterrupts>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f68:	d112      	bne.n	8006f90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d102      	bne.n	8006f80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f005 ffb4 	bl	800cee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006f8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f003 fc0f 	bl	800a7b8 <USB_ReadInterrupts>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa4:	f040 80b7 	bne.w	8007116 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fb6:	f023 0301 	bic.w	r3, r3, #1
 8006fba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2110      	movs	r1, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f002 fcdc 	bl	8009980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fcc:	e046      	b.n	800705c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fe0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ffc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	461a      	mov	r2, r3
 8007010:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007014:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007030:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007034:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007046:	0151      	lsls	r1, r2, #5
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	440a      	add	r2, r1
 800704c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007050:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007054:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	3301      	adds	r3, #1
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	461a      	mov	r2, r3
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	4293      	cmp	r3, r2
 8007066:	d3b2      	bcc.n	8006fce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007076:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800707a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7bdb      	ldrb	r3, [r3, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d016      	beq.n	80070b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007094:	f043 030b 	orr.w	r3, r3, #11
 8007098:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070aa:	f043 030b 	orr.w	r3, r3, #11
 80070ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80070b0:	e015      	b.n	80070de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80070c4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80070c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d8:	f043 030b 	orr.w	r3, r3, #11
 80070dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007100:	461a      	mov	r2, r3
 8007102:	f003 fc1d 	bl	800a940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f003 fb4c 	bl	800a7b8 <USB_ReadInterrupts>
 8007120:	4603      	mov	r3, r0
 8007122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712a:	d123      	bne.n	8007174 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f003 fbe2 	bl	800a8fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f002 fc99 	bl	8009a72 <USB_GetDevSpeed>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681c      	ldr	r4, [r3, #0]
 800714c:	f001 fa0a 	bl	8008564 <HAL_RCC_GetHCLKFreq>
 8007150:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007156:	461a      	mov	r2, r3
 8007158:	4620      	mov	r0, r4
 800715a:	f002 f99d 	bl	8009498 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f005 fe99 	bl	800ce96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007172:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f003 fb1d 	bl	800a7b8 <USB_ReadInterrupts>
 800717e:	4603      	mov	r3, r0
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b08      	cmp	r3, #8
 8007186:	d10a      	bne.n	800719e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f005 fe76 	bl	800ce7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695a      	ldr	r2, [r3, #20]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f002 0208 	and.w	r2, r2, #8
 800719c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f003 fb08 	bl	800a7b8 <USB_ReadInterrupts>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ae:	2b80      	cmp	r3, #128	@ 0x80
 80071b0:	d123      	bne.n	80071fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071be:	2301      	movs	r3, #1
 80071c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c2:	e014      	b.n	80071ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d105      	bne.n	80071e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fb0a 	bl	80077fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	3301      	adds	r3, #1
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	791b      	ldrb	r3, [r3, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d3e4      	bcc.n	80071c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f003 fada 	bl	800a7b8 <USB_ReadInterrupts>
 8007204:	4603      	mov	r3, r0
 8007206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800720a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720e:	d13c      	bne.n	800728a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007210:	2301      	movs	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
 8007214:	e02b      	b.n	800726e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3318      	adds	r3, #24
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d115      	bne.n	8007268 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800723c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800723e:	2b00      	cmp	r3, #0
 8007240:	da12      	bge.n	8007268 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	3317      	adds	r3, #23
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 faca 	bl	80077fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	3301      	adds	r3, #1
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	461a      	mov	r2, r3
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	4293      	cmp	r3, r2
 8007278:	d3cd      	bcc.n	8007216 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695a      	ldr	r2, [r3, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f003 fa92 	bl	800a7b8 <USB_ReadInterrupts>
 8007294:	4603      	mov	r3, r0
 8007296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800729a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800729e:	d156      	bne.n	800734e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072a0:	2301      	movs	r3, #1
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a4:	e045      	b.n	8007332 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ba:	4613      	mov	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d12e      	bne.n	800732c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	da2b      	bge.n	800732c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80072e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d121      	bne.n	800732c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ec:	4613      	mov	r3, r2
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007328:	6053      	str	r3, [r2, #4]
            break;
 800732a:	e008      	b.n	800733e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	3301      	adds	r3, #1
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	791b      	ldrb	r3, [r3, #4]
 8007336:	461a      	mov	r2, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	4293      	cmp	r3, r2
 800733c:	d3b3      	bcc.n	80072a6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695a      	ldr	r2, [r3, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800734c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f003 fa30 	bl	800a7b8 <USB_ReadInterrupts>
 8007358:	4603      	mov	r3, r0
 800735a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d10a      	bne.n	800737a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f005 fe17 	bl	800cf98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f003 fa1a 	bl	800a7b8 <USB_ReadInterrupts>
 8007384:	4603      	mov	r3, r0
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b04      	cmp	r3, #4
 800738c:	d115      	bne.n	80073ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f005 fe07 	bl	800cfb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6859      	ldr	r1, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	e000      	b.n	80073ba <HAL_PCD_IRQHandler+0x93c>
      return;
 80073b8:	bf00      	nop
    }
  }
}
 80073ba:	3734      	adds	r7, #52	@ 0x34
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd90      	pop	{r4, r7, pc}

080073c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d101      	bne.n	80073da <HAL_PCD_SetAddress+0x1a>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e012      	b.n	8007400 <HAL_PCD_SetAddress+0x40>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f003 f979 	bl	800a6e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	4608      	mov	r0, r1
 8007412:	4611      	mov	r1, r2
 8007414:	461a      	mov	r2, r3
 8007416:	4603      	mov	r3, r0
 8007418:	70fb      	strb	r3, [r7, #3]
 800741a:	460b      	mov	r3, r1
 800741c:	803b      	strh	r3, [r7, #0]
 800741e:	4613      	mov	r3, r2
 8007420:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0f      	bge.n	800744e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	3310      	adds	r3, #16
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	3304      	adds	r3, #4
 8007444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	705a      	strb	r2, [r3, #1]
 800744c:	e00f      	b.n	800746e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	3304      	adds	r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	b2da      	uxtb	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800747a:	883b      	ldrh	r3, [r7, #0]
 800747c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	78ba      	ldrb	r2, [r7, #2]
 8007488:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800749c:	78bb      	ldrb	r3, [r7, #2]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d102      	bne.n	80074a8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_PCD_EP_Open+0xae>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e00e      	b.n	80074d4 <HAL_PCD_EP_Open+0xcc>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f002 faf9 	bl	8009abc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da0f      	bge.n	8007510 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	f003 020f 	and.w	r2, r3, #15
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	3310      	adds	r3, #16
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	3304      	adds	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	705a      	strb	r2, [r3, #1]
 800750e:	e00f      	b.n	8007530 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	b2da      	uxtb	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_PCD_EP_Close+0x6e>
 8007546:	2302      	movs	r3, #2
 8007548:	e00e      	b.n	8007568 <HAL_PCD_EP_Close+0x8c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	4618      	mov	r0, r3
 800755a:	f002 fb37 	bl	8009bcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	460b      	mov	r3, r1
 800757e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	f003 020f 	and.w	r2, r3, #15
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	3304      	adds	r3, #4
 8007598:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	799b      	ldrb	r3, [r3, #6]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d102      	bne.n	80075cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	799b      	ldrb	r3, [r3, #6]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	f002 fbd4 	bl	8009d84 <USB_EPStartXfer>

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	f003 020f 	and.w	r2, r3, #15
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007608:	681b      	ldr	r3, [r3, #0]
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	460b      	mov	r3, r1
 8007624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	f003 020f 	and.w	r2, r3, #15
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	3310      	adds	r3, #16
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	3304      	adds	r3, #4
 800763c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2201      	movs	r2, #1
 8007654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	b2da      	uxtb	r2, r3
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	799b      	ldrb	r3, [r3, #6]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d102      	bne.n	8007670 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	799b      	ldrb	r3, [r3, #6]
 8007678:	461a      	mov	r2, r3
 800767a:	6979      	ldr	r1, [r7, #20]
 800767c:	f002 fb82 	bl	8009d84 <USB_EPStartXfer>

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7912      	ldrb	r2, [r2, #4]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d901      	bls.n	80076a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e04f      	b.n	8007748 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da0f      	bge.n	80076d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	3310      	adds	r3, #16
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	3304      	adds	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	705a      	strb	r2, [r3, #1]
 80076ce:	e00d      	b.n	80076ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	3304      	adds	r3, #4
 80076e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_PCD_EP_SetStall+0x82>
 8007708:	2302      	movs	r3, #2
 800770a:	e01d      	b.n	8007748 <HAL_PCD_EP_SetStall+0xbe>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	4618      	mov	r0, r3
 800771c:	f002 ff10 	bl	800a540 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7999      	ldrb	r1, [r3, #6]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007738:	461a      	mov	r2, r3
 800773a:	f003 f901 	bl	800a940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	7912      	ldrb	r2, [r2, #4]
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e042      	b.n	80077f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800776e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0f      	bge.n	8007796 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	3310      	adds	r3, #16
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	705a      	strb	r2, [r3, #1]
 8007794:	e00f      	b.n	80077b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	f003 020f 	and.w	r2, r3, #15
 800779c:	4613      	mov	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_PCD_EP_ClrStall+0x86>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e00e      	b.n	80077f4 <HAL_PCD_EP_ClrStall+0xa4>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f002 ff19 	bl	800a61c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da0c      	bge.n	800782a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	3310      	adds	r3, #16
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	3304      	adds	r3, #4
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e00c      	b.n	8007844 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	3304      	adds	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	f002 fd38 	bl	800a2c0 <USB_EPStopXfer>
 8007850:	4603      	mov	r3, r0
 8007852:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007854:	7afb      	ldrb	r3, [r7, #11]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b08a      	sub	sp, #40	@ 0x28
 8007862:	af02      	add	r7, sp, #8
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	3310      	adds	r3, #16
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	3304      	adds	r3, #4
 8007884:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	429a      	cmp	r2, r3
 8007890:	d901      	bls.n	8007896 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e06b      	b.n	800796e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d902      	bls.n	80078b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3303      	adds	r3, #3
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078ba:	e02a      	b.n	8007912 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d902      	bls.n	80078d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	3303      	adds	r3, #3
 80078dc:	089b      	lsrs	r3, r3, #2
 80078de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68d9      	ldr	r1, [r3, #12]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	4603      	mov	r3, r0
 80078f4:	6978      	ldr	r0, [r7, #20]
 80078f6:	f002 fd8d 	bl	800a414 <USB_WritePacket>

    ep->xfer_buff  += len;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	695a      	ldr	r2, [r3, #20]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	429a      	cmp	r2, r3
 8007926:	d809      	bhi.n	800793c <PCD_WriteEmptyTxFifo+0xde>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	695a      	ldr	r2, [r3, #20]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007930:	429a      	cmp	r2, r3
 8007932:	d203      	bcs.n	800793c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1bf      	bne.n	80078bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	429a      	cmp	r2, r3
 8007946:	d811      	bhi.n	800796c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	2201      	movs	r2, #1
 8007950:	fa02 f303 	lsl.w	r3, r2, r3
 8007954:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	43db      	mvns	r3, r3
 8007962:	6939      	ldr	r1, [r7, #16]
 8007964:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007968:	4013      	ands	r3, r2
 800796a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	333c      	adds	r3, #60	@ 0x3c
 8007990:	3304      	adds	r3, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	799b      	ldrb	r3, [r3, #6]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d17b      	bne.n	8007aa6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d015      	beq.n	80079e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4a61      	ldr	r2, [pc, #388]	@ (8007b40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	f240 80b9 	bls.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80b3 	beq.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079da:	461a      	mov	r2, r3
 80079dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e0:	6093      	str	r3, [r2, #8]
 80079e2:	e0a7      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fa:	461a      	mov	r2, r3
 80079fc:	2320      	movs	r3, #32
 80079fe:	6093      	str	r3, [r2, #8]
 8007a00:	e098      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8093 	bne.w	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4a4b      	ldr	r2, [pc, #300]	@ (8007b40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d90f      	bls.n	8007a36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a32:	6093      	str	r3, [r2, #8]
 8007a34:	e07e      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	3304      	adds	r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	0159      	lsls	r1, r3, #5
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d114      	bne.n	8007a98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a80:	461a      	mov	r2, r3
 8007a82:	2101      	movs	r1, #1
 8007a84:	f002 ff5c 	bl	800a940 <USB_EP0_OutStart>
 8007a88:	e006      	b.n	8007a98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	441a      	add	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f005 f9b6 	bl	800ce10 <HAL_PCD_DataOutStageCallback>
 8007aa4:	e046      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	@ (8007b44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d124      	bne.n	8007af8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aca:	6093      	str	r3, [r2, #8]
 8007acc:	e032      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f003 0320 	and.w	r3, r3, #32
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f005 f98d 	bl	800ce10 <HAL_PCD_DataOutStageCallback>
 8007af6:	e01d      	b.n	8007b34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d114      	bne.n	8007b28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d108      	bne.n	8007b28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b20:	461a      	mov	r2, r3
 8007b22:	2100      	movs	r1, #0
 8007b24:	f002 ff0c 	bl	800a940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f005 f96e 	bl	800ce10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	4f54300a 	.word	0x4f54300a
 8007b44:	4f54310a 	.word	0x4f54310a

08007b48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	333c      	adds	r3, #60	@ 0x3c
 8007b60:	3304      	adds	r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d90e      	bls.n	8007b9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	461a      	mov	r2, r3
 8007b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f005 f925 	bl	800cdec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d90c      	bls.n	8007bc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	799b      	ldrb	r3, [r3, #6]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d108      	bne.n	8007bc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	f002 febe 	bl	800a940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	4f54300a 	.word	0x4f54300a

08007bd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
 8007be0:	4613      	mov	r3, r2
 8007be2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d107      	bne.n	8007c02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007bf2:	883b      	ldrh	r3, [r7, #0]
 8007bf4:	0419      	lsls	r1, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c00:	e028      	b.n	8007c54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	0c1b      	lsrs	r3, r3, #16
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e00d      	b.n	8007c32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	3340      	adds	r3, #64	@ 0x40
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	4413      	add	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3ec      	bcc.n	8007c16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c3c:	883b      	ldrh	r3, [r7, #0]
 8007c3e:	0418      	lsls	r0, r3, #16
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	4302      	orrs	r2, r0
 8007c4c:	3340      	adds	r3, #64	@ 0x40
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e267      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d075      	beq.n	8007da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007cba:	4b88      	ldr	r3, [pc, #544]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d00c      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc6:	4b85      	ldr	r3, [pc, #532]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d112      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd2:	4b82      	ldr	r3, [pc, #520]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cde:	d10b      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d05b      	beq.n	8007da4 <HAL_RCC_OscConfig+0x108>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d157      	bne.n	8007da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e242      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d106      	bne.n	8007d10 <HAL_RCC_OscConfig+0x74>
 8007d02:	4b76      	ldr	r3, [pc, #472]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a75      	ldr	r2, [pc, #468]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e01d      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d18:	d10c      	bne.n	8007d34 <HAL_RCC_OscConfig+0x98>
 8007d1a:	4b70      	ldr	r3, [pc, #448]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4b6d      	ldr	r3, [pc, #436]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e00b      	b.n	8007d4c <HAL_RCC_OscConfig+0xb0>
 8007d34:	4b69      	ldr	r3, [pc, #420]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a68      	ldr	r2, [pc, #416]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	4b66      	ldr	r3, [pc, #408]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a65      	ldr	r2, [pc, #404]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d013      	beq.n	8007d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d54:	f7fc fe06 	bl	8004964 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d5c:	f7fc fe02 	bl	8004964 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b64      	cmp	r3, #100	@ 0x64
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e207      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <HAL_RCC_OscConfig+0xc0>
 8007d7a:	e014      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d7c:	f7fc fdf2 	bl	8004964 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d84:	f7fc fdee 	bl	8004964 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	@ 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e1f3      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d96:	4b51      	ldr	r3, [pc, #324]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <HAL_RCC_OscConfig+0xe8>
 8007da2:	e000      	b.n	8007da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d063      	beq.n	8007e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007db2:	4b4a      	ldr	r3, [pc, #296]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dbe:	4b47      	ldr	r3, [pc, #284]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d11c      	bne.n	8007e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dca:	4b44      	ldr	r3, [pc, #272]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d116      	bne.n	8007e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dd6:	4b41      	ldr	r3, [pc, #260]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <HAL_RCC_OscConfig+0x152>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d001      	beq.n	8007dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e1c7      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dee:	4b3b      	ldr	r3, [pc, #236]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4937      	ldr	r1, [pc, #220]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e02:	e03a      	b.n	8007e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d020      	beq.n	8007e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e0c:	4b34      	ldr	r3, [pc, #208]	@ (8007ee0 <HAL_RCC_OscConfig+0x244>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e12:	f7fc fda7 	bl	8004964 <HAL_GetTick>
 8007e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e1a:	f7fc fda3 	bl	8004964 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e1a8      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f0      	beq.n	8007e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e38:	4b28      	ldr	r3, [pc, #160]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	4925      	ldr	r1, [pc, #148]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]
 8007e4c:	e015      	b.n	8007e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ee0 <HAL_RCC_OscConfig+0x244>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fc fd86 	bl	8004964 <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e5c:	f7fc fd82 	bl	8004964 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e187      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f0      	bne.n	8007e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d036      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d016      	beq.n	8007ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e8e:	4b15      	ldr	r3, [pc, #84]	@ (8007ee4 <HAL_RCC_OscConfig+0x248>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e94:	f7fc fd66 	bl	8004964 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e9c:	f7fc fd62 	bl	8004964 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e167      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eae:	4b0b      	ldr	r3, [pc, #44]	@ (8007edc <HAL_RCC_OscConfig+0x240>)
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x200>
 8007eba:	e01b      	b.n	8007ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ebc:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <HAL_RCC_OscConfig+0x248>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec2:	f7fc fd4f 	bl	8004964 <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec8:	e00e      	b.n	8007ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eca:	f7fc fd4b 	bl	8004964 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d907      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e150      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	42470000 	.word	0x42470000
 8007ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee8:	4b88      	ldr	r3, [pc, #544]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1ea      	bne.n	8007eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8097 	beq.w	8008030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f06:	4b81      	ldr	r3, [pc, #516]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	4b7d      	ldr	r3, [pc, #500]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f22:	4b7a      	ldr	r3, [pc, #488]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f32:	4b77      	ldr	r3, [pc, #476]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d118      	bne.n	8007f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f3e:	4b74      	ldr	r3, [pc, #464]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a73      	ldr	r2, [pc, #460]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f4a:	f7fc fd0b 	bl	8004964 <HAL_GetTick>
 8007f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f52:	f7fc fd07 	bl	8004964 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e10c      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f64:	4b6a      	ldr	r3, [pc, #424]	@ (8008110 <HAL_RCC_OscConfig+0x474>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <HAL_RCC_OscConfig+0x2ea>
 8007f78:	4b64      	ldr	r3, [pc, #400]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7c:	4a63      	ldr	r2, [pc, #396]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f84:	e01c      	b.n	8007fc0 <HAL_RCC_OscConfig+0x324>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x30c>
 8007f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f92:	4a5e      	ldr	r2, [pc, #376]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f94:	f043 0304 	orr.w	r3, r3, #4
 8007f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa6:	e00b      	b.n	8007fc0 <HAL_RCC_OscConfig+0x324>
 8007fa8:	4b58      	ldr	r3, [pc, #352]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fac:	4a57      	ldr	r2, [pc, #348]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fae:	f023 0301 	bic.w	r3, r3, #1
 8007fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fb4:	4b55      	ldr	r3, [pc, #340]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb8:	4a54      	ldr	r2, [pc, #336]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fba:	f023 0304 	bic.w	r3, r3, #4
 8007fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d015      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc8:	f7fc fccc 	bl	8004964 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fce:	e00a      	b.n	8007fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fd0:	f7fc fcc8 	bl	8004964 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e0cb      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe6:	4b49      	ldr	r3, [pc, #292]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0ee      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x334>
 8007ff2:	e014      	b.n	800801e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff4:	f7fc fcb6 	bl	8004964 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ffa:	e00a      	b.n	8008012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffc:	f7fc fcb2 	bl	8004964 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e0b5      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008012:	4b3e      	ldr	r3, [pc, #248]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1ee      	bne.n	8007ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008024:	4b39      	ldr	r3, [pc, #228]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008028:	4a38      	ldr	r2, [pc, #224]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 800802a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a1 	beq.w	800817c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800803a:	4b34      	ldr	r3, [pc, #208]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 030c 	and.w	r3, r3, #12
 8008042:	2b08      	cmp	r3, #8
 8008044:	d05c      	beq.n	8008100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d141      	bne.n	80080d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804e:	4b31      	ldr	r3, [pc, #196]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008054:	f7fc fc86 	bl	8004964 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800805c:	f7fc fc82 	bl	8004964 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e087      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806e:	4b27      	ldr	r3, [pc, #156]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f0      	bne.n	800805c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69da      	ldr	r2, [r3, #28]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	019b      	lsls	r3, r3, #6
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	085b      	lsrs	r3, r3, #1
 8008092:	3b01      	subs	r3, #1
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	491b      	ldr	r1, [pc, #108]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080aa:	f7fc fc5b 	bl	8004964 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b2:	f7fc fc57 	bl	8004964 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e05c      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c4:	4b11      	ldr	r3, [pc, #68]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0f0      	beq.n	80080b2 <HAL_RCC_OscConfig+0x416>
 80080d0:	e054      	b.n	800817c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <HAL_RCC_OscConfig+0x478>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d8:	f7fc fc44 	bl	8004964 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080e0:	f7fc fc40 	bl	8004964 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e045      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	4b06      	ldr	r3, [pc, #24]	@ (800810c <HAL_RCC_OscConfig+0x470>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f0      	bne.n	80080e0 <HAL_RCC_OscConfig+0x444>
 80080fe:	e03d      	b.n	800817c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d107      	bne.n	8008118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e038      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
 800810c:	40023800 	.word	0x40023800
 8008110:	40007000 	.word	0x40007000
 8008114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008118:	4b1b      	ldr	r3, [pc, #108]	@ (8008188 <HAL_RCC_OscConfig+0x4ec>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d028      	beq.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008130:	429a      	cmp	r2, r3
 8008132:	d121      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800813e:	429a      	cmp	r2, r3
 8008140:	d11a      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008148:	4013      	ands	r3, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800814e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008150:	4293      	cmp	r3, r2
 8008152:	d111      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	3b01      	subs	r3, #1
 8008162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008164:	429a      	cmp	r2, r3
 8008166:	d107      	bne.n	8008178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40023800 	.word	0x40023800

0800818c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e0cc      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081a0:	4b68      	ldr	r3, [pc, #416]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d90c      	bls.n	80081c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ae:	4b65      	ldr	r3, [pc, #404]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b6:	4b63      	ldr	r3, [pc, #396]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0b8      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d020      	beq.n	8008216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081e0:	4b59      	ldr	r3, [pc, #356]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4a58      	ldr	r2, [pc, #352]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f8:	4b53      	ldr	r3, [pc, #332]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	4a52      	ldr	r2, [pc, #328]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008204:	4b50      	ldr	r3, [pc, #320]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	494d      	ldr	r1, [pc, #308]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	4313      	orrs	r3, r2
 8008214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d044      	beq.n	80082ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d107      	bne.n	800823a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800822a:	4b47      	ldr	r3, [pc, #284]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d119      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e07f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d003      	beq.n	800824a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008246:	2b03      	cmp	r3, #3
 8008248:	d107      	bne.n	800825a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800824a:	4b3f      	ldr	r3, [pc, #252]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e06f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825a:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e067      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800826a:	4b37      	ldr	r3, [pc, #220]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f023 0203 	bic.w	r2, r3, #3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	4934      	ldr	r1, [pc, #208]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800827c:	f7fc fb72 	bl	8004964 <HAL_GetTick>
 8008280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008282:	e00a      	b.n	800829a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008284:	f7fc fb6e 	bl	8004964 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008292:	4293      	cmp	r3, r2
 8008294:	d901      	bls.n	800829a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e04f      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829a:	4b2b      	ldr	r3, [pc, #172]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 020c 	and.w	r2, r3, #12
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d1eb      	bne.n	8008284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082ac:	4b25      	ldr	r3, [pc, #148]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d20c      	bcs.n	80082d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ba:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c2:	4b20      	ldr	r3, [pc, #128]	@ (8008344 <HAL_RCC_ClockConfig+0x1b8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e032      	b.n	800833a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082e0:	4b19      	ldr	r3, [pc, #100]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4916      	ldr	r1, [pc, #88]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082fe:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	490e      	ldr	r1, [pc, #56]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	4313      	orrs	r3, r2
 8008310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008312:	f000 f821 	bl	8008358 <HAL_RCC_GetSysClockFreq>
 8008316:	4602      	mov	r2, r0
 8008318:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	490a      	ldr	r1, [pc, #40]	@ (800834c <HAL_RCC_ClockConfig+0x1c0>)
 8008324:	5ccb      	ldrb	r3, [r1, r3]
 8008326:	fa22 f303 	lsr.w	r3, r2, r3
 800832a:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <HAL_RCC_ClockConfig+0x1c4>)
 800832c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <HAL_RCC_ClockConfig+0x1c8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7fc fad2 	bl	80048dc <HAL_InitTick>

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40023c00 	.word	0x40023c00
 8008348:	40023800 	.word	0x40023800
 800834c:	08010a28 	.word	0x08010a28
 8008350:	20000020 	.word	0x20000020
 8008354:	20000034 	.word	0x20000034

08008358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800835c:	b094      	sub	sp, #80	@ 0x50
 800835e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008370:	4b79      	ldr	r3, [pc, #484]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 030c 	and.w	r3, r3, #12
 8008378:	2b08      	cmp	r3, #8
 800837a:	d00d      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0x40>
 800837c:	2b08      	cmp	r3, #8
 800837e:	f200 80e1 	bhi.w	8008544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_RCC_GetSysClockFreq+0x34>
 8008386:	2b04      	cmp	r3, #4
 8008388:	d003      	beq.n	8008392 <HAL_RCC_GetSysClockFreq+0x3a>
 800838a:	e0db      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800838c:	4b73      	ldr	r3, [pc, #460]	@ (800855c <HAL_RCC_GetSysClockFreq+0x204>)
 800838e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008390:	e0db      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008392:	4b73      	ldr	r3, [pc, #460]	@ (8008560 <HAL_RCC_GetSysClockFreq+0x208>)
 8008394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008396:	e0d8      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008398:	4b6f      	ldr	r3, [pc, #444]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d063      	beq.n	8008476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	099b      	lsrs	r3, r3, #6
 80083b4:	2200      	movs	r2, #0
 80083b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083c2:	2300      	movs	r3, #0
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	f04f 0000 	mov.w	r0, #0
 80083d2:	f04f 0100 	mov.w	r1, #0
 80083d6:	0159      	lsls	r1, r3, #5
 80083d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083dc:	0150      	lsls	r0, r2, #5
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4621      	mov	r1, r4
 80083e4:	1a51      	subs	r1, r2, r1
 80083e6:	6139      	str	r1, [r7, #16]
 80083e8:	4629      	mov	r1, r5
 80083ea:	eb63 0301 	sbc.w	r3, r3, r1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083fc:	4659      	mov	r1, fp
 80083fe:	018b      	lsls	r3, r1, #6
 8008400:	4651      	mov	r1, sl
 8008402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008406:	4651      	mov	r1, sl
 8008408:	018a      	lsls	r2, r1, #6
 800840a:	4651      	mov	r1, sl
 800840c:	ebb2 0801 	subs.w	r8, r2, r1
 8008410:	4659      	mov	r1, fp
 8008412:	eb63 0901 	sbc.w	r9, r3, r1
 8008416:	f04f 0200 	mov.w	r2, #0
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800842a:	4690      	mov	r8, r2
 800842c:	4699      	mov	r9, r3
 800842e:	4623      	mov	r3, r4
 8008430:	eb18 0303 	adds.w	r3, r8, r3
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	462b      	mov	r3, r5
 8008438:	eb49 0303 	adc.w	r3, r9, r3
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	f04f 0200 	mov.w	r2, #0
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800844a:	4629      	mov	r1, r5
 800844c:	024b      	lsls	r3, r1, #9
 800844e:	4621      	mov	r1, r4
 8008450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008454:	4621      	mov	r1, r4
 8008456:	024a      	lsls	r2, r1, #9
 8008458:	4610      	mov	r0, r2
 800845a:	4619      	mov	r1, r3
 800845c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800845e:	2200      	movs	r2, #0
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008468:	f7f8 fbee 	bl	8000c48 <__aeabi_uldivmod>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4613      	mov	r3, r2
 8008472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008474:	e058      	b.n	8008528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008476:	4b38      	ldr	r3, [pc, #224]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	099b      	lsrs	r3, r3, #6
 800847c:	2200      	movs	r2, #0
 800847e:	4618      	mov	r0, r3
 8008480:	4611      	mov	r1, r2
 8008482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008486:	623b      	str	r3, [r7, #32]
 8008488:	2300      	movs	r3, #0
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24
 800848c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f04f 0100 	mov.w	r1, #0
 800849c:	0159      	lsls	r1, r3, #5
 800849e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084a2:	0150      	lsls	r0, r2, #5
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4641      	mov	r1, r8
 80084aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80084ae:	4649      	mov	r1, r9
 80084b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084c8:	ebb2 040a 	subs.w	r4, r2, sl
 80084cc:	eb63 050b 	sbc.w	r5, r3, fp
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	00eb      	lsls	r3, r5, #3
 80084da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084de:	00e2      	lsls	r2, r4, #3
 80084e0:	4614      	mov	r4, r2
 80084e2:	461d      	mov	r5, r3
 80084e4:	4643      	mov	r3, r8
 80084e6:	18e3      	adds	r3, r4, r3
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	464b      	mov	r3, r9
 80084ec:	eb45 0303 	adc.w	r3, r5, r3
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084fe:	4629      	mov	r1, r5
 8008500:	028b      	lsls	r3, r1, #10
 8008502:	4621      	mov	r1, r4
 8008504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008508:	4621      	mov	r1, r4
 800850a:	028a      	lsls	r2, r1, #10
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008512:	2200      	movs	r2, #0
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	61fa      	str	r2, [r7, #28]
 8008518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800851c:	f7f8 fb94 	bl	8000c48 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4613      	mov	r3, r2
 8008526:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008528:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x200>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	3301      	adds	r3, #1
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800853a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008542:	e002      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008544:	4b05      	ldr	r3, [pc, #20]	@ (800855c <HAL_RCC_GetSysClockFreq+0x204>)
 8008546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800854a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800854c:	4618      	mov	r0, r3
 800854e:	3750      	adds	r7, #80	@ 0x50
 8008550:	46bd      	mov	sp, r7
 8008552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008556:	bf00      	nop
 8008558:	40023800 	.word	0x40023800
 800855c:	00f42400 	.word	0x00f42400
 8008560:	007a1200 	.word	0x007a1200

08008564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008568:	4b03      	ldr	r3, [pc, #12]	@ (8008578 <HAL_RCC_GetHCLKFreq+0x14>)
 800856a:	681b      	ldr	r3, [r3, #0]
}
 800856c:	4618      	mov	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000020 	.word	0x20000020

0800857c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e07b      	b.n	8008686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d108      	bne.n	80085a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800859e:	d009      	beq.n	80085b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	61da      	str	r2, [r3, #28]
 80085a6:	e005      	b.n	80085b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fb fe32 	bl	8004238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008638:	ea42 0103 	orr.w	r1, r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	f003 0104 	and.w	r1, r3, #4
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	f003 0210 	and.w	r2, r3, #16
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b088      	sub	sp, #32
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4613      	mov	r3, r2
 800869c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800869e:	f7fc f961 	bl	8004964 <HAL_GetTick>
 80086a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80086a4:	88fb      	ldrh	r3, [r7, #6]
 80086a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d001      	beq.n	80086b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e12a      	b.n	800890e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <HAL_SPI_Transmit+0x36>
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e122      	b.n	800890e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_SPI_Transmit+0x48>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e11b      	b.n	800890e <HAL_SPI_Transmit+0x280>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2203      	movs	r2, #3
 80086e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008724:	d10f      	bne.n	8008746 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008750:	2b40      	cmp	r3, #64	@ 0x40
 8008752:	d007      	beq.n	8008764 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800876c:	d152      	bne.n	8008814 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <HAL_SPI_Transmit+0xee>
 8008776:	8b7b      	ldrh	r3, [r7, #26]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d145      	bne.n	8008808 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	881a      	ldrh	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878c:	1c9a      	adds	r2, r3, #2
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087a0:	e032      	b.n	8008808 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d112      	bne.n	80087d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c0:	1c9a      	adds	r2, r3, #2
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80087d4:	e018      	b.n	8008808 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087d6:	f7fc f8c5 	bl	8004964 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d803      	bhi.n	80087ee <HAL_SPI_Transmit+0x160>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d102      	bne.n	80087f4 <HAL_SPI_Transmit+0x166>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d109      	bne.n	8008808 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e082      	b.n	800890e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800880c:	b29b      	uxth	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1c7      	bne.n	80087a2 <HAL_SPI_Transmit+0x114>
 8008812:	e053      	b.n	80088bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_SPI_Transmit+0x194>
 800881c:	8b7b      	ldrh	r3, [r7, #26]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d147      	bne.n	80088b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	7812      	ldrb	r2, [r2, #0]
 800882e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008848:	e033      	b.n	80088b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b02      	cmp	r3, #2
 8008856:	d113      	bne.n	8008880 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800887e:	e018      	b.n	80088b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008880:	f7fc f870 	bl	8004964 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d803      	bhi.n	8008898 <HAL_SPI_Transmit+0x20a>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d102      	bne.n	800889e <HAL_SPI_Transmit+0x210>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e02d      	b.n	800890e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1c6      	bne.n	800884a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fa59 	bl	8008d78 <SPI_EndRxTxTransaction>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2220      	movs	r2, #32
 80088d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800890c:	2300      	movs	r3, #0
  }
}
 800890e:	4618      	mov	r0, r3
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b08a      	sub	sp, #40	@ 0x28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008924:	2301      	movs	r3, #1
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008928:	f7fc f81c 	bl	8004964 <HAL_GetTick>
 800892c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008934:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800893c:	887b      	ldrh	r3, [r7, #2]
 800893e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008940:	7ffb      	ldrb	r3, [r7, #31]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d00c      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x4a>
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800894c:	d106      	bne.n	800895c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <HAL_SPI_TransmitReceive+0x46>
 8008956:	7ffb      	ldrb	r3, [r7, #31]
 8008958:	2b04      	cmp	r3, #4
 800895a:	d001      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800895c:	2302      	movs	r3, #2
 800895e:	e17f      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <HAL_SPI_TransmitReceive+0x5c>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_SPI_TransmitReceive+0x5c>
 800896c:	887b      	ldrh	r3, [r7, #2]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e174      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x6e>
 8008980:	2302      	movs	r3, #2
 8008982:	e16d      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b04      	cmp	r3, #4
 8008996:	d003      	beq.n	80089a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2205      	movs	r2, #5
 800899c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	887a      	ldrh	r2, [r7, #2]
 80089b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	887a      	ldrh	r2, [r7, #2]
 80089b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	887a      	ldrh	r2, [r7, #2]
 80089c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	887a      	ldrh	r2, [r7, #2]
 80089c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	d007      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089fc:	d17e      	bne.n	8008afc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0xf6>
 8008a06:	8afb      	ldrh	r3, [r7, #22]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d16c      	bne.n	8008ae6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a10:	881a      	ldrh	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	1c9a      	adds	r2, r3, #2
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a30:	e059      	b.n	8008ae6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d11b      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0x162>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d016      	beq.n	8008a78 <HAL_SPI_TransmitReceive+0x162>
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d113      	bne.n	8008a78 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d119      	bne.n	8008aba <HAL_SPI_TransmitReceive+0x1a4>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d014      	beq.n	8008aba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa2:	1c9a      	adds	r2, r3, #2
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008aba:	f7fb ff53 	bl	8004964 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d80d      	bhi.n	8008ae6 <HAL_SPI_TransmitReceive+0x1d0>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d009      	beq.n	8008ae6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e0bc      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1a0      	bne.n	8008a32 <HAL_SPI_TransmitReceive+0x11c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d19b      	bne.n	8008a32 <HAL_SPI_TransmitReceive+0x11c>
 8008afa:	e082      	b.n	8008c02 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <HAL_SPI_TransmitReceive+0x1f4>
 8008b04:	8afb      	ldrh	r3, [r7, #22]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d171      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	330c      	adds	r3, #12
 8008b14:	7812      	ldrb	r2, [r2, #0]
 8008b16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b30:	e05d      	b.n	8008bee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d11c      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x264>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d017      	beq.n	8008b7a <HAL_SPI_TransmitReceive+0x264>
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d114      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d119      	bne.n	8008bbc <HAL_SPI_TransmitReceive+0x2a6>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d014      	beq.n	8008bbc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bbc:	f7fb fed2 	bl	8004964 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d803      	bhi.n	8008bd4 <HAL_SPI_TransmitReceive+0x2be>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d102      	bne.n	8008bda <HAL_SPI_TransmitReceive+0x2c4>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e038      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d19c      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x21c>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d197      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f8b6 	bl	8008d78 <SPI_EndRxTxTransaction>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e01d      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
  }
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3728      	adds	r7, #40	@ 0x28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c78:	f7fb fe74 	bl	8004964 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	4413      	add	r3, r2
 8008c86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c88:	f7fb fe6c 	bl	8004964 <HAL_GetTick>
 8008c8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c8e:	4b39      	ldr	r3, [pc, #228]	@ (8008d74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	015b      	lsls	r3, r3, #5
 8008c94:	0d1b      	lsrs	r3, r3, #20
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	fb02 f303 	mul.w	r3, r2, r3
 8008c9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c9e:	e054      	b.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d050      	beq.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ca8:	f7fb fe5c 	bl	8004964 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d902      	bls.n	8008cbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d13d      	bne.n	8008d3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ccc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cd6:	d111      	bne.n	8008cfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ce0:	d004      	beq.n	8008cec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cea:	d107      	bne.n	8008cfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d04:	d10f      	bne.n	8008d26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e017      	b.n	8008d6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4013      	ands	r3, r2
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	bf0c      	ite	eq
 8008d5a:	2301      	moveq	r3, #1
 8008d5c:	2300      	movne	r3, #0
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d19b      	bne.n	8008ca0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20000020 	.word	0x20000020

08008d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff ff6a 	bl	8008c68 <SPI_WaitFlagStateUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e032      	b.n	8008e10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008daa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <SPI_EndRxTxTransaction+0xa0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a1b      	ldr	r2, [pc, #108]	@ (8008e1c <SPI_EndRxTxTransaction+0xa4>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	0d5b      	lsrs	r3, r3, #21
 8008db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dc8:	d112      	bne.n	8008df0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2180      	movs	r1, #128	@ 0x80
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff ff47 	bl	8008c68 <SPI_WaitFlagStateUntilTimeout>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d016      	beq.n	8008e0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e00f      	b.n	8008e10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e06:	2b80      	cmp	r3, #128	@ 0x80
 8008e08:	d0f2      	beq.n	8008df0 <SPI_EndRxTxTransaction+0x78>
 8008e0a:	e000      	b.n	8008e0e <SPI_EndRxTxTransaction+0x96>
        break;
 8008e0c:	bf00      	nop
  }

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000020 	.word	0x20000020
 8008e1c:	165e9f81 	.word	0x165e9f81

08008e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e041      	b.n	8008eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fb faa4 	bl	8004394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f000 f8f4 	bl	800904c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_TIM_ConfigClockSource+0x1c>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e0b4      	b.n	8009044 <HAL_TIM_ConfigClockSource+0x186>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ef8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f12:	d03e      	beq.n	8008f92 <HAL_TIM_ConfigClockSource+0xd4>
 8008f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f18:	f200 8087 	bhi.w	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f20:	f000 8086 	beq.w	8009030 <HAL_TIM_ConfigClockSource+0x172>
 8008f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f28:	d87f      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f2a:	2b70      	cmp	r3, #112	@ 0x70
 8008f2c:	d01a      	beq.n	8008f64 <HAL_TIM_ConfigClockSource+0xa6>
 8008f2e:	2b70      	cmp	r3, #112	@ 0x70
 8008f30:	d87b      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f32:	2b60      	cmp	r3, #96	@ 0x60
 8008f34:	d050      	beq.n	8008fd8 <HAL_TIM_ConfigClockSource+0x11a>
 8008f36:	2b60      	cmp	r3, #96	@ 0x60
 8008f38:	d877      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f3a:	2b50      	cmp	r3, #80	@ 0x50
 8008f3c:	d03c      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0xfa>
 8008f3e:	2b50      	cmp	r3, #80	@ 0x50
 8008f40:	d873      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f42:	2b40      	cmp	r3, #64	@ 0x40
 8008f44:	d058      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x13a>
 8008f46:	2b40      	cmp	r3, #64	@ 0x40
 8008f48:	d86f      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f4a:	2b30      	cmp	r3, #48	@ 0x30
 8008f4c:	d064      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0x15a>
 8008f4e:	2b30      	cmp	r3, #48	@ 0x30
 8008f50:	d86b      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d060      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0x15a>
 8008f56:	2b20      	cmp	r3, #32
 8008f58:	d867      	bhi.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d05c      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0x15a>
 8008f5e:	2b10      	cmp	r3, #16
 8008f60:	d05a      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0x15a>
 8008f62:	e062      	b.n	800902a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f74:	f000 f990 	bl	8009298 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	609a      	str	r2, [r3, #8]
      break;
 8008f90:	e04f      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fa2:	f000 f979 	bl	8009298 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fb4:	609a      	str	r2, [r3, #8]
      break;
 8008fb6:	e03c      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f000 f8ed 	bl	80091a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2150      	movs	r1, #80	@ 0x50
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f946 	bl	8009262 <TIM_ITRx_SetConfig>
      break;
 8008fd6:	e02c      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f000 f90c 	bl	8009202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2160      	movs	r1, #96	@ 0x60
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f936 	bl	8009262 <TIM_ITRx_SetConfig>
      break;
 8008ff6:	e01c      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009004:	461a      	mov	r2, r3
 8009006:	f000 f8cd 	bl	80091a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2140      	movs	r1, #64	@ 0x40
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f926 	bl	8009262 <TIM_ITRx_SetConfig>
      break;
 8009016:	e00c      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f000 f91d 	bl	8009262 <TIM_ITRx_SetConfig>
      break;
 8009028:	e003      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
      break;
 800902e:	e000      	b.n	8009032 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009030:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a46      	ldr	r2, [pc, #280]	@ (8009178 <TIM_Base_SetConfig+0x12c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d013      	beq.n	800908c <TIM_Base_SetConfig+0x40>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906a:	d00f      	beq.n	800908c <TIM_Base_SetConfig+0x40>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a43      	ldr	r2, [pc, #268]	@ (800917c <TIM_Base_SetConfig+0x130>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00b      	beq.n	800908c <TIM_Base_SetConfig+0x40>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a42      	ldr	r2, [pc, #264]	@ (8009180 <TIM_Base_SetConfig+0x134>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d007      	beq.n	800908c <TIM_Base_SetConfig+0x40>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a41      	ldr	r2, [pc, #260]	@ (8009184 <TIM_Base_SetConfig+0x138>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_Base_SetConfig+0x40>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a40      	ldr	r2, [pc, #256]	@ (8009188 <TIM_Base_SetConfig+0x13c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d108      	bne.n	800909e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a35      	ldr	r2, [pc, #212]	@ (8009178 <TIM_Base_SetConfig+0x12c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d02b      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ac:	d027      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a32      	ldr	r2, [pc, #200]	@ (800917c <TIM_Base_SetConfig+0x130>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d023      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a31      	ldr	r2, [pc, #196]	@ (8009180 <TIM_Base_SetConfig+0x134>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d01f      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a30      	ldr	r2, [pc, #192]	@ (8009184 <TIM_Base_SetConfig+0x138>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d01b      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2f      	ldr	r2, [pc, #188]	@ (8009188 <TIM_Base_SetConfig+0x13c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d017      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2e      	ldr	r2, [pc, #184]	@ (800918c <TIM_Base_SetConfig+0x140>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d013      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009190 <TIM_Base_SetConfig+0x144>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00f      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2c      	ldr	r2, [pc, #176]	@ (8009194 <TIM_Base_SetConfig+0x148>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00b      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a2b      	ldr	r2, [pc, #172]	@ (8009198 <TIM_Base_SetConfig+0x14c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d007      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a2a      	ldr	r2, [pc, #168]	@ (800919c <TIM_Base_SetConfig+0x150>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d003      	beq.n	80090fe <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a29      	ldr	r2, [pc, #164]	@ (80091a0 <TIM_Base_SetConfig+0x154>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d108      	bne.n	8009110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a10      	ldr	r2, [pc, #64]	@ (8009178 <TIM_Base_SetConfig+0x12c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d003      	beq.n	8009144 <TIM_Base_SetConfig+0xf8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a12      	ldr	r2, [pc, #72]	@ (8009188 <TIM_Base_SetConfig+0x13c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d103      	bne.n	800914c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b01      	cmp	r3, #1
 800915c:	d105      	bne.n	800916a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f023 0201 	bic.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	611a      	str	r2, [r3, #16]
  }
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40000c00 	.word	0x40000c00
 8009188:	40010400 	.word	0x40010400
 800918c:	40014000 	.word	0x40014000
 8009190:	40014400 	.word	0x40014400
 8009194:	40014800 	.word	0x40014800
 8009198:	40001800 	.word	0x40001800
 800919c:	40001c00 	.word	0x40001c00
 80091a0:	40002000 	.word	0x40002000

080091a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	f023 0201 	bic.w	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f023 030a 	bic.w	r3, r3, #10
 80091e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009202:	b480      	push	{r7}
 8009204:	b087      	sub	sp, #28
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	f023 0210 	bic.w	r2, r3, #16
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800922c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	031b      	lsls	r3, r3, #12
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800923e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	621a      	str	r2, [r3, #32]
}
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4313      	orrs	r3, r2
 8009280:	f043 0307 	orr.w	r3, r3, #7
 8009284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	609a      	str	r2, [r3, #8]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	021a      	lsls	r2, r3, #8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4313      	orrs	r3, r2
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	609a      	str	r2, [r3, #8]
}
 80092cc:	bf00      	nop
 80092ce:	371c      	adds	r7, #28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e05a      	b.n	80093a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a21      	ldr	r2, [pc, #132]	@ (80093b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d022      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933c:	d01d      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a1d      	ldr	r2, [pc, #116]	@ (80093b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d018      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1b      	ldr	r2, [pc, #108]	@ (80093bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d013      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a1a      	ldr	r2, [pc, #104]	@ (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00e      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a18      	ldr	r2, [pc, #96]	@ (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d009      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a17      	ldr	r2, [pc, #92]	@ (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d004      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a15      	ldr	r2, [pc, #84]	@ (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d10c      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	4313      	orrs	r3, r2
 800938a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40000400 	.word	0x40000400
 80093bc:	40000800 	.word	0x40000800
 80093c0:	40000c00 	.word	0x40000c00
 80093c4:	40010400 	.word	0x40010400
 80093c8:	40014000 	.word	0x40014000
 80093cc:	40001800 	.word	0x40001800

080093d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d0:	b084      	sub	sp, #16
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	f107 001c 	add.w	r0, r7, #28
 80093de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d123      	bne.n	8009432 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80093fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009416:	2b01      	cmp	r3, #1
 8009418:	d105      	bne.n	8009426 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fae8 	bl	800a9fc <USB_CoreReset>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
 8009430:	e01b      	b.n	800946a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f001 fadc 	bl	800a9fc <USB_CoreReset>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009448:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38
 800945c:	e005      	b.n	800946a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009462:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800946a:	7fbb      	ldrb	r3, [r7, #30]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10b      	bne.n	8009488 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f043 0206 	orr.w	r2, r3, #6
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009494:	b004      	add	sp, #16
 8009496:	4770      	bx	lr

08009498 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d165      	bne.n	8009578 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4a41      	ldr	r2, [pc, #260]	@ (80095b4 <USB_SetTurnaroundTime+0x11c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d906      	bls.n	80094c2 <USB_SetTurnaroundTime+0x2a>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4a40      	ldr	r2, [pc, #256]	@ (80095b8 <USB_SetTurnaroundTime+0x120>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d202      	bcs.n	80094c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094bc:	230f      	movs	r3, #15
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e062      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4a3c      	ldr	r2, [pc, #240]	@ (80095b8 <USB_SetTurnaroundTime+0x120>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d306      	bcc.n	80094d8 <USB_SetTurnaroundTime+0x40>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4a3b      	ldr	r2, [pc, #236]	@ (80095bc <USB_SetTurnaroundTime+0x124>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d202      	bcs.n	80094d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094d2:	230e      	movs	r3, #14
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	e057      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4a38      	ldr	r2, [pc, #224]	@ (80095bc <USB_SetTurnaroundTime+0x124>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d306      	bcc.n	80094ee <USB_SetTurnaroundTime+0x56>
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4a37      	ldr	r2, [pc, #220]	@ (80095c0 <USB_SetTurnaroundTime+0x128>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d202      	bcs.n	80094ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094e8:	230d      	movs	r3, #13
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e04c      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4a33      	ldr	r2, [pc, #204]	@ (80095c0 <USB_SetTurnaroundTime+0x128>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d306      	bcc.n	8009504 <USB_SetTurnaroundTime+0x6c>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4a32      	ldr	r2, [pc, #200]	@ (80095c4 <USB_SetTurnaroundTime+0x12c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d802      	bhi.n	8009504 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80094fe:	230c      	movs	r3, #12
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	e041      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4a2f      	ldr	r2, [pc, #188]	@ (80095c4 <USB_SetTurnaroundTime+0x12c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d906      	bls.n	800951a <USB_SetTurnaroundTime+0x82>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4a2e      	ldr	r2, [pc, #184]	@ (80095c8 <USB_SetTurnaroundTime+0x130>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d802      	bhi.n	800951a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009514:	230b      	movs	r3, #11
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e036      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <USB_SetTurnaroundTime+0x130>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d906      	bls.n	8009530 <USB_SetTurnaroundTime+0x98>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4a29      	ldr	r2, [pc, #164]	@ (80095cc <USB_SetTurnaroundTime+0x134>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d802      	bhi.n	8009530 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800952a:	230a      	movs	r3, #10
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	e02b      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	4a26      	ldr	r2, [pc, #152]	@ (80095cc <USB_SetTurnaroundTime+0x134>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d906      	bls.n	8009546 <USB_SetTurnaroundTime+0xae>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4a25      	ldr	r2, [pc, #148]	@ (80095d0 <USB_SetTurnaroundTime+0x138>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d202      	bcs.n	8009546 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009540:	2309      	movs	r3, #9
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	e020      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4a21      	ldr	r2, [pc, #132]	@ (80095d0 <USB_SetTurnaroundTime+0x138>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d306      	bcc.n	800955c <USB_SetTurnaroundTime+0xc4>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4a20      	ldr	r2, [pc, #128]	@ (80095d4 <USB_SetTurnaroundTime+0x13c>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d802      	bhi.n	800955c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009556:	2308      	movs	r3, #8
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e015      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4a1d      	ldr	r2, [pc, #116]	@ (80095d4 <USB_SetTurnaroundTime+0x13c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d906      	bls.n	8009572 <USB_SetTurnaroundTime+0xda>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4a1c      	ldr	r2, [pc, #112]	@ (80095d8 <USB_SetTurnaroundTime+0x140>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d202      	bcs.n	8009572 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800956c:	2307      	movs	r3, #7
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e00a      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009572:	2306      	movs	r3, #6
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e007      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800957e:	2309      	movs	r3, #9
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e001      	b.n	8009588 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009584:	2309      	movs	r3, #9
 8009586:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	00d8acbf 	.word	0x00d8acbf
 80095b8:	00e4e1c0 	.word	0x00e4e1c0
 80095bc:	00f42400 	.word	0x00f42400
 80095c0:	01067380 	.word	0x01067380
 80095c4:	011a499f 	.word	0x011a499f
 80095c8:	01312cff 	.word	0x01312cff
 80095cc:	014ca43f 	.word	0x014ca43f
 80095d0:	016e3600 	.word	0x016e3600
 80095d4:	01a6ab1f 	.word	0x01a6ab1f
 80095d8:	01e84800 	.word	0x01e84800

080095dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f043 0201 	orr.w	r2, r3, #1
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f023 0201 	bic.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d115      	bne.n	800966e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800964e:	200a      	movs	r0, #10
 8009650:	f7fb f994 	bl	800497c <HAL_Delay>
      ms += 10U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	330a      	adds	r3, #10
 8009658:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f93f 	bl	800a8de <USB_GetMode>
 8009660:	4603      	mov	r3, r0
 8009662:	2b01      	cmp	r3, #1
 8009664:	d01e      	beq.n	80096a4 <USB_SetCurrentMode+0x84>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2bc7      	cmp	r3, #199	@ 0xc7
 800966a:	d9f0      	bls.n	800964e <USB_SetCurrentMode+0x2e>
 800966c:	e01a      	b.n	80096a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d115      	bne.n	80096a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009680:	200a      	movs	r0, #10
 8009682:	f7fb f97b 	bl	800497c <HAL_Delay>
      ms += 10U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	330a      	adds	r3, #10
 800968a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 f926 	bl	800a8de <USB_GetMode>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <USB_SetCurrentMode+0x84>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2bc7      	cmp	r3, #199	@ 0xc7
 800969c:	d9f0      	bls.n	8009680 <USB_SetCurrentMode+0x60>
 800969e:	e001      	b.n	80096a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e005      	b.n	80096b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80096a8:	d101      	bne.n	80096ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096b8:	b084      	sub	sp, #16
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b086      	sub	sp, #24
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096d2:	2300      	movs	r3, #0
 80096d4:	613b      	str	r3, [r7, #16]
 80096d6:	e009      	b.n	80096ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3340      	adds	r3, #64	@ 0x40
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	2200      	movs	r2, #0
 80096e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b0e      	cmp	r3, #14
 80096f0:	d9f2      	bls.n	80096d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d11c      	bne.n	8009734 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009708:	f043 0302 	orr.w	r3, r3, #2
 800970c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009712:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	639a      	str	r2, [r3, #56]	@ 0x38
 8009732:	e00b      	b.n	800974c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009738:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009752:	461a      	mov	r2, r3
 8009754:	2300      	movs	r3, #0
 8009756:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009758:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800975c:	2b01      	cmp	r3, #1
 800975e:	d10d      	bne.n	800977c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009768:	2100      	movs	r1, #0
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f968 	bl	8009a40 <USB_SetDevSpeed>
 8009770:	e008      	b.n	8009784 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009772:	2101      	movs	r1, #1
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f963 	bl	8009a40 <USB_SetDevSpeed>
 800977a:	e003      	b.n	8009784 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800977c:	2103      	movs	r1, #3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f95e 	bl	8009a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009784:	2110      	movs	r1, #16
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f8fa 	bl	8009980 <USB_FlushTxFifo>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f924 	bl	80099e4 <USB_FlushRxFifo>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ac:	461a      	mov	r2, r3
 80097ae:	2300      	movs	r3, #0
 80097b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b8:	461a      	mov	r2, r3
 80097ba:	2300      	movs	r3, #0
 80097bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ca:	2300      	movs	r3, #0
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	e043      	b.n	8009858 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e6:	d118      	bne.n	800981a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097fa:	461a      	mov	r2, r3
 80097fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	e013      	b.n	800982c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009810:	461a      	mov	r2, r3
 8009812:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e008      	b.n	800982c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009826:	461a      	mov	r2, r3
 8009828:	2300      	movs	r3, #0
 800982a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009838:	461a      	mov	r2, r3
 800983a:	2300      	movs	r3, #0
 800983c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984a:	461a      	mov	r2, r3
 800984c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3301      	adds	r3, #1
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800985c:	461a      	mov	r2, r3
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	4293      	cmp	r3, r2
 8009862:	d3b5      	bcc.n	80097d0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	e043      	b.n	80098f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800987c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009880:	d118      	bne.n	80098b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009894:	461a      	mov	r2, r3
 8009896:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	e013      	b.n	80098c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098aa:	461a      	mov	r2, r3
 80098ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	e008      	b.n	80098c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c0:	461a      	mov	r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d2:	461a      	mov	r2, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e4:	461a      	mov	r2, r3
 80098e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	3301      	adds	r3, #1
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098f6:	461a      	mov	r2, r3
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d3b5      	bcc.n	800986a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800990c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009910:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800991e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	f043 0210 	orr.w	r2, r3, #16
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	4b10      	ldr	r3, [pc, #64]	@ (800997c <USB_DevInit+0x2c4>)
 800993a:	4313      	orrs	r3, r2
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009940:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	f043 0208 	orr.w	r2, r3, #8
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009954:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009958:	2b01      	cmp	r3, #1
 800995a:	d107      	bne.n	800996c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009964:	f043 0304 	orr.w	r3, r3, #4
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009978:	b004      	add	sp, #16
 800997a:	4770      	bx	lr
 800997c:	803c3800 	.word	0x803c3800

08009980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3301      	adds	r3, #1
 8009992:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800999a:	d901      	bls.n	80099a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e01b      	b.n	80099d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	daf2      	bge.n	800998e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	019b      	lsls	r3, r3, #6
 80099b0:	f043 0220 	orr.w	r2, r3, #32
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099c4:	d901      	bls.n	80099ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e006      	b.n	80099d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f003 0320 	and.w	r3, r3, #32
 80099d2:	2b20      	cmp	r3, #32
 80099d4:	d0f0      	beq.n	80099b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099fc:	d901      	bls.n	8009a02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e018      	b.n	8009a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	daf2      	bge.n	80099f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2210      	movs	r2, #16
 8009a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a20:	d901      	bls.n	8009a26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e006      	b.n	8009a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d0f0      	beq.n	8009a14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a60:	4313      	orrs	r3, r2
 8009a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b087      	sub	sp, #28
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f003 0306 	and.w	r3, r3, #6
 8009a8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]
 8009a96:	e00a      	b.n	8009aae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d002      	beq.n	8009aa4 <USB_GetDevSpeed+0x32>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d102      	bne.n	8009aaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	75fb      	strb	r3, [r7, #23]
 8009aa8:	e001      	b.n	8009aae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009aaa:	230f      	movs	r3, #15
 8009aac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d13a      	bne.n	8009b4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	2101      	movs	r1, #1
 8009aea:	fa01 f303 	lsl.w	r3, r1, r3
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	68f9      	ldr	r1, [r7, #12]
 8009af2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009af6:	4313      	orrs	r3, r2
 8009af8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d155      	bne.n	8009bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	059b      	lsls	r3, r3, #22
 8009b32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b34:	4313      	orrs	r3, r2
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	e036      	b.n	8009bbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	2101      	movs	r1, #1
 8009b60:	fa01 f303 	lsl.w	r3, r1, r3
 8009b64:	041b      	lsls	r3, r3, #16
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d11a      	bne.n	8009bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	791b      	ldrb	r3, [r3, #4]
 8009ba0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d161      	bne.n	8009cac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bfe:	d11f      	bne.n	8009c40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	0151      	lsls	r1, r2, #5
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	440a      	add	r2, r1
 8009c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	2101      	movs	r1, #1
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c60:	4013      	ands	r3, r2
 8009c62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c6a:	69da      	ldr	r2, [r3, #28]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	2101      	movs	r1, #1
 8009c76:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	43db      	mvns	r3, r3
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c84:	4013      	ands	r3, r2
 8009c86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	0159      	lsls	r1, r3, #5
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	440b      	add	r3, r1
 8009c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4b35      	ldr	r3, [pc, #212]	@ (8009d7c <USB_DeactivateEndpoint+0x1b0>)
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	600b      	str	r3, [r1, #0]
 8009caa:	e060      	b.n	8009d6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cc2:	d11f      	bne.n	8009d04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ce2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 030f 	and.w	r3, r3, #15
 8009d14:	2101      	movs	r1, #1
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	041b      	lsls	r3, r3, #16
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d24:	4013      	ands	r3, r2
 8009d26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2e:	69da      	ldr	r2, [r3, #28]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	f003 030f 	and.w	r3, r3, #15
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3e:	041b      	lsls	r3, r3, #16
 8009d40:	43db      	mvns	r3, r3
 8009d42:	68f9      	ldr	r1, [r7, #12]
 8009d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d48:	4013      	ands	r3, r2
 8009d4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	0159      	lsls	r1, r3, #5
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	440b      	add	r3, r1
 8009d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d66:	4619      	mov	r1, r3
 8009d68:	4b05      	ldr	r3, [pc, #20]	@ (8009d80 <USB_DeactivateEndpoint+0x1b4>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	ec337800 	.word	0xec337800
 8009d80:	eff37800 	.word	0xeff37800

08009d84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08a      	sub	sp, #40	@ 0x28
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	f040 817f 	bne.w	800a0a4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d132      	bne.n	8009e14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	69fa      	ldr	r2, [r7, #28]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dc8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dcc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	69ba      	ldr	r2, [r7, #24]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e0c:	0cdb      	lsrs	r3, r3, #19
 8009e0e:	04db      	lsls	r3, r3, #19
 8009e10:	6113      	str	r3, [r2, #16]
 8009e12:	e097      	b.n	8009f44 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	69fa      	ldr	r2, [r7, #28]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2e:	0cdb      	lsrs	r3, r3, #19
 8009e30:	04db      	lsls	r3, r3, #19
 8009e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e56:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d11a      	bne.n	8009e94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	691a      	ldr	r2, [r3, #16]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d903      	bls.n	8009e72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e90:	6113      	str	r3, [r2, #16]
 8009e92:	e044      	b.n	8009f1e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	1e5a      	subs	r2, r3, #1
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	8afb      	ldrh	r3, [r7, #22]
 8009eba:	04d9      	lsls	r1, r3, #19
 8009ebc:	4ba4      	ldr	r3, [pc, #656]	@ (800a150 <USB_EPStartXfer+0x3cc>)
 8009ebe:	400b      	ands	r3, r1
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	0148      	lsls	r0, r1, #5
 8009ec4:	69f9      	ldr	r1, [r7, #28]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	791b      	ldrb	r3, [r3, #4]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d122      	bne.n	8009f1e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ef6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f04:	691a      	ldr	r2, [r3, #16]
 8009f06:	8afb      	ldrh	r3, [r7, #22]
 8009f08:	075b      	lsls	r3, r3, #29
 8009f0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009f0e:	69b9      	ldr	r1, [r7, #24]
 8009f10:	0148      	lsls	r0, r1, #5
 8009f12:	69f9      	ldr	r1, [r7, #28]
 8009f14:	4401      	add	r1, r0
 8009f16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	015a      	lsls	r2, r3, #5
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	4413      	add	r3, r2
 8009f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f2a:	691a      	ldr	r2, [r3, #16]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f34:	69b9      	ldr	r1, [r7, #24]
 8009f36:	0148      	lsls	r0, r1, #5
 8009f38:	69f9      	ldr	r1, [r7, #28]
 8009f3a:	4401      	add	r1, r0
 8009f3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f40:	4313      	orrs	r3, r2
 8009f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d14b      	bne.n	8009fe2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	791b      	ldrb	r3, [r3, #4]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d128      	bne.n	8009fc0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d110      	bne.n	8009fa0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	0151      	lsls	r1, r2, #5
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	440a      	add	r2, r1
 8009f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	e00f      	b.n	8009fc0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fbe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69ba      	ldr	r2, [r7, #24]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	e166      	b.n	800a2b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ffc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a000:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	791b      	ldrb	r3, [r3, #4]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d015      	beq.n	800a036 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 814e 	beq.w	800a2b0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 030f 	and.w	r3, r3, #15
 800a024:	2101      	movs	r1, #1
 800a026:	fa01 f303 	lsl.w	r3, r1, r3
 800a02a:	69f9      	ldr	r1, [r7, #28]
 800a02c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a030:	4313      	orrs	r3, r2
 800a032:	634b      	str	r3, [r1, #52]	@ 0x34
 800a034:	e13c      	b.n	800a2b0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a042:	2b00      	cmp	r3, #0
 800a044:	d110      	bne.n	800a068 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	0151      	lsls	r1, r2, #5
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	440a      	add	r2, r1
 800a05c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a060:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	e00f      	b.n	800a088 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a086:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	68d9      	ldr	r1, [r3, #12]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	b298      	uxth	r0, r3
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	4603      	mov	r3, r0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f9b9 	bl	800a414 <USB_WritePacket>
 800a0a2:	e105      	b.n	800a2b0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0be:	0cdb      	lsrs	r3, r3, #19
 800a0c0:	04db      	lsls	r3, r3, #19
 800a0c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d132      	bne.n	800a154 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a11c:	69b9      	ldr	r1, [r7, #24]
 800a11e:	0148      	lsls	r0, r1, #5
 800a120:	69f9      	ldr	r1, [r7, #28]
 800a122:	4401      	add	r1, r0
 800a124:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a128:	4313      	orrs	r3, r2
 800a12a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	0151      	lsls	r1, r2, #5
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	440a      	add	r2, r1
 800a142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a146:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a14a:	6113      	str	r3, [r2, #16]
 800a14c:	e062      	b.n	800a214 <USB_EPStartXfer+0x490>
 800a14e:	bf00      	nop
 800a150:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d123      	bne.n	800a1a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a168:	691a      	ldr	r2, [r3, #16]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a172:	69b9      	ldr	r1, [r7, #24]
 800a174:	0148      	lsls	r0, r1, #5
 800a176:	69f9      	ldr	r1, [r7, #28]
 800a178:	4401      	add	r1, r0
 800a17a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a17e:	4313      	orrs	r3, r2
 800a180:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a19c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a0:	6113      	str	r3, [r2, #16]
 800a1a2:	e037      	b.n	800a214 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	8afa      	ldrh	r2, [r7, #22]
 800a1c0:	fb03 f202 	mul.w	r2, r3, r2
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d4:	691a      	ldr	r2, [r3, #16]
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	04d9      	lsls	r1, r3, #19
 800a1da:	4b38      	ldr	r3, [pc, #224]	@ (800a2bc <USB_EPStartXfer+0x538>)
 800a1dc:	400b      	ands	r3, r1
 800a1de:	69b9      	ldr	r1, [r7, #24]
 800a1e0:	0148      	lsls	r0, r1, #5
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	4401      	add	r1, r0
 800a1e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a204:	69b9      	ldr	r1, [r7, #24]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	69f9      	ldr	r1, [r7, #28]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10d      	bne.n	800a236 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68d9      	ldr	r1, [r3, #12]
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a232:	460a      	mov	r2, r1
 800a234:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	791b      	ldrb	r3, [r3, #4]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d128      	bne.n	800a290 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d110      	bne.n	800a270 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	0151      	lsls	r1, r2, #5
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	440a      	add	r2, r1
 800a264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	e00f      	b.n	800a290 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a28a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a28e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	1ff80000 	.word	0x1ff80000

0800a2c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d14a      	bne.n	800a374 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2f6:	f040 8086 	bne.w	800a406 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	7812      	ldrb	r2, [r2, #0]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a318:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a31c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	7812      	ldrb	r2, [r2, #0]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a33c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3301      	adds	r3, #1
 800a346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a34e:	4293      	cmp	r3, r2
 800a350:	d902      	bls.n	800a358 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
          break;
 800a356:	e056      	b.n	800a406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a36c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a370:	d0e7      	beq.n	800a342 <USB_EPStopXfer+0x82>
 800a372:	e048      	b.n	800a406 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a38c:	d13b      	bne.n	800a406 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	7812      	ldrb	r2, [r2, #0]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	7812      	ldrb	r2, [r2, #0]
 800a3c6:	0151      	lsls	r1, r2, #5
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d902      	bls.n	800a3ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a3ea:	e00c      	b.n	800a406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a404:	d0e7      	beq.n	800a3d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a414:	b480      	push	{r7}
 800a416:	b089      	sub	sp, #36	@ 0x24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4611      	mov	r1, r2
 800a420:	461a      	mov	r2, r3
 800a422:	460b      	mov	r3, r1
 800a424:	71fb      	strb	r3, [r7, #7]
 800a426:	4613      	mov	r3, r2
 800a428:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a436:	2b00      	cmp	r3, #0
 800a438:	d123      	bne.n	800a482 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a43a:	88bb      	ldrh	r3, [r7, #4]
 800a43c:	3303      	adds	r3, #3
 800a43e:	089b      	lsrs	r3, r3, #2
 800a440:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a442:	2300      	movs	r3, #0
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	e018      	b.n	800a47a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	031a      	lsls	r2, r3, #12
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a454:	461a      	mov	r2, r3
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	3301      	adds	r3, #1
 800a460:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	3301      	adds	r3, #1
 800a466:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	3301      	adds	r3, #1
 800a46c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3301      	adds	r3, #1
 800a472:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	3301      	adds	r3, #1
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d3e2      	bcc.n	800a448 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3724      	adds	r7, #36	@ 0x24
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a490:	b480      	push	{r7}
 800a492:	b08b      	sub	sp, #44	@ 0x2c
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4a6:	88fb      	ldrh	r3, [r7, #6]
 800a4a8:	089b      	lsrs	r3, r3, #2
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	623b      	str	r3, [r7, #32]
 800a4ba:	e014      	b.n	800a4e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	3301      	adds	r3, #1
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	623b      	str	r3, [r7, #32]
 800a4e6:	6a3a      	ldr	r2, [r7, #32]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d3e6      	bcc.n	800a4bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4ee:	8bfb      	ldrh	r3, [r7, #30]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01e      	beq.n	800a532 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4fe:	461a      	mov	r2, r3
 800a500:	f107 0310 	add.w	r3, r7, #16
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	b2da      	uxtb	r2, r3
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	701a      	strb	r2, [r3, #0]
      i++;
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	3301      	adds	r3, #1
 800a51e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	3301      	adds	r3, #1
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a526:	8bfb      	ldrh	r3, [r7, #30]
 800a528:	3b01      	subs	r3, #1
 800a52a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a52c:	8bfb      	ldrh	r3, [r7, #30]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1ea      	bne.n	800a508 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a534:	4618      	mov	r0, r3
 800a536:	372c      	adds	r7, #44	@ 0x2c
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d12c      	bne.n	800a5b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	db12      	blt.n	800a594 <USB_EPSetStall+0x54>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00f      	beq.n	800a594 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a58e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a592:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	0151      	lsls	r1, r2, #5
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	440a      	add	r2, r1
 800a5aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	e02b      	b.n	800a60e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	db12      	blt.n	800a5ee <USB_EPSetStall+0xae>
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00f      	beq.n	800a5ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a60c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d128      	bne.n	800a68a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	0151      	lsls	r1, r2, #5
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	440a      	add	r2, r1
 800a64e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a656:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	791b      	ldrb	r3, [r3, #4]
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d003      	beq.n	800a668 <USB_EPClearStall+0x4c>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	791b      	ldrb	r3, [r3, #4]
 800a664:	2b02      	cmp	r3, #2
 800a666:	d138      	bne.n	800a6da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	e027      	b.n	800a6da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d003      	beq.n	800a6ba <USB_EPClearStall+0x9e>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	791b      	ldrb	r3, [r3, #4]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d10f      	bne.n	800a6da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	0151      	lsls	r1, r2, #5
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	440a      	add	r2, r1
 800a6d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a706:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a70a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a71c:	68f9      	ldr	r1, [r7, #12]
 800a71e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a722:	4313      	orrs	r3, r2
 800a724:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a762:	f023 0302 	bic.w	r3, r3, #2
 800a766:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a790:	f023 0303 	bic.w	r3, r3, #3
 800a794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	4013      	ands	r3, r2
 800a800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	0c1b      	lsrs	r3, r3, #16
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	4013      	ands	r3, r2
 800a834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	b29b      	uxth	r3, r3
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	460b      	mov	r3, r1
 800a850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	4013      	ands	r3, r2
 800a872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a874:	68bb      	ldr	r3, [r7, #8]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a882:	b480      	push	{r7}
 800a884:	b087      	sub	sp, #28
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b2:	01db      	lsls	r3, r3, #7
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a914:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a918:	f023 0307 	bic.w	r3, r3, #7
 800a91c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a92c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	460b      	mov	r3, r1
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	333c      	adds	r3, #60	@ 0x3c
 800a956:	3304      	adds	r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	4a26      	ldr	r2, [pc, #152]	@ (800a9f8 <USB_EP0_OutStart+0xb8>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d90a      	bls.n	800a97a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a974:	d101      	bne.n	800a97a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	e037      	b.n	800a9ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a980:	461a      	mov	r2, r3
 800a982:	2300      	movs	r3, #0
 800a984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a994:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a8:	f043 0318 	orr.w	r3, r3, #24
 800a9ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a9c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9c2:	7afb      	ldrb	r3, [r7, #11]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d10f      	bne.n	800a9e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a9e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	4f54300a 	.word	0x4f54300a

0800a9fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa14:	d901      	bls.n	800aa1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e01b      	b.n	800aa52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	daf2      	bge.n	800aa08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f043 0201 	orr.w	r2, r3, #1
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3301      	adds	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa3e:	d901      	bls.n	800aa44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e006      	b.n	800aa52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d0f0      	beq.n	800aa32 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa6c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aa70:	f002 fc38 	bl	800d2e4 <USBD_static_malloc>
 800aa74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	32b0      	adds	r2, #176	@ 0xb0
 800aa86:	2100      	movs	r1, #0
 800aa88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e0d4      	b.n	800ac3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa90:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa94:	2100      	movs	r1, #0
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f003 fb86 	bl	800e1a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	32b0      	adds	r2, #176	@ 0xb0
 800aaa6:	68f9      	ldr	r1, [r7, #12]
 800aaa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	32b0      	adds	r2, #176	@ 0xb0
 800aab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	7c1b      	ldrb	r3, [r3, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d138      	bne.n	800ab3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aac8:	4b5e      	ldr	r3, [pc, #376]	@ (800ac44 <USBD_CDC_Init+0x1e4>)
 800aaca:	7819      	ldrb	r1, [r3, #0]
 800aacc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aad0:	2202      	movs	r2, #2
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f002 fae3 	bl	800d09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aad8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac44 <USBD_CDC_Init+0x1e4>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 020f 	and.w	r2, r3, #15
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	3324      	adds	r3, #36	@ 0x24
 800aaee:	2201      	movs	r2, #1
 800aaf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aaf2:	4b55      	ldr	r3, [pc, #340]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800aaf4:	7819      	ldrb	r1, [r3, #0]
 800aaf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aafa:	2202      	movs	r2, #2
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f002 face 	bl	800d09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab02:	4b51      	ldr	r3, [pc, #324]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 020f 	and.w	r2, r3, #15
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	440b      	add	r3, r1
 800ab16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab1e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac4c <USBD_CDC_Init+0x1ec>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f003 020f 	and.w	r2, r3, #15
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	440b      	add	r3, r1
 800ab32:	3326      	adds	r3, #38	@ 0x26
 800ab34:	2210      	movs	r2, #16
 800ab36:	801a      	strh	r2, [r3, #0]
 800ab38:	e035      	b.n	800aba6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab3a:	4b42      	ldr	r3, [pc, #264]	@ (800ac44 <USBD_CDC_Init+0x1e4>)
 800ab3c:	7819      	ldrb	r1, [r3, #0]
 800ab3e:	2340      	movs	r3, #64	@ 0x40
 800ab40:	2202      	movs	r2, #2
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f002 faab 	bl	800d09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab48:	4b3e      	ldr	r3, [pc, #248]	@ (800ac44 <USBD_CDC_Init+0x1e4>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	f003 020f 	and.w	r2, r3, #15
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	3324      	adds	r3, #36	@ 0x24
 800ab5e:	2201      	movs	r2, #1
 800ab60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab62:	4b39      	ldr	r3, [pc, #228]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800ab64:	7819      	ldrb	r1, [r3, #0]
 800ab66:	2340      	movs	r3, #64	@ 0x40
 800ab68:	2202      	movs	r2, #2
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f002 fa97 	bl	800d09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab70:	4b35      	ldr	r3, [pc, #212]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f003 020f 	and.w	r2, r3, #15
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab88:	2201      	movs	r2, #1
 800ab8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac4c <USBD_CDC_Init+0x1ec>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 020f 	and.w	r2, r3, #15
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	440b      	add	r3, r1
 800aba0:	3326      	adds	r3, #38	@ 0x26
 800aba2:	2210      	movs	r2, #16
 800aba4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aba6:	4b29      	ldr	r3, [pc, #164]	@ (800ac4c <USBD_CDC_Init+0x1ec>)
 800aba8:	7819      	ldrb	r1, [r3, #0]
 800abaa:	2308      	movs	r3, #8
 800abac:	2203      	movs	r2, #3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f002 fa75 	bl	800d09e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800abb4:	4b25      	ldr	r3, [pc, #148]	@ (800ac4c <USBD_CDC_Init+0x1ec>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 020f 	and.w	r2, r3, #15
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4613      	mov	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	3324      	adds	r3, #36	@ 0x24
 800abca:	2201      	movs	r2, #1
 800abcc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	33b0      	adds	r3, #176	@ 0xb0
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac04:	2302      	movs	r3, #2
 800ac06:	e018      	b.n	800ac3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	7c1b      	ldrb	r3, [r3, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac10:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800ac12:	7819      	ldrb	r1, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f002 fb2c 	bl	800d27c <USBD_LL_PrepareReceive>
 800ac24:	e008      	b.n	800ac38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac26:	4b08      	ldr	r3, [pc, #32]	@ (800ac48 <USBD_CDC_Init+0x1e8>)
 800ac28:	7819      	ldrb	r1, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac30:	2340      	movs	r3, #64	@ 0x40
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f002 fb22 	bl	800d27c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	200000c3 	.word	0x200000c3
 800ac48:	200000c4 	.word	0x200000c4
 800ac4c:	200000c5 	.word	0x200000c5

0800ac50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac5c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad48 <USBD_CDC_DeInit+0xf8>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f002 fa41 	bl	800d0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac68:	4b37      	ldr	r3, [pc, #220]	@ (800ad48 <USBD_CDC_DeInit+0xf8>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3324      	adds	r3, #36	@ 0x24
 800ac7e:	2200      	movs	r2, #0
 800ac80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac82:	4b32      	ldr	r3, [pc, #200]	@ (800ad4c <USBD_CDC_DeInit+0xfc>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f002 fa2e 	bl	800d0ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad4c <USBD_CDC_DeInit+0xfc>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	f003 020f 	and.w	r2, r3, #15
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aca6:	2200      	movs	r2, #0
 800aca8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800acaa:	4b29      	ldr	r3, [pc, #164]	@ (800ad50 <USBD_CDC_DeInit+0x100>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f002 fa1a 	bl	800d0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800acb6:	4b26      	ldr	r3, [pc, #152]	@ (800ad50 <USBD_CDC_DeInit+0x100>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f003 020f 	and.w	r2, r3, #15
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	3324      	adds	r3, #36	@ 0x24
 800accc:	2200      	movs	r2, #0
 800acce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800acd0:	4b1f      	ldr	r3, [pc, #124]	@ (800ad50 <USBD_CDC_DeInit+0x100>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 020f 	and.w	r2, r3, #15
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	3326      	adds	r3, #38	@ 0x26
 800ace6:	2200      	movs	r2, #0
 800ace8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	32b0      	adds	r2, #176	@ 0xb0
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01f      	beq.n	800ad3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	33b0      	adds	r3, #176	@ 0xb0
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	32b0      	adds	r2, #176	@ 0xb0
 800ad1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f002 faee 	bl	800d300 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	32b0      	adds	r2, #176	@ 0xb0
 800ad2e:	2100      	movs	r1, #0
 800ad30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	200000c3 	.word	0x200000c3
 800ad4c:	200000c4 	.word	0x200000c4
 800ad50:	200000c5 	.word	0x200000c5

0800ad54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	32b0      	adds	r2, #176	@ 0xb0
 800ad68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e0bf      	b.n	800af04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d050      	beq.n	800ae32 <USBD_CDC_Setup+0xde>
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	f040 80af 	bne.w	800aef4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	88db      	ldrh	r3, [r3, #6]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d03a      	beq.n	800ae14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b25b      	sxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da1b      	bge.n	800ade0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	33b0      	adds	r3, #176	@ 0xb0
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800adbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	88d2      	ldrh	r2, [r2, #6]
 800adc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	2b07      	cmp	r3, #7
 800adcc:	bf28      	it	cs
 800adce:	2307      	movcs	r3, #7
 800add0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	89fa      	ldrh	r2, [r7, #14]
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 fd53 	bl	800c884 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800adde:	e090      	b.n	800af02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	785a      	ldrb	r2, [r3, #1]
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b3f      	cmp	r3, #63	@ 0x3f
 800adf0:	d803      	bhi.n	800adfa <USBD_CDC_Setup+0xa6>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	88db      	ldrh	r3, [r3, #6]
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	e000      	b.n	800adfc <USBD_CDC_Setup+0xa8>
 800adfa:	2240      	movs	r2, #64	@ 0x40
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae02:	6939      	ldr	r1, [r7, #16]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 fd65 	bl	800c8dc <USBD_CtlPrepareRx>
      break;
 800ae12:	e076      	b.n	800af02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	33b0      	adds	r3, #176	@ 0xb0
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	7850      	ldrb	r0, [r2, #1]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	4798      	blx	r3
      break;
 800ae30:	e067      	b.n	800af02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b0b      	cmp	r3, #11
 800ae38:	d851      	bhi.n	800aede <USBD_CDC_Setup+0x18a>
 800ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <USBD_CDC_Setup+0xec>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae71 	.word	0x0800ae71
 800ae44:	0800aeed 	.word	0x0800aeed
 800ae48:	0800aedf 	.word	0x0800aedf
 800ae4c:	0800aedf 	.word	0x0800aedf
 800ae50:	0800aedf 	.word	0x0800aedf
 800ae54:	0800aedf 	.word	0x0800aedf
 800ae58:	0800aedf 	.word	0x0800aedf
 800ae5c:	0800aedf 	.word	0x0800aedf
 800ae60:	0800aedf 	.word	0x0800aedf
 800ae64:	0800aedf 	.word	0x0800aedf
 800ae68:	0800ae9b 	.word	0x0800ae9b
 800ae6c:	0800aec5 	.word	0x0800aec5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d107      	bne.n	800ae8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae7c:	f107 030a 	add.w	r3, r7, #10
 800ae80:	2202      	movs	r2, #2
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fcfd 	bl	800c884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae8a:	e032      	b.n	800aef2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 fc7b 	bl	800c78a <USBD_CtlError>
            ret = USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	75fb      	strb	r3, [r7, #23]
          break;
 800ae98:	e02b      	b.n	800aef2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d107      	bne.n	800aeb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aea6:	f107 030d 	add.w	r3, r7, #13
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 fce8 	bl	800c884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aeb4:	e01d      	b.n	800aef2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 fc66 	bl	800c78a <USBD_CtlError>
            ret = USBD_FAIL;
 800aebe:	2303      	movs	r3, #3
 800aec0:	75fb      	strb	r3, [r7, #23]
          break;
 800aec2:	e016      	b.n	800aef2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d00f      	beq.n	800aef0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 fc59 	bl	800c78a <USBD_CtlError>
            ret = USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aedc:	e008      	b.n	800aef0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 fc52 	bl	800c78a <USBD_CtlError>
          ret = USBD_FAIL;
 800aee6:	2303      	movs	r3, #3
 800aee8:	75fb      	strb	r3, [r7, #23]
          break;
 800aeea:	e002      	b.n	800aef2 <USBD_CDC_Setup+0x19e>
          break;
 800aeec:	bf00      	nop
 800aeee:	e008      	b.n	800af02 <USBD_CDC_Setup+0x1ae>
          break;
 800aef0:	bf00      	nop
      }
      break;
 800aef2:	e006      	b.n	800af02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fc47 	bl	800c78a <USBD_CtlError>
      ret = USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	75fb      	strb	r3, [r7, #23]
      break;
 800af00:	bf00      	nop
  }

  return (uint8_t)ret;
 800af02:	7dfb      	ldrb	r3, [r7, #23]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	32b0      	adds	r2, #176	@ 0xb0
 800af2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af32:	2303      	movs	r3, #3
 800af34:	e065      	b.n	800b002 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	32b0      	adds	r2, #176	@ 0xb0
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	f003 020f 	and.w	r2, r3, #15
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	440b      	add	r3, r1
 800af58:	3318      	adds	r3, #24
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d02f      	beq.n	800afc0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	f003 020f 	and.w	r2, r3, #15
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	4613      	mov	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4413      	add	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	440b      	add	r3, r1
 800af72:	3318      	adds	r3, #24
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	f003 010f 	and.w	r1, r3, #15
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	460b      	mov	r3, r1
 800af80:	00db      	lsls	r3, r3, #3
 800af82:	440b      	add	r3, r1
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4403      	add	r3, r0
 800af88:	331c      	adds	r3, #28
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800af90:	fb01 f303 	mul.w	r3, r1, r3
 800af94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af96:	2b00      	cmp	r3, #0
 800af98:	d112      	bne.n	800afc0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af9a:	78fb      	ldrb	r3, [r7, #3]
 800af9c:	f003 020f 	and.w	r2, r3, #15
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	4613      	mov	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	440b      	add	r3, r1
 800afac:	3318      	adds	r3, #24
 800afae:	2200      	movs	r2, #0
 800afb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afb2:	78f9      	ldrb	r1, [r7, #3]
 800afb4:	2300      	movs	r3, #0
 800afb6:	2200      	movs	r2, #0
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f002 f93e 	bl	800d23a <USBD_LL_Transmit>
 800afbe:	e01f      	b.n	800b000 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	33b0      	adds	r3, #176	@ 0xb0
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d010      	beq.n	800b000 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	33b0      	adds	r3, #176	@ 0xb0
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800affc:	78fa      	ldrb	r2, [r7, #3]
 800affe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	32b0      	adds	r2, #176	@ 0xb0
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	32b0      	adds	r2, #176	@ 0xb0
 800b030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e01a      	b.n	800b072 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f002 f93c 	bl	800d2be <USBD_LL_GetRxDataSize>
 800b046:	4602      	mov	r2, r0
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	33b0      	adds	r3, #176	@ 0xb0
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b06c:	4611      	mov	r1, r2
 800b06e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	32b0      	adds	r2, #176	@ 0xb0
 800b08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b090:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b098:	2303      	movs	r3, #3
 800b09a:	e024      	b.n	800b0e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	33b0      	adds	r3, #176	@ 0xb0
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d019      	beq.n	800b0e4 <USBD_CDC_EP0_RxReady+0x6a>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b0b6:	2bff      	cmp	r3, #255	@ 0xff
 800b0b8:	d014      	beq.n	800b0e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	33b0      	adds	r3, #176	@ 0xb0
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b0d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	22ff      	movs	r2, #255	@ 0xff
 800b0e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0f8:	2182      	movs	r1, #130	@ 0x82
 800b0fa:	4818      	ldr	r0, [pc, #96]	@ (800b15c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0fc:	f000 fd0f 	bl	800bb1e <USBD_GetEpDesc>
 800b100:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b102:	2101      	movs	r1, #1
 800b104:	4815      	ldr	r0, [pc, #84]	@ (800b15c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b106:	f000 fd0a 	bl	800bb1e <USBD_GetEpDesc>
 800b10a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b10c:	2181      	movs	r1, #129	@ 0x81
 800b10e:	4813      	ldr	r0, [pc, #76]	@ (800b15c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b110:	f000 fd05 	bl	800bb1e <USBD_GetEpDesc>
 800b114:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2210      	movs	r2, #16
 800b120:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b130:	711a      	strb	r2, [r3, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d006      	beq.n	800b14a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b144:	711a      	strb	r2, [r3, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2243      	movs	r2, #67	@ 0x43
 800b14e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b150:	4b02      	ldr	r3, [pc, #8]	@ (800b15c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b152:	4618      	mov	r0, r3
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20000080 	.word	0x20000080

0800b160 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b168:	2182      	movs	r1, #130	@ 0x82
 800b16a:	4818      	ldr	r0, [pc, #96]	@ (800b1cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b16c:	f000 fcd7 	bl	800bb1e <USBD_GetEpDesc>
 800b170:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b172:	2101      	movs	r1, #1
 800b174:	4815      	ldr	r0, [pc, #84]	@ (800b1cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b176:	f000 fcd2 	bl	800bb1e <USBD_GetEpDesc>
 800b17a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b17c:	2181      	movs	r1, #129	@ 0x81
 800b17e:	4813      	ldr	r0, [pc, #76]	@ (800b1cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b180:	f000 fccd 	bl	800bb1e <USBD_GetEpDesc>
 800b184:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	2210      	movs	r2, #16
 800b190:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d006      	beq.n	800b1a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2200      	movs	r2, #0
 800b19c:	711a      	strb	r2, [r3, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f042 0202 	orr.w	r2, r2, #2
 800b1a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d006      	beq.n	800b1ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	711a      	strb	r2, [r3, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f042 0202 	orr.w	r2, r2, #2
 800b1b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2243      	movs	r2, #67	@ 0x43
 800b1be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1c0:	4b02      	ldr	r3, [pc, #8]	@ (800b1cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20000080 	.word	0x20000080

0800b1d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1d8:	2182      	movs	r1, #130	@ 0x82
 800b1da:	4818      	ldr	r0, [pc, #96]	@ (800b23c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1dc:	f000 fc9f 	bl	800bb1e <USBD_GetEpDesc>
 800b1e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	4815      	ldr	r0, [pc, #84]	@ (800b23c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1e6:	f000 fc9a 	bl	800bb1e <USBD_GetEpDesc>
 800b1ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1ec:	2181      	movs	r1, #129	@ 0x81
 800b1ee:	4813      	ldr	r0, [pc, #76]	@ (800b23c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1f0:	f000 fc95 	bl	800bb1e <USBD_GetEpDesc>
 800b1f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2210      	movs	r2, #16
 800b200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d006      	beq.n	800b216 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b210:	711a      	strb	r2, [r3, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b224:	711a      	strb	r2, [r3, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2243      	movs	r2, #67	@ 0x43
 800b22e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b230:	4b02      	ldr	r3, [pc, #8]	@ (800b23c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000080 	.word	0x20000080

0800b240 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	220a      	movs	r2, #10
 800b24c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b24e:	4b03      	ldr	r3, [pc, #12]	@ (800b25c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	2000003c 	.word	0x2000003c

0800b260 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b270:	2303      	movs	r3, #3
 800b272:	e009      	b.n	800b288 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	33b0      	adds	r3, #176	@ 0xb0
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	32b0      	adds	r2, #176	@ 0xb0
 800b2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e008      	b.n	800b2cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	32b0      	adds	r2, #176	@ 0xb0
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e004      	b.n	800b306 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
	...

0800b314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	32b0      	adds	r2, #176	@ 0xb0
 800b326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	32b0      	adds	r2, #176	@ 0xb0
 800b336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b33e:	2303      	movs	r3, #3
 800b340:	e018      	b.n	800b374 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7c1b      	ldrb	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b34a:	4b0c      	ldr	r3, [pc, #48]	@ (800b37c <USBD_CDC_ReceivePacket+0x68>)
 800b34c:	7819      	ldrb	r1, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f001 ff8f 	bl	800d27c <USBD_LL_PrepareReceive>
 800b35e:	e008      	b.n	800b372 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b360:	4b06      	ldr	r3, [pc, #24]	@ (800b37c <USBD_CDC_ReceivePacket+0x68>)
 800b362:	7819      	ldrb	r1, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b36a:	2340      	movs	r3, #64	@ 0x40
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f001 ff85 	bl	800d27c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	200000c4 	.word	0x200000c4

0800b380 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	e01f      	b.n	800b3d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	79fa      	ldrb	r2, [r7, #7]
 800b3ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f001 fdff 	bl	800cfd0 <USBD_LL_Init>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e025      	b.n	800b444 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	32ae      	adds	r2, #174	@ 0xae
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00f      	beq.n	800b434 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	32ae      	adds	r2, #174	@ 0xae
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b424:	f107 020e 	add.w	r2, r7, #14
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	4602      	mov	r2, r0
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fe07 	bl	800d068 <USBD_LL_Start>
 800b45a:	4603      	mov	r3, r0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b46c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	460b      	mov	r3, r1
 800b484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b490:	2b00      	cmp	r3, #0
 800b492:	d009      	beq.n	800b4a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	78fa      	ldrb	r2, [r7, #3]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f001 f90c 	bl	800c716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b50c:	461a      	mov	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b51a:	f003 031f 	and.w	r3, r3, #31
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d01a      	beq.n	800b558 <USBD_LL_SetupStage+0x72>
 800b522:	2b02      	cmp	r3, #2
 800b524:	d822      	bhi.n	800b56c <USBD_LL_SetupStage+0x86>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <USBD_LL_SetupStage+0x4a>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d00a      	beq.n	800b544 <USBD_LL_SetupStage+0x5e>
 800b52e:	e01d      	b.n	800b56c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fb63 	bl	800bc04 <USBD_StdDevReq>
 800b53e:	4603      	mov	r3, r0
 800b540:	73fb      	strb	r3, [r7, #15]
      break;
 800b542:	e020      	b.n	800b586 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fbcb 	bl	800bce8 <USBD_StdItfReq>
 800b552:	4603      	mov	r3, r0
 800b554:	73fb      	strb	r3, [r7, #15]
      break;
 800b556:	e016      	b.n	800b586 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fc2d 	bl	800bdc0 <USBD_StdEPReq>
 800b566:	4603      	mov	r3, r0
 800b568:	73fb      	strb	r3, [r7, #15]
      break;
 800b56a:	e00c      	b.n	800b586 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b572:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b576:	b2db      	uxtb	r3, r3
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f001 fdd4 	bl	800d128 <USBD_LL_StallEP>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
      break;
 800b584:	bf00      	nop
  }

  return ret;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	460b      	mov	r3, r1
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d16e      	bne.n	800b686 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b5ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	f040 8098 	bne.w	800b6ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d913      	bls.n	800b5f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	1ad2      	subs	r2, r2, r3
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	bf28      	it	cs
 800b5e2:	4613      	movcs	r3, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f001 f994 	bl	800c916 <USBD_CtlContinueRx>
 800b5ee:	e07d      	b.n	800b6ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5f6:	f003 031f 	and.w	r3, r3, #31
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d014      	beq.n	800b628 <USBD_LL_DataOutStage+0x98>
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d81d      	bhi.n	800b63e <USBD_LL_DataOutStage+0xae>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <USBD_LL_DataOutStage+0x7c>
 800b606:	2b01      	cmp	r3, #1
 800b608:	d003      	beq.n	800b612 <USBD_LL_DataOutStage+0x82>
 800b60a:	e018      	b.n	800b63e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	75bb      	strb	r3, [r7, #22]
            break;
 800b610:	e018      	b.n	800b644 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	4619      	mov	r1, r3
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 fa64 	bl	800baea <USBD_CoreFindIF>
 800b622:	4603      	mov	r3, r0
 800b624:	75bb      	strb	r3, [r7, #22]
            break;
 800b626:	e00d      	b.n	800b644 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	4619      	mov	r1, r3
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fa66 	bl	800bb04 <USBD_CoreFindEP>
 800b638:	4603      	mov	r3, r0
 800b63a:	75bb      	strb	r3, [r7, #22]
            break;
 800b63c:	e002      	b.n	800b644 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	75bb      	strb	r3, [r7, #22]
            break;
 800b642:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b644:	7dbb      	ldrb	r3, [r7, #22]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d119      	bne.n	800b67e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b03      	cmp	r3, #3
 800b654:	d113      	bne.n	800b67e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b656:	7dba      	ldrb	r2, [r7, #22]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	32ae      	adds	r2, #174	@ 0xae
 800b65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b666:	7dba      	ldrb	r2, [r7, #22]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b66e:	7dba      	ldrb	r2, [r7, #22]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	32ae      	adds	r2, #174	@ 0xae
 800b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f001 f95a 	bl	800c938 <USBD_CtlSendStatus>
 800b684:	e032      	b.n	800b6ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	4619      	mov	r1, r3
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 fa37 	bl	800bb04 <USBD_CoreFindEP>
 800b696:	4603      	mov	r3, r0
 800b698:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b69a:	7dbb      	ldrb	r3, [r7, #22]
 800b69c:	2bff      	cmp	r3, #255	@ 0xff
 800b69e:	d025      	beq.n	800b6ec <USBD_LL_DataOutStage+0x15c>
 800b6a0:	7dbb      	ldrb	r3, [r7, #22]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d122      	bne.n	800b6ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d117      	bne.n	800b6e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6b2:	7dba      	ldrb	r2, [r7, #22]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	32ae      	adds	r2, #174	@ 0xae
 800b6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b6c2:	7dba      	ldrb	r2, [r7, #22]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b6ca:	7dba      	ldrb	r2, [r7, #22]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	32ae      	adds	r2, #174	@ 0xae
 800b6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	7afa      	ldrb	r2, [r7, #11]
 800b6d8:	4611      	mov	r1, r2
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	4798      	blx	r3
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	e000      	b.n	800b6ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	460b      	mov	r3, r1
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d16f      	bne.n	800b7ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3314      	adds	r3, #20
 800b70e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b716:	2b02      	cmp	r3, #2
 800b718:	d15a      	bne.n	800b7d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d914      	bls.n	800b750 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	689a      	ldr	r2, [r3, #8]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	461a      	mov	r2, r3
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f001 f8bc 	bl	800c8ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b742:	2300      	movs	r3, #0
 800b744:	2200      	movs	r2, #0
 800b746:	2100      	movs	r1, #0
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f001 fd97 	bl	800d27c <USBD_LL_PrepareReceive>
 800b74e:	e03f      	b.n	800b7d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d11c      	bne.n	800b796 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b764:	429a      	cmp	r2, r3
 800b766:	d316      	bcc.n	800b796 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b772:	429a      	cmp	r2, r3
 800b774:	d20f      	bcs.n	800b796 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b776:	2200      	movs	r2, #0
 800b778:	2100      	movs	r1, #0
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f001 f89d 	bl	800c8ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b788:	2300      	movs	r3, #0
 800b78a:	2200      	movs	r2, #0
 800b78c:	2100      	movs	r1, #0
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f001 fd74 	bl	800d27c <USBD_LL_PrepareReceive>
 800b794:	e01c      	b.n	800b7d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d10f      	bne.n	800b7c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d009      	beq.n	800b7c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7c2:	2180      	movs	r1, #128	@ 0x80
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f001 fcaf 	bl	800d128 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f001 f8c7 	bl	800c95e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d03a      	beq.n	800b850 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7ff fe42 	bl	800b464 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7e8:	e032      	b.n	800b850 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 f985 	bl	800bb04 <USBD_CoreFindEP>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
 800b800:	2bff      	cmp	r3, #255	@ 0xff
 800b802:	d025      	beq.n	800b850 <USBD_LL_DataInStage+0x15a>
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d122      	bne.n	800b850 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b03      	cmp	r3, #3
 800b814:	d11c      	bne.n	800b850 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b816:	7dfa      	ldrb	r2, [r7, #23]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	32ae      	adds	r2, #174	@ 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d014      	beq.n	800b850 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b826:	7dfa      	ldrb	r2, [r7, #23]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b82e:	7dfa      	ldrb	r2, [r7, #23]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	32ae      	adds	r2, #174	@ 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	7afa      	ldrb	r2, [r7, #11]
 800b83c:	4611      	mov	r1, r2
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	4798      	blx	r3
 800b842:	4603      	mov	r3, r0
 800b844:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b84c:	7dbb      	ldrb	r3, [r7, #22]
 800b84e:	e000      	b.n	800b852 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b892:	2b00      	cmp	r3, #0
 800b894:	d014      	beq.n	800b8c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00e      	beq.n	800b8c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6852      	ldr	r2, [r2, #4]
 800b8ae:	b2d2      	uxtb	r2, r2
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	4798      	blx	r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8c0:	2340      	movs	r3, #64	@ 0x40
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fbe9 	bl	800d09e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2240      	movs	r2, #64	@ 0x40
 800b8d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8dc:	2340      	movs	r3, #64	@ 0x40
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2180      	movs	r1, #128	@ 0x80
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 fbdb 	bl	800d09e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2240      	movs	r2, #64	@ 0x40
 800b8f2:	621a      	str	r2, [r3, #32]

  return ret;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d006      	beq.n	800b940 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2204      	movs	r2, #4
 800b944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b04      	cmp	r3, #4
 800b968:	d106      	bne.n	800b978 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b970:	b2da      	uxtb	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b03      	cmp	r3, #3
 800b998:	d110      	bne.n	800b9bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00b      	beq.n	800b9bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d005      	beq.n	800b9bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	32ae      	adds	r2, #174	@ 0xae
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e01c      	b.n	800ba22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d115      	bne.n	800ba20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	32ae      	adds	r2, #174	@ 0xae
 800b9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	32ae      	adds	r2, #174	@ 0xae
 800ba12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32ae      	adds	r2, #174	@ 0xae
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e01c      	b.n	800ba86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d115      	bne.n	800ba84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	32ae      	adds	r2, #174	@ 0xae
 800ba62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00b      	beq.n	800ba84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	32ae      	adds	r2, #174	@ 0xae
 800ba76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7c:	78fa      	ldrb	r2, [r7, #3]
 800ba7e:	4611      	mov	r1, r2
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b083      	sub	sp, #12
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6852      	ldr	r2, [r2, #4]
 800bace:	b2d2      	uxtb	r2, r2
 800bad0:	4611      	mov	r1, r2
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	4798      	blx	r3
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800badc:	2303      	movs	r3, #3
 800bade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	460b      	mov	r3, r1
 800baf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b086      	sub	sp, #24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	885b      	ldrh	r3, [r3, #2]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	7812      	ldrb	r2, [r2, #0]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d91f      	bls.n	800bb84 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb4a:	e013      	b.n	800bb74 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb4c:	f107 030a 	add.w	r3, r7, #10
 800bb50:	4619      	mov	r1, r3
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f000 f81b 	bl	800bb8e <USBD_GetNextDesc>
 800bb58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	2b05      	cmp	r3, #5
 800bb60:	d108      	bne.n	800bb74 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	789b      	ldrb	r3, [r3, #2]
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d008      	beq.n	800bb82 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb70:	2300      	movs	r3, #0
 800bb72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	885b      	ldrh	r3, [r3, #2]
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	897b      	ldrh	r3, [r7, #10]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d8e5      	bhi.n	800bb4c <USBD_GetEpDesc+0x2e>
 800bb80:	e000      	b.n	800bb84 <USBD_GetEpDesc+0x66>
          break;
 800bb82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb84:	693b      	ldr	r3, [r7, #16]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb8e:	b480      	push	{r7}
 800bb90:	b085      	sub	sp, #20
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	881b      	ldrh	r3, [r3, #0]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b087      	sub	sp, #28
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bbe4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bbe8:	021b      	lsls	r3, r3, #8
 800bbea:	b21a      	sxth	r2, r3
 800bbec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	b21b      	sxth	r3, r3
 800bbf4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bbf6:	89fb      	ldrh	r3, [r7, #14]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc1a:	2b40      	cmp	r3, #64	@ 0x40
 800bc1c:	d005      	beq.n	800bc2a <USBD_StdDevReq+0x26>
 800bc1e:	2b40      	cmp	r3, #64	@ 0x40
 800bc20:	d857      	bhi.n	800bcd2 <USBD_StdDevReq+0xce>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00f      	beq.n	800bc46 <USBD_StdDevReq+0x42>
 800bc26:	2b20      	cmp	r3, #32
 800bc28:	d153      	bne.n	800bcd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	32ae      	adds	r2, #174	@ 0xae
 800bc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	4798      	blx	r3
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
      break;
 800bc44:	e04a      	b.n	800bcdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	2b09      	cmp	r3, #9
 800bc4c:	d83b      	bhi.n	800bcc6 <USBD_StdDevReq+0xc2>
 800bc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc54 <USBD_StdDevReq+0x50>)
 800bc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc54:	0800bca9 	.word	0x0800bca9
 800bc58:	0800bcbd 	.word	0x0800bcbd
 800bc5c:	0800bcc7 	.word	0x0800bcc7
 800bc60:	0800bcb3 	.word	0x0800bcb3
 800bc64:	0800bcc7 	.word	0x0800bcc7
 800bc68:	0800bc87 	.word	0x0800bc87
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bcc7 	.word	0x0800bcc7
 800bc74:	0800bc9f 	.word	0x0800bc9f
 800bc78:	0800bc91 	.word	0x0800bc91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa3c 	bl	800c0fc <USBD_GetDescriptor>
          break;
 800bc84:	e024      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fba1 	bl	800c3d0 <USBD_SetAddress>
          break;
 800bc8e:	e01f      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fbe0 	bl	800c458 <USBD_SetConfig>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]
          break;
 800bc9c:	e018      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fc83 	bl	800c5ac <USBD_GetConfig>
          break;
 800bca6:	e013      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fcb4 	bl	800c618 <USBD_GetStatus>
          break;
 800bcb0:	e00e      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fce3 	bl	800c680 <USBD_SetFeature>
          break;
 800bcba:	e009      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fd07 	bl	800c6d2 <USBD_ClrFeature>
          break;
 800bcc4:	e004      	b.n	800bcd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fd5e 	bl	800c78a <USBD_CtlError>
          break;
 800bcce:	bf00      	nop
      }
      break;
 800bcd0:	e004      	b.n	800bcdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fd58 	bl	800c78a <USBD_CtlError>
      break;
 800bcda:	bf00      	nop
  }

  return ret;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop

0800bce8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcfe:	2b40      	cmp	r3, #64	@ 0x40
 800bd00:	d005      	beq.n	800bd0e <USBD_StdItfReq+0x26>
 800bd02:	2b40      	cmp	r3, #64	@ 0x40
 800bd04:	d852      	bhi.n	800bdac <USBD_StdItfReq+0xc4>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <USBD_StdItfReq+0x26>
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	d14e      	bne.n	800bdac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	3b01      	subs	r3, #1
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d840      	bhi.n	800bd9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	889b      	ldrh	r3, [r3, #4]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d836      	bhi.n	800bd94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	889b      	ldrh	r3, [r3, #4]
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fedb 	bl	800baea <USBD_CoreFindIF>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	2bff      	cmp	r3, #255	@ 0xff
 800bd3c:	d01d      	beq.n	800bd7a <USBD_StdItfReq+0x92>
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11a      	bne.n	800bd7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd44:	7bba      	ldrb	r2, [r7, #14]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	32ae      	adds	r2, #174	@ 0xae
 800bd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00f      	beq.n	800bd74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd54:	7bba      	ldrb	r2, [r7, #14]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd5c:	7bba      	ldrb	r2, [r7, #14]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	32ae      	adds	r2, #174	@ 0xae
 800bd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	4798      	blx	r3
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd72:	e004      	b.n	800bd7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd74:	2303      	movs	r3, #3
 800bd76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd78:	e001      	b.n	800bd7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	88db      	ldrh	r3, [r3, #6]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d110      	bne.n	800bda8 <USBD_StdItfReq+0xc0>
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10d      	bne.n	800bda8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fdd3 	bl	800c938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd92:	e009      	b.n	800bda8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fcf7 	bl	800c78a <USBD_CtlError>
          break;
 800bd9c:	e004      	b.n	800bda8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fcf2 	bl	800c78a <USBD_CtlError>
          break;
 800bda6:	e000      	b.n	800bdaa <USBD_StdItfReq+0xc2>
          break;
 800bda8:	bf00      	nop
      }
      break;
 800bdaa:	e004      	b.n	800bdb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fceb 	bl	800c78a <USBD_CtlError>
      break;
 800bdb4:	bf00      	nop
  }

  return ret;
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	889b      	ldrh	r3, [r3, #4]
 800bdd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bddc:	2b40      	cmp	r3, #64	@ 0x40
 800bdde:	d007      	beq.n	800bdf0 <USBD_StdEPReq+0x30>
 800bde0:	2b40      	cmp	r3, #64	@ 0x40
 800bde2:	f200 817f 	bhi.w	800c0e4 <USBD_StdEPReq+0x324>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d02a      	beq.n	800be40 <USBD_StdEPReq+0x80>
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	f040 817a 	bne.w	800c0e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7ff fe85 	bl	800bb04 <USBD_CoreFindEP>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdfe:	7b7b      	ldrb	r3, [r7, #13]
 800be00:	2bff      	cmp	r3, #255	@ 0xff
 800be02:	f000 8174 	beq.w	800c0ee <USBD_StdEPReq+0x32e>
 800be06:	7b7b      	ldrb	r3, [r7, #13]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f040 8170 	bne.w	800c0ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be0e:	7b7a      	ldrb	r2, [r7, #13]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be16:	7b7a      	ldrb	r2, [r7, #13]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	32ae      	adds	r2, #174	@ 0xae
 800be1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 8163 	beq.w	800c0ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be28:	7b7a      	ldrb	r2, [r7, #13]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32ae      	adds	r2, #174	@ 0xae
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	4798      	blx	r3
 800be3a:	4603      	mov	r3, r0
 800be3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be3e:	e156      	b.n	800c0ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	785b      	ldrb	r3, [r3, #1]
 800be44:	2b03      	cmp	r3, #3
 800be46:	d008      	beq.n	800be5a <USBD_StdEPReq+0x9a>
 800be48:	2b03      	cmp	r3, #3
 800be4a:	f300 8145 	bgt.w	800c0d8 <USBD_StdEPReq+0x318>
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 809b 	beq.w	800bf8a <USBD_StdEPReq+0x1ca>
 800be54:	2b01      	cmp	r3, #1
 800be56:	d03c      	beq.n	800bed2 <USBD_StdEPReq+0x112>
 800be58:	e13e      	b.n	800c0d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b02      	cmp	r3, #2
 800be64:	d002      	beq.n	800be6c <USBD_StdEPReq+0xac>
 800be66:	2b03      	cmp	r3, #3
 800be68:	d016      	beq.n	800be98 <USBD_StdEPReq+0xd8>
 800be6a:	e02c      	b.n	800bec6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00d      	beq.n	800be8e <USBD_StdEPReq+0xce>
 800be72:	7bbb      	ldrb	r3, [r7, #14]
 800be74:	2b80      	cmp	r3, #128	@ 0x80
 800be76:	d00a      	beq.n	800be8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 f953 	bl	800d128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be82:	2180      	movs	r1, #128	@ 0x80
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 f94f 	bl	800d128 <USBD_LL_StallEP>
 800be8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be8c:	e020      	b.n	800bed0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fc7a 	bl	800c78a <USBD_CtlError>
              break;
 800be96:	e01b      	b.n	800bed0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	885b      	ldrh	r3, [r3, #2]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10e      	bne.n	800bebe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00b      	beq.n	800bebe <USBD_StdEPReq+0xfe>
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
 800bea8:	2b80      	cmp	r3, #128	@ 0x80
 800beaa:	d008      	beq.n	800bebe <USBD_StdEPReq+0xfe>
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	88db      	ldrh	r3, [r3, #6]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d104      	bne.n	800bebe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 f935 	bl	800d128 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fd3a 	bl	800c938 <USBD_CtlSendStatus>

              break;
 800bec4:	e004      	b.n	800bed0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fc5e 	bl	800c78a <USBD_CtlError>
              break;
 800bece:	bf00      	nop
          }
          break;
 800bed0:	e107      	b.n	800c0e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d002      	beq.n	800bee4 <USBD_StdEPReq+0x124>
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d016      	beq.n	800bf10 <USBD_StdEPReq+0x150>
 800bee2:	e04b      	b.n	800bf7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00d      	beq.n	800bf06 <USBD_StdEPReq+0x146>
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b80      	cmp	r3, #128	@ 0x80
 800beee:	d00a      	beq.n	800bf06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f001 f917 	bl	800d128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800befa:	2180      	movs	r1, #128	@ 0x80
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 f913 	bl	800d128 <USBD_LL_StallEP>
 800bf02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf04:	e040      	b.n	800bf88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fc3e 	bl	800c78a <USBD_CtlError>
              break;
 800bf0e:	e03b      	b.n	800bf88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	885b      	ldrh	r3, [r3, #2]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d136      	bne.n	800bf86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d004      	beq.n	800bf2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 f91d 	bl	800d166 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fd03 	bl	800c938 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff fde4 	bl	800bb04 <USBD_CoreFindEP>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf40:	7b7b      	ldrb	r3, [r7, #13]
 800bf42:	2bff      	cmp	r3, #255	@ 0xff
 800bf44:	d01f      	beq.n	800bf86 <USBD_StdEPReq+0x1c6>
 800bf46:	7b7b      	ldrb	r3, [r7, #13]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d11c      	bne.n	800bf86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf4c:	7b7a      	ldrb	r2, [r7, #13]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf54:	7b7a      	ldrb	r2, [r7, #13]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	32ae      	adds	r2, #174	@ 0xae
 800bf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d010      	beq.n	800bf86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf64:	7b7a      	ldrb	r2, [r7, #13]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	32ae      	adds	r2, #174	@ 0xae
 800bf6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
 800bf76:	4603      	mov	r3, r0
 800bf78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf7a:	e004      	b.n	800bf86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fc03 	bl	800c78a <USBD_CtlError>
              break;
 800bf84:	e000      	b.n	800bf88 <USBD_StdEPReq+0x1c8>
              break;
 800bf86:	bf00      	nop
          }
          break;
 800bf88:	e0ab      	b.n	800c0e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d002      	beq.n	800bf9c <USBD_StdEPReq+0x1dc>
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d032      	beq.n	800c000 <USBD_StdEPReq+0x240>
 800bf9a:	e097      	b.n	800c0cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d007      	beq.n	800bfb2 <USBD_StdEPReq+0x1f2>
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	2b80      	cmp	r3, #128	@ 0x80
 800bfa6:	d004      	beq.n	800bfb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fbed 	bl	800c78a <USBD_CtlError>
                break;
 800bfb0:	e091      	b.n	800c0d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	da0b      	bge.n	800bfd2 <USBD_StdEPReq+0x212>
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
 800bfbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	3310      	adds	r3, #16
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	4413      	add	r3, r2
 800bfce:	3304      	adds	r3, #4
 800bfd0:	e00b      	b.n	800bfea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3304      	adds	r3, #4
 800bfea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2200      	movs	r2, #0
 800bff0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2202      	movs	r2, #2
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fc43 	bl	800c884 <USBD_CtlSendData>
              break;
 800bffe:	e06a      	b.n	800c0d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	da11      	bge.n	800c02c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	f003 020f 	and.w	r2, r3, #15
 800c00e:	6879      	ldr	r1, [r7, #4]
 800c010:	4613      	mov	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	440b      	add	r3, r1
 800c01a:	3324      	adds	r3, #36	@ 0x24
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d117      	bne.n	800c052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fbb0 	bl	800c78a <USBD_CtlError>
                  break;
 800c02a:	e054      	b.n	800c0d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	f003 020f 	and.w	r2, r3, #15
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d104      	bne.n	800c052 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fb9d 	bl	800c78a <USBD_CtlError>
                  break;
 800c050:	e041      	b.n	800c0d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c056:	2b00      	cmp	r3, #0
 800c058:	da0b      	bge.n	800c072 <USBD_StdEPReq+0x2b2>
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	3310      	adds	r3, #16
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	3304      	adds	r3, #4
 800c070:	e00b      	b.n	800c08a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	3304      	adds	r3, #4
 800c08a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <USBD_StdEPReq+0x2d8>
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	2b80      	cmp	r3, #128	@ 0x80
 800c096:	d103      	bne.n	800c0a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2200      	movs	r2, #0
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	e00e      	b.n	800c0be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f87d 	bl	800d1a4 <USBD_LL_IsStallEP>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	e002      	b.n	800c0be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fbdd 	bl	800c884 <USBD_CtlSendData>
              break;
 800c0ca:	e004      	b.n	800c0d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fb5b 	bl	800c78a <USBD_CtlError>
              break;
 800c0d4:	bf00      	nop
          }
          break;
 800c0d6:	e004      	b.n	800c0e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fb55 	bl	800c78a <USBD_CtlError>
          break;
 800c0e0:	bf00      	nop
      }
      break;
 800c0e2:	e005      	b.n	800c0f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fb4f 	bl	800c78a <USBD_CtlError>
      break;
 800c0ec:	e000      	b.n	800c0f0 <USBD_StdEPReq+0x330>
      break;
 800c0ee:	bf00      	nop
  }

  return ret;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c106:	2300      	movs	r3, #0
 800c108:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	885b      	ldrh	r3, [r3, #2]
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	b29b      	uxth	r3, r3
 800c11a:	3b01      	subs	r3, #1
 800c11c:	2b06      	cmp	r3, #6
 800c11e:	f200 8128 	bhi.w	800c372 <USBD_GetDescriptor+0x276>
 800c122:	a201      	add	r2, pc, #4	@ (adr r2, 800c128 <USBD_GetDescriptor+0x2c>)
 800c124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c128:	0800c145 	.word	0x0800c145
 800c12c:	0800c15d 	.word	0x0800c15d
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c373 	.word	0x0800c373
 800c138:	0800c373 	.word	0x0800c373
 800c13c:	0800c313 	.word	0x0800c313
 800c140:	0800c33f 	.word	0x0800c33f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	7c12      	ldrb	r2, [r2, #16]
 800c150:	f107 0108 	add.w	r1, r7, #8
 800c154:	4610      	mov	r0, r2
 800c156:	4798      	blx	r3
 800c158:	60f8      	str	r0, [r7, #12]
      break;
 800c15a:	e112      	b.n	800c382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7c1b      	ldrb	r3, [r3, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10d      	bne.n	800c180 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16c:	f107 0208 	add.w	r2, r7, #8
 800c170:	4610      	mov	r0, r2
 800c172:	4798      	blx	r3
 800c174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	2202      	movs	r2, #2
 800c17c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c17e:	e100      	b.n	800c382 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c188:	f107 0208 	add.w	r2, r7, #8
 800c18c:	4610      	mov	r0, r2
 800c18e:	4798      	blx	r3
 800c190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	2202      	movs	r2, #2
 800c198:	701a      	strb	r2, [r3, #0]
      break;
 800c19a:	e0f2      	b.n	800c382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	885b      	ldrh	r3, [r3, #2]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b05      	cmp	r3, #5
 800c1a4:	f200 80ac 	bhi.w	800c300 <USBD_GetDescriptor+0x204>
 800c1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b0 <USBD_GetDescriptor+0xb4>)
 800c1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ae:	bf00      	nop
 800c1b0:	0800c1c9 	.word	0x0800c1c9
 800c1b4:	0800c1fd 	.word	0x0800c1fd
 800c1b8:	0800c231 	.word	0x0800c231
 800c1bc:	0800c265 	.word	0x0800c265
 800c1c0:	0800c299 	.word	0x0800c299
 800c1c4:	0800c2cd 	.word	0x0800c2cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	7c12      	ldrb	r2, [r2, #16]
 800c1e0:	f107 0108 	add.w	r1, r7, #8
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4798      	blx	r3
 800c1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ea:	e091      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 facb 	bl	800c78a <USBD_CtlError>
            err++;
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1fa:	e089      	b.n	800c310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	7c12      	ldrb	r2, [r2, #16]
 800c214:	f107 0108 	add.w	r1, r7, #8
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
 800c21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21e:	e077      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fab1 	bl	800c78a <USBD_CtlError>
            err++;
 800c228:	7afb      	ldrb	r3, [r7, #11]
 800c22a:	3301      	adds	r3, #1
 800c22c:	72fb      	strb	r3, [r7, #11]
          break;
 800c22e:	e06f      	b.n	800c310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00b      	beq.n	800c254 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7c12      	ldrb	r2, [r2, #16]
 800c248:	f107 0108 	add.w	r1, r7, #8
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c252:	e05d      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa97 	bl	800c78a <USBD_CtlError>
            err++;
 800c25c:	7afb      	ldrb	r3, [r7, #11]
 800c25e:	3301      	adds	r3, #1
 800c260:	72fb      	strb	r3, [r7, #11]
          break;
 800c262:	e055      	b.n	800c310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	7c12      	ldrb	r2, [r2, #16]
 800c27c:	f107 0108 	add.w	r1, r7, #8
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
 800c284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c286:	e043      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa7d 	bl	800c78a <USBD_CtlError>
            err++;
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	3301      	adds	r3, #1
 800c294:	72fb      	strb	r3, [r7, #11]
          break;
 800c296:	e03b      	b.n	800c310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00b      	beq.n	800c2bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	7c12      	ldrb	r2, [r2, #16]
 800c2b0:	f107 0108 	add.w	r1, r7, #8
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4798      	blx	r3
 800c2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ba:	e029      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fa63 	bl	800c78a <USBD_CtlError>
            err++;
 800c2c4:	7afb      	ldrb	r3, [r7, #11]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ca:	e021      	b.n	800c310 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00b      	beq.n	800c2f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	7c12      	ldrb	r2, [r2, #16]
 800c2e4:	f107 0108 	add.w	r1, r7, #8
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4798      	blx	r3
 800c2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ee:	e00f      	b.n	800c310 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa49 	bl	800c78a <USBD_CtlError>
            err++;
 800c2f8:	7afb      	ldrb	r3, [r7, #11]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fe:	e007      	b.n	800c310 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fa41 	bl	800c78a <USBD_CtlError>
          err++;
 800c308:	7afb      	ldrb	r3, [r7, #11]
 800c30a:	3301      	adds	r3, #1
 800c30c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c30e:	bf00      	nop
      }
      break;
 800c310:	e037      	b.n	800c382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	7c1b      	ldrb	r3, [r3, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d109      	bne.n	800c32e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c322:	f107 0208 	add.w	r2, r7, #8
 800c326:	4610      	mov	r0, r2
 800c328:	4798      	blx	r3
 800c32a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c32c:	e029      	b.n	800c382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fa2a 	bl	800c78a <USBD_CtlError>
        err++;
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	3301      	adds	r3, #1
 800c33a:	72fb      	strb	r3, [r7, #11]
      break;
 800c33c:	e021      	b.n	800c382 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	7c1b      	ldrb	r3, [r3, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10d      	bne.n	800c362 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34e:	f107 0208 	add.w	r2, r7, #8
 800c352:	4610      	mov	r0, r2
 800c354:	4798      	blx	r3
 800c356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3301      	adds	r3, #1
 800c35c:	2207      	movs	r2, #7
 800c35e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c360:	e00f      	b.n	800c382 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fa10 	bl	800c78a <USBD_CtlError>
        err++;
 800c36a:	7afb      	ldrb	r3, [r7, #11]
 800c36c:	3301      	adds	r3, #1
 800c36e:	72fb      	strb	r3, [r7, #11]
      break;
 800c370:	e007      	b.n	800c382 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fa08 	bl	800c78a <USBD_CtlError>
      err++;
 800c37a:	7afb      	ldrb	r3, [r7, #11]
 800c37c:	3301      	adds	r3, #1
 800c37e:	72fb      	strb	r3, [r7, #11]
      break;
 800c380:	bf00      	nop
  }

  if (err != 0U)
 800c382:	7afb      	ldrb	r3, [r7, #11]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d11e      	bne.n	800c3c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	88db      	ldrh	r3, [r3, #6]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d016      	beq.n	800c3be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c390:	893b      	ldrh	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00e      	beq.n	800c3b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	88da      	ldrh	r2, [r3, #6]
 800c39a:	893b      	ldrh	r3, [r7, #8]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	bf28      	it	cs
 800c3a0:	4613      	movcs	r3, r2
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3a6:	893b      	ldrh	r3, [r7, #8]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa69 	bl	800c884 <USBD_CtlSendData>
 800c3b2:	e009      	b.n	800c3c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f9e7 	bl	800c78a <USBD_CtlError>
 800c3bc:	e004      	b.n	800c3c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 faba 	bl	800c938 <USBD_CtlSendStatus>
 800c3c4:	e000      	b.n	800c3c8 <USBD_GetDescriptor+0x2cc>
    return;
 800c3c6:	bf00      	nop
  }
}
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop

0800c3d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	889b      	ldrh	r3, [r3, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d131      	bne.n	800c446 <USBD_SetAddress+0x76>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	88db      	ldrh	r3, [r3, #6]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d12d      	bne.n	800c446 <USBD_SetAddress+0x76>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	885b      	ldrh	r3, [r3, #2]
 800c3ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3f0:	d829      	bhi.n	800c446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	885b      	ldrh	r3, [r3, #2]
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b03      	cmp	r3, #3
 800c408:	d104      	bne.n	800c414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f9bc 	bl	800c78a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c412:	e01d      	b.n	800c450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7bfa      	ldrb	r2, [r7, #15]
 800c418:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	4619      	mov	r1, r3
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 feeb 	bl	800d1fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa86 	bl	800c938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d004      	beq.n	800c43c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2202      	movs	r2, #2
 800c436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43a:	e009      	b.n	800c450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c444:	e004      	b.n	800c450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f99e 	bl	800c78a <USBD_CtlError>
  }
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	885b      	ldrh	r3, [r3, #2]
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	4b4e      	ldr	r3, [pc, #312]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c46e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c470:	4b4d      	ldr	r3, [pc, #308]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d905      	bls.n	800c484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f985 	bl	800c78a <USBD_CtlError>
    return USBD_FAIL;
 800c480:	2303      	movs	r3, #3
 800c482:	e08c      	b.n	800c59e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d002      	beq.n	800c496 <USBD_SetConfig+0x3e>
 800c490:	2b03      	cmp	r3, #3
 800c492:	d029      	beq.n	800c4e8 <USBD_SetConfig+0x90>
 800c494:	e075      	b.n	800c582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c496:	4b44      	ldr	r3, [pc, #272]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d020      	beq.n	800c4e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c49e:	4b42      	ldr	r3, [pc, #264]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7fe ffe3 	bl	800b47a <USBD_SetClassConfig>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d008      	beq.n	800c4d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f962 	bl	800c78a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4ce:	e065      	b.n	800c59c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fa31 	bl	800c938 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2203      	movs	r2, #3
 800c4da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c4de:	e05d      	b.n	800c59c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fa29 	bl	800c938 <USBD_CtlSendStatus>
      break;
 800c4e6:	e059      	b.n	800c59c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4e8:	4b2f      	ldr	r3, [pc, #188]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d112      	bne.n	800c516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c4f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c502:	4b29      	ldr	r3, [pc, #164]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7fe ffd2 	bl	800b4b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa12 	bl	800c938 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c514:	e042      	b.n	800c59c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c516:	4b24      	ldr	r3, [pc, #144]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	429a      	cmp	r2, r3
 800c522:	d02a      	beq.n	800c57a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7fe ffc0 	bl	800b4b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c532:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c53c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7fe ff99 	bl	800b47a <USBD_SetClassConfig>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00f      	beq.n	800c572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f918 	bl	800c78a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7fe ffa5 	bl	800b4b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c570:	e014      	b.n	800c59c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f9e0 	bl	800c938 <USBD_CtlSendStatus>
      break;
 800c578:	e010      	b.n	800c59c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f9dc 	bl	800c938 <USBD_CtlSendStatus>
      break;
 800c580:	e00c      	b.n	800c59c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f900 	bl	800c78a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c58a:	4b07      	ldr	r3, [pc, #28]	@ (800c5a8 <USBD_SetConfig+0x150>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7fe ff8e 	bl	800b4b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c596:	2303      	movs	r3, #3
 800c598:	73fb      	strb	r3, [r7, #15]
      break;
 800c59a:	bf00      	nop
  }

  return ret;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000858 	.word	0x20000858

0800c5ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	88db      	ldrh	r3, [r3, #6]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d004      	beq.n	800c5c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f8e2 	bl	800c78a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5c6:	e023      	b.n	800c610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	dc02      	bgt.n	800c5da <USBD_GetConfig+0x2e>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dc03      	bgt.n	800c5e0 <USBD_GetConfig+0x34>
 800c5d8:	e015      	b.n	800c606 <USBD_GetConfig+0x5a>
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d00b      	beq.n	800c5f6 <USBD_GetConfig+0x4a>
 800c5de:	e012      	b.n	800c606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f948 	bl	800c884 <USBD_CtlSendData>
        break;
 800c5f4:	e00c      	b.n	800c610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f940 	bl	800c884 <USBD_CtlSendData>
        break;
 800c604:	e004      	b.n	800c610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f8be 	bl	800c78a <USBD_CtlError>
        break;
 800c60e:	bf00      	nop
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	3b01      	subs	r3, #1
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d81e      	bhi.n	800c66e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	88db      	ldrh	r3, [r3, #6]
 800c634:	2b02      	cmp	r3, #2
 800c636:	d004      	beq.n	800c642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f8a5 	bl	800c78a <USBD_CtlError>
        break;
 800c640:	e01a      	b.n	800c678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d005      	beq.n	800c65e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f043 0202 	orr.w	r2, r3, #2
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	330c      	adds	r3, #12
 800c662:	2202      	movs	r2, #2
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f90c 	bl	800c884 <USBD_CtlSendData>
      break;
 800c66c:	e004      	b.n	800c678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c66e:	6839      	ldr	r1, [r7, #0]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f88a 	bl	800c78a <USBD_CtlError>
      break;
 800c676:	bf00      	nop
  }
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	885b      	ldrh	r3, [r3, #2]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d107      	bne.n	800c6a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f94c 	bl	800c938 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c6a0:	e013      	b.n	800c6ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	885b      	ldrh	r3, [r3, #2]
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d10b      	bne.n	800c6c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	889b      	ldrh	r3, [r3, #4]
 800c6ae:	0a1b      	lsrs	r3, r3, #8
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f93c 	bl	800c938 <USBD_CtlSendStatus>
}
 800c6c0:	e003      	b.n	800c6ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f860 	bl	800c78a <USBD_CtlError>
}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d80b      	bhi.n	800c702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d10c      	bne.n	800c70c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f91c 	bl	800c938 <USBD_CtlSendStatus>
      }
      break;
 800c700:	e004      	b.n	800c70c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f840 	bl	800c78a <USBD_CtlError>
      break;
 800c70a:	e000      	b.n	800c70e <USBD_ClrFeature+0x3c>
      break;
 800c70c:	bf00      	nop
  }
}
 800c70e:	bf00      	nop
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	781a      	ldrb	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3301      	adds	r3, #1
 800c730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	781a      	ldrb	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3301      	adds	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f7ff fa40 	bl	800bbc6 <SWAPBYTE>
 800c746:	4603      	mov	r3, r0
 800c748:	461a      	mov	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3301      	adds	r3, #1
 800c758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7ff fa33 	bl	800bbc6 <SWAPBYTE>
 800c760:	4603      	mov	r3, r0
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3301      	adds	r3, #1
 800c76c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3301      	adds	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f7ff fa26 	bl	800bbc6 <SWAPBYTE>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461a      	mov	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	80da      	strh	r2, [r3, #6]
}
 800c782:	bf00      	nop
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c794:	2180      	movs	r1, #128	@ 0x80
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fcc6 	bl	800d128 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c79c:	2100      	movs	r1, #0
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fcc2 	bl	800d128 <USBD_LL_StallEP>
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d042      	beq.n	800c848 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c7c6:	6938      	ldr	r0, [r7, #16]
 800c7c8:	f000 f842 	bl	800c850 <USBD_GetLen>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7d6:	d808      	bhi.n	800c7ea <USBD_GetString+0x3e>
 800c7d8:	6938      	ldr	r0, [r7, #16]
 800c7da:	f000 f839 	bl	800c850 <USBD_GetLen>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	e001      	b.n	800c7ee <USBD_GetString+0x42>
 800c7ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	7812      	ldrb	r2, [r2, #0]
 800c7fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	3301      	adds	r3, #1
 800c802:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c804:	7dfb      	ldrb	r3, [r7, #23]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4413      	add	r3, r2
 800c80a:	2203      	movs	r2, #3
 800c80c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	3301      	adds	r3, #1
 800c812:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c814:	e013      	b.n	800c83e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	4413      	add	r3, r2
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	7812      	ldrb	r2, [r2, #0]
 800c820:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	3301      	adds	r3, #1
 800c826:	613b      	str	r3, [r7, #16]
    idx++;
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	3301      	adds	r3, #1
 800c82c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	4413      	add	r3, r2
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]
    idx++;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	3301      	adds	r3, #1
 800c83c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e7      	bne.n	800c816 <USBD_GetString+0x6a>
 800c846:	e000      	b.n	800c84a <USBD_GetString+0x9e>
    return;
 800c848:	bf00      	nop
  }
}
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c860:	e005      	b.n	800c86e <USBD_GetLen+0x1e>
  {
    len++;
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	3301      	adds	r3, #1
 800c866:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	3301      	adds	r3, #1
 800c86c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1f5      	bne.n	800c862 <USBD_GetLen+0x12>
  }

  return len;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2202      	movs	r2, #2
 800c894:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 fcc5 	bl	800d23a <USBD_LL_Transmit>

  return USBD_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f000 fcb4 	bl	800d23a <USBD_LL_Transmit>

  return USBD_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	2100      	movs	r1, #0
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f000 fcb8 	bl	800d27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	60b9      	str	r1, [r7, #8]
 800c920:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	2100      	movs	r1, #0
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 fca7 	bl	800d27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2204      	movs	r2, #4
 800c944:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c948:	2300      	movs	r3, #0
 800c94a:	2200      	movs	r2, #0
 800c94c:	2100      	movs	r1, #0
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fc73 	bl	800d23a <USBD_LL_Transmit>

  return USBD_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2205      	movs	r2, #5
 800c96a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c96e:	2300      	movs	r3, #0
 800c970:	2200      	movs	r2, #0
 800c972:	2100      	movs	r1, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fc81 	bl	800d27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c988:	2200      	movs	r2, #0
 800c98a:	4912      	ldr	r1, [pc, #72]	@ (800c9d4 <MX_USB_DEVICE_Init+0x50>)
 800c98c:	4812      	ldr	r0, [pc, #72]	@ (800c9d8 <MX_USB_DEVICE_Init+0x54>)
 800c98e:	f7fe fcf7 	bl	800b380 <USBD_Init>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c998:	f7f7 fa54 	bl	8003e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c99c:	490f      	ldr	r1, [pc, #60]	@ (800c9dc <MX_USB_DEVICE_Init+0x58>)
 800c99e:	480e      	ldr	r0, [pc, #56]	@ (800c9d8 <MX_USB_DEVICE_Init+0x54>)
 800c9a0:	f7fe fd1e 	bl	800b3e0 <USBD_RegisterClass>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9aa:	f7f7 fa4b 	bl	8003e44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9ae:	490c      	ldr	r1, [pc, #48]	@ (800c9e0 <MX_USB_DEVICE_Init+0x5c>)
 800c9b0:	4809      	ldr	r0, [pc, #36]	@ (800c9d8 <MX_USB_DEVICE_Init+0x54>)
 800c9b2:	f7fe fc55 	bl	800b260 <USBD_CDC_RegisterInterface>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9bc:	f7f7 fa42 	bl	8003e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9c0:	4805      	ldr	r0, [pc, #20]	@ (800c9d8 <MX_USB_DEVICE_Init+0x54>)
 800c9c2:	f7fe fd43 	bl	800b44c <USBD_Start>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9cc:	f7f7 fa3a 	bl	8003e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9d0:	bf00      	nop
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	200000dc 	.word	0x200000dc
 800c9d8:	2000085c 	.word	0x2000085c
 800c9dc:	20000048 	.word	0x20000048
 800c9e0:	200000c8 	.word	0x200000c8

0800c9e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	4905      	ldr	r1, [pc, #20]	@ (800ca00 <CDC_Init_FS+0x1c>)
 800c9ec:	4805      	ldr	r0, [pc, #20]	@ (800ca04 <CDC_Init_FS+0x20>)
 800c9ee:	f7fe fc51 	bl	800b294 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9f2:	4905      	ldr	r1, [pc, #20]	@ (800ca08 <CDC_Init_FS+0x24>)
 800c9f4:	4803      	ldr	r0, [pc, #12]	@ (800ca04 <CDC_Init_FS+0x20>)
 800c9f6:	f7fe fc6f 	bl	800b2d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20001338 	.word	0x20001338
 800ca04:	2000085c 	.word	0x2000085c
 800ca08:	20000b38 	.word	0x20000b38

0800ca0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	6039      	str	r1, [r7, #0]
 800ca26:	71fb      	strb	r3, [r7, #7]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	2b23      	cmp	r3, #35	@ 0x23
 800ca30:	d84a      	bhi.n	800cac8 <CDC_Control_FS+0xac>
 800ca32:	a201      	add	r2, pc, #4	@ (adr r2, 800ca38 <CDC_Control_FS+0x1c>)
 800ca34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca38:	0800cac9 	.word	0x0800cac9
 800ca3c:	0800cac9 	.word	0x0800cac9
 800ca40:	0800cac9 	.word	0x0800cac9
 800ca44:	0800cac9 	.word	0x0800cac9
 800ca48:	0800cac9 	.word	0x0800cac9
 800ca4c:	0800cac9 	.word	0x0800cac9
 800ca50:	0800cac9 	.word	0x0800cac9
 800ca54:	0800cac9 	.word	0x0800cac9
 800ca58:	0800cac9 	.word	0x0800cac9
 800ca5c:	0800cac9 	.word	0x0800cac9
 800ca60:	0800cac9 	.word	0x0800cac9
 800ca64:	0800cac9 	.word	0x0800cac9
 800ca68:	0800cac9 	.word	0x0800cac9
 800ca6c:	0800cac9 	.word	0x0800cac9
 800ca70:	0800cac9 	.word	0x0800cac9
 800ca74:	0800cac9 	.word	0x0800cac9
 800ca78:	0800cac9 	.word	0x0800cac9
 800ca7c:	0800cac9 	.word	0x0800cac9
 800ca80:	0800cac9 	.word	0x0800cac9
 800ca84:	0800cac9 	.word	0x0800cac9
 800ca88:	0800cac9 	.word	0x0800cac9
 800ca8c:	0800cac9 	.word	0x0800cac9
 800ca90:	0800cac9 	.word	0x0800cac9
 800ca94:	0800cac9 	.word	0x0800cac9
 800ca98:	0800cac9 	.word	0x0800cac9
 800ca9c:	0800cac9 	.word	0x0800cac9
 800caa0:	0800cac9 	.word	0x0800cac9
 800caa4:	0800cac9 	.word	0x0800cac9
 800caa8:	0800cac9 	.word	0x0800cac9
 800caac:	0800cac9 	.word	0x0800cac9
 800cab0:	0800cac9 	.word	0x0800cac9
 800cab4:	0800cac9 	.word	0x0800cac9
 800cab8:	0800cac9 	.word	0x0800cac9
 800cabc:	0800cac9 	.word	0x0800cac9
 800cac0:	0800cac9 	.word	0x0800cac9
 800cac4:	0800cac9 	.word	0x0800cac9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cac8:	bf00      	nop
  }

  return (USBD_OK);
 800caca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cacc:	4618      	mov	r0, r3
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4805      	ldr	r0, [pc, #20]	@ (800cafc <CDC_Receive_FS+0x24>)
 800cae6:	f7fe fbf7 	bl	800b2d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800caea:	4804      	ldr	r0, [pc, #16]	@ (800cafc <CDC_Receive_FS+0x24>)
 800caec:	f7fe fc12 	bl	800b314 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800caf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	2000085c 	.word	0x2000085c

0800cb00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b087      	sub	sp, #28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
	...

0800cb24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	6039      	str	r1, [r7, #0]
 800cb2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2212      	movs	r2, #18
 800cb34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb36:	4b03      	ldr	r3, [pc, #12]	@ (800cb44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	200000f8 	.word	0x200000f8

0800cb48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	6039      	str	r1, [r7, #0]
 800cb52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	2204      	movs	r2, #4
 800cb58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb5a:	4b03      	ldr	r3, [pc, #12]	@ (800cb68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	2000010c 	.word	0x2000010c

0800cb6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb78:	79fb      	ldrb	r3, [r7, #7]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d105      	bne.n	800cb8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	4907      	ldr	r1, [pc, #28]	@ (800cba0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb82:	4808      	ldr	r0, [pc, #32]	@ (800cba4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb84:	f7ff fe12 	bl	800c7ac <USBD_GetString>
 800cb88:	e004      	b.n	800cb94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4904      	ldr	r1, [pc, #16]	@ (800cba0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb8e:	4805      	ldr	r0, [pc, #20]	@ (800cba4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb90:	f7ff fe0c 	bl	800c7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb94:	4b02      	ldr	r3, [pc, #8]	@ (800cba0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20001b38 	.word	0x20001b38
 800cba4:	080107e0 	.word	0x080107e0

0800cba8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6039      	str	r1, [r7, #0]
 800cbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbb4:	683a      	ldr	r2, [r7, #0]
 800cbb6:	4904      	ldr	r1, [pc, #16]	@ (800cbc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbb8:	4804      	ldr	r0, [pc, #16]	@ (800cbcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbba:	f7ff fdf7 	bl	800c7ac <USBD_GetString>
  return USBD_StrDesc;
 800cbbe:	4b02      	ldr	r3, [pc, #8]	@ (800cbc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	20001b38 	.word	0x20001b38
 800cbcc:	080107f8 	.word	0x080107f8

0800cbd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	6039      	str	r1, [r7, #0]
 800cbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	221a      	movs	r2, #26
 800cbe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbe2:	f000 f843 	bl	800cc6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbe6:	4b02      	ldr	r3, [pc, #8]	@ (800cbf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20000110 	.word	0x20000110

0800cbf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	4907      	ldr	r1, [pc, #28]	@ (800cc28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc0a:	4808      	ldr	r0, [pc, #32]	@ (800cc2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc0c:	f7ff fdce 	bl	800c7ac <USBD_GetString>
 800cc10:	e004      	b.n	800cc1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4904      	ldr	r1, [pc, #16]	@ (800cc28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc16:	4805      	ldr	r0, [pc, #20]	@ (800cc2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc18:	f7ff fdc8 	bl	800c7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc1c:	4b02      	ldr	r3, [pc, #8]	@ (800cc28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20001b38 	.word	0x20001b38
 800cc2c:	0801080c 	.word	0x0801080c

0800cc30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d105      	bne.n	800cc4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	4907      	ldr	r1, [pc, #28]	@ (800cc64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc46:	4808      	ldr	r0, [pc, #32]	@ (800cc68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc48:	f7ff fdb0 	bl	800c7ac <USBD_GetString>
 800cc4c:	e004      	b.n	800cc58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4904      	ldr	r1, [pc, #16]	@ (800cc64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc52:	4805      	ldr	r0, [pc, #20]	@ (800cc68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc54:	f7ff fdaa 	bl	800c7ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc58:	4b02      	ldr	r3, [pc, #8]	@ (800cc64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	20001b38 	.word	0x20001b38
 800cc68:	08010818 	.word	0x08010818

0800cc6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc72:	4b0f      	ldr	r3, [pc, #60]	@ (800ccb0 <Get_SerialNum+0x44>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc78:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb4 <Get_SerialNum+0x48>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb8 <Get_SerialNum+0x4c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4413      	add	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d009      	beq.n	800cca6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc92:	2208      	movs	r2, #8
 800cc94:	4909      	ldr	r1, [pc, #36]	@ (800ccbc <Get_SerialNum+0x50>)
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f000 f814 	bl	800ccc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	4908      	ldr	r1, [pc, #32]	@ (800ccc0 <Get_SerialNum+0x54>)
 800cca0:	68b8      	ldr	r0, [r7, #8]
 800cca2:	f000 f80f 	bl	800ccc4 <IntToUnicode>
  }
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	1fff7a10 	.word	0x1fff7a10
 800ccb4:	1fff7a14 	.word	0x1fff7a14
 800ccb8:	1fff7a18 	.word	0x1fff7a18
 800ccbc:	20000112 	.word	0x20000112
 800ccc0:	20000122 	.word	0x20000122

0800ccc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	75fb      	strb	r3, [r7, #23]
 800ccda:	e027      	b.n	800cd2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	0f1b      	lsrs	r3, r3, #28
 800cce0:	2b09      	cmp	r3, #9
 800cce2:	d80b      	bhi.n	800ccfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	0f1b      	lsrs	r3, r3, #28
 800cce8:	b2da      	uxtb	r2, r3
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3230      	adds	r2, #48	@ 0x30
 800ccf6:	b2d2      	uxtb	r2, r2
 800ccf8:	701a      	strb	r2, [r3, #0]
 800ccfa:	e00a      	b.n	800cd12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	0f1b      	lsrs	r3, r3, #28
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	7dfb      	ldrb	r3, [r7, #23]
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4619      	mov	r1, r3
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3237      	adds	r2, #55	@ 0x37
 800cd0e:	b2d2      	uxtb	r2, r2
 800cd10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	011b      	lsls	r3, r3, #4
 800cd16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	4413      	add	r3, r2
 800cd22:	2200      	movs	r2, #0
 800cd24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	75fb      	strb	r3, [r7, #23]
 800cd2c:	7dfa      	ldrb	r2, [r7, #23]
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d3d3      	bcc.n	800ccdc <IntToUnicode+0x18>
  }
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop
 800cd38:	371c      	adds	r7, #28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
	...

0800cd44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	@ 0x28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd4c:	f107 0314 	add.w	r3, r7, #20
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	605a      	str	r2, [r3, #4]
 800cd56:	609a      	str	r2, [r3, #8]
 800cd58:	60da      	str	r2, [r3, #12]
 800cd5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd64:	d13a      	bne.n	800cddc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd66:	2300      	movs	r3, #0
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	4b1e      	ldr	r3, [pc, #120]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd6e:	4a1d      	ldr	r2, [pc, #116]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cd70:	f043 0301 	orr.w	r3, r3, #1
 800cd74:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd76:	4b1b      	ldr	r3, [pc, #108]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cd86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd88:	2302      	movs	r3, #2
 800cd8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd90:	2303      	movs	r3, #3
 800cd92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd94:	230a      	movs	r3, #10
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd98:	f107 0314 	add.w	r3, r7, #20
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4812      	ldr	r0, [pc, #72]	@ (800cde8 <HAL_PCD_MspInit+0xa4>)
 800cda0:	f7f9 fb5c 	bl	800645c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cda4:	4b0f      	ldr	r3, [pc, #60]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda8:	4a0e      	ldr	r2, [pc, #56]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdae:	6353      	str	r3, [r2, #52]	@ 0x34
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	4b0b      	ldr	r3, [pc, #44]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cdb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb8:	4a0a      	ldr	r2, [pc, #40]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cdba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cdbe:	6453      	str	r3, [r2, #68]	@ 0x44
 800cdc0:	4b08      	ldr	r3, [pc, #32]	@ (800cde4 <HAL_PCD_MspInit+0xa0>)
 800cdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2100      	movs	r1, #0
 800cdd0:	2043      	movs	r0, #67	@ 0x43
 800cdd2:	f7f9 f822 	bl	8005e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cdd6:	2043      	movs	r0, #67	@ 0x43
 800cdd8:	f7f9 f83b 	bl	8005e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cddc:	bf00      	nop
 800cdde:	3728      	adds	r7, #40	@ 0x28
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	40023800 	.word	0x40023800
 800cde8:	40020000 	.word	0x40020000

0800cdec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ce00:	4619      	mov	r1, r3
 800ce02:	4610      	mov	r0, r2
 800ce04:	f7fe fb6f 	bl	800b4e6 <USBD_LL_SetupStage>
}
 800ce08:	bf00      	nop
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce22:	78fa      	ldrb	r2, [r7, #3]
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	4613      	mov	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	440b      	add	r3, r1
 800ce30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	78fb      	ldrb	r3, [r7, #3]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f7fe fba9 	bl	800b590 <USBD_LL_DataOutStage>
}
 800ce3e:	bf00      	nop
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	460b      	mov	r3, r1
 800ce50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce58:	78fa      	ldrb	r2, [r7, #3]
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	440b      	add	r3, r1
 800ce66:	3320      	adds	r3, #32
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	78fb      	ldrb	r3, [r7, #3]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	f7fe fc42 	bl	800b6f6 <USBD_LL_DataInStage>
}
 800ce72:	bf00      	nop
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe fd7c 	bl	800b986 <USBD_LL_SOF>
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	79db      	ldrb	r3, [r3, #7]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
 800ceae:	e008      	b.n	800cec2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	79db      	ldrb	r3, [r3, #7]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d102      	bne.n	800cebe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	73fb      	strb	r3, [r7, #15]
 800cebc:	e001      	b.n	800cec2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cebe:	f7f6 ffc1 	bl	8003e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cec8:	7bfa      	ldrb	r2, [r7, #15]
 800ceca:	4611      	mov	r1, r2
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe fd16 	bl	800b8fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fe fcbe 	bl	800b85a <USBD_LL_Reset>
}
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fd11 	bl	800b91e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	6812      	ldr	r2, [r2, #0]
 800cf0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cf0e:	f043 0301 	orr.w	r3, r3, #1
 800cf12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7adb      	ldrb	r3, [r3, #11]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d005      	beq.n	800cf28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf1c:	4b04      	ldr	r3, [pc, #16]	@ (800cf30 <HAL_PCD_SuspendCallback+0x48>)
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	4a03      	ldr	r2, [pc, #12]	@ (800cf30 <HAL_PCD_SuspendCallback+0x48>)
 800cf22:	f043 0306 	orr.w	r3, r3, #6
 800cf26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	e000ed00 	.word	0xe000ed00

0800cf34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fd07 	bl	800b956 <USBD_LL_Resume>
}
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf62:	78fa      	ldrb	r2, [r7, #3]
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fd5f 	bl	800ba2a <USBD_LL_IsoOUTIncomplete>
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf86:	78fa      	ldrb	r2, [r7, #3]
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fd1b 	bl	800b9c6 <USBD_LL_IsoINIncomplete>
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fd71 	bl	800ba8e <USBD_LL_DevConnected>
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fd6e 	bl	800baa4 <USBD_LL_DevDisconnected>
}
 800cfc8:	bf00      	nop
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d13c      	bne.n	800d05a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cfe0:	4a20      	ldr	r2, [pc, #128]	@ (800d064 <USBD_LL_Init+0x94>)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a1e      	ldr	r2, [pc, #120]	@ (800d064 <USBD_LL_Init+0x94>)
 800cfec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cff0:	4b1c      	ldr	r3, [pc, #112]	@ (800d064 <USBD_LL_Init+0x94>)
 800cff2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cff6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cff8:	4b1a      	ldr	r3, [pc, #104]	@ (800d064 <USBD_LL_Init+0x94>)
 800cffa:	2204      	movs	r2, #4
 800cffc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cffe:	4b19      	ldr	r3, [pc, #100]	@ (800d064 <USBD_LL_Init+0x94>)
 800d000:	2202      	movs	r2, #2
 800d002:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d004:	4b17      	ldr	r3, [pc, #92]	@ (800d064 <USBD_LL_Init+0x94>)
 800d006:	2200      	movs	r2, #0
 800d008:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d00a:	4b16      	ldr	r3, [pc, #88]	@ (800d064 <USBD_LL_Init+0x94>)
 800d00c:	2202      	movs	r2, #2
 800d00e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d010:	4b14      	ldr	r3, [pc, #80]	@ (800d064 <USBD_LL_Init+0x94>)
 800d012:	2200      	movs	r2, #0
 800d014:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d016:	4b13      	ldr	r3, [pc, #76]	@ (800d064 <USBD_LL_Init+0x94>)
 800d018:	2200      	movs	r2, #0
 800d01a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d01c:	4b11      	ldr	r3, [pc, #68]	@ (800d064 <USBD_LL_Init+0x94>)
 800d01e:	2200      	movs	r2, #0
 800d020:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d022:	4b10      	ldr	r3, [pc, #64]	@ (800d064 <USBD_LL_Init+0x94>)
 800d024:	2200      	movs	r2, #0
 800d026:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d028:	4b0e      	ldr	r3, [pc, #56]	@ (800d064 <USBD_LL_Init+0x94>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d02e:	480d      	ldr	r0, [pc, #52]	@ (800d064 <USBD_LL_Init+0x94>)
 800d030:	f7f9 fbe1 	bl	80067f6 <HAL_PCD_Init>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d03a:	f7f6 ff03 	bl	8003e44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d03e:	2180      	movs	r1, #128	@ 0x80
 800d040:	4808      	ldr	r0, [pc, #32]	@ (800d064 <USBD_LL_Init+0x94>)
 800d042:	f7fa fe0e 	bl	8007c62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d046:	2240      	movs	r2, #64	@ 0x40
 800d048:	2100      	movs	r1, #0
 800d04a:	4806      	ldr	r0, [pc, #24]	@ (800d064 <USBD_LL_Init+0x94>)
 800d04c:	f7fa fdc2 	bl	8007bd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d050:	2280      	movs	r2, #128	@ 0x80
 800d052:	2101      	movs	r1, #1
 800d054:	4803      	ldr	r0, [pc, #12]	@ (800d064 <USBD_LL_Init+0x94>)
 800d056:	f7fa fdbd 	bl	8007bd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20001d38 	.word	0x20001d38

0800d068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d07e:	4618      	mov	r0, r3
 800d080:	f7f9 fcc8 	bl	8006a14 <HAL_PCD_Start>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f942 	bl	800d314 <USBD_Get_USB_Status>
 800d090:	4603      	mov	r3, r0
 800d092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d094:	7bbb      	ldrb	r3, [r7, #14]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	4608      	mov	r0, r1
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	70fb      	strb	r3, [r7, #3]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70bb      	strb	r3, [r7, #2]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0c6:	78bb      	ldrb	r3, [r7, #2]
 800d0c8:	883a      	ldrh	r2, [r7, #0]
 800d0ca:	78f9      	ldrb	r1, [r7, #3]
 800d0cc:	f7fa f99c 	bl	8007408 <HAL_PCD_EP_Open>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 f91c 	bl	800d314 <USBD_Get_USB_Status>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b084      	sub	sp, #16
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d104:	78fa      	ldrb	r2, [r7, #3]
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fa f9e7 	bl	80074dc <HAL_PCD_EP_Close>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	4618      	mov	r0, r3
 800d116:	f000 f8fd 	bl	800d314 <USBD_Get_USB_Status>
 800d11a:	4603      	mov	r3, r0
 800d11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	460b      	mov	r3, r1
 800d132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f7fa fa9f 	bl	800768a <HAL_PCD_EP_SetStall>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 f8de 	bl	800d314 <USBD_Get_USB_Status>
 800d158:	4603      	mov	r3, r0
 800d15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d180:	78fa      	ldrb	r2, [r7, #3]
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f7fa fae3 	bl	8007750 <HAL_PCD_EP_ClrStall>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 f8bf 	bl	800d314 <USBD_Get_USB_Status>
 800d196:	4603      	mov	r3, r0
 800d198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da0b      	bge.n	800d1d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1c6:	68f9      	ldr	r1, [r7, #12]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	3316      	adds	r3, #22
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	e00b      	b.n	800d1f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1de:	68f9      	ldr	r1, [r7, #12]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	4413      	add	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	440b      	add	r3, r1
 800d1ea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d1ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	460b      	mov	r3, r1
 800d206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fa f8d0 	bl	80073c0 <HAL_PCD_SetAddress>
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 f874 	bl	800d314 <USBD_Get_USB_Status>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d230:	7bbb      	ldrb	r3, [r7, #14]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b086      	sub	sp, #24
 800d23e:	af00      	add	r7, sp, #0
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	460b      	mov	r3, r1
 800d248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d258:	7af9      	ldrb	r1, [r7, #11]
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	f7fa f9da 	bl	8007616 <HAL_PCD_EP_Transmit>
 800d262:	4603      	mov	r3, r0
 800d264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d266:	7dfb      	ldrb	r3, [r7, #23]
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 f853 	bl	800d314 <USBD_Get_USB_Status>
 800d26e:	4603      	mov	r3, r0
 800d270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d272:	7dbb      	ldrb	r3, [r7, #22]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	607a      	str	r2, [r7, #4]
 800d286:	603b      	str	r3, [r7, #0]
 800d288:	460b      	mov	r3, r1
 800d28a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d29a:	7af9      	ldrb	r1, [r7, #11]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	f7fa f966 	bl	8007570 <HAL_PCD_EP_Receive>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 f832 	bl	800d314 <USBD_Get_USB_Status>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2d0:	78fa      	ldrb	r2, [r7, #3]
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fa f986 	bl	80075e6 <HAL_PCD_EP_GetRxCount>
 800d2da:	4603      	mov	r3, r0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2ec:	4b03      	ldr	r3, [pc, #12]	@ (800d2fc <USBD_static_malloc+0x18>)
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	2000221c 	.word	0x2000221c

0800d300 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]

}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	2b03      	cmp	r3, #3
 800d326:	d817      	bhi.n	800d358 <USBD_Get_USB_Status+0x44>
 800d328:	a201      	add	r2, pc, #4	@ (adr r2, 800d330 <USBD_Get_USB_Status+0x1c>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d341 	.word	0x0800d341
 800d334:	0800d347 	.word	0x0800d347
 800d338:	0800d34d 	.word	0x0800d34d
 800d33c:	0800d353 	.word	0x0800d353
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]
    break;
 800d344:	e00b      	b.n	800d35e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d346:	2303      	movs	r3, #3
 800d348:	73fb      	strb	r3, [r7, #15]
    break;
 800d34a:	e008      	b.n	800d35e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d34c:	2301      	movs	r3, #1
 800d34e:	73fb      	strb	r3, [r7, #15]
    break;
 800d350:	e005      	b.n	800d35e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d352:	2303      	movs	r3, #3
 800d354:	73fb      	strb	r3, [r7, #15]
    break;
 800d356:	e002      	b.n	800d35e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d358:	2303      	movs	r3, #3
 800d35a:	73fb      	strb	r3, [r7, #15]
    break;
 800d35c:	bf00      	nop
  }
  return usb_status;
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <malloc>:
 800d36c:	4b02      	ldr	r3, [pc, #8]	@ (800d378 <malloc+0xc>)
 800d36e:	4601      	mov	r1, r0
 800d370:	6818      	ldr	r0, [r3, #0]
 800d372:	f000 b825 	b.w	800d3c0 <_malloc_r>
 800d376:	bf00      	nop
 800d378:	20000138 	.word	0x20000138

0800d37c <sbrk_aligned>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	4e0f      	ldr	r6, [pc, #60]	@ (800d3bc <sbrk_aligned+0x40>)
 800d380:	460c      	mov	r4, r1
 800d382:	6831      	ldr	r1, [r6, #0]
 800d384:	4605      	mov	r5, r0
 800d386:	b911      	cbnz	r1, 800d38e <sbrk_aligned+0x12>
 800d388:	f000 ff4e 	bl	800e228 <_sbrk_r>
 800d38c:	6030      	str	r0, [r6, #0]
 800d38e:	4621      	mov	r1, r4
 800d390:	4628      	mov	r0, r5
 800d392:	f000 ff49 	bl	800e228 <_sbrk_r>
 800d396:	1c43      	adds	r3, r0, #1
 800d398:	d103      	bne.n	800d3a2 <sbrk_aligned+0x26>
 800d39a:	f04f 34ff 	mov.w	r4, #4294967295
 800d39e:	4620      	mov	r0, r4
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
 800d3a2:	1cc4      	adds	r4, r0, #3
 800d3a4:	f024 0403 	bic.w	r4, r4, #3
 800d3a8:	42a0      	cmp	r0, r4
 800d3aa:	d0f8      	beq.n	800d39e <sbrk_aligned+0x22>
 800d3ac:	1a21      	subs	r1, r4, r0
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f000 ff3a 	bl	800e228 <_sbrk_r>
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d1f2      	bne.n	800d39e <sbrk_aligned+0x22>
 800d3b8:	e7ef      	b.n	800d39a <sbrk_aligned+0x1e>
 800d3ba:	bf00      	nop
 800d3bc:	2000243c 	.word	0x2000243c

0800d3c0 <_malloc_r>:
 800d3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3c4:	1ccd      	adds	r5, r1, #3
 800d3c6:	f025 0503 	bic.w	r5, r5, #3
 800d3ca:	3508      	adds	r5, #8
 800d3cc:	2d0c      	cmp	r5, #12
 800d3ce:	bf38      	it	cc
 800d3d0:	250c      	movcc	r5, #12
 800d3d2:	2d00      	cmp	r5, #0
 800d3d4:	4606      	mov	r6, r0
 800d3d6:	db01      	blt.n	800d3dc <_malloc_r+0x1c>
 800d3d8:	42a9      	cmp	r1, r5
 800d3da:	d904      	bls.n	800d3e6 <_malloc_r+0x26>
 800d3dc:	230c      	movs	r3, #12
 800d3de:	6033      	str	r3, [r6, #0]
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4bc <_malloc_r+0xfc>
 800d3ea:	f000 f869 	bl	800d4c0 <__malloc_lock>
 800d3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800d3f2:	461c      	mov	r4, r3
 800d3f4:	bb44      	cbnz	r4, 800d448 <_malloc_r+0x88>
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f7ff ffbf 	bl	800d37c <sbrk_aligned>
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	4604      	mov	r4, r0
 800d402:	d158      	bne.n	800d4b6 <_malloc_r+0xf6>
 800d404:	f8d8 4000 	ldr.w	r4, [r8]
 800d408:	4627      	mov	r7, r4
 800d40a:	2f00      	cmp	r7, #0
 800d40c:	d143      	bne.n	800d496 <_malloc_r+0xd6>
 800d40e:	2c00      	cmp	r4, #0
 800d410:	d04b      	beq.n	800d4aa <_malloc_r+0xea>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	4639      	mov	r1, r7
 800d416:	4630      	mov	r0, r6
 800d418:	eb04 0903 	add.w	r9, r4, r3
 800d41c:	f000 ff04 	bl	800e228 <_sbrk_r>
 800d420:	4581      	cmp	r9, r0
 800d422:	d142      	bne.n	800d4aa <_malloc_r+0xea>
 800d424:	6821      	ldr	r1, [r4, #0]
 800d426:	1a6d      	subs	r5, r5, r1
 800d428:	4629      	mov	r1, r5
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7ff ffa6 	bl	800d37c <sbrk_aligned>
 800d430:	3001      	adds	r0, #1
 800d432:	d03a      	beq.n	800d4aa <_malloc_r+0xea>
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	442b      	add	r3, r5
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	f8d8 3000 	ldr.w	r3, [r8]
 800d43e:	685a      	ldr	r2, [r3, #4]
 800d440:	bb62      	cbnz	r2, 800d49c <_malloc_r+0xdc>
 800d442:	f8c8 7000 	str.w	r7, [r8]
 800d446:	e00f      	b.n	800d468 <_malloc_r+0xa8>
 800d448:	6822      	ldr	r2, [r4, #0]
 800d44a:	1b52      	subs	r2, r2, r5
 800d44c:	d420      	bmi.n	800d490 <_malloc_r+0xd0>
 800d44e:	2a0b      	cmp	r2, #11
 800d450:	d917      	bls.n	800d482 <_malloc_r+0xc2>
 800d452:	1961      	adds	r1, r4, r5
 800d454:	42a3      	cmp	r3, r4
 800d456:	6025      	str	r5, [r4, #0]
 800d458:	bf18      	it	ne
 800d45a:	6059      	strne	r1, [r3, #4]
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	bf08      	it	eq
 800d460:	f8c8 1000 	streq.w	r1, [r8]
 800d464:	5162      	str	r2, [r4, r5]
 800d466:	604b      	str	r3, [r1, #4]
 800d468:	4630      	mov	r0, r6
 800d46a:	f000 f82f 	bl	800d4cc <__malloc_unlock>
 800d46e:	f104 000b 	add.w	r0, r4, #11
 800d472:	1d23      	adds	r3, r4, #4
 800d474:	f020 0007 	bic.w	r0, r0, #7
 800d478:	1ac2      	subs	r2, r0, r3
 800d47a:	bf1c      	itt	ne
 800d47c:	1a1b      	subne	r3, r3, r0
 800d47e:	50a3      	strne	r3, [r4, r2]
 800d480:	e7af      	b.n	800d3e2 <_malloc_r+0x22>
 800d482:	6862      	ldr	r2, [r4, #4]
 800d484:	42a3      	cmp	r3, r4
 800d486:	bf0c      	ite	eq
 800d488:	f8c8 2000 	streq.w	r2, [r8]
 800d48c:	605a      	strne	r2, [r3, #4]
 800d48e:	e7eb      	b.n	800d468 <_malloc_r+0xa8>
 800d490:	4623      	mov	r3, r4
 800d492:	6864      	ldr	r4, [r4, #4]
 800d494:	e7ae      	b.n	800d3f4 <_malloc_r+0x34>
 800d496:	463c      	mov	r4, r7
 800d498:	687f      	ldr	r7, [r7, #4]
 800d49a:	e7b6      	b.n	800d40a <_malloc_r+0x4a>
 800d49c:	461a      	mov	r2, r3
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d1fb      	bne.n	800d49c <_malloc_r+0xdc>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	6053      	str	r3, [r2, #4]
 800d4a8:	e7de      	b.n	800d468 <_malloc_r+0xa8>
 800d4aa:	230c      	movs	r3, #12
 800d4ac:	6033      	str	r3, [r6, #0]
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f000 f80c 	bl	800d4cc <__malloc_unlock>
 800d4b4:	e794      	b.n	800d3e0 <_malloc_r+0x20>
 800d4b6:	6005      	str	r5, [r0, #0]
 800d4b8:	e7d6      	b.n	800d468 <_malloc_r+0xa8>
 800d4ba:	bf00      	nop
 800d4bc:	20002440 	.word	0x20002440

0800d4c0 <__malloc_lock>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	@ (800d4c8 <__malloc_lock+0x8>)
 800d4c2:	f000 befe 	b.w	800e2c2 <__retarget_lock_acquire_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	20002584 	.word	0x20002584

0800d4cc <__malloc_unlock>:
 800d4cc:	4801      	ldr	r0, [pc, #4]	@ (800d4d4 <__malloc_unlock+0x8>)
 800d4ce:	f000 bef9 	b.w	800e2c4 <__retarget_lock_release_recursive>
 800d4d2:	bf00      	nop
 800d4d4:	20002584 	.word	0x20002584

0800d4d8 <__cvt>:
 800d4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4dc:	ec57 6b10 	vmov	r6, r7, d0
 800d4e0:	2f00      	cmp	r7, #0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	463b      	mov	r3, r7
 800d4e8:	bfbb      	ittet	lt
 800d4ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d4ee:	461f      	movlt	r7, r3
 800d4f0:	2300      	movge	r3, #0
 800d4f2:	232d      	movlt	r3, #45	@ 0x2d
 800d4f4:	700b      	strb	r3, [r1, #0]
 800d4f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d4fc:	4691      	mov	r9, r2
 800d4fe:	f023 0820 	bic.w	r8, r3, #32
 800d502:	bfbc      	itt	lt
 800d504:	4632      	movlt	r2, r6
 800d506:	4616      	movlt	r6, r2
 800d508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d50c:	d005      	beq.n	800d51a <__cvt+0x42>
 800d50e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d512:	d100      	bne.n	800d516 <__cvt+0x3e>
 800d514:	3401      	adds	r4, #1
 800d516:	2102      	movs	r1, #2
 800d518:	e000      	b.n	800d51c <__cvt+0x44>
 800d51a:	2103      	movs	r1, #3
 800d51c:	ab03      	add	r3, sp, #12
 800d51e:	9301      	str	r3, [sp, #4]
 800d520:	ab02      	add	r3, sp, #8
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	ec47 6b10 	vmov	d0, r6, r7
 800d528:	4653      	mov	r3, sl
 800d52a:	4622      	mov	r2, r4
 800d52c:	f000 ff64 	bl	800e3f8 <_dtoa_r>
 800d530:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d534:	4605      	mov	r5, r0
 800d536:	d119      	bne.n	800d56c <__cvt+0x94>
 800d538:	f019 0f01 	tst.w	r9, #1
 800d53c:	d00e      	beq.n	800d55c <__cvt+0x84>
 800d53e:	eb00 0904 	add.w	r9, r0, r4
 800d542:	2200      	movs	r2, #0
 800d544:	2300      	movs	r3, #0
 800d546:	4630      	mov	r0, r6
 800d548:	4639      	mov	r1, r7
 800d54a:	f7f3 fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d54e:	b108      	cbz	r0, 800d554 <__cvt+0x7c>
 800d550:	f8cd 900c 	str.w	r9, [sp, #12]
 800d554:	2230      	movs	r2, #48	@ 0x30
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	454b      	cmp	r3, r9
 800d55a:	d31e      	bcc.n	800d59a <__cvt+0xc2>
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d560:	1b5b      	subs	r3, r3, r5
 800d562:	4628      	mov	r0, r5
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	b004      	add	sp, #16
 800d568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d570:	eb00 0904 	add.w	r9, r0, r4
 800d574:	d1e5      	bne.n	800d542 <__cvt+0x6a>
 800d576:	7803      	ldrb	r3, [r0, #0]
 800d578:	2b30      	cmp	r3, #48	@ 0x30
 800d57a:	d10a      	bne.n	800d592 <__cvt+0xba>
 800d57c:	2200      	movs	r2, #0
 800d57e:	2300      	movs	r3, #0
 800d580:	4630      	mov	r0, r6
 800d582:	4639      	mov	r1, r7
 800d584:	f7f3 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d588:	b918      	cbnz	r0, 800d592 <__cvt+0xba>
 800d58a:	f1c4 0401 	rsb	r4, r4, #1
 800d58e:	f8ca 4000 	str.w	r4, [sl]
 800d592:	f8da 3000 	ldr.w	r3, [sl]
 800d596:	4499      	add	r9, r3
 800d598:	e7d3      	b.n	800d542 <__cvt+0x6a>
 800d59a:	1c59      	adds	r1, r3, #1
 800d59c:	9103      	str	r1, [sp, #12]
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	e7d9      	b.n	800d556 <__cvt+0x7e>

0800d5a2 <__exponent>:
 800d5a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	bfba      	itte	lt
 800d5a8:	4249      	neglt	r1, r1
 800d5aa:	232d      	movlt	r3, #45	@ 0x2d
 800d5ac:	232b      	movge	r3, #43	@ 0x2b
 800d5ae:	2909      	cmp	r1, #9
 800d5b0:	7002      	strb	r2, [r0, #0]
 800d5b2:	7043      	strb	r3, [r0, #1]
 800d5b4:	dd29      	ble.n	800d60a <__exponent+0x68>
 800d5b6:	f10d 0307 	add.w	r3, sp, #7
 800d5ba:	461d      	mov	r5, r3
 800d5bc:	270a      	movs	r7, #10
 800d5be:	461a      	mov	r2, r3
 800d5c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d5c4:	fb07 1416 	mls	r4, r7, r6, r1
 800d5c8:	3430      	adds	r4, #48	@ 0x30
 800d5ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2c63      	cmp	r4, #99	@ 0x63
 800d5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	dcf1      	bgt.n	800d5be <__exponent+0x1c>
 800d5da:	3130      	adds	r1, #48	@ 0x30
 800d5dc:	1e94      	subs	r4, r2, #2
 800d5de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5e2:	1c41      	adds	r1, r0, #1
 800d5e4:	4623      	mov	r3, r4
 800d5e6:	42ab      	cmp	r3, r5
 800d5e8:	d30a      	bcc.n	800d600 <__exponent+0x5e>
 800d5ea:	f10d 0309 	add.w	r3, sp, #9
 800d5ee:	1a9b      	subs	r3, r3, r2
 800d5f0:	42ac      	cmp	r4, r5
 800d5f2:	bf88      	it	hi
 800d5f4:	2300      	movhi	r3, #0
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	4403      	add	r3, r0
 800d5fa:	1a18      	subs	r0, r3, r0
 800d5fc:	b003      	add	sp, #12
 800d5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d600:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d604:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d608:	e7ed      	b.n	800d5e6 <__exponent+0x44>
 800d60a:	2330      	movs	r3, #48	@ 0x30
 800d60c:	3130      	adds	r1, #48	@ 0x30
 800d60e:	7083      	strb	r3, [r0, #2]
 800d610:	70c1      	strb	r1, [r0, #3]
 800d612:	1d03      	adds	r3, r0, #4
 800d614:	e7f1      	b.n	800d5fa <__exponent+0x58>
	...

0800d618 <_printf_float>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	b08d      	sub	sp, #52	@ 0x34
 800d61e:	460c      	mov	r4, r1
 800d620:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d624:	4616      	mov	r6, r2
 800d626:	461f      	mov	r7, r3
 800d628:	4605      	mov	r5, r0
 800d62a:	f000 fdc5 	bl	800e1b8 <_localeconv_r>
 800d62e:	6803      	ldr	r3, [r0, #0]
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	4618      	mov	r0, r3
 800d634:	f7f2 fe1c 	bl	8000270 <strlen>
 800d638:	2300      	movs	r3, #0
 800d63a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d63c:	f8d8 3000 	ldr.w	r3, [r8]
 800d640:	9005      	str	r0, [sp, #20]
 800d642:	3307      	adds	r3, #7
 800d644:	f023 0307 	bic.w	r3, r3, #7
 800d648:	f103 0208 	add.w	r2, r3, #8
 800d64c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d650:	f8d4 b000 	ldr.w	fp, [r4]
 800d654:	f8c8 2000 	str.w	r2, [r8]
 800d658:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d65c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d660:	9307      	str	r3, [sp, #28]
 800d662:	f8cd 8018 	str.w	r8, [sp, #24]
 800d666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d66a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d66e:	4b9c      	ldr	r3, [pc, #624]	@ (800d8e0 <_printf_float+0x2c8>)
 800d670:	f04f 32ff 	mov.w	r2, #4294967295
 800d674:	f7f3 fa5a 	bl	8000b2c <__aeabi_dcmpun>
 800d678:	bb70      	cbnz	r0, 800d6d8 <_printf_float+0xc0>
 800d67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d67e:	4b98      	ldr	r3, [pc, #608]	@ (800d8e0 <_printf_float+0x2c8>)
 800d680:	f04f 32ff 	mov.w	r2, #4294967295
 800d684:	f7f3 fa34 	bl	8000af0 <__aeabi_dcmple>
 800d688:	bb30      	cbnz	r0, 800d6d8 <_printf_float+0xc0>
 800d68a:	2200      	movs	r2, #0
 800d68c:	2300      	movs	r3, #0
 800d68e:	4640      	mov	r0, r8
 800d690:	4649      	mov	r1, r9
 800d692:	f7f3 fa23 	bl	8000adc <__aeabi_dcmplt>
 800d696:	b110      	cbz	r0, 800d69e <_printf_float+0x86>
 800d698:	232d      	movs	r3, #45	@ 0x2d
 800d69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d69e:	4a91      	ldr	r2, [pc, #580]	@ (800d8e4 <_printf_float+0x2cc>)
 800d6a0:	4b91      	ldr	r3, [pc, #580]	@ (800d8e8 <_printf_float+0x2d0>)
 800d6a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6a6:	bf8c      	ite	hi
 800d6a8:	4690      	movhi	r8, r2
 800d6aa:	4698      	movls	r8, r3
 800d6ac:	2303      	movs	r3, #3
 800d6ae:	6123      	str	r3, [r4, #16]
 800d6b0:	f02b 0304 	bic.w	r3, fp, #4
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	f04f 0900 	mov.w	r9, #0
 800d6ba:	9700      	str	r7, [sp, #0]
 800d6bc:	4633      	mov	r3, r6
 800d6be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f000 f9d2 	bl	800da6c <_printf_common>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	f040 808d 	bne.w	800d7e8 <_printf_float+0x1d0>
 800d6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d2:	b00d      	add	sp, #52	@ 0x34
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d8:	4642      	mov	r2, r8
 800d6da:	464b      	mov	r3, r9
 800d6dc:	4640      	mov	r0, r8
 800d6de:	4649      	mov	r1, r9
 800d6e0:	f7f3 fa24 	bl	8000b2c <__aeabi_dcmpun>
 800d6e4:	b140      	cbz	r0, 800d6f8 <_printf_float+0xe0>
 800d6e6:	464b      	mov	r3, r9
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	bfbc      	itt	lt
 800d6ec:	232d      	movlt	r3, #45	@ 0x2d
 800d6ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d8ec <_printf_float+0x2d4>)
 800d6f4:	4b7e      	ldr	r3, [pc, #504]	@ (800d8f0 <_printf_float+0x2d8>)
 800d6f6:	e7d4      	b.n	800d6a2 <_printf_float+0x8a>
 800d6f8:	6863      	ldr	r3, [r4, #4]
 800d6fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d6fe:	9206      	str	r2, [sp, #24]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	d13b      	bne.n	800d77c <_printf_float+0x164>
 800d704:	2306      	movs	r3, #6
 800d706:	6063      	str	r3, [r4, #4]
 800d708:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d70c:	2300      	movs	r3, #0
 800d70e:	6022      	str	r2, [r4, #0]
 800d710:	9303      	str	r3, [sp, #12]
 800d712:	ab0a      	add	r3, sp, #40	@ 0x28
 800d714:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d718:	ab09      	add	r3, sp, #36	@ 0x24
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	6861      	ldr	r1, [r4, #4]
 800d71e:	ec49 8b10 	vmov	d0, r8, r9
 800d722:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d726:	4628      	mov	r0, r5
 800d728:	f7ff fed6 	bl	800d4d8 <__cvt>
 800d72c:	9b06      	ldr	r3, [sp, #24]
 800d72e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d730:	2b47      	cmp	r3, #71	@ 0x47
 800d732:	4680      	mov	r8, r0
 800d734:	d129      	bne.n	800d78a <_printf_float+0x172>
 800d736:	1cc8      	adds	r0, r1, #3
 800d738:	db02      	blt.n	800d740 <_printf_float+0x128>
 800d73a:	6863      	ldr	r3, [r4, #4]
 800d73c:	4299      	cmp	r1, r3
 800d73e:	dd41      	ble.n	800d7c4 <_printf_float+0x1ac>
 800d740:	f1aa 0a02 	sub.w	sl, sl, #2
 800d744:	fa5f fa8a 	uxtb.w	sl, sl
 800d748:	3901      	subs	r1, #1
 800d74a:	4652      	mov	r2, sl
 800d74c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d750:	9109      	str	r1, [sp, #36]	@ 0x24
 800d752:	f7ff ff26 	bl	800d5a2 <__exponent>
 800d756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d758:	1813      	adds	r3, r2, r0
 800d75a:	2a01      	cmp	r2, #1
 800d75c:	4681      	mov	r9, r0
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	dc02      	bgt.n	800d768 <_printf_float+0x150>
 800d762:	6822      	ldr	r2, [r4, #0]
 800d764:	07d2      	lsls	r2, r2, #31
 800d766:	d501      	bpl.n	800d76c <_printf_float+0x154>
 800d768:	3301      	adds	r3, #1
 800d76a:	6123      	str	r3, [r4, #16]
 800d76c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0a2      	beq.n	800d6ba <_printf_float+0xa2>
 800d774:	232d      	movs	r3, #45	@ 0x2d
 800d776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d77a:	e79e      	b.n	800d6ba <_printf_float+0xa2>
 800d77c:	9a06      	ldr	r2, [sp, #24]
 800d77e:	2a47      	cmp	r2, #71	@ 0x47
 800d780:	d1c2      	bne.n	800d708 <_printf_float+0xf0>
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1c0      	bne.n	800d708 <_printf_float+0xf0>
 800d786:	2301      	movs	r3, #1
 800d788:	e7bd      	b.n	800d706 <_printf_float+0xee>
 800d78a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d78e:	d9db      	bls.n	800d748 <_printf_float+0x130>
 800d790:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d794:	d118      	bne.n	800d7c8 <_printf_float+0x1b0>
 800d796:	2900      	cmp	r1, #0
 800d798:	6863      	ldr	r3, [r4, #4]
 800d79a:	dd0b      	ble.n	800d7b4 <_printf_float+0x19c>
 800d79c:	6121      	str	r1, [r4, #16]
 800d79e:	b913      	cbnz	r3, 800d7a6 <_printf_float+0x18e>
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	07d0      	lsls	r0, r2, #31
 800d7a4:	d502      	bpl.n	800d7ac <_printf_float+0x194>
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	440b      	add	r3, r1
 800d7aa:	6123      	str	r3, [r4, #16]
 800d7ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d7ae:	f04f 0900 	mov.w	r9, #0
 800d7b2:	e7db      	b.n	800d76c <_printf_float+0x154>
 800d7b4:	b913      	cbnz	r3, 800d7bc <_printf_float+0x1a4>
 800d7b6:	6822      	ldr	r2, [r4, #0]
 800d7b8:	07d2      	lsls	r2, r2, #31
 800d7ba:	d501      	bpl.n	800d7c0 <_printf_float+0x1a8>
 800d7bc:	3302      	adds	r3, #2
 800d7be:	e7f4      	b.n	800d7aa <_printf_float+0x192>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e7f2      	b.n	800d7aa <_printf_float+0x192>
 800d7c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	db05      	blt.n	800d7da <_printf_float+0x1c2>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	6121      	str	r1, [r4, #16]
 800d7d2:	07d8      	lsls	r0, r3, #31
 800d7d4:	d5ea      	bpl.n	800d7ac <_printf_float+0x194>
 800d7d6:	1c4b      	adds	r3, r1, #1
 800d7d8:	e7e7      	b.n	800d7aa <_printf_float+0x192>
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	bfd4      	ite	le
 800d7de:	f1c1 0202 	rsble	r2, r1, #2
 800d7e2:	2201      	movgt	r2, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	e7e0      	b.n	800d7aa <_printf_float+0x192>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	055a      	lsls	r2, r3, #21
 800d7ec:	d407      	bmi.n	800d7fe <_printf_float+0x1e6>
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	4642      	mov	r2, r8
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	47b8      	blx	r7
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d12b      	bne.n	800d854 <_printf_float+0x23c>
 800d7fc:	e767      	b.n	800d6ce <_printf_float+0xb6>
 800d7fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d802:	f240 80dd 	bls.w	800d9c0 <_printf_float+0x3a8>
 800d806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d80a:	2200      	movs	r2, #0
 800d80c:	2300      	movs	r3, #0
 800d80e:	f7f3 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d812:	2800      	cmp	r0, #0
 800d814:	d033      	beq.n	800d87e <_printf_float+0x266>
 800d816:	4a37      	ldr	r2, [pc, #220]	@ (800d8f4 <_printf_float+0x2dc>)
 800d818:	2301      	movs	r3, #1
 800d81a:	4631      	mov	r1, r6
 800d81c:	4628      	mov	r0, r5
 800d81e:	47b8      	blx	r7
 800d820:	3001      	adds	r0, #1
 800d822:	f43f af54 	beq.w	800d6ce <_printf_float+0xb6>
 800d826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d82a:	4543      	cmp	r3, r8
 800d82c:	db02      	blt.n	800d834 <_printf_float+0x21c>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	07d8      	lsls	r0, r3, #31
 800d832:	d50f      	bpl.n	800d854 <_printf_float+0x23c>
 800d834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d838:	4631      	mov	r1, r6
 800d83a:	4628      	mov	r0, r5
 800d83c:	47b8      	blx	r7
 800d83e:	3001      	adds	r0, #1
 800d840:	f43f af45 	beq.w	800d6ce <_printf_float+0xb6>
 800d844:	f04f 0900 	mov.w	r9, #0
 800d848:	f108 38ff 	add.w	r8, r8, #4294967295
 800d84c:	f104 0a1a 	add.w	sl, r4, #26
 800d850:	45c8      	cmp	r8, r9
 800d852:	dc09      	bgt.n	800d868 <_printf_float+0x250>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	079b      	lsls	r3, r3, #30
 800d858:	f100 8103 	bmi.w	800da62 <_printf_float+0x44a>
 800d85c:	68e0      	ldr	r0, [r4, #12]
 800d85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d860:	4298      	cmp	r0, r3
 800d862:	bfb8      	it	lt
 800d864:	4618      	movlt	r0, r3
 800d866:	e734      	b.n	800d6d2 <_printf_float+0xba>
 800d868:	2301      	movs	r3, #1
 800d86a:	4652      	mov	r2, sl
 800d86c:	4631      	mov	r1, r6
 800d86e:	4628      	mov	r0, r5
 800d870:	47b8      	blx	r7
 800d872:	3001      	adds	r0, #1
 800d874:	f43f af2b 	beq.w	800d6ce <_printf_float+0xb6>
 800d878:	f109 0901 	add.w	r9, r9, #1
 800d87c:	e7e8      	b.n	800d850 <_printf_float+0x238>
 800d87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	dc39      	bgt.n	800d8f8 <_printf_float+0x2e0>
 800d884:	4a1b      	ldr	r2, [pc, #108]	@ (800d8f4 <_printf_float+0x2dc>)
 800d886:	2301      	movs	r3, #1
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f af1d 	beq.w	800d6ce <_printf_float+0xb6>
 800d894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d898:	ea59 0303 	orrs.w	r3, r9, r3
 800d89c:	d102      	bne.n	800d8a4 <_printf_float+0x28c>
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	07d9      	lsls	r1, r3, #31
 800d8a2:	d5d7      	bpl.n	800d854 <_printf_float+0x23c>
 800d8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8a8:	4631      	mov	r1, r6
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	47b8      	blx	r7
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	f43f af0d 	beq.w	800d6ce <_printf_float+0xb6>
 800d8b4:	f04f 0a00 	mov.w	sl, #0
 800d8b8:	f104 0b1a 	add.w	fp, r4, #26
 800d8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8be:	425b      	negs	r3, r3
 800d8c0:	4553      	cmp	r3, sl
 800d8c2:	dc01      	bgt.n	800d8c8 <_printf_float+0x2b0>
 800d8c4:	464b      	mov	r3, r9
 800d8c6:	e793      	b.n	800d7f0 <_printf_float+0x1d8>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	465a      	mov	r2, fp
 800d8cc:	4631      	mov	r1, r6
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b8      	blx	r7
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	f43f aefb 	beq.w	800d6ce <_printf_float+0xb6>
 800d8d8:	f10a 0a01 	add.w	sl, sl, #1
 800d8dc:	e7ee      	b.n	800d8bc <_printf_float+0x2a4>
 800d8de:	bf00      	nop
 800d8e0:	7fefffff 	.word	0x7fefffff
 800d8e4:	08010a44 	.word	0x08010a44
 800d8e8:	08010a40 	.word	0x08010a40
 800d8ec:	08010a4c 	.word	0x08010a4c
 800d8f0:	08010a48 	.word	0x08010a48
 800d8f4:	08010a50 	.word	0x08010a50
 800d8f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8fe:	4553      	cmp	r3, sl
 800d900:	bfa8      	it	ge
 800d902:	4653      	movge	r3, sl
 800d904:	2b00      	cmp	r3, #0
 800d906:	4699      	mov	r9, r3
 800d908:	dc36      	bgt.n	800d978 <_printf_float+0x360>
 800d90a:	f04f 0b00 	mov.w	fp, #0
 800d90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d912:	f104 021a 	add.w	r2, r4, #26
 800d916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d918:	9306      	str	r3, [sp, #24]
 800d91a:	eba3 0309 	sub.w	r3, r3, r9
 800d91e:	455b      	cmp	r3, fp
 800d920:	dc31      	bgt.n	800d986 <_printf_float+0x36e>
 800d922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d924:	459a      	cmp	sl, r3
 800d926:	dc3a      	bgt.n	800d99e <_printf_float+0x386>
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	07da      	lsls	r2, r3, #31
 800d92c:	d437      	bmi.n	800d99e <_printf_float+0x386>
 800d92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d930:	ebaa 0903 	sub.w	r9, sl, r3
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	ebaa 0303 	sub.w	r3, sl, r3
 800d93a:	4599      	cmp	r9, r3
 800d93c:	bfa8      	it	ge
 800d93e:	4699      	movge	r9, r3
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	dc33      	bgt.n	800d9ae <_printf_float+0x396>
 800d946:	f04f 0800 	mov.w	r8, #0
 800d94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d94e:	f104 0b1a 	add.w	fp, r4, #26
 800d952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d954:	ebaa 0303 	sub.w	r3, sl, r3
 800d958:	eba3 0309 	sub.w	r3, r3, r9
 800d95c:	4543      	cmp	r3, r8
 800d95e:	f77f af79 	ble.w	800d854 <_printf_float+0x23c>
 800d962:	2301      	movs	r3, #1
 800d964:	465a      	mov	r2, fp
 800d966:	4631      	mov	r1, r6
 800d968:	4628      	mov	r0, r5
 800d96a:	47b8      	blx	r7
 800d96c:	3001      	adds	r0, #1
 800d96e:	f43f aeae 	beq.w	800d6ce <_printf_float+0xb6>
 800d972:	f108 0801 	add.w	r8, r8, #1
 800d976:	e7ec      	b.n	800d952 <_printf_float+0x33a>
 800d978:	4642      	mov	r2, r8
 800d97a:	4631      	mov	r1, r6
 800d97c:	4628      	mov	r0, r5
 800d97e:	47b8      	blx	r7
 800d980:	3001      	adds	r0, #1
 800d982:	d1c2      	bne.n	800d90a <_printf_float+0x2f2>
 800d984:	e6a3      	b.n	800d6ce <_printf_float+0xb6>
 800d986:	2301      	movs	r3, #1
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	9206      	str	r2, [sp, #24]
 800d98e:	47b8      	blx	r7
 800d990:	3001      	adds	r0, #1
 800d992:	f43f ae9c 	beq.w	800d6ce <_printf_float+0xb6>
 800d996:	9a06      	ldr	r2, [sp, #24]
 800d998:	f10b 0b01 	add.w	fp, fp, #1
 800d99c:	e7bb      	b.n	800d916 <_printf_float+0x2fe>
 800d99e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	47b8      	blx	r7
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d1c0      	bne.n	800d92e <_printf_float+0x316>
 800d9ac:	e68f      	b.n	800d6ce <_printf_float+0xb6>
 800d9ae:	9a06      	ldr	r2, [sp, #24]
 800d9b0:	464b      	mov	r3, r9
 800d9b2:	4442      	add	r2, r8
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	47b8      	blx	r7
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	d1c3      	bne.n	800d946 <_printf_float+0x32e>
 800d9be:	e686      	b.n	800d6ce <_printf_float+0xb6>
 800d9c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9c4:	f1ba 0f01 	cmp.w	sl, #1
 800d9c8:	dc01      	bgt.n	800d9ce <_printf_float+0x3b6>
 800d9ca:	07db      	lsls	r3, r3, #31
 800d9cc:	d536      	bpl.n	800da3c <_printf_float+0x424>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b8      	blx	r7
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f43f ae78 	beq.w	800d6ce <_printf_float+0xb6>
 800d9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b8      	blx	r7
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	f43f ae70 	beq.w	800d6ce <_printf_float+0xb6>
 800d9ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9fa:	f7f3 f865 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9fe:	b9c0      	cbnz	r0, 800da32 <_printf_float+0x41a>
 800da00:	4653      	mov	r3, sl
 800da02:	f108 0201 	add.w	r2, r8, #1
 800da06:	4631      	mov	r1, r6
 800da08:	4628      	mov	r0, r5
 800da0a:	47b8      	blx	r7
 800da0c:	3001      	adds	r0, #1
 800da0e:	d10c      	bne.n	800da2a <_printf_float+0x412>
 800da10:	e65d      	b.n	800d6ce <_printf_float+0xb6>
 800da12:	2301      	movs	r3, #1
 800da14:	465a      	mov	r2, fp
 800da16:	4631      	mov	r1, r6
 800da18:	4628      	mov	r0, r5
 800da1a:	47b8      	blx	r7
 800da1c:	3001      	adds	r0, #1
 800da1e:	f43f ae56 	beq.w	800d6ce <_printf_float+0xb6>
 800da22:	f108 0801 	add.w	r8, r8, #1
 800da26:	45d0      	cmp	r8, sl
 800da28:	dbf3      	blt.n	800da12 <_printf_float+0x3fa>
 800da2a:	464b      	mov	r3, r9
 800da2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da30:	e6df      	b.n	800d7f2 <_printf_float+0x1da>
 800da32:	f04f 0800 	mov.w	r8, #0
 800da36:	f104 0b1a 	add.w	fp, r4, #26
 800da3a:	e7f4      	b.n	800da26 <_printf_float+0x40e>
 800da3c:	2301      	movs	r3, #1
 800da3e:	4642      	mov	r2, r8
 800da40:	e7e1      	b.n	800da06 <_printf_float+0x3ee>
 800da42:	2301      	movs	r3, #1
 800da44:	464a      	mov	r2, r9
 800da46:	4631      	mov	r1, r6
 800da48:	4628      	mov	r0, r5
 800da4a:	47b8      	blx	r7
 800da4c:	3001      	adds	r0, #1
 800da4e:	f43f ae3e 	beq.w	800d6ce <_printf_float+0xb6>
 800da52:	f108 0801 	add.w	r8, r8, #1
 800da56:	68e3      	ldr	r3, [r4, #12]
 800da58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da5a:	1a5b      	subs	r3, r3, r1
 800da5c:	4543      	cmp	r3, r8
 800da5e:	dcf0      	bgt.n	800da42 <_printf_float+0x42a>
 800da60:	e6fc      	b.n	800d85c <_printf_float+0x244>
 800da62:	f04f 0800 	mov.w	r8, #0
 800da66:	f104 0919 	add.w	r9, r4, #25
 800da6a:	e7f4      	b.n	800da56 <_printf_float+0x43e>

0800da6c <_printf_common>:
 800da6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da70:	4616      	mov	r6, r2
 800da72:	4698      	mov	r8, r3
 800da74:	688a      	ldr	r2, [r1, #8]
 800da76:	690b      	ldr	r3, [r1, #16]
 800da78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da7c:	4293      	cmp	r3, r2
 800da7e:	bfb8      	it	lt
 800da80:	4613      	movlt	r3, r2
 800da82:	6033      	str	r3, [r6, #0]
 800da84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da88:	4607      	mov	r7, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	b10a      	cbz	r2, 800da92 <_printf_common+0x26>
 800da8e:	3301      	adds	r3, #1
 800da90:	6033      	str	r3, [r6, #0]
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	0699      	lsls	r1, r3, #26
 800da96:	bf42      	ittt	mi
 800da98:	6833      	ldrmi	r3, [r6, #0]
 800da9a:	3302      	addmi	r3, #2
 800da9c:	6033      	strmi	r3, [r6, #0]
 800da9e:	6825      	ldr	r5, [r4, #0]
 800daa0:	f015 0506 	ands.w	r5, r5, #6
 800daa4:	d106      	bne.n	800dab4 <_printf_common+0x48>
 800daa6:	f104 0a19 	add.w	sl, r4, #25
 800daaa:	68e3      	ldr	r3, [r4, #12]
 800daac:	6832      	ldr	r2, [r6, #0]
 800daae:	1a9b      	subs	r3, r3, r2
 800dab0:	42ab      	cmp	r3, r5
 800dab2:	dc26      	bgt.n	800db02 <_printf_common+0x96>
 800dab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dab8:	6822      	ldr	r2, [r4, #0]
 800daba:	3b00      	subs	r3, #0
 800dabc:	bf18      	it	ne
 800dabe:	2301      	movne	r3, #1
 800dac0:	0692      	lsls	r2, r2, #26
 800dac2:	d42b      	bmi.n	800db1c <_printf_common+0xb0>
 800dac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dac8:	4641      	mov	r1, r8
 800daca:	4638      	mov	r0, r7
 800dacc:	47c8      	blx	r9
 800dace:	3001      	adds	r0, #1
 800dad0:	d01e      	beq.n	800db10 <_printf_common+0xa4>
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	6922      	ldr	r2, [r4, #16]
 800dad6:	f003 0306 	and.w	r3, r3, #6
 800dada:	2b04      	cmp	r3, #4
 800dadc:	bf02      	ittt	eq
 800dade:	68e5      	ldreq	r5, [r4, #12]
 800dae0:	6833      	ldreq	r3, [r6, #0]
 800dae2:	1aed      	subeq	r5, r5, r3
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	bf0c      	ite	eq
 800dae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daec:	2500      	movne	r5, #0
 800daee:	4293      	cmp	r3, r2
 800daf0:	bfc4      	itt	gt
 800daf2:	1a9b      	subgt	r3, r3, r2
 800daf4:	18ed      	addgt	r5, r5, r3
 800daf6:	2600      	movs	r6, #0
 800daf8:	341a      	adds	r4, #26
 800dafa:	42b5      	cmp	r5, r6
 800dafc:	d11a      	bne.n	800db34 <_printf_common+0xc8>
 800dafe:	2000      	movs	r0, #0
 800db00:	e008      	b.n	800db14 <_printf_common+0xa8>
 800db02:	2301      	movs	r3, #1
 800db04:	4652      	mov	r2, sl
 800db06:	4641      	mov	r1, r8
 800db08:	4638      	mov	r0, r7
 800db0a:	47c8      	blx	r9
 800db0c:	3001      	adds	r0, #1
 800db0e:	d103      	bne.n	800db18 <_printf_common+0xac>
 800db10:	f04f 30ff 	mov.w	r0, #4294967295
 800db14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db18:	3501      	adds	r5, #1
 800db1a:	e7c6      	b.n	800daaa <_printf_common+0x3e>
 800db1c:	18e1      	adds	r1, r4, r3
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	2030      	movs	r0, #48	@ 0x30
 800db22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db26:	4422      	add	r2, r4
 800db28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db30:	3302      	adds	r3, #2
 800db32:	e7c7      	b.n	800dac4 <_printf_common+0x58>
 800db34:	2301      	movs	r3, #1
 800db36:	4622      	mov	r2, r4
 800db38:	4641      	mov	r1, r8
 800db3a:	4638      	mov	r0, r7
 800db3c:	47c8      	blx	r9
 800db3e:	3001      	adds	r0, #1
 800db40:	d0e6      	beq.n	800db10 <_printf_common+0xa4>
 800db42:	3601      	adds	r6, #1
 800db44:	e7d9      	b.n	800dafa <_printf_common+0x8e>
	...

0800db48 <_printf_i>:
 800db48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db4c:	7e0f      	ldrb	r7, [r1, #24]
 800db4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db50:	2f78      	cmp	r7, #120	@ 0x78
 800db52:	4691      	mov	r9, r2
 800db54:	4680      	mov	r8, r0
 800db56:	460c      	mov	r4, r1
 800db58:	469a      	mov	sl, r3
 800db5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db5e:	d807      	bhi.n	800db70 <_printf_i+0x28>
 800db60:	2f62      	cmp	r7, #98	@ 0x62
 800db62:	d80a      	bhi.n	800db7a <_printf_i+0x32>
 800db64:	2f00      	cmp	r7, #0
 800db66:	f000 80d1 	beq.w	800dd0c <_printf_i+0x1c4>
 800db6a:	2f58      	cmp	r7, #88	@ 0x58
 800db6c:	f000 80b8 	beq.w	800dce0 <_printf_i+0x198>
 800db70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db78:	e03a      	b.n	800dbf0 <_printf_i+0xa8>
 800db7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db7e:	2b15      	cmp	r3, #21
 800db80:	d8f6      	bhi.n	800db70 <_printf_i+0x28>
 800db82:	a101      	add	r1, pc, #4	@ (adr r1, 800db88 <_printf_i+0x40>)
 800db84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db88:	0800dbe1 	.word	0x0800dbe1
 800db8c:	0800dbf5 	.word	0x0800dbf5
 800db90:	0800db71 	.word	0x0800db71
 800db94:	0800db71 	.word	0x0800db71
 800db98:	0800db71 	.word	0x0800db71
 800db9c:	0800db71 	.word	0x0800db71
 800dba0:	0800dbf5 	.word	0x0800dbf5
 800dba4:	0800db71 	.word	0x0800db71
 800dba8:	0800db71 	.word	0x0800db71
 800dbac:	0800db71 	.word	0x0800db71
 800dbb0:	0800db71 	.word	0x0800db71
 800dbb4:	0800dcf3 	.word	0x0800dcf3
 800dbb8:	0800dc1f 	.word	0x0800dc1f
 800dbbc:	0800dcad 	.word	0x0800dcad
 800dbc0:	0800db71 	.word	0x0800db71
 800dbc4:	0800db71 	.word	0x0800db71
 800dbc8:	0800dd15 	.word	0x0800dd15
 800dbcc:	0800db71 	.word	0x0800db71
 800dbd0:	0800dc1f 	.word	0x0800dc1f
 800dbd4:	0800db71 	.word	0x0800db71
 800dbd8:	0800db71 	.word	0x0800db71
 800dbdc:	0800dcb5 	.word	0x0800dcb5
 800dbe0:	6833      	ldr	r3, [r6, #0]
 800dbe2:	1d1a      	adds	r2, r3, #4
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6032      	str	r2, [r6, #0]
 800dbe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e09c      	b.n	800dd2e <_printf_i+0x1e6>
 800dbf4:	6833      	ldr	r3, [r6, #0]
 800dbf6:	6820      	ldr	r0, [r4, #0]
 800dbf8:	1d19      	adds	r1, r3, #4
 800dbfa:	6031      	str	r1, [r6, #0]
 800dbfc:	0606      	lsls	r6, r0, #24
 800dbfe:	d501      	bpl.n	800dc04 <_printf_i+0xbc>
 800dc00:	681d      	ldr	r5, [r3, #0]
 800dc02:	e003      	b.n	800dc0c <_printf_i+0xc4>
 800dc04:	0645      	lsls	r5, r0, #25
 800dc06:	d5fb      	bpl.n	800dc00 <_printf_i+0xb8>
 800dc08:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc0c:	2d00      	cmp	r5, #0
 800dc0e:	da03      	bge.n	800dc18 <_printf_i+0xd0>
 800dc10:	232d      	movs	r3, #45	@ 0x2d
 800dc12:	426d      	negs	r5, r5
 800dc14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc18:	4858      	ldr	r0, [pc, #352]	@ (800dd7c <_printf_i+0x234>)
 800dc1a:	230a      	movs	r3, #10
 800dc1c:	e011      	b.n	800dc42 <_printf_i+0xfa>
 800dc1e:	6821      	ldr	r1, [r4, #0]
 800dc20:	6833      	ldr	r3, [r6, #0]
 800dc22:	0608      	lsls	r0, r1, #24
 800dc24:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc28:	d402      	bmi.n	800dc30 <_printf_i+0xe8>
 800dc2a:	0649      	lsls	r1, r1, #25
 800dc2c:	bf48      	it	mi
 800dc2e:	b2ad      	uxthmi	r5, r5
 800dc30:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc32:	4852      	ldr	r0, [pc, #328]	@ (800dd7c <_printf_i+0x234>)
 800dc34:	6033      	str	r3, [r6, #0]
 800dc36:	bf14      	ite	ne
 800dc38:	230a      	movne	r3, #10
 800dc3a:	2308      	moveq	r3, #8
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc42:	6866      	ldr	r6, [r4, #4]
 800dc44:	60a6      	str	r6, [r4, #8]
 800dc46:	2e00      	cmp	r6, #0
 800dc48:	db05      	blt.n	800dc56 <_printf_i+0x10e>
 800dc4a:	6821      	ldr	r1, [r4, #0]
 800dc4c:	432e      	orrs	r6, r5
 800dc4e:	f021 0104 	bic.w	r1, r1, #4
 800dc52:	6021      	str	r1, [r4, #0]
 800dc54:	d04b      	beq.n	800dcee <_printf_i+0x1a6>
 800dc56:	4616      	mov	r6, r2
 800dc58:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc5c:	fb03 5711 	mls	r7, r3, r1, r5
 800dc60:	5dc7      	ldrb	r7, [r0, r7]
 800dc62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc66:	462f      	mov	r7, r5
 800dc68:	42bb      	cmp	r3, r7
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	d9f4      	bls.n	800dc58 <_printf_i+0x110>
 800dc6e:	2b08      	cmp	r3, #8
 800dc70:	d10b      	bne.n	800dc8a <_printf_i+0x142>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	07df      	lsls	r7, r3, #31
 800dc76:	d508      	bpl.n	800dc8a <_printf_i+0x142>
 800dc78:	6923      	ldr	r3, [r4, #16]
 800dc7a:	6861      	ldr	r1, [r4, #4]
 800dc7c:	4299      	cmp	r1, r3
 800dc7e:	bfde      	ittt	le
 800dc80:	2330      	movle	r3, #48	@ 0x30
 800dc82:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc86:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc8a:	1b92      	subs	r2, r2, r6
 800dc8c:	6122      	str	r2, [r4, #16]
 800dc8e:	f8cd a000 	str.w	sl, [sp]
 800dc92:	464b      	mov	r3, r9
 800dc94:	aa03      	add	r2, sp, #12
 800dc96:	4621      	mov	r1, r4
 800dc98:	4640      	mov	r0, r8
 800dc9a:	f7ff fee7 	bl	800da6c <_printf_common>
 800dc9e:	3001      	adds	r0, #1
 800dca0:	d14a      	bne.n	800dd38 <_printf_i+0x1f0>
 800dca2:	f04f 30ff 	mov.w	r0, #4294967295
 800dca6:	b004      	add	sp, #16
 800dca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	f043 0320 	orr.w	r3, r3, #32
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	4832      	ldr	r0, [pc, #200]	@ (800dd80 <_printf_i+0x238>)
 800dcb6:	2778      	movs	r7, #120	@ 0x78
 800dcb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	6831      	ldr	r1, [r6, #0]
 800dcc0:	061f      	lsls	r7, r3, #24
 800dcc2:	f851 5b04 	ldr.w	r5, [r1], #4
 800dcc6:	d402      	bmi.n	800dcce <_printf_i+0x186>
 800dcc8:	065f      	lsls	r7, r3, #25
 800dcca:	bf48      	it	mi
 800dccc:	b2ad      	uxthmi	r5, r5
 800dcce:	6031      	str	r1, [r6, #0]
 800dcd0:	07d9      	lsls	r1, r3, #31
 800dcd2:	bf44      	itt	mi
 800dcd4:	f043 0320 	orrmi.w	r3, r3, #32
 800dcd8:	6023      	strmi	r3, [r4, #0]
 800dcda:	b11d      	cbz	r5, 800dce4 <_printf_i+0x19c>
 800dcdc:	2310      	movs	r3, #16
 800dcde:	e7ad      	b.n	800dc3c <_printf_i+0xf4>
 800dce0:	4826      	ldr	r0, [pc, #152]	@ (800dd7c <_printf_i+0x234>)
 800dce2:	e7e9      	b.n	800dcb8 <_printf_i+0x170>
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	f023 0320 	bic.w	r3, r3, #32
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	e7f6      	b.n	800dcdc <_printf_i+0x194>
 800dcee:	4616      	mov	r6, r2
 800dcf0:	e7bd      	b.n	800dc6e <_printf_i+0x126>
 800dcf2:	6833      	ldr	r3, [r6, #0]
 800dcf4:	6825      	ldr	r5, [r4, #0]
 800dcf6:	6961      	ldr	r1, [r4, #20]
 800dcf8:	1d18      	adds	r0, r3, #4
 800dcfa:	6030      	str	r0, [r6, #0]
 800dcfc:	062e      	lsls	r6, r5, #24
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	d501      	bpl.n	800dd06 <_printf_i+0x1be>
 800dd02:	6019      	str	r1, [r3, #0]
 800dd04:	e002      	b.n	800dd0c <_printf_i+0x1c4>
 800dd06:	0668      	lsls	r0, r5, #25
 800dd08:	d5fb      	bpl.n	800dd02 <_printf_i+0x1ba>
 800dd0a:	8019      	strh	r1, [r3, #0]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	4616      	mov	r6, r2
 800dd12:	e7bc      	b.n	800dc8e <_printf_i+0x146>
 800dd14:	6833      	ldr	r3, [r6, #0]
 800dd16:	1d1a      	adds	r2, r3, #4
 800dd18:	6032      	str	r2, [r6, #0]
 800dd1a:	681e      	ldr	r6, [r3, #0]
 800dd1c:	6862      	ldr	r2, [r4, #4]
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7f2 fa55 	bl	80001d0 <memchr>
 800dd26:	b108      	cbz	r0, 800dd2c <_printf_i+0x1e4>
 800dd28:	1b80      	subs	r0, r0, r6
 800dd2a:	6060      	str	r0, [r4, #4]
 800dd2c:	6863      	ldr	r3, [r4, #4]
 800dd2e:	6123      	str	r3, [r4, #16]
 800dd30:	2300      	movs	r3, #0
 800dd32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd36:	e7aa      	b.n	800dc8e <_printf_i+0x146>
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	4632      	mov	r2, r6
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4640      	mov	r0, r8
 800dd40:	47d0      	blx	sl
 800dd42:	3001      	adds	r0, #1
 800dd44:	d0ad      	beq.n	800dca2 <_printf_i+0x15a>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	079b      	lsls	r3, r3, #30
 800dd4a:	d413      	bmi.n	800dd74 <_printf_i+0x22c>
 800dd4c:	68e0      	ldr	r0, [r4, #12]
 800dd4e:	9b03      	ldr	r3, [sp, #12]
 800dd50:	4298      	cmp	r0, r3
 800dd52:	bfb8      	it	lt
 800dd54:	4618      	movlt	r0, r3
 800dd56:	e7a6      	b.n	800dca6 <_printf_i+0x15e>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	4632      	mov	r2, r6
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	4640      	mov	r0, r8
 800dd60:	47d0      	blx	sl
 800dd62:	3001      	adds	r0, #1
 800dd64:	d09d      	beq.n	800dca2 <_printf_i+0x15a>
 800dd66:	3501      	adds	r5, #1
 800dd68:	68e3      	ldr	r3, [r4, #12]
 800dd6a:	9903      	ldr	r1, [sp, #12]
 800dd6c:	1a5b      	subs	r3, r3, r1
 800dd6e:	42ab      	cmp	r3, r5
 800dd70:	dcf2      	bgt.n	800dd58 <_printf_i+0x210>
 800dd72:	e7eb      	b.n	800dd4c <_printf_i+0x204>
 800dd74:	2500      	movs	r5, #0
 800dd76:	f104 0619 	add.w	r6, r4, #25
 800dd7a:	e7f5      	b.n	800dd68 <_printf_i+0x220>
 800dd7c:	08010a52 	.word	0x08010a52
 800dd80:	08010a63 	.word	0x08010a63

0800dd84 <std>:
 800dd84:	2300      	movs	r3, #0
 800dd86:	b510      	push	{r4, lr}
 800dd88:	4604      	mov	r4, r0
 800dd8a:	e9c0 3300 	strd	r3, r3, [r0]
 800dd8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd92:	6083      	str	r3, [r0, #8]
 800dd94:	8181      	strh	r1, [r0, #12]
 800dd96:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd98:	81c2      	strh	r2, [r0, #14]
 800dd9a:	6183      	str	r3, [r0, #24]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	2208      	movs	r2, #8
 800dda0:	305c      	adds	r0, #92	@ 0x5c
 800dda2:	f000 fa01 	bl	800e1a8 <memset>
 800dda6:	4b0d      	ldr	r3, [pc, #52]	@ (800dddc <std+0x58>)
 800dda8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dde0 <std+0x5c>)
 800ddac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddae:	4b0d      	ldr	r3, [pc, #52]	@ (800dde4 <std+0x60>)
 800ddb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dde8 <std+0x64>)
 800ddb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ddec <std+0x68>)
 800ddb8:	6224      	str	r4, [r4, #32]
 800ddba:	429c      	cmp	r4, r3
 800ddbc:	d006      	beq.n	800ddcc <std+0x48>
 800ddbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ddc2:	4294      	cmp	r4, r2
 800ddc4:	d002      	beq.n	800ddcc <std+0x48>
 800ddc6:	33d0      	adds	r3, #208	@ 0xd0
 800ddc8:	429c      	cmp	r4, r3
 800ddca:	d105      	bne.n	800ddd8 <std+0x54>
 800ddcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ddd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddd4:	f000 ba74 	b.w	800e2c0 <__retarget_lock_init_recursive>
 800ddd8:	bd10      	pop	{r4, pc}
 800ddda:	bf00      	nop
 800dddc:	0800dff9 	.word	0x0800dff9
 800dde0:	0800e01b 	.word	0x0800e01b
 800dde4:	0800e053 	.word	0x0800e053
 800dde8:	0800e077 	.word	0x0800e077
 800ddec:	20002444 	.word	0x20002444

0800ddf0 <stdio_exit_handler>:
 800ddf0:	4a02      	ldr	r2, [pc, #8]	@ (800ddfc <stdio_exit_handler+0xc>)
 800ddf2:	4903      	ldr	r1, [pc, #12]	@ (800de00 <stdio_exit_handler+0x10>)
 800ddf4:	4803      	ldr	r0, [pc, #12]	@ (800de04 <stdio_exit_handler+0x14>)
 800ddf6:	f000 b869 	b.w	800decc <_fwalk_sglue>
 800ddfa:	bf00      	nop
 800ddfc:	2000012c 	.word	0x2000012c
 800de00:	0800faad 	.word	0x0800faad
 800de04:	2000013c 	.word	0x2000013c

0800de08 <cleanup_stdio>:
 800de08:	6841      	ldr	r1, [r0, #4]
 800de0a:	4b0c      	ldr	r3, [pc, #48]	@ (800de3c <cleanup_stdio+0x34>)
 800de0c:	4299      	cmp	r1, r3
 800de0e:	b510      	push	{r4, lr}
 800de10:	4604      	mov	r4, r0
 800de12:	d001      	beq.n	800de18 <cleanup_stdio+0x10>
 800de14:	f001 fe4a 	bl	800faac <_fflush_r>
 800de18:	68a1      	ldr	r1, [r4, #8]
 800de1a:	4b09      	ldr	r3, [pc, #36]	@ (800de40 <cleanup_stdio+0x38>)
 800de1c:	4299      	cmp	r1, r3
 800de1e:	d002      	beq.n	800de26 <cleanup_stdio+0x1e>
 800de20:	4620      	mov	r0, r4
 800de22:	f001 fe43 	bl	800faac <_fflush_r>
 800de26:	68e1      	ldr	r1, [r4, #12]
 800de28:	4b06      	ldr	r3, [pc, #24]	@ (800de44 <cleanup_stdio+0x3c>)
 800de2a:	4299      	cmp	r1, r3
 800de2c:	d004      	beq.n	800de38 <cleanup_stdio+0x30>
 800de2e:	4620      	mov	r0, r4
 800de30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de34:	f001 be3a 	b.w	800faac <_fflush_r>
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	bf00      	nop
 800de3c:	20002444 	.word	0x20002444
 800de40:	200024ac 	.word	0x200024ac
 800de44:	20002514 	.word	0x20002514

0800de48 <global_stdio_init.part.0>:
 800de48:	b510      	push	{r4, lr}
 800de4a:	4b0b      	ldr	r3, [pc, #44]	@ (800de78 <global_stdio_init.part.0+0x30>)
 800de4c:	4c0b      	ldr	r4, [pc, #44]	@ (800de7c <global_stdio_init.part.0+0x34>)
 800de4e:	4a0c      	ldr	r2, [pc, #48]	@ (800de80 <global_stdio_init.part.0+0x38>)
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	4620      	mov	r0, r4
 800de54:	2200      	movs	r2, #0
 800de56:	2104      	movs	r1, #4
 800de58:	f7ff ff94 	bl	800dd84 <std>
 800de5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de60:	2201      	movs	r2, #1
 800de62:	2109      	movs	r1, #9
 800de64:	f7ff ff8e 	bl	800dd84 <std>
 800de68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de6c:	2202      	movs	r2, #2
 800de6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de72:	2112      	movs	r1, #18
 800de74:	f7ff bf86 	b.w	800dd84 <std>
 800de78:	2000257c 	.word	0x2000257c
 800de7c:	20002444 	.word	0x20002444
 800de80:	0800ddf1 	.word	0x0800ddf1

0800de84 <__sfp_lock_acquire>:
 800de84:	4801      	ldr	r0, [pc, #4]	@ (800de8c <__sfp_lock_acquire+0x8>)
 800de86:	f000 ba1c 	b.w	800e2c2 <__retarget_lock_acquire_recursive>
 800de8a:	bf00      	nop
 800de8c:	20002585 	.word	0x20002585

0800de90 <__sfp_lock_release>:
 800de90:	4801      	ldr	r0, [pc, #4]	@ (800de98 <__sfp_lock_release+0x8>)
 800de92:	f000 ba17 	b.w	800e2c4 <__retarget_lock_release_recursive>
 800de96:	bf00      	nop
 800de98:	20002585 	.word	0x20002585

0800de9c <__sinit>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	f7ff fff0 	bl	800de84 <__sfp_lock_acquire>
 800dea4:	6a23      	ldr	r3, [r4, #32]
 800dea6:	b11b      	cbz	r3, 800deb0 <__sinit+0x14>
 800dea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deac:	f7ff bff0 	b.w	800de90 <__sfp_lock_release>
 800deb0:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <__sinit+0x28>)
 800deb2:	6223      	str	r3, [r4, #32]
 800deb4:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <__sinit+0x2c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1f5      	bne.n	800dea8 <__sinit+0xc>
 800debc:	f7ff ffc4 	bl	800de48 <global_stdio_init.part.0>
 800dec0:	e7f2      	b.n	800dea8 <__sinit+0xc>
 800dec2:	bf00      	nop
 800dec4:	0800de09 	.word	0x0800de09
 800dec8:	2000257c 	.word	0x2000257c

0800decc <_fwalk_sglue>:
 800decc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ded0:	4607      	mov	r7, r0
 800ded2:	4688      	mov	r8, r1
 800ded4:	4614      	mov	r4, r2
 800ded6:	2600      	movs	r6, #0
 800ded8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dedc:	f1b9 0901 	subs.w	r9, r9, #1
 800dee0:	d505      	bpl.n	800deee <_fwalk_sglue+0x22>
 800dee2:	6824      	ldr	r4, [r4, #0]
 800dee4:	2c00      	cmp	r4, #0
 800dee6:	d1f7      	bne.n	800ded8 <_fwalk_sglue+0xc>
 800dee8:	4630      	mov	r0, r6
 800deea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deee:	89ab      	ldrh	r3, [r5, #12]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d907      	bls.n	800df04 <_fwalk_sglue+0x38>
 800def4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800def8:	3301      	adds	r3, #1
 800defa:	d003      	beq.n	800df04 <_fwalk_sglue+0x38>
 800defc:	4629      	mov	r1, r5
 800defe:	4638      	mov	r0, r7
 800df00:	47c0      	blx	r8
 800df02:	4306      	orrs	r6, r0
 800df04:	3568      	adds	r5, #104	@ 0x68
 800df06:	e7e9      	b.n	800dedc <_fwalk_sglue+0x10>

0800df08 <iprintf>:
 800df08:	b40f      	push	{r0, r1, r2, r3}
 800df0a:	b507      	push	{r0, r1, r2, lr}
 800df0c:	4906      	ldr	r1, [pc, #24]	@ (800df28 <iprintf+0x20>)
 800df0e:	ab04      	add	r3, sp, #16
 800df10:	6808      	ldr	r0, [r1, #0]
 800df12:	f853 2b04 	ldr.w	r2, [r3], #4
 800df16:	6881      	ldr	r1, [r0, #8]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f001 fc2b 	bl	800f774 <_vfiprintf_r>
 800df1e:	b003      	add	sp, #12
 800df20:	f85d eb04 	ldr.w	lr, [sp], #4
 800df24:	b004      	add	sp, #16
 800df26:	4770      	bx	lr
 800df28:	20000138 	.word	0x20000138

0800df2c <putchar>:
 800df2c:	4b02      	ldr	r3, [pc, #8]	@ (800df38 <putchar+0xc>)
 800df2e:	4601      	mov	r1, r0
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	6882      	ldr	r2, [r0, #8]
 800df34:	f001 be44 	b.w	800fbc0 <_putc_r>
 800df38:	20000138 	.word	0x20000138

0800df3c <_puts_r>:
 800df3c:	6a03      	ldr	r3, [r0, #32]
 800df3e:	b570      	push	{r4, r5, r6, lr}
 800df40:	6884      	ldr	r4, [r0, #8]
 800df42:	4605      	mov	r5, r0
 800df44:	460e      	mov	r6, r1
 800df46:	b90b      	cbnz	r3, 800df4c <_puts_r+0x10>
 800df48:	f7ff ffa8 	bl	800de9c <__sinit>
 800df4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df4e:	07db      	lsls	r3, r3, #31
 800df50:	d405      	bmi.n	800df5e <_puts_r+0x22>
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	0598      	lsls	r0, r3, #22
 800df56:	d402      	bmi.n	800df5e <_puts_r+0x22>
 800df58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df5a:	f000 f9b2 	bl	800e2c2 <__retarget_lock_acquire_recursive>
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	0719      	lsls	r1, r3, #28
 800df62:	d502      	bpl.n	800df6a <_puts_r+0x2e>
 800df64:	6923      	ldr	r3, [r4, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d135      	bne.n	800dfd6 <_puts_r+0x9a>
 800df6a:	4621      	mov	r1, r4
 800df6c:	4628      	mov	r0, r5
 800df6e:	f000 f8c5 	bl	800e0fc <__swsetup_r>
 800df72:	b380      	cbz	r0, 800dfd6 <_puts_r+0x9a>
 800df74:	f04f 35ff 	mov.w	r5, #4294967295
 800df78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df7a:	07da      	lsls	r2, r3, #31
 800df7c:	d405      	bmi.n	800df8a <_puts_r+0x4e>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	059b      	lsls	r3, r3, #22
 800df82:	d402      	bmi.n	800df8a <_puts_r+0x4e>
 800df84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df86:	f000 f99d 	bl	800e2c4 <__retarget_lock_release_recursive>
 800df8a:	4628      	mov	r0, r5
 800df8c:	bd70      	pop	{r4, r5, r6, pc}
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da04      	bge.n	800df9c <_puts_r+0x60>
 800df92:	69a2      	ldr	r2, [r4, #24]
 800df94:	429a      	cmp	r2, r3
 800df96:	dc17      	bgt.n	800dfc8 <_puts_r+0x8c>
 800df98:	290a      	cmp	r1, #10
 800df9a:	d015      	beq.n	800dfc8 <_puts_r+0x8c>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	6022      	str	r2, [r4, #0]
 800dfa2:	7019      	strb	r1, [r3, #0]
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	2900      	cmp	r1, #0
 800dfb0:	d1ed      	bne.n	800df8e <_puts_r+0x52>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	da11      	bge.n	800dfda <_puts_r+0x9e>
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	210a      	movs	r1, #10
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f000 f85f 	bl	800e07e <__swbuf_r>
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	d0d7      	beq.n	800df74 <_puts_r+0x38>
 800dfc4:	250a      	movs	r5, #10
 800dfc6:	e7d7      	b.n	800df78 <_puts_r+0x3c>
 800dfc8:	4622      	mov	r2, r4
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f000 f857 	bl	800e07e <__swbuf_r>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d1e7      	bne.n	800dfa4 <_puts_r+0x68>
 800dfd4:	e7ce      	b.n	800df74 <_puts_r+0x38>
 800dfd6:	3e01      	subs	r6, #1
 800dfd8:	e7e4      	b.n	800dfa4 <_puts_r+0x68>
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	6022      	str	r2, [r4, #0]
 800dfe0:	220a      	movs	r2, #10
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	e7ee      	b.n	800dfc4 <_puts_r+0x88>
	...

0800dfe8 <puts>:
 800dfe8:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <puts+0xc>)
 800dfea:	4601      	mov	r1, r0
 800dfec:	6818      	ldr	r0, [r3, #0]
 800dfee:	f7ff bfa5 	b.w	800df3c <_puts_r>
 800dff2:	bf00      	nop
 800dff4:	20000138 	.word	0x20000138

0800dff8 <__sread>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	460c      	mov	r4, r1
 800dffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e000:	f000 f900 	bl	800e204 <_read_r>
 800e004:	2800      	cmp	r0, #0
 800e006:	bfab      	itete	ge
 800e008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e00a:	89a3      	ldrhlt	r3, [r4, #12]
 800e00c:	181b      	addge	r3, r3, r0
 800e00e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e012:	bfac      	ite	ge
 800e014:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e016:	81a3      	strhlt	r3, [r4, #12]
 800e018:	bd10      	pop	{r4, pc}

0800e01a <__swrite>:
 800e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01e:	461f      	mov	r7, r3
 800e020:	898b      	ldrh	r3, [r1, #12]
 800e022:	05db      	lsls	r3, r3, #23
 800e024:	4605      	mov	r5, r0
 800e026:	460c      	mov	r4, r1
 800e028:	4616      	mov	r6, r2
 800e02a:	d505      	bpl.n	800e038 <__swrite+0x1e>
 800e02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e030:	2302      	movs	r3, #2
 800e032:	2200      	movs	r2, #0
 800e034:	f000 f8d4 	bl	800e1e0 <_lseek_r>
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e03e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e042:	81a3      	strh	r3, [r4, #12]
 800e044:	4632      	mov	r2, r6
 800e046:	463b      	mov	r3, r7
 800e048:	4628      	mov	r0, r5
 800e04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e04e:	f000 b8fb 	b.w	800e248 <_write_r>

0800e052 <__sseek>:
 800e052:	b510      	push	{r4, lr}
 800e054:	460c      	mov	r4, r1
 800e056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e05a:	f000 f8c1 	bl	800e1e0 <_lseek_r>
 800e05e:	1c43      	adds	r3, r0, #1
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	bf15      	itete	ne
 800e064:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e06a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e06e:	81a3      	strheq	r3, [r4, #12]
 800e070:	bf18      	it	ne
 800e072:	81a3      	strhne	r3, [r4, #12]
 800e074:	bd10      	pop	{r4, pc}

0800e076 <__sclose>:
 800e076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e07a:	f000 b8a1 	b.w	800e1c0 <_close_r>

0800e07e <__swbuf_r>:
 800e07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e080:	460e      	mov	r6, r1
 800e082:	4614      	mov	r4, r2
 800e084:	4605      	mov	r5, r0
 800e086:	b118      	cbz	r0, 800e090 <__swbuf_r+0x12>
 800e088:	6a03      	ldr	r3, [r0, #32]
 800e08a:	b90b      	cbnz	r3, 800e090 <__swbuf_r+0x12>
 800e08c:	f7ff ff06 	bl	800de9c <__sinit>
 800e090:	69a3      	ldr	r3, [r4, #24]
 800e092:	60a3      	str	r3, [r4, #8]
 800e094:	89a3      	ldrh	r3, [r4, #12]
 800e096:	071a      	lsls	r2, r3, #28
 800e098:	d501      	bpl.n	800e09e <__swbuf_r+0x20>
 800e09a:	6923      	ldr	r3, [r4, #16]
 800e09c:	b943      	cbnz	r3, 800e0b0 <__swbuf_r+0x32>
 800e09e:	4621      	mov	r1, r4
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	f000 f82b 	bl	800e0fc <__swsetup_r>
 800e0a6:	b118      	cbz	r0, 800e0b0 <__swbuf_r+0x32>
 800e0a8:	f04f 37ff 	mov.w	r7, #4294967295
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	6922      	ldr	r2, [r4, #16]
 800e0b4:	1a98      	subs	r0, r3, r2
 800e0b6:	6963      	ldr	r3, [r4, #20]
 800e0b8:	b2f6      	uxtb	r6, r6
 800e0ba:	4283      	cmp	r3, r0
 800e0bc:	4637      	mov	r7, r6
 800e0be:	dc05      	bgt.n	800e0cc <__swbuf_r+0x4e>
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f001 fcf2 	bl	800faac <_fflush_r>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1ed      	bne.n	800e0a8 <__swbuf_r+0x2a>
 800e0cc:	68a3      	ldr	r3, [r4, #8]
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	60a3      	str	r3, [r4, #8]
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	1c5a      	adds	r2, r3, #1
 800e0d6:	6022      	str	r2, [r4, #0]
 800e0d8:	701e      	strb	r6, [r3, #0]
 800e0da:	6962      	ldr	r2, [r4, #20]
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d004      	beq.n	800e0ec <__swbuf_r+0x6e>
 800e0e2:	89a3      	ldrh	r3, [r4, #12]
 800e0e4:	07db      	lsls	r3, r3, #31
 800e0e6:	d5e1      	bpl.n	800e0ac <__swbuf_r+0x2e>
 800e0e8:	2e0a      	cmp	r6, #10
 800e0ea:	d1df      	bne.n	800e0ac <__swbuf_r+0x2e>
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	f001 fcdc 	bl	800faac <_fflush_r>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d0d9      	beq.n	800e0ac <__swbuf_r+0x2e>
 800e0f8:	e7d6      	b.n	800e0a8 <__swbuf_r+0x2a>
	...

0800e0fc <__swsetup_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4b29      	ldr	r3, [pc, #164]	@ (800e1a4 <__swsetup_r+0xa8>)
 800e100:	4605      	mov	r5, r0
 800e102:	6818      	ldr	r0, [r3, #0]
 800e104:	460c      	mov	r4, r1
 800e106:	b118      	cbz	r0, 800e110 <__swsetup_r+0x14>
 800e108:	6a03      	ldr	r3, [r0, #32]
 800e10a:	b90b      	cbnz	r3, 800e110 <__swsetup_r+0x14>
 800e10c:	f7ff fec6 	bl	800de9c <__sinit>
 800e110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e114:	0719      	lsls	r1, r3, #28
 800e116:	d422      	bmi.n	800e15e <__swsetup_r+0x62>
 800e118:	06da      	lsls	r2, r3, #27
 800e11a:	d407      	bmi.n	800e12c <__swsetup_r+0x30>
 800e11c:	2209      	movs	r2, #9
 800e11e:	602a      	str	r2, [r5, #0]
 800e120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	f04f 30ff 	mov.w	r0, #4294967295
 800e12a:	e033      	b.n	800e194 <__swsetup_r+0x98>
 800e12c:	0758      	lsls	r0, r3, #29
 800e12e:	d512      	bpl.n	800e156 <__swsetup_r+0x5a>
 800e130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e132:	b141      	cbz	r1, 800e146 <__swsetup_r+0x4a>
 800e134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d002      	beq.n	800e142 <__swsetup_r+0x46>
 800e13c:	4628      	mov	r0, r5
 800e13e:	f000 ff2b 	bl	800ef98 <_free_r>
 800e142:	2300      	movs	r3, #0
 800e144:	6363      	str	r3, [r4, #52]	@ 0x34
 800e146:	89a3      	ldrh	r3, [r4, #12]
 800e148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e14c:	81a3      	strh	r3, [r4, #12]
 800e14e:	2300      	movs	r3, #0
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	f043 0308 	orr.w	r3, r3, #8
 800e15c:	81a3      	strh	r3, [r4, #12]
 800e15e:	6923      	ldr	r3, [r4, #16]
 800e160:	b94b      	cbnz	r3, 800e176 <__swsetup_r+0x7a>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e16c:	d003      	beq.n	800e176 <__swsetup_r+0x7a>
 800e16e:	4621      	mov	r1, r4
 800e170:	4628      	mov	r0, r5
 800e172:	f001 fce9 	bl	800fb48 <__smakebuf_r>
 800e176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e17a:	f013 0201 	ands.w	r2, r3, #1
 800e17e:	d00a      	beq.n	800e196 <__swsetup_r+0x9a>
 800e180:	2200      	movs	r2, #0
 800e182:	60a2      	str	r2, [r4, #8]
 800e184:	6962      	ldr	r2, [r4, #20]
 800e186:	4252      	negs	r2, r2
 800e188:	61a2      	str	r2, [r4, #24]
 800e18a:	6922      	ldr	r2, [r4, #16]
 800e18c:	b942      	cbnz	r2, 800e1a0 <__swsetup_r+0xa4>
 800e18e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e192:	d1c5      	bne.n	800e120 <__swsetup_r+0x24>
 800e194:	bd38      	pop	{r3, r4, r5, pc}
 800e196:	0799      	lsls	r1, r3, #30
 800e198:	bf58      	it	pl
 800e19a:	6962      	ldrpl	r2, [r4, #20]
 800e19c:	60a2      	str	r2, [r4, #8]
 800e19e:	e7f4      	b.n	800e18a <__swsetup_r+0x8e>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	e7f7      	b.n	800e194 <__swsetup_r+0x98>
 800e1a4:	20000138 	.word	0x20000138

0800e1a8 <memset>:
 800e1a8:	4402      	add	r2, r0
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d100      	bne.n	800e1b2 <memset+0xa>
 800e1b0:	4770      	bx	lr
 800e1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1b6:	e7f9      	b.n	800e1ac <memset+0x4>

0800e1b8 <_localeconv_r>:
 800e1b8:	4800      	ldr	r0, [pc, #0]	@ (800e1bc <_localeconv_r+0x4>)
 800e1ba:	4770      	bx	lr
 800e1bc:	20000278 	.word	0x20000278

0800e1c0 <_close_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d06      	ldr	r5, [pc, #24]	@ (800e1dc <_close_r+0x1c>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	602b      	str	r3, [r5, #0]
 800e1cc:	f7f6 f9c2 	bl	8004554 <_close>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_close_r+0x1a>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_close_r+0x1a>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	20002580 	.word	0x20002580

0800e1e0 <_lseek_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4d07      	ldr	r5, [pc, #28]	@ (800e200 <_lseek_r+0x20>)
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	4608      	mov	r0, r1
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	602a      	str	r2, [r5, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f7f6 f9d7 	bl	80045a2 <_lseek>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	d102      	bne.n	800e1fe <_lseek_r+0x1e>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	b103      	cbz	r3, 800e1fe <_lseek_r+0x1e>
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	20002580 	.word	0x20002580

0800e204 <_read_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	@ (800e224 <_read_r+0x20>)
 800e208:	4604      	mov	r4, r0
 800e20a:	4608      	mov	r0, r1
 800e20c:	4611      	mov	r1, r2
 800e20e:	2200      	movs	r2, #0
 800e210:	602a      	str	r2, [r5, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f7f6 f981 	bl	800451a <_read>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_read_r+0x1e>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_read_r+0x1e>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20002580 	.word	0x20002580

0800e228 <_sbrk_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d06      	ldr	r5, [pc, #24]	@ (800e244 <_sbrk_r+0x1c>)
 800e22c:	2300      	movs	r3, #0
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	602b      	str	r3, [r5, #0]
 800e234:	f7f6 f9c2 	bl	80045bc <_sbrk>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_sbrk_r+0x1a>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_sbrk_r+0x1a>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	20002580 	.word	0x20002580

0800e248 <_write_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4d07      	ldr	r5, [pc, #28]	@ (800e268 <_write_r+0x20>)
 800e24c:	4604      	mov	r4, r0
 800e24e:	4608      	mov	r0, r1
 800e250:	4611      	mov	r1, r2
 800e252:	2200      	movs	r2, #0
 800e254:	602a      	str	r2, [r5, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	f7f5 fb05 	bl	8003866 <_write>
 800e25c:	1c43      	adds	r3, r0, #1
 800e25e:	d102      	bne.n	800e266 <_write_r+0x1e>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	b103      	cbz	r3, 800e266 <_write_r+0x1e>
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	bd38      	pop	{r3, r4, r5, pc}
 800e268:	20002580 	.word	0x20002580

0800e26c <__errno>:
 800e26c:	4b01      	ldr	r3, [pc, #4]	@ (800e274 <__errno+0x8>)
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	20000138 	.word	0x20000138

0800e278 <__libc_init_array>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	4d0d      	ldr	r5, [pc, #52]	@ (800e2b0 <__libc_init_array+0x38>)
 800e27c:	4c0d      	ldr	r4, [pc, #52]	@ (800e2b4 <__libc_init_array+0x3c>)
 800e27e:	1b64      	subs	r4, r4, r5
 800e280:	10a4      	asrs	r4, r4, #2
 800e282:	2600      	movs	r6, #0
 800e284:	42a6      	cmp	r6, r4
 800e286:	d109      	bne.n	800e29c <__libc_init_array+0x24>
 800e288:	4d0b      	ldr	r5, [pc, #44]	@ (800e2b8 <__libc_init_array+0x40>)
 800e28a:	4c0c      	ldr	r4, [pc, #48]	@ (800e2bc <__libc_init_array+0x44>)
 800e28c:	f002 f9ac 	bl	80105e8 <_init>
 800e290:	1b64      	subs	r4, r4, r5
 800e292:	10a4      	asrs	r4, r4, #2
 800e294:	2600      	movs	r6, #0
 800e296:	42a6      	cmp	r6, r4
 800e298:	d105      	bne.n	800e2a6 <__libc_init_array+0x2e>
 800e29a:	bd70      	pop	{r4, r5, r6, pc}
 800e29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2a0:	4798      	blx	r3
 800e2a2:	3601      	adds	r6, #1
 800e2a4:	e7ee      	b.n	800e284 <__libc_init_array+0xc>
 800e2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2aa:	4798      	blx	r3
 800e2ac:	3601      	adds	r6, #1
 800e2ae:	e7f2      	b.n	800e296 <__libc_init_array+0x1e>
 800e2b0:	08010df0 	.word	0x08010df0
 800e2b4:	08010df0 	.word	0x08010df0
 800e2b8:	08010df0 	.word	0x08010df0
 800e2bc:	08010df4 	.word	0x08010df4

0800e2c0 <__retarget_lock_init_recursive>:
 800e2c0:	4770      	bx	lr

0800e2c2 <__retarget_lock_acquire_recursive>:
 800e2c2:	4770      	bx	lr

0800e2c4 <__retarget_lock_release_recursive>:
 800e2c4:	4770      	bx	lr

0800e2c6 <memcpy>:
 800e2c6:	440a      	add	r2, r1
 800e2c8:	4291      	cmp	r1, r2
 800e2ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2ce:	d100      	bne.n	800e2d2 <memcpy+0xc>
 800e2d0:	4770      	bx	lr
 800e2d2:	b510      	push	{r4, lr}
 800e2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2dc:	4291      	cmp	r1, r2
 800e2de:	d1f9      	bne.n	800e2d4 <memcpy+0xe>
 800e2e0:	bd10      	pop	{r4, pc}

0800e2e2 <quorem>:
 800e2e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e6:	6903      	ldr	r3, [r0, #16]
 800e2e8:	690c      	ldr	r4, [r1, #16]
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	db7e      	blt.n	800e3ee <quorem+0x10c>
 800e2f0:	3c01      	subs	r4, #1
 800e2f2:	f101 0814 	add.w	r8, r1, #20
 800e2f6:	00a3      	lsls	r3, r4, #2
 800e2f8:	f100 0514 	add.w	r5, r0, #20
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e30c:	3301      	adds	r3, #1
 800e30e:	429a      	cmp	r2, r3
 800e310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e314:	fbb2 f6f3 	udiv	r6, r2, r3
 800e318:	d32e      	bcc.n	800e378 <quorem+0x96>
 800e31a:	f04f 0a00 	mov.w	sl, #0
 800e31e:	46c4      	mov	ip, r8
 800e320:	46ae      	mov	lr, r5
 800e322:	46d3      	mov	fp, sl
 800e324:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e328:	b298      	uxth	r0, r3
 800e32a:	fb06 a000 	mla	r0, r6, r0, sl
 800e32e:	0c02      	lsrs	r2, r0, #16
 800e330:	0c1b      	lsrs	r3, r3, #16
 800e332:	fb06 2303 	mla	r3, r6, r3, r2
 800e336:	f8de 2000 	ldr.w	r2, [lr]
 800e33a:	b280      	uxth	r0, r0
 800e33c:	b292      	uxth	r2, r2
 800e33e:	1a12      	subs	r2, r2, r0
 800e340:	445a      	add	r2, fp
 800e342:	f8de 0000 	ldr.w	r0, [lr]
 800e346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e350:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e354:	b292      	uxth	r2, r2
 800e356:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e35a:	45e1      	cmp	r9, ip
 800e35c:	f84e 2b04 	str.w	r2, [lr], #4
 800e360:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e364:	d2de      	bcs.n	800e324 <quorem+0x42>
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	58eb      	ldr	r3, [r5, r3]
 800e36a:	b92b      	cbnz	r3, 800e378 <quorem+0x96>
 800e36c:	9b01      	ldr	r3, [sp, #4]
 800e36e:	3b04      	subs	r3, #4
 800e370:	429d      	cmp	r5, r3
 800e372:	461a      	mov	r2, r3
 800e374:	d32f      	bcc.n	800e3d6 <quorem+0xf4>
 800e376:	613c      	str	r4, [r7, #16]
 800e378:	4638      	mov	r0, r7
 800e37a:	f001 f8c9 	bl	800f510 <__mcmp>
 800e37e:	2800      	cmp	r0, #0
 800e380:	db25      	blt.n	800e3ce <quorem+0xec>
 800e382:	4629      	mov	r1, r5
 800e384:	2000      	movs	r0, #0
 800e386:	f858 2b04 	ldr.w	r2, [r8], #4
 800e38a:	f8d1 c000 	ldr.w	ip, [r1]
 800e38e:	fa1f fe82 	uxth.w	lr, r2
 800e392:	fa1f f38c 	uxth.w	r3, ip
 800e396:	eba3 030e 	sub.w	r3, r3, lr
 800e39a:	4403      	add	r3, r0
 800e39c:	0c12      	lsrs	r2, r2, #16
 800e39e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e3a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ac:	45c1      	cmp	r9, r8
 800e3ae:	f841 3b04 	str.w	r3, [r1], #4
 800e3b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3b6:	d2e6      	bcs.n	800e386 <quorem+0xa4>
 800e3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3c0:	b922      	cbnz	r2, 800e3cc <quorem+0xea>
 800e3c2:	3b04      	subs	r3, #4
 800e3c4:	429d      	cmp	r5, r3
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	d30b      	bcc.n	800e3e2 <quorem+0x100>
 800e3ca:	613c      	str	r4, [r7, #16]
 800e3cc:	3601      	adds	r6, #1
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	b003      	add	sp, #12
 800e3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d6:	6812      	ldr	r2, [r2, #0]
 800e3d8:	3b04      	subs	r3, #4
 800e3da:	2a00      	cmp	r2, #0
 800e3dc:	d1cb      	bne.n	800e376 <quorem+0x94>
 800e3de:	3c01      	subs	r4, #1
 800e3e0:	e7c6      	b.n	800e370 <quorem+0x8e>
 800e3e2:	6812      	ldr	r2, [r2, #0]
 800e3e4:	3b04      	subs	r3, #4
 800e3e6:	2a00      	cmp	r2, #0
 800e3e8:	d1ef      	bne.n	800e3ca <quorem+0xe8>
 800e3ea:	3c01      	subs	r4, #1
 800e3ec:	e7ea      	b.n	800e3c4 <quorem+0xe2>
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	e7ee      	b.n	800e3d0 <quorem+0xee>
 800e3f2:	0000      	movs	r0, r0
 800e3f4:	0000      	movs	r0, r0
	...

0800e3f8 <_dtoa_r>:
 800e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	69c7      	ldr	r7, [r0, #28]
 800e3fe:	b097      	sub	sp, #92	@ 0x5c
 800e400:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e404:	ec55 4b10 	vmov	r4, r5, d0
 800e408:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e40a:	9107      	str	r1, [sp, #28]
 800e40c:	4681      	mov	r9, r0
 800e40e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e410:	9311      	str	r3, [sp, #68]	@ 0x44
 800e412:	b97f      	cbnz	r7, 800e434 <_dtoa_r+0x3c>
 800e414:	2010      	movs	r0, #16
 800e416:	f7fe ffa9 	bl	800d36c <malloc>
 800e41a:	4602      	mov	r2, r0
 800e41c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e420:	b920      	cbnz	r0, 800e42c <_dtoa_r+0x34>
 800e422:	4ba9      	ldr	r3, [pc, #676]	@ (800e6c8 <_dtoa_r+0x2d0>)
 800e424:	21ef      	movs	r1, #239	@ 0xef
 800e426:	48a9      	ldr	r0, [pc, #676]	@ (800e6cc <_dtoa_r+0x2d4>)
 800e428:	f001 fc20 	bl	800fc6c <__assert_func>
 800e42c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e430:	6007      	str	r7, [r0, #0]
 800e432:	60c7      	str	r7, [r0, #12]
 800e434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e438:	6819      	ldr	r1, [r3, #0]
 800e43a:	b159      	cbz	r1, 800e454 <_dtoa_r+0x5c>
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	604a      	str	r2, [r1, #4]
 800e440:	2301      	movs	r3, #1
 800e442:	4093      	lsls	r3, r2
 800e444:	608b      	str	r3, [r1, #8]
 800e446:	4648      	mov	r0, r9
 800e448:	f000 fe30 	bl	800f0ac <_Bfree>
 800e44c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e450:	2200      	movs	r2, #0
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	1e2b      	subs	r3, r5, #0
 800e456:	bfb9      	ittee	lt
 800e458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e45c:	9305      	strlt	r3, [sp, #20]
 800e45e:	2300      	movge	r3, #0
 800e460:	6033      	strge	r3, [r6, #0]
 800e462:	9f05      	ldr	r7, [sp, #20]
 800e464:	4b9a      	ldr	r3, [pc, #616]	@ (800e6d0 <_dtoa_r+0x2d8>)
 800e466:	bfbc      	itt	lt
 800e468:	2201      	movlt	r2, #1
 800e46a:	6032      	strlt	r2, [r6, #0]
 800e46c:	43bb      	bics	r3, r7
 800e46e:	d112      	bne.n	800e496 <_dtoa_r+0x9e>
 800e470:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e472:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e47c:	4323      	orrs	r3, r4
 800e47e:	f000 855a 	beq.w	800ef36 <_dtoa_r+0xb3e>
 800e482:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e484:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e6e4 <_dtoa_r+0x2ec>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 855c 	beq.w	800ef46 <_dtoa_r+0xb4e>
 800e48e:	f10a 0303 	add.w	r3, sl, #3
 800e492:	f000 bd56 	b.w	800ef42 <_dtoa_r+0xb4a>
 800e496:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e49a:	2200      	movs	r2, #0
 800e49c:	ec51 0b17 	vmov	r0, r1, d7
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e4a6:	f7f2 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	b158      	cbz	r0, 800e4c6 <_dtoa_r+0xce>
 800e4ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e4b6:	b113      	cbz	r3, 800e4be <_dtoa_r+0xc6>
 800e4b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e4ba:	4b86      	ldr	r3, [pc, #536]	@ (800e6d4 <_dtoa_r+0x2dc>)
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e6e8 <_dtoa_r+0x2f0>
 800e4c2:	f000 bd40 	b.w	800ef46 <_dtoa_r+0xb4e>
 800e4c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e4ca:	aa14      	add	r2, sp, #80	@ 0x50
 800e4cc:	a915      	add	r1, sp, #84	@ 0x54
 800e4ce:	4648      	mov	r0, r9
 800e4d0:	f001 f8ce 	bl	800f670 <__d2b>
 800e4d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e4d8:	9002      	str	r0, [sp, #8]
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d078      	beq.n	800e5d0 <_dtoa_r+0x1d8>
 800e4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e4ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e4f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e4f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4b76      	ldr	r3, [pc, #472]	@ (800e6d8 <_dtoa_r+0x2e0>)
 800e4fe:	f7f1 fec3 	bl	8000288 <__aeabi_dsub>
 800e502:	a36b      	add	r3, pc, #428	@ (adr r3, 800e6b0 <_dtoa_r+0x2b8>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	f7f2 f876 	bl	80005f8 <__aeabi_dmul>
 800e50c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e6b8 <_dtoa_r+0x2c0>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	f7f1 febb 	bl	800028c <__adddf3>
 800e516:	4604      	mov	r4, r0
 800e518:	4630      	mov	r0, r6
 800e51a:	460d      	mov	r5, r1
 800e51c:	f7f2 f802 	bl	8000524 <__aeabi_i2d>
 800e520:	a367      	add	r3, pc, #412	@ (adr r3, 800e6c0 <_dtoa_r+0x2c8>)
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4620      	mov	r0, r4
 800e530:	4629      	mov	r1, r5
 800e532:	f7f1 feab 	bl	800028c <__adddf3>
 800e536:	4604      	mov	r4, r0
 800e538:	460d      	mov	r5, r1
 800e53a:	f7f2 fb0d 	bl	8000b58 <__aeabi_d2iz>
 800e53e:	2200      	movs	r2, #0
 800e540:	4607      	mov	r7, r0
 800e542:	2300      	movs	r3, #0
 800e544:	4620      	mov	r0, r4
 800e546:	4629      	mov	r1, r5
 800e548:	f7f2 fac8 	bl	8000adc <__aeabi_dcmplt>
 800e54c:	b140      	cbz	r0, 800e560 <_dtoa_r+0x168>
 800e54e:	4638      	mov	r0, r7
 800e550:	f7f1 ffe8 	bl	8000524 <__aeabi_i2d>
 800e554:	4622      	mov	r2, r4
 800e556:	462b      	mov	r3, r5
 800e558:	f7f2 fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e55c:	b900      	cbnz	r0, 800e560 <_dtoa_r+0x168>
 800e55e:	3f01      	subs	r7, #1
 800e560:	2f16      	cmp	r7, #22
 800e562:	d852      	bhi.n	800e60a <_dtoa_r+0x212>
 800e564:	4b5d      	ldr	r3, [pc, #372]	@ (800e6dc <_dtoa_r+0x2e4>)
 800e566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e572:	f7f2 fab3 	bl	8000adc <__aeabi_dcmplt>
 800e576:	2800      	cmp	r0, #0
 800e578:	d049      	beq.n	800e60e <_dtoa_r+0x216>
 800e57a:	3f01      	subs	r7, #1
 800e57c:	2300      	movs	r3, #0
 800e57e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e582:	1b9b      	subs	r3, r3, r6
 800e584:	1e5a      	subs	r2, r3, #1
 800e586:	bf45      	ittet	mi
 800e588:	f1c3 0301 	rsbmi	r3, r3, #1
 800e58c:	9300      	strmi	r3, [sp, #0]
 800e58e:	2300      	movpl	r3, #0
 800e590:	2300      	movmi	r3, #0
 800e592:	9206      	str	r2, [sp, #24]
 800e594:	bf54      	ite	pl
 800e596:	9300      	strpl	r3, [sp, #0]
 800e598:	9306      	strmi	r3, [sp, #24]
 800e59a:	2f00      	cmp	r7, #0
 800e59c:	db39      	blt.n	800e612 <_dtoa_r+0x21a>
 800e59e:	9b06      	ldr	r3, [sp, #24]
 800e5a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e5a2:	443b      	add	r3, r7
 800e5a4:	9306      	str	r3, [sp, #24]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	9308      	str	r3, [sp, #32]
 800e5aa:	9b07      	ldr	r3, [sp, #28]
 800e5ac:	2b09      	cmp	r3, #9
 800e5ae:	d863      	bhi.n	800e678 <_dtoa_r+0x280>
 800e5b0:	2b05      	cmp	r3, #5
 800e5b2:	bfc4      	itt	gt
 800e5b4:	3b04      	subgt	r3, #4
 800e5b6:	9307      	strgt	r3, [sp, #28]
 800e5b8:	9b07      	ldr	r3, [sp, #28]
 800e5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800e5be:	bfcc      	ite	gt
 800e5c0:	2400      	movgt	r4, #0
 800e5c2:	2401      	movle	r4, #1
 800e5c4:	2b03      	cmp	r3, #3
 800e5c6:	d863      	bhi.n	800e690 <_dtoa_r+0x298>
 800e5c8:	e8df f003 	tbb	[pc, r3]
 800e5cc:	2b375452 	.word	0x2b375452
 800e5d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e5d4:	441e      	add	r6, r3
 800e5d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e5da:	2b20      	cmp	r3, #32
 800e5dc:	bfc1      	itttt	gt
 800e5de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e5e2:	409f      	lslgt	r7, r3
 800e5e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e5e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e5ec:	bfd6      	itet	le
 800e5ee:	f1c3 0320 	rsble	r3, r3, #32
 800e5f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e5f6:	fa04 f003 	lslle.w	r0, r4, r3
 800e5fa:	f7f1 ff83 	bl	8000504 <__aeabi_ui2d>
 800e5fe:	2201      	movs	r2, #1
 800e600:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e604:	3e01      	subs	r6, #1
 800e606:	9212      	str	r2, [sp, #72]	@ 0x48
 800e608:	e776      	b.n	800e4f8 <_dtoa_r+0x100>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e7b7      	b.n	800e57e <_dtoa_r+0x186>
 800e60e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e610:	e7b6      	b.n	800e580 <_dtoa_r+0x188>
 800e612:	9b00      	ldr	r3, [sp, #0]
 800e614:	1bdb      	subs	r3, r3, r7
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	427b      	negs	r3, r7
 800e61a:	9308      	str	r3, [sp, #32]
 800e61c:	2300      	movs	r3, #0
 800e61e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e620:	e7c3      	b.n	800e5aa <_dtoa_r+0x1b2>
 800e622:	2301      	movs	r3, #1
 800e624:	9309      	str	r3, [sp, #36]	@ 0x24
 800e626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e628:	eb07 0b03 	add.w	fp, r7, r3
 800e62c:	f10b 0301 	add.w	r3, fp, #1
 800e630:	2b01      	cmp	r3, #1
 800e632:	9303      	str	r3, [sp, #12]
 800e634:	bfb8      	it	lt
 800e636:	2301      	movlt	r3, #1
 800e638:	e006      	b.n	800e648 <_dtoa_r+0x250>
 800e63a:	2301      	movs	r3, #1
 800e63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e63e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e640:	2b00      	cmp	r3, #0
 800e642:	dd28      	ble.n	800e696 <_dtoa_r+0x29e>
 800e644:	469b      	mov	fp, r3
 800e646:	9303      	str	r3, [sp, #12]
 800e648:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e64c:	2100      	movs	r1, #0
 800e64e:	2204      	movs	r2, #4
 800e650:	f102 0514 	add.w	r5, r2, #20
 800e654:	429d      	cmp	r5, r3
 800e656:	d926      	bls.n	800e6a6 <_dtoa_r+0x2ae>
 800e658:	6041      	str	r1, [r0, #4]
 800e65a:	4648      	mov	r0, r9
 800e65c:	f000 fce6 	bl	800f02c <_Balloc>
 800e660:	4682      	mov	sl, r0
 800e662:	2800      	cmp	r0, #0
 800e664:	d142      	bne.n	800e6ec <_dtoa_r+0x2f4>
 800e666:	4b1e      	ldr	r3, [pc, #120]	@ (800e6e0 <_dtoa_r+0x2e8>)
 800e668:	4602      	mov	r2, r0
 800e66a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e66e:	e6da      	b.n	800e426 <_dtoa_r+0x2e>
 800e670:	2300      	movs	r3, #0
 800e672:	e7e3      	b.n	800e63c <_dtoa_r+0x244>
 800e674:	2300      	movs	r3, #0
 800e676:	e7d5      	b.n	800e624 <_dtoa_r+0x22c>
 800e678:	2401      	movs	r4, #1
 800e67a:	2300      	movs	r3, #0
 800e67c:	9307      	str	r3, [sp, #28]
 800e67e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e680:	f04f 3bff 	mov.w	fp, #4294967295
 800e684:	2200      	movs	r2, #0
 800e686:	f8cd b00c 	str.w	fp, [sp, #12]
 800e68a:	2312      	movs	r3, #18
 800e68c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e68e:	e7db      	b.n	800e648 <_dtoa_r+0x250>
 800e690:	2301      	movs	r3, #1
 800e692:	9309      	str	r3, [sp, #36]	@ 0x24
 800e694:	e7f4      	b.n	800e680 <_dtoa_r+0x288>
 800e696:	f04f 0b01 	mov.w	fp, #1
 800e69a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e69e:	465b      	mov	r3, fp
 800e6a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e6a4:	e7d0      	b.n	800e648 <_dtoa_r+0x250>
 800e6a6:	3101      	adds	r1, #1
 800e6a8:	0052      	lsls	r2, r2, #1
 800e6aa:	e7d1      	b.n	800e650 <_dtoa_r+0x258>
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	636f4361 	.word	0x636f4361
 800e6b4:	3fd287a7 	.word	0x3fd287a7
 800e6b8:	8b60c8b3 	.word	0x8b60c8b3
 800e6bc:	3fc68a28 	.word	0x3fc68a28
 800e6c0:	509f79fb 	.word	0x509f79fb
 800e6c4:	3fd34413 	.word	0x3fd34413
 800e6c8:	08010a81 	.word	0x08010a81
 800e6cc:	08010a98 	.word	0x08010a98
 800e6d0:	7ff00000 	.word	0x7ff00000
 800e6d4:	08010a51 	.word	0x08010a51
 800e6d8:	3ff80000 	.word	0x3ff80000
 800e6dc:	08010be8 	.word	0x08010be8
 800e6e0:	08010af0 	.word	0x08010af0
 800e6e4:	08010a7d 	.word	0x08010a7d
 800e6e8:	08010a50 	.word	0x08010a50
 800e6ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e6f0:	6018      	str	r0, [r3, #0]
 800e6f2:	9b03      	ldr	r3, [sp, #12]
 800e6f4:	2b0e      	cmp	r3, #14
 800e6f6:	f200 80a1 	bhi.w	800e83c <_dtoa_r+0x444>
 800e6fa:	2c00      	cmp	r4, #0
 800e6fc:	f000 809e 	beq.w	800e83c <_dtoa_r+0x444>
 800e700:	2f00      	cmp	r7, #0
 800e702:	dd33      	ble.n	800e76c <_dtoa_r+0x374>
 800e704:	4b9c      	ldr	r3, [pc, #624]	@ (800e978 <_dtoa_r+0x580>)
 800e706:	f007 020f 	and.w	r2, r7, #15
 800e70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e70e:	ed93 7b00 	vldr	d7, [r3]
 800e712:	05f8      	lsls	r0, r7, #23
 800e714:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e71c:	d516      	bpl.n	800e74c <_dtoa_r+0x354>
 800e71e:	4b97      	ldr	r3, [pc, #604]	@ (800e97c <_dtoa_r+0x584>)
 800e720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e728:	f7f2 f890 	bl	800084c <__aeabi_ddiv>
 800e72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e730:	f004 040f 	and.w	r4, r4, #15
 800e734:	2603      	movs	r6, #3
 800e736:	4d91      	ldr	r5, [pc, #580]	@ (800e97c <_dtoa_r+0x584>)
 800e738:	b954      	cbnz	r4, 800e750 <_dtoa_r+0x358>
 800e73a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e73e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e742:	f7f2 f883 	bl	800084c <__aeabi_ddiv>
 800e746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e74a:	e028      	b.n	800e79e <_dtoa_r+0x3a6>
 800e74c:	2602      	movs	r6, #2
 800e74e:	e7f2      	b.n	800e736 <_dtoa_r+0x33e>
 800e750:	07e1      	lsls	r1, r4, #31
 800e752:	d508      	bpl.n	800e766 <_dtoa_r+0x36e>
 800e754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e75c:	f7f1 ff4c 	bl	80005f8 <__aeabi_dmul>
 800e760:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e764:	3601      	adds	r6, #1
 800e766:	1064      	asrs	r4, r4, #1
 800e768:	3508      	adds	r5, #8
 800e76a:	e7e5      	b.n	800e738 <_dtoa_r+0x340>
 800e76c:	f000 80af 	beq.w	800e8ce <_dtoa_r+0x4d6>
 800e770:	427c      	negs	r4, r7
 800e772:	4b81      	ldr	r3, [pc, #516]	@ (800e978 <_dtoa_r+0x580>)
 800e774:	4d81      	ldr	r5, [pc, #516]	@ (800e97c <_dtoa_r+0x584>)
 800e776:	f004 020f 	and.w	r2, r4, #15
 800e77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e78e:	1124      	asrs	r4, r4, #4
 800e790:	2300      	movs	r3, #0
 800e792:	2602      	movs	r6, #2
 800e794:	2c00      	cmp	r4, #0
 800e796:	f040 808f 	bne.w	800e8b8 <_dtoa_r+0x4c0>
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1d3      	bne.n	800e746 <_dtoa_r+0x34e>
 800e79e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 8094 	beq.w	800e8d2 <_dtoa_r+0x4da>
 800e7aa:	4b75      	ldr	r3, [pc, #468]	@ (800e980 <_dtoa_r+0x588>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f2 f993 	bl	8000adc <__aeabi_dcmplt>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f000 808b 	beq.w	800e8d2 <_dtoa_r+0x4da>
 800e7bc:	9b03      	ldr	r3, [sp, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 8087 	beq.w	800e8d2 <_dtoa_r+0x4da>
 800e7c4:	f1bb 0f00 	cmp.w	fp, #0
 800e7c8:	dd34      	ble.n	800e834 <_dtoa_r+0x43c>
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4b6d      	ldr	r3, [pc, #436]	@ (800e984 <_dtoa_r+0x58c>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f1 ff11 	bl	80005f8 <__aeabi_dmul>
 800e7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7da:	f107 38ff 	add.w	r8, r7, #4294967295
 800e7de:	3601      	adds	r6, #1
 800e7e0:	465c      	mov	r4, fp
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7f1 fe9e 	bl	8000524 <__aeabi_i2d>
 800e7e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	4b65      	ldr	r3, [pc, #404]	@ (800e988 <_dtoa_r+0x590>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f7f1 fd4a 	bl	800028c <__adddf3>
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e7fe:	2c00      	cmp	r4, #0
 800e800:	d16a      	bne.n	800e8d8 <_dtoa_r+0x4e0>
 800e802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e806:	4b61      	ldr	r3, [pc, #388]	@ (800e98c <_dtoa_r+0x594>)
 800e808:	2200      	movs	r2, #0
 800e80a:	f7f1 fd3d 	bl	8000288 <__aeabi_dsub>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e816:	462a      	mov	r2, r5
 800e818:	4633      	mov	r3, r6
 800e81a:	f7f2 f97d 	bl	8000b18 <__aeabi_dcmpgt>
 800e81e:	2800      	cmp	r0, #0
 800e820:	f040 8298 	bne.w	800ed54 <_dtoa_r+0x95c>
 800e824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e828:	462a      	mov	r2, r5
 800e82a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e82e:	f7f2 f955 	bl	8000adc <__aeabi_dcmplt>
 800e832:	bb38      	cbnz	r0, 800e884 <_dtoa_r+0x48c>
 800e834:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e838:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e83c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f2c0 8157 	blt.w	800eaf2 <_dtoa_r+0x6fa>
 800e844:	2f0e      	cmp	r7, #14
 800e846:	f300 8154 	bgt.w	800eaf2 <_dtoa_r+0x6fa>
 800e84a:	4b4b      	ldr	r3, [pc, #300]	@ (800e978 <_dtoa_r+0x580>)
 800e84c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e850:	ed93 7b00 	vldr	d7, [r3]
 800e854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e856:	2b00      	cmp	r3, #0
 800e858:	ed8d 7b00 	vstr	d7, [sp]
 800e85c:	f280 80e5 	bge.w	800ea2a <_dtoa_r+0x632>
 800e860:	9b03      	ldr	r3, [sp, #12]
 800e862:	2b00      	cmp	r3, #0
 800e864:	f300 80e1 	bgt.w	800ea2a <_dtoa_r+0x632>
 800e868:	d10c      	bne.n	800e884 <_dtoa_r+0x48c>
 800e86a:	4b48      	ldr	r3, [pc, #288]	@ (800e98c <_dtoa_r+0x594>)
 800e86c:	2200      	movs	r2, #0
 800e86e:	ec51 0b17 	vmov	r0, r1, d7
 800e872:	f7f1 fec1 	bl	80005f8 <__aeabi_dmul>
 800e876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e87a:	f7f2 f943 	bl	8000b04 <__aeabi_dcmpge>
 800e87e:	2800      	cmp	r0, #0
 800e880:	f000 8266 	beq.w	800ed50 <_dtoa_r+0x958>
 800e884:	2400      	movs	r4, #0
 800e886:	4625      	mov	r5, r4
 800e888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e88a:	4656      	mov	r6, sl
 800e88c:	ea6f 0803 	mvn.w	r8, r3
 800e890:	2700      	movs	r7, #0
 800e892:	4621      	mov	r1, r4
 800e894:	4648      	mov	r0, r9
 800e896:	f000 fc09 	bl	800f0ac <_Bfree>
 800e89a:	2d00      	cmp	r5, #0
 800e89c:	f000 80bd 	beq.w	800ea1a <_dtoa_r+0x622>
 800e8a0:	b12f      	cbz	r7, 800e8ae <_dtoa_r+0x4b6>
 800e8a2:	42af      	cmp	r7, r5
 800e8a4:	d003      	beq.n	800e8ae <_dtoa_r+0x4b6>
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	f000 fbff 	bl	800f0ac <_Bfree>
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4648      	mov	r0, r9
 800e8b2:	f000 fbfb 	bl	800f0ac <_Bfree>
 800e8b6:	e0b0      	b.n	800ea1a <_dtoa_r+0x622>
 800e8b8:	07e2      	lsls	r2, r4, #31
 800e8ba:	d505      	bpl.n	800e8c8 <_dtoa_r+0x4d0>
 800e8bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	3601      	adds	r6, #1
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	1064      	asrs	r4, r4, #1
 800e8ca:	3508      	adds	r5, #8
 800e8cc:	e762      	b.n	800e794 <_dtoa_r+0x39c>
 800e8ce:	2602      	movs	r6, #2
 800e8d0:	e765      	b.n	800e79e <_dtoa_r+0x3a6>
 800e8d2:	9c03      	ldr	r4, [sp, #12]
 800e8d4:	46b8      	mov	r8, r7
 800e8d6:	e784      	b.n	800e7e2 <_dtoa_r+0x3ea>
 800e8d8:	4b27      	ldr	r3, [pc, #156]	@ (800e978 <_dtoa_r+0x580>)
 800e8da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8e4:	4454      	add	r4, sl
 800e8e6:	2900      	cmp	r1, #0
 800e8e8:	d054      	beq.n	800e994 <_dtoa_r+0x59c>
 800e8ea:	4929      	ldr	r1, [pc, #164]	@ (800e990 <_dtoa_r+0x598>)
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	f7f1 ffad 	bl	800084c <__aeabi_ddiv>
 800e8f2:	4633      	mov	r3, r6
 800e8f4:	462a      	mov	r2, r5
 800e8f6:	f7f1 fcc7 	bl	8000288 <__aeabi_dsub>
 800e8fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e8fe:	4656      	mov	r6, sl
 800e900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e904:	f7f2 f928 	bl	8000b58 <__aeabi_d2iz>
 800e908:	4605      	mov	r5, r0
 800e90a:	f7f1 fe0b 	bl	8000524 <__aeabi_i2d>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e916:	f7f1 fcb7 	bl	8000288 <__aeabi_dsub>
 800e91a:	3530      	adds	r5, #48	@ 0x30
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e924:	f806 5b01 	strb.w	r5, [r6], #1
 800e928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e92c:	f7f2 f8d6 	bl	8000adc <__aeabi_dcmplt>
 800e930:	2800      	cmp	r0, #0
 800e932:	d172      	bne.n	800ea1a <_dtoa_r+0x622>
 800e934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e938:	4911      	ldr	r1, [pc, #68]	@ (800e980 <_dtoa_r+0x588>)
 800e93a:	2000      	movs	r0, #0
 800e93c:	f7f1 fca4 	bl	8000288 <__aeabi_dsub>
 800e940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e944:	f7f2 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800e948:	2800      	cmp	r0, #0
 800e94a:	f040 80b4 	bne.w	800eab6 <_dtoa_r+0x6be>
 800e94e:	42a6      	cmp	r6, r4
 800e950:	f43f af70 	beq.w	800e834 <_dtoa_r+0x43c>
 800e954:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e958:	4b0a      	ldr	r3, [pc, #40]	@ (800e984 <_dtoa_r+0x58c>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	f7f1 fe4c 	bl	80005f8 <__aeabi_dmul>
 800e960:	4b08      	ldr	r3, [pc, #32]	@ (800e984 <_dtoa_r+0x58c>)
 800e962:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e966:	2200      	movs	r2, #0
 800e968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e96c:	f7f1 fe44 	bl	80005f8 <__aeabi_dmul>
 800e970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e974:	e7c4      	b.n	800e900 <_dtoa_r+0x508>
 800e976:	bf00      	nop
 800e978:	08010be8 	.word	0x08010be8
 800e97c:	08010bc0 	.word	0x08010bc0
 800e980:	3ff00000 	.word	0x3ff00000
 800e984:	40240000 	.word	0x40240000
 800e988:	401c0000 	.word	0x401c0000
 800e98c:	40140000 	.word	0x40140000
 800e990:	3fe00000 	.word	0x3fe00000
 800e994:	4631      	mov	r1, r6
 800e996:	4628      	mov	r0, r5
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e9a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e9a2:	4656      	mov	r6, sl
 800e9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9a8:	f7f2 f8d6 	bl	8000b58 <__aeabi_d2iz>
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	f7f1 fdb9 	bl	8000524 <__aeabi_i2d>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9ba:	f7f1 fc65 	bl	8000288 <__aeabi_dsub>
 800e9be:	3530      	adds	r5, #48	@ 0x30
 800e9c0:	f806 5b01 	strb.w	r5, [r6], #1
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	42a6      	cmp	r6, r4
 800e9ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9ce:	f04f 0200 	mov.w	r2, #0
 800e9d2:	d124      	bne.n	800ea1e <_dtoa_r+0x626>
 800e9d4:	4baf      	ldr	r3, [pc, #700]	@ (800ec94 <_dtoa_r+0x89c>)
 800e9d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e9da:	f7f1 fc57 	bl	800028c <__adddf3>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9e6:	f7f2 f897 	bl	8000b18 <__aeabi_dcmpgt>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d163      	bne.n	800eab6 <_dtoa_r+0x6be>
 800e9ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e9f2:	49a8      	ldr	r1, [pc, #672]	@ (800ec94 <_dtoa_r+0x89c>)
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	f7f1 fc47 	bl	8000288 <__aeabi_dsub>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea02:	f7f2 f86b 	bl	8000adc <__aeabi_dcmplt>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f43f af14 	beq.w	800e834 <_dtoa_r+0x43c>
 800ea0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ea0e:	1e73      	subs	r3, r6, #1
 800ea10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea16:	2b30      	cmp	r3, #48	@ 0x30
 800ea18:	d0f8      	beq.n	800ea0c <_dtoa_r+0x614>
 800ea1a:	4647      	mov	r7, r8
 800ea1c:	e03b      	b.n	800ea96 <_dtoa_r+0x69e>
 800ea1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ec98 <_dtoa_r+0x8a0>)
 800ea20:	f7f1 fdea 	bl	80005f8 <__aeabi_dmul>
 800ea24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea28:	e7bc      	b.n	800e9a4 <_dtoa_r+0x5ac>
 800ea2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ea2e:	4656      	mov	r6, sl
 800ea30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 ff08 	bl	800084c <__aeabi_ddiv>
 800ea3c:	f7f2 f88c 	bl	8000b58 <__aeabi_d2iz>
 800ea40:	4680      	mov	r8, r0
 800ea42:	f7f1 fd6f 	bl	8000524 <__aeabi_i2d>
 800ea46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4a:	f7f1 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea5a:	f7f1 fc15 	bl	8000288 <__aeabi_dsub>
 800ea5e:	f806 4b01 	strb.w	r4, [r6], #1
 800ea62:	9d03      	ldr	r5, [sp, #12]
 800ea64:	eba6 040a 	sub.w	r4, r6, sl
 800ea68:	42a5      	cmp	r5, r4
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	d133      	bne.n	800ead8 <_dtoa_r+0x6e0>
 800ea70:	f7f1 fc0c 	bl	800028c <__adddf3>
 800ea74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea78:	4604      	mov	r4, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	f7f2 f84c 	bl	8000b18 <__aeabi_dcmpgt>
 800ea80:	b9c0      	cbnz	r0, 800eab4 <_dtoa_r+0x6bc>
 800ea82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f2 f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea8e:	b110      	cbz	r0, 800ea96 <_dtoa_r+0x69e>
 800ea90:	f018 0f01 	tst.w	r8, #1
 800ea94:	d10e      	bne.n	800eab4 <_dtoa_r+0x6bc>
 800ea96:	9902      	ldr	r1, [sp, #8]
 800ea98:	4648      	mov	r0, r9
 800ea9a:	f000 fb07 	bl	800f0ac <_Bfree>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	7033      	strb	r3, [r6, #0]
 800eaa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eaa4:	3701      	adds	r7, #1
 800eaa6:	601f      	str	r7, [r3, #0]
 800eaa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 824b 	beq.w	800ef46 <_dtoa_r+0xb4e>
 800eab0:	601e      	str	r6, [r3, #0]
 800eab2:	e248      	b.n	800ef46 <_dtoa_r+0xb4e>
 800eab4:	46b8      	mov	r8, r7
 800eab6:	4633      	mov	r3, r6
 800eab8:	461e      	mov	r6, r3
 800eaba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eabe:	2a39      	cmp	r2, #57	@ 0x39
 800eac0:	d106      	bne.n	800ead0 <_dtoa_r+0x6d8>
 800eac2:	459a      	cmp	sl, r3
 800eac4:	d1f8      	bne.n	800eab8 <_dtoa_r+0x6c0>
 800eac6:	2230      	movs	r2, #48	@ 0x30
 800eac8:	f108 0801 	add.w	r8, r8, #1
 800eacc:	f88a 2000 	strb.w	r2, [sl]
 800ead0:	781a      	ldrb	r2, [r3, #0]
 800ead2:	3201      	adds	r2, #1
 800ead4:	701a      	strb	r2, [r3, #0]
 800ead6:	e7a0      	b.n	800ea1a <_dtoa_r+0x622>
 800ead8:	4b6f      	ldr	r3, [pc, #444]	@ (800ec98 <_dtoa_r+0x8a0>)
 800eada:	2200      	movs	r2, #0
 800eadc:	f7f1 fd8c 	bl	80005f8 <__aeabi_dmul>
 800eae0:	2200      	movs	r2, #0
 800eae2:	2300      	movs	r3, #0
 800eae4:	4604      	mov	r4, r0
 800eae6:	460d      	mov	r5, r1
 800eae8:	f7f1 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d09f      	beq.n	800ea30 <_dtoa_r+0x638>
 800eaf0:	e7d1      	b.n	800ea96 <_dtoa_r+0x69e>
 800eaf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaf4:	2a00      	cmp	r2, #0
 800eaf6:	f000 80ea 	beq.w	800ecce <_dtoa_r+0x8d6>
 800eafa:	9a07      	ldr	r2, [sp, #28]
 800eafc:	2a01      	cmp	r2, #1
 800eafe:	f300 80cd 	bgt.w	800ec9c <_dtoa_r+0x8a4>
 800eb02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eb04:	2a00      	cmp	r2, #0
 800eb06:	f000 80c1 	beq.w	800ec8c <_dtoa_r+0x894>
 800eb0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eb0e:	9c08      	ldr	r4, [sp, #32]
 800eb10:	9e00      	ldr	r6, [sp, #0]
 800eb12:	9a00      	ldr	r2, [sp, #0]
 800eb14:	441a      	add	r2, r3
 800eb16:	9200      	str	r2, [sp, #0]
 800eb18:	9a06      	ldr	r2, [sp, #24]
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	441a      	add	r2, r3
 800eb1e:	4648      	mov	r0, r9
 800eb20:	9206      	str	r2, [sp, #24]
 800eb22:	f000 fb77 	bl	800f214 <__i2b>
 800eb26:	4605      	mov	r5, r0
 800eb28:	b166      	cbz	r6, 800eb44 <_dtoa_r+0x74c>
 800eb2a:	9b06      	ldr	r3, [sp, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	dd09      	ble.n	800eb44 <_dtoa_r+0x74c>
 800eb30:	42b3      	cmp	r3, r6
 800eb32:	9a00      	ldr	r2, [sp, #0]
 800eb34:	bfa8      	it	ge
 800eb36:	4633      	movge	r3, r6
 800eb38:	1ad2      	subs	r2, r2, r3
 800eb3a:	9200      	str	r2, [sp, #0]
 800eb3c:	9a06      	ldr	r2, [sp, #24]
 800eb3e:	1af6      	subs	r6, r6, r3
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	9306      	str	r3, [sp, #24]
 800eb44:	9b08      	ldr	r3, [sp, #32]
 800eb46:	b30b      	cbz	r3, 800eb8c <_dtoa_r+0x794>
 800eb48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 80c6 	beq.w	800ecdc <_dtoa_r+0x8e4>
 800eb50:	2c00      	cmp	r4, #0
 800eb52:	f000 80c0 	beq.w	800ecd6 <_dtoa_r+0x8de>
 800eb56:	4629      	mov	r1, r5
 800eb58:	4622      	mov	r2, r4
 800eb5a:	4648      	mov	r0, r9
 800eb5c:	f000 fc12 	bl	800f384 <__pow5mult>
 800eb60:	9a02      	ldr	r2, [sp, #8]
 800eb62:	4601      	mov	r1, r0
 800eb64:	4605      	mov	r5, r0
 800eb66:	4648      	mov	r0, r9
 800eb68:	f000 fb6a 	bl	800f240 <__multiply>
 800eb6c:	9902      	ldr	r1, [sp, #8]
 800eb6e:	4680      	mov	r8, r0
 800eb70:	4648      	mov	r0, r9
 800eb72:	f000 fa9b 	bl	800f0ac <_Bfree>
 800eb76:	9b08      	ldr	r3, [sp, #32]
 800eb78:	1b1b      	subs	r3, r3, r4
 800eb7a:	9308      	str	r3, [sp, #32]
 800eb7c:	f000 80b1 	beq.w	800ece2 <_dtoa_r+0x8ea>
 800eb80:	9a08      	ldr	r2, [sp, #32]
 800eb82:	4641      	mov	r1, r8
 800eb84:	4648      	mov	r0, r9
 800eb86:	f000 fbfd 	bl	800f384 <__pow5mult>
 800eb8a:	9002      	str	r0, [sp, #8]
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	4648      	mov	r0, r9
 800eb90:	f000 fb40 	bl	800f214 <__i2b>
 800eb94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb96:	4604      	mov	r4, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 81d8 	beq.w	800ef4e <_dtoa_r+0xb56>
 800eb9e:	461a      	mov	r2, r3
 800eba0:	4601      	mov	r1, r0
 800eba2:	4648      	mov	r0, r9
 800eba4:	f000 fbee 	bl	800f384 <__pow5mult>
 800eba8:	9b07      	ldr	r3, [sp, #28]
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	4604      	mov	r4, r0
 800ebae:	f300 809f 	bgt.w	800ecf0 <_dtoa_r+0x8f8>
 800ebb2:	9b04      	ldr	r3, [sp, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f040 8097 	bne.w	800ece8 <_dtoa_r+0x8f0>
 800ebba:	9b05      	ldr	r3, [sp, #20]
 800ebbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f040 8093 	bne.w	800ecec <_dtoa_r+0x8f4>
 800ebc6:	9b05      	ldr	r3, [sp, #20]
 800ebc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebcc:	0d1b      	lsrs	r3, r3, #20
 800ebce:	051b      	lsls	r3, r3, #20
 800ebd0:	b133      	cbz	r3, 800ebe0 <_dtoa_r+0x7e8>
 800ebd2:	9b00      	ldr	r3, [sp, #0]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	9b06      	ldr	r3, [sp, #24]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	9306      	str	r3, [sp, #24]
 800ebde:	2301      	movs	r3, #1
 800ebe0:	9308      	str	r3, [sp, #32]
 800ebe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 81b8 	beq.w	800ef5a <_dtoa_r+0xb62>
 800ebea:	6923      	ldr	r3, [r4, #16]
 800ebec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebf0:	6918      	ldr	r0, [r3, #16]
 800ebf2:	f000 fac3 	bl	800f17c <__hi0bits>
 800ebf6:	f1c0 0020 	rsb	r0, r0, #32
 800ebfa:	9b06      	ldr	r3, [sp, #24]
 800ebfc:	4418      	add	r0, r3
 800ebfe:	f010 001f 	ands.w	r0, r0, #31
 800ec02:	f000 8082 	beq.w	800ed0a <_dtoa_r+0x912>
 800ec06:	f1c0 0320 	rsb	r3, r0, #32
 800ec0a:	2b04      	cmp	r3, #4
 800ec0c:	dd73      	ble.n	800ecf6 <_dtoa_r+0x8fe>
 800ec0e:	9b00      	ldr	r3, [sp, #0]
 800ec10:	f1c0 001c 	rsb	r0, r0, #28
 800ec14:	4403      	add	r3, r0
 800ec16:	9300      	str	r3, [sp, #0]
 800ec18:	9b06      	ldr	r3, [sp, #24]
 800ec1a:	4403      	add	r3, r0
 800ec1c:	4406      	add	r6, r0
 800ec1e:	9306      	str	r3, [sp, #24]
 800ec20:	9b00      	ldr	r3, [sp, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd05      	ble.n	800ec32 <_dtoa_r+0x83a>
 800ec26:	9902      	ldr	r1, [sp, #8]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4648      	mov	r0, r9
 800ec2c:	f000 fc04 	bl	800f438 <__lshift>
 800ec30:	9002      	str	r0, [sp, #8]
 800ec32:	9b06      	ldr	r3, [sp, #24]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	dd05      	ble.n	800ec44 <_dtoa_r+0x84c>
 800ec38:	4621      	mov	r1, r4
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	f000 fbfb 	bl	800f438 <__lshift>
 800ec42:	4604      	mov	r4, r0
 800ec44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d061      	beq.n	800ed0e <_dtoa_r+0x916>
 800ec4a:	9802      	ldr	r0, [sp, #8]
 800ec4c:	4621      	mov	r1, r4
 800ec4e:	f000 fc5f 	bl	800f510 <__mcmp>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	da5b      	bge.n	800ed0e <_dtoa_r+0x916>
 800ec56:	2300      	movs	r3, #0
 800ec58:	9902      	ldr	r1, [sp, #8]
 800ec5a:	220a      	movs	r2, #10
 800ec5c:	4648      	mov	r0, r9
 800ec5e:	f000 fa47 	bl	800f0f0 <__multadd>
 800ec62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec64:	9002      	str	r0, [sp, #8]
 800ec66:	f107 38ff 	add.w	r8, r7, #4294967295
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f000 8177 	beq.w	800ef5e <_dtoa_r+0xb66>
 800ec70:	4629      	mov	r1, r5
 800ec72:	2300      	movs	r3, #0
 800ec74:	220a      	movs	r2, #10
 800ec76:	4648      	mov	r0, r9
 800ec78:	f000 fa3a 	bl	800f0f0 <__multadd>
 800ec7c:	f1bb 0f00 	cmp.w	fp, #0
 800ec80:	4605      	mov	r5, r0
 800ec82:	dc6f      	bgt.n	800ed64 <_dtoa_r+0x96c>
 800ec84:	9b07      	ldr	r3, [sp, #28]
 800ec86:	2b02      	cmp	r3, #2
 800ec88:	dc49      	bgt.n	800ed1e <_dtoa_r+0x926>
 800ec8a:	e06b      	b.n	800ed64 <_dtoa_r+0x96c>
 800ec8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ec92:	e73c      	b.n	800eb0e <_dtoa_r+0x716>
 800ec94:	3fe00000 	.word	0x3fe00000
 800ec98:	40240000 	.word	0x40240000
 800ec9c:	9b03      	ldr	r3, [sp, #12]
 800ec9e:	1e5c      	subs	r4, r3, #1
 800eca0:	9b08      	ldr	r3, [sp, #32]
 800eca2:	42a3      	cmp	r3, r4
 800eca4:	db09      	blt.n	800ecba <_dtoa_r+0x8c2>
 800eca6:	1b1c      	subs	r4, r3, r4
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f6bf af30 	bge.w	800eb10 <_dtoa_r+0x718>
 800ecb0:	9b00      	ldr	r3, [sp, #0]
 800ecb2:	9a03      	ldr	r2, [sp, #12]
 800ecb4:	1a9e      	subs	r6, r3, r2
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e72b      	b.n	800eb12 <_dtoa_r+0x71a>
 800ecba:	9b08      	ldr	r3, [sp, #32]
 800ecbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecbe:	9408      	str	r4, [sp, #32]
 800ecc0:	1ae3      	subs	r3, r4, r3
 800ecc2:	441a      	add	r2, r3
 800ecc4:	9e00      	ldr	r6, [sp, #0]
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	920d      	str	r2, [sp, #52]	@ 0x34
 800ecca:	2400      	movs	r4, #0
 800eccc:	e721      	b.n	800eb12 <_dtoa_r+0x71a>
 800ecce:	9c08      	ldr	r4, [sp, #32]
 800ecd0:	9e00      	ldr	r6, [sp, #0]
 800ecd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ecd4:	e728      	b.n	800eb28 <_dtoa_r+0x730>
 800ecd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ecda:	e751      	b.n	800eb80 <_dtoa_r+0x788>
 800ecdc:	9a08      	ldr	r2, [sp, #32]
 800ecde:	9902      	ldr	r1, [sp, #8]
 800ece0:	e750      	b.n	800eb84 <_dtoa_r+0x78c>
 800ece2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ece6:	e751      	b.n	800eb8c <_dtoa_r+0x794>
 800ece8:	2300      	movs	r3, #0
 800ecea:	e779      	b.n	800ebe0 <_dtoa_r+0x7e8>
 800ecec:	9b04      	ldr	r3, [sp, #16]
 800ecee:	e777      	b.n	800ebe0 <_dtoa_r+0x7e8>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	9308      	str	r3, [sp, #32]
 800ecf4:	e779      	b.n	800ebea <_dtoa_r+0x7f2>
 800ecf6:	d093      	beq.n	800ec20 <_dtoa_r+0x828>
 800ecf8:	9a00      	ldr	r2, [sp, #0]
 800ecfa:	331c      	adds	r3, #28
 800ecfc:	441a      	add	r2, r3
 800ecfe:	9200      	str	r2, [sp, #0]
 800ed00:	9a06      	ldr	r2, [sp, #24]
 800ed02:	441a      	add	r2, r3
 800ed04:	441e      	add	r6, r3
 800ed06:	9206      	str	r2, [sp, #24]
 800ed08:	e78a      	b.n	800ec20 <_dtoa_r+0x828>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	e7f4      	b.n	800ecf8 <_dtoa_r+0x900>
 800ed0e:	9b03      	ldr	r3, [sp, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	46b8      	mov	r8, r7
 800ed14:	dc20      	bgt.n	800ed58 <_dtoa_r+0x960>
 800ed16:	469b      	mov	fp, r3
 800ed18:	9b07      	ldr	r3, [sp, #28]
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	dd1e      	ble.n	800ed5c <_dtoa_r+0x964>
 800ed1e:	f1bb 0f00 	cmp.w	fp, #0
 800ed22:	f47f adb1 	bne.w	800e888 <_dtoa_r+0x490>
 800ed26:	4621      	mov	r1, r4
 800ed28:	465b      	mov	r3, fp
 800ed2a:	2205      	movs	r2, #5
 800ed2c:	4648      	mov	r0, r9
 800ed2e:	f000 f9df 	bl	800f0f0 <__multadd>
 800ed32:	4601      	mov	r1, r0
 800ed34:	4604      	mov	r4, r0
 800ed36:	9802      	ldr	r0, [sp, #8]
 800ed38:	f000 fbea 	bl	800f510 <__mcmp>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	f77f ada3 	ble.w	800e888 <_dtoa_r+0x490>
 800ed42:	4656      	mov	r6, sl
 800ed44:	2331      	movs	r3, #49	@ 0x31
 800ed46:	f806 3b01 	strb.w	r3, [r6], #1
 800ed4a:	f108 0801 	add.w	r8, r8, #1
 800ed4e:	e59f      	b.n	800e890 <_dtoa_r+0x498>
 800ed50:	9c03      	ldr	r4, [sp, #12]
 800ed52:	46b8      	mov	r8, r7
 800ed54:	4625      	mov	r5, r4
 800ed56:	e7f4      	b.n	800ed42 <_dtoa_r+0x94a>
 800ed58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ed5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 8101 	beq.w	800ef66 <_dtoa_r+0xb6e>
 800ed64:	2e00      	cmp	r6, #0
 800ed66:	dd05      	ble.n	800ed74 <_dtoa_r+0x97c>
 800ed68:	4629      	mov	r1, r5
 800ed6a:	4632      	mov	r2, r6
 800ed6c:	4648      	mov	r0, r9
 800ed6e:	f000 fb63 	bl	800f438 <__lshift>
 800ed72:	4605      	mov	r5, r0
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d05c      	beq.n	800ee34 <_dtoa_r+0xa3c>
 800ed7a:	6869      	ldr	r1, [r5, #4]
 800ed7c:	4648      	mov	r0, r9
 800ed7e:	f000 f955 	bl	800f02c <_Balloc>
 800ed82:	4606      	mov	r6, r0
 800ed84:	b928      	cbnz	r0, 800ed92 <_dtoa_r+0x99a>
 800ed86:	4b82      	ldr	r3, [pc, #520]	@ (800ef90 <_dtoa_r+0xb98>)
 800ed88:	4602      	mov	r2, r0
 800ed8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ed8e:	f7ff bb4a 	b.w	800e426 <_dtoa_r+0x2e>
 800ed92:	692a      	ldr	r2, [r5, #16]
 800ed94:	3202      	adds	r2, #2
 800ed96:	0092      	lsls	r2, r2, #2
 800ed98:	f105 010c 	add.w	r1, r5, #12
 800ed9c:	300c      	adds	r0, #12
 800ed9e:	f7ff fa92 	bl	800e2c6 <memcpy>
 800eda2:	2201      	movs	r2, #1
 800eda4:	4631      	mov	r1, r6
 800eda6:	4648      	mov	r0, r9
 800eda8:	f000 fb46 	bl	800f438 <__lshift>
 800edac:	f10a 0301 	add.w	r3, sl, #1
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	eb0a 030b 	add.w	r3, sl, fp
 800edb6:	9308      	str	r3, [sp, #32]
 800edb8:	9b04      	ldr	r3, [sp, #16]
 800edba:	f003 0301 	and.w	r3, r3, #1
 800edbe:	462f      	mov	r7, r5
 800edc0:	9306      	str	r3, [sp, #24]
 800edc2:	4605      	mov	r5, r0
 800edc4:	9b00      	ldr	r3, [sp, #0]
 800edc6:	9802      	ldr	r0, [sp, #8]
 800edc8:	4621      	mov	r1, r4
 800edca:	f103 3bff 	add.w	fp, r3, #4294967295
 800edce:	f7ff fa88 	bl	800e2e2 <quorem>
 800edd2:	4603      	mov	r3, r0
 800edd4:	3330      	adds	r3, #48	@ 0x30
 800edd6:	9003      	str	r0, [sp, #12]
 800edd8:	4639      	mov	r1, r7
 800edda:	9802      	ldr	r0, [sp, #8]
 800eddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edde:	f000 fb97 	bl	800f510 <__mcmp>
 800ede2:	462a      	mov	r2, r5
 800ede4:	9004      	str	r0, [sp, #16]
 800ede6:	4621      	mov	r1, r4
 800ede8:	4648      	mov	r0, r9
 800edea:	f000 fbad 	bl	800f548 <__mdiff>
 800edee:	68c2      	ldr	r2, [r0, #12]
 800edf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf2:	4606      	mov	r6, r0
 800edf4:	bb02      	cbnz	r2, 800ee38 <_dtoa_r+0xa40>
 800edf6:	4601      	mov	r1, r0
 800edf8:	9802      	ldr	r0, [sp, #8]
 800edfa:	f000 fb89 	bl	800f510 <__mcmp>
 800edfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee00:	4602      	mov	r2, r0
 800ee02:	4631      	mov	r1, r6
 800ee04:	4648      	mov	r0, r9
 800ee06:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee0a:	f000 f94f 	bl	800f0ac <_Bfree>
 800ee0e:	9b07      	ldr	r3, [sp, #28]
 800ee10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee12:	9e00      	ldr	r6, [sp, #0]
 800ee14:	ea42 0103 	orr.w	r1, r2, r3
 800ee18:	9b06      	ldr	r3, [sp, #24]
 800ee1a:	4319      	orrs	r1, r3
 800ee1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee1e:	d10d      	bne.n	800ee3c <_dtoa_r+0xa44>
 800ee20:	2b39      	cmp	r3, #57	@ 0x39
 800ee22:	d027      	beq.n	800ee74 <_dtoa_r+0xa7c>
 800ee24:	9a04      	ldr	r2, [sp, #16]
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	dd01      	ble.n	800ee2e <_dtoa_r+0xa36>
 800ee2a:	9b03      	ldr	r3, [sp, #12]
 800ee2c:	3331      	adds	r3, #49	@ 0x31
 800ee2e:	f88b 3000 	strb.w	r3, [fp]
 800ee32:	e52e      	b.n	800e892 <_dtoa_r+0x49a>
 800ee34:	4628      	mov	r0, r5
 800ee36:	e7b9      	b.n	800edac <_dtoa_r+0x9b4>
 800ee38:	2201      	movs	r2, #1
 800ee3a:	e7e2      	b.n	800ee02 <_dtoa_r+0xa0a>
 800ee3c:	9904      	ldr	r1, [sp, #16]
 800ee3e:	2900      	cmp	r1, #0
 800ee40:	db04      	blt.n	800ee4c <_dtoa_r+0xa54>
 800ee42:	9807      	ldr	r0, [sp, #28]
 800ee44:	4301      	orrs	r1, r0
 800ee46:	9806      	ldr	r0, [sp, #24]
 800ee48:	4301      	orrs	r1, r0
 800ee4a:	d120      	bne.n	800ee8e <_dtoa_r+0xa96>
 800ee4c:	2a00      	cmp	r2, #0
 800ee4e:	ddee      	ble.n	800ee2e <_dtoa_r+0xa36>
 800ee50:	9902      	ldr	r1, [sp, #8]
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	2201      	movs	r2, #1
 800ee56:	4648      	mov	r0, r9
 800ee58:	f000 faee 	bl	800f438 <__lshift>
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	9002      	str	r0, [sp, #8]
 800ee60:	f000 fb56 	bl	800f510 <__mcmp>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	9b00      	ldr	r3, [sp, #0]
 800ee68:	dc02      	bgt.n	800ee70 <_dtoa_r+0xa78>
 800ee6a:	d1e0      	bne.n	800ee2e <_dtoa_r+0xa36>
 800ee6c:	07da      	lsls	r2, r3, #31
 800ee6e:	d5de      	bpl.n	800ee2e <_dtoa_r+0xa36>
 800ee70:	2b39      	cmp	r3, #57	@ 0x39
 800ee72:	d1da      	bne.n	800ee2a <_dtoa_r+0xa32>
 800ee74:	2339      	movs	r3, #57	@ 0x39
 800ee76:	f88b 3000 	strb.w	r3, [fp]
 800ee7a:	4633      	mov	r3, r6
 800ee7c:	461e      	mov	r6, r3
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee84:	2a39      	cmp	r2, #57	@ 0x39
 800ee86:	d04e      	beq.n	800ef26 <_dtoa_r+0xb2e>
 800ee88:	3201      	adds	r2, #1
 800ee8a:	701a      	strb	r2, [r3, #0]
 800ee8c:	e501      	b.n	800e892 <_dtoa_r+0x49a>
 800ee8e:	2a00      	cmp	r2, #0
 800ee90:	dd03      	ble.n	800ee9a <_dtoa_r+0xaa2>
 800ee92:	2b39      	cmp	r3, #57	@ 0x39
 800ee94:	d0ee      	beq.n	800ee74 <_dtoa_r+0xa7c>
 800ee96:	3301      	adds	r3, #1
 800ee98:	e7c9      	b.n	800ee2e <_dtoa_r+0xa36>
 800ee9a:	9a00      	ldr	r2, [sp, #0]
 800ee9c:	9908      	ldr	r1, [sp, #32]
 800ee9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eea2:	428a      	cmp	r2, r1
 800eea4:	d028      	beq.n	800eef8 <_dtoa_r+0xb00>
 800eea6:	9902      	ldr	r1, [sp, #8]
 800eea8:	2300      	movs	r3, #0
 800eeaa:	220a      	movs	r2, #10
 800eeac:	4648      	mov	r0, r9
 800eeae:	f000 f91f 	bl	800f0f0 <__multadd>
 800eeb2:	42af      	cmp	r7, r5
 800eeb4:	9002      	str	r0, [sp, #8]
 800eeb6:	f04f 0300 	mov.w	r3, #0
 800eeba:	f04f 020a 	mov.w	r2, #10
 800eebe:	4639      	mov	r1, r7
 800eec0:	4648      	mov	r0, r9
 800eec2:	d107      	bne.n	800eed4 <_dtoa_r+0xadc>
 800eec4:	f000 f914 	bl	800f0f0 <__multadd>
 800eec8:	4607      	mov	r7, r0
 800eeca:	4605      	mov	r5, r0
 800eecc:	9b00      	ldr	r3, [sp, #0]
 800eece:	3301      	adds	r3, #1
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	e777      	b.n	800edc4 <_dtoa_r+0x9cc>
 800eed4:	f000 f90c 	bl	800f0f0 <__multadd>
 800eed8:	4629      	mov	r1, r5
 800eeda:	4607      	mov	r7, r0
 800eedc:	2300      	movs	r3, #0
 800eede:	220a      	movs	r2, #10
 800eee0:	4648      	mov	r0, r9
 800eee2:	f000 f905 	bl	800f0f0 <__multadd>
 800eee6:	4605      	mov	r5, r0
 800eee8:	e7f0      	b.n	800eecc <_dtoa_r+0xad4>
 800eeea:	f1bb 0f00 	cmp.w	fp, #0
 800eeee:	bfcc      	ite	gt
 800eef0:	465e      	movgt	r6, fp
 800eef2:	2601      	movle	r6, #1
 800eef4:	4456      	add	r6, sl
 800eef6:	2700      	movs	r7, #0
 800eef8:	9902      	ldr	r1, [sp, #8]
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	2201      	movs	r2, #1
 800eefe:	4648      	mov	r0, r9
 800ef00:	f000 fa9a 	bl	800f438 <__lshift>
 800ef04:	4621      	mov	r1, r4
 800ef06:	9002      	str	r0, [sp, #8]
 800ef08:	f000 fb02 	bl	800f510 <__mcmp>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	dcb4      	bgt.n	800ee7a <_dtoa_r+0xa82>
 800ef10:	d102      	bne.n	800ef18 <_dtoa_r+0xb20>
 800ef12:	9b00      	ldr	r3, [sp, #0]
 800ef14:	07db      	lsls	r3, r3, #31
 800ef16:	d4b0      	bmi.n	800ee7a <_dtoa_r+0xa82>
 800ef18:	4633      	mov	r3, r6
 800ef1a:	461e      	mov	r6, r3
 800ef1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef20:	2a30      	cmp	r2, #48	@ 0x30
 800ef22:	d0fa      	beq.n	800ef1a <_dtoa_r+0xb22>
 800ef24:	e4b5      	b.n	800e892 <_dtoa_r+0x49a>
 800ef26:	459a      	cmp	sl, r3
 800ef28:	d1a8      	bne.n	800ee7c <_dtoa_r+0xa84>
 800ef2a:	2331      	movs	r3, #49	@ 0x31
 800ef2c:	f108 0801 	add.w	r8, r8, #1
 800ef30:	f88a 3000 	strb.w	r3, [sl]
 800ef34:	e4ad      	b.n	800e892 <_dtoa_r+0x49a>
 800ef36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ef94 <_dtoa_r+0xb9c>
 800ef3c:	b11b      	cbz	r3, 800ef46 <_dtoa_r+0xb4e>
 800ef3e:	f10a 0308 	add.w	r3, sl, #8
 800ef42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ef44:	6013      	str	r3, [r2, #0]
 800ef46:	4650      	mov	r0, sl
 800ef48:	b017      	add	sp, #92	@ 0x5c
 800ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4e:	9b07      	ldr	r3, [sp, #28]
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	f77f ae2e 	ble.w	800ebb2 <_dtoa_r+0x7ba>
 800ef56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef58:	9308      	str	r3, [sp, #32]
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	e64d      	b.n	800ebfa <_dtoa_r+0x802>
 800ef5e:	f1bb 0f00 	cmp.w	fp, #0
 800ef62:	f77f aed9 	ble.w	800ed18 <_dtoa_r+0x920>
 800ef66:	4656      	mov	r6, sl
 800ef68:	9802      	ldr	r0, [sp, #8]
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	f7ff f9b9 	bl	800e2e2 <quorem>
 800ef70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ef74:	f806 3b01 	strb.w	r3, [r6], #1
 800ef78:	eba6 020a 	sub.w	r2, r6, sl
 800ef7c:	4593      	cmp	fp, r2
 800ef7e:	ddb4      	ble.n	800eeea <_dtoa_r+0xaf2>
 800ef80:	9902      	ldr	r1, [sp, #8]
 800ef82:	2300      	movs	r3, #0
 800ef84:	220a      	movs	r2, #10
 800ef86:	4648      	mov	r0, r9
 800ef88:	f000 f8b2 	bl	800f0f0 <__multadd>
 800ef8c:	9002      	str	r0, [sp, #8]
 800ef8e:	e7eb      	b.n	800ef68 <_dtoa_r+0xb70>
 800ef90:	08010af0 	.word	0x08010af0
 800ef94:	08010a74 	.word	0x08010a74

0800ef98 <_free_r>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	2900      	cmp	r1, #0
 800ef9e:	d041      	beq.n	800f024 <_free_r+0x8c>
 800efa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efa4:	1f0c      	subs	r4, r1, #4
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	bfb8      	it	lt
 800efaa:	18e4      	addlt	r4, r4, r3
 800efac:	f7fe fa88 	bl	800d4c0 <__malloc_lock>
 800efb0:	4a1d      	ldr	r2, [pc, #116]	@ (800f028 <_free_r+0x90>)
 800efb2:	6813      	ldr	r3, [r2, #0]
 800efb4:	b933      	cbnz	r3, 800efc4 <_free_r+0x2c>
 800efb6:	6063      	str	r3, [r4, #4]
 800efb8:	6014      	str	r4, [r2, #0]
 800efba:	4628      	mov	r0, r5
 800efbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efc0:	f7fe ba84 	b.w	800d4cc <__malloc_unlock>
 800efc4:	42a3      	cmp	r3, r4
 800efc6:	d908      	bls.n	800efda <_free_r+0x42>
 800efc8:	6820      	ldr	r0, [r4, #0]
 800efca:	1821      	adds	r1, r4, r0
 800efcc:	428b      	cmp	r3, r1
 800efce:	bf01      	itttt	eq
 800efd0:	6819      	ldreq	r1, [r3, #0]
 800efd2:	685b      	ldreq	r3, [r3, #4]
 800efd4:	1809      	addeq	r1, r1, r0
 800efd6:	6021      	streq	r1, [r4, #0]
 800efd8:	e7ed      	b.n	800efb6 <_free_r+0x1e>
 800efda:	461a      	mov	r2, r3
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	b10b      	cbz	r3, 800efe4 <_free_r+0x4c>
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	d9fa      	bls.n	800efda <_free_r+0x42>
 800efe4:	6811      	ldr	r1, [r2, #0]
 800efe6:	1850      	adds	r0, r2, r1
 800efe8:	42a0      	cmp	r0, r4
 800efea:	d10b      	bne.n	800f004 <_free_r+0x6c>
 800efec:	6820      	ldr	r0, [r4, #0]
 800efee:	4401      	add	r1, r0
 800eff0:	1850      	adds	r0, r2, r1
 800eff2:	4283      	cmp	r3, r0
 800eff4:	6011      	str	r1, [r2, #0]
 800eff6:	d1e0      	bne.n	800efba <_free_r+0x22>
 800eff8:	6818      	ldr	r0, [r3, #0]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	6053      	str	r3, [r2, #4]
 800effe:	4408      	add	r0, r1
 800f000:	6010      	str	r0, [r2, #0]
 800f002:	e7da      	b.n	800efba <_free_r+0x22>
 800f004:	d902      	bls.n	800f00c <_free_r+0x74>
 800f006:	230c      	movs	r3, #12
 800f008:	602b      	str	r3, [r5, #0]
 800f00a:	e7d6      	b.n	800efba <_free_r+0x22>
 800f00c:	6820      	ldr	r0, [r4, #0]
 800f00e:	1821      	adds	r1, r4, r0
 800f010:	428b      	cmp	r3, r1
 800f012:	bf04      	itt	eq
 800f014:	6819      	ldreq	r1, [r3, #0]
 800f016:	685b      	ldreq	r3, [r3, #4]
 800f018:	6063      	str	r3, [r4, #4]
 800f01a:	bf04      	itt	eq
 800f01c:	1809      	addeq	r1, r1, r0
 800f01e:	6021      	streq	r1, [r4, #0]
 800f020:	6054      	str	r4, [r2, #4]
 800f022:	e7ca      	b.n	800efba <_free_r+0x22>
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	bf00      	nop
 800f028:	20002440 	.word	0x20002440

0800f02c <_Balloc>:
 800f02c:	b570      	push	{r4, r5, r6, lr}
 800f02e:	69c6      	ldr	r6, [r0, #28]
 800f030:	4604      	mov	r4, r0
 800f032:	460d      	mov	r5, r1
 800f034:	b976      	cbnz	r6, 800f054 <_Balloc+0x28>
 800f036:	2010      	movs	r0, #16
 800f038:	f7fe f998 	bl	800d36c <malloc>
 800f03c:	4602      	mov	r2, r0
 800f03e:	61e0      	str	r0, [r4, #28]
 800f040:	b920      	cbnz	r0, 800f04c <_Balloc+0x20>
 800f042:	4b18      	ldr	r3, [pc, #96]	@ (800f0a4 <_Balloc+0x78>)
 800f044:	4818      	ldr	r0, [pc, #96]	@ (800f0a8 <_Balloc+0x7c>)
 800f046:	216b      	movs	r1, #107	@ 0x6b
 800f048:	f000 fe10 	bl	800fc6c <__assert_func>
 800f04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f050:	6006      	str	r6, [r0, #0]
 800f052:	60c6      	str	r6, [r0, #12]
 800f054:	69e6      	ldr	r6, [r4, #28]
 800f056:	68f3      	ldr	r3, [r6, #12]
 800f058:	b183      	cbz	r3, 800f07c <_Balloc+0x50>
 800f05a:	69e3      	ldr	r3, [r4, #28]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f062:	b9b8      	cbnz	r0, 800f094 <_Balloc+0x68>
 800f064:	2101      	movs	r1, #1
 800f066:	fa01 f605 	lsl.w	r6, r1, r5
 800f06a:	1d72      	adds	r2, r6, #5
 800f06c:	0092      	lsls	r2, r2, #2
 800f06e:	4620      	mov	r0, r4
 800f070:	f000 fe1a 	bl	800fca8 <_calloc_r>
 800f074:	b160      	cbz	r0, 800f090 <_Balloc+0x64>
 800f076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f07a:	e00e      	b.n	800f09a <_Balloc+0x6e>
 800f07c:	2221      	movs	r2, #33	@ 0x21
 800f07e:	2104      	movs	r1, #4
 800f080:	4620      	mov	r0, r4
 800f082:	f000 fe11 	bl	800fca8 <_calloc_r>
 800f086:	69e3      	ldr	r3, [r4, #28]
 800f088:	60f0      	str	r0, [r6, #12]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e4      	bne.n	800f05a <_Balloc+0x2e>
 800f090:	2000      	movs	r0, #0
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	6802      	ldr	r2, [r0, #0]
 800f096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f09a:	2300      	movs	r3, #0
 800f09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0a0:	e7f7      	b.n	800f092 <_Balloc+0x66>
 800f0a2:	bf00      	nop
 800f0a4:	08010a81 	.word	0x08010a81
 800f0a8:	08010b01 	.word	0x08010b01

0800f0ac <_Bfree>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	69c6      	ldr	r6, [r0, #28]
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b976      	cbnz	r6, 800f0d4 <_Bfree+0x28>
 800f0b6:	2010      	movs	r0, #16
 800f0b8:	f7fe f958 	bl	800d36c <malloc>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	61e8      	str	r0, [r5, #28]
 800f0c0:	b920      	cbnz	r0, 800f0cc <_Bfree+0x20>
 800f0c2:	4b09      	ldr	r3, [pc, #36]	@ (800f0e8 <_Bfree+0x3c>)
 800f0c4:	4809      	ldr	r0, [pc, #36]	@ (800f0ec <_Bfree+0x40>)
 800f0c6:	218f      	movs	r1, #143	@ 0x8f
 800f0c8:	f000 fdd0 	bl	800fc6c <__assert_func>
 800f0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0d0:	6006      	str	r6, [r0, #0]
 800f0d2:	60c6      	str	r6, [r0, #12]
 800f0d4:	b13c      	cbz	r4, 800f0e6 <_Bfree+0x3a>
 800f0d6:	69eb      	ldr	r3, [r5, #28]
 800f0d8:	6862      	ldr	r2, [r4, #4]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0e0:	6021      	str	r1, [r4, #0]
 800f0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	08010a81 	.word	0x08010a81
 800f0ec:	08010b01 	.word	0x08010b01

0800f0f0 <__multadd>:
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	690d      	ldr	r5, [r1, #16]
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	461e      	mov	r6, r3
 800f0fc:	f101 0c14 	add.w	ip, r1, #20
 800f100:	2000      	movs	r0, #0
 800f102:	f8dc 3000 	ldr.w	r3, [ip]
 800f106:	b299      	uxth	r1, r3
 800f108:	fb02 6101 	mla	r1, r2, r1, r6
 800f10c:	0c1e      	lsrs	r6, r3, #16
 800f10e:	0c0b      	lsrs	r3, r1, #16
 800f110:	fb02 3306 	mla	r3, r2, r6, r3
 800f114:	b289      	uxth	r1, r1
 800f116:	3001      	adds	r0, #1
 800f118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f11c:	4285      	cmp	r5, r0
 800f11e:	f84c 1b04 	str.w	r1, [ip], #4
 800f122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f126:	dcec      	bgt.n	800f102 <__multadd+0x12>
 800f128:	b30e      	cbz	r6, 800f16e <__multadd+0x7e>
 800f12a:	68a3      	ldr	r3, [r4, #8]
 800f12c:	42ab      	cmp	r3, r5
 800f12e:	dc19      	bgt.n	800f164 <__multadd+0x74>
 800f130:	6861      	ldr	r1, [r4, #4]
 800f132:	4638      	mov	r0, r7
 800f134:	3101      	adds	r1, #1
 800f136:	f7ff ff79 	bl	800f02c <_Balloc>
 800f13a:	4680      	mov	r8, r0
 800f13c:	b928      	cbnz	r0, 800f14a <__multadd+0x5a>
 800f13e:	4602      	mov	r2, r0
 800f140:	4b0c      	ldr	r3, [pc, #48]	@ (800f174 <__multadd+0x84>)
 800f142:	480d      	ldr	r0, [pc, #52]	@ (800f178 <__multadd+0x88>)
 800f144:	21ba      	movs	r1, #186	@ 0xba
 800f146:	f000 fd91 	bl	800fc6c <__assert_func>
 800f14a:	6922      	ldr	r2, [r4, #16]
 800f14c:	3202      	adds	r2, #2
 800f14e:	f104 010c 	add.w	r1, r4, #12
 800f152:	0092      	lsls	r2, r2, #2
 800f154:	300c      	adds	r0, #12
 800f156:	f7ff f8b6 	bl	800e2c6 <memcpy>
 800f15a:	4621      	mov	r1, r4
 800f15c:	4638      	mov	r0, r7
 800f15e:	f7ff ffa5 	bl	800f0ac <_Bfree>
 800f162:	4644      	mov	r4, r8
 800f164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f168:	3501      	adds	r5, #1
 800f16a:	615e      	str	r6, [r3, #20]
 800f16c:	6125      	str	r5, [r4, #16]
 800f16e:	4620      	mov	r0, r4
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f174:	08010af0 	.word	0x08010af0
 800f178:	08010b01 	.word	0x08010b01

0800f17c <__hi0bits>:
 800f17c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f180:	4603      	mov	r3, r0
 800f182:	bf36      	itet	cc
 800f184:	0403      	lslcc	r3, r0, #16
 800f186:	2000      	movcs	r0, #0
 800f188:	2010      	movcc	r0, #16
 800f18a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f18e:	bf3c      	itt	cc
 800f190:	021b      	lslcc	r3, r3, #8
 800f192:	3008      	addcc	r0, #8
 800f194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f198:	bf3c      	itt	cc
 800f19a:	011b      	lslcc	r3, r3, #4
 800f19c:	3004      	addcc	r0, #4
 800f19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1a2:	bf3c      	itt	cc
 800f1a4:	009b      	lslcc	r3, r3, #2
 800f1a6:	3002      	addcc	r0, #2
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	db05      	blt.n	800f1b8 <__hi0bits+0x3c>
 800f1ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f1b0:	f100 0001 	add.w	r0, r0, #1
 800f1b4:	bf08      	it	eq
 800f1b6:	2020      	moveq	r0, #32
 800f1b8:	4770      	bx	lr

0800f1ba <__lo0bits>:
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	4602      	mov	r2, r0
 800f1be:	f013 0007 	ands.w	r0, r3, #7
 800f1c2:	d00b      	beq.n	800f1dc <__lo0bits+0x22>
 800f1c4:	07d9      	lsls	r1, r3, #31
 800f1c6:	d421      	bmi.n	800f20c <__lo0bits+0x52>
 800f1c8:	0798      	lsls	r0, r3, #30
 800f1ca:	bf49      	itett	mi
 800f1cc:	085b      	lsrmi	r3, r3, #1
 800f1ce:	089b      	lsrpl	r3, r3, #2
 800f1d0:	2001      	movmi	r0, #1
 800f1d2:	6013      	strmi	r3, [r2, #0]
 800f1d4:	bf5c      	itt	pl
 800f1d6:	6013      	strpl	r3, [r2, #0]
 800f1d8:	2002      	movpl	r0, #2
 800f1da:	4770      	bx	lr
 800f1dc:	b299      	uxth	r1, r3
 800f1de:	b909      	cbnz	r1, 800f1e4 <__lo0bits+0x2a>
 800f1e0:	0c1b      	lsrs	r3, r3, #16
 800f1e2:	2010      	movs	r0, #16
 800f1e4:	b2d9      	uxtb	r1, r3
 800f1e6:	b909      	cbnz	r1, 800f1ec <__lo0bits+0x32>
 800f1e8:	3008      	adds	r0, #8
 800f1ea:	0a1b      	lsrs	r3, r3, #8
 800f1ec:	0719      	lsls	r1, r3, #28
 800f1ee:	bf04      	itt	eq
 800f1f0:	091b      	lsreq	r3, r3, #4
 800f1f2:	3004      	addeq	r0, #4
 800f1f4:	0799      	lsls	r1, r3, #30
 800f1f6:	bf04      	itt	eq
 800f1f8:	089b      	lsreq	r3, r3, #2
 800f1fa:	3002      	addeq	r0, #2
 800f1fc:	07d9      	lsls	r1, r3, #31
 800f1fe:	d403      	bmi.n	800f208 <__lo0bits+0x4e>
 800f200:	085b      	lsrs	r3, r3, #1
 800f202:	f100 0001 	add.w	r0, r0, #1
 800f206:	d003      	beq.n	800f210 <__lo0bits+0x56>
 800f208:	6013      	str	r3, [r2, #0]
 800f20a:	4770      	bx	lr
 800f20c:	2000      	movs	r0, #0
 800f20e:	4770      	bx	lr
 800f210:	2020      	movs	r0, #32
 800f212:	4770      	bx	lr

0800f214 <__i2b>:
 800f214:	b510      	push	{r4, lr}
 800f216:	460c      	mov	r4, r1
 800f218:	2101      	movs	r1, #1
 800f21a:	f7ff ff07 	bl	800f02c <_Balloc>
 800f21e:	4602      	mov	r2, r0
 800f220:	b928      	cbnz	r0, 800f22e <__i2b+0x1a>
 800f222:	4b05      	ldr	r3, [pc, #20]	@ (800f238 <__i2b+0x24>)
 800f224:	4805      	ldr	r0, [pc, #20]	@ (800f23c <__i2b+0x28>)
 800f226:	f240 1145 	movw	r1, #325	@ 0x145
 800f22a:	f000 fd1f 	bl	800fc6c <__assert_func>
 800f22e:	2301      	movs	r3, #1
 800f230:	6144      	str	r4, [r0, #20]
 800f232:	6103      	str	r3, [r0, #16]
 800f234:	bd10      	pop	{r4, pc}
 800f236:	bf00      	nop
 800f238:	08010af0 	.word	0x08010af0
 800f23c:	08010b01 	.word	0x08010b01

0800f240 <__multiply>:
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	4617      	mov	r7, r2
 800f246:	690a      	ldr	r2, [r1, #16]
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	bfa8      	it	ge
 800f24e:	463b      	movge	r3, r7
 800f250:	4689      	mov	r9, r1
 800f252:	bfa4      	itt	ge
 800f254:	460f      	movge	r7, r1
 800f256:	4699      	movge	r9, r3
 800f258:	693d      	ldr	r5, [r7, #16]
 800f25a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	6879      	ldr	r1, [r7, #4]
 800f262:	eb05 060a 	add.w	r6, r5, sl
 800f266:	42b3      	cmp	r3, r6
 800f268:	b085      	sub	sp, #20
 800f26a:	bfb8      	it	lt
 800f26c:	3101      	addlt	r1, #1
 800f26e:	f7ff fedd 	bl	800f02c <_Balloc>
 800f272:	b930      	cbnz	r0, 800f282 <__multiply+0x42>
 800f274:	4602      	mov	r2, r0
 800f276:	4b41      	ldr	r3, [pc, #260]	@ (800f37c <__multiply+0x13c>)
 800f278:	4841      	ldr	r0, [pc, #260]	@ (800f380 <__multiply+0x140>)
 800f27a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f27e:	f000 fcf5 	bl	800fc6c <__assert_func>
 800f282:	f100 0414 	add.w	r4, r0, #20
 800f286:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f28a:	4623      	mov	r3, r4
 800f28c:	2200      	movs	r2, #0
 800f28e:	4573      	cmp	r3, lr
 800f290:	d320      	bcc.n	800f2d4 <__multiply+0x94>
 800f292:	f107 0814 	add.w	r8, r7, #20
 800f296:	f109 0114 	add.w	r1, r9, #20
 800f29a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f29e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f2a2:	9302      	str	r3, [sp, #8]
 800f2a4:	1beb      	subs	r3, r5, r7
 800f2a6:	3b15      	subs	r3, #21
 800f2a8:	f023 0303 	bic.w	r3, r3, #3
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	3715      	adds	r7, #21
 800f2b0:	42bd      	cmp	r5, r7
 800f2b2:	bf38      	it	cc
 800f2b4:	2304      	movcc	r3, #4
 800f2b6:	9301      	str	r3, [sp, #4]
 800f2b8:	9b02      	ldr	r3, [sp, #8]
 800f2ba:	9103      	str	r1, [sp, #12]
 800f2bc:	428b      	cmp	r3, r1
 800f2be:	d80c      	bhi.n	800f2da <__multiply+0x9a>
 800f2c0:	2e00      	cmp	r6, #0
 800f2c2:	dd03      	ble.n	800f2cc <__multiply+0x8c>
 800f2c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d055      	beq.n	800f378 <__multiply+0x138>
 800f2cc:	6106      	str	r6, [r0, #16]
 800f2ce:	b005      	add	sp, #20
 800f2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d4:	f843 2b04 	str.w	r2, [r3], #4
 800f2d8:	e7d9      	b.n	800f28e <__multiply+0x4e>
 800f2da:	f8b1 a000 	ldrh.w	sl, [r1]
 800f2de:	f1ba 0f00 	cmp.w	sl, #0
 800f2e2:	d01f      	beq.n	800f324 <__multiply+0xe4>
 800f2e4:	46c4      	mov	ip, r8
 800f2e6:	46a1      	mov	r9, r4
 800f2e8:	2700      	movs	r7, #0
 800f2ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f2ee:	f8d9 3000 	ldr.w	r3, [r9]
 800f2f2:	fa1f fb82 	uxth.w	fp, r2
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2fc:	443b      	add	r3, r7
 800f2fe:	f8d9 7000 	ldr.w	r7, [r9]
 800f302:	0c12      	lsrs	r2, r2, #16
 800f304:	0c3f      	lsrs	r7, r7, #16
 800f306:	fb0a 7202 	mla	r2, sl, r2, r7
 800f30a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f30e:	b29b      	uxth	r3, r3
 800f310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f314:	4565      	cmp	r5, ip
 800f316:	f849 3b04 	str.w	r3, [r9], #4
 800f31a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f31e:	d8e4      	bhi.n	800f2ea <__multiply+0xaa>
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	50e7      	str	r7, [r4, r3]
 800f324:	9b03      	ldr	r3, [sp, #12]
 800f326:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f32a:	3104      	adds	r1, #4
 800f32c:	f1b9 0f00 	cmp.w	r9, #0
 800f330:	d020      	beq.n	800f374 <__multiply+0x134>
 800f332:	6823      	ldr	r3, [r4, #0]
 800f334:	4647      	mov	r7, r8
 800f336:	46a4      	mov	ip, r4
 800f338:	f04f 0a00 	mov.w	sl, #0
 800f33c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f340:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f344:	fb09 220b 	mla	r2, r9, fp, r2
 800f348:	4452      	add	r2, sl
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f350:	f84c 3b04 	str.w	r3, [ip], #4
 800f354:	f857 3b04 	ldr.w	r3, [r7], #4
 800f358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f35c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f360:	fb09 330a 	mla	r3, r9, sl, r3
 800f364:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f368:	42bd      	cmp	r5, r7
 800f36a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f36e:	d8e5      	bhi.n	800f33c <__multiply+0xfc>
 800f370:	9a01      	ldr	r2, [sp, #4]
 800f372:	50a3      	str	r3, [r4, r2]
 800f374:	3404      	adds	r4, #4
 800f376:	e79f      	b.n	800f2b8 <__multiply+0x78>
 800f378:	3e01      	subs	r6, #1
 800f37a:	e7a1      	b.n	800f2c0 <__multiply+0x80>
 800f37c:	08010af0 	.word	0x08010af0
 800f380:	08010b01 	.word	0x08010b01

0800f384 <__pow5mult>:
 800f384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f388:	4615      	mov	r5, r2
 800f38a:	f012 0203 	ands.w	r2, r2, #3
 800f38e:	4607      	mov	r7, r0
 800f390:	460e      	mov	r6, r1
 800f392:	d007      	beq.n	800f3a4 <__pow5mult+0x20>
 800f394:	4c25      	ldr	r4, [pc, #148]	@ (800f42c <__pow5mult+0xa8>)
 800f396:	3a01      	subs	r2, #1
 800f398:	2300      	movs	r3, #0
 800f39a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f39e:	f7ff fea7 	bl	800f0f0 <__multadd>
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	10ad      	asrs	r5, r5, #2
 800f3a6:	d03d      	beq.n	800f424 <__pow5mult+0xa0>
 800f3a8:	69fc      	ldr	r4, [r7, #28]
 800f3aa:	b97c      	cbnz	r4, 800f3cc <__pow5mult+0x48>
 800f3ac:	2010      	movs	r0, #16
 800f3ae:	f7fd ffdd 	bl	800d36c <malloc>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	61f8      	str	r0, [r7, #28]
 800f3b6:	b928      	cbnz	r0, 800f3c4 <__pow5mult+0x40>
 800f3b8:	4b1d      	ldr	r3, [pc, #116]	@ (800f430 <__pow5mult+0xac>)
 800f3ba:	481e      	ldr	r0, [pc, #120]	@ (800f434 <__pow5mult+0xb0>)
 800f3bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f3c0:	f000 fc54 	bl	800fc6c <__assert_func>
 800f3c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3c8:	6004      	str	r4, [r0, #0]
 800f3ca:	60c4      	str	r4, [r0, #12]
 800f3cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f3d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3d4:	b94c      	cbnz	r4, 800f3ea <__pow5mult+0x66>
 800f3d6:	f240 2171 	movw	r1, #625	@ 0x271
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f7ff ff1a 	bl	800f214 <__i2b>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	6003      	str	r3, [r0, #0]
 800f3ea:	f04f 0900 	mov.w	r9, #0
 800f3ee:	07eb      	lsls	r3, r5, #31
 800f3f0:	d50a      	bpl.n	800f408 <__pow5mult+0x84>
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4622      	mov	r2, r4
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	f7ff ff22 	bl	800f240 <__multiply>
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	4680      	mov	r8, r0
 800f400:	4638      	mov	r0, r7
 800f402:	f7ff fe53 	bl	800f0ac <_Bfree>
 800f406:	4646      	mov	r6, r8
 800f408:	106d      	asrs	r5, r5, #1
 800f40a:	d00b      	beq.n	800f424 <__pow5mult+0xa0>
 800f40c:	6820      	ldr	r0, [r4, #0]
 800f40e:	b938      	cbnz	r0, 800f420 <__pow5mult+0x9c>
 800f410:	4622      	mov	r2, r4
 800f412:	4621      	mov	r1, r4
 800f414:	4638      	mov	r0, r7
 800f416:	f7ff ff13 	bl	800f240 <__multiply>
 800f41a:	6020      	str	r0, [r4, #0]
 800f41c:	f8c0 9000 	str.w	r9, [r0]
 800f420:	4604      	mov	r4, r0
 800f422:	e7e4      	b.n	800f3ee <__pow5mult+0x6a>
 800f424:	4630      	mov	r0, r6
 800f426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f42a:	bf00      	nop
 800f42c:	08010bb4 	.word	0x08010bb4
 800f430:	08010a81 	.word	0x08010a81
 800f434:	08010b01 	.word	0x08010b01

0800f438 <__lshift>:
 800f438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f43c:	460c      	mov	r4, r1
 800f43e:	6849      	ldr	r1, [r1, #4]
 800f440:	6923      	ldr	r3, [r4, #16]
 800f442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f446:	68a3      	ldr	r3, [r4, #8]
 800f448:	4607      	mov	r7, r0
 800f44a:	4691      	mov	r9, r2
 800f44c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f450:	f108 0601 	add.w	r6, r8, #1
 800f454:	42b3      	cmp	r3, r6
 800f456:	db0b      	blt.n	800f470 <__lshift+0x38>
 800f458:	4638      	mov	r0, r7
 800f45a:	f7ff fde7 	bl	800f02c <_Balloc>
 800f45e:	4605      	mov	r5, r0
 800f460:	b948      	cbnz	r0, 800f476 <__lshift+0x3e>
 800f462:	4602      	mov	r2, r0
 800f464:	4b28      	ldr	r3, [pc, #160]	@ (800f508 <__lshift+0xd0>)
 800f466:	4829      	ldr	r0, [pc, #164]	@ (800f50c <__lshift+0xd4>)
 800f468:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f46c:	f000 fbfe 	bl	800fc6c <__assert_func>
 800f470:	3101      	adds	r1, #1
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	e7ee      	b.n	800f454 <__lshift+0x1c>
 800f476:	2300      	movs	r3, #0
 800f478:	f100 0114 	add.w	r1, r0, #20
 800f47c:	f100 0210 	add.w	r2, r0, #16
 800f480:	4618      	mov	r0, r3
 800f482:	4553      	cmp	r3, sl
 800f484:	db33      	blt.n	800f4ee <__lshift+0xb6>
 800f486:	6920      	ldr	r0, [r4, #16]
 800f488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f48c:	f104 0314 	add.w	r3, r4, #20
 800f490:	f019 091f 	ands.w	r9, r9, #31
 800f494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f49c:	d02b      	beq.n	800f4f6 <__lshift+0xbe>
 800f49e:	f1c9 0e20 	rsb	lr, r9, #32
 800f4a2:	468a      	mov	sl, r1
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	6818      	ldr	r0, [r3, #0]
 800f4a8:	fa00 f009 	lsl.w	r0, r0, r9
 800f4ac:	4310      	orrs	r0, r2
 800f4ae:	f84a 0b04 	str.w	r0, [sl], #4
 800f4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b6:	459c      	cmp	ip, r3
 800f4b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f4bc:	d8f3      	bhi.n	800f4a6 <__lshift+0x6e>
 800f4be:	ebac 0304 	sub.w	r3, ip, r4
 800f4c2:	3b15      	subs	r3, #21
 800f4c4:	f023 0303 	bic.w	r3, r3, #3
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	f104 0015 	add.w	r0, r4, #21
 800f4ce:	4560      	cmp	r0, ip
 800f4d0:	bf88      	it	hi
 800f4d2:	2304      	movhi	r3, #4
 800f4d4:	50ca      	str	r2, [r1, r3]
 800f4d6:	b10a      	cbz	r2, 800f4dc <__lshift+0xa4>
 800f4d8:	f108 0602 	add.w	r6, r8, #2
 800f4dc:	3e01      	subs	r6, #1
 800f4de:	4638      	mov	r0, r7
 800f4e0:	612e      	str	r6, [r5, #16]
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	f7ff fde2 	bl	800f0ac <_Bfree>
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	e7c5      	b.n	800f482 <__lshift+0x4a>
 800f4f6:	3904      	subs	r1, #4
 800f4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f500:	459c      	cmp	ip, r3
 800f502:	d8f9      	bhi.n	800f4f8 <__lshift+0xc0>
 800f504:	e7ea      	b.n	800f4dc <__lshift+0xa4>
 800f506:	bf00      	nop
 800f508:	08010af0 	.word	0x08010af0
 800f50c:	08010b01 	.word	0x08010b01

0800f510 <__mcmp>:
 800f510:	690a      	ldr	r2, [r1, #16]
 800f512:	4603      	mov	r3, r0
 800f514:	6900      	ldr	r0, [r0, #16]
 800f516:	1a80      	subs	r0, r0, r2
 800f518:	b530      	push	{r4, r5, lr}
 800f51a:	d10e      	bne.n	800f53a <__mcmp+0x2a>
 800f51c:	3314      	adds	r3, #20
 800f51e:	3114      	adds	r1, #20
 800f520:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f52c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f530:	4295      	cmp	r5, r2
 800f532:	d003      	beq.n	800f53c <__mcmp+0x2c>
 800f534:	d205      	bcs.n	800f542 <__mcmp+0x32>
 800f536:	f04f 30ff 	mov.w	r0, #4294967295
 800f53a:	bd30      	pop	{r4, r5, pc}
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d3f3      	bcc.n	800f528 <__mcmp+0x18>
 800f540:	e7fb      	b.n	800f53a <__mcmp+0x2a>
 800f542:	2001      	movs	r0, #1
 800f544:	e7f9      	b.n	800f53a <__mcmp+0x2a>
	...

0800f548 <__mdiff>:
 800f548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54c:	4689      	mov	r9, r1
 800f54e:	4606      	mov	r6, r0
 800f550:	4611      	mov	r1, r2
 800f552:	4648      	mov	r0, r9
 800f554:	4614      	mov	r4, r2
 800f556:	f7ff ffdb 	bl	800f510 <__mcmp>
 800f55a:	1e05      	subs	r5, r0, #0
 800f55c:	d112      	bne.n	800f584 <__mdiff+0x3c>
 800f55e:	4629      	mov	r1, r5
 800f560:	4630      	mov	r0, r6
 800f562:	f7ff fd63 	bl	800f02c <_Balloc>
 800f566:	4602      	mov	r2, r0
 800f568:	b928      	cbnz	r0, 800f576 <__mdiff+0x2e>
 800f56a:	4b3f      	ldr	r3, [pc, #252]	@ (800f668 <__mdiff+0x120>)
 800f56c:	f240 2137 	movw	r1, #567	@ 0x237
 800f570:	483e      	ldr	r0, [pc, #248]	@ (800f66c <__mdiff+0x124>)
 800f572:	f000 fb7b 	bl	800fc6c <__assert_func>
 800f576:	2301      	movs	r3, #1
 800f578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f57c:	4610      	mov	r0, r2
 800f57e:	b003      	add	sp, #12
 800f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f584:	bfbc      	itt	lt
 800f586:	464b      	movlt	r3, r9
 800f588:	46a1      	movlt	r9, r4
 800f58a:	4630      	mov	r0, r6
 800f58c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f590:	bfba      	itte	lt
 800f592:	461c      	movlt	r4, r3
 800f594:	2501      	movlt	r5, #1
 800f596:	2500      	movge	r5, #0
 800f598:	f7ff fd48 	bl	800f02c <_Balloc>
 800f59c:	4602      	mov	r2, r0
 800f59e:	b918      	cbnz	r0, 800f5a8 <__mdiff+0x60>
 800f5a0:	4b31      	ldr	r3, [pc, #196]	@ (800f668 <__mdiff+0x120>)
 800f5a2:	f240 2145 	movw	r1, #581	@ 0x245
 800f5a6:	e7e3      	b.n	800f570 <__mdiff+0x28>
 800f5a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f5ac:	6926      	ldr	r6, [r4, #16]
 800f5ae:	60c5      	str	r5, [r0, #12]
 800f5b0:	f109 0310 	add.w	r3, r9, #16
 800f5b4:	f109 0514 	add.w	r5, r9, #20
 800f5b8:	f104 0e14 	add.w	lr, r4, #20
 800f5bc:	f100 0b14 	add.w	fp, r0, #20
 800f5c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f5c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	46d9      	mov	r9, fp
 800f5cc:	f04f 0c00 	mov.w	ip, #0
 800f5d0:	9b01      	ldr	r3, [sp, #4]
 800f5d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f5d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5da:	9301      	str	r3, [sp, #4]
 800f5dc:	fa1f f38a 	uxth.w	r3, sl
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	b283      	uxth	r3, r0
 800f5e4:	1acb      	subs	r3, r1, r3
 800f5e6:	0c00      	lsrs	r0, r0, #16
 800f5e8:	4463      	add	r3, ip
 800f5ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5f8:	4576      	cmp	r6, lr
 800f5fa:	f849 3b04 	str.w	r3, [r9], #4
 800f5fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f602:	d8e5      	bhi.n	800f5d0 <__mdiff+0x88>
 800f604:	1b33      	subs	r3, r6, r4
 800f606:	3b15      	subs	r3, #21
 800f608:	f023 0303 	bic.w	r3, r3, #3
 800f60c:	3415      	adds	r4, #21
 800f60e:	3304      	adds	r3, #4
 800f610:	42a6      	cmp	r6, r4
 800f612:	bf38      	it	cc
 800f614:	2304      	movcc	r3, #4
 800f616:	441d      	add	r5, r3
 800f618:	445b      	add	r3, fp
 800f61a:	461e      	mov	r6, r3
 800f61c:	462c      	mov	r4, r5
 800f61e:	4544      	cmp	r4, r8
 800f620:	d30e      	bcc.n	800f640 <__mdiff+0xf8>
 800f622:	f108 0103 	add.w	r1, r8, #3
 800f626:	1b49      	subs	r1, r1, r5
 800f628:	f021 0103 	bic.w	r1, r1, #3
 800f62c:	3d03      	subs	r5, #3
 800f62e:	45a8      	cmp	r8, r5
 800f630:	bf38      	it	cc
 800f632:	2100      	movcc	r1, #0
 800f634:	440b      	add	r3, r1
 800f636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f63a:	b191      	cbz	r1, 800f662 <__mdiff+0x11a>
 800f63c:	6117      	str	r7, [r2, #16]
 800f63e:	e79d      	b.n	800f57c <__mdiff+0x34>
 800f640:	f854 1b04 	ldr.w	r1, [r4], #4
 800f644:	46e6      	mov	lr, ip
 800f646:	0c08      	lsrs	r0, r1, #16
 800f648:	fa1c fc81 	uxtah	ip, ip, r1
 800f64c:	4471      	add	r1, lr
 800f64e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f652:	b289      	uxth	r1, r1
 800f654:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f658:	f846 1b04 	str.w	r1, [r6], #4
 800f65c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f660:	e7dd      	b.n	800f61e <__mdiff+0xd6>
 800f662:	3f01      	subs	r7, #1
 800f664:	e7e7      	b.n	800f636 <__mdiff+0xee>
 800f666:	bf00      	nop
 800f668:	08010af0 	.word	0x08010af0
 800f66c:	08010b01 	.word	0x08010b01

0800f670 <__d2b>:
 800f670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f674:	460f      	mov	r7, r1
 800f676:	2101      	movs	r1, #1
 800f678:	ec59 8b10 	vmov	r8, r9, d0
 800f67c:	4616      	mov	r6, r2
 800f67e:	f7ff fcd5 	bl	800f02c <_Balloc>
 800f682:	4604      	mov	r4, r0
 800f684:	b930      	cbnz	r0, 800f694 <__d2b+0x24>
 800f686:	4602      	mov	r2, r0
 800f688:	4b23      	ldr	r3, [pc, #140]	@ (800f718 <__d2b+0xa8>)
 800f68a:	4824      	ldr	r0, [pc, #144]	@ (800f71c <__d2b+0xac>)
 800f68c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f690:	f000 faec 	bl	800fc6c <__assert_func>
 800f694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f69c:	b10d      	cbz	r5, 800f6a2 <__d2b+0x32>
 800f69e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	f1b8 0300 	subs.w	r3, r8, #0
 800f6a8:	d023      	beq.n	800f6f2 <__d2b+0x82>
 800f6aa:	4668      	mov	r0, sp
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	f7ff fd84 	bl	800f1ba <__lo0bits>
 800f6b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f6b6:	b1d0      	cbz	r0, 800f6ee <__d2b+0x7e>
 800f6b8:	f1c0 0320 	rsb	r3, r0, #32
 800f6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f6c0:	430b      	orrs	r3, r1
 800f6c2:	40c2      	lsrs	r2, r0
 800f6c4:	6163      	str	r3, [r4, #20]
 800f6c6:	9201      	str	r2, [sp, #4]
 800f6c8:	9b01      	ldr	r3, [sp, #4]
 800f6ca:	61a3      	str	r3, [r4, #24]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	bf0c      	ite	eq
 800f6d0:	2201      	moveq	r2, #1
 800f6d2:	2202      	movne	r2, #2
 800f6d4:	6122      	str	r2, [r4, #16]
 800f6d6:	b1a5      	cbz	r5, 800f702 <__d2b+0x92>
 800f6d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f6dc:	4405      	add	r5, r0
 800f6de:	603d      	str	r5, [r7, #0]
 800f6e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f6e4:	6030      	str	r0, [r6, #0]
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	b003      	add	sp, #12
 800f6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	6161      	str	r1, [r4, #20]
 800f6f0:	e7ea      	b.n	800f6c8 <__d2b+0x58>
 800f6f2:	a801      	add	r0, sp, #4
 800f6f4:	f7ff fd61 	bl	800f1ba <__lo0bits>
 800f6f8:	9b01      	ldr	r3, [sp, #4]
 800f6fa:	6163      	str	r3, [r4, #20]
 800f6fc:	3020      	adds	r0, #32
 800f6fe:	2201      	movs	r2, #1
 800f700:	e7e8      	b.n	800f6d4 <__d2b+0x64>
 800f702:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f706:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f70a:	6038      	str	r0, [r7, #0]
 800f70c:	6918      	ldr	r0, [r3, #16]
 800f70e:	f7ff fd35 	bl	800f17c <__hi0bits>
 800f712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f716:	e7e5      	b.n	800f6e4 <__d2b+0x74>
 800f718:	08010af0 	.word	0x08010af0
 800f71c:	08010b01 	.word	0x08010b01

0800f720 <__sfputc_r>:
 800f720:	6893      	ldr	r3, [r2, #8]
 800f722:	3b01      	subs	r3, #1
 800f724:	2b00      	cmp	r3, #0
 800f726:	b410      	push	{r4}
 800f728:	6093      	str	r3, [r2, #8]
 800f72a:	da08      	bge.n	800f73e <__sfputc_r+0x1e>
 800f72c:	6994      	ldr	r4, [r2, #24]
 800f72e:	42a3      	cmp	r3, r4
 800f730:	db01      	blt.n	800f736 <__sfputc_r+0x16>
 800f732:	290a      	cmp	r1, #10
 800f734:	d103      	bne.n	800f73e <__sfputc_r+0x1e>
 800f736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73a:	f7fe bca0 	b.w	800e07e <__swbuf_r>
 800f73e:	6813      	ldr	r3, [r2, #0]
 800f740:	1c58      	adds	r0, r3, #1
 800f742:	6010      	str	r0, [r2, #0]
 800f744:	7019      	strb	r1, [r3, #0]
 800f746:	4608      	mov	r0, r1
 800f748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <__sfputs_r>:
 800f74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f750:	4606      	mov	r6, r0
 800f752:	460f      	mov	r7, r1
 800f754:	4614      	mov	r4, r2
 800f756:	18d5      	adds	r5, r2, r3
 800f758:	42ac      	cmp	r4, r5
 800f75a:	d101      	bne.n	800f760 <__sfputs_r+0x12>
 800f75c:	2000      	movs	r0, #0
 800f75e:	e007      	b.n	800f770 <__sfputs_r+0x22>
 800f760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f764:	463a      	mov	r2, r7
 800f766:	4630      	mov	r0, r6
 800f768:	f7ff ffda 	bl	800f720 <__sfputc_r>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d1f3      	bne.n	800f758 <__sfputs_r+0xa>
 800f770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f774 <_vfiprintf_r>:
 800f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f778:	460d      	mov	r5, r1
 800f77a:	b09d      	sub	sp, #116	@ 0x74
 800f77c:	4614      	mov	r4, r2
 800f77e:	4698      	mov	r8, r3
 800f780:	4606      	mov	r6, r0
 800f782:	b118      	cbz	r0, 800f78c <_vfiprintf_r+0x18>
 800f784:	6a03      	ldr	r3, [r0, #32]
 800f786:	b90b      	cbnz	r3, 800f78c <_vfiprintf_r+0x18>
 800f788:	f7fe fb88 	bl	800de9c <__sinit>
 800f78c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f78e:	07d9      	lsls	r1, r3, #31
 800f790:	d405      	bmi.n	800f79e <_vfiprintf_r+0x2a>
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	059a      	lsls	r2, r3, #22
 800f796:	d402      	bmi.n	800f79e <_vfiprintf_r+0x2a>
 800f798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f79a:	f7fe fd92 	bl	800e2c2 <__retarget_lock_acquire_recursive>
 800f79e:	89ab      	ldrh	r3, [r5, #12]
 800f7a0:	071b      	lsls	r3, r3, #28
 800f7a2:	d501      	bpl.n	800f7a8 <_vfiprintf_r+0x34>
 800f7a4:	692b      	ldr	r3, [r5, #16]
 800f7a6:	b99b      	cbnz	r3, 800f7d0 <_vfiprintf_r+0x5c>
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f7fe fca6 	bl	800e0fc <__swsetup_r>
 800f7b0:	b170      	cbz	r0, 800f7d0 <_vfiprintf_r+0x5c>
 800f7b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7b4:	07dc      	lsls	r4, r3, #31
 800f7b6:	d504      	bpl.n	800f7c2 <_vfiprintf_r+0x4e>
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	b01d      	add	sp, #116	@ 0x74
 800f7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c2:	89ab      	ldrh	r3, [r5, #12]
 800f7c4:	0598      	lsls	r0, r3, #22
 800f7c6:	d4f7      	bmi.n	800f7b8 <_vfiprintf_r+0x44>
 800f7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ca:	f7fe fd7b 	bl	800e2c4 <__retarget_lock_release_recursive>
 800f7ce:	e7f3      	b.n	800f7b8 <_vfiprintf_r+0x44>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7d4:	2320      	movs	r3, #32
 800f7d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7de:	2330      	movs	r3, #48	@ 0x30
 800f7e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f990 <_vfiprintf_r+0x21c>
 800f7e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7e8:	f04f 0901 	mov.w	r9, #1
 800f7ec:	4623      	mov	r3, r4
 800f7ee:	469a      	mov	sl, r3
 800f7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7f4:	b10a      	cbz	r2, 800f7fa <_vfiprintf_r+0x86>
 800f7f6:	2a25      	cmp	r2, #37	@ 0x25
 800f7f8:	d1f9      	bne.n	800f7ee <_vfiprintf_r+0x7a>
 800f7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f7fe:	d00b      	beq.n	800f818 <_vfiprintf_r+0xa4>
 800f800:	465b      	mov	r3, fp
 800f802:	4622      	mov	r2, r4
 800f804:	4629      	mov	r1, r5
 800f806:	4630      	mov	r0, r6
 800f808:	f7ff ffa1 	bl	800f74e <__sfputs_r>
 800f80c:	3001      	adds	r0, #1
 800f80e:	f000 80a7 	beq.w	800f960 <_vfiprintf_r+0x1ec>
 800f812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f814:	445a      	add	r2, fp
 800f816:	9209      	str	r2, [sp, #36]	@ 0x24
 800f818:	f89a 3000 	ldrb.w	r3, [sl]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f000 809f 	beq.w	800f960 <_vfiprintf_r+0x1ec>
 800f822:	2300      	movs	r3, #0
 800f824:	f04f 32ff 	mov.w	r2, #4294967295
 800f828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f82c:	f10a 0a01 	add.w	sl, sl, #1
 800f830:	9304      	str	r3, [sp, #16]
 800f832:	9307      	str	r3, [sp, #28]
 800f834:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f838:	931a      	str	r3, [sp, #104]	@ 0x68
 800f83a:	4654      	mov	r4, sl
 800f83c:	2205      	movs	r2, #5
 800f83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f842:	4853      	ldr	r0, [pc, #332]	@ (800f990 <_vfiprintf_r+0x21c>)
 800f844:	f7f0 fcc4 	bl	80001d0 <memchr>
 800f848:	9a04      	ldr	r2, [sp, #16]
 800f84a:	b9d8      	cbnz	r0, 800f884 <_vfiprintf_r+0x110>
 800f84c:	06d1      	lsls	r1, r2, #27
 800f84e:	bf44      	itt	mi
 800f850:	2320      	movmi	r3, #32
 800f852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f856:	0713      	lsls	r3, r2, #28
 800f858:	bf44      	itt	mi
 800f85a:	232b      	movmi	r3, #43	@ 0x2b
 800f85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f860:	f89a 3000 	ldrb.w	r3, [sl]
 800f864:	2b2a      	cmp	r3, #42	@ 0x2a
 800f866:	d015      	beq.n	800f894 <_vfiprintf_r+0x120>
 800f868:	9a07      	ldr	r2, [sp, #28]
 800f86a:	4654      	mov	r4, sl
 800f86c:	2000      	movs	r0, #0
 800f86e:	f04f 0c0a 	mov.w	ip, #10
 800f872:	4621      	mov	r1, r4
 800f874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f878:	3b30      	subs	r3, #48	@ 0x30
 800f87a:	2b09      	cmp	r3, #9
 800f87c:	d94b      	bls.n	800f916 <_vfiprintf_r+0x1a2>
 800f87e:	b1b0      	cbz	r0, 800f8ae <_vfiprintf_r+0x13a>
 800f880:	9207      	str	r2, [sp, #28]
 800f882:	e014      	b.n	800f8ae <_vfiprintf_r+0x13a>
 800f884:	eba0 0308 	sub.w	r3, r0, r8
 800f888:	fa09 f303 	lsl.w	r3, r9, r3
 800f88c:	4313      	orrs	r3, r2
 800f88e:	9304      	str	r3, [sp, #16]
 800f890:	46a2      	mov	sl, r4
 800f892:	e7d2      	b.n	800f83a <_vfiprintf_r+0xc6>
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	1d19      	adds	r1, r3, #4
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	9103      	str	r1, [sp, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bfbb      	ittet	lt
 800f8a0:	425b      	neglt	r3, r3
 800f8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f8a6:	9307      	strge	r3, [sp, #28]
 800f8a8:	9307      	strlt	r3, [sp, #28]
 800f8aa:	bfb8      	it	lt
 800f8ac:	9204      	strlt	r2, [sp, #16]
 800f8ae:	7823      	ldrb	r3, [r4, #0]
 800f8b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8b2:	d10a      	bne.n	800f8ca <_vfiprintf_r+0x156>
 800f8b4:	7863      	ldrb	r3, [r4, #1]
 800f8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b8:	d132      	bne.n	800f920 <_vfiprintf_r+0x1ac>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	1d1a      	adds	r2, r3, #4
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	9203      	str	r2, [sp, #12]
 800f8c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8c6:	3402      	adds	r4, #2
 800f8c8:	9305      	str	r3, [sp, #20]
 800f8ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f9a0 <_vfiprintf_r+0x22c>
 800f8ce:	7821      	ldrb	r1, [r4, #0]
 800f8d0:	2203      	movs	r2, #3
 800f8d2:	4650      	mov	r0, sl
 800f8d4:	f7f0 fc7c 	bl	80001d0 <memchr>
 800f8d8:	b138      	cbz	r0, 800f8ea <_vfiprintf_r+0x176>
 800f8da:	9b04      	ldr	r3, [sp, #16]
 800f8dc:	eba0 000a 	sub.w	r0, r0, sl
 800f8e0:	2240      	movs	r2, #64	@ 0x40
 800f8e2:	4082      	lsls	r2, r0
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	3401      	adds	r4, #1
 800f8e8:	9304      	str	r3, [sp, #16]
 800f8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ee:	4829      	ldr	r0, [pc, #164]	@ (800f994 <_vfiprintf_r+0x220>)
 800f8f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8f4:	2206      	movs	r2, #6
 800f8f6:	f7f0 fc6b 	bl	80001d0 <memchr>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d03f      	beq.n	800f97e <_vfiprintf_r+0x20a>
 800f8fe:	4b26      	ldr	r3, [pc, #152]	@ (800f998 <_vfiprintf_r+0x224>)
 800f900:	bb1b      	cbnz	r3, 800f94a <_vfiprintf_r+0x1d6>
 800f902:	9b03      	ldr	r3, [sp, #12]
 800f904:	3307      	adds	r3, #7
 800f906:	f023 0307 	bic.w	r3, r3, #7
 800f90a:	3308      	adds	r3, #8
 800f90c:	9303      	str	r3, [sp, #12]
 800f90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f910:	443b      	add	r3, r7
 800f912:	9309      	str	r3, [sp, #36]	@ 0x24
 800f914:	e76a      	b.n	800f7ec <_vfiprintf_r+0x78>
 800f916:	fb0c 3202 	mla	r2, ip, r2, r3
 800f91a:	460c      	mov	r4, r1
 800f91c:	2001      	movs	r0, #1
 800f91e:	e7a8      	b.n	800f872 <_vfiprintf_r+0xfe>
 800f920:	2300      	movs	r3, #0
 800f922:	3401      	adds	r4, #1
 800f924:	9305      	str	r3, [sp, #20]
 800f926:	4619      	mov	r1, r3
 800f928:	f04f 0c0a 	mov.w	ip, #10
 800f92c:	4620      	mov	r0, r4
 800f92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f932:	3a30      	subs	r2, #48	@ 0x30
 800f934:	2a09      	cmp	r2, #9
 800f936:	d903      	bls.n	800f940 <_vfiprintf_r+0x1cc>
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d0c6      	beq.n	800f8ca <_vfiprintf_r+0x156>
 800f93c:	9105      	str	r1, [sp, #20]
 800f93e:	e7c4      	b.n	800f8ca <_vfiprintf_r+0x156>
 800f940:	fb0c 2101 	mla	r1, ip, r1, r2
 800f944:	4604      	mov	r4, r0
 800f946:	2301      	movs	r3, #1
 800f948:	e7f0      	b.n	800f92c <_vfiprintf_r+0x1b8>
 800f94a:	ab03      	add	r3, sp, #12
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	462a      	mov	r2, r5
 800f950:	4b12      	ldr	r3, [pc, #72]	@ (800f99c <_vfiprintf_r+0x228>)
 800f952:	a904      	add	r1, sp, #16
 800f954:	4630      	mov	r0, r6
 800f956:	f7fd fe5f 	bl	800d618 <_printf_float>
 800f95a:	4607      	mov	r7, r0
 800f95c:	1c78      	adds	r0, r7, #1
 800f95e:	d1d6      	bne.n	800f90e <_vfiprintf_r+0x19a>
 800f960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f962:	07d9      	lsls	r1, r3, #31
 800f964:	d405      	bmi.n	800f972 <_vfiprintf_r+0x1fe>
 800f966:	89ab      	ldrh	r3, [r5, #12]
 800f968:	059a      	lsls	r2, r3, #22
 800f96a:	d402      	bmi.n	800f972 <_vfiprintf_r+0x1fe>
 800f96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f96e:	f7fe fca9 	bl	800e2c4 <__retarget_lock_release_recursive>
 800f972:	89ab      	ldrh	r3, [r5, #12]
 800f974:	065b      	lsls	r3, r3, #25
 800f976:	f53f af1f 	bmi.w	800f7b8 <_vfiprintf_r+0x44>
 800f97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f97c:	e71e      	b.n	800f7bc <_vfiprintf_r+0x48>
 800f97e:	ab03      	add	r3, sp, #12
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	462a      	mov	r2, r5
 800f984:	4b05      	ldr	r3, [pc, #20]	@ (800f99c <_vfiprintf_r+0x228>)
 800f986:	a904      	add	r1, sp, #16
 800f988:	4630      	mov	r0, r6
 800f98a:	f7fe f8dd 	bl	800db48 <_printf_i>
 800f98e:	e7e4      	b.n	800f95a <_vfiprintf_r+0x1e6>
 800f990:	08010b5a 	.word	0x08010b5a
 800f994:	08010b64 	.word	0x08010b64
 800f998:	0800d619 	.word	0x0800d619
 800f99c:	0800f74f 	.word	0x0800f74f
 800f9a0:	08010b60 	.word	0x08010b60

0800f9a4 <__sflush_r>:
 800f9a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ac:	0716      	lsls	r6, r2, #28
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	d454      	bmi.n	800fa5e <__sflush_r+0xba>
 800f9b4:	684b      	ldr	r3, [r1, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dc02      	bgt.n	800f9c0 <__sflush_r+0x1c>
 800f9ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dd48      	ble.n	800fa52 <__sflush_r+0xae>
 800f9c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	d045      	beq.n	800fa52 <__sflush_r+0xae>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9cc:	682f      	ldr	r7, [r5, #0]
 800f9ce:	6a21      	ldr	r1, [r4, #32]
 800f9d0:	602b      	str	r3, [r5, #0]
 800f9d2:	d030      	beq.n	800fa36 <__sflush_r+0x92>
 800f9d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f9d6:	89a3      	ldrh	r3, [r4, #12]
 800f9d8:	0759      	lsls	r1, r3, #29
 800f9da:	d505      	bpl.n	800f9e8 <__sflush_r+0x44>
 800f9dc:	6863      	ldr	r3, [r4, #4]
 800f9de:	1ad2      	subs	r2, r2, r3
 800f9e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f9e2:	b10b      	cbz	r3, 800f9e8 <__sflush_r+0x44>
 800f9e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f9e6:	1ad2      	subs	r2, r2, r3
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9ec:	6a21      	ldr	r1, [r4, #32]
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	47b0      	blx	r6
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	d106      	bne.n	800fa06 <__sflush_r+0x62>
 800f9f8:	6829      	ldr	r1, [r5, #0]
 800f9fa:	291d      	cmp	r1, #29
 800f9fc:	d82b      	bhi.n	800fa56 <__sflush_r+0xb2>
 800f9fe:	4a2a      	ldr	r2, [pc, #168]	@ (800faa8 <__sflush_r+0x104>)
 800fa00:	40ca      	lsrs	r2, r1
 800fa02:	07d6      	lsls	r6, r2, #31
 800fa04:	d527      	bpl.n	800fa56 <__sflush_r+0xb2>
 800fa06:	2200      	movs	r2, #0
 800fa08:	6062      	str	r2, [r4, #4]
 800fa0a:	04d9      	lsls	r1, r3, #19
 800fa0c:	6922      	ldr	r2, [r4, #16]
 800fa0e:	6022      	str	r2, [r4, #0]
 800fa10:	d504      	bpl.n	800fa1c <__sflush_r+0x78>
 800fa12:	1c42      	adds	r2, r0, #1
 800fa14:	d101      	bne.n	800fa1a <__sflush_r+0x76>
 800fa16:	682b      	ldr	r3, [r5, #0]
 800fa18:	b903      	cbnz	r3, 800fa1c <__sflush_r+0x78>
 800fa1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa1e:	602f      	str	r7, [r5, #0]
 800fa20:	b1b9      	cbz	r1, 800fa52 <__sflush_r+0xae>
 800fa22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa26:	4299      	cmp	r1, r3
 800fa28:	d002      	beq.n	800fa30 <__sflush_r+0x8c>
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f7ff fab4 	bl	800ef98 <_free_r>
 800fa30:	2300      	movs	r3, #0
 800fa32:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa34:	e00d      	b.n	800fa52 <__sflush_r+0xae>
 800fa36:	2301      	movs	r3, #1
 800fa38:	4628      	mov	r0, r5
 800fa3a:	47b0      	blx	r6
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	1c50      	adds	r0, r2, #1
 800fa40:	d1c9      	bne.n	800f9d6 <__sflush_r+0x32>
 800fa42:	682b      	ldr	r3, [r5, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d0c6      	beq.n	800f9d6 <__sflush_r+0x32>
 800fa48:	2b1d      	cmp	r3, #29
 800fa4a:	d001      	beq.n	800fa50 <__sflush_r+0xac>
 800fa4c:	2b16      	cmp	r3, #22
 800fa4e:	d11e      	bne.n	800fa8e <__sflush_r+0xea>
 800fa50:	602f      	str	r7, [r5, #0]
 800fa52:	2000      	movs	r0, #0
 800fa54:	e022      	b.n	800fa9c <__sflush_r+0xf8>
 800fa56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa5a:	b21b      	sxth	r3, r3
 800fa5c:	e01b      	b.n	800fa96 <__sflush_r+0xf2>
 800fa5e:	690f      	ldr	r7, [r1, #16]
 800fa60:	2f00      	cmp	r7, #0
 800fa62:	d0f6      	beq.n	800fa52 <__sflush_r+0xae>
 800fa64:	0793      	lsls	r3, r2, #30
 800fa66:	680e      	ldr	r6, [r1, #0]
 800fa68:	bf08      	it	eq
 800fa6a:	694b      	ldreq	r3, [r1, #20]
 800fa6c:	600f      	str	r7, [r1, #0]
 800fa6e:	bf18      	it	ne
 800fa70:	2300      	movne	r3, #0
 800fa72:	eba6 0807 	sub.w	r8, r6, r7
 800fa76:	608b      	str	r3, [r1, #8]
 800fa78:	f1b8 0f00 	cmp.w	r8, #0
 800fa7c:	dde9      	ble.n	800fa52 <__sflush_r+0xae>
 800fa7e:	6a21      	ldr	r1, [r4, #32]
 800fa80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fa82:	4643      	mov	r3, r8
 800fa84:	463a      	mov	r2, r7
 800fa86:	4628      	mov	r0, r5
 800fa88:	47b0      	blx	r6
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	dc08      	bgt.n	800faa0 <__sflush_r+0xfc>
 800fa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa96:	81a3      	strh	r3, [r4, #12]
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa0:	4407      	add	r7, r0
 800faa2:	eba8 0800 	sub.w	r8, r8, r0
 800faa6:	e7e7      	b.n	800fa78 <__sflush_r+0xd4>
 800faa8:	20400001 	.word	0x20400001

0800faac <_fflush_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	690b      	ldr	r3, [r1, #16]
 800fab0:	4605      	mov	r5, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b913      	cbnz	r3, 800fabc <_fflush_r+0x10>
 800fab6:	2500      	movs	r5, #0
 800fab8:	4628      	mov	r0, r5
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	b118      	cbz	r0, 800fac6 <_fflush_r+0x1a>
 800fabe:	6a03      	ldr	r3, [r0, #32]
 800fac0:	b90b      	cbnz	r3, 800fac6 <_fflush_r+0x1a>
 800fac2:	f7fe f9eb 	bl	800de9c <__sinit>
 800fac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d0f3      	beq.n	800fab6 <_fflush_r+0xa>
 800face:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fad0:	07d0      	lsls	r0, r2, #31
 800fad2:	d404      	bmi.n	800fade <_fflush_r+0x32>
 800fad4:	0599      	lsls	r1, r3, #22
 800fad6:	d402      	bmi.n	800fade <_fflush_r+0x32>
 800fad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fada:	f7fe fbf2 	bl	800e2c2 <__retarget_lock_acquire_recursive>
 800fade:	4628      	mov	r0, r5
 800fae0:	4621      	mov	r1, r4
 800fae2:	f7ff ff5f 	bl	800f9a4 <__sflush_r>
 800fae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fae8:	07da      	lsls	r2, r3, #31
 800faea:	4605      	mov	r5, r0
 800faec:	d4e4      	bmi.n	800fab8 <_fflush_r+0xc>
 800faee:	89a3      	ldrh	r3, [r4, #12]
 800faf0:	059b      	lsls	r3, r3, #22
 800faf2:	d4e1      	bmi.n	800fab8 <_fflush_r+0xc>
 800faf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800faf6:	f7fe fbe5 	bl	800e2c4 <__retarget_lock_release_recursive>
 800fafa:	e7dd      	b.n	800fab8 <_fflush_r+0xc>

0800fafc <__swhatbuf_r>:
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	460c      	mov	r4, r1
 800fb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb04:	2900      	cmp	r1, #0
 800fb06:	b096      	sub	sp, #88	@ 0x58
 800fb08:	4615      	mov	r5, r2
 800fb0a:	461e      	mov	r6, r3
 800fb0c:	da0d      	bge.n	800fb2a <__swhatbuf_r+0x2e>
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb14:	f04f 0100 	mov.w	r1, #0
 800fb18:	bf14      	ite	ne
 800fb1a:	2340      	movne	r3, #64	@ 0x40
 800fb1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb20:	2000      	movs	r0, #0
 800fb22:	6031      	str	r1, [r6, #0]
 800fb24:	602b      	str	r3, [r5, #0]
 800fb26:	b016      	add	sp, #88	@ 0x58
 800fb28:	bd70      	pop	{r4, r5, r6, pc}
 800fb2a:	466a      	mov	r2, sp
 800fb2c:	f000 f87c 	bl	800fc28 <_fstat_r>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	dbec      	blt.n	800fb0e <__swhatbuf_r+0x12>
 800fb34:	9901      	ldr	r1, [sp, #4]
 800fb36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb3e:	4259      	negs	r1, r3
 800fb40:	4159      	adcs	r1, r3
 800fb42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb46:	e7eb      	b.n	800fb20 <__swhatbuf_r+0x24>

0800fb48 <__smakebuf_r>:
 800fb48:	898b      	ldrh	r3, [r1, #12]
 800fb4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb4c:	079d      	lsls	r5, r3, #30
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460c      	mov	r4, r1
 800fb52:	d507      	bpl.n	800fb64 <__smakebuf_r+0x1c>
 800fb54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	6123      	str	r3, [r4, #16]
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	6163      	str	r3, [r4, #20]
 800fb60:	b003      	add	sp, #12
 800fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb64:	ab01      	add	r3, sp, #4
 800fb66:	466a      	mov	r2, sp
 800fb68:	f7ff ffc8 	bl	800fafc <__swhatbuf_r>
 800fb6c:	9f00      	ldr	r7, [sp, #0]
 800fb6e:	4605      	mov	r5, r0
 800fb70:	4639      	mov	r1, r7
 800fb72:	4630      	mov	r0, r6
 800fb74:	f7fd fc24 	bl	800d3c0 <_malloc_r>
 800fb78:	b948      	cbnz	r0, 800fb8e <__smakebuf_r+0x46>
 800fb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb7e:	059a      	lsls	r2, r3, #22
 800fb80:	d4ee      	bmi.n	800fb60 <__smakebuf_r+0x18>
 800fb82:	f023 0303 	bic.w	r3, r3, #3
 800fb86:	f043 0302 	orr.w	r3, r3, #2
 800fb8a:	81a3      	strh	r3, [r4, #12]
 800fb8c:	e7e2      	b.n	800fb54 <__smakebuf_r+0xc>
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	6020      	str	r0, [r4, #0]
 800fb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb96:	81a3      	strh	r3, [r4, #12]
 800fb98:	9b01      	ldr	r3, [sp, #4]
 800fb9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb9e:	b15b      	cbz	r3, 800fbb8 <__smakebuf_r+0x70>
 800fba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fba4:	4630      	mov	r0, r6
 800fba6:	f000 f851 	bl	800fc4c <_isatty_r>
 800fbaa:	b128      	cbz	r0, 800fbb8 <__smakebuf_r+0x70>
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	f023 0303 	bic.w	r3, r3, #3
 800fbb2:	f043 0301 	orr.w	r3, r3, #1
 800fbb6:	81a3      	strh	r3, [r4, #12]
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	431d      	orrs	r5, r3
 800fbbc:	81a5      	strh	r5, [r4, #12]
 800fbbe:	e7cf      	b.n	800fb60 <__smakebuf_r+0x18>

0800fbc0 <_putc_r>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	460d      	mov	r5, r1
 800fbc4:	4614      	mov	r4, r2
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	b118      	cbz	r0, 800fbd2 <_putc_r+0x12>
 800fbca:	6a03      	ldr	r3, [r0, #32]
 800fbcc:	b90b      	cbnz	r3, 800fbd2 <_putc_r+0x12>
 800fbce:	f7fe f965 	bl	800de9c <__sinit>
 800fbd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbd4:	07d8      	lsls	r0, r3, #31
 800fbd6:	d405      	bmi.n	800fbe4 <_putc_r+0x24>
 800fbd8:	89a3      	ldrh	r3, [r4, #12]
 800fbda:	0599      	lsls	r1, r3, #22
 800fbdc:	d402      	bmi.n	800fbe4 <_putc_r+0x24>
 800fbde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe0:	f7fe fb6f 	bl	800e2c2 <__retarget_lock_acquire_recursive>
 800fbe4:	68a3      	ldr	r3, [r4, #8]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	60a3      	str	r3, [r4, #8]
 800fbec:	da05      	bge.n	800fbfa <_putc_r+0x3a>
 800fbee:	69a2      	ldr	r2, [r4, #24]
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	db12      	blt.n	800fc1a <_putc_r+0x5a>
 800fbf4:	b2eb      	uxtb	r3, r5
 800fbf6:	2b0a      	cmp	r3, #10
 800fbf8:	d00f      	beq.n	800fc1a <_putc_r+0x5a>
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	1c5a      	adds	r2, r3, #1
 800fbfe:	6022      	str	r2, [r4, #0]
 800fc00:	701d      	strb	r5, [r3, #0]
 800fc02:	b2ed      	uxtb	r5, r5
 800fc04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc06:	07da      	lsls	r2, r3, #31
 800fc08:	d405      	bmi.n	800fc16 <_putc_r+0x56>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	059b      	lsls	r3, r3, #22
 800fc0e:	d402      	bmi.n	800fc16 <_putc_r+0x56>
 800fc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc12:	f7fe fb57 	bl	800e2c4 <__retarget_lock_release_recursive>
 800fc16:	4628      	mov	r0, r5
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7fe fa2d 	bl	800e07e <__swbuf_r>
 800fc24:	4605      	mov	r5, r0
 800fc26:	e7ed      	b.n	800fc04 <_putc_r+0x44>

0800fc28 <_fstat_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	4d07      	ldr	r5, [pc, #28]	@ (800fc48 <_fstat_r+0x20>)
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	4604      	mov	r4, r0
 800fc30:	4608      	mov	r0, r1
 800fc32:	4611      	mov	r1, r2
 800fc34:	602b      	str	r3, [r5, #0]
 800fc36:	f7f4 fc99 	bl	800456c <_fstat>
 800fc3a:	1c43      	adds	r3, r0, #1
 800fc3c:	d102      	bne.n	800fc44 <_fstat_r+0x1c>
 800fc3e:	682b      	ldr	r3, [r5, #0]
 800fc40:	b103      	cbz	r3, 800fc44 <_fstat_r+0x1c>
 800fc42:	6023      	str	r3, [r4, #0]
 800fc44:	bd38      	pop	{r3, r4, r5, pc}
 800fc46:	bf00      	nop
 800fc48:	20002580 	.word	0x20002580

0800fc4c <_isatty_r>:
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4d06      	ldr	r5, [pc, #24]	@ (800fc68 <_isatty_r+0x1c>)
 800fc50:	2300      	movs	r3, #0
 800fc52:	4604      	mov	r4, r0
 800fc54:	4608      	mov	r0, r1
 800fc56:	602b      	str	r3, [r5, #0]
 800fc58:	f7f4 fc98 	bl	800458c <_isatty>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d102      	bne.n	800fc66 <_isatty_r+0x1a>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	b103      	cbz	r3, 800fc66 <_isatty_r+0x1a>
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	20002580 	.word	0x20002580

0800fc6c <__assert_func>:
 800fc6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc6e:	4614      	mov	r4, r2
 800fc70:	461a      	mov	r2, r3
 800fc72:	4b09      	ldr	r3, [pc, #36]	@ (800fc98 <__assert_func+0x2c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4605      	mov	r5, r0
 800fc78:	68d8      	ldr	r0, [r3, #12]
 800fc7a:	b14c      	cbz	r4, 800fc90 <__assert_func+0x24>
 800fc7c:	4b07      	ldr	r3, [pc, #28]	@ (800fc9c <__assert_func+0x30>)
 800fc7e:	9100      	str	r1, [sp, #0]
 800fc80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc84:	4906      	ldr	r1, [pc, #24]	@ (800fca0 <__assert_func+0x34>)
 800fc86:	462b      	mov	r3, r5
 800fc88:	f000 f842 	bl	800fd10 <fiprintf>
 800fc8c:	f000 f852 	bl	800fd34 <abort>
 800fc90:	4b04      	ldr	r3, [pc, #16]	@ (800fca4 <__assert_func+0x38>)
 800fc92:	461c      	mov	r4, r3
 800fc94:	e7f3      	b.n	800fc7e <__assert_func+0x12>
 800fc96:	bf00      	nop
 800fc98:	20000138 	.word	0x20000138
 800fc9c:	08010b75 	.word	0x08010b75
 800fca0:	08010b82 	.word	0x08010b82
 800fca4:	08010bb0 	.word	0x08010bb0

0800fca8 <_calloc_r>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	fba1 5402 	umull	r5, r4, r1, r2
 800fcae:	b934      	cbnz	r4, 800fcbe <_calloc_r+0x16>
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	f7fd fb85 	bl	800d3c0 <_malloc_r>
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	b928      	cbnz	r0, 800fcc6 <_calloc_r+0x1e>
 800fcba:	4630      	mov	r0, r6
 800fcbc:	bd70      	pop	{r4, r5, r6, pc}
 800fcbe:	220c      	movs	r2, #12
 800fcc0:	6002      	str	r2, [r0, #0]
 800fcc2:	2600      	movs	r6, #0
 800fcc4:	e7f9      	b.n	800fcba <_calloc_r+0x12>
 800fcc6:	462a      	mov	r2, r5
 800fcc8:	4621      	mov	r1, r4
 800fcca:	f7fe fa6d 	bl	800e1a8 <memset>
 800fcce:	e7f4      	b.n	800fcba <_calloc_r+0x12>

0800fcd0 <__ascii_mbtowc>:
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	b901      	cbnz	r1, 800fcd6 <__ascii_mbtowc+0x6>
 800fcd4:	a901      	add	r1, sp, #4
 800fcd6:	b142      	cbz	r2, 800fcea <__ascii_mbtowc+0x1a>
 800fcd8:	b14b      	cbz	r3, 800fcee <__ascii_mbtowc+0x1e>
 800fcda:	7813      	ldrb	r3, [r2, #0]
 800fcdc:	600b      	str	r3, [r1, #0]
 800fcde:	7812      	ldrb	r2, [r2, #0]
 800fce0:	1e10      	subs	r0, r2, #0
 800fce2:	bf18      	it	ne
 800fce4:	2001      	movne	r0, #1
 800fce6:	b002      	add	sp, #8
 800fce8:	4770      	bx	lr
 800fcea:	4610      	mov	r0, r2
 800fcec:	e7fb      	b.n	800fce6 <__ascii_mbtowc+0x16>
 800fcee:	f06f 0001 	mvn.w	r0, #1
 800fcf2:	e7f8      	b.n	800fce6 <__ascii_mbtowc+0x16>

0800fcf4 <__ascii_wctomb>:
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	b141      	cbz	r1, 800fd0c <__ascii_wctomb+0x18>
 800fcfa:	2aff      	cmp	r2, #255	@ 0xff
 800fcfc:	d904      	bls.n	800fd08 <__ascii_wctomb+0x14>
 800fcfe:	228a      	movs	r2, #138	@ 0x8a
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	f04f 30ff 	mov.w	r0, #4294967295
 800fd06:	4770      	bx	lr
 800fd08:	700a      	strb	r2, [r1, #0]
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	4770      	bx	lr
	...

0800fd10 <fiprintf>:
 800fd10:	b40e      	push	{r1, r2, r3}
 800fd12:	b503      	push	{r0, r1, lr}
 800fd14:	4601      	mov	r1, r0
 800fd16:	ab03      	add	r3, sp, #12
 800fd18:	4805      	ldr	r0, [pc, #20]	@ (800fd30 <fiprintf+0x20>)
 800fd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd1e:	6800      	ldr	r0, [r0, #0]
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	f7ff fd27 	bl	800f774 <_vfiprintf_r>
 800fd26:	b002      	add	sp, #8
 800fd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd2c:	b003      	add	sp, #12
 800fd2e:	4770      	bx	lr
 800fd30:	20000138 	.word	0x20000138

0800fd34 <abort>:
 800fd34:	b508      	push	{r3, lr}
 800fd36:	2006      	movs	r0, #6
 800fd38:	f000 f82c 	bl	800fd94 <raise>
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	f7f4 fbe1 	bl	8004504 <_exit>

0800fd42 <_raise_r>:
 800fd42:	291f      	cmp	r1, #31
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4605      	mov	r5, r0
 800fd48:	460c      	mov	r4, r1
 800fd4a:	d904      	bls.n	800fd56 <_raise_r+0x14>
 800fd4c:	2316      	movs	r3, #22
 800fd4e:	6003      	str	r3, [r0, #0]
 800fd50:	f04f 30ff 	mov.w	r0, #4294967295
 800fd54:	bd38      	pop	{r3, r4, r5, pc}
 800fd56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd58:	b112      	cbz	r2, 800fd60 <_raise_r+0x1e>
 800fd5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd5e:	b94b      	cbnz	r3, 800fd74 <_raise_r+0x32>
 800fd60:	4628      	mov	r0, r5
 800fd62:	f000 f831 	bl	800fdc8 <_getpid_r>
 800fd66:	4622      	mov	r2, r4
 800fd68:	4601      	mov	r1, r0
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd70:	f000 b818 	b.w	800fda4 <_kill_r>
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d00a      	beq.n	800fd8e <_raise_r+0x4c>
 800fd78:	1c59      	adds	r1, r3, #1
 800fd7a:	d103      	bne.n	800fd84 <_raise_r+0x42>
 800fd7c:	2316      	movs	r3, #22
 800fd7e:	6003      	str	r3, [r0, #0]
 800fd80:	2001      	movs	r0, #1
 800fd82:	e7e7      	b.n	800fd54 <_raise_r+0x12>
 800fd84:	2100      	movs	r1, #0
 800fd86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	4798      	blx	r3
 800fd8e:	2000      	movs	r0, #0
 800fd90:	e7e0      	b.n	800fd54 <_raise_r+0x12>
	...

0800fd94 <raise>:
 800fd94:	4b02      	ldr	r3, [pc, #8]	@ (800fda0 <raise+0xc>)
 800fd96:	4601      	mov	r1, r0
 800fd98:	6818      	ldr	r0, [r3, #0]
 800fd9a:	f7ff bfd2 	b.w	800fd42 <_raise_r>
 800fd9e:	bf00      	nop
 800fda0:	20000138 	.word	0x20000138

0800fda4 <_kill_r>:
 800fda4:	b538      	push	{r3, r4, r5, lr}
 800fda6:	4d07      	ldr	r5, [pc, #28]	@ (800fdc4 <_kill_r+0x20>)
 800fda8:	2300      	movs	r3, #0
 800fdaa:	4604      	mov	r4, r0
 800fdac:	4608      	mov	r0, r1
 800fdae:	4611      	mov	r1, r2
 800fdb0:	602b      	str	r3, [r5, #0]
 800fdb2:	f7f4 fb97 	bl	80044e4 <_kill>
 800fdb6:	1c43      	adds	r3, r0, #1
 800fdb8:	d102      	bne.n	800fdc0 <_kill_r+0x1c>
 800fdba:	682b      	ldr	r3, [r5, #0]
 800fdbc:	b103      	cbz	r3, 800fdc0 <_kill_r+0x1c>
 800fdbe:	6023      	str	r3, [r4, #0]
 800fdc0:	bd38      	pop	{r3, r4, r5, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20002580 	.word	0x20002580

0800fdc8 <_getpid_r>:
 800fdc8:	f7f4 bb84 	b.w	80044d4 <_getpid>
 800fdcc:	0000      	movs	r0, r0
	...

0800fdd0 <exp>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	ed2d 8b02 	vpush	{d8}
 800fdd6:	ec55 4b10 	vmov	r4, r5, d0
 800fdda:	f000 f895 	bl	800ff08 <__ieee754_exp>
 800fdde:	eeb0 8a40 	vmov.f32	s16, s0
 800fde2:	eef0 8a60 	vmov.f32	s17, s1
 800fde6:	ec45 4b10 	vmov	d0, r4, r5
 800fdea:	f000 f877 	bl	800fedc <finite>
 800fdee:	b168      	cbz	r0, 800fe0c <exp+0x3c>
 800fdf0:	a317      	add	r3, pc, #92	@ (adr r3, 800fe50 <exp+0x80>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f7f0 fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 800fdfe:	b160      	cbz	r0, 800fe1a <exp+0x4a>
 800fe00:	f7fe fa34 	bl	800e26c <__errno>
 800fe04:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800fe40 <exp+0x70>
 800fe08:	2322      	movs	r3, #34	@ 0x22
 800fe0a:	6003      	str	r3, [r0, #0]
 800fe0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe10:	eef0 0a68 	vmov.f32	s1, s17
 800fe14:	ecbd 8b02 	vpop	{d8}
 800fe18:	bd38      	pop	{r3, r4, r5, pc}
 800fe1a:	a30f      	add	r3, pc, #60	@ (adr r3, 800fe58 <exp+0x88>)
 800fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe20:	4620      	mov	r0, r4
 800fe22:	4629      	mov	r1, r5
 800fe24:	f7f0 fe5a 	bl	8000adc <__aeabi_dcmplt>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d0ef      	beq.n	800fe0c <exp+0x3c>
 800fe2c:	f7fe fa1e 	bl	800e26c <__errno>
 800fe30:	2322      	movs	r3, #34	@ 0x22
 800fe32:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800fe48 <exp+0x78>
 800fe36:	6003      	str	r3, [r0, #0]
 800fe38:	e7e8      	b.n	800fe0c <exp+0x3c>
 800fe3a:	bf00      	nop
 800fe3c:	f3af 8000 	nop.w
 800fe40:	00000000 	.word	0x00000000
 800fe44:	7ff00000 	.word	0x7ff00000
	...
 800fe50:	fefa39ef 	.word	0xfefa39ef
 800fe54:	40862e42 	.word	0x40862e42
 800fe58:	d52d3051 	.word	0xd52d3051
 800fe5c:	c0874910 	.word	0xc0874910

0800fe60 <log>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	ed2d 8b02 	vpush	{d8}
 800fe66:	ec55 4b10 	vmov	r4, r5, d0
 800fe6a:	f000 f9c9 	bl	8010200 <__ieee754_log>
 800fe6e:	4622      	mov	r2, r4
 800fe70:	462b      	mov	r3, r5
 800fe72:	4620      	mov	r0, r4
 800fe74:	4629      	mov	r1, r5
 800fe76:	eeb0 8a40 	vmov.f32	s16, s0
 800fe7a:	eef0 8a60 	vmov.f32	s17, s1
 800fe7e:	f7f0 fe55 	bl	8000b2c <__aeabi_dcmpun>
 800fe82:	b998      	cbnz	r0, 800feac <log+0x4c>
 800fe84:	2200      	movs	r2, #0
 800fe86:	2300      	movs	r3, #0
 800fe88:	4620      	mov	r0, r4
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7f0 fe44 	bl	8000b18 <__aeabi_dcmpgt>
 800fe90:	b960      	cbnz	r0, 800feac <log+0x4c>
 800fe92:	2200      	movs	r2, #0
 800fe94:	2300      	movs	r3, #0
 800fe96:	4620      	mov	r0, r4
 800fe98:	4629      	mov	r1, r5
 800fe9a:	f7f0 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe9e:	b160      	cbz	r0, 800feba <log+0x5a>
 800fea0:	f7fe f9e4 	bl	800e26c <__errno>
 800fea4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800fed0 <log+0x70>
 800fea8:	2322      	movs	r3, #34	@ 0x22
 800feaa:	6003      	str	r3, [r0, #0]
 800feac:	eeb0 0a48 	vmov.f32	s0, s16
 800feb0:	eef0 0a68 	vmov.f32	s1, s17
 800feb4:	ecbd 8b02 	vpop	{d8}
 800feb8:	bd38      	pop	{r3, r4, r5, pc}
 800feba:	f7fe f9d7 	bl	800e26c <__errno>
 800febe:	ecbd 8b02 	vpop	{d8}
 800fec2:	2321      	movs	r3, #33	@ 0x21
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feca:	4803      	ldr	r0, [pc, #12]	@ (800fed8 <log+0x78>)
 800fecc:	f000 b814 	b.w	800fef8 <nan>
 800fed0:	00000000 	.word	0x00000000
 800fed4:	fff00000 	.word	0xfff00000
 800fed8:	08010bb0 	.word	0x08010bb0

0800fedc <finite>:
 800fedc:	b082      	sub	sp, #8
 800fede:	ed8d 0b00 	vstr	d0, [sp]
 800fee2:	9801      	ldr	r0, [sp, #4]
 800fee4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fee8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800feec:	0fc0      	lsrs	r0, r0, #31
 800feee:	b002      	add	sp, #8
 800fef0:	4770      	bx	lr
 800fef2:	0000      	movs	r0, r0
 800fef4:	0000      	movs	r0, r0
	...

0800fef8 <nan>:
 800fef8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ff00 <nan+0x8>
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	00000000 	.word	0x00000000
 800ff04:	7ff80000 	.word	0x7ff80000

0800ff08 <__ieee754_exp>:
 800ff08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff0c:	ec55 4b10 	vmov	r4, r5, d0
 800ff10:	49b1      	ldr	r1, [pc, #708]	@ (80101d8 <__ieee754_exp+0x2d0>)
 800ff12:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ff16:	428a      	cmp	r2, r1
 800ff18:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ff1c:	d936      	bls.n	800ff8c <__ieee754_exp+0x84>
 800ff1e:	49af      	ldr	r1, [pc, #700]	@ (80101dc <__ieee754_exp+0x2d4>)
 800ff20:	428a      	cmp	r2, r1
 800ff22:	d914      	bls.n	800ff4e <__ieee754_exp+0x46>
 800ff24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ff28:	4323      	orrs	r3, r4
 800ff2a:	4622      	mov	r2, r4
 800ff2c:	d007      	beq.n	800ff3e <__ieee754_exp+0x36>
 800ff2e:	462b      	mov	r3, r5
 800ff30:	4620      	mov	r0, r4
 800ff32:	4629      	mov	r1, r5
 800ff34:	f7f0 f9aa 	bl	800028c <__adddf3>
 800ff38:	4604      	mov	r4, r0
 800ff3a:	460d      	mov	r5, r1
 800ff3c:	e002      	b.n	800ff44 <__ieee754_exp+0x3c>
 800ff3e:	2e00      	cmp	r6, #0
 800ff40:	f040 8118 	bne.w	8010174 <__ieee754_exp+0x26c>
 800ff44:	ec45 4b10 	vmov	d0, r4, r5
 800ff48:	b004      	add	sp, #16
 800ff4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010180 <__ieee754_exp+0x278>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	4620      	mov	r0, r4
 800ff56:	4629      	mov	r1, r5
 800ff58:	f7f0 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 800ff5c:	4607      	mov	r7, r0
 800ff5e:	b128      	cbz	r0, 800ff6c <__ieee754_exp+0x64>
 800ff60:	2000      	movs	r0, #0
 800ff62:	b004      	add	sp, #16
 800ff64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff68:	f000 bb36 	b.w	80105d8 <__math_oflow>
 800ff6c:	a386      	add	r3, pc, #536	@ (adr r3, 8010188 <__ieee754_exp+0x280>)
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	4620      	mov	r0, r4
 800ff74:	4629      	mov	r1, r5
 800ff76:	f7f0 fdb1 	bl	8000adc <__aeabi_dcmplt>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	f000 8087 	beq.w	801008e <__ieee754_exp+0x186>
 800ff80:	4638      	mov	r0, r7
 800ff82:	b004      	add	sp, #16
 800ff84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff88:	f000 bb1e 	b.w	80105c8 <__math_uflow>
 800ff8c:	4b94      	ldr	r3, [pc, #592]	@ (80101e0 <__ieee754_exp+0x2d8>)
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	f240 80a9 	bls.w	80100e6 <__ieee754_exp+0x1de>
 800ff94:	4b93      	ldr	r3, [pc, #588]	@ (80101e4 <__ieee754_exp+0x2dc>)
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d879      	bhi.n	801008e <__ieee754_exp+0x186>
 800ff9a:	4b93      	ldr	r3, [pc, #588]	@ (80101e8 <__ieee754_exp+0x2e0>)
 800ff9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	f7f0 f96e 	bl	8000288 <__aeabi_dsub>
 800ffac:	4b8f      	ldr	r3, [pc, #572]	@ (80101ec <__ieee754_exp+0x2e4>)
 800ffae:	00f7      	lsls	r7, r6, #3
 800ffb0:	443b      	add	r3, r7
 800ffb2:	ed93 7b00 	vldr	d7, [r3]
 800ffb6:	ed8d 7b00 	vstr	d7, [sp]
 800ffba:	f086 0a01 	eor.w	sl, r6, #1
 800ffbe:	4680      	mov	r8, r0
 800ffc0:	4689      	mov	r9, r1
 800ffc2:	ebaa 0a06 	sub.w	sl, sl, r6
 800ffc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffca:	4640      	mov	r0, r8
 800ffcc:	4649      	mov	r1, r9
 800ffce:	f7f0 f95b 	bl	8000288 <__aeabi_dsub>
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	462b      	mov	r3, r5
 800ffda:	4620      	mov	r0, r4
 800ffdc:	4629      	mov	r1, r5
 800ffde:	f7f0 fb0b 	bl	80005f8 <__aeabi_dmul>
 800ffe2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010190 <__ieee754_exp+0x288>)
 800ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe8:	4606      	mov	r6, r0
 800ffea:	460f      	mov	r7, r1
 800ffec:	f7f0 fb04 	bl	80005f8 <__aeabi_dmul>
 800fff0:	a369      	add	r3, pc, #420	@ (adr r3, 8010198 <__ieee754_exp+0x290>)
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	f7f0 f947 	bl	8000288 <__aeabi_dsub>
 800fffa:	4632      	mov	r2, r6
 800fffc:	463b      	mov	r3, r7
 800fffe:	f7f0 fafb 	bl	80005f8 <__aeabi_dmul>
 8010002:	a367      	add	r3, pc, #412	@ (adr r3, 80101a0 <__ieee754_exp+0x298>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	f7f0 f940 	bl	800028c <__adddf3>
 801000c:	4632      	mov	r2, r6
 801000e:	463b      	mov	r3, r7
 8010010:	f7f0 faf2 	bl	80005f8 <__aeabi_dmul>
 8010014:	a364      	add	r3, pc, #400	@ (adr r3, 80101a8 <__ieee754_exp+0x2a0>)
 8010016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001a:	f7f0 f935 	bl	8000288 <__aeabi_dsub>
 801001e:	4632      	mov	r2, r6
 8010020:	463b      	mov	r3, r7
 8010022:	f7f0 fae9 	bl	80005f8 <__aeabi_dmul>
 8010026:	a362      	add	r3, pc, #392	@ (adr r3, 80101b0 <__ieee754_exp+0x2a8>)
 8010028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002c:	f7f0 f92e 	bl	800028c <__adddf3>
 8010030:	4632      	mov	r2, r6
 8010032:	463b      	mov	r3, r7
 8010034:	f7f0 fae0 	bl	80005f8 <__aeabi_dmul>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4620      	mov	r0, r4
 801003e:	4629      	mov	r1, r5
 8010040:	f7f0 f922 	bl	8000288 <__aeabi_dsub>
 8010044:	4602      	mov	r2, r0
 8010046:	460b      	mov	r3, r1
 8010048:	4606      	mov	r6, r0
 801004a:	460f      	mov	r7, r1
 801004c:	4620      	mov	r0, r4
 801004e:	4629      	mov	r1, r5
 8010050:	f7f0 fad2 	bl	80005f8 <__aeabi_dmul>
 8010054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010058:	f1ba 0f00 	cmp.w	sl, #0
 801005c:	d15c      	bne.n	8010118 <__ieee754_exp+0x210>
 801005e:	2200      	movs	r2, #0
 8010060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010064:	4630      	mov	r0, r6
 8010066:	4639      	mov	r1, r7
 8010068:	f7f0 f90e 	bl	8000288 <__aeabi_dsub>
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010074:	f7f0 fbea 	bl	800084c <__aeabi_ddiv>
 8010078:	4622      	mov	r2, r4
 801007a:	462b      	mov	r3, r5
 801007c:	f7f0 f904 	bl	8000288 <__aeabi_dsub>
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	2000      	movs	r0, #0
 8010086:	495a      	ldr	r1, [pc, #360]	@ (80101f0 <__ieee754_exp+0x2e8>)
 8010088:	f7f0 f8fe 	bl	8000288 <__aeabi_dsub>
 801008c:	e754      	b.n	800ff38 <__ieee754_exp+0x30>
 801008e:	4b59      	ldr	r3, [pc, #356]	@ (80101f4 <__ieee754_exp+0x2ec>)
 8010090:	4620      	mov	r0, r4
 8010092:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010096:	4629      	mov	r1, r5
 8010098:	a347      	add	r3, pc, #284	@ (adr r3, 80101b8 <__ieee754_exp+0x2b0>)
 801009a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009e:	f7f0 faab 	bl	80005f8 <__aeabi_dmul>
 80100a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100a6:	f7f0 f8f1 	bl	800028c <__adddf3>
 80100aa:	f7f0 fd55 	bl	8000b58 <__aeabi_d2iz>
 80100ae:	4682      	mov	sl, r0
 80100b0:	f7f0 fa38 	bl	8000524 <__aeabi_i2d>
 80100b4:	a342      	add	r3, pc, #264	@ (adr r3, 80101c0 <__ieee754_exp+0x2b8>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	f7f0 fa9b 	bl	80005f8 <__aeabi_dmul>
 80100c2:	4602      	mov	r2, r0
 80100c4:	460b      	mov	r3, r1
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 f8dd 	bl	8000288 <__aeabi_dsub>
 80100ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80101c8 <__ieee754_exp+0x2c0>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	4630      	mov	r0, r6
 80100da:	4639      	mov	r1, r7
 80100dc:	f7f0 fa8c 	bl	80005f8 <__aeabi_dmul>
 80100e0:	e9cd 0100 	strd	r0, r1, [sp]
 80100e4:	e76f      	b.n	800ffc6 <__ieee754_exp+0xbe>
 80100e6:	4b44      	ldr	r3, [pc, #272]	@ (80101f8 <__ieee754_exp+0x2f0>)
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d810      	bhi.n	801010e <__ieee754_exp+0x206>
 80100ec:	a338      	add	r3, pc, #224	@ (adr r3, 80101d0 <__ieee754_exp+0x2c8>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	4620      	mov	r0, r4
 80100f4:	4629      	mov	r1, r5
 80100f6:	f7f0 f8c9 	bl	800028c <__adddf3>
 80100fa:	4b3d      	ldr	r3, [pc, #244]	@ (80101f0 <__ieee754_exp+0x2e8>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	f7f0 fd0b 	bl	8000b18 <__aeabi_dcmpgt>
 8010102:	b138      	cbz	r0, 8010114 <__ieee754_exp+0x20c>
 8010104:	4b3a      	ldr	r3, [pc, #232]	@ (80101f0 <__ieee754_exp+0x2e8>)
 8010106:	2200      	movs	r2, #0
 8010108:	4620      	mov	r0, r4
 801010a:	4629      	mov	r1, r5
 801010c:	e712      	b.n	800ff34 <__ieee754_exp+0x2c>
 801010e:	f04f 0a00 	mov.w	sl, #0
 8010112:	e760      	b.n	800ffd6 <__ieee754_exp+0xce>
 8010114:	4682      	mov	sl, r0
 8010116:	e75e      	b.n	800ffd6 <__ieee754_exp+0xce>
 8010118:	4632      	mov	r2, r6
 801011a:	463b      	mov	r3, r7
 801011c:	2000      	movs	r0, #0
 801011e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8010122:	f7f0 f8b1 	bl	8000288 <__aeabi_dsub>
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801012e:	f7f0 fb8d 	bl	800084c <__aeabi_ddiv>
 8010132:	4602      	mov	r2, r0
 8010134:	460b      	mov	r3, r1
 8010136:	e9dd 0100 	ldrd	r0, r1, [sp]
 801013a:	f7f0 f8a5 	bl	8000288 <__aeabi_dsub>
 801013e:	4642      	mov	r2, r8
 8010140:	464b      	mov	r3, r9
 8010142:	f7f0 f8a1 	bl	8000288 <__aeabi_dsub>
 8010146:	4602      	mov	r2, r0
 8010148:	460b      	mov	r3, r1
 801014a:	2000      	movs	r0, #0
 801014c:	4928      	ldr	r1, [pc, #160]	@ (80101f0 <__ieee754_exp+0x2e8>)
 801014e:	f7f0 f89b 	bl	8000288 <__aeabi_dsub>
 8010152:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8010156:	4592      	cmp	sl, r2
 8010158:	db02      	blt.n	8010160 <__ieee754_exp+0x258>
 801015a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801015e:	e6eb      	b.n	800ff38 <__ieee754_exp+0x30>
 8010160:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8010164:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010168:	2200      	movs	r2, #0
 801016a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 801016e:	f7f0 fa43 	bl	80005f8 <__aeabi_dmul>
 8010172:	e6e1      	b.n	800ff38 <__ieee754_exp+0x30>
 8010174:	2400      	movs	r4, #0
 8010176:	2500      	movs	r5, #0
 8010178:	e6e4      	b.n	800ff44 <__ieee754_exp+0x3c>
 801017a:	bf00      	nop
 801017c:	f3af 8000 	nop.w
 8010180:	fefa39ef 	.word	0xfefa39ef
 8010184:	40862e42 	.word	0x40862e42
 8010188:	d52d3051 	.word	0xd52d3051
 801018c:	c0874910 	.word	0xc0874910
 8010190:	72bea4d0 	.word	0x72bea4d0
 8010194:	3e663769 	.word	0x3e663769
 8010198:	c5d26bf1 	.word	0xc5d26bf1
 801019c:	3ebbbd41 	.word	0x3ebbbd41
 80101a0:	af25de2c 	.word	0xaf25de2c
 80101a4:	3f11566a 	.word	0x3f11566a
 80101a8:	16bebd93 	.word	0x16bebd93
 80101ac:	3f66c16c 	.word	0x3f66c16c
 80101b0:	5555553e 	.word	0x5555553e
 80101b4:	3fc55555 	.word	0x3fc55555
 80101b8:	652b82fe 	.word	0x652b82fe
 80101bc:	3ff71547 	.word	0x3ff71547
 80101c0:	fee00000 	.word	0xfee00000
 80101c4:	3fe62e42 	.word	0x3fe62e42
 80101c8:	35793c76 	.word	0x35793c76
 80101cc:	3dea39ef 	.word	0x3dea39ef
 80101d0:	8800759c 	.word	0x8800759c
 80101d4:	7e37e43c 	.word	0x7e37e43c
 80101d8:	40862e41 	.word	0x40862e41
 80101dc:	7fefffff 	.word	0x7fefffff
 80101e0:	3fd62e42 	.word	0x3fd62e42
 80101e4:	3ff0a2b1 	.word	0x3ff0a2b1
 80101e8:	08010dc8 	.word	0x08010dc8
 80101ec:	08010db8 	.word	0x08010db8
 80101f0:	3ff00000 	.word	0x3ff00000
 80101f4:	08010dd8 	.word	0x08010dd8
 80101f8:	3defffff 	.word	0x3defffff
 80101fc:	00000000 	.word	0x00000000

08010200 <__ieee754_log>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ec51 0b10 	vmov	r0, r1, d0
 8010208:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801020c:	b087      	sub	sp, #28
 801020e:	460d      	mov	r5, r1
 8010210:	da26      	bge.n	8010260 <__ieee754_log+0x60>
 8010212:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010216:	4303      	orrs	r3, r0
 8010218:	4602      	mov	r2, r0
 801021a:	d10a      	bne.n	8010232 <__ieee754_log+0x32>
 801021c:	49ce      	ldr	r1, [pc, #824]	@ (8010558 <__ieee754_log+0x358>)
 801021e:	2200      	movs	r2, #0
 8010220:	2300      	movs	r3, #0
 8010222:	2000      	movs	r0, #0
 8010224:	f7f0 fb12 	bl	800084c <__aeabi_ddiv>
 8010228:	ec41 0b10 	vmov	d0, r0, r1
 801022c:	b007      	add	sp, #28
 801022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010232:	2900      	cmp	r1, #0
 8010234:	da05      	bge.n	8010242 <__ieee754_log+0x42>
 8010236:	460b      	mov	r3, r1
 8010238:	f7f0 f826 	bl	8000288 <__aeabi_dsub>
 801023c:	2200      	movs	r2, #0
 801023e:	2300      	movs	r3, #0
 8010240:	e7f0      	b.n	8010224 <__ieee754_log+0x24>
 8010242:	4bc6      	ldr	r3, [pc, #792]	@ (801055c <__ieee754_log+0x35c>)
 8010244:	2200      	movs	r2, #0
 8010246:	f7f0 f9d7 	bl	80005f8 <__aeabi_dmul>
 801024a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801024e:	460d      	mov	r5, r1
 8010250:	4ac3      	ldr	r2, [pc, #780]	@ (8010560 <__ieee754_log+0x360>)
 8010252:	4295      	cmp	r5, r2
 8010254:	dd06      	ble.n	8010264 <__ieee754_log+0x64>
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	f7f0 f817 	bl	800028c <__adddf3>
 801025e:	e7e3      	b.n	8010228 <__ieee754_log+0x28>
 8010260:	2300      	movs	r3, #0
 8010262:	e7f5      	b.n	8010250 <__ieee754_log+0x50>
 8010264:	152c      	asrs	r4, r5, #20
 8010266:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801026a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801026e:	441c      	add	r4, r3
 8010270:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8010274:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8010278:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801027c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010280:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8010284:	ea42 0105 	orr.w	r1, r2, r5
 8010288:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801028c:	2200      	movs	r2, #0
 801028e:	4bb5      	ldr	r3, [pc, #724]	@ (8010564 <__ieee754_log+0x364>)
 8010290:	f7ef fffa 	bl	8000288 <__aeabi_dsub>
 8010294:	1cab      	adds	r3, r5, #2
 8010296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801029a:	2b02      	cmp	r3, #2
 801029c:	4682      	mov	sl, r0
 801029e:	468b      	mov	fp, r1
 80102a0:	f04f 0200 	mov.w	r2, #0
 80102a4:	dc53      	bgt.n	801034e <__ieee754_log+0x14e>
 80102a6:	2300      	movs	r3, #0
 80102a8:	f7f0 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80102ac:	b1d0      	cbz	r0, 80102e4 <__ieee754_log+0xe4>
 80102ae:	2c00      	cmp	r4, #0
 80102b0:	f000 8120 	beq.w	80104f4 <__ieee754_log+0x2f4>
 80102b4:	4620      	mov	r0, r4
 80102b6:	f7f0 f935 	bl	8000524 <__aeabi_i2d>
 80102ba:	a391      	add	r3, pc, #580	@ (adr r3, 8010500 <__ieee754_log+0x300>)
 80102bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c0:	4606      	mov	r6, r0
 80102c2:	460f      	mov	r7, r1
 80102c4:	f7f0 f998 	bl	80005f8 <__aeabi_dmul>
 80102c8:	a38f      	add	r3, pc, #572	@ (adr r3, 8010508 <__ieee754_log+0x308>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	4604      	mov	r4, r0
 80102d0:	460d      	mov	r5, r1
 80102d2:	4630      	mov	r0, r6
 80102d4:	4639      	mov	r1, r7
 80102d6:	f7f0 f98f 	bl	80005f8 <__aeabi_dmul>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4620      	mov	r0, r4
 80102e0:	4629      	mov	r1, r5
 80102e2:	e7ba      	b.n	801025a <__ieee754_log+0x5a>
 80102e4:	a38a      	add	r3, pc, #552	@ (adr r3, 8010510 <__ieee754_log+0x310>)
 80102e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ea:	4650      	mov	r0, sl
 80102ec:	4659      	mov	r1, fp
 80102ee:	f7f0 f983 	bl	80005f8 <__aeabi_dmul>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	2000      	movs	r0, #0
 80102f8:	499b      	ldr	r1, [pc, #620]	@ (8010568 <__ieee754_log+0x368>)
 80102fa:	f7ef ffc5 	bl	8000288 <__aeabi_dsub>
 80102fe:	4652      	mov	r2, sl
 8010300:	4606      	mov	r6, r0
 8010302:	460f      	mov	r7, r1
 8010304:	465b      	mov	r3, fp
 8010306:	4650      	mov	r0, sl
 8010308:	4659      	mov	r1, fp
 801030a:	f7f0 f975 	bl	80005f8 <__aeabi_dmul>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4630      	mov	r0, r6
 8010314:	4639      	mov	r1, r7
 8010316:	f7f0 f96f 	bl	80005f8 <__aeabi_dmul>
 801031a:	4606      	mov	r6, r0
 801031c:	460f      	mov	r7, r1
 801031e:	b914      	cbnz	r4, 8010326 <__ieee754_log+0x126>
 8010320:	4632      	mov	r2, r6
 8010322:	463b      	mov	r3, r7
 8010324:	e0a0      	b.n	8010468 <__ieee754_log+0x268>
 8010326:	4620      	mov	r0, r4
 8010328:	f7f0 f8fc 	bl	8000524 <__aeabi_i2d>
 801032c:	a374      	add	r3, pc, #464	@ (adr r3, 8010500 <__ieee754_log+0x300>)
 801032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010332:	4680      	mov	r8, r0
 8010334:	4689      	mov	r9, r1
 8010336:	f7f0 f95f 	bl	80005f8 <__aeabi_dmul>
 801033a:	a373      	add	r3, pc, #460	@ (adr r3, 8010508 <__ieee754_log+0x308>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	4604      	mov	r4, r0
 8010342:	460d      	mov	r5, r1
 8010344:	4640      	mov	r0, r8
 8010346:	4649      	mov	r1, r9
 8010348:	f7f0 f956 	bl	80005f8 <__aeabi_dmul>
 801034c:	e0a5      	b.n	801049a <__ieee754_log+0x29a>
 801034e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010352:	f7ef ff9b 	bl	800028c <__adddf3>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4650      	mov	r0, sl
 801035c:	4659      	mov	r1, fp
 801035e:	f7f0 fa75 	bl	800084c <__aeabi_ddiv>
 8010362:	e9cd 0100 	strd	r0, r1, [sp]
 8010366:	4620      	mov	r0, r4
 8010368:	f7f0 f8dc 	bl	8000524 <__aeabi_i2d>
 801036c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010374:	4610      	mov	r0, r2
 8010376:	4619      	mov	r1, r3
 8010378:	f7f0 f93e 	bl	80005f8 <__aeabi_dmul>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010384:	f7f0 f938 	bl	80005f8 <__aeabi_dmul>
 8010388:	a363      	add	r3, pc, #396	@ (adr r3, 8010518 <__ieee754_log+0x318>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	4680      	mov	r8, r0
 8010390:	4689      	mov	r9, r1
 8010392:	f7f0 f931 	bl	80005f8 <__aeabi_dmul>
 8010396:	a362      	add	r3, pc, #392	@ (adr r3, 8010520 <__ieee754_log+0x320>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7ef ff76 	bl	800028c <__adddf3>
 80103a0:	4642      	mov	r2, r8
 80103a2:	464b      	mov	r3, r9
 80103a4:	f7f0 f928 	bl	80005f8 <__aeabi_dmul>
 80103a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8010528 <__ieee754_log+0x328>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	f7ef ff6d 	bl	800028c <__adddf3>
 80103b2:	4642      	mov	r2, r8
 80103b4:	464b      	mov	r3, r9
 80103b6:	f7f0 f91f 	bl	80005f8 <__aeabi_dmul>
 80103ba:	a35d      	add	r3, pc, #372	@ (adr r3, 8010530 <__ieee754_log+0x330>)
 80103bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c0:	f7ef ff64 	bl	800028c <__adddf3>
 80103c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103c8:	f7f0 f916 	bl	80005f8 <__aeabi_dmul>
 80103cc:	a35a      	add	r3, pc, #360	@ (adr r3, 8010538 <__ieee754_log+0x338>)
 80103ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103d6:	4640      	mov	r0, r8
 80103d8:	4649      	mov	r1, r9
 80103da:	f7f0 f90d 	bl	80005f8 <__aeabi_dmul>
 80103de:	a358      	add	r3, pc, #352	@ (adr r3, 8010540 <__ieee754_log+0x340>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7ef ff52 	bl	800028c <__adddf3>
 80103e8:	4642      	mov	r2, r8
 80103ea:	464b      	mov	r3, r9
 80103ec:	f7f0 f904 	bl	80005f8 <__aeabi_dmul>
 80103f0:	a355      	add	r3, pc, #340	@ (adr r3, 8010548 <__ieee754_log+0x348>)
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	f7ef ff49 	bl	800028c <__adddf3>
 80103fa:	4642      	mov	r2, r8
 80103fc:	464b      	mov	r3, r9
 80103fe:	f7f0 f8fb 	bl	80005f8 <__aeabi_dmul>
 8010402:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8010406:	4602      	mov	r2, r0
 8010408:	460b      	mov	r3, r1
 801040a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801040e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010412:	f7ef ff3b 	bl	800028c <__adddf3>
 8010416:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801041a:	3551      	adds	r5, #81	@ 0x51
 801041c:	4335      	orrs	r5, r6
 801041e:	2d00      	cmp	r5, #0
 8010420:	4680      	mov	r8, r0
 8010422:	4689      	mov	r9, r1
 8010424:	dd48      	ble.n	80104b8 <__ieee754_log+0x2b8>
 8010426:	4b50      	ldr	r3, [pc, #320]	@ (8010568 <__ieee754_log+0x368>)
 8010428:	2200      	movs	r2, #0
 801042a:	4650      	mov	r0, sl
 801042c:	4659      	mov	r1, fp
 801042e:	f7f0 f8e3 	bl	80005f8 <__aeabi_dmul>
 8010432:	4652      	mov	r2, sl
 8010434:	465b      	mov	r3, fp
 8010436:	f7f0 f8df 	bl	80005f8 <__aeabi_dmul>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	4606      	mov	r6, r0
 8010440:	460f      	mov	r7, r1
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	f7ef ff21 	bl	800028c <__adddf3>
 801044a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801044e:	f7f0 f8d3 	bl	80005f8 <__aeabi_dmul>
 8010452:	4680      	mov	r8, r0
 8010454:	4689      	mov	r9, r1
 8010456:	b964      	cbnz	r4, 8010472 <__ieee754_log+0x272>
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	4630      	mov	r0, r6
 801045e:	4639      	mov	r1, r7
 8010460:	f7ef ff12 	bl	8000288 <__aeabi_dsub>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	4650      	mov	r0, sl
 801046a:	4659      	mov	r1, fp
 801046c:	f7ef ff0c 	bl	8000288 <__aeabi_dsub>
 8010470:	e6da      	b.n	8010228 <__ieee754_log+0x28>
 8010472:	a323      	add	r3, pc, #140	@ (adr r3, 8010500 <__ieee754_log+0x300>)
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801047c:	f7f0 f8bc 	bl	80005f8 <__aeabi_dmul>
 8010480:	a321      	add	r3, pc, #132	@ (adr r3, 8010508 <__ieee754_log+0x308>)
 8010482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010486:	4604      	mov	r4, r0
 8010488:	460d      	mov	r5, r1
 801048a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801048e:	f7f0 f8b3 	bl	80005f8 <__aeabi_dmul>
 8010492:	4642      	mov	r2, r8
 8010494:	464b      	mov	r3, r9
 8010496:	f7ef fef9 	bl	800028c <__adddf3>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4630      	mov	r0, r6
 80104a0:	4639      	mov	r1, r7
 80104a2:	f7ef fef1 	bl	8000288 <__aeabi_dsub>
 80104a6:	4652      	mov	r2, sl
 80104a8:	465b      	mov	r3, fp
 80104aa:	f7ef feed 	bl	8000288 <__aeabi_dsub>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4620      	mov	r0, r4
 80104b4:	4629      	mov	r1, r5
 80104b6:	e7d9      	b.n	801046c <__ieee754_log+0x26c>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	4650      	mov	r0, sl
 80104be:	4659      	mov	r1, fp
 80104c0:	f7ef fee2 	bl	8000288 <__aeabi_dsub>
 80104c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104c8:	f7f0 f896 	bl	80005f8 <__aeabi_dmul>
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	2c00      	cmp	r4, #0
 80104d2:	f43f af25 	beq.w	8010320 <__ieee754_log+0x120>
 80104d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8010500 <__ieee754_log+0x300>)
 80104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104e0:	f7f0 f88a 	bl	80005f8 <__aeabi_dmul>
 80104e4:	a308      	add	r3, pc, #32	@ (adr r3, 8010508 <__ieee754_log+0x308>)
 80104e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ea:	4604      	mov	r4, r0
 80104ec:	460d      	mov	r5, r1
 80104ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f2:	e729      	b.n	8010348 <__ieee754_log+0x148>
 80104f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010550 <__ieee754_log+0x350>
 80104f8:	e698      	b.n	801022c <__ieee754_log+0x2c>
 80104fa:	bf00      	nop
 80104fc:	f3af 8000 	nop.w
 8010500:	fee00000 	.word	0xfee00000
 8010504:	3fe62e42 	.word	0x3fe62e42
 8010508:	35793c76 	.word	0x35793c76
 801050c:	3dea39ef 	.word	0x3dea39ef
 8010510:	55555555 	.word	0x55555555
 8010514:	3fd55555 	.word	0x3fd55555
 8010518:	df3e5244 	.word	0xdf3e5244
 801051c:	3fc2f112 	.word	0x3fc2f112
 8010520:	96cb03de 	.word	0x96cb03de
 8010524:	3fc74664 	.word	0x3fc74664
 8010528:	94229359 	.word	0x94229359
 801052c:	3fd24924 	.word	0x3fd24924
 8010530:	55555593 	.word	0x55555593
 8010534:	3fe55555 	.word	0x3fe55555
 8010538:	d078c69f 	.word	0xd078c69f
 801053c:	3fc39a09 	.word	0x3fc39a09
 8010540:	1d8e78af 	.word	0x1d8e78af
 8010544:	3fcc71c5 	.word	0x3fcc71c5
 8010548:	9997fa04 	.word	0x9997fa04
 801054c:	3fd99999 	.word	0x3fd99999
	...
 8010558:	c3500000 	.word	0xc3500000
 801055c:	43500000 	.word	0x43500000
 8010560:	7fefffff 	.word	0x7fefffff
 8010564:	3ff00000 	.word	0x3ff00000
 8010568:	3fe00000 	.word	0x3fe00000

0801056c <with_errno>:
 801056c:	b510      	push	{r4, lr}
 801056e:	ed2d 8b02 	vpush	{d8}
 8010572:	eeb0 8a40 	vmov.f32	s16, s0
 8010576:	eef0 8a60 	vmov.f32	s17, s1
 801057a:	4604      	mov	r4, r0
 801057c:	f7fd fe76 	bl	800e26c <__errno>
 8010580:	eeb0 0a48 	vmov.f32	s0, s16
 8010584:	eef0 0a68 	vmov.f32	s1, s17
 8010588:	ecbd 8b02 	vpop	{d8}
 801058c:	6004      	str	r4, [r0, #0]
 801058e:	bd10      	pop	{r4, pc}

08010590 <xflow>:
 8010590:	4603      	mov	r3, r0
 8010592:	b507      	push	{r0, r1, r2, lr}
 8010594:	ec51 0b10 	vmov	r0, r1, d0
 8010598:	b183      	cbz	r3, 80105bc <xflow+0x2c>
 801059a:	4602      	mov	r2, r0
 801059c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80105a0:	e9cd 2300 	strd	r2, r3, [sp]
 80105a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a8:	f7f0 f826 	bl	80005f8 <__aeabi_dmul>
 80105ac:	ec41 0b10 	vmov	d0, r0, r1
 80105b0:	2022      	movs	r0, #34	@ 0x22
 80105b2:	b003      	add	sp, #12
 80105b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105b8:	f7ff bfd8 	b.w	801056c <with_errno>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	e7ee      	b.n	80105a0 <xflow+0x10>
 80105c2:	0000      	movs	r0, r0
 80105c4:	0000      	movs	r0, r0
	...

080105c8 <__math_uflow>:
 80105c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80105d0 <__math_uflow+0x8>
 80105cc:	f7ff bfe0 	b.w	8010590 <xflow>
 80105d0:	00000000 	.word	0x00000000
 80105d4:	10000000 	.word	0x10000000

080105d8 <__math_oflow>:
 80105d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80105e0 <__math_oflow+0x8>
 80105dc:	f7ff bfd8 	b.w	8010590 <xflow>
 80105e0:	00000000 	.word	0x00000000
 80105e4:	70000000 	.word	0x70000000

080105e8 <_init>:
 80105e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ea:	bf00      	nop
 80105ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ee:	bc08      	pop	{r3}
 80105f0:	469e      	mov	lr, r3
 80105f2:	4770      	bx	lr

080105f4 <_fini>:
 80105f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f6:	bf00      	nop
 80105f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105fa:	bc08      	pop	{r3}
 80105fc:	469e      	mov	lr, r3
 80105fe:	4770      	bx	lr
