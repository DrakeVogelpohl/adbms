
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800fec8  0800fec8  00010ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801067c  0801067c  000122e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801067c  0801067c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010684  08010684  000122e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010684  08010684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010688  08010688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0801068c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122e4  2**0
                  CONTENTS
 10 .bss          00002298  200002e4  200002e4  000122e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000257c  2000257c  000122e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd5a  00000000  00000000  00012314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e80  00000000  00000000  0003206e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001314  00000000  00000000  000387c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a39  00000000  00000000  00039adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021133  00000000  00000000  00060515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d71cb  00000000  00000000  00081648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158813  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078a8  00000000  00000000  00158858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00160100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e4 	.word	0x200002e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800feac 	.word	0x0800feac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	0800feac 	.word	0x0800feac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a8 	b.w	8000fb0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcb7 	bl	80005f8 <__aeabi_dmul>
 8000c8a:	f000 f993 	bl	8000fb4 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc38 	bl	8000504 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcae 	bl	80005f8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf0 	bl	8000288 <__aeabi_dsub>
 8000ca8:	f000 f984 	bl	8000fb4 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001004:	2300      	movs	r3, #0
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	e019      	b.n	800103e <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b29b      	uxth	r3, r3
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4053      	eors	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	490b      	ldr	r1, [pc, #44]	@ (8001058 <Pec15_Calc+0x64>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3e1      	bcc.n	800100a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	080100f0 	.word	0x080100f0

0800105c <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800106a:	2310      	movs	r3, #16
 800106c:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800106e:	238f      	movs	r3, #143	@ 0x8f
 8001070:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
 8001076:	e024      	b.n	80010c2 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	4053      	eors	r3, r2
 8001088:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800108a:	2308      	movs	r3, #8
 800108c:	753b      	strb	r3, [r7, #20]
 800108e:	e012      	b.n	80010b6 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800109a:	8afb      	ldrh	r3, [r7, #22]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	4053      	eors	r3, r2
 80010a6:	82fb      	strh	r3, [r7, #22]
 80010a8:	e002      	b.n	80010b0 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	753b      	strb	r3, [r7, #20]
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dcd6      	bgt.n	8001078 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010ee:	2306      	movs	r3, #6
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	e012      	b.n	800111a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001104:	8afa      	ldrh	r2, [r7, #22]
 8001106:	8a7b      	ldrh	r3, [r7, #18]
 8001108:	4053      	eors	r3, r2
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	e002      	b.n	8001114 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001114:	7d3b      	ldrb	r3, [r7, #20]
 8001116:	3b01      	subs	r3, #1
 8001118:	753b      	strb	r3, [r7, #20]
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e9      	bne.n	80010f4 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29b      	uxth	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 8001142:	230c      	movs	r3, #12
 8001144:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800114e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	a314      	add	r3, pc, #80	@ (adr r3, 80011b0 <Set_UnderOver_Voltage_Threshold+0x78>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb73 	bl	800084c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b01      	subs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 80011a2:	89bb      	ldrh	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	30553261 	.word	0x30553261
 80011b4:	3f63a92a 	.word	0x3f63a92a

080011b8 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <ADBMS_getVoltage+0x40>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	30553261 	.word	0x30553261
 80011fc:	3f23a92a 	.word	0x3f23a92a

08001200 <ADBMS_Init>:

void ADBMS_Init(adbms6830_ICs *ICs, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	807b      	strh	r3, [r7, #2]
    ICs->hspi           = hspi;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	601a      	str	r2, [r3, #0]
    ICs->csb_pinBank    = csb_pinBank;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    ICs->csb_pin        = csb_pin;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	811a      	strh	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <ADBMS_Set_Config_A>:


void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e0f7      	b.n	800142c <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	b259      	sxtb	r1, r3
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b25b      	sxtb	r3, r3
 800127a:	430b      	orrs	r3, r1
 800127c:	b259      	sxtb	r1, r3
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1899      	adds	r1, r3, r2
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	3301      	adds	r3, #1
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	784a      	ldrb	r2, [r1, #1]
 80012b4:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	430b      	orrs	r3, r1
 80012f4:	b259      	sxtb	r1, r3
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	430b      	orrs	r3, r1
 8001316:	b259      	sxtb	r1, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001342:	b299      	uxth	r1, r3
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3303      	adds	r3, #3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800136e:	b29b      	uxth	r3, r3
 8001370:	121b      	asrs	r3, r3, #8
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	3304      	adds	r3, #4
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f001 0203 	and.w	r2, r1, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	430b      	orrs	r3, r1
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b25b      	sxtb	r3, r3
 800140e:	430b      	orrs	r3, r1
 8001410:	b259      	sxtb	r1, r3
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	3305      	adds	r3, #5
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f67f af04 	bls.w	800123c <ADBMS_Set_Config_A+0x10>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e09b      	b.n	800158a <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	b299      	uxth	r1, r3
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	b29b      	uxth	r3, r3
 8001486:	b25b      	sxtb	r3, r3
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	b25a      	sxtb	r2, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	b29b      	uxth	r3, r3
 800149c:	121b      	asrs	r3, r3, #8
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b259      	sxtb	r1, r3
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	1119      	asrs	r1, r3, #4
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3302      	adds	r3, #2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	440b      	add	r3, r1
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b259      	sxtb	r1, r3
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3303      	adds	r3, #3
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	88d9      	ldrh	r1, [r3, #6]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3304      	adds	r3, #4
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b299      	uxth	r1, r3
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	3305      	adds	r3, #5
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b01      	cmp	r3, #1
 800158e:	f67f af60 	bls.w	8001452 <ADBMS_Set_Config_B+0x10>
    }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	7138      	strb	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015bc:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 80015d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d4:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	801a      	strh	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <ADBMS_Set_ADSV>:

void ADBMS_Set_ADSV(adsv_ adsv, uint16_t *adsv_cmd_buffer)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	7138      	strb	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    *adsv_cmd_buffer = (0x1 << 8)
                        | ((adsv.cont && 0x1) << 7)
 800162e:	793b      	ldrb	r3, [r7, #4]
 8001630:	b21b      	sxth	r3, r3
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	b21b      	sxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	b21b      	sxth	r3, r3
                        | (0x3 << 5)
 800163a:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 800163e:	b21a      	sxth	r2, r3
                        | ((adsv.dcp && 0x1) << 4)
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	b21b      	sxth	r3, r3
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b21b      	sxth	r3, r3
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
                        | (0x1 << 3)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
                        | (adsv.ow && 0x3);
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
    *adsv_cmd_buffer = (0x1 << 8)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	801a      	strh	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <ADBMS_Set_ADAX>:

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	7138      	strb	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21b      	sxth	r3, r3
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	b21b      	sxth	r3, r3
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 80016b2:	793a      	ldrb	r2, [r7, #4]
 80016b4:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d001      	beq.n	80016c2 <ADBMS_Set_ADAX+0x40>
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	e000      	b.n	80016c4 <ADBMS_Set_ADAX+0x42>
 80016c2:	2200      	movs	r2, #0
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <ADBMS_Pack_CMD>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

void ADBMS_Pack_CMD(uint16_t tx_cmd, uint8_t *spi_tx_dataBuf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fc69 	bl	8000ff4 <Pec15_Calc>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3302      	adds	r3, #2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3303      	adds	r3, #3
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ADBMS_Pack_Write_Data_RegGrp>:

void ADBMS_Pack_Write_Data_RegGrp(uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	81fb      	strh	r3, [r7, #14]

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);

    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ffcd 	bl	80016f8 <ADBMS_Pack_CMD>

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 800175e:	2302      	movs	r3, #2
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e04d      	b.n	8001800 <ADBMS_Pack_Write_Data_RegGrp+0xba>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 8001764:	2300      	movs	r3, #0
 8001766:	75bb      	strb	r3, [r7, #22]
 8001768:	e01b      	b.n	80017a2 <ADBMS_Pack_Write_Data_RegGrp+0x5c>
            spi_tx_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	f1c3 0202 	rsb	r2, r3, #2
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	461a      	mov	r2, r3
 800177a:	7dbb      	ldrb	r3, [r7, #22]
 800177c:	4413      	add	r3, r2
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	441a      	add	r2, r3
 8001784:	7dbb      	ldrb	r3, [r7, #22]
 8001786:	1d19      	adds	r1, r3, #4
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	f1c3 0302 	rsb	r3, r3, #2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	4619      	mov	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	440b      	add	r3, r1
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 800179c:	7dbb      	ldrb	r3, [r7, #22]
 800179e:	3301      	adds	r3, #1
 80017a0:	75bb      	strb	r3, [r7, #22]
 80017a2:	7dbb      	ldrb	r3, [r7, #22]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d9e0      	bls.n	800176a <ADBMS_Pack_Write_Data_RegGrp+0x24>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	f1c3 0202 	rsb	r2, r3, #2
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	2106      	movs	r1, #6
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fc4b 	bl	800105c <Pec10_Calc>
 80017c6:	4603      	mov	r3, r0
 80017c8:	82bb      	strh	r3, [r7, #20]
        spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 80017ca:	8abb      	ldrh	r3, [r7, #20]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	f1c3 0302 	rsb	r3, r3, #2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	330a      	adds	r3, #10
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	440b      	add	r3, r1
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
        spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	f1c3 0302 	rsb	r3, r3, #2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	330b      	adds	r3, #11
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	8aba      	ldrh	r2, [r7, #20]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	75fb      	strb	r3, [r7, #23]
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ae      	bne.n	8001764 <ADBMS_Pack_Write_Data_RegGrp+0x1e>
    }
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <ADBMS_Process_Read_Data_RegGrp>:

bool ADBMS_Process_Read_Data_RegGrp(uint8_t *rx_dataBuf_raw, uint8_t *dataBuf)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
    // Move Rx ptr to skip over data during transmit phase 
    uint8_t *rx_dataBuf = rx_dataBuf_raw + CMD_LEN + PEC_LEN;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	613b      	str	r3, [r7, #16]

    bool pec_error = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001824:	2300      	movs	r3, #0
 8001826:	75bb      	strb	r3, [r7, #22]
 8001828:	e051      	b.n	80018ce <ADBMS_Process_Read_Data_RegGrp+0xbe>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800182a:	2300      	movs	r3, #0
 800182c:	757b      	strb	r3, [r7, #21]
 800182e:	e016      	b.n	800185e <ADBMS_Process_Read_Data_RegGrp+0x4e>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001830:	7d7a      	ldrb	r2, [r7, #21]
 8001832:	7dbb      	ldrb	r3, [r7, #22]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1899      	adds	r1, r3, r2
 800183e:	7dba      	ldrb	r2, [r7, #22]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	780a      	ldrb	r2, [r1, #0]
 8001856:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001858:	7d7b      	ldrb	r3, [r7, #21]
 800185a:	3301      	adds	r3, #1
 800185c:	757b      	strb	r3, [r7, #21]
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d9e5      	bls.n	8001830 <ADBMS_Process_Read_Data_RegGrp+0x20>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	3306      	adds	r3, #6
 800186a:	461a      	mov	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b21b      	sxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21b      	sxth	r3, r3
 8001878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187c:	b21a      	sxth	r2, r3
 800187e:	7dbb      	ldrb	r3, [r7, #22]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	3307      	adds	r3, #7
 8001884:	4619      	mov	r1, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	440b      	add	r3, r1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	81fb      	strh	r3, [r7, #14]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	2106      	movs	r1, #6
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff fbda 	bl	800105c <Pec10_Calc>
 80018a8:	4603      	mov	r3, r0
 80018aa:	81bb      	strh	r3, [r7, #12]
        pec_error |= (rx_pec != calc_pec);
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	89f9      	ldrh	r1, [r7, #14]
 80018b0:	89ba      	ldrh	r2, [r7, #12]
 80018b2:	4291      	cmp	r1, r2
 80018b4:	bf14      	ite	ne
 80018b6:	2201      	movne	r2, #1
 80018b8:	2200      	moveq	r2, #0
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	4313      	orrs	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018c8:	7dbb      	ldrb	r3, [r7, #22]
 80018ca:	3301      	adds	r3, #1
 80018cc:	75bb      	strb	r3, [r7, #22]
 80018ce:	7dbb      	ldrb	r3, [r7, #22]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d9aa      	bls.n	800182a <ADBMS_Process_Read_Data_RegGrp+0x1a>
    }
    return pec_error;
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <ADBMS_WakeUP_ICs_Polling>:

void ADBMS_WakeUP_ICs_Polling()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e012      	b.n	8001912 <ADBMS_WakeUP_ICs_Polling+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80018f2:	f004 fd77 	bl	80063e4 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f002 fdca 	bl	8004490 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 8001902:	f004 fd6f 	bl	80063e4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f002 fdc2 	bl	8004490 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3301      	adds	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d9e9      	bls.n	80018ec <ADBMS_WakeUP_ICs_Polling+0xc>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020000 	.word	0x40020000

08001928 <ADBMS_Write_CMD_Polling>:

void ADBMS_Write_CMD_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
    // spi_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
    // spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fedb 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001948:	f004 fd4c 	bl	80063e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800194c:	f107 010c 	add.w	r1, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2204      	movs	r2, #4
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fca9 	bl	80082ae <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001962:	f004 fd3f 	bl	80063e4 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000

08001974 <ADBMS_Write_Data_RegGrp_Polling>:

void ADBMS_Write_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
    //     uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
    //     spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
    //     spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
    // }

    ADBMS_Pack_Write_Data_RegGrp(tx_cmd, data, spi_tx_dataBuf);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fedb 	bl	8001746 <ADBMS_Pack_Write_Data_RegGrp>

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2110      	movs	r1, #16
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 8001996:	f004 fd25 	bl	80063e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2214      	movs	r2, #20
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f006 fc83 	bl	80082ae <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4803      	ldr	r0, [pc, #12]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 80019ae:	f004 fd19 	bl	80063e4 <HAL_GPIO_WritePin>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000

080019c0 <ADBMS_Read_Data_RegGrp_Polling>:

bool ADBMS_Read_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_rx_dataBuf)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[DATABUF_LEN] = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
    // spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 80019e0:	f107 0214 	add.w	r2, r7, #20
 80019e4:	897b      	ldrh	r3, [r7, #10]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fe85 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2110      	movs	r1, #16
 80019f2:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <ADBMS_Read_Data_RegGrp_Polling+0x68>)
 80019f4:	f004 fcf6 	bl	80063e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_rx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 80019f8:	f107 0114 	add.w	r1, r7, #20
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2314      	movs	r3, #20
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f006 fd95 	bl	8008536 <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2110      	movs	r1, #16
 8001a10:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <ADBMS_Read_Data_RegGrp_Polling+0x68>)
 8001a12:	f004 fce7 	bl	80063e4 <HAL_GPIO_WritePin>

    return ADBMS_Process_Read_Data_RegGrp(spi_rx_dataBuf, dataBuf);
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7ff fef9 	bl	8001810 <ADBMS_Process_Read_Data_RegGrp>
 8001a1e:	4603      	mov	r3, r0
    //     }
    //     uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
    //     uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
    //     pec_error |= (rx_pec != calc_pec);
    // }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020000 	.word	0x40020000

08001a2c <ADBMS_TransmitReceive_Reg_DMA>:

bool ADBMS_TransmitReceive_Reg_DMA(adbms6830_ICs *ICs)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(ICs->csb_pinBank, ICs->csb_pin, GPIO_PIN_RESET);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6858      	ldr	r0, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	891b      	ldrh	r3, [r3, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f004 fcd0 	bl	80063e4 <HAL_GPIO_WritePin>
    bool DMA_Status = HAL_SPI_TransmitReceive_DMA(ICs->hspi, ICs->spi_tx_dataBuf, ICs->spi_rx_dataBuf, DATA_LEN) == HAL_OK;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f103 010a 	add.w	r1, r3, #10
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f103 021e 	add.w	r2, r3, #30
 8001a54:	2306      	movs	r3, #6
 8001a56:	f006 ff17 	bl	8008888 <HAL_SPI_TransmitReceive_DMA>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(ICs->csb_pinBank, ICs->csb_pin, GPIO_PIN_SET);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6858      	ldr	r0, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	891b      	ldrh	r3, [r3, #8]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4619      	mov	r1, r3
 8001a72:	f004 fcb7 	bl	80063e4 <HAL_GPIO_WritePin>

    // Healthy is high
    return DMA_Status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <ADBMS_Interface_Initialize>:
#include "adbms_interface.h"

void ADBMS_Interface_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	807b      	strh	r3, [r7, #2]
    ADBMS_Init(&adbms->ICs, hspi, csb_pinBank, csb_pin);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	f7ff fbb3 	bl	8001200 <ADBMS_Init>

    // Define which VoltageReg groups to read
    adbms->vregs[0] = RDCVA;
 8001a9a:	4b75      	ldr	r3, [pc, #468]	@ (8001c70 <ADBMS_Interface_Initialize+0x1f0>)
 8001a9c:	881a      	ldrh	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
    adbms->vregs[1] = RDCVB;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <ADBMS_Interface_Initialize+0x1f4>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
    adbms->vregs[2] = RDCVC;
 8001aae:	4b72      	ldr	r3, [pc, #456]	@ (8001c78 <ADBMS_Interface_Initialize+0x1f8>)
 8001ab0:	881a      	ldrh	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
    adbms->vregs[3] = RDCVD;
 8001ab8:	4b70      	ldr	r3, [pc, #448]	@ (8001c7c <ADBMS_Interface_Initialize+0x1fc>)
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
    adbms->vregs[4] = RDCVE;
 8001ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <ADBMS_Interface_Initialize+0x200>)
 8001ac4:	881a      	ldrh	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c

    // Define which TempReg groups to read
    adbms->tregs[0] = RDAUXA;
 8001acc:	4b6d      	ldr	r3, [pc, #436]	@ (8001c84 <ADBMS_Interface_Initialize+0x204>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    adbms->tregs[1] = RDAUXB;
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c88 <ADBMS_Interface_Initialize+0x208>)
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    adbms->tregs[2] = RDAUXC;
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c8c <ADBMS_Interface_Initialize+0x20c>)
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    adbms->tregs[3] = RDAUXD;
 8001aea:	4b69      	ldr	r3, [pc, #420]	@ (8001c90 <ADBMS_Interface_Initialize+0x210>)
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126

    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
 8001af8:	e042      	b.n	8001b80 <ADBMS_Interface_Initialize+0x100>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001afa:	7dfa      	ldrb	r2, [r7, #23]
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001b0c:	7893      	ldrb	r3, [r2, #2]
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	7093      	strb	r3, [r2, #2]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001b14:	7dfa      	ldrb	r2, [r7, #23]
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001b26:	8893      	ldrh	r3, [r2, #4]
 8001b28:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001b2c:	f361 134e 	bfi	r3, r1, #5, #10
 8001b30:	8093      	strh	r3, [r2, #4]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001b32:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001b36:	f7ff faff 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b44:	b291      	uxth	r1, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	3326      	adds	r3, #38	@ 0x26
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	88da      	ldrh	r2, [r3, #6]
 8001b50:	f361 020b 	bfi	r2, r1, #0, #12
 8001b54:	80da      	strh	r2, [r3, #6]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001b56:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001c94 <ADBMS_Interface_Initialize+0x214>
 8001b5a:	f7ff faed 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b68:	b291      	uxth	r1, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	3326      	adds	r3, #38	@ 0x26
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	891a      	ldrh	r2, [r3, #8]
 8001b74:	f361 020b 	bfi	r2, r1, #0, #12
 8001b78:	811a      	strh	r2, [r3, #8]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d9b9      	bls.n	8001afa <ADBMS_Interface_Initialize+0x7a>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f892 3146 	ldrb.w	r3, [r2, #326]	@ 0x146
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	f882 3146 	strb.w	r3, [r2, #326]	@ 0x146

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f503 7295 	add.w	r2, r3, #298	@ 0x12a
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3332      	adds	r3, #50	@ 0x32
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f7ff fb43 	bl	800122c <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f503 729b 	add.w	r2, r3, #310	@ 0x136
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	333e      	adds	r3, #62	@ 0x3e
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff fc45 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	f893 0146 	ldrb.w	r0, [r3, #326]	@ 0x146
 8001bc6:	f7ff fceb 	bl	80015a0 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	f893 0148 	ldrb.w	r0, [r3, #328]	@ 0x148
 8001bd8:	f7ff fd53 	bl	8001682 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs_Polling();
 8001bdc:	f7ff fe80 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001be0:	f7ff fe7e 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_tx_dataBuf);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <ADBMS_Interface_Initialize+0x218>)
 8001bea:	8819      	ldrh	r1, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	330a      	adds	r3, #10
 8001bf6:	f7ff febd 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001bfa:	f7ff fe71 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <ADBMS_Interface_Initialize+0x21c>)
 8001c04:	8819      	ldrh	r1, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	330a      	adds	r3, #10
 8001c10:	f7ff feb0 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>

    // Turn on sensing
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adcv);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7ff fe81 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f002 fc32 	bl	8004490 <HAL_Delay>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f7ff fe75 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f002 fc26 	bl	8004490 <HAL_Delay>

    ADBMS_Pack_CMD(adbms->vregs[adbms->vreg_index], adbms->ICs.spi_tx_dataBuf);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	3388      	adds	r3, #136	@ 0x88
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	889a      	ldrh	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	330a      	adds	r3, #10
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f7ff fd4c 	bl	80016f8 <ADBMS_Pack_CMD>
    ADBMS_TransmitReceive_Reg_DMA(&adbms->ICs);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fee2 	bl	8001a2c <ADBMS_TransmitReceive_Reg_DMA>

}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000004 	.word	0x20000004
 8001c74:	20000006 	.word	0x20000006
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	2000000a 	.word	0x2000000a
 8001c80:	2000000c 	.word	0x2000000c
 8001c84:	20000018 	.word	0x20000018
 8001c88:	2000001a 	.word	0x2000001a
 8001c8c:	2000001c 	.word	0x2000001c
 8001c90:	2000001e 	.word	0x2000001e
 8001c94:	40866666 	.word	0x40866666
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000002 	.word	0x20000002

08001ca0 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <UpdateADInternalFault+0x2e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc45 	bl	8000548 <__aeabi_f2d>
 8001cbe:	a330      	add	r3, pc, #192	@ (adr r3, 8001d80 <UpdateADInternalFault+0xe0>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe ff28 	bl	8000b18 <__aeabi_dcmpgt>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <UpdateADInternalFault+0x32>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <UpdateADInternalFault+0x34>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <UpdateADInternalFault+0x5e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8001cf0:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d501      	bpl.n	8001d02 <UpdateADInternalFault+0x62>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <UpdateADInternalFault+0x64>
 8001d02:	2300      	movs	r3, #0
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <UpdateADInternalFault+0x8e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8001d20:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d78 <UpdateADInternalFault+0xd8>
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	dd01      	ble.n	8001d32 <UpdateADInternalFault+0x92>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <UpdateADInternalFault+0x94>
 8001d32:	2300      	movs	r3, #0
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <UpdateADInternalFault+0xbe>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8001d50:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001d7c <UpdateADInternalFault+0xdc>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d501      	bpl.n	8001d62 <UpdateADInternalFault+0xc2>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <UpdateADInternalFault+0xc4>
 8001d62:	2300      	movs	r3, #0
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	42b40000 	.word	0x42b40000
 8001d7c:	c2200000 	.word	0xc2200000
 8001d80:	cccccccd 	.word	0xcccccccd
 8001d84:	4010cccc 	.word	0x4010cccc

08001d88 <ADBMS_DMA_Complete>:
//     // calculate the avg temp
//     adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
// }

void ADBMS_DMA_Complete(adbms_ *adbms)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    // Start new Transmit Receive DMA
    ADBMS_TransmitReceive_Reg_DMA(&adbms->ICs);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fe4a 	bl	8001a2c <ADBMS_TransmitReceive_Reg_DMA>

    // Fill new Tx buf for next DMA
    adbms->vreg_index += 1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
    if(adbms->vreg_index >= NUM_VREG_GRPS_READ) adbms->vreg_index = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d903      	bls.n	8001dba <ADBMS_DMA_Complete+0x32>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e

    ADBMS_Pack_CMD(adbms->vregs[adbms->vreg_index], adbms->ICs.spi_tx_dataBuf);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	3388      	adds	r3, #136	@ 0x88
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	889a      	ldrh	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	330a      	adds	r3, #10
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f7ff fc91 	bl	80016f8 <ADBMS_Pack_CMD>

    // Process Rx data
    bool pec = ADBMS_Process_Read_Data_RegGrp(adbms->ICs.spi_rx_dataBuf, adbms->ICs.cell);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 021e 	add.w	r2, r3, #30
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3352      	adds	r3, #82	@ 0x52
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7ff fd14 	bl	8001810 <ADBMS_Process_Read_Data_RegGrp>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]
    adbms->total_pec_failures += pec;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	ee07 3a90 	vmov	s15, r3
 8001df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	edc3 7a8b 	vstr	s15, [r3, #556]	@ 0x22c
    adbms->voltage_pec_failure = pec;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
    if(!pec) ADBMS_CalculateValue_Grp_Voltages(adbms);
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <ADBMS_DMA_Complete+0x98>
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f804 	bl	8001e28 <ADBMS_CalculateValue_Grp_Voltages>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ADBMS_CalculateValue_Grp_Voltages>:

void ADBMS_CalculateValue_Grp_Voltages(adbms_ *adbms)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d014      	beq.n	8001e6a <ADBMS_CalculateValue_Grp_Voltages+0x42>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <ADBMS_CalculateValue_Grp_Voltages+0x42>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <ADBMS_CalculateValue_Grp_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d022      	beq.n	8001eba <ADBMS_CalculateValue_Grp_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	ed93 7a8a 	vldr	s14, [r3, #552]	@ 0x228
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8001e98:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	dd04      	ble.n	8001eb0 <ADBMS_CalculateValue_Grp_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001eae:	e06f      	b.n	8001f90 <ADBMS_CalculateValue_Grp_Voltages+0x168>
            adbms->pec_fault_ = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 8001eb8:	e06a      	b.n	8001f90 <ADBMS_CalculateValue_Grp_Voltages+0x168>
    }
    
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
 8001ebe:	e064      	b.n	8001f8a <ADBMS_CalculateValue_Grp_Voltages+0x162>
    {
        uint8_t creg_grp = adbms->vreg_index - 1;   // -1 because already increameted for next DMA
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	757b      	strb	r3, [r7, #21]
        if(creg_grp < 0) creg_grp = NUM_VREG_GRPS_READ;

        for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75bb      	strb	r3, [r7, #22]
 8001ece:	e054      	b.n	8001f7a <ADBMS_CalculateValue_Grp_Voltages+0x152>
        {
            if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001ed0:	7d7a      	ldrb	r2, [r7, #21]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	7dba      	ldrb	r2, [r7, #22]
 8001eda:	0852      	lsrs	r2, r2, #1
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4413      	add	r3, r2
 8001ee0:	2b0d      	cmp	r3, #13
 8001ee2:	dc4e      	bgt.n	8001f82 <ADBMS_CalculateValue_Grp_Voltages+0x15a>
            int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001ee4:	7d7a      	ldrb	r2, [r7, #21]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	7dfa      	ldrb	r2, [r7, #23]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	18ca      	adds	r2, r1, r3
 8001efc:	7dbb      	ldrb	r3, [r7, #22]
 8001efe:	4413      	add	r3, r2
 8001f00:	3301      	adds	r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b219      	sxth	r1, r3
 8001f10:	7d7a      	ldrb	r2, [r7, #21]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	7dfa      	ldrb	r2, [r7, #23]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	18c2      	adds	r2, r0, r3
 8001f28:	7dbb      	ldrb	r3, [r7, #22]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	430b      	orrs	r3, r1
 8001f38:	827b      	strh	r3, [r7, #18]
            float curr_voltage = ADBMS_getVoltage(raw_val);
 8001f3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f93a 	bl	80011b8 <ADBMS_getVoltage>
 8001f44:	ed87 0a03 	vstr	s0, [r7, #12]
            adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8001f48:	7dfa      	ldrb	r2, [r7, #23]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4619      	mov	r1, r3
 8001f54:	7d7a      	ldrb	r2, [r7, #21]
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	7dba      	ldrb	r2, [r7, #22]
 8001f60:	0852      	lsrs	r2, r2, #1
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	4413      	add	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	3352      	adds	r3, #82	@ 0x52
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]
        for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001f74:	7dbb      	ldrb	r3, [r7, #22]
 8001f76:	3302      	adds	r3, #2
 8001f78:	75bb      	strb	r3, [r7, #22]
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d9a7      	bls.n	8001ed0 <ADBMS_CalculateValue_Grp_Voltages+0xa8>
 8001f80:	e000      	b.n	8001f84 <ADBMS_CalculateValue_Grp_Voltages+0x15c>
            if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001f82:	bf00      	nop
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	3301      	adds	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d997      	bls.n	8001ec0 <ADBMS_CalculateValue_Grp_Voltages+0x98>
        }
    }
}
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <ADBMS_Update_Voltages>:

void ADBMS_Update_Voltages(adbms_ *adbms)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
    
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <cellBalanceOff>:
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
}

void cellBalanceOff(adbms_ *adbms)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    // Turn off CB indication LED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	@ 0x40
 8001fb8:	4815      	ldr	r0, [pc, #84]	@ (8002010 <cellBalanceOff+0x64>)
 8001fba:	f004 fa13 	bl	80063e4 <HAL_GPIO_WritePin>

    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e009      	b.n	8001fd8 <cellBalanceOff+0x2c>
    {
        adbms->cfb[cic].dcc = 0;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3326      	adds	r3, #38	@ 0x26
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	2200      	movs	r2, #0
 8001fd0:	819a      	strh	r2, [r3, #12]
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	ddf2      	ble.n	8001fc4 <cellBalanceOff+0x18>
    }
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f503 729b 	add.w	r2, r3, #310	@ 0x136
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	333e      	adds	r3, #62	@ 0x3e
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f7ff fa29 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <cellBalanceOff+0x68>)
 8001ff6:	8819      	ldrh	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	330a      	adds	r3, #10
 8002002:	f7ff fcb7 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40020400 	.word	0x40020400
 8002014:	20000002 	.word	0x20000002

08002018 <UpdateOWCFault>:

void UpdateOWCFault(adbms_ *adbms)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    // check openwire fault
    ADBMS_WakeUP_ICs_Polling();
 8002020:	f7ff fc5e 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    cellBalanceOff(adbms);   // need to turn off cell balancing to check for OWC
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffc1 	bl	8001fac <cellBalanceOff>

    /// OWC EVEN Check
    adbms->adsv.cont = 1;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 1; // Enable OW on even-channel 
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 800203e:	2101      	movs	r1, #1
 8002040:	f361 0383 	bfi	r3, r1, #2, #2
 8002044:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4611      	mov	r1, r2
 8002052:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 8002056:	f7ff fae5 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7ff fc5e 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 800206c:	2008      	movs	r0, #8
 800206e:	f002 fa0f 	bl	8004490 <HAL_Delay>

    // Get new s-channel voltages
    bool pec = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	747b      	strb	r3, [r7, #17]
    ADBMS_WakeUP_ICs_Polling();
 8002076:	f7ff fc33 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	4b73      	ldr	r3, [pc, #460]	@ (800224c <UpdateOWCFault+0x234>)
 8002080:	8819      	ldrh	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	331e      	adds	r3, #30
 800208c:	f7ff fc98 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	7c7b      	ldrb	r3, [r7, #17]
 8002096:	4313      	orrs	r3, r2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	4b69      	ldr	r3, [pc, #420]	@ (8002250 <UpdateOWCFault+0x238>)
 80020aa:	8819      	ldrh	r1, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	339a      	adds	r3, #154	@ 0x9a
 80020b0:	f103 020c 	add.w	r2, r3, #12
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	331e      	adds	r3, #30
 80020b8:	f7ff fc82 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	7c7b      	ldrb	r3, [r7, #17]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <UpdateOWCFault+0x23c>)
 80020d6:	8819      	ldrh	r1, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	339a      	adds	r3, #154	@ 0x9a
 80020dc:	f103 0218 	add.w	r2, r3, #24
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	331e      	adds	r3, #30
 80020e4:	f7ff fc6c 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	7c7b      	ldrb	r3, [r7, #17]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	4b55      	ldr	r3, [pc, #340]	@ (8002258 <UpdateOWCFault+0x240>)
 8002102:	8819      	ldrh	r1, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	339a      	adds	r3, #154	@ 0x9a
 8002108:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	331e      	adds	r3, #30
 8002110:	f7ff fc56 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	7c7b      	ldrb	r3, [r7, #17]
 800211a:	4313      	orrs	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <UpdateOWCFault+0x244>)
 800212e:	8819      	ldrh	r1, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	339a      	adds	r3, #154	@ 0x9a
 8002134:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	331e      	adds	r3, #30
 800213c:	f7ff fc40 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	4313      	orrs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	747b      	strb	r3, [r7, #17]

    if(pec){
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d019      	beq.n	800218e <UpdateOWCFault+0x176>
        adbms->current_owc_failures += 1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8002160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8002174:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002180:	dc00      	bgt.n	8002184 <UpdateOWCFault+0x16c>
            adbms->pec_fault_ = 1;
        }
        return;
 8002182:	e1bb      	b.n	80024fc <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 800218c:	e1b6      	b.n	80024fc <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
 800219c:	e06b      	b.n	8002276 <UpdateOWCFault+0x25e>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 800219e:	2305      	movs	r3, #5
 80021a0:	737b      	strb	r3, [r7, #13]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	75bb      	strb	r3, [r7, #22]
 80021a6:	e05f      	b.n	8002268 <UpdateOWCFault+0x250>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80021a8:	2300      	movs	r3, #0
 80021aa:	757b      	strb	r3, [r7, #21]
 80021ac:	e04a      	b.n	8002244 <UpdateOWCFault+0x22c>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80021ae:	7dba      	ldrb	r2, [r7, #22]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	7d7a      	ldrb	r2, [r7, #21]
 80021b8:	0852      	lsrs	r2, r2, #1
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4413      	add	r3, r2
 80021be:	2b0d      	cmp	r3, #13
 80021c0:	dc4e      	bgt.n	8002260 <UpdateOWCFault+0x248>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 80021c2:	7dba      	ldrb	r2, [r7, #22]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4619      	mov	r1, r3
 80021ce:	7dfa      	ldrb	r2, [r7, #23]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	18ca      	adds	r2, r1, r3
 80021da:	7d7b      	ldrb	r3, [r7, #21]
 80021dc:	4413      	add	r3, r2
 80021de:	3301      	adds	r3, #1
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b219      	sxth	r1, r3
 80021ee:	7dba      	ldrb	r2, [r7, #22]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4618      	mov	r0, r3
 80021fa:	7dfa      	ldrb	r2, [r7, #23]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	18c2      	adds	r2, r0, r3
 8002206:	7d7b      	ldrb	r3, [r7, #21]
 8002208:	4413      	add	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002212:	b21b      	sxth	r3, r3
 8002214:	430b      	orrs	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 8002218:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe ffcb 	bl	80011b8 <ADBMS_getVoltage>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800222a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	d504      	bpl.n	800223e <UpdateOWCFault+0x226>
                {
                    adbms->openwire_fault_ = 1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
                    return;
 800223c:	e15e      	b.n	80024fc <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 800223e:	7d7b      	ldrb	r3, [r7, #21]
 8002240:	3302      	adds	r3, #2
 8002242:	757b      	strb	r3, [r7, #21]
 8002244:	7d7b      	ldrb	r3, [r7, #21]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d9b1      	bls.n	80021ae <UpdateOWCFault+0x196>
 800224a:	e00a      	b.n	8002262 <UpdateOWCFault+0x24a>
 800224c:	2000000e 	.word	0x2000000e
 8002250:	20000010 	.word	0x20000010
 8002254:	20000012 	.word	0x20000012
 8002258:	20000014 	.word	0x20000014
 800225c:	20000016 	.word	0x20000016
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002260:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002262:	7dbb      	ldrb	r3, [r7, #22]
 8002264:	3301      	adds	r3, #1
 8002266:	75bb      	strb	r3, [r7, #22]
 8002268:	7dba      	ldrb	r2, [r7, #22]
 800226a:	7b7b      	ldrb	r3, [r7, #13]
 800226c:	429a      	cmp	r2, r3
 800226e:	d39b      	bcc.n	80021a8 <UpdateOWCFault+0x190>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	3301      	adds	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d990      	bls.n	800219e <UpdateOWCFault+0x186>
            }
        }
    }

    /// OWC ODD Check
    adbms->adsv.cont = 1;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 2; // Enable OW on odd-channel 
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 8002290:	2102      	movs	r1, #2
 8002292:	f361 0383 	bfi	r3, r1, #2, #2
 8002296:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4611      	mov	r1, r2
 80022a4:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 80022a8:	f7ff f9bc 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f7ff fb35 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 80022be:	2008      	movs	r0, #8
 80022c0:	f002 f8e6 	bl	8004490 <HAL_Delay>

    // Get new s-channel voltages
    ADBMS_WakeUP_ICs_Polling();
 80022c4:	f7ff fb0c 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <UpdateOWCFault+0x4ec>)
 80022ce:	8819      	ldrh	r1, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	331e      	adds	r3, #30
 80022da:	f7ff fb71 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7c7b      	ldrb	r3, [r7, #17]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <UpdateOWCFault+0x4f0>)
 80022f8:	8819      	ldrh	r1, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	339a      	adds	r3, #154	@ 0x9a
 80022fe:	f103 020c 	add.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	331e      	adds	r3, #30
 8002306:	f7ff fb5b 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	7c7b      	ldrb	r3, [r7, #17]
 8002310:	4313      	orrs	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	4b7a      	ldr	r3, [pc, #488]	@ (800250c <UpdateOWCFault+0x4f4>)
 8002324:	8819      	ldrh	r1, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	339a      	adds	r3, #154	@ 0x9a
 800232a:	f103 0218 	add.w	r2, r3, #24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	331e      	adds	r3, #30
 8002332:	f7ff fb45 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	7c7b      	ldrb	r3, [r7, #17]
 800233c:	4313      	orrs	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	4b70      	ldr	r3, [pc, #448]	@ (8002510 <UpdateOWCFault+0x4f8>)
 8002350:	8819      	ldrh	r1, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	339a      	adds	r3, #154	@ 0x9a
 8002356:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	331e      	adds	r3, #30
 800235e:	f7ff fb2f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	7c7b      	ldrb	r3, [r7, #17]
 8002368:	4313      	orrs	r3, r2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	4b66      	ldr	r3, [pc, #408]	@ (8002514 <UpdateOWCFault+0x4fc>)
 800237c:	8819      	ldrh	r1, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	339a      	adds	r3, #154	@ 0x9a
 8002382:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	331e      	adds	r3, #30
 800238a:	f7ff fb19 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	7c7b      	ldrb	r3, [r7, #17]
 8002394:	4313      	orrs	r3, r2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	747b      	strb	r3, [r7, #17]

    if(pec){
 80023a2:	7c7b      	ldrb	r3, [r7, #17]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d019      	beq.n	80023dc <UpdateOWCFault+0x3c4>
        adbms->current_owc_failures += 1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 80023ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 80023c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80023c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	dc00      	bgt.n	80023d2 <UpdateOWCFault+0x3ba>
            adbms->pec_fault_ = 1;
        }
        return;
 80023d0:	e094      	b.n	80024fc <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 80023da:	e08f      	b.n	80024fc <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	753b      	strb	r3, [r7, #20]
 80023ea:	e061      	b.n	80024b0 <UpdateOWCFault+0x498>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 80023ec:	2305      	movs	r3, #5
 80023ee:	743b      	strb	r3, [r7, #16]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	74fb      	strb	r3, [r7, #19]
 80023f4:	e055      	b.n	80024a2 <UpdateOWCFault+0x48a>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80023f6:	2300      	movs	r3, #0
 80023f8:	74bb      	strb	r3, [r7, #18]
 80023fa:	e04a      	b.n	8002492 <UpdateOWCFault+0x47a>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80023fc:	7cfa      	ldrb	r2, [r7, #19]
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	7cba      	ldrb	r2, [r7, #18]
 8002406:	0852      	lsrs	r2, r2, #1
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	4413      	add	r3, r2
 800240c:	2b0d      	cmp	r3, #13
 800240e:	dc44      	bgt.n	800249a <UpdateOWCFault+0x482>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8002410:	7cfa      	ldrb	r2, [r7, #19]
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4619      	mov	r1, r3
 800241c:	7d3a      	ldrb	r2, [r7, #20]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	18ca      	adds	r2, r1, r3
 8002428:	7cbb      	ldrb	r3, [r7, #18]
 800242a:	4413      	add	r3, r2
 800242c:	3301      	adds	r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002436:	b21b      	sxth	r3, r3
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b219      	sxth	r1, r3
 800243c:	7cfa      	ldrb	r2, [r7, #19]
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4618      	mov	r0, r3
 8002448:	7d3a      	ldrb	r2, [r7, #20]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	18c2      	adds	r2, r0, r3
 8002454:	7cbb      	ldrb	r3, [r7, #18]
 8002456:	4413      	add	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002460:	b21b      	sxth	r3, r3
 8002462:	430b      	orrs	r3, r1
 8002464:	81fb      	strh	r3, [r7, #14]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 8002466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fea4 	bl	80011b8 <ADBMS_getVoltage>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d504      	bpl.n	800248c <UpdateOWCFault+0x474>
                {
                    adbms->openwire_fault_ = 1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
                    return;
 800248a:	e037      	b.n	80024fc <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 800248c:	7cbb      	ldrb	r3, [r7, #18]
 800248e:	3302      	adds	r3, #2
 8002490:	74bb      	strb	r3, [r7, #18]
 8002492:	7cbb      	ldrb	r3, [r7, #18]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d9b1      	bls.n	80023fc <UpdateOWCFault+0x3e4>
 8002498:	e000      	b.n	800249c <UpdateOWCFault+0x484>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 800249a:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	3301      	adds	r3, #1
 80024a0:	74fb      	strb	r3, [r7, #19]
 80024a2:	7cfa      	ldrb	r2, [r7, #19]
 80024a4:	7c3b      	ldrb	r3, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3a5      	bcc.n	80023f6 <UpdateOWCFault+0x3de>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80024aa:	7d3b      	ldrb	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	753b      	strb	r3, [r7, #20]
 80024b0:	7d3b      	ldrb	r3, [r7, #20]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d99a      	bls.n	80023ec <UpdateOWCFault+0x3d4>
            }
        }
    }

    /// Turn off owc
    adbms->adsv.cont = 0;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 0; // Enable OW on odd-channel 
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 80024ca:	f023 030c 	bic.w	r3, r3, #12
 80024ce:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4611      	mov	r1, r2
 80024dc:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 80024e0:	f7ff f8a0 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f7ff fa19 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);    // S-Channels are updated at 8ms
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 ffca 	bl	8004490 <HAL_Delay>
}
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000000e 	.word	0x2000000e
 8002508:	20000010 	.word	0x20000010
 800250c:	20000012 	.word	0x20000012
 8002510:	20000014 	.word	0x20000014
 8002514:	20000016 	.word	0x20000016

08002518 <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 8002520:	487b      	ldr	r0, [pc, #492]	@ (8002710 <ADBMS_Print_Vals+0x1f8>)
 8002522:	f00b fdd3 	bl	800e0cc <puts>
    printf("total v: %f\n", adbms->total_v);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f80b 	bl	8000548 <__aeabi_f2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4877      	ldr	r0, [pc, #476]	@ (8002714 <ADBMS_Print_Vals+0x1fc>)
 8002538:	f00b fd58 	bl	800dfec <iprintf>
    printf("max v: %f\t", adbms->max_v);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f800 	bl	8000548 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4872      	ldr	r0, [pc, #456]	@ (8002718 <ADBMS_Print_Vals+0x200>)
 800254e:	f00b fd4d 	bl	800dfec <iprintf>
    printf("min v: %f\t", adbms->min_v);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fff5 	bl	8000548 <__aeabi_f2d>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	486e      	ldr	r0, [pc, #440]	@ (800271c <ADBMS_Print_Vals+0x204>)
 8002564:	f00b fd42 	bl	800dfec <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ffea 	bl	8000548 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4869      	ldr	r0, [pc, #420]	@ (8002720 <ADBMS_Print_Vals+0x208>)
 800257a:	f00b fd37 	bl	800dfec <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 800258a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258e:	ee17 0a90 	vmov	r0, s15
 8002592:	f7fd ffd9 	bl	8000548 <__aeabi_f2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4862      	ldr	r0, [pc, #392]	@ (8002724 <ADBMS_Print_Vals+0x20c>)
 800259c:	f00b fd26 	bl	800dfec <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e02b      	b.n	80025fe <ADBMS_Print_Vals+0xe6>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e022      	b.n	80025f2 <ADBMS_Print_Vals+0xda>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	461a      	mov	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	1c5c      	adds	r4, r3, #1
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	461a      	mov	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	3352      	adds	r3, #82	@ 0x52
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ffb4 	bl	8000548 <__aeabi_f2d>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4621      	mov	r1, r4
 80025e6:	4850      	ldr	r0, [pc, #320]	@ (8002728 <ADBMS_Print_Vals+0x210>)
 80025e8:	f00b fd00 	bl	800dfec <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b0d      	cmp	r3, #13
 80025f6:	ddd9      	ble.n	80025ac <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3301      	adds	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	ddd0      	ble.n	80025a6 <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 8002604:	200a      	movs	r0, #10
 8002606:	f00b fd03 	bl	800e010 <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 800260a:	4848      	ldr	r0, [pc, #288]	@ (800272c <ADBMS_Print_Vals+0x214>)
 800260c:	f00b fd5e 	bl	800e0cc <puts>
    printf("max temp: %f\t", adbms->max_temp);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff96 	bl	8000548 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4843      	ldr	r0, [pc, #268]	@ (8002730 <ADBMS_Print_Vals+0x218>)
 8002622:	f00b fce3 	bl	800dfec <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff8b 	bl	8000548 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	483f      	ldr	r0, [pc, #252]	@ (8002734 <ADBMS_Print_Vals+0x21c>)
 8002638:	f00b fcd8 	bl	800dfec <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff80 	bl	8000548 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	483a      	ldr	r0, [pc, #232]	@ (8002738 <ADBMS_Print_Vals+0x220>)
 800264e:	f00b fccd 	bl	800dfec <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e023      	b.n	80026a0 <ADBMS_Print_Vals+0x188>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e01a      	b.n	8002694 <ADBMS_Print_Vals+0x17c>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	00da      	lsls	r2, r3, #3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4413      	add	r3, r2
 8002666:	1c5c      	adds	r4, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	00da      	lsls	r2, r3, #3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	336e      	adds	r3, #110	@ 0x6e
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff63 	bl	8000548 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4621      	mov	r1, r4
 8002688:	482c      	ldr	r0, [pc, #176]	@ (800273c <ADBMS_Print_Vals+0x224>)
 800268a:	f00b fcaf 	bl	800dfec <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b07      	cmp	r3, #7
 8002698:	dde1      	ble.n	800265e <ADBMS_Print_Vals+0x146>
    for (int i = 0; i < NUM_CHIPS; i++)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	ddd8      	ble.n	8002658 <ADBMS_Print_Vals+0x140>
        }
    }
    printf("\n");
 80026a6:	200a      	movs	r0, #10
 80026a8:	f00b fcb2 	bl	800e010 <putchar>

    printf("Faults\n");
 80026ac:	4824      	ldr	r0, [pc, #144]	@ (8002740 <ADBMS_Print_Vals+0x228>)
 80026ae:	f00b fd0d 	bl	800e0cc <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 80026b8:	4619      	mov	r1, r3
 80026ba:	4822      	ldr	r0, [pc, #136]	@ (8002744 <ADBMS_Print_Vals+0x22c>)
 80026bc:	f00b fc96 	bl	800dfec <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 80026c6:	4619      	mov	r1, r3
 80026c8:	481f      	ldr	r0, [pc, #124]	@ (8002748 <ADBMS_Print_Vals+0x230>)
 80026ca:	f00b fc8f 	bl	800dfec <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80026d4:	4619      	mov	r1, r3
 80026d6:	481d      	ldr	r0, [pc, #116]	@ (800274c <ADBMS_Print_Vals+0x234>)
 80026d8:	f00b fc88 	bl	800dfec <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80026e2:	4619      	mov	r1, r3
 80026e4:	481a      	ldr	r0, [pc, #104]	@ (8002750 <ADBMS_Print_Vals+0x238>)
 80026e6:	f00b fc81 	bl	800dfec <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80026f0:	4619      	mov	r1, r3
 80026f2:	4818      	ldr	r0, [pc, #96]	@ (8002754 <ADBMS_Print_Vals+0x23c>)
 80026f4:	f00b fc7a 	bl	800dfec <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 80026fe:	4619      	mov	r1, r3
 8002700:	4815      	ldr	r0, [pc, #84]	@ (8002758 <ADBMS_Print_Vals+0x240>)
 8002702:	f00b fc73 	bl	800dfec <iprintf>
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}
 800270e:	bf00      	nop
 8002710:	0800fec8 	.word	0x0800fec8
 8002714:	0800fed4 	.word	0x0800fed4
 8002718:	0800fee4 	.word	0x0800fee4
 800271c:	0800fef0 	.word	0x0800fef0
 8002720:	0800fefc 	.word	0x0800fefc
 8002724:	0800ff08 	.word	0x0800ff08
 8002728:	0800ff18 	.word	0x0800ff18
 800272c:	0800ff24 	.word	0x0800ff24
 8002730:	0800ff2c 	.word	0x0800ff2c
 8002734:	0800ff3c 	.word	0x0800ff3c
 8002738:	0800ff4c 	.word	0x0800ff4c
 800273c:	0800ff5c 	.word	0x0800ff5c
 8002740:	0800ff64 	.word	0x0800ff64
 8002744:	0800ff6c 	.word	0x0800ff6c
 8002748:	0800ff80 	.word	0x0800ff80
 800274c:	0800ff94 	.word	0x0800ff94
 8002750:	0800ffa0 	.word	0x0800ffa0
 8002754:	0800ffb8 	.word	0x0800ffb8
 8002758:	0800ffc8 	.word	0x0800ffc8

0800275c <bms_mainbaord_setup>:
#include "bms.h"

mainboard_ mainboard;

void bms_mainbaord_setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin, ADC_HandleTypeDef *hadc, CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b09c      	sub	sp, #112	@ 0x70
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
	// initialize handles
	mainboard.hadc = hadc;
 800276c:	4a36      	ldr	r2, [pc, #216]	@ (8002848 <bms_mainbaord_setup+0xec>)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f8c2 3238 	str.w	r3, [r2, #568]	@ 0x238
	mainboard.hcan_drive = hcan1;
 8002774:	4a34      	ldr	r2, [pc, #208]	@ (8002848 <bms_mainbaord_setup+0xec>)
 8002776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002778:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	mainboard.hcan_data = hcan2;
 800277c:	4a32      	ldr	r2, [pc, #200]	@ (8002848 <bms_mainbaord_setup+0xec>)
 800277e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002780:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240

	// get offset for current
	mainboard.current_offset = getCurrentOffset(mainboard.hadc);
 8002784:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <bms_mainbaord_setup+0xec>)
 8002786:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fe30 	bl	80033f0 <getCurrentOffset>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
 8002794:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <bms_mainbaord_setup+0xec>)
 8002796:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// initialize ad chip;
	ADBMS_Interface_Initialize(&mainboard.adbms, hspi, csb_pinBank, csb_pin);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	4829      	ldr	r0, [pc, #164]	@ (8002848 <bms_mainbaord_setup+0xec>)
 80027a2:	f7ff f96d 	bl	8001a80 <ADBMS_Interface_Initialize>

	// initialize CAN;
	BMS_Initialize_Can(&mainboard);
 80027a6:	4828      	ldr	r0, [pc, #160]	@ (8002848 <bms_mainbaord_setup+0xec>)
 80027a8:	f000 f96a 	bl	8002a80 <BMS_Initialize_Can>

	// initialize the timers: adbms_mainboard_loop, drive_can, data_can
	timer_ t_adbms = CreateTimer(500, bms_mainboard_loop);
 80027ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027b0:	4a26      	ldr	r2, [pc, #152]	@ (800284c <bms_mainbaord_setup+0xf0>)
 80027b2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fd5c 	bl	8004274 <CreateTimer>
	timer_ t_adbms_owc_check = CreateTimer(30000, adbms_owc_loop);
 80027bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027c0:	4a23      	ldr	r2, [pc, #140]	@ (8002850 <bms_mainbaord_setup+0xf4>)
 80027c2:	f247 5130 	movw	r1, #30000	@ 0x7530
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fd54 	bl	8004274 <CreateTimer>
	timer_ t_drive_can = CreateTimer(100, drive_can_loop);
 80027cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027d0:	4a20      	ldr	r2, [pc, #128]	@ (8002854 <bms_mainbaord_setup+0xf8>)
 80027d2:	2164      	movs	r1, #100	@ 0x64
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fd4d 	bl	8004274 <CreateTimer>
	timer_ t_data_can = CreateTimer(1000, data_can_loop);
 80027da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <bms_mainbaord_setup+0xfc>)
 80027e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fd45 	bl	8004274 <CreateTimer>
	timer_ timers[NUM_TIMERS] = {t_adbms, t_adbms_owc_check, t_drive_can, t_data_can};
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80027f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002800:	ca07      	ldmia	r2, {r0, r1, r2}
 8002802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800280a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800280e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002814:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002818:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800281c:	ca07      	ldmia	r2, {r0, r1, r2}
 800281e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mainboard.tg = CreateTimerGroup(timers);
 8002822:	f107 0310 	add.w	r3, r7, #16
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fd3f 	bl	80042aa <CreateTimerGroup>
 800282c:	4603      	mov	r3, r0
 800282e:	4a06      	ldr	r2, [pc, #24]	@ (8002848 <bms_mainbaord_setup+0xec>)
 8002830:	f8c2 3230 	str.w	r3, [r2, #560]	@ 0x230

	mainboard.start_time = HAL_GetTick();
 8002834:	f001 fe20 	bl	8004478 <HAL_GetTick>
 8002838:	4603      	mov	r3, r0
 800283a:	4a03      	ldr	r2, [pc, #12]	@ (8002848 <bms_mainbaord_setup+0xec>)
 800283c:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
}
 8002840:	bf00      	nop
 8002842:	3770      	adds	r7, #112	@ 0x70
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000300 	.word	0x20000300
 800284c:	08002891 	.word	0x08002891
 8002850:	080028a1 	.word	0x080028a1
 8002854:	08002bb1 	.word	0x08002bb1
 8002858:	08002c21 	.word	0x08002c21

0800285c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) 
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  ADBMS_DMA_Complete(&mainboard.adbms); 
 8002864:	4803      	ldr	r0, [pc, #12]	@ (8002874 <HAL_SPI_TxRxCpltCallback+0x18>)
 8002866:	f7ff fa8f 	bl	8001d88 <ADBMS_DMA_Complete>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000300 	.word	0x20000300

08002878 <tick_mainboard_timers>:

void tick_mainboard_timers()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	TickTimerGroup(mainboard.tg);
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <tick_mainboard_timers+0x14>)
 800287e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fd2a 	bl	80042dc <TickTimerGroup>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000300 	.word	0x20000300

08002890 <bms_mainboard_loop>:

// ADBMS loop that gets ticked
void bms_mainboard_loop()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	UpdateValues();
 8002894:	f000 f80e 	bl	80028b4 <UpdateValues>
	CheckFaults();
 8002898:	f000 f876 	bl	8002988 <CheckFaults>
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}

080028a0 <adbms_owc_loop>:

// Seprate loop that gets ticked to run OWC
void adbms_owc_loop(){ UpdateOWCFault(&mainboard.adbms); }
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <adbms_owc_loop+0x10>)
 80028a6:	f7ff fbb7 	bl	8002018 <UpdateOWCFault>
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000300 	.word	0x20000300

080028b4 <UpdateValues>:

void UpdateValues()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	// ADBMS values
	// ADBMS_UpdateVoltages(&mainboard.adbms);
	// ADBMS_UpdateTemps(&mainboard.adbms);
	ADBMS_Update_Voltages(&mainboard.adbms);
 80028b8:	482f      	ldr	r0, [pc, #188]	@ (8002978 <UpdateValues+0xc4>)
 80028ba:	f7ff fb6c 	bl	8001f96 <ADBMS_Update_Voltages>

	UpdateADInternalFault(&mainboard.adbms);
 80028be:	482e      	ldr	r0, [pc, #184]	@ (8002978 <UpdateValues+0xc4>)
 80028c0:	f7ff f9ee 	bl	8001ca0 <UpdateADInternalFault>

	// update STM32 Pin values
	// reads: shutdown_contactors, IMD_Status, 6822_State
	mainboard.shutdown_present = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); 	   // shutdown status
 80028c4:	2102      	movs	r1, #2
 80028c6:	482d      	ldr	r0, [pc, #180]	@ (800297c <UpdateValues+0xc8>)
 80028c8:	f003 fd74 	bl	80063b4 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <UpdateValues+0xc4>)
 80028da:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251
	mainboard.imd_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			   // IMD_Status
 80028de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e2:	4827      	ldr	r0, [pc, #156]	@ (8002980 <UpdateValues+0xcc>)
 80028e4:	f003 fd66 	bl	80063b4 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <UpdateValues+0xc4>)
 80028f6:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
	mainboard.comms_6822_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);	   // 6822_State
 80028fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028fe:	481f      	ldr	r0, [pc, #124]	@ (800297c <UpdateValues+0xc8>)
 8002900:	f003 fd58 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <UpdateValues+0xc4>)
 8002912:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
	mainboard.charger_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);		   // Charger_Pin
 8002916:	2180      	movs	r1, #128	@ 0x80
 8002918:	4819      	ldr	r0, [pc, #100]	@ (8002980 <UpdateValues+0xcc>)
 800291a:	f003 fd4b 	bl	80063b4 <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <UpdateValues+0xc4>)
 800292c:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253

	// get current
	mainboard.current = getCurrent(mainboard.hadc) - mainboard.current_offset;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <UpdateValues+0xc4>)
 8002932:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fcea 	bl	8003310 <getCurrent>
 800293c:	eeb0 7a40 	vmov.f32	s14, s0
 8002940:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <UpdateValues+0xc4>)
 8002942:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <UpdateValues+0xc4>)
 800294c:	edc3 7a92 	vstr	s15, [r3, #584]	@ 0x248
	mainboard.overcurrent_fault = mainboard.current > OVERCURRENT;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <UpdateValues+0xc4>)
 8002952:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8002956:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002984 <UpdateValues+0xd0>
 800295a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	bfcc      	ite	gt
 8002964:	2301      	movgt	r3, #1
 8002966:	2300      	movle	r3, #0
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <UpdateValues+0xc4>)
 800296c:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250

	if(ENABLE_PRINTF_DEBUG_COMMS) send_data_over_printf(); 
 8002970:	f000 f870 	bl	8002a54 <send_data_over_printf>
	if(ENABLE_USB_COMMS) send_data_over_USB(); 
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000300 	.word	0x20000300
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	43070000 	.word	0x43070000

08002988 <CheckFaults>:

void CheckFaults()
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	// raise fault flag if any fault is true
	// faults are latching
	mainboard.bms_fault = mainboard.bms_fault 
 800298c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a48 <CheckFaults+0xc0>)
 800298e:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
							|| mainboard.adbms.overtemperature_fault_
							|| mainboard.adbms.undertemperature_fault_
							|| mainboard.adbms.openwire_fault_
							|| mainboard.adbms.openwire_temp_fault_
							|| mainboard.adbms.pec_fault_
							|| mainboard.overcurrent_fault;
 8002992:	2b00      	cmp	r3, #0
 8002994:	d127      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.overvoltage_fault_
 8002996:	4b2c      	ldr	r3, [pc, #176]	@ (8002a48 <CheckFaults+0xc0>)
 8002998:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 800299c:	2b00      	cmp	r3, #0
 800299e:	d122      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.undervoltage_fault_
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <CheckFaults+0xc0>)
 80029a2:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.overtemperature_fault_
 80029aa:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <CheckFaults+0xc0>)
 80029ac:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d118      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.undertemperature_fault_
 80029b4:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <CheckFaults+0xc0>)
 80029b6:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d113      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_fault_
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <CheckFaults+0xc0>)
 80029c0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10e      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_temp_fault_
 80029c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <CheckFaults+0xc0>)
 80029ca:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.adbms.pec_fault_
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <CheckFaults+0xc0>)
 80029d4:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <CheckFaults+0x5e>
							|| mainboard.overcurrent_fault;
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <CheckFaults+0xc0>)
 80029de:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <CheckFaults+0x62>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <CheckFaults+0x64>
 80029ea:	2300      	movs	r3, #0
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	b2da      	uxtb	r2, r3
	mainboard.bms_fault = mainboard.bms_fault 
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <CheckFaults+0xc0>)
 80029f4:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245

	// write BMS_Status - healthy is high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !mainboard.bms_fault);
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <CheckFaults+0xc0>)
 80029fa:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a0a:	4810      	ldr	r0, [pc, #64]	@ (8002a4c <CheckFaults+0xc4>)
 8002a0c:	f003 fcea 	bl	80063e4 <HAL_GPIO_WritePin>


	// set external faults
	mainboard.external_fault = !mainboard.shutdown_present;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <CheckFaults+0xc0>)
 8002a12:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <CheckFaults+0xc0>)
 8002a2e:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244

	// Turns on external LED if external fault
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, mainboard.external_fault);
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <CheckFaults+0xc0>)
 8002a34:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	4804      	ldr	r0, [pc, #16]	@ (8002a50 <CheckFaults+0xc8>)
 8002a3e:	f003 fcd1 	bl	80063e4 <HAL_GPIO_WritePin>

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000300 	.word	0x20000300
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020400 	.word	0x40020400

08002a54 <send_data_over_printf>:

void send_data_over_printf()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	// AD Prints
	ADBMS_Print_Vals(&mainboard.adbms);
 8002a58:	4807      	ldr	r0, [pc, #28]	@ (8002a78 <send_data_over_printf+0x24>)
 8002a5a:	f7ff fd5d 	bl	8002518 <ADBMS_Print_Vals>

	// Mainboard Prints
	printf("Time: %d\n", (int)(HAL_GetTick() - mainboard.start_time));
 8002a5e:	f001 fd0b 	bl	8004478 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <send_data_over_printf+0x24>)
 8002a66:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <send_data_over_printf+0x28>)
 8002a70:	f00b fabc 	bl	800dfec <iprintf>
//	printf("External fault: %d\n", mainboard.external_fault);
//	printf("Current: %f\n", mainboard.current);
	
	// TODO Add more prints as needed

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000300 	.word	0x20000300
 8002a7c:	08010068 	.word	0x08010068

08002a80 <BMS_Initialize_Can>:
#include "bms_can.h"

bms_can_ bms_can;

void BMS_Initialize_Can(mainboard_ *mainboard)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	// Start CAN
	bms_can.mainboard = mainboard;
 8002a88:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
	HAL_CAN_Start(bms_can.mainboard->hcan_drive);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fafa 	bl	8005090 <HAL_CAN_Start>
	HAL_CAN_Start(bms_can.mainboard->hcan_data);
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 faf3 	bl	8005090 <HAL_CAN_Start>

	// Enable notifications (interrupts) for CAN, uses FIFO scheduling to receive msgs
	HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_drive, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002aaa:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 fbff 	bl	80052b8 <HAL_CAN_ActivateNotification>
	// HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_data, CAN_IT_RX_FIFO0_MSG_PENDING);	// Don't need to read Data CAN

	// SOC header initialization
	bms_can.TxHeaderSOC_.StdId = 0x150;
 8002aba:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002abc:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
	bms_can.TxHeaderSOC_.IDE = CAN_ID_STD;
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	635a      	str	r2, [r3, #52]	@ 0x34
	bms_can.TxHeaderSOC_.RTR = CAN_RTR_DATA;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
	bms_can.TxHeaderSOC_.DLC = 8; // we're sending 8 bytes of data for SOE
 8002ace:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Faults header initialization
	bms_can.TxHeaderFaults_.StdId = 0x151;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002ad6:	f240 1251 	movw	r2, #337	@ 0x151
 8002ada:	64da      	str	r2, [r3, #76]	@ 0x4c
	bms_can.TxHeaderFaults_.IDE = CAN_ID_STD;
 8002adc:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
	bms_can.TxHeaderFaults_.RTR = CAN_RTR_DATA;
 8002ae2:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	659a      	str	r2, [r3, #88]	@ 0x58
	bms_can.TxHeaderFaults_.DLC = 8;
 8002ae8:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002aea:	2208      	movs	r2, #8
 8002aec:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Status header initialization
	bms_can.TxHeaderStatus_.StdId = 0x152;
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002af0:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8002af4:	66da      	str	r2, [r3, #108]	@ 0x6c
	bms_can.TxHeaderStatus_.IDE = CAN_ID_STD;
 8002af6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	675a      	str	r2, [r3, #116]	@ 0x74
	bms_can.TxHeaderStatus_.RTR = CAN_RTR_DATA;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	679a      	str	r2, [r3, #120]	@ 0x78
	bms_can.TxHeaderStatus_.DLC = 8;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b04:	2208      	movs	r2, #8
 8002b06:	67da      	str	r2, [r3, #124]	@ 0x7c

	// Charger header initialization
	bms_can.TxHeaderCharger_.ExtId = 0x1806E5F4;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <BMS_Initialize_Can+0xf8>)
 8002b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	bms_can.TxHeaderCharger_.IDE = CAN_ID_EXT;
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b12:	2204      	movs	r2, #4
 8002b14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	bms_can.TxHeaderCharger_.RTR = CAN_RTR_DATA;
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	bms_can.TxHeaderCharger_.DLC = 8;
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b22:	2208      	movs	r2, #8
 8002b24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	// Voltages header initialization
	bms_can.TxHeaderVoltages_.StdId = 0x153;
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b2a:	f240 1253 	movw	r2, #339	@ 0x153
 8002b2e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	bms_can.TxHeaderVoltages_.IDE = CAN_ID_STD;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	bms_can.TxHeaderVoltages_.RTR = CAN_RTR_DATA;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	bms_can.TxHeaderVoltages_.DLC = 8;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b44:	2208      	movs	r2, #8
 8002b46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Temperatures header initialization
	bms_can.TxHeaderTemperatures_.StdId = 0x167;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b4c:	f240 1267 	movw	r2, #359	@ 0x167
 8002b50:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	bms_can.TxHeaderTemperatures_.IDE = CAN_ID_STD;
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	bms_can.TxHeaderTemperatures_.RTR = CAN_RTR_DATA;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	bms_can.TxHeaderTemperatures_.DLC = 8;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <BMS_Initialize_Can+0xf4>)
 8002b66:	2208      	movs	r2, #8
 8002b68:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000055c 	.word	0x2000055c
 8002b78:	1806e5f4 	.word	0x1806e5f4

08002b7c <send_can_messages>:

uint8_t send_can_messages(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *TxHeader, uint8_t *data, uint32_t *TxMailBox)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
	// send msg
	HAL_StatusTypeDef msg_status = HAL_CAN_AddTxMessage(hcan, TxHeader, data, TxMailBox);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f002 fac1 	bl	8005118 <HAL_CAN_AddTxMessage>
 8002b96:	4603      	mov	r3, r0
 8002b98:	75fb      	strb	r3, [r7, #23]

	if (msg_status != HAL_OK)
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <send_can_messages+0x28>
	{
		// Error handling
//		printf("CAN Message failed\n");
		return 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <send_can_messages+0x2a>
	}
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <drive_can_loop>:

void drive_can_loop()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	// printf("Sending Drive CAN\n");

	// update and send soc
	populateBMS_SOC(bms_can.txDataSOC_);
 8002bb4:	4812      	ldr	r0, [pc, #72]	@ (8002c00 <drive_can_loop+0x50>)
 8002bb6:	f000 f88b 	bl	8002cd0 <populateBMS_SOC>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderSOC_, bms_can.txDataSOC_, &bms_can.TxMailBox_);
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <drive_can_loop+0x54>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <drive_can_loop+0x58>)
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c00 <drive_can_loop+0x50>)
 8002bc6:	4911      	ldr	r1, [pc, #68]	@ (8002c0c <drive_can_loop+0x5c>)
 8002bc8:	f7ff ffd8 	bl	8002b7c <send_can_messages>

	// update and send faults
	populateBMS_Faults(bms_can.txDataFaults_);
 8002bcc:	4810      	ldr	r0, [pc, #64]	@ (8002c10 <drive_can_loop+0x60>)
 8002bce:	f000 f903 	bl	8002dd8 <populateBMS_Faults>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderFaults_, bms_can.txDataFaults_, &bms_can.TxMailBox_);
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <drive_can_loop+0x54>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002bda:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <drive_can_loop+0x58>)
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c10 <drive_can_loop+0x60>)
 8002bde:	490d      	ldr	r1, [pc, #52]	@ (8002c14 <drive_can_loop+0x64>)
 8002be0:	f7ff ffcc 	bl	8002b7c <send_can_messages>

	// update and send status
	populateBMS_Status(bms_can.txDataStatus_);
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <drive_can_loop+0x68>)
 8002be6:	f000 f9ed 	bl	8002fc4 <populateBMS_Status>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderStatus_, bms_can.txDataStatus_, &bms_can.TxMailBox_);
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <drive_can_loop+0x54>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002bf2:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <drive_can_loop+0x58>)
 8002bf4:	4a08      	ldr	r2, [pc, #32]	@ (8002c18 <drive_can_loop+0x68>)
 8002bf6:	4909      	ldr	r1, [pc, #36]	@ (8002c1c <drive_can_loop+0x6c>)
 8002bf8:	f7ff ffc0 	bl	8002b7c <send_can_messages>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200005a0 	.word	0x200005a0
 8002c04:	2000055c 	.word	0x2000055c
 8002c08:	20000560 	.word	0x20000560
 8002c0c:	20000588 	.word	0x20000588
 8002c10:	200005c0 	.word	0x200005c0
 8002c14:	200005a8 	.word	0x200005a8
 8002c18:	200005e0 	.word	0x200005e0
 8002c1c:	200005c8 	.word	0x200005c8

08002c20 <data_can_loop>:

void data_can_loop()
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
	// send voltage messages
	bms_can.TxHeaderVoltages_.StdId = 0x153; // set the message id for next iteration
 8002c26:	4b24      	ldr	r3, [pc, #144]	@ (8002cb8 <data_can_loop+0x98>)
 8002c28:	f240 1253 	movw	r2, #339	@ 0x153
 8002c2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002c30:	2300      	movs	r3, #0
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	e016      	b.n	8002c64 <data_can_loop+0x44>
		populateBMS_VoltageMessages(bms_can.txDataVoltages_, i);
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4820      	ldr	r0, [pc, #128]	@ (8002cbc <data_can_loop+0x9c>)
 8002c3a:	f000 fa77 	bl	800312c <populateBMS_VoltageMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderVoltages_, bms_can.txDataVoltages_, &bms_can.TxMailBox_);
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <data_can_loop+0x98>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <data_can_loop+0xa0>)
 8002c48:	4a1c      	ldr	r2, [pc, #112]	@ (8002cbc <data_can_loop+0x9c>)
 8002c4a:	491e      	ldr	r1, [pc, #120]	@ (8002cc4 <data_can_loop+0xa4>)
 8002c4c:	f7ff ff96 	bl	8002b7c <send_can_messages>
		bms_can.TxHeaderVoltages_.StdId++;
 8002c50:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <data_can_loop+0x98>)
 8002c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <data_can_loop+0x98>)
 8002c5a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3301      	adds	r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	dde5      	ble.n	8002c36 <data_can_loop+0x16>
	}

	// send temperature messages
	bms_can.TxHeaderTemperatures_.StdId = 0x167; // set the message id for next iteration
 8002c6a:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <data_can_loop+0x98>)
 8002c6c:	f240 1267 	movw	r2, #359	@ 0x167
 8002c70:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	e016      	b.n	8002ca8 <data_can_loop+0x88>
		populateBMS_TemperatureMessages(bms_can.txDataTemperatures_, i);
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	4812      	ldr	r0, [pc, #72]	@ (8002cc8 <data_can_loop+0xa8>)
 8002c7e:	f000 fad7 	bl	8003230 <populateBMS_TemperatureMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderTemperatures_, bms_can.txDataTemperatures_, &bms_can.TxMailBox_);
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <data_can_loop+0x98>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <data_can_loop+0xa0>)
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <data_can_loop+0xa8>)
 8002c8e:	490f      	ldr	r1, [pc, #60]	@ (8002ccc <data_can_loop+0xac>)
 8002c90:	f7ff ff74 	bl	8002b7c <send_can_messages>
		bms_can.TxHeaderTemperatures_.StdId++;
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <data_can_loop+0x98>)
 8002c96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a06      	ldr	r2, [pc, #24]	@ (8002cb8 <data_can_loop+0x98>)
 8002c9e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	dde5      	ble.n	8002c7a <data_can_loop+0x5a>
	}
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000055c 	.word	0x2000055c
 8002cbc:	20000620 	.word	0x20000620
 8002cc0:	20000560 	.word	0x20000560
 8002cc4:	20000608 	.word	0x20000608
 8002cc8:	20000640 	.word	0x20000640
 8002ccc:	20000628 	.word	0x20000628

08002cd0 <populateBMS_SOC>:

void populateBMS_SOC(uint8_t *data)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b0a9      	sub	sp, #164	@ 0xa4
 8002cd4:	af12      	add	r7, sp, #72	@ 0x48
 8002cd6:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[5];
	populateRawMessage(&signals[0], 0, 12, 0.1, 0);									  // max discharge current
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002ce0:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002dc8 <populateBMS_SOC+0xf8>
 8002ce4:	210c      	movs	r1, #12
 8002ce6:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fec4 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[1], 0, 12, 0.1, 0);									  // max regen current
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002cfa:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002dc8 <populateBMS_SOC+0xf8>
 8002cfe:	210c      	movs	r1, #12
 8002d00:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 feb7 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.total_v, 16, 0.01, 0);   // battery voltage
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <populateBMS_SOC+0xfc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	3320      	adds	r3, #32
 8002d18:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002d1c:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8002dd0 <populateBMS_SOC+0x100>
 8002d20:	2110      	movs	r1, #16
 8002d22:	eeb0 0a67 	vmov.f32	s0, s15
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fea6 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.avg_temp, 8, 1, -40);    // battery temp
 8002d2c:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <populateBMS_SOC+0xfc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	3330      	adds	r3, #48	@ 0x30
 8002d3a:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8002dd4 <populateBMS_SOC+0x104>
 8002d3e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002d42:	2108      	movs	r1, #8
 8002d44:	eeb0 0a67 	vmov.f32	s0, s15
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fe95 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->current, 16, 0.01, 0);		  // battery current
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <populateBMS_SOC+0xfc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	3340      	adds	r3, #64	@ 0x40
 8002d5c:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002dc4 <populateBMS_SOC+0xf4>
 8002d60:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8002dd0 <populateBMS_SOC+0x100>
 8002d64:	2110      	movs	r1, #16
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fe84 	bl	8003a78 <populateRawMessage>
	encodeSignals(data, 5, signals[0], signals[1], signals[2], signals[3], signals[4]);
 8002d70:	ac0e      	add	r4, sp, #56	@ 0x38
 8002d72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d7c:	ac0a      	add	r4, sp, #40	@ 0x28
 8002d7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d88:	ac06      	add	r4, sp, #24
 8002d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d94:	ac02      	add	r4, sp, #8
 8002d96:	f107 0318 	add.w	r3, r7, #24
 8002d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002da0:	466a      	mov	r2, sp
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002daa:	e882 0003 	stmia.w	r2, {r0, r1}
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	cb0c      	ldmia	r3, {r2, r3}
 8002db4:	2105      	movs	r1, #5
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 febd 	bl	8003b36 <encodeSignals>
}
 8002dbc:	bf00      	nop
 8002dbe:	375c      	adds	r7, #92	@ 0x5c
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	3dcccccd 	.word	0x3dcccccd
 8002dcc:	2000055c 	.word	0x2000055c
 8002dd0:	3c23d70a 	.word	0x3c23d70a
 8002dd4:	c2200000 	.word	0xc2200000

08002dd8 <populateBMS_Faults>:

void populateBMS_Faults(uint8_t *data)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b0c1      	sub	sp, #260	@ 0x104
 8002ddc:	af1e      	add	r7, sp, #120	@ 0x78
 8002dde:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[8];
	populateRawMessage(&signals[0], bms_can.mainboard->bms_fault, 1, 1, 0);																  	// fault summary
 8002de0:	4b76      	ldr	r3, [pc, #472]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002df8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fe38 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->adbms.undervoltage_fault_, 1, 1, 0);												  	// undervoltage fault
 8002e08:	4b6c      	ldr	r3, [pc, #432]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	3310      	adds	r3, #16
 8002e1e:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002e22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e26:	2101      	movs	r1, #1
 8002e28:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fe23 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.overvoltage_fault_, 1, 1, 0);												   	// overvoltage fault
 8002e32:	4b62      	ldr	r3, [pc, #392]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	f107 0308 	add.w	r3, r7, #8
 8002e46:	3320      	adds	r3, #32
 8002e48:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002e4c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e50:	2101      	movs	r1, #1
 8002e52:	eeb0 0a67 	vmov.f32	s0, s15
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fe0e 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.undertemperature_fault_, 1, 1, 0);												// undertemp fault
 8002e5c:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	3330      	adds	r3, #48	@ 0x30
 8002e72:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002e76:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fdf9 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.overtemperature_fault_, 1, 1, 0);											 	// overemp fault
 8002e86:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	3340      	adds	r3, #64	@ 0x40
 8002e9c:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002ea0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fde4 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->overcurrent_fault, 1, 1, 0);														 	// overcurrent fault
 8002eb0:	4b42      	ldr	r3, [pc, #264]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	3350      	adds	r3, #80	@ 0x50
 8002ec6:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002eca:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ece:	2101      	movs	r1, #1
 8002ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fdcf 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[6], bms_can.mainboard->external_fault, 1, 1, 0);													   			// external fault
 8002eda:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	3360      	adds	r3, #96	@ 0x60
 8002ef0:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002ef4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ef8:	2101      	movs	r1, #1
 8002efa:	eeb0 0a67 	vmov.f32	s0, s15
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fdba 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[7], (bms_can.mainboard->adbms.openwire_fault_ || bms_can.mainboard->adbms.openwire_temp_fault_), 1, 1, 0);	// open wire fault
 8002f04:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <populateBMS_Faults+0x144>
 8002f10:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <populateBMS_Faults+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <populateBMS_Faults+0x148>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <populateBMS_Faults+0x14a>
 8002f20:	2300      	movs	r3, #0
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	3370      	adds	r3, #112	@ 0x70
 8002f30:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8002fc0 <populateBMS_Faults+0x1e8>
 8002f34:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd9a 	bl	8003a78 <populateRawMessage>
	encodeSignals(data, 8, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8002f44:	ac1a      	add	r4, sp, #104	@ 0x68
 8002f46:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f50:	ac16      	add	r4, sp, #88	@ 0x58
 8002f52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f5c:	ac12      	add	r4, sp, #72	@ 0x48
 8002f5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f68:	ac0e      	add	r4, sp, #56	@ 0x38
 8002f6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f74:	ac0a      	add	r4, sp, #40	@ 0x28
 8002f76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f80:	ac06      	add	r4, sp, #24
 8002f82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f8c:	ac02      	add	r4, sp, #8
 8002f8e:	f107 0318 	add.w	r3, r7, #24
 8002f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f98:	466a      	mov	r2, sp
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fa2:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	cb0c      	ldmia	r3, {r2, r3}
 8002fac:	2108      	movs	r1, #8
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fdc1 	bl	8003b36 <encodeSignals>
}
 8002fb4:	bf00      	nop
 8002fb6:	378c      	adds	r7, #140	@ 0x8c
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd90      	pop	{r4, r7, pc}
 8002fbc:	2000055c 	.word	0x2000055c
 8002fc0:	00000000 	.word	0x00000000

08002fc4 <populateBMS_Status>:

void populateBMS_Status(uint8_t *data)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0b9      	sub	sp, #228	@ 0xe4
 8002fc8:	af1a      	add	r7, sp, #104	@ 0x68
 8002fca:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[7];

	populateRawMessage(&signals[0], 0, 8, 1, 0);		 // BMS State
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800311c <populateBMS_Status+0x158>
 8002fd4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002fd8:	2108      	movs	r1, #8
 8002fda:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 800311c <populateBMS_Status+0x158>
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fd4a 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->imd_status, 8, 1, 0);		 // IMD State
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8003120 <populateBMS_Status+0x15c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800311c <populateBMS_Status+0x158>
 8002ffe:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003002:	2108      	movs	r1, #8
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd35 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.max_temp, 8, 1, -40);   // max cell temp
 800300e:	4b44      	ldr	r3, [pc, #272]	@ (8003120 <populateBMS_Status+0x15c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	3320      	adds	r3, #32
 800301c:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 8003124 <populateBMS_Status+0x160>
 8003020:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003024:	2108      	movs	r1, #8
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd24 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.min_temp, 8, 1, -40);   // min cell temp
 8003030:	4b3b      	ldr	r3, [pc, #236]	@ (8003120 <populateBMS_Status+0x15c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	3330      	adds	r3, #48	@ 0x30
 800303e:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8003124 <populateBMS_Status+0x160>
 8003042:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003046:	2108      	movs	r1, #8
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fd13 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.max_v, 8, 0.012, 2);	 // max cell voltage
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <populateBMS_Status+0x15c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	3340      	adds	r3, #64	@ 0x40
 8003060:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003064:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8003128 <populateBMS_Status+0x164>
 8003068:	2108      	movs	r1, #8
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fd02 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->adbms.min_v, 8, 0.012, 2);	 // min cell voltage
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <populateBMS_Status+0x15c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	3350      	adds	r3, #80	@ 0x50
 8003082:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003086:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003128 <populateBMS_Status+0x164>
 800308a:	2108      	movs	r1, #8
 800308c:	eeb0 0a67 	vmov.f32	s0, s15
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fcf1 	bl	8003a78 <populateRawMessage>
	populateRawMessage(&signals[6], 0, 8, 0.5, 0);									 // BMS SOC
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	3360      	adds	r3, #96	@ 0x60
 800309c:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 800311c <populateBMS_Status+0x158>
 80030a0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80030a4:	2108      	movs	r1, #8
 80030a6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800311c <populateBMS_Status+0x158>
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fce4 	bl	8003a78 <populateRawMessage>
	encodeSignals(data, 7, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6]);
 80030b0:	ac16      	add	r4, sp, #88	@ 0x58
 80030b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030bc:	ac12      	add	r4, sp, #72	@ 0x48
 80030be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030c8:	ac0e      	add	r4, sp, #56	@ 0x38
 80030ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030d4:	ac0a      	add	r4, sp, #40	@ 0x28
 80030d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030e0:	ac06      	add	r4, sp, #24
 80030e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030ec:	ac02      	add	r4, sp, #8
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030f8:	466a      	mov	r2, sp
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003102:	e882 0003 	stmia.w	r2, {r0, r1}
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	cb0c      	ldmia	r3, {r2, r3}
 800310c:	2107      	movs	r1, #7
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fd11 	bl	8003b36 <encodeSignals>
}
 8003114:	bf00      	nop
 8003116:	377c      	adds	r7, #124	@ 0x7c
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	00000000 	.word	0x00000000
 8003120:	2000055c 	.word	0x2000055c
 8003124:	c2200000 	.word	0xc2200000
 8003128:	3c449ba6 	.word	0x3c449ba6

0800312c <populateBMS_VoltageMessages>:


void populateBMS_VoltageMessages(uint8_t *data, int volt_msg_num)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b0c3      	sub	sp, #268	@ 0x10c
 8003130:	af1e      	add	r7, sp, #120	@ 0x78
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800313c:	e022      	b.n	8003184 <populateBMS_VoltageMessages+0x58>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.voltages[volt_msg_num * NUM_DATA_CAN_VOLTAGES_PER_MSG + i], 8, 0.012, 2);
 800313e:	f107 0208 	add.w	r2, r7, #8
 8003142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	18d0      	adds	r0, r2, r3
 800314a:	4b35      	ldr	r3, [pc, #212]	@ (8003220 <populateBMS_VoltageMessages+0xf4>)
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9a      	subs	r2, r3, r2
 8003156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800315a:	4413      	add	r3, r2
 800315c:	3352      	adds	r3, #82	@ 0x52
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3304      	adds	r3, #4
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800316c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8003224 <populateBMS_VoltageMessages+0xf8>
 8003170:	2108      	movs	r1, #8
 8003172:	eeb0 0a67 	vmov.f32	s0, s15
 8003176:	f000 fc7f 	bl	8003a78 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800317e:	3301      	adds	r3, #1
 8003180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003188:	2b06      	cmp	r3, #6
 800318a:	ddd8      	ble.n	800313e <populateBMS_VoltageMessages+0x12>
	}
	populateRawMessage(&signals[7], 0, 8, 0.004, 0);	// OCV msg that is legacy from BQ code and only included for backwards compatibility
 800318c:	f107 0308 	add.w	r3, r7, #8
 8003190:	3370      	adds	r3, #112	@ 0x70
 8003192:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8003228 <populateBMS_VoltageMessages+0xfc>
 8003196:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800322c <populateBMS_VoltageMessages+0x100>
 800319a:	2108      	movs	r1, #8
 800319c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003228 <populateBMS_VoltageMessages+0xfc>
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc69 	bl	8003a78 <populateRawMessage>
	// num_per_msg + 1 because includes the added OCV msg
	encodeSignals(data, NUM_DATA_CAN_VOLTAGES_PER_MSG+1, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 80031a6:	ac1a      	add	r4, sp, #104	@ 0x68
 80031a8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80031ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031b2:	ac16      	add	r4, sp, #88	@ 0x58
 80031b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80031b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031be:	ac12      	add	r4, sp, #72	@ 0x48
 80031c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80031c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031ca:	ac0e      	add	r4, sp, #56	@ 0x38
 80031cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80031d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031d6:	ac0a      	add	r4, sp, #40	@ 0x28
 80031d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031e2:	ac06      	add	r4, sp, #24
 80031e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031ee:	ac02      	add	r4, sp, #8
 80031f0:	f107 0318 	add.w	r3, r7, #24
 80031f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80031fa:	466a      	mov	r2, sp
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003204:	e882 0003 	stmia.w	r2, {r0, r1}
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	cb0c      	ldmia	r3, {r2, r3}
 800320e:	2108      	movs	r1, #8
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fc90 	bl	8003b36 <encodeSignals>
}
 8003216:	bf00      	nop
 8003218:	3794      	adds	r7, #148	@ 0x94
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	2000055c 	.word	0x2000055c
 8003224:	3c449ba6 	.word	0x3c449ba6
 8003228:	00000000 	.word	0x00000000
 800322c:	3b83126f 	.word	0x3b83126f

08003230 <populateBMS_TemperatureMessages>:

void populateBMS_TemperatureMessages(uint8_t *data, int temp_num)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b0c3      	sub	sp, #268	@ 0x10c
 8003234:	af1e      	add	r7, sp, #120	@ 0x78
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003240:	e020      	b.n	8003284 <populateBMS_TemperatureMessages+0x54>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.temperatures[temp_num * NUM_DATA_CAN_TEMPS_PER_MSG + i], 8, 1, -40);
 8003242:	f107 0208 	add.w	r2, r7, #8
 8003246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	18d0      	adds	r0, r2, r3
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <populateBMS_TemperatureMessages+0xd4>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	00d9      	lsls	r1, r3, #3
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325a:	440b      	add	r3, r1
 800325c:	336e      	adds	r3, #110	@ 0x6e
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8003308 <populateBMS_TemperatureMessages+0xd8>
 800326c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003270:	2108      	movs	r1, #8
 8003272:	eeb0 0a67 	vmov.f32	s0, s15
 8003276:	f000 fbff 	bl	8003a78 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327e:	3301      	adds	r3, #1
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003288:	2b07      	cmp	r3, #7
 800328a:	ddda      	ble.n	8003242 <populateBMS_TemperatureMessages+0x12>
	}
	encodeSignals(data, NUM_DATA_CAN_TEMPS_PER_MSG, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 800328c:	ac1a      	add	r4, sp, #104	@ 0x68
 800328e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003298:	ac16      	add	r4, sp, #88	@ 0x58
 800329a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800329e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032a4:	ac12      	add	r4, sp, #72	@ 0x48
 80032a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80032aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032b0:	ac0e      	add	r4, sp, #56	@ 0x38
 80032b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032bc:	ac0a      	add	r4, sp, #40	@ 0x28
 80032be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032c8:	ac06      	add	r4, sp, #24
 80032ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032d4:	ac02      	add	r4, sp, #8
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032e0:	466a      	mov	r2, sp
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	cb0c      	ldmia	r3, {r2, r3}
 80032f4:	2108      	movs	r1, #8
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fc1d 	bl	8003b36 <encodeSignals>
}
 80032fc:	bf00      	nop
 80032fe:	3794      	adds	r7, #148	@ 0x94
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	2000055c 	.word	0x2000055c
 8003308:	c2200000 	.word	0xc2200000
 800330c:	00000000 	.word	0x00000000

08003310 <getCurrent>:
#include "current_driver.h"

float getCurrent(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    // Start ADC and poll it
	HAL_ADC_Start(hadc);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f001 f921 	bl	8004560 <HAL_ADC_Start>
	HAL_StatusTypeDef adc_poll_status = HAL_ADC_PollForConversion(hadc, 5000);
 800331e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 fa21 	bl	800476a <HAL_ADC_PollForConversion>
 8003328:	4603      	mov	r3, r0
 800332a:	77fb      	strb	r3, [r7, #31]

    // lazy handling of adc polling
    if(adc_poll_status != HAL_OK){
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <getCurrent+0x32>
    	HAL_ADC_Stop(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f001 f9e6 	bl	8004704 <HAL_ADC_Stop>
    	printf("current is not OK\n");
 8003338:	482b      	ldr	r0, [pc, #172]	@ (80033e8 <getCurrent+0xd8>)
 800333a:	f00a fec7 	bl	800e0cc <puts>
        return -1;
 800333e:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <getCurrent+0xdc>)
 8003340:	e03d      	b.n	80033be <getCurrent+0xae>
    }

    // take 12 bit adc and convert into volts
    float raw_current = ((float) HAL_ADC_GetValue(hadc));
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 fa9c 	bl	8004880 <HAL_ADC_GetValue>
 8003348:	ee07 0a90 	vmov	s15, r0
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	edc7 7a06 	vstr	s15, [r7, #24]
	float current_adc_voltage = raw_current*3.3/4095;
 8003354:	69b8      	ldr	r0, [r7, #24]
 8003356:	f7fd f8f7 	bl	8000548 <__aeabi_f2d>
 800335a:	a31d      	add	r3, pc, #116	@ (adr r3, 80033d0 <getCurrent+0xc0>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fd f94a 	bl	80005f8 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	a31a      	add	r3, pc, #104	@ (adr r3, 80033d8 <getCurrent+0xc8>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd fa6b 	bl	800084c <__aeabi_ddiv>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f7fd fc13 	bl	8000ba8 <__aeabi_d2f>
 8003382:	4603      	mov	r3, r0
 8003384:	617b      	str	r3, [r7, #20]
	// i = v/r
	// Offset of 1.25V so can read both positive and negative current
	// where negative current is charging and positive is discharging
	// (adc_voltage - 1.65V) / (diff-op-amp gain of 2 * iso amp fixed gain of 41 (AMC3302DWE))
	// shunt resistance = 100u Ohms (SH6918F500BHEP)
	float current_adc_offset = current_adc_voltage - 1.25;
 8003386:	edd7 7a05 	vldr	s15, [r7, #20]
 800338a:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 800338e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003392:	edc7 7a04 	vstr	s15, [r7, #16]
	float current = current_adc_offset/(2*41*0.0001);
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	f7fd f8d6 	bl	8000548 <__aeabi_f2d>
 800339c:	a310      	add	r3, pc, #64	@ (adr r3, 80033e0 <getCurrent+0xd0>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd fa53 	bl	800084c <__aeabi_ddiv>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fbfb 	bl	8000ba8 <__aeabi_d2f>
 80033b2:	4603      	mov	r3, r0
 80033b4:	60fb      	str	r3, [r7, #12]

    // Stop ADC
	HAL_ADC_Stop(hadc);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 f9a4 	bl	8004704 <HAL_ADC_Stop>
    return current;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	f3af 8000 	nop.w
 80033d0:	66666666 	.word	0x66666666
 80033d4:	400a6666 	.word	0x400a6666
 80033d8:	00000000 	.word	0x00000000
 80033dc:	40affe00 	.word	0x40affe00
 80033e0:	5e9e1b09 	.word	0x5e9e1b09
 80033e4:	3f80cb29 	.word	0x3f80cb29
 80033e8:	08010080 	.word	0x08010080
 80033ec:	bf800000 	.word	0xbf800000

080033f0 <getCurrentOffset>:


float getCurrentOffset(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	float total_current = 0;
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	e00d      	b.n	8003420 <getCurrentOffset+0x30>
		total_current += getCurrent(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ff83 	bl	8003310 <getCurrent>
 800340a:	eeb0 7a40 	vmov.f32	s14, s0
 800340e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003416:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b09      	cmp	r3, #9
 8003424:	ddee      	ble.n	8003404 <getCurrentOffset+0x14>
	}
	return total_current / NUM_CURRENT_OFFSET_CYCLES;
 8003426:	edd7 7a03 	vldr	s15, [r7, #12]
 800342a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800342e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003432:	eef0 7a66 	vmov.f32	s15, s13
}
 8003436:	eeb0 0a67 	vmov.f32	s0, s15
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003448:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800344c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003458:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800345c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003460:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003468:	e000      	b.n	800346c <ITM_SendChar+0x2c>
    {
      __NOP();
 800346a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800346c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f9      	beq.n	800346a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003476:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003480:	687b      	ldr	r3, [r7, #4]
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e009      	b.n	80034b4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ffc9 	bl	8003440 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	3301      	adds	r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dbf1      	blt.n	80034a0 <_write+0x12>
	}
	return len;
 80034bc:	687b      	ldr	r3, [r7, #4]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ce:	f000 ff6d 	bl	80043ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034d2:	f000 f837 	bl	8003544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034d6:	f000 fa23 	bl	8003920 <MX_GPIO_Init>
  MX_DMA_Init();
 80034da:	f000 f9f9 	bl	80038d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80034de:	f000 f89b 	bl	8003618 <MX_ADC1_Init>
  MX_TIM2_Init();
 80034e2:	f000 f9a9 	bl	8003838 <MX_TIM2_Init>
  MX_CAN1_Init();
 80034e6:	f000 f8e9 	bl	80036bc <MX_CAN1_Init>
  MX_CAN2_Init();
 80034ea:	f000 f939 	bl	8003760 <MX_CAN2_Init>
  MX_SPI1_Init();
 80034ee:	f000 f96d 	bl	80037cc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80034f2:	f009 fab9 	bl	800ca68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 80034f6:	2005      	movs	r0, #5
 80034f8:	f000 ffca 	bl	8004490 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80034fc:	2201      	movs	r2, #1
 80034fe:	2120      	movs	r1, #32
 8003500:	4809      	ldr	r0, [pc, #36]	@ (8003528 <main+0x60>)
 8003502:	f002 ff6f 	bl	80063e4 <HAL_GPIO_WritePin>

  // init mainboard
  bms_mainbaord_setup(&hspi1, GPIOA, GPIO_PIN_4, &hadc1, &hcan1, &hcan2);
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <main+0x64>)
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <main+0x68>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <main+0x6c>)
 8003510:	2210      	movs	r2, #16
 8003512:	4909      	ldr	r1, [pc, #36]	@ (8003538 <main+0x70>)
 8003514:	4809      	ldr	r0, [pc, #36]	@ (800353c <main+0x74>)
 8003516:	f7ff f921 	bl	800275c <bms_mainbaord_setup>

  printf("Board Starting...\n");
 800351a:	4809      	ldr	r0, [pc, #36]	@ (8003540 <main+0x78>)
 800351c:	f00a fdd6 	bl	800e0cc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    tick_mainboard_timers();
 8003520:	f7ff f9aa 	bl	8002878 <tick_mainboard_timers>
 8003524:	e7fc      	b.n	8003520 <main+0x58>
 8003526:	bf00      	nop
 8003528:	40020400 	.word	0x40020400
 800352c:	200006b8 	.word	0x200006b8
 8003530:	20000690 	.word	0x20000690
 8003534:	20000648 	.word	0x20000648
 8003538:	40020000 	.word	0x40020000
 800353c:	200006e0 	.word	0x200006e0
 8003540:	08010094 	.word	0x08010094

08003544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	@ 0x50
 8003548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800354a:	f107 0320 	add.w	r3, r7, #32
 800354e:	2230      	movs	r2, #48	@ 0x30
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f00a fe9a 	bl	800e28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <SystemClock_Config+0xcc>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <SystemClock_Config+0xcc>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003576:	6413      	str	r3, [r2, #64]	@ 0x40
 8003578:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <SystemClock_Config+0xcc>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <SystemClock_Config+0xd0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a21      	ldr	r2, [pc, #132]	@ (8003614 <SystemClock_Config+0xd0>)
 800358e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <SystemClock_Config+0xd0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035aa:	2302      	movs	r3, #2
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035b4:	2304      	movs	r3, #4
 80035b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80035b8:	23c0      	movs	r3, #192	@ 0xc0
 80035ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80035bc:	2306      	movs	r3, #6
 80035be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80035c0:	2308      	movs	r3, #8
 80035c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c4:	f107 0320 	add.w	r3, r7, #32
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f977 	bl	80078bc <HAL_RCC_OscConfig>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035d4:	f000 fa4a 	bl	8003a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d8:	230f      	movs	r3, #15
 80035da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035dc:	2302      	movs	r3, #2
 80035de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fbd8 	bl	8007dac <HAL_RCC_ClockConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003602:	f000 fa33 	bl	8003a6c <Error_Handler>
  }
}
 8003606:	bf00      	nop
 8003608:	3750      	adds	r7, #80	@ 0x50
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000

08003618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800361e:	463b      	mov	r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800362a:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <MX_ADC1_Init+0x98>)
 800362c:	4a21      	ldr	r2, [pc, #132]	@ (80036b4 <MX_ADC1_Init+0x9c>)
 800362e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003630:	4b1f      	ldr	r3, [pc, #124]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003632:	2200      	movs	r2, #0
 8003634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003636:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800363c:	4b1c      	ldr	r3, [pc, #112]	@ (80036b0 <MX_ADC1_Init+0x98>)
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003644:	2200      	movs	r2, #0
 8003646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <MX_ADC1_Init+0x98>)
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003650:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003652:	2200      	movs	r2, #0
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003656:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003658:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <MX_ADC1_Init+0xa0>)
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800365c:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <MX_ADC1_Init+0x98>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003662:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003664:	2201      	movs	r2, #1
 8003666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003668:	4b11      	ldr	r3, [pc, #68]	@ (80036b0 <MX_ADC1_Init+0x98>)
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003670:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003676:	480e      	ldr	r0, [pc, #56]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003678:	f000 ff2e 	bl	80044d8 <HAL_ADC_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003682:	f000 f9f3 	bl	8003a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003686:	2302      	movs	r3, #2
 8003688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003692:	463b      	mov	r3, r7
 8003694:	4619      	mov	r1, r3
 8003696:	4806      	ldr	r0, [pc, #24]	@ (80036b0 <MX_ADC1_Init+0x98>)
 8003698:	f001 f900 	bl	800489c <HAL_ADC_ConfigChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80036a2:	f000 f9e3 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000648 	.word	0x20000648
 80036b4:	40012000 	.word	0x40012000
 80036b8:	0f000001 	.word	0x0f000001

080036bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80036c2:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036c4:	4a25      	ldr	r2, [pc, #148]	@ (800375c <MX_CAN1_Init+0xa0>)
 80036c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80036c8:	4b23      	ldr	r3, [pc, #140]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036ca:	2210      	movs	r2, #16
 80036cc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80036ce:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80036d4:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80036da:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80036f4:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80036fa:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <MX_CAN1_Init+0x9c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003700:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_CAN1_Init+0x9c>)
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003706:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <MX_CAN1_Init+0x9c>)
 8003708:	2200      	movs	r2, #0
 800370a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800370c:	4812      	ldr	r0, [pc, #72]	@ (8003758 <MX_CAN1_Init+0x9c>)
 800370e:	f001 fae3 	bl	8004cd8 <HAL_CAN_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003718:	f000 f9a8 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800371c:	2301      	movs	r3, #1
 800371e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8003720:	2312      	movs	r3, #18
 8003722:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 8003728:	2300      	movs	r3, #0
 800372a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8003740:	2314      	movs	r3, #20
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8003744:	463b      	mov	r3, r7
 8003746:	4619      	mov	r1, r3
 8003748:	4803      	ldr	r0, [pc, #12]	@ (8003758 <MX_CAN1_Init+0x9c>)
 800374a:	f001 fbc1 	bl	8004ed0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	@ 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000690 	.word	0x20000690
 800375c:	40006400 	.word	0x40006400

08003760 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003764:	4b17      	ldr	r3, [pc, #92]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003766:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <MX_CAN2_Init+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800376a:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <MX_CAN2_Init+0x64>)
 800376c:	2210      	movs	r2, #16
 800376e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003770:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003776:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <MX_CAN2_Init+0x64>)
 800377e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003782:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <MX_CAN2_Init+0x64>)
 800378c:	2200      	movs	r2, #0
 800378e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003792:	2200      	movs	r2, #0
 8003794:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <MX_CAN2_Init+0x64>)
 8003798:	2200      	movs	r2, #0
 800379a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <MX_CAN2_Init+0x64>)
 800379e:	2200      	movs	r2, #0
 80037a0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80037a2:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <MX_CAN2_Init+0x64>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <MX_CAN2_Init+0x64>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80037ae:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <MX_CAN2_Init+0x64>)
 80037b0:	f001 fa92 	bl	8004cd8 <HAL_CAN_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80037ba:	f000 f957 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200006b8 	.word	0x200006b8
 80037c8:	40006800 	.word	0x40006800

080037cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037d0:	4b17      	ldr	r3, [pc, #92]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037d2:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <MX_SPI1_Init+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037d6:	4b16      	ldr	r3, [pc, #88]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037de:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037e4:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ea:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <MX_SPI1_Init+0x64>)
 80037f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80037fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <MX_SPI1_Init+0x64>)
 8003800:	2218      	movs	r2, #24
 8003802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <MX_SPI1_Init+0x64>)
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800380a:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <MX_SPI1_Init+0x64>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003810:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <MX_SPI1_Init+0x64>)
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <MX_SPI1_Init+0x64>)
 8003818:	220a      	movs	r2, #10
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800381c:	4804      	ldr	r0, [pc, #16]	@ (8003830 <MX_SPI1_Init+0x64>)
 800381e:	f004 fcbd 	bl	800819c <HAL_SPI_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003828:	f000 f920 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200006e0 	.word	0x200006e0
 8003834:	40013000 	.word	0x40013000

08003838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0308 	add.w	r3, r7, #8
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <MX_TIM2_Init+0x94>)
 8003856:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800385a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <MX_TIM2_Init+0x94>)
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <MX_TIM2_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <MX_TIM2_Init+0x94>)
 800386a:	f04f 32ff 	mov.w	r2, #4294967295
 800386e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <MX_TIM2_Init+0x94>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_TIM2_Init+0x94>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800387c:	4813      	ldr	r0, [pc, #76]	@ (80038cc <MX_TIM2_Init+0x94>)
 800387e:	f005 fb41 	bl	8008f04 <HAL_TIM_Base_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003888:	f000 f8f0 	bl	8003a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4619      	mov	r1, r3
 8003898:	480c      	ldr	r0, [pc, #48]	@ (80038cc <MX_TIM2_Init+0x94>)
 800389a:	f005 fb82 	bl	8008fa2 <HAL_TIM_ConfigClockSource>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038a4:	f000 f8e2 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	4619      	mov	r1, r3
 80038b4:	4805      	ldr	r0, [pc, #20]	@ (80038cc <MX_TIM2_Init+0x94>)
 80038b6:	f005 fd81 	bl	80093bc <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038c0:	f000 f8d4 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200007f8 	.word	0x200007f8

080038d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <MX_DMA_Init+0x4c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	4a0f      	ldr	r2, [pc, #60]	@ (800391c <MX_DMA_Init+0x4c>)
 80038e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <MX_DMA_Init+0x4c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80038f2:	2200      	movs	r2, #0
 80038f4:	2100      	movs	r1, #0
 80038f6:	2038      	movs	r0, #56	@ 0x38
 80038f8:	f002 f819 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80038fc:	2038      	movs	r0, #56	@ 0x38
 80038fe:	f002 f832 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2100      	movs	r1, #0
 8003906:	203b      	movs	r0, #59	@ 0x3b
 8003908:	f002 f811 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800390c:	203b      	movs	r0, #59	@ 0x3b
 800390e:	f002 f82a 	bl	8005966 <HAL_NVIC_EnableIRQ>

}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	@ 0x28
 8003924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	4b48      	ldr	r3, [pc, #288]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	4a47      	ldr	r2, [pc, #284]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003944:	6313      	str	r3, [r2, #48]	@ 0x30
 8003946:	4b45      	ldr	r3, [pc, #276]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a40      	ldr	r2, [pc, #256]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
 8003962:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	4b3a      	ldr	r3, [pc, #232]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4a39      	ldr	r2, [pc, #228]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	6313      	str	r3, [r2, #48]	@ 0x30
 800397e:	4b37      	ldr	r3, [pc, #220]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	4b33      	ldr	r3, [pc, #204]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	4a32      	ldr	r2, [pc, #200]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	6313      	str	r3, [r2, #48]	@ 0x30
 800399a:	4b30      	ldr	r3, [pc, #192]	@ (8003a5c <MX_GPIO_Init+0x13c>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 80039a6:	2200      	movs	r2, #0
 80039a8:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 80039ac:	482c      	ldr	r0, [pc, #176]	@ (8003a60 <MX_GPIO_Init+0x140>)
 80039ae:	f002 fd19 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039b8:	482a      	ldr	r0, [pc, #168]	@ (8003a64 <MX_GPIO_Init+0x144>)
 80039ba:	f002 fd13 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	21e0      	movs	r1, #224	@ 0xe0
 80039c2:	4829      	ldr	r0, [pc, #164]	@ (8003a68 <MX_GPIO_Init+0x148>)
 80039c4:	f002 fd0e 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 80039c8:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 80039cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4619      	mov	r1, r3
 80039e0:	481f      	ldr	r0, [pc, #124]	@ (8003a60 <MX_GPIO_Init+0x140>)
 80039e2:	f002 fb4b 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 80039e6:	f248 0302 	movw	r3, #32770	@ 0x8002
 80039ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	481b      	ldr	r0, [pc, #108]	@ (8003a68 <MX_GPIO_Init+0x148>)
 80039fc:	f002 fb3e 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8003a00:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4813      	ldr	r0, [pc, #76]	@ (8003a64 <MX_GPIO_Init+0x144>)
 8003a16:	f002 fb31 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 8003a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a20:	2301      	movs	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4619      	mov	r1, r3
 8003a32:	480c      	ldr	r0, [pc, #48]	@ (8003a64 <MX_GPIO_Init+0x144>)
 8003a34:	f002 fb22 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 8003a38:	23e0      	movs	r3, #224	@ 0xe0
 8003a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4806      	ldr	r0, [pc, #24]	@ (8003a68 <MX_GPIO_Init+0x148>)
 8003a50:	f002 fb14 	bl	800607c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003a54:	bf00      	nop
 8003a56:	3728      	adds	r7, #40	@ 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020400 	.word	0x40020400

08003a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a70:	b672      	cpsid	i
}
 8003a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <Error_Handler+0x8>

08003a78 <populateRawMessage>:
#include "nfr_can_driver.h"

// Populates a RawCanSignal with data, given a start bit, lenght, factor, and offset
void populateRawMessage(RawCanSignal *signal, float raw_data, int length, float factor, float offset)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6178      	str	r0, [r7, #20]
 8003a80:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a84:	60f9      	str	r1, [r7, #12]
 8003a86:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a8a:	ed87 1a01 	vstr	s2, [r7, #4]
    // offset and factor data
    uint64_t raw_value = (uint64_t)((raw_data - offset) / factor);
 8003a8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003aa2:	ee16 0a90 	vmov	r0, s13
 8003aa6:	f7fd f8e7 	bl	8000c78 <__aeabi_f2ulz>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // copy data into RawCanSignal
    memcpy(&(signal->raw_data), &raw_value, sizeof(raw_value));
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab8:	600a      	str	r2, [r1, #0]
 8003aba:	604b      	str	r3, [r1, #4]
    signal->length = length;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	609a      	str	r2, [r3, #8]

}
 8003ac2:	bf00      	nop
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <generateMask>:
    printf("\n");
}

// Generates a mask for given position and length
uint64_t generateMask(int pos, int len)
{
 8003aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
    return (0xFFFFFFFFFFFFFFFFull << (64 - len) >> (64 - len - pos));
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	f1c1 0640 	rsb	r6, r1, #64	@ 0x40
 8003ada:	f04f 30ff 	mov.w	r0, #4294967295
 8003ade:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae2:	f1a6 0e20 	sub.w	lr, r6, #32
 8003ae6:	f1c6 0c20 	rsb	ip, r6, #32
 8003aea:	fa01 f306 	lsl.w	r3, r1, r6
 8003aee:	fa00 fe0e 	lsl.w	lr, r0, lr
 8003af2:	ea43 030e 	orr.w	r3, r3, lr
 8003af6:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003afa:	ea43 030c 	orr.w	r3, r3, ip
 8003afe:	fa00 f206 	lsl.w	r2, r0, r6
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	f1c1 0040 	rsb	r0, r1, #64	@ 0x40
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	1a41      	subs	r1, r0, r1
 8003b0c:	f1c1 0620 	rsb	r6, r1, #32
 8003b10:	f1a1 0020 	sub.w	r0, r1, #32
 8003b14:	fa22 f401 	lsr.w	r4, r2, r1
 8003b18:	fa03 f606 	lsl.w	r6, r3, r6
 8003b1c:	4334      	orrs	r4, r6
 8003b1e:	fa23 f000 	lsr.w	r0, r3, r0
 8003b22:	4304      	orrs	r4, r0
 8003b24:	fa23 f501 	lsr.w	r5, r3, r1
 8003b28:	4622      	mov	r2, r4
 8003b2a:	462b      	mov	r3, r5
}
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b36 <encodeSignals>:

// Encodes a CAN msg with number of sub-messages
void encodeSignals(uint8_t *data, int count, ...)
{
 8003b36:	b40e      	push	{r1, r2, r3}
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	b092      	sub	sp, #72	@ 0x48
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
    va_list args;
    va_start(args, count);
 8003b42:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t buffer = 0;
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    int len_ptr = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b5c:	e03c      	b.n	8003bd8 <encodeSignals+0xa2>
    {
        RawCanSignal temp = va_arg(args, RawCanSignal);
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	3307      	adds	r3, #7
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	f103 0210 	add.w	r2, r3, #16
 8003b6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b6c:	f107 0610 	add.w	r6, r7, #16
 8003b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b72:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // shift data over and apply mask then add to buffer
        uint64_t mask = generateMask(len_ptr, temp.length);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b7c:	f7ff ffa5 	bl	8003aca <generateMask>
 8003b80:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        buffer |= (temp.raw_data.as_uint64 << len_ptr) & mask;
 8003b84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8a:	f1a1 0620 	sub.w	r6, r1, #32
 8003b8e:	f1c1 0020 	rsb	r0, r1, #32
 8003b92:	fa03 f501 	lsl.w	r5, r3, r1
 8003b96:	fa02 f606 	lsl.w	r6, r2, r6
 8003b9a:	4335      	orrs	r5, r6
 8003b9c:	fa22 f000 	lsr.w	r0, r2, r0
 8003ba0:	4305      	orrs	r5, r0
 8003ba2:	fa02 f401 	lsl.w	r4, r2, r1
 8003ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003baa:	ea04 0a02 	and.w	sl, r4, r2
 8003bae:	ea05 0b03 	and.w	fp, r5, r3
 8003bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bb6:	ea42 010a 	orr.w	r1, r2, sl
 8003bba:	6039      	str	r1, [r7, #0]
 8003bbc:	ea43 030b 	orr.w	r3, r3, fp
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // update length
        len_ptr += temp.length;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bce:	4413      	add	r3, r2
 8003bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3be      	bcc.n	8003b5e <encodeSignals+0x28>
    }

    // fill in msg
    for (size_t i = 0; i < 8; i++)
 8003be0:	2300      	movs	r3, #0
 8003be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be4:	e01c      	b.n	8003c20 <encodeSignals+0xea>
    {
        data[i] = (buffer >> (i * 8)) & 0xFF;
 8003be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be8:	00d9      	lsls	r1, r3, #3
 8003bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bee:	f1c1 0420 	rsb	r4, r1, #32
 8003bf2:	f1a1 0020 	sub.w	r0, r1, #32
 8003bf6:	fa22 f801 	lsr.w	r8, r2, r1
 8003bfa:	fa03 f404 	lsl.w	r4, r3, r4
 8003bfe:	ea48 0804 	orr.w	r8, r8, r4
 8003c02:	fa23 f000 	lsr.w	r0, r3, r0
 8003c06:	ea48 0800 	orr.w	r8, r8, r0
 8003c0a:	fa23 f901 	lsr.w	r9, r3, r1
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c12:	4413      	add	r3, r2
 8003c14:	fa5f f288 	uxtb.w	r2, r8
 8003c18:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; i++)
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c22:	2b07      	cmp	r3, #7
 8003c24:	d9df      	bls.n	8003be6 <encodeSignals+0xb0>
    }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3748      	adds	r7, #72	@ 0x48
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c32:	b003      	add	sp, #12
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	4a0f      	ldr	r2, [pc, #60]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6a:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_MspInit+0x4c>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	@ 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	@ (8003d04 <HAL_ADC_MspInit+0x7c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d127      	bne.n	8003cfa <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b16      	ldr	r3, [pc, #88]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	4a0e      	ldr	r2, [pc, #56]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <HAL_ADC_MspInit+0x80>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 8003cee:	f107 0314 	add.w	r3, r7, #20
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <HAL_ADC_MspInit+0x84>)
 8003cf6:	f002 f9c1 	bl	800607c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003cfa:	bf00      	nop
 8003cfc:	3728      	adds	r7, #40	@ 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40012000 	.word	0x40012000
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020000 	.word	0x40020000

08003d10 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	@ 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 031c 	add.w	r3, r7, #28
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a47      	ldr	r2, [pc, #284]	@ (8003e4c <HAL_CAN_MspInit+0x13c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d13e      	bne.n	8003db0 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a45      	ldr	r2, [pc, #276]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003d3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003d3c:	4b44      	ldr	r3, [pc, #272]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10d      	bne.n	8003d60 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	4b42      	ldr	r3, [pc, #264]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	4a41      	ldr	r2, [pc, #260]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d54:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	4b3b      	ldr	r3, [pc, #236]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	4a3a      	ldr	r2, [pc, #232]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d70:	4b38      	ldr	r3, [pc, #224]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003d8e:	2309      	movs	r3, #9
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	482f      	ldr	r0, [pc, #188]	@ (8003e58 <HAL_CAN_MspInit+0x148>)
 8003d9a:	f002 f96f 	bl	800607c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	2014      	movs	r0, #20
 8003da4:	f001 fdc3 	bl	800592e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003da8:	2014      	movs	r0, #20
 8003daa:	f001 fddc 	bl	8005966 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003dae:	e048      	b.n	8003e42 <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <HAL_CAN_MspInit+0x14c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d143      	bne.n	8003e42 <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a24      	ldr	r2, [pc, #144]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003dc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dca:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003dde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <HAL_CAN_MspInit+0x140>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10d      	bne.n	8003e04 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df8:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e14:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <HAL_CAN_MspInit+0x144>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003e20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e26:	2302      	movs	r3, #2
 8003e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003e32:	2309      	movs	r3, #9
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e36:	f107 031c 	add.w	r3, r7, #28
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4806      	ldr	r0, [pc, #24]	@ (8003e58 <HAL_CAN_MspInit+0x148>)
 8003e3e:	f002 f91d 	bl	800607c <HAL_GPIO_Init>
}
 8003e42:	bf00      	nop
 8003e44:	3730      	adds	r7, #48	@ 0x30
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40006400 	.word	0x40006400
 8003e50:	20000840 	.word	0x20000840
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40006800 	.word	0x40006800

08003e60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a48      	ldr	r2, [pc, #288]	@ (8003fa0 <HAL_SPI_MspInit+0x140>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	f040 808a 	bne.w	8003f98 <HAL_SPI_MspInit+0x138>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	4b46      	ldr	r3, [pc, #280]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	4a45      	ldr	r2, [pc, #276]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003e8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e92:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e94:	4b43      	ldr	r3, [pc, #268]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa4 <HAL_SPI_MspInit+0x144>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ebc:	23e0      	movs	r3, #224	@ 0xe0
 8003ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ecc:	2305      	movs	r3, #5
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4834      	ldr	r0, [pc, #208]	@ (8003fa8 <HAL_SPI_MspInit+0x148>)
 8003ed8:	f002 f8d0 	bl	800607c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003edc:	4b33      	ldr	r3, [pc, #204]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003ede:	4a34      	ldr	r2, [pc, #208]	@ (8003fb0 <HAL_SPI_MspInit+0x150>)
 8003ee0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003ee2:	4b32      	ldr	r3, [pc, #200]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003ee4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003ee8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eea:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003efe:	4b2b      	ldr	r3, [pc, #172]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f04:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f10:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f16:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f18:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003f1e:	4823      	ldr	r0, [pc, #140]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f20:	f001 fd3c 	bl	800599c <HAL_DMA_Init>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003f2a:	f7ff fd9f 	bl	8003a6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f32:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003f34:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <HAL_SPI_MspInit+0x14c>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb8 <HAL_SPI_MspInit+0x158>)
 8003f3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f42:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003f46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f4a:	2240      	movs	r2, #64	@ 0x40
 8003f4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4e:	4b19      	ldr	r3, [pc, #100]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f54:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003f68:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f74:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003f7c:	480d      	ldr	r0, [pc, #52]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f7e:	f001 fd0d 	bl	800599c <HAL_DMA_Init>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003f88:	f7ff fd70 	bl	8003a6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a09      	ldr	r2, [pc, #36]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f90:	649a      	str	r2, [r3, #72]	@ 0x48
 8003f92:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <HAL_SPI_MspInit+0x154>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	@ 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40013000 	.word	0x40013000
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	20000738 	.word	0x20000738
 8003fb0:	40026410 	.word	0x40026410
 8003fb4:	20000798 	.word	0x20000798
 8003fb8:	40026458 	.word	0x40026458

08003fbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fcc:	d10d      	bne.n	8003fea <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004006:	4802      	ldr	r0, [pc, #8]	@ (8004010 <NMI_Handler+0x14>)
 8004008:	f002 f9ec 	bl	80063e4 <HAL_GPIO_WritePin>
 800400c:	e7f8      	b.n	8004000 <NMI_Handler+0x4>
 800400e:	bf00      	nop
 8004010:	40020800 	.word	0x40020800

08004014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800401e:	4802      	ldr	r0, [pc, #8]	@ (8004028 <HardFault_Handler+0x14>)
 8004020:	f002 f9e0 	bl	80063e4 <HAL_GPIO_WritePin>
 8004024:	e7f8      	b.n	8004018 <HardFault_Handler+0x4>
 8004026:	bf00      	nop
 8004028:	40020800 	.word	0x40020800

0800402c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004036:	4802      	ldr	r0, [pc, #8]	@ (8004040 <MemManage_Handler+0x14>)
 8004038:	f002 f9d4 	bl	80063e4 <HAL_GPIO_WritePin>
 800403c:	e7f8      	b.n	8004030 <MemManage_Handler+0x4>
 800403e:	bf00      	nop
 8004040:	40020800 	.word	0x40020800

08004044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800404e:	4802      	ldr	r0, [pc, #8]	@ (8004058 <BusFault_Handler+0x14>)
 8004050:	f002 f9c8 	bl	80063e4 <HAL_GPIO_WritePin>
 8004054:	e7f8      	b.n	8004048 <BusFault_Handler+0x4>
 8004056:	bf00      	nop
 8004058:	40020800 	.word	0x40020800

0800405c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004066:	4802      	ldr	r0, [pc, #8]	@ (8004070 <UsageFault_Handler+0x14>)
 8004068:	f002 f9bc 	bl	80063e4 <HAL_GPIO_WritePin>
 800406c:	e7f8      	b.n	8004060 <UsageFault_Handler+0x4>
 800406e:	bf00      	nop
 8004070:	40020800 	.word	0x40020800

08004074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a2:	f000 f9d5 	bl	8004450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040b0:	4802      	ldr	r0, [pc, #8]	@ (80040bc <CAN1_RX0_IRQHandler+0x10>)
 80040b2:	f001 f927 	bl	8005304 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000690 	.word	0x20000690

080040c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80040c4:	4802      	ldr	r0, [pc, #8]	@ (80040d0 <DMA2_Stream0_IRQHandler+0x10>)
 80040c6:	f001 fd6f 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000738 	.word	0x20000738

080040d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80040d8:	4802      	ldr	r0, [pc, #8]	@ (80040e4 <DMA2_Stream3_IRQHandler+0x10>)
 80040da:	f001 fd65 	bl	8005ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000798 	.word	0x20000798

080040e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80040ec:	4802      	ldr	r0, [pc, #8]	@ (80040f8 <OTG_FS_IRQHandler+0x10>)
 80040ee:	f002 fad6 	bl	800669e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20001d2c 	.word	0x20001d2c

080040fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return 1;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_kill>:

int _kill(int pid, int sig)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004116:	f00a f91b 	bl	800e350 <__errno>
 800411a:	4603      	mov	r3, r0
 800411c:	2216      	movs	r2, #22
 800411e:	601a      	str	r2, [r3, #0]
  return -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_exit>:

void _exit (int status)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004134:	f04f 31ff 	mov.w	r1, #4294967295
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ffe7 	bl	800410c <_kill>
  while (1) {}    /* Make sure we hang here */
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <_exit+0x12>

08004142 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e00a      	b.n	800416a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004154:	f3af 8000 	nop.w
 8004158:	4601      	mov	r1, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	60ba      	str	r2, [r7, #8]
 8004160:	b2ca      	uxtb	r2, r1
 8004162:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	dbf0      	blt.n	8004154 <_read+0x12>
  }

  return len;
 8004172:	687b      	ldr	r3, [r7, #4]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_close>:
  }
  return len;
}

int _close(int file)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041a4:	605a      	str	r2, [r3, #4]
  return 0;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_isatty>:

int _isatty(int file)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <_sbrk+0x5c>)
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <_sbrk+0x60>)
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <_sbrk+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <_sbrk+0x64>)
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <_sbrk+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d207      	bcs.n	8004224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004214:	f00a f89c 	bl	800e350 <__errno>
 8004218:	4603      	mov	r3, r0
 800421a:	220c      	movs	r2, #12
 800421c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e009      	b.n	8004238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <_sbrk+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	4a05      	ldr	r2, [pc, #20]	@ (8004248 <_sbrk+0x64>)
 8004234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20020000 	.word	0x20020000
 8004244:	00000400 	.word	0x00000400
 8004248:	20000844 	.word	0x20000844
 800424c:	20002580 	.word	0x20002580

08004250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <SystemInit+0x20>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <SystemInit+0x20>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <CreateTimer>:
#include "virtual_timer.h"

// Creates a new timer
timer_ CreateTimer(uint32_t duration_ms, Callback cb)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8004280:	f000 f8fa 	bl	8004478 <HAL_GetTick>
 8004284:	61f8      	str	r0, [r7, #28]
	timer_ timer = {tickstart, duration_ms, cb};
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61bb      	str	r3, [r7, #24]
	return timer;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	461c      	mov	r4, r3
 8004296:	f107 0310 	add.w	r3, r7, #16
 800429a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800429e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	3724      	adds	r7, #36	@ 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}

080042aa <CreateTimerGroup>:

timer_group_ *CreateTimerGroup(timer_ timers[NUM_TIMERS])
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	// Allocate the timer group structure
	timer_group_ *tg = (timer_group_ *)malloc(sizeof(timer_group_));
 80042b2:	2030      	movs	r0, #48	@ 0x30
 80042b4:	f009 f8cc 	bl	800d450 <malloc>
 80042b8:	4603      	mov	r3, r0
 80042ba:	60fb      	str	r3, [r7, #12]
	if (!tg)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <CreateTimerGroup+0x1c>
	{
		return NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e006      	b.n	80042d4 <CreateTimerGroup+0x2a>
	}

	memcpy(tg->timers, timers, sizeof(timer_) * NUM_TIMERS);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2230      	movs	r2, #48	@ 0x30
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f00a f86c 	bl	800e3aa <memcpy>
	return tg;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <TickTimerGroup>:

// Ticks a timer group
void TickTimerGroup(timer_group_ *tg)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e02d      	b.n	8004346 <TickTimerGroup+0x6a>
	{
		// HAL_GetTick is in ms
		// will error with a HAL_GetTick overflow
		if ((HAL_GetTick() - tg->timers[i].tickstart) > tg->timers[i].durations_ms)
 80042ea:	f000 f8c5 	bl	8004478 <HAL_GetTick>
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1ac1      	subs	r1, r0, r3
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	3304      	adds	r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4299      	cmp	r1, r3
 8004314:	d914      	bls.n	8004340 <TickTimerGroup+0x64>
		{
			tg->timers[i].tickstart = HAL_GetTick();
 8004316:	7bfc      	ldrb	r4, [r7, #15]
 8004318:	f000 f8ae 	bl	8004478 <HAL_GetTick>
 800431c:	4601      	mov	r1, r0
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4623      	mov	r3, r4
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4423      	add	r3, r4
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	6019      	str	r1, [r3, #0]
			tg->timers[i].cb();
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3308      	adds	r3, #8
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	3301      	adds	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d9ce      	bls.n	80042ea <TickTimerGroup+0xe>
		}
	}
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bd90      	pop	{r4, r7, pc}
	...

08004358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004390 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800435c:	f7ff ff78 	bl	8004250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004360:	480c      	ldr	r0, [pc, #48]	@ (8004394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004362:	490d      	ldr	r1, [pc, #52]	@ (8004398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004364:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004368:	e002      	b.n	8004370 <LoopCopyDataInit>

0800436a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800436c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436e:	3304      	adds	r3, #4

08004370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004374:	d3f9      	bcc.n	800436a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004376:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004378:	4c0a      	ldr	r4, [pc, #40]	@ (80043a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800437c:	e001      	b.n	8004382 <LoopFillZerobss>

0800437e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800437e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004380:	3204      	adds	r2, #4

08004382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004384:	d3fb      	bcc.n	800437e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004386:	f009 ffe9 	bl	800e35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800438a:	f7ff f89d 	bl	80034c8 <main>
  bx  lr    
 800438e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004398:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 800439c:	0801068c 	.word	0x0801068c
  ldr r2, =_sbss
 80043a0:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80043a4:	2000257c 	.word	0x2000257c

080043a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043a8:	e7fe      	b.n	80043a8 <ADC_IRQHandler>
	...

080043ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <HAL_Init+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <HAL_Init+0x40>)
 80043b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <HAL_Init+0x40>)
 80043c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c8:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	@ (80043ec <HAL_Init+0x40>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d4:	2003      	movs	r0, #3
 80043d6:	f001 fa9f 	bl	8005918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043da:	200f      	movs	r0, #15
 80043dc:	f000 f808 	bl	80043f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e0:	f7ff fc2a 	bl	8003c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00

080043f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043f8:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <HAL_InitTick+0x54>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <HAL_InitTick+0x58>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004406:	fbb3 f3f1 	udiv	r3, r3, r1
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fab7 	bl	8005982 <HAL_SYSTICK_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e00e      	b.n	800443c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d80a      	bhi.n	800443a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004424:	2200      	movs	r2, #0
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f001 fa7f 	bl	800592e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004430:	4a06      	ldr	r2, [pc, #24]	@ (800444c <HAL_InitTick+0x5c>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000020 	.word	0x20000020
 8004448:	20000028 	.word	0x20000028
 800444c:	20000024 	.word	0x20000024

08004450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_IncTick+0x20>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <HAL_IncTick+0x24>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4413      	add	r3, r2
 8004460:	4a04      	ldr	r2, [pc, #16]	@ (8004474 <HAL_IncTick+0x24>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000028 	.word	0x20000028
 8004474:	20000848 	.word	0x20000848

08004478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_GetTick+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000848 	.word	0x20000848

08004490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7ff ffee 	bl	8004478 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d005      	beq.n	80044b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <HAL_Delay+0x44>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044b6:	bf00      	nop
 80044b8:	f7ff ffde 	bl	8004478 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d8f7      	bhi.n	80044b8 <HAL_Delay+0x28>
  {
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000028 	.word	0x20000028

080044d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e033      	b.n	8004556 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fbc6 	bl	8003c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800451e:	f023 0302 	bic.w	r3, r3, #2
 8004522:	f043 0202 	orr.w	r2, r3, #2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fad8 	bl	8004ae0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	@ 0x40
 8004546:	e001      	b.n	800454c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_ADC_Start+0x1a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0b2      	b.n	80046e0 <HAL_ADC_Start+0x180>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d018      	beq.n	80045c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045a0:	4b52      	ldr	r3, [pc, #328]	@ (80046ec <HAL_ADC_Start+0x18c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a52      	ldr	r2, [pc, #328]	@ (80046f0 <HAL_ADC_Start+0x190>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	0c9a      	lsrs	r2, r3, #18
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80045b4:	e002      	b.n	80045bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f9      	bne.n	80045b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d17a      	bne.n	80046c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460e:	d106      	bne.n	800461e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	f023 0206 	bic.w	r2, r3, #6
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44
 800461c:	e002      	b.n	8004624 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800462c:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <HAL_ADC_Start+0x194>)
 800462e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004638:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b00      	cmp	r3, #0
 8004644:	d12a      	bne.n	800469c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2b      	ldr	r2, [pc, #172]	@ (80046f8 <HAL_ADC_Start+0x198>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d015      	beq.n	800467c <HAL_ADC_Start+0x11c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <HAL_ADC_Start+0x19c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d105      	bne.n	8004666 <HAL_ADC_Start+0x106>
 800465a:	4b26      	ldr	r3, [pc, #152]	@ (80046f4 <HAL_ADC_Start+0x194>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a25      	ldr	r2, [pc, #148]	@ (8004700 <HAL_ADC_Start+0x1a0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d136      	bne.n	80046de <HAL_ADC_Start+0x17e>
 8004670:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_ADC_Start+0x194>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d130      	bne.n	80046de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d129      	bne.n	80046de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	e020      	b.n	80046de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a15      	ldr	r2, [pc, #84]	@ (80046f8 <HAL_ADC_Start+0x198>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d11b      	bne.n	80046de <HAL_ADC_Start+0x17e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d114      	bne.n	80046de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e00b      	b.n	80046de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000020 	.word	0x20000020
 80046f0:	431bde83 	.word	0x431bde83
 80046f4:	40012300 	.word	0x40012300
 80046f8:	40012000 	.word	0x40012000
 80046fc:	40012100 	.word	0x40012100
 8004700:	40012200 	.word	0x40012200

08004704 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_ADC_Stop+0x16>
 8004716:	2302      	movs	r3, #2
 8004718:	e021      	b.n	800475e <HAL_ADC_Stop+0x5a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004786:	d113      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004796:	d10b      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e063      	b.n	8004878 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b0:	f7ff fe62 	bl	8004478 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047b6:	e021      	b.n	80047fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d01d      	beq.n	80047fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_ADC_PollForConversion+0x6c>
 80047c6:	f7ff fe57 	bl	8004478 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d212      	bcs.n	80047fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d00b      	beq.n	80047fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	f043 0204 	orr.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e03d      	b.n	8004878 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d1d6      	bne.n	80047b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f06f 0212 	mvn.w	r2, #18
 8004812:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d123      	bne.n	8004876 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11f      	bne.n	8004876 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800484e:	2b00      	cmp	r3, #0
 8004850:	d111      	bne.n	8004876 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x1c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e105      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x228>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d925      	bls.n	8004914 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68d9      	ldr	r1, [r3, #12]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	3b1e      	subs	r3, #30
 80048de:	2207      	movs	r2, #7
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43da      	mvns	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	400a      	ands	r2, r1
 80048ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68d9      	ldr	r1, [r3, #12]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4618      	mov	r0, r3
 8004900:	4603      	mov	r3, r0
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4403      	add	r3, r0
 8004906:	3b1e      	subs	r3, #30
 8004908:	409a      	lsls	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	e022      	b.n	800495a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	2207      	movs	r2, #7
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	400a      	ands	r2, r1
 8004936:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6919      	ldr	r1, [r3, #16]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	4618      	mov	r0, r3
 800494a:	4603      	mov	r3, r0
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4403      	add	r3, r0
 8004950:	409a      	lsls	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d824      	bhi.n	80049ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	3b05      	subs	r3, #5
 8004974:	221f      	movs	r2, #31
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	400a      	ands	r2, r1
 8004982:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4618      	mov	r0, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b05      	subs	r3, #5
 800499e:	fa00 f203 	lsl.w	r2, r0, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80049aa:	e04c      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d824      	bhi.n	80049fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	3b23      	subs	r3, #35	@ 0x23
 80049c6:	221f      	movs	r2, #31
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43da      	mvns	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	400a      	ands	r2, r1
 80049d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4618      	mov	r0, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	3b23      	subs	r3, #35	@ 0x23
 80049f0:	fa00 f203 	lsl.w	r2, r0, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80049fc:	e023      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3b41      	subs	r3, #65	@ 0x41
 8004a10:	221f      	movs	r2, #31
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	3b41      	subs	r3, #65	@ 0x41
 8004a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a46:	4b22      	ldr	r3, [pc, #136]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x234>)
 8004a48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x238>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d109      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x1cc>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b12      	cmp	r3, #18
 8004a5a:	d105      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x238>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d123      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x21e>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d003      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x1e6>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b11      	cmp	r3, #17
 8004a80:	d11b      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d111      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a96:	4b10      	ldr	r3, [pc, #64]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x23c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a10      	ldr	r2, [pc, #64]	@ (8004adc <HAL_ADC_ConfigChannel+0x240>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	0c9a      	lsrs	r2, r3, #18
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004aac:	e002      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f9      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40012300 	.word	0x40012300
 8004ad4:	40012000 	.word	0x40012000
 8004ad8:	20000020 	.word	0x20000020
 8004adc:	431bde83 	.word	0x431bde83

08004ae0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ae8:	4b79      	ldr	r3, [pc, #484]	@ (8004cd0 <ADC_Init+0x1f0>)
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <ADC_Init+0x1f4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6899      	ldr	r1, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e00f      	b.n	8004bde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0202 	bic.w	r2, r2, #2
 8004bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7e1b      	ldrb	r3, [r3, #24]
 8004bf8:	005a      	lsls	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01b      	beq.n	8004c44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004c2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	3b01      	subs	r3, #1
 8004c38:	035a      	lsls	r2, r3, #13
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e007      	b.n	8004c54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	051a      	lsls	r2, r3, #20
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c96:	025a      	lsls	r2, r3, #9
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	029a      	lsls	r2, r3, #10
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40012300 	.word	0x40012300
 8004cd4:	0f000001 	.word	0x0f000001

08004cd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0ed      	b.n	8004ec6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff f80a 	bl	8003d10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d0c:	f7ff fbb4 	bl	8004478 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d12:	e012      	b.n	8004d3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d14:	f7ff fbb0 	bl	8004478 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b0a      	cmp	r3, #10
 8004d20:	d90b      	bls.n	8004d3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2205      	movs	r2, #5
 8004d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0c5      	b.n	8004ec6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0e5      	beq.n	8004d14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0202 	bic.w	r2, r2, #2
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7ff fb8e 	bl	8004478 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d5e:	e012      	b.n	8004d86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d60:	f7ff fb8a 	bl	8004478 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b0a      	cmp	r3, #10
 8004d6c:	d90b      	bls.n	8004d86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e09f      	b.n	8004ec6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7e1b      	ldrb	r3, [r3, #24]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e007      	b.n	8004dbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	7e5b      	ldrb	r3, [r3, #25]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d108      	bne.n	8004dd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7e9b      	ldrb	r3, [r3, #26]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d108      	bne.n	8004e02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0220 	orr.w	r2, r2, #32
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e007      	b.n	8004e12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0220 	bic.w	r2, r2, #32
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7edb      	ldrb	r3, [r3, #27]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d108      	bne.n	8004e2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0210 	bic.w	r2, r2, #16
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e007      	b.n	8004e3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0210 	orr.w	r2, r2, #16
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7f1b      	ldrb	r3, [r3, #28]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e007      	b.n	8004e66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0208 	bic.w	r2, r2, #8
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7f5b      	ldrb	r3, [r3, #29]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d108      	bne.n	8004e80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0204 	orr.w	r2, r2, #4
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e007      	b.n	8004e90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	ea42 0103 	orr.w	r1, r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d003      	beq.n	8004ef6 <HAL_CAN_ConfigFilter+0x26>
 8004eee:	7cfb      	ldrb	r3, [r7, #19]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f040 80be 	bne.w	8005072 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004ef6:	4b65      	ldr	r3, [pc, #404]	@ (800508c <HAL_CAN_ConfigFilter+0x1bc>)
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f00:	f043 0201 	orr.w	r2, r3, #1
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f10:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	431a      	orrs	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2201      	movs	r2, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	401a      	ands	r2, r3
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d123      	bne.n	8004fa0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	401a      	ands	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3248      	adds	r2, #72	@ 0x48
 8004f80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	3348      	adds	r3, #72	@ 0x48
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d122      	bne.n	8004fee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3248      	adds	r2, #72	@ 0x48
 8004fce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fe2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	3348      	adds	r3, #72	@ 0x48
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	440b      	add	r3, r1
 8004fec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	401a      	ands	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005008:	e007      	b.n	800501a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	431a      	orrs	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	43db      	mvns	r3, r3
 800502c:	401a      	ands	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005034:	e007      	b.n	8005046 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	431a      	orrs	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d107      	bne.n	800505e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	431a      	orrs	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005064:	f023 0201 	bic.w	r2, r3, #1
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e006      	b.n	8005080 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40006400 	.word	0x40006400

08005090 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d12e      	bne.n	8005102 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050bc:	f7ff f9dc 	bl	8004478 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050c2:	e012      	b.n	80050ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050c4:	f7ff f9d8 	bl	8004478 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b0a      	cmp	r3, #10
 80050d0:	d90b      	bls.n	80050ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2205      	movs	r2, #5
 80050e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e012      	b.n	8005110 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e5      	bne.n	80050c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e006      	b.n	8005110 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	@ 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800512c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005136:	7ffb      	ldrb	r3, [r7, #31]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d003      	beq.n	8005144 <HAL_CAN_AddTxMessage+0x2c>
 800513c:	7ffb      	ldrb	r3, [r7, #31]
 800513e:	2b02      	cmp	r3, #2
 8005140:	f040 80ad 	bne.w	800529e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8095 	beq.w	800528e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	0e1b      	lsrs	r3, r3, #24
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800516e:	2201      	movs	r2, #1
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	409a      	lsls	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	6809      	ldr	r1, [r1, #0]
 800518e:	431a      	orrs	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3318      	adds	r3, #24
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	440b      	add	r3, r1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e00f      	b.n	80051bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80051b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	3318      	adds	r3, #24
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	440b      	add	r3, r1
 80051ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3318      	adds	r3, #24
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	440b      	add	r3, r1
 80051cc:	3304      	adds	r3, #4
 80051ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	7d1b      	ldrb	r3, [r3, #20]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d111      	bne.n	80051fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	3318      	adds	r3, #24
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	6811      	ldr	r1, [r2, #0]
 80051ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3318      	adds	r3, #24
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	440b      	add	r3, r1
 80051f8:	3304      	adds	r3, #4
 80051fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3307      	adds	r3, #7
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	061a      	lsls	r2, r3, #24
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3306      	adds	r3, #6
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3305      	adds	r3, #5
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	4313      	orrs	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	3204      	adds	r2, #4
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	4610      	mov	r0, r2
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	6811      	ldr	r1, [r2, #0]
 8005224:	ea43 0200 	orr.w	r2, r3, r0
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	440b      	add	r3, r1
 800522e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005232:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3303      	adds	r3, #3
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	061a      	lsls	r2, r3, #24
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3302      	adds	r3, #2
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3301      	adds	r3, #1
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	4313      	orrs	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	4610      	mov	r0, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	6811      	ldr	r1, [r2, #0]
 800525a:	ea43 0200 	orr.w	r2, r3, r0
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	440b      	add	r3, r1
 8005264:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005268:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	3318      	adds	r3, #24
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	6811      	ldr	r1, [r2, #0]
 800527c:	f043 0201 	orr.w	r2, r3, #1
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3318      	adds	r3, #24
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	440b      	add	r3, r1
 8005288:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e00e      	b.n	80052ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e006      	b.n	80052ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3724      	adds	r7, #36	@ 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d002      	beq.n	80052d6 <HAL_CAN_ActivateNotification+0x1e>
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d109      	bne.n	80052ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6959      	ldr	r1, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e006      	b.n	80052f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	@ 0x28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800530c:	2300      	movs	r3, #0
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d07c      	beq.n	8005444 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d023      	beq.n	800539c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f983 	bl	8005672 <HAL_CAN_TxMailbox0CompleteCallback>
 800536c:	e016      	b.n	800539c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005380:	e00c      	b.n	800539c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
 8005394:	e002      	b.n	800539c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f989 	bl	80056ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d024      	beq.n	80053f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f963 	bl	8005686 <HAL_CAN_TxMailbox1CompleteCallback>
 80053c0:	e016      	b.n	80053f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d4:	e00c      	b.n	80053f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e8:	e002      	b.n	80053f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f969 	bl	80056c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d024      	beq.n	8005444 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005402:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f943 	bl	800569a <HAL_CAN_TxMailbox2CompleteCallback>
 8005414:	e016      	b.n	8005444 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
 8005428:	e00c      	b.n	8005444 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
 800543c:	e002      	b.n	8005444 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f949 	bl	80056d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2210      	movs	r2, #16
 8005466:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d006      	beq.n	800548a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f93a 	bl	80056fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f921 	bl	80056ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2208      	movs	r2, #8
 80054e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f91c 	bl	8005726 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f903 	bl	8005712 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f906 	bl	800573a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2208      	movs	r2, #8
 8005548:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8ff 	bl	800574e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d07b      	beq.n	8005652 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d072      	beq.n	800564a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005586:	2b00      	cmp	r3, #0
 8005588:	d008      	beq.n	800559c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d043      	beq.n	800564a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d03e      	beq.n	800564a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d2:	2b60      	cmp	r3, #96	@ 0x60
 80055d4:	d02b      	beq.n	800562e <HAL_CAN_IRQHandler+0x32a>
 80055d6:	2b60      	cmp	r3, #96	@ 0x60
 80055d8:	d82e      	bhi.n	8005638 <HAL_CAN_IRQHandler+0x334>
 80055da:	2b50      	cmp	r3, #80	@ 0x50
 80055dc:	d022      	beq.n	8005624 <HAL_CAN_IRQHandler+0x320>
 80055de:	2b50      	cmp	r3, #80	@ 0x50
 80055e0:	d82a      	bhi.n	8005638 <HAL_CAN_IRQHandler+0x334>
 80055e2:	2b40      	cmp	r3, #64	@ 0x40
 80055e4:	d019      	beq.n	800561a <HAL_CAN_IRQHandler+0x316>
 80055e6:	2b40      	cmp	r3, #64	@ 0x40
 80055e8:	d826      	bhi.n	8005638 <HAL_CAN_IRQHandler+0x334>
 80055ea:	2b30      	cmp	r3, #48	@ 0x30
 80055ec:	d010      	beq.n	8005610 <HAL_CAN_IRQHandler+0x30c>
 80055ee:	2b30      	cmp	r3, #48	@ 0x30
 80055f0:	d822      	bhi.n	8005638 <HAL_CAN_IRQHandler+0x334>
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d002      	beq.n	80055fc <HAL_CAN_IRQHandler+0x2f8>
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d005      	beq.n	8005606 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055fa:	e01d      	b.n	8005638 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	f043 0308 	orr.w	r3, r3, #8
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005604:	e019      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	f043 0310 	orr.w	r3, r3, #16
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800560e:	e014      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	f043 0320 	orr.w	r3, r3, #32
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005618:	e00f      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005622:	e00a      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800562c:	e005      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005636:	e000      	b.n	800563a <HAL_CAN_IRQHandler+0x336>
            break;
 8005638:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005648:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2204      	movs	r2, #4
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f87c 	bl	8005762 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800566a:	bf00      	nop
 800566c:	3728      	adds	r7, #40	@ 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <__NVIC_SetPriorityGrouping>:
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <__NVIC_SetPriorityGrouping+0x44>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005794:	4013      	ands	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057aa:	4a04      	ldr	r2, [pc, #16]	@ (80057bc <__NVIC_SetPriorityGrouping+0x44>)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	60d3      	str	r3, [r2, #12]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <__NVIC_GetPriorityGrouping>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057c4:	4b04      	ldr	r3, [pc, #16]	@ (80057d8 <__NVIC_GetPriorityGrouping+0x18>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 0307 	and.w	r3, r3, #7
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	e000ed00 	.word	0xe000ed00

080057dc <__NVIC_EnableIRQ>:
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	db0b      	blt.n	8005806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	f003 021f 	and.w	r2, r3, #31
 80057f4:	4907      	ldr	r1, [pc, #28]	@ (8005814 <__NVIC_EnableIRQ+0x38>)
 80057f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	2001      	movs	r0, #1
 80057fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	e000e100 	.word	0xe000e100

08005818 <__NVIC_SetPriority>:
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005828:	2b00      	cmp	r3, #0
 800582a:	db0a      	blt.n	8005842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	490c      	ldr	r1, [pc, #48]	@ (8005864 <__NVIC_SetPriority+0x4c>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	440b      	add	r3, r1
 800583c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005840:	e00a      	b.n	8005858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4908      	ldr	r1, [pc, #32]	@ (8005868 <__NVIC_SetPriority+0x50>)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3b04      	subs	r3, #4
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	440b      	add	r3, r1
 8005856:	761a      	strb	r2, [r3, #24]
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000e100 	.word	0xe000e100
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <NVIC_EncodePriority>:
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	@ 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f1c3 0307 	rsb	r3, r3, #7
 8005886:	2b04      	cmp	r3, #4
 8005888:	bf28      	it	cs
 800588a:	2304      	movcs	r3, #4
 800588c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3304      	adds	r3, #4
 8005892:	2b06      	cmp	r3, #6
 8005894:	d902      	bls.n	800589c <NVIC_EncodePriority+0x30>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3b03      	subs	r3, #3
 800589a:	e000      	b.n	800589e <NVIC_EncodePriority+0x32>
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	f04f 32ff 	mov.w	r2, #4294967295
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	401a      	ands	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b4:	f04f 31ff 	mov.w	r1, #4294967295
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	43d9      	mvns	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c4:	4313      	orrs	r3, r2
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3724      	adds	r7, #36	@ 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <SysTick_Config>:
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e4:	d301      	bcc.n	80058ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80058e6:	2301      	movs	r3, #1
 80058e8:	e00f      	b.n	800590a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005914 <SysTick_Config+0x40>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f2:	210f      	movs	r1, #15
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	f7ff ff8e 	bl	8005818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058fc:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <SysTick_Config+0x40>)
 80058fe:	2200      	movs	r2, #0
 8005900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005902:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <SysTick_Config+0x40>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	e000e010 	.word	0xe000e010

08005918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff29 	bl	8005778 <__NVIC_SetPriorityGrouping>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005940:	f7ff ff3e 	bl	80057c0 <__NVIC_GetPriorityGrouping>
 8005944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff8e 	bl	800586c <NVIC_EncodePriority>
 8005950:	4602      	mov	r2, r0
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff5d 	bl	8005818 <__NVIC_SetPriority>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff ff31 	bl	80057dc <__NVIC_EnableIRQ>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ffa2 	bl	80058d4 <SysTick_Config>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059a8:	f7fe fd66 	bl	8004478 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e099      	b.n	8005aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d8:	e00f      	b.n	80059fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059da:	f7fe fd4d 	bl	8004478 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d908      	bls.n	80059fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e078      	b.n	8005aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e8      	bne.n	80059da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4b38      	ldr	r3, [pc, #224]	@ (8005af4 <HAL_DMA_Init+0x158>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d117      	bne.n	8005abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa6f 	bl	8005f84 <DMA_CheckFifoParam>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	@ 0x40
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005aba:	2301      	movs	r3, #1
 8005abc:	e016      	b.n	8005aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa26 	bl	8005f18 <DMA_CalcBaseAndBitshift>
 8005acc:	4603      	mov	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad4:	223f      	movs	r2, #63	@ 0x3f
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	f010803f 	.word	0xf010803f

08005af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_DMA_Start_IT+0x26>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e040      	b.n	8005ba0 <HAL_DMA_Start_IT+0xa8>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d12f      	bne.n	8005b92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f9b8 	bl	8005ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b50:	223f      	movs	r2, #63	@ 0x3f
 8005b52:	409a      	lsls	r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0216 	orr.w	r2, r2, #22
 8005b66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e005      	b.n	8005b9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8005df0 <HAL_DMA_IRQHandler+0x248>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a8e      	ldr	r2, [pc, #568]	@ (8005df4 <HAL_DMA_IRQHandler+0x24c>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	0a9b      	lsrs	r3, r3, #10
 8005bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01a      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	2208      	movs	r2, #8
 8005c02:	409a      	lsls	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	f043 0201 	orr.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c18:	2201      	movs	r2, #1
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d012      	beq.n	8005c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c36:	2201      	movs	r2, #1
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4e:	2204      	movs	r2, #4
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	f043 0204 	orr.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c84:	2210      	movs	r2, #16
 8005c86:	409a      	lsls	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d043      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03c      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d018      	beq.n	8005cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d024      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
 8005cd6:	e01f      	b.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
 8005ce8:	e016      	b.n	8005d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d107      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0208 	bic.w	r2, r2, #8
 8005d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 808f 	beq.w	8005e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8087 	beq.w	8005e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3e:	2220      	movs	r2, #32
 8005d40:	409a      	lsls	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d136      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0216 	bic.w	r2, r2, #22
 8005d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <HAL_DMA_IRQHandler+0x1da>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0208 	bic.w	r2, r2, #8
 8005d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	223f      	movs	r2, #63	@ 0x3f
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d07e      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
        }
        return;
 8005dbe:	e079      	b.n	8005eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01d      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10d      	bne.n	8005df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d031      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
 8005dec:	e02c      	b.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
 8005dee:	bf00      	nop
 8005df0:	20000020 	.word	0x20000020
 8005df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d023      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	e01e      	b.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0210 	bic.w	r2, r2, #16
 8005e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d032      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2205      	movs	r2, #5
 8005e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d307      	bcc.n	8005e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f2      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x2cc>
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
 8005eb2:	e000      	b.n	8005eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005eb4:	bf00      	nop
    }
  }
}
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d108      	bne.n	8005efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005efa:	e007      	b.n	8005f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	60da      	str	r2, [r3, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	3b10      	subs	r3, #16
 8005f28:	4a14      	ldr	r2, [pc, #80]	@ (8005f7c <DMA_CalcBaseAndBitshift+0x64>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f32:	4a13      	ldr	r2, [pc, #76]	@ (8005f80 <DMA_CalcBaseAndBitshift+0x68>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d909      	bls.n	8005f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f58:	e007      	b.n	8005f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	aaaaaaab 	.word	0xaaaaaaab
 8005f80:	08010300 	.word	0x08010300

08005f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11f      	bne.n	8005fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d856      	bhi.n	8006052 <DMA_CheckFifoParam+0xce>
 8005fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <DMA_CheckFifoParam+0x28>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fcf 	.word	0x08005fcf
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08006053 	.word	0x08006053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d046      	beq.n	8006056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fcc:	e043      	b.n	8006056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fd6:	d140      	bne.n	800605a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fdc:	e03d      	b.n	800605a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe6:	d121      	bne.n	800602c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d837      	bhi.n	800605e <DMA_CheckFifoParam+0xda>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <DMA_CheckFifoParam+0x70>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	0800600b 	.word	0x0800600b
 8005ffc:	08006005 	.word	0x08006005
 8006000:	0800601d 	.word	0x0800601d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
      break;
 8006008:	e030      	b.n	800606c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d025      	beq.n	8006062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800601a:	e022      	b.n	8006062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006024:	d11f      	bne.n	8006066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800602a:	e01c      	b.n	8006066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d903      	bls.n	800603a <DMA_CheckFifoParam+0xb6>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d003      	beq.n	8006040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006038:	e018      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
      break;
 800603e:	e015      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      break;
 8006050:	e00b      	b.n	800606a <DMA_CheckFifoParam+0xe6>
      break;
 8006052:	bf00      	nop
 8006054:	e00a      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 8006056:	bf00      	nop
 8006058:	e008      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800605a:	bf00      	nop
 800605c:	e006      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800605e:	bf00      	nop
 8006060:	e004      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;   
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <DMA_CheckFifoParam+0xe8>
      break;
 800606a:	bf00      	nop
    }
  } 
  
  return status; 
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	@ 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e16b      	b.n	8006370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006098:	2201      	movs	r2, #1
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	f040 815a 	bne.w	800636a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d005      	beq.n	80060ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d130      	bne.n	8006130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	2203      	movs	r2, #3
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006104:	2201      	movs	r2, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	f003 0201 	and.w	r2, r3, #1
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d017      	beq.n	800616c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	2203      	movs	r2, #3
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d123      	bne.n	80061c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	08da      	lsrs	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3208      	adds	r2, #8
 8006180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	220f      	movs	r2, #15
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	08da      	lsrs	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3208      	adds	r2, #8
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	2203      	movs	r2, #3
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0203 	and.w	r2, r3, #3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80b4 	beq.w	800636a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	4b60      	ldr	r3, [pc, #384]	@ (8006388 <HAL_GPIO_Init+0x30c>)
 8006208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620a:	4a5f      	ldr	r2, [pc, #380]	@ (8006388 <HAL_GPIO_Init+0x30c>)
 800620c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006210:	6453      	str	r3, [r2, #68]	@ 0x44
 8006212:	4b5d      	ldr	r3, [pc, #372]	@ (8006388 <HAL_GPIO_Init+0x30c>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800621e:	4a5b      	ldr	r2, [pc, #364]	@ (800638c <HAL_GPIO_Init+0x310>)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a52      	ldr	r2, [pc, #328]	@ (8006390 <HAL_GPIO_Init+0x314>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d02b      	beq.n	80062a2 <HAL_GPIO_Init+0x226>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a51      	ldr	r2, [pc, #324]	@ (8006394 <HAL_GPIO_Init+0x318>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d025      	beq.n	800629e <HAL_GPIO_Init+0x222>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a50      	ldr	r2, [pc, #320]	@ (8006398 <HAL_GPIO_Init+0x31c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01f      	beq.n	800629a <HAL_GPIO_Init+0x21e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a4f      	ldr	r2, [pc, #316]	@ (800639c <HAL_GPIO_Init+0x320>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d019      	beq.n	8006296 <HAL_GPIO_Init+0x21a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a4e      	ldr	r2, [pc, #312]	@ (80063a0 <HAL_GPIO_Init+0x324>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_GPIO_Init+0x216>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a4d      	ldr	r2, [pc, #308]	@ (80063a4 <HAL_GPIO_Init+0x328>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00d      	beq.n	800628e <HAL_GPIO_Init+0x212>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a4c      	ldr	r2, [pc, #304]	@ (80063a8 <HAL_GPIO_Init+0x32c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <HAL_GPIO_Init+0x20e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a4b      	ldr	r2, [pc, #300]	@ (80063ac <HAL_GPIO_Init+0x330>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <HAL_GPIO_Init+0x20a>
 8006282:	2307      	movs	r3, #7
 8006284:	e00e      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 8006286:	2308      	movs	r3, #8
 8006288:	e00c      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 800628a:	2306      	movs	r3, #6
 800628c:	e00a      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 800628e:	2305      	movs	r3, #5
 8006290:	e008      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 8006292:	2304      	movs	r3, #4
 8006294:	e006      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 8006296:	2303      	movs	r3, #3
 8006298:	e004      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 800629a:	2302      	movs	r3, #2
 800629c:	e002      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <HAL_GPIO_Init+0x228>
 80062a2:	2300      	movs	r3, #0
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	f002 0203 	and.w	r2, r2, #3
 80062aa:	0092      	lsls	r2, r2, #2
 80062ac:	4093      	lsls	r3, r2
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062b4:	4935      	ldr	r1, [pc, #212]	@ (800638c <HAL_GPIO_Init+0x310>)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	089b      	lsrs	r3, r3, #2
 80062ba:	3302      	adds	r3, #2
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062c2:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	43db      	mvns	r3, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4013      	ands	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062e6:	4a32      	ldr	r2, [pc, #200]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062ec:	4b30      	ldr	r3, [pc, #192]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006310:	4a27      	ldr	r2, [pc, #156]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006316:	4b26      	ldr	r3, [pc, #152]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	43db      	mvns	r3, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4013      	ands	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800633a:	4a1d      	ldr	r2, [pc, #116]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006364:	4a12      	ldr	r2, [pc, #72]	@ (80063b0 <HAL_GPIO_Init+0x334>)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	f67f ae90 	bls.w	8006098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	3724      	adds	r7, #36	@ 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800
 800638c:	40013800 	.word	0x40013800
 8006390:	40020000 	.word	0x40020000
 8006394:	40020400 	.word	0x40020400
 8006398:	40020800 	.word	0x40020800
 800639c:	40020c00 	.word	0x40020c00
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40021400 	.word	0x40021400
 80063a8:	40021800 	.word	0x40021800
 80063ac:	40021c00 	.word	0x40021c00
 80063b0:	40013c00 	.word	0x40013c00

080063b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	887b      	ldrh	r3, [r7, #2]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	e001      	b.n	80063d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	807b      	strh	r3, [r7, #2]
 80063f0:	4613      	mov	r3, r2
 80063f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063f4:	787b      	ldrb	r3, [r7, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063fa:	887a      	ldrh	r2, [r7, #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006400:	e003      	b.n	800640a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	041a      	lsls	r2, r3, #16
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	619a      	str	r2, [r3, #24]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af02      	add	r7, sp, #8
 800641c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e101      	b.n	800662c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f006 fcf0 	bl	800ce28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2203      	movs	r2, #3
 800644c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006456:	d102      	bne.n	800645e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f003 f93d 	bl	80096e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	7c1a      	ldrb	r2, [r3, #16]
 8006470:	f88d 2000 	strb.w	r2, [sp]
 8006474:	3304      	adds	r3, #4
 8006476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006478:	f003 f81c 	bl	80094b4 <USB_CoreInit>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e0ce      	b.n	800662c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f003 f935 	bl	8009704 <USB_SetCurrentMode>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0bf      	b.n	800662c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
 80064b0:	e04a      	b.n	8006548 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064b2:	7bfa      	ldrb	r2, [r7, #15]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	3315      	adds	r3, #21
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064c6:	7bfa      	ldrb	r2, [r7, #15]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	3314      	adds	r3, #20
 80064d6:	7bfa      	ldrb	r2, [r7, #15]
 80064d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064da:	7bfa      	ldrb	r2, [r7, #15]
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	b298      	uxth	r0, r3
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	332e      	adds	r3, #46	@ 0x2e
 80064ee:	4602      	mov	r2, r0
 80064f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064f2:	7bfa      	ldrb	r2, [r7, #15]
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3318      	adds	r3, #24
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006506:	7bfa      	ldrb	r2, [r7, #15]
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	331c      	adds	r3, #28
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	3320      	adds	r3, #32
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3324      	adds	r3, #36	@ 0x24
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	3301      	adds	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	791b      	ldrb	r3, [r3, #4]
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3af      	bcc.n	80064b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e044      	b.n	80065e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006580:	7bfa      	ldrb	r2, [r7, #15]
 8006582:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006584:	7bfa      	ldrb	r2, [r7, #15]
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065b0:	7bfa      	ldrb	r2, [r7, #15]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	3301      	adds	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	7bfa      	ldrb	r2, [r7, #15]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3b5      	bcc.n	8006558 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7c1a      	ldrb	r2, [r3, #16]
 80065f4:	f88d 2000 	strb.w	r2, [sp]
 80065f8:	3304      	adds	r3, #4
 80065fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065fc:	f003 f8ce 	bl	800979c <USB_DevInit>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e00c      	b.n	800662c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f004 f918 	bl	800a85a <USB_DevDisconnect>

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_PCD_Start+0x1c>
 800664c:	2302      	movs	r3, #2
 800664e:	e022      	b.n	8006696 <HAL_PCD_Start+0x62>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006668:	2b01      	cmp	r3, #1
 800666a:	d105      	bne.n	8006678 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f003 f81f 	bl	80096c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f004 f8c6 	bl	800a818 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b08d      	sub	sp, #52	@ 0x34
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f004 f984 	bl	800a9c2 <USB_GetMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 848c 	bne.w	8006fda <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f004 f8e8 	bl	800a89c <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8482 	beq.w	8006fd8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f004 f8d5 	bl	800a89c <USB_ReadInterrupts>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d107      	bne.n	800670c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f002 0202 	and.w	r2, r2, #2
 800670a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f004 f8c3 	bl	800a89c <USB_ReadInterrupts>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b10      	cmp	r3, #16
 800671e:	d161      	bne.n	80067e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0210 	bic.w	r2, r2, #16
 800672e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3304      	adds	r3, #4
 800674e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800675a:	d124      	bne.n	80067a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d035      	beq.n	80067d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6a38      	ldr	r0, [r7, #32]
 800677c:	f003 fefa 	bl	800a574 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678c:	441a      	add	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679e:	441a      	add	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	615a      	str	r2, [r3, #20]
 80067a4:	e016      	b.n	80067d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80067ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80067b0:	d110      	bne.n	80067d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067b8:	2208      	movs	r2, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	6a38      	ldr	r0, [r7, #32]
 80067be:	f003 fed9 	bl	800a574 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ce:	441a      	add	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0210 	orr.w	r2, r2, #16
 80067e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f004 f857 	bl	800a89c <USB_ReadInterrupts>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067f8:	f040 80a7 	bne.w	800694a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f004 f85c 	bl	800a8c2 <USB_ReadDevAllOutEpInterrupt>
 800680a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800680c:	e099      	b.n	8006942 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 808e 	beq.w	8006936 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f004 f880 	bl	800a92a <USB_ReadDevOutEPInterrupt>
 800682a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00c      	beq.n	8006850 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	2301      	movs	r3, #1
 8006846:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fea4 	bl	8007598 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	2308      	movs	r3, #8
 800686a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800686c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 ff7a 	bl	8007768 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688a:	461a      	mov	r2, r3
 800688c:	2310      	movs	r3, #16
 800688e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d030      	beq.n	80068fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a2:	2b80      	cmp	r3, #128	@ 0x80
 80068a4:	d109      	bne.n	80068ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	78db      	ldrb	r3, [r3, #3]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d108      	bne.n	80068ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f006 fba5 	bl	800d034 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f6:	461a      	mov	r2, r3
 80068f8:	2302      	movs	r3, #2
 80068fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	2320      	movs	r3, #32
 8006916:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692e:	461a      	mov	r2, r3
 8006930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006934:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	3301      	adds	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f af62 	bne.w	800680e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f003 ffa4 	bl	800a89c <USB_ReadInterrupts>
 8006954:	4603      	mov	r3, r0
 8006956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800695a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800695e:	f040 80db 	bne.w	8006b18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f003 ffc5 	bl	800a8f6 <USB_ReadDevAllInEpInterrupt>
 800696c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006972:	e0cd      	b.n	8006b10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80c2 	beq.w	8006b04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	4611      	mov	r1, r2
 800698a:	4618      	mov	r0, r3
 800698c:	f003 ffeb 	bl	800a966 <USB_ReadDevInEPInterrupt>
 8006990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d057      	beq.n	8006a4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	69f9      	ldr	r1, [r7, #28]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069cc:	461a      	mov	r2, r3
 80069ce:	2301      	movs	r3, #1
 80069d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	799b      	ldrb	r3, [r3, #6]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d132      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	3320      	adds	r3, #32
 80069ea:	6819      	ldr	r1, [r3, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f0:	4613      	mov	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4403      	add	r3, r0
 80069fa:	331c      	adds	r3, #28
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4419      	add	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4403      	add	r3, r0
 8006a0e:	3320      	adds	r3, #32
 8006a10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d113      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	3324      	adds	r3, #36	@ 0x24
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f003 fff2 	bl	800aa24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f006 fa6f 	bl	800cf2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a62:	461a      	mov	r2, r3
 8006a64:	2308      	movs	r3, #8
 8006a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2310      	movs	r3, #16
 8006a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2340      	movs	r3, #64	@ 0x40
 8006a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d023      	beq.n	8006af2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006aaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006aac:	6a38      	ldr	r0, [r7, #32]
 8006aae:	f002 ffd9 	bl	8009a64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	3310      	adds	r3, #16
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d108      	bne.n	8006ae0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f006 fabc 	bl	800d058 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aec:	461a      	mov	r2, r3
 8006aee:	2302      	movs	r3, #2
 8006af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fcbd 	bl	800747e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	3301      	adds	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f47f af2e 	bne.w	8006974 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f003 febd 	bl	800a89c <USB_ReadInterrupts>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b2c:	d122      	bne.n	8006b74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d108      	bne.n	8006b5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b54:	2100      	movs	r1, #0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fea4 	bl	80078a4 <HAL_PCDEx_LPM_Callback>
 8006b5c:	e002      	b.n	8006b64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f006 fa5a 	bl	800d018 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f003 fe8f 	bl	800a89c <USB_ReadInterrupts>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b88:	d112      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d102      	bne.n	8006ba0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f006 fa16 	bl	800cfcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006bae:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f003 fe71 	bl	800a89c <USB_ReadInterrupts>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc4:	f040 80b7 	bne.w	8006d36 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2110      	movs	r1, #16
 8006be2:	4618      	mov	r0, r3
 8006be4:	f002 ff3e 	bl	8009a64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006be8:	2300      	movs	r3, #0
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bec:	e046      	b.n	8006c7c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	3301      	adds	r3, #1
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	791b      	ldrb	r3, [r3, #4]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d3b2      	bcc.n	8006bee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c96:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006c9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7bdb      	ldrb	r3, [r3, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cb4:	f043 030b 	orr.w	r3, r3, #11
 8006cb8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cca:	f043 030b 	orr.w	r3, r3, #11
 8006cce:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cd0:	e015      	b.n	8006cfe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ce0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ce4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006ce8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cf8:	f043 030b 	orr.w	r3, r3, #11
 8006cfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d0c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006d10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d20:	461a      	mov	r2, r3
 8006d22:	f003 fe7f 	bl	800aa24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695a      	ldr	r2, [r3, #20]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f003 fdae 	bl	800a89c <USB_ReadInterrupts>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4a:	d123      	bne.n	8006d94 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f003 fe44 	bl	800a9de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 fefb 	bl	8009b56 <USB_GetDevSpeed>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681c      	ldr	r4, [r3, #0]
 8006d6c:	f001 fa0a 	bl	8008184 <HAL_RCC_GetHCLKFreq>
 8006d70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f002 fbff 	bl	800957c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f006 f8fb 	bl	800cf7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f003 fd7f 	bl	800a89c <USB_ReadInterrupts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d10a      	bne.n	8006dbe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f006 f8d8 	bl	800cf5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f002 0208 	and.w	r2, r2, #8
 8006dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f003 fd6a 	bl	800a89c <USB_ReadInterrupts>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dce:	2b80      	cmp	r3, #128	@ 0x80
 8006dd0:	d123      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006dde:	2301      	movs	r3, #1
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de2:	e014      	b.n	8006e0e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d105      	bne.n	8006e08 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fb0a 	bl	800741c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d3e4      	bcc.n	8006de4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f003 fd3c 	bl	800a89c <USB_ReadInterrupts>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e2e:	d13c      	bne.n	8006eaa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e30:	2301      	movs	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e34:	e02b      	b.n	8006e8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	3318      	adds	r3, #24
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d115      	bne.n	8006e88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da12      	bge.n	8006e88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3317      	adds	r3, #23
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 faca 	bl	800741c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	791b      	ldrb	r3, [r3, #4]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d3cd      	bcc.n	8006e36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f003 fcf4 	bl	800a89c <USB_ReadInterrupts>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ebe:	d156      	bne.n	8006f6e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec4:	e045      	b.n	8006f52 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d12e      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006eee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da2b      	bge.n	8006f4c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006f00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d121      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f48:	6053      	str	r3, [r2, #4]
            break;
 8006f4a:	e008      	b.n	8006f5e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	3301      	adds	r3, #1
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	461a      	mov	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d3b3      	bcc.n	8006ec6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f003 fc92 	bl	800a89c <USB_ReadInterrupts>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f82:	d10a      	bne.n	8006f9a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f006 f879 	bl	800d07c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f003 fc7c 	bl	800a89c <USB_ReadInterrupts>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d115      	bne.n	8006fda <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f006 f869 	bl	800d098 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6859      	ldr	r1, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	e000      	b.n	8006fda <HAL_PCD_IRQHandler+0x93c>
      return;
 8006fd8:	bf00      	nop
    }
  }
}
 8006fda:	3734      	adds	r7, #52	@ 0x34
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}

08006fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_PCD_SetAddress+0x1a>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e012      	b.n	8007020 <HAL_PCD_SetAddress+0x40>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f003 fbdb 	bl	800a7cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	803b      	strh	r3, [r7, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800704a:	2b00      	cmp	r3, #0
 800704c:	da0f      	bge.n	800706e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	4613      	mov	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	3310      	adds	r3, #16
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	3304      	adds	r3, #4
 8007064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	705a      	strb	r2, [r3, #1]
 800706c:	e00f      	b.n	800708e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	f003 020f 	and.w	r2, r3, #15
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	b2da      	uxtb	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800709a:	883b      	ldrh	r3, [r7, #0]
 800709c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	78ba      	ldrb	r2, [r7, #2]
 80070a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070bc:	78bb      	ldrb	r3, [r7, #2]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d102      	bne.n	80070c8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_PCD_EP_Open+0xae>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e00e      	b.n	80070f4 <HAL_PCD_EP_Open+0xcc>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f002 fd5b 	bl	8009ba0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80070f2:	7afb      	ldrb	r3, [r7, #11]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800710c:	2b00      	cmp	r3, #0
 800710e:	da0f      	bge.n	8007130 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 020f 	and.w	r2, r3, #15
 8007116:	4613      	mov	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	3310      	adds	r3, #16
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	4413      	add	r3, r2
 8007124:	3304      	adds	r3, #4
 8007126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	705a      	strb	r2, [r3, #1]
 800712e:	e00f      	b.n	8007150 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	4613      	mov	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4413      	add	r3, r2
 8007146:	3304      	adds	r3, #4
 8007148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_PCD_EP_Close+0x6e>
 8007166:	2302      	movs	r3, #2
 8007168:	e00e      	b.n	8007188 <HAL_PCD_EP_Close+0x8c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fd99 	bl	8009cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	f003 020f 	and.w	r2, r3, #15
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	3304      	adds	r3, #4
 80071b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2200      	movs	r2, #0
 80071d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	799b      	ldrb	r3, [r3, #6]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d102      	bne.n	80071ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	799b      	ldrb	r3, [r3, #6]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6979      	ldr	r1, [r7, #20]
 80071f8:	f002 fe36 	bl	8009e68 <USB_EPStartXfer>

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007228:	681b      	ldr	r3, [r3, #0]
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	460b      	mov	r3, r1
 8007244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	4613      	mov	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	3310      	adds	r3, #16
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	3304      	adds	r3, #4
 800725c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2201      	movs	r2, #1
 8007274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	b2da      	uxtb	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	799b      	ldrb	r3, [r3, #6]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d102      	bne.n	8007290 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	799b      	ldrb	r3, [r3, #6]
 8007298:	461a      	mov	r2, r3
 800729a:	6979      	ldr	r1, [r7, #20]
 800729c:	f002 fde4 	bl	8009e68 <USB_EPStartXfer>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7912      	ldrb	r2, [r2, #4]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e04f      	b.n	8007368 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	da0f      	bge.n	80072f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	3310      	adds	r3, #16
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	3304      	adds	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	705a      	strb	r2, [r3, #1]
 80072ee:	e00d      	b.n	800730c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	4613      	mov	r3, r2
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
 8007304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	b2da      	uxtb	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_PCD_EP_SetStall+0x82>
 8007328:	2302      	movs	r3, #2
 800732a:	e01d      	b.n	8007368 <HAL_PCD_EP_SetStall+0xbe>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	4618      	mov	r0, r3
 800733c:	f003 f972 	bl	800a624 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	7999      	ldrb	r1, [r3, #6]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007358:	461a      	mov	r2, r3
 800735a:	f003 fb63 	bl	800aa24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	7912      	ldrb	r2, [r2, #4]
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e042      	b.n	8007414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800738e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da0f      	bge.n	80073b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	3310      	adds	r3, #16
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	3304      	adds	r3, #4
 80073ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	705a      	strb	r2, [r3, #1]
 80073b4:	e00f      	b.n	80073d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	4613      	mov	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_PCD_EP_ClrStall+0x86>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e00e      	b.n	8007414 <HAL_PCD_EP_ClrStall+0xa4>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68f9      	ldr	r1, [r7, #12]
 8007404:	4618      	mov	r0, r3
 8007406:	f003 f97b 	bl	800a700 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da0c      	bge.n	800744a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	3310      	adds	r3, #16
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	3304      	adds	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e00c      	b.n	8007464 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	4613      	mov	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	3304      	adds	r3, #4
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68f9      	ldr	r1, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	f002 ff9a 	bl	800a3a4 <USB_EPStopXfer>
 8007470:	4603      	mov	r3, r0
 8007472:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007474:	7afb      	ldrb	r3, [r7, #11]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b08a      	sub	sp, #40	@ 0x28
 8007482:	af02      	add	r7, sp, #8
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	3310      	adds	r3, #16
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	4413      	add	r3, r2
 80074a2:	3304      	adds	r3, #4
 80074a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d901      	bls.n	80074b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e06b      	b.n	800758e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d902      	bls.n	80074d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3303      	adds	r3, #3
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074da:	e02a      	b.n	8007532 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d902      	bls.n	80074f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3303      	adds	r3, #3
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68d9      	ldr	r1, [r3, #12]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	4603      	mov	r3, r0
 8007514:	6978      	ldr	r0, [r7, #20]
 8007516:	f002 ffef 	bl	800a4f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	441a      	add	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d809      	bhi.n	800755c <PCD_WriteEmptyTxFifo+0xde>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007550:	429a      	cmp	r2, r3
 8007552:	d203      	bcs.n	800755c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1bf      	bne.n	80074dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	429a      	cmp	r2, r3
 8007566:	d811      	bhi.n	800758c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	2201      	movs	r2, #1
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	43db      	mvns	r3, r3
 8007582:	6939      	ldr	r1, [r7, #16]
 8007584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007588:	4013      	ands	r3, r2
 800758a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	333c      	adds	r3, #60	@ 0x3c
 80075b0:	3304      	adds	r3, #4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	799b      	ldrb	r3, [r3, #6]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d17b      	bne.n	80076c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	4a61      	ldr	r2, [pc, #388]	@ (8007760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	f240 80b9 	bls.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80b3 	beq.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fa:	461a      	mov	r2, r3
 80075fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007600:	6093      	str	r3, [r2, #8]
 8007602:	e0a7      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761a:	461a      	mov	r2, r3
 800761c:	2320      	movs	r3, #32
 800761e:	6093      	str	r3, [r2, #8]
 8007620:	e098      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 8093 	bne.w	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4a4b      	ldr	r2, [pc, #300]	@ (8007760 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d90f      	bls.n	8007656 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007652:	6093      	str	r3, [r2, #8]
 8007654:	e07e      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	4413      	add	r3, r2
 8007668:	3304      	adds	r3, #4
 800766a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	0159      	lsls	r1, r3, #5
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	440b      	add	r3, r1
 8007678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d114      	bne.n	80076b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80076a0:	461a      	mov	r2, r3
 80076a2:	2101      	movs	r1, #1
 80076a4:	f003 f9be 	bl	800aa24 <USB_EP0_OutStart>
 80076a8:	e006      	b.n	80076b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f005 fc18 	bl	800cef4 <HAL_PCD_DataOutStageCallback>
 80076c4:	e046      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a26      	ldr	r2, [pc, #152]	@ (8007764 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d124      	bne.n	8007718 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e4:	461a      	mov	r2, r3
 80076e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	e032      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	2320      	movs	r3, #32
 8007708:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f005 fbef 	bl	800cef4 <HAL_PCD_DataOutStageCallback>
 8007716:	e01d      	b.n	8007754 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d114      	bne.n	8007748 <PCD_EP_OutXfrComplete_int+0x1b0>
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d108      	bne.n	8007748 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007740:	461a      	mov	r2, r3
 8007742:	2100      	movs	r1, #0
 8007744:	f003 f96e 	bl	800aa24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f005 fbd0 	bl	800cef4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	4f54300a 	.word	0x4f54300a
 8007764:	4f54310a 	.word	0x4f54310a

08007768 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	333c      	adds	r3, #60	@ 0x3c
 8007780:	3304      	adds	r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d90e      	bls.n	80077bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b4:	461a      	mov	r2, r3
 80077b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f005 fb87 	bl	800ced0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d90c      	bls.n	80077e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	799b      	ldrb	r3, [r3, #6]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d108      	bne.n	80077e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077dc:	461a      	mov	r2, r3
 80077de:	2101      	movs	r1, #1
 80077e0:	f003 f920 	bl	800aa24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	4f54300a 	.word	0x4f54300a

080077f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
 8007800:	4613      	mov	r3, r2
 8007802:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007812:	883b      	ldrh	r3, [r7, #0]
 8007814:	0419      	lsls	r1, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	430a      	orrs	r2, r1
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007820:	e028      	b.n	8007874 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	e00d      	b.n	8007852 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	3340      	adds	r3, #64	@ 0x40
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	3301      	adds	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	3b01      	subs	r3, #1
 8007858:	429a      	cmp	r2, r3
 800785a:	d3ec      	bcc.n	8007836 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800785c:	883b      	ldrh	r3, [r7, #0]
 800785e:	0418      	lsls	r0, r3, #16
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	3b01      	subs	r3, #1
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4302      	orrs	r2, r0
 800786c:	3340      	adds	r3, #64	@ 0x40
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	887a      	ldrh	r2, [r7, #2]
 8007894:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e267      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d075      	beq.n	80079c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80078da:	4b88      	ldr	r3, [pc, #544]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 030c 	and.w	r3, r3, #12
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d00c      	beq.n	8007900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078e6:	4b85      	ldr	r3, [pc, #532]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d112      	bne.n	8007918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078f2:	4b82      	ldr	r3, [pc, #520]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078fe:	d10b      	bne.n	8007918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007900:	4b7e      	ldr	r3, [pc, #504]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05b      	beq.n	80079c4 <HAL_RCC_OscConfig+0x108>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d157      	bne.n	80079c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e242      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007920:	d106      	bne.n	8007930 <HAL_RCC_OscConfig+0x74>
 8007922:	4b76      	ldr	r3, [pc, #472]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a75      	ldr	r2, [pc, #468]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	e01d      	b.n	800796c <HAL_RCC_OscConfig+0xb0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007938:	d10c      	bne.n	8007954 <HAL_RCC_OscConfig+0x98>
 800793a:	4b70      	ldr	r3, [pc, #448]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a6f      	ldr	r2, [pc, #444]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4b6d      	ldr	r3, [pc, #436]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a6c      	ldr	r2, [pc, #432]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 800794c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	e00b      	b.n	800796c <HAL_RCC_OscConfig+0xb0>
 8007954:	4b69      	ldr	r3, [pc, #420]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a68      	ldr	r2, [pc, #416]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 800795a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	4b66      	ldr	r3, [pc, #408]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a65      	ldr	r2, [pc, #404]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800796a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d013      	beq.n	800799c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007974:	f7fc fd80 	bl	8004478 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800797c:	f7fc fd7c 	bl	8004478 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b64      	cmp	r3, #100	@ 0x64
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e207      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800798e:	4b5b      	ldr	r3, [pc, #364]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0f0      	beq.n	800797c <HAL_RCC_OscConfig+0xc0>
 800799a:	e014      	b.n	80079c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799c:	f7fc fd6c 	bl	8004478 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079a4:	f7fc fd68 	bl	8004478 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b64      	cmp	r3, #100	@ 0x64
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e1f3      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079b6:	4b51      	ldr	r3, [pc, #324]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0xe8>
 80079c2:	e000      	b.n	80079c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d063      	beq.n	8007a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80079d2:	4b4a      	ldr	r3, [pc, #296]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079de:	4b47      	ldr	r3, [pc, #284]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d11c      	bne.n	8007a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079ea:	4b44      	ldr	r3, [pc, #272]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d116      	bne.n	8007a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079f6:	4b41      	ldr	r3, [pc, #260]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <HAL_RCC_OscConfig+0x152>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d001      	beq.n	8007a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e1c7      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4937      	ldr	r1, [pc, #220]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a22:	e03a      	b.n	8007a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d020      	beq.n	8007a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a2c:	4b34      	ldr	r3, [pc, #208]	@ (8007b00 <HAL_RCC_OscConfig+0x244>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a32:	f7fc fd21 	bl	8004478 <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a3a:	f7fc fd1d 	bl	8004478 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e1a8      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a58:	4b28      	ldr	r3, [pc, #160]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4925      	ldr	r1, [pc, #148]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]
 8007a6c:	e015      	b.n	8007a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a6e:	4b24      	ldr	r3, [pc, #144]	@ (8007b00 <HAL_RCC_OscConfig+0x244>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a74:	f7fc fd00 	bl	8004478 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a7c:	f7fc fcfc 	bl	8004478 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e187      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f0      	bne.n	8007a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d036      	beq.n	8007b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d016      	beq.n	8007adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aae:	4b15      	ldr	r3, [pc, #84]	@ (8007b04 <HAL_RCC_OscConfig+0x248>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab4:	f7fc fce0 	bl	8004478 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007abc:	f7fc fcdc 	bl	8004478 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e167      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ace:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <HAL_RCC_OscConfig+0x240>)
 8007ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <HAL_RCC_OscConfig+0x200>
 8007ada:	e01b      	b.n	8007b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007adc:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <HAL_RCC_OscConfig+0x248>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae2:	f7fc fcc9 	bl	8004478 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ae8:	e00e      	b.n	8007b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aea:	f7fc fcc5 	bl	8004478 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d907      	bls.n	8007b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e150      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
 8007afc:	40023800 	.word	0x40023800
 8007b00:	42470000 	.word	0x42470000
 8007b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b08:	4b88      	ldr	r3, [pc, #544]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1ea      	bne.n	8007aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8097 	beq.w	8007c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b26:	4b81      	ldr	r3, [pc, #516]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10f      	bne.n	8007b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]
 8007b36:	4b7d      	ldr	r3, [pc, #500]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b42:	4b7a      	ldr	r3, [pc, #488]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b52:	4b77      	ldr	r3, [pc, #476]	@ (8007d30 <HAL_RCC_OscConfig+0x474>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d118      	bne.n	8007b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b5e:	4b74      	ldr	r3, [pc, #464]	@ (8007d30 <HAL_RCC_OscConfig+0x474>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a73      	ldr	r2, [pc, #460]	@ (8007d30 <HAL_RCC_OscConfig+0x474>)
 8007b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b6a:	f7fc fc85 	bl	8004478 <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b72:	f7fc fc81 	bl	8004478 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e10c      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b84:	4b6a      	ldr	r3, [pc, #424]	@ (8007d30 <HAL_RCC_OscConfig+0x474>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0f0      	beq.n	8007b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d106      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x2ea>
 8007b98:	4b64      	ldr	r3, [pc, #400]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9c:	4a63      	ldr	r2, [pc, #396]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba4:	e01c      	b.n	8007be0 <HAL_RCC_OscConfig+0x324>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x30c>
 8007bae:	4b5f      	ldr	r3, [pc, #380]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bb4:	f043 0304 	orr.w	r3, r3, #4
 8007bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bba:	4b5c      	ldr	r3, [pc, #368]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bc0:	f043 0301 	orr.w	r3, r3, #1
 8007bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bc6:	e00b      	b.n	8007be0 <HAL_RCC_OscConfig+0x324>
 8007bc8:	4b58      	ldr	r3, [pc, #352]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bcc:	4a57      	ldr	r2, [pc, #348]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd4:	4b55      	ldr	r3, [pc, #340]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd8:	4a54      	ldr	r2, [pc, #336]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007bda:	f023 0304 	bic.w	r3, r3, #4
 8007bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d015      	beq.n	8007c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be8:	f7fc fc46 	bl	8004478 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bee:	e00a      	b.n	8007c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bf0:	f7fc fc42 	bl	8004478 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e0cb      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c06:	4b49      	ldr	r3, [pc, #292]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0ee      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x334>
 8007c12:	e014      	b.n	8007c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c14:	f7fc fc30 	bl	8004478 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c1a:	e00a      	b.n	8007c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c1c:	f7fc fc2c 	bl	8004478 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e0b5      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c32:	4b3e      	ldr	r3, [pc, #248]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1ee      	bne.n	8007c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d105      	bne.n	8007c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c44:	4b39      	ldr	r3, [pc, #228]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c48:	4a38      	ldr	r2, [pc, #224]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80a1 	beq.w	8007d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c5a:	4b34      	ldr	r3, [pc, #208]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 030c 	and.w	r3, r3, #12
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d05c      	beq.n	8007d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d141      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c6e:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <HAL_RCC_OscConfig+0x478>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c74:	f7fc fc00 	bl	8004478 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c7c:	f7fc fbfc 	bl	8004478 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e087      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c8e:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca8:	019b      	lsls	r3, r3, #6
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbc:	061b      	lsls	r3, r3, #24
 8007cbe:	491b      	ldr	r1, [pc, #108]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d34 <HAL_RCC_OscConfig+0x478>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cca:	f7fc fbd5 	bl	8004478 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd2:	f7fc fbd1 	bl	8004478 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e05c      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce4:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x416>
 8007cf0:	e054      	b.n	8007d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cf2:	4b10      	ldr	r3, [pc, #64]	@ (8007d34 <HAL_RCC_OscConfig+0x478>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf8:	f7fc fbbe 	bl	8004478 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d00:	f7fc fbba 	bl	8004478 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e045      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d12:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <HAL_RCC_OscConfig+0x470>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1f0      	bne.n	8007d00 <HAL_RCC_OscConfig+0x444>
 8007d1e:	e03d      	b.n	8007d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d107      	bne.n	8007d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e038      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	40007000 	.word	0x40007000
 8007d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d38:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <HAL_RCC_OscConfig+0x4ec>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d028      	beq.n	8007d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d121      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d11a      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d68:	4013      	ands	r3, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d111      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	085b      	lsrs	r3, r3, #1
 8007d80:	3b01      	subs	r3, #1
 8007d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d107      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800

08007dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0cc      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dc0:	4b68      	ldr	r3, [pc, #416]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d90c      	bls.n	8007de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dce:	4b65      	ldr	r3, [pc, #404]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd6:	4b63      	ldr	r3, [pc, #396]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e0b8      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e00:	4b59      	ldr	r3, [pc, #356]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a58      	ldr	r2, [pc, #352]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e18:	4b53      	ldr	r3, [pc, #332]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a52      	ldr	r2, [pc, #328]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e24:	4b50      	ldr	r3, [pc, #320]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	494d      	ldr	r1, [pc, #308]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d044      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d107      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e4a:	4b47      	ldr	r3, [pc, #284]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d119      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e07f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d003      	beq.n	8007e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d107      	bne.n	8007e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e06f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e067      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e8a:	4b37      	ldr	r3, [pc, #220]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f023 0203 	bic.w	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4934      	ldr	r1, [pc, #208]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e9c:	f7fc faec 	bl	8004478 <HAL_GetTick>
 8007ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea2:	e00a      	b.n	8007eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ea4:	f7fc fae8 	bl	8004478 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e04f      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eba:	4b2b      	ldr	r3, [pc, #172]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 020c 	and.w	r2, r3, #12
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d1eb      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ecc:	4b25      	ldr	r3, [pc, #148]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d20c      	bcs.n	8007ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eda:	4b22      	ldr	r3, [pc, #136]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee2:	4b20      	ldr	r3, [pc, #128]	@ (8007f64 <HAL_RCC_ClockConfig+0x1b8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d001      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e032      	b.n	8007f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f00:	4b19      	ldr	r3, [pc, #100]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4916      	ldr	r1, [pc, #88]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f1e:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	490e      	ldr	r1, [pc, #56]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f32:	f000 f821 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	091b      	lsrs	r3, r3, #4
 8007f3e:	f003 030f 	and.w	r3, r3, #15
 8007f42:	490a      	ldr	r1, [pc, #40]	@ (8007f6c <HAL_RCC_ClockConfig+0x1c0>)
 8007f44:	5ccb      	ldrb	r3, [r1, r3]
 8007f46:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4a:	4a09      	ldr	r2, [pc, #36]	@ (8007f70 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f4e:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <HAL_RCC_ClockConfig+0x1c8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc fa4c 	bl	80043f0 <HAL_InitTick>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40023c00 	.word	0x40023c00
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	080102f0 	.word	0x080102f0
 8007f70:	20000020 	.word	0x20000020
 8007f74:	20000024 	.word	0x20000024

08007f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f7c:	b094      	sub	sp, #80	@ 0x50
 8007f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f90:	4b79      	ldr	r3, [pc, #484]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 030c 	and.w	r3, r3, #12
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d00d      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	f200 80e1 	bhi.w	8008164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_RCC_GetSysClockFreq+0x34>
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d003      	beq.n	8007fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007faa:	e0db      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fac:	4b73      	ldr	r3, [pc, #460]	@ (800817c <HAL_RCC_GetSysClockFreq+0x204>)
 8007fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007fb0:	e0db      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fb2:	4b73      	ldr	r3, [pc, #460]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x208>)
 8007fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007fb6:	e0d8      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d063      	beq.n	8008096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fce:	4b6a      	ldr	r3, [pc, #424]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	099b      	lsrs	r3, r3, #6
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	f04f 0000 	mov.w	r0, #0
 8007ff2:	f04f 0100 	mov.w	r1, #0
 8007ff6:	0159      	lsls	r1, r3, #5
 8007ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ffc:	0150      	lsls	r0, r2, #5
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4621      	mov	r1, r4
 8008004:	1a51      	subs	r1, r2, r1
 8008006:	6139      	str	r1, [r7, #16]
 8008008:	4629      	mov	r1, r5
 800800a:	eb63 0301 	sbc.w	r3, r3, r1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800801c:	4659      	mov	r1, fp
 800801e:	018b      	lsls	r3, r1, #6
 8008020:	4651      	mov	r1, sl
 8008022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008026:	4651      	mov	r1, sl
 8008028:	018a      	lsls	r2, r1, #6
 800802a:	4651      	mov	r1, sl
 800802c:	ebb2 0801 	subs.w	r8, r2, r1
 8008030:	4659      	mov	r1, fp
 8008032:	eb63 0901 	sbc.w	r9, r3, r1
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800804a:	4690      	mov	r8, r2
 800804c:	4699      	mov	r9, r3
 800804e:	4623      	mov	r3, r4
 8008050:	eb18 0303 	adds.w	r3, r8, r3
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	462b      	mov	r3, r5
 8008058:	eb49 0303 	adc.w	r3, r9, r3
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800806a:	4629      	mov	r1, r5
 800806c:	024b      	lsls	r3, r1, #9
 800806e:	4621      	mov	r1, r4
 8008070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008074:	4621      	mov	r1, r4
 8008076:	024a      	lsls	r2, r1, #9
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800807e:	2200      	movs	r2, #0
 8008080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008088:	f7f8 fdde 	bl	8000c48 <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4613      	mov	r3, r2
 8008092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008094:	e058      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008096:	4b38      	ldr	r3, [pc, #224]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	099b      	lsrs	r3, r3, #6
 800809c:	2200      	movs	r2, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	4611      	mov	r1, r2
 80080a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080a6:	623b      	str	r3, [r7, #32]
 80080a8:	2300      	movs	r3, #0
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	f04f 0000 	mov.w	r0, #0
 80080b8:	f04f 0100 	mov.w	r1, #0
 80080bc:	0159      	lsls	r1, r3, #5
 80080be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080c2:	0150      	lsls	r0, r2, #5
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4641      	mov	r1, r8
 80080ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80080ce:	4649      	mov	r1, r9
 80080d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080e8:	ebb2 040a 	subs.w	r4, r2, sl
 80080ec:	eb63 050b 	sbc.w	r5, r3, fp
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	00eb      	lsls	r3, r5, #3
 80080fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080fe:	00e2      	lsls	r2, r4, #3
 8008100:	4614      	mov	r4, r2
 8008102:	461d      	mov	r5, r3
 8008104:	4643      	mov	r3, r8
 8008106:	18e3      	adds	r3, r4, r3
 8008108:	603b      	str	r3, [r7, #0]
 800810a:	464b      	mov	r3, r9
 800810c:	eb45 0303 	adc.w	r3, r5, r3
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	f04f 0200 	mov.w	r2, #0
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800811e:	4629      	mov	r1, r5
 8008120:	028b      	lsls	r3, r1, #10
 8008122:	4621      	mov	r1, r4
 8008124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008128:	4621      	mov	r1, r4
 800812a:	028a      	lsls	r2, r1, #10
 800812c:	4610      	mov	r0, r2
 800812e:	4619      	mov	r1, r3
 8008130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008132:	2200      	movs	r2, #0
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	61fa      	str	r2, [r7, #28]
 8008138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800813c:	f7f8 fd84 	bl	8000c48 <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4613      	mov	r3, r2
 8008146:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008148:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x200>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	0c1b      	lsrs	r3, r3, #16
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	3301      	adds	r3, #1
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800815a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008162:	e002      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <HAL_RCC_GetSysClockFreq+0x204>)
 8008166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800816a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800816c:	4618      	mov	r0, r3
 800816e:	3750      	adds	r7, #80	@ 0x50
 8008170:	46bd      	mov	sp, r7
 8008172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008176:	bf00      	nop
 8008178:	40023800 	.word	0x40023800
 800817c:	00f42400 	.word	0x00f42400
 8008180:	007a1200 	.word	0x007a1200

08008184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008188:	4b03      	ldr	r3, [pc, #12]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x14>)
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000020 	.word	0x20000020

0800819c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e07b      	b.n	80082a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d108      	bne.n	80081c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081be:	d009      	beq.n	80081d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	61da      	str	r2, [r3, #28]
 80081c6:	e005      	b.n	80081d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fb fe36 	bl	8003e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800820a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008258:	ea42 0103 	orr.w	r1, r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	f003 0104 	and.w	r1, r3, #4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827a:	f003 0210 	and.w	r2, r3, #16
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b088      	sub	sp, #32
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082be:	f7fc f8db 	bl	8004478 <HAL_GetTick>
 80082c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d001      	beq.n	80082d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80082d4:	2302      	movs	r3, #2
 80082d6:	e12a      	b.n	800852e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <HAL_SPI_Transmit+0x36>
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e122      	b.n	800852e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_Transmit+0x48>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e11b      	b.n	800852e <HAL_SPI_Transmit+0x280>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2203      	movs	r2, #3
 8008302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008344:	d10f      	bne.n	8008366 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b40      	cmp	r3, #64	@ 0x40
 8008372:	d007      	beq.n	8008384 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800838c:	d152      	bne.n	8008434 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <HAL_SPI_Transmit+0xee>
 8008396:	8b7b      	ldrh	r3, [r7, #26]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d145      	bne.n	8008428 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	1c9a      	adds	r2, r3, #2
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	3b01      	subs	r3, #1
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083c0:	e032      	b.n	8008428 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d112      	bne.n	80083f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	881a      	ldrh	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e0:	1c9a      	adds	r2, r3, #2
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80083f4:	e018      	b.n	8008428 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f6:	f7fc f83f 	bl	8004478 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d803      	bhi.n	800840e <HAL_SPI_Transmit+0x160>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d102      	bne.n	8008414 <HAL_SPI_Transmit+0x166>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e082      	b.n	800852e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800842c:	b29b      	uxth	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1c7      	bne.n	80083c2 <HAL_SPI_Transmit+0x114>
 8008432:	e053      	b.n	80084dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_SPI_Transmit+0x194>
 800843c:	8b7b      	ldrh	r3, [r7, #26]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d147      	bne.n	80084d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	7812      	ldrb	r2, [r2, #0]
 800844e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008468:	e033      	b.n	80084d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b02      	cmp	r3, #2
 8008476:	d113      	bne.n	80084a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	7812      	ldrb	r2, [r2, #0]
 8008484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008494:	b29b      	uxth	r3, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800849e:	e018      	b.n	80084d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084a0:	f7fb ffea 	bl	8004478 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d803      	bhi.n	80084b8 <HAL_SPI_Transmit+0x20a>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d102      	bne.n	80084be <HAL_SPI_Transmit+0x210>
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e02d      	b.n	800852e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1c6      	bne.n	800846a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fcbb 	bl	8008e5c <SPI_EndRxTxTransaction>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800852c:	2300      	movs	r3, #0
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b08a      	sub	sp, #40	@ 0x28
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008544:	2301      	movs	r3, #1
 8008546:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008548:	f7fb ff96 	bl	8004478 <HAL_GetTick>
 800854c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008554:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800855c:	887b      	ldrh	r3, [r7, #2]
 800855e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008560:	7ffb      	ldrb	r3, [r7, #31]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d00c      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x4a>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800856c:	d106      	bne.n	800857c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d102      	bne.n	800857c <HAL_SPI_TransmitReceive+0x46>
 8008576:	7ffb      	ldrb	r3, [r7, #31]
 8008578:	2b04      	cmp	r3, #4
 800857a:	d001      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800857c:	2302      	movs	r3, #2
 800857e:	e17f      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x5c>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x5c>
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e174      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_SPI_TransmitReceive+0x6e>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e16d      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d003      	beq.n	80085c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2205      	movs	r2, #5
 80085bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	887a      	ldrh	r2, [r7, #2]
 80085d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	887a      	ldrh	r2, [r7, #2]
 80085d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	887a      	ldrh	r2, [r7, #2]
 80085e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008600:	2b40      	cmp	r3, #64	@ 0x40
 8008602:	d007      	beq.n	8008614 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800861c:	d17e      	bne.n	800871c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_SPI_TransmitReceive+0xf6>
 8008626:	8afb      	ldrh	r3, [r7, #22]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d16c      	bne.n	8008706 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	1c9a      	adds	r2, r3, #2
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008650:	e059      	b.n	8008706 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d11b      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x162>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x162>
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	2b01      	cmp	r3, #1
 800866e:	d113      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008674:	881a      	ldrh	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008680:	1c9a      	adds	r2, r3, #2
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d119      	bne.n	80086da <HAL_SPI_TransmitReceive+0x1a4>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d014      	beq.n	80086da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ba:	b292      	uxth	r2, r2
 80086bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c2:	1c9a      	adds	r2, r3, #2
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086d6:	2301      	movs	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086da:	f7fb fecd 	bl	8004478 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d80d      	bhi.n	8008706 <HAL_SPI_TransmitReceive+0x1d0>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d009      	beq.n	8008706 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e0bc      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1a0      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x11c>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d19b      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x11c>
 800871a:	e082      	b.n	8008822 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <HAL_SPI_TransmitReceive+0x1f4>
 8008724:	8afb      	ldrh	r3, [r7, #22]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d171      	bne.n	800880e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	330c      	adds	r3, #12
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008750:	e05d      	b.n	800880e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b02      	cmp	r3, #2
 800875e:	d11c      	bne.n	800879a <HAL_SPI_TransmitReceive+0x264>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <HAL_SPI_TransmitReceive+0x264>
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	2b01      	cmp	r3, #1
 800876e:	d114      	bne.n	800879a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	7812      	ldrb	r2, [r2, #0]
 800877c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800878c:	b29b      	uxth	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d119      	bne.n	80087dc <HAL_SPI_TransmitReceive+0x2a6>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d014      	beq.n	80087dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087d8:	2301      	movs	r3, #1
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087dc:	f7fb fe4c 	bl	8004478 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d803      	bhi.n	80087f4 <HAL_SPI_TransmitReceive+0x2be>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d102      	bne.n	80087fa <HAL_SPI_TransmitReceive+0x2c4>
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e038      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d19c      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x21c>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800881c:	b29b      	uxth	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d197      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008822:	6a3a      	ldr	r2, [r7, #32]
 8008824:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fb18 	bl	8008e5c <SPI_EndRxTxTransaction>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d008      	beq.n	8008844 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e01d      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800884c:	2300      	movs	r3, #0
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800887e:	2300      	movs	r3, #0
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3728      	adds	r7, #40	@ 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800889c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d00c      	beq.n	80088c4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088b0:	d106      	bne.n	80088c0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <HAL_SPI_TransmitReceive_DMA+0x38>
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d001      	beq.n	80088c4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0cf      	b.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80088d0:	887b      	ldrh	r3, [r7, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e0c4      	b.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d101      	bne.n	80088e8 <HAL_SPI_TransmitReceive_DMA+0x60>
 80088e4:	2302      	movs	r3, #2
 80088e6:	e0bd      	b.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d003      	beq.n	8008904 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2205      	movs	r2, #5
 8008900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	887a      	ldrh	r2, [r7, #2]
 8008914:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	887a      	ldrh	r2, [r7, #2]
 800891a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	887a      	ldrh	r2, [r7, #2]
 8008926:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b04      	cmp	r3, #4
 8008944:	d108      	bne.n	8008958 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800894a:	4a48      	ldr	r2, [pc, #288]	@ (8008a6c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008952:	4a47      	ldr	r2, [pc, #284]	@ (8008a70 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8008954:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008956:	e007      	b.n	8008968 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895c:	4a45      	ldr	r2, [pc, #276]	@ (8008a74 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800895e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008964:	4a44      	ldr	r2, [pc, #272]	@ (8008a78 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008966:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896c:	4a43      	ldr	r2, [pc, #268]	@ (8008a7c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800896e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008974:	2200      	movs	r2, #0
 8008976:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	4619      	mov	r1, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800898e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008990:	f7fd f8b2 	bl	8005af8 <HAL_DMA_Start_IT>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	f043 0210 	orr.w	r2, r3, #16
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e058      	b.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089c6:	2200      	movs	r2, #0
 80089c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ce:	2200      	movs	r2, #0
 80089d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d6:	2200      	movs	r2, #0
 80089d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089de:	2200      	movs	r2, #0
 80089e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	4619      	mov	r1, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	330c      	adds	r3, #12
 80089f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80089fa:	f7fd f87d 	bl	8005af8 <HAL_DMA_Start_IT>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a08:	f043 0210 	orr.w	r2, r3, #16
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e023      	b.n	8008a64 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b40      	cmp	r3, #64	@ 0x40
 8008a28:	d007      	beq.n	8008a3a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0220 	orr.w	r2, r2, #32
 8008a50:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0202 	orr.w	r2, r2, #2
 8008a60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	08008c09 	.word	0x08008c09
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008c25 	.word	0x08008c25
 8008a78:	08008b79 	.word	0x08008b79
 8008a7c:	08008c41 	.word	0x08008c41

08008a80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008adc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ade:	f7fb fccb 	bl	8004478 <HAL_GetTick>
 8008ae2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af2:	d03b      	beq.n	8008b6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0220 	bic.w	r2, r2, #32
 8008b02:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10d      	bne.n	8008b28 <SPI_DMAReceiveCplt+0x58>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b14:	d108      	bne.n	8008b28 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0203 	bic.w	r2, r2, #3
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	e007      	b.n	8008b38 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	2164      	movs	r1, #100	@ 0x64
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f927 	bl	8008d90 <SPI_EndRxTransaction>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff ffa9 	bl	8008abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b6a:	e002      	b.n	8008b72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff ff87 	bl	8008a80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b84:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b86:	f7fb fc77 	bl	8004478 <HAL_GetTick>
 8008b8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b9a:	d02f      	beq.n	8008bfc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0220 	bic.w	r2, r2, #32
 8008baa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	2164      	movs	r1, #100	@ 0x64
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f953 	bl	8008e5c <SPI_EndRxTxTransaction>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc0:	f043 0220 	orr.w	r2, r3, #32
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0203 	bic.w	r2, r2, #3
 8008bd6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff ff61 	bl	8008abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bfa:	e002      	b.n	8008c02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7f9 fe2d 	bl	800285c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff ff3c 	bl	8008a94 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff ff38 	bl	8008aa8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0203 	bic.w	r2, r2, #3
 8008c5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	f043 0210 	orr.w	r2, r3, #16
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff ff22 	bl	8008abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c90:	f7fb fbf2 	bl	8004478 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ca0:	f7fb fbea 	bl	8004478 <HAL_GetTick>
 8008ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ca6:	4b39      	ldr	r3, [pc, #228]	@ (8008d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	015b      	lsls	r3, r3, #5
 8008cac:	0d1b      	lsrs	r3, r3, #20
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	fb02 f303 	mul.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cb6:	e054      	b.n	8008d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d050      	beq.n	8008d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cc0:	f7fb fbda 	bl	8004478 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d902      	bls.n	8008cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d13d      	bne.n	8008d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cee:	d111      	bne.n	8008d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cf8:	d004      	beq.n	8008d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d02:	d107      	bne.n	8008d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d1c:	d10f      	bne.n	8008d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e017      	b.n	8008d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	bf0c      	ite	eq
 8008d72:	2301      	moveq	r3, #1
 8008d74:	2300      	movne	r3, #0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d19b      	bne.n	8008cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000020 	.word	0x20000020

08008d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008da4:	d111      	bne.n	8008dca <SPI_EndRxTransaction+0x3a>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dae:	d004      	beq.n	8008dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db8:	d107      	bne.n	8008dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dd2:	d12a      	bne.n	8008e2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ddc:	d012      	beq.n	8008e04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2200      	movs	r2, #0
 8008de6:	2180      	movs	r1, #128	@ 0x80
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff ff49 	bl	8008c80 <SPI_WaitFlagStateUntilTimeout>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d02d      	beq.n	8008e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df8:	f043 0220 	orr.w	r2, r3, #32
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e026      	b.n	8008e52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff ff36 	bl	8008c80 <SPI_WaitFlagStateUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01a      	beq.n	8008e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1e:	f043 0220 	orr.w	r2, r3, #32
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e013      	b.n	8008e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	2101      	movs	r1, #1
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff ff23 	bl	8008c80 <SPI_WaitFlagStateUntilTimeout>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e44:	f043 0220 	orr.w	r2, r3, #32
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e000      	b.n	8008e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	2102      	movs	r1, #2
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff ff04 	bl	8008c80 <SPI_WaitFlagStateUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f043 0220 	orr.w	r2, r3, #32
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e032      	b.n	8008ef4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008efc <SPI_EndRxTxTransaction+0xa0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	@ (8008f00 <SPI_EndRxTxTransaction+0xa4>)
 8008e94:	fba2 2303 	umull	r2, r3, r2, r3
 8008e98:	0d5b      	lsrs	r3, r3, #21
 8008e9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ea2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008eac:	d112      	bne.n	8008ed4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2180      	movs	r1, #128	@ 0x80
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fee1 	bl	8008c80 <SPI_WaitFlagStateUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d016      	beq.n	8008ef2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ec8:	f043 0220 	orr.w	r2, r3, #32
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e00f      	b.n	8008ef4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eea:	2b80      	cmp	r3, #128	@ 0x80
 8008eec:	d0f2      	beq.n	8008ed4 <SPI_EndRxTxTransaction+0x78>
 8008eee:	e000      	b.n	8008ef2 <SPI_EndRxTxTransaction+0x96>
        break;
 8008ef0:	bf00      	nop
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000020 	.word	0x20000020
 8008f00:	165e9f81 	.word	0x165e9f81

08008f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e041      	b.n	8008f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fb f846 	bl	8003fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f000 f8f4 	bl	8009130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d101      	bne.n	8008fbe <HAL_TIM_ConfigClockSource+0x1c>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e0b4      	b.n	8009128 <HAL_TIM_ConfigClockSource+0x186>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fe4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff6:	d03e      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0xd4>
 8008ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffc:	f200 8087 	bhi.w	800910e <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009004:	f000 8086 	beq.w	8009114 <HAL_TIM_ConfigClockSource+0x172>
 8009008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900c:	d87f      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 800900e:	2b70      	cmp	r3, #112	@ 0x70
 8009010:	d01a      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0xa6>
 8009012:	2b70      	cmp	r3, #112	@ 0x70
 8009014:	d87b      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 8009016:	2b60      	cmp	r3, #96	@ 0x60
 8009018:	d050      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x11a>
 800901a:	2b60      	cmp	r3, #96	@ 0x60
 800901c:	d877      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 800901e:	2b50      	cmp	r3, #80	@ 0x50
 8009020:	d03c      	beq.n	800909c <HAL_TIM_ConfigClockSource+0xfa>
 8009022:	2b50      	cmp	r3, #80	@ 0x50
 8009024:	d873      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 8009026:	2b40      	cmp	r3, #64	@ 0x40
 8009028:	d058      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x13a>
 800902a:	2b40      	cmp	r3, #64	@ 0x40
 800902c:	d86f      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 800902e:	2b30      	cmp	r3, #48	@ 0x30
 8009030:	d064      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15a>
 8009032:	2b30      	cmp	r3, #48	@ 0x30
 8009034:	d86b      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 8009036:	2b20      	cmp	r3, #32
 8009038:	d060      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15a>
 800903a:	2b20      	cmp	r3, #32
 800903c:	d867      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d05c      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15a>
 8009042:	2b10      	cmp	r3, #16
 8009044:	d05a      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15a>
 8009046:	e062      	b.n	800910e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009058:	f000 f990 	bl	800937c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800906a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	609a      	str	r2, [r3, #8]
      break;
 8009074:	e04f      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009086:	f000 f979 	bl	800937c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009098:	609a      	str	r2, [r3, #8]
      break;
 800909a:	e03c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090a8:	461a      	mov	r2, r3
 80090aa:	f000 f8ed 	bl	8009288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2150      	movs	r1, #80	@ 0x50
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f946 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 80090ba:	e02c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090c8:	461a      	mov	r2, r3
 80090ca:	f000 f90c 	bl	80092e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2160      	movs	r1, #96	@ 0x60
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f936 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 80090da:	e01c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e8:	461a      	mov	r2, r3
 80090ea:	f000 f8cd 	bl	8009288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2140      	movs	r1, #64	@ 0x40
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f926 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 80090fa:	e00c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f000 f91d 	bl	8009346 <TIM_ITRx_SetConfig>
      break;
 800910c:	e003      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
      break;
 8009112:	e000      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009114:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a46      	ldr	r2, [pc, #280]	@ (800925c <TIM_Base_SetConfig+0x12c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914e:	d00f      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a43      	ldr	r2, [pc, #268]	@ (8009260 <TIM_Base_SetConfig+0x130>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00b      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a42      	ldr	r2, [pc, #264]	@ (8009264 <TIM_Base_SetConfig+0x134>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d007      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a41      	ldr	r2, [pc, #260]	@ (8009268 <TIM_Base_SetConfig+0x138>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a40      	ldr	r2, [pc, #256]	@ (800926c <TIM_Base_SetConfig+0x13c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d108      	bne.n	8009182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a35      	ldr	r2, [pc, #212]	@ (800925c <TIM_Base_SetConfig+0x12c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d02b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009190:	d027      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a32      	ldr	r2, [pc, #200]	@ (8009260 <TIM_Base_SetConfig+0x130>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d023      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a31      	ldr	r2, [pc, #196]	@ (8009264 <TIM_Base_SetConfig+0x134>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d01f      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a30      	ldr	r2, [pc, #192]	@ (8009268 <TIM_Base_SetConfig+0x138>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d01b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a2f      	ldr	r2, [pc, #188]	@ (800926c <TIM_Base_SetConfig+0x13c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d017      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009270 <TIM_Base_SetConfig+0x140>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009274 <TIM_Base_SetConfig+0x144>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009278 <TIM_Base_SetConfig+0x148>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2b      	ldr	r2, [pc, #172]	@ (800927c <TIM_Base_SetConfig+0x14c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009280 <TIM_Base_SetConfig+0x150>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a29      	ldr	r2, [pc, #164]	@ (8009284 <TIM_Base_SetConfig+0x154>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d108      	bne.n	80091f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a10      	ldr	r2, [pc, #64]	@ (800925c <TIM_Base_SetConfig+0x12c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_Base_SetConfig+0xf8>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a12      	ldr	r2, [pc, #72]	@ (800926c <TIM_Base_SetConfig+0x13c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d103      	bne.n	8009230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b01      	cmp	r3, #1
 8009240:	d105      	bne.n	800924e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f023 0201 	bic.w	r2, r3, #1
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	611a      	str	r2, [r3, #16]
  }
}
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40010000 	.word	0x40010000
 8009260:	40000400 	.word	0x40000400
 8009264:	40000800 	.word	0x40000800
 8009268:	40000c00 	.word	0x40000c00
 800926c:	40010400 	.word	0x40010400
 8009270:	40014000 	.word	0x40014000
 8009274:	40014400 	.word	0x40014400
 8009278:	40014800 	.word	0x40014800
 800927c:	40001800 	.word	0x40001800
 8009280:	40001c00 	.word	0x40001c00
 8009284:	40002000 	.word	0x40002000

08009288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f023 0201 	bic.w	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f023 030a 	bic.w	r3, r3, #10
 80092c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b087      	sub	sp, #28
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f023 0210 	bic.w	r2, r3, #16
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	031b      	lsls	r3, r3, #12
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	4313      	orrs	r3, r2
 800931a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	621a      	str	r2, [r3, #32]
}
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800935c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4313      	orrs	r3, r2
 8009364:	f043 0307 	orr.w	r3, r3, #7
 8009368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	609a      	str	r2, [r3, #8]
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	021a      	lsls	r2, r3, #8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	431a      	orrs	r2, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	609a      	str	r2, [r3, #8]
}
 80093b0:	bf00      	nop
 80093b2:	371c      	adds	r7, #28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e05a      	b.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4313      	orrs	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a21      	ldr	r2, [pc, #132]	@ (8009498 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d022      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009420:	d01d      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1d      	ldr	r2, [pc, #116]	@ (800949c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d018      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1b      	ldr	r2, [pc, #108]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a1a      	ldr	r2, [pc, #104]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00e      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a18      	ldr	r2, [pc, #96]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a17      	ldr	r2, [pc, #92]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a15      	ldr	r2, [pc, #84]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d10c      	bne.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4313      	orrs	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	40010000 	.word	0x40010000
 800949c:	40000400 	.word	0x40000400
 80094a0:	40000800 	.word	0x40000800
 80094a4:	40000c00 	.word	0x40000c00
 80094a8:	40010400 	.word	0x40010400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40001800 	.word	0x40001800

080094b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094b4:	b084      	sub	sp, #16
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	f107 001c 	add.w	r0, r7, #28
 80094c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d123      	bne.n	8009516 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80094e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d105      	bne.n	800950a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fae8 	bl	800aae0 <USB_CoreReset>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
 8009514:	e01b      	b.n	800954e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fadc 	bl	800aae0 <USB_CoreReset>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800952c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009540:	e005      	b.n	800954e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009546:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800954e:	7fbb      	ldrb	r3, [r7, #30]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d10b      	bne.n	800956c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f043 0206 	orr.w	r2, r3, #6
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f043 0220 	orr.w	r2, r3, #32
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009578:	b004      	add	sp, #16
 800957a:	4770      	bx	lr

0800957c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d165      	bne.n	800965c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4a41      	ldr	r2, [pc, #260]	@ (8009698 <USB_SetTurnaroundTime+0x11c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d906      	bls.n	80095a6 <USB_SetTurnaroundTime+0x2a>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a40      	ldr	r2, [pc, #256]	@ (800969c <USB_SetTurnaroundTime+0x120>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d202      	bcs.n	80095a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095a0:	230f      	movs	r3, #15
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e062      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4a3c      	ldr	r2, [pc, #240]	@ (800969c <USB_SetTurnaroundTime+0x120>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d306      	bcc.n	80095bc <USB_SetTurnaroundTime+0x40>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4a3b      	ldr	r2, [pc, #236]	@ (80096a0 <USB_SetTurnaroundTime+0x124>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d202      	bcs.n	80095bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095b6:	230e      	movs	r3, #14
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	e057      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4a38      	ldr	r2, [pc, #224]	@ (80096a0 <USB_SetTurnaroundTime+0x124>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d306      	bcc.n	80095d2 <USB_SetTurnaroundTime+0x56>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a37      	ldr	r2, [pc, #220]	@ (80096a4 <USB_SetTurnaroundTime+0x128>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d202      	bcs.n	80095d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095cc:	230d      	movs	r3, #13
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e04c      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4a33      	ldr	r2, [pc, #204]	@ (80096a4 <USB_SetTurnaroundTime+0x128>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d306      	bcc.n	80095e8 <USB_SetTurnaroundTime+0x6c>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a32      	ldr	r2, [pc, #200]	@ (80096a8 <USB_SetTurnaroundTime+0x12c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d802      	bhi.n	80095e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095e2:	230c      	movs	r3, #12
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e041      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a2f      	ldr	r2, [pc, #188]	@ (80096a8 <USB_SetTurnaroundTime+0x12c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d906      	bls.n	80095fe <USB_SetTurnaroundTime+0x82>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4a2e      	ldr	r2, [pc, #184]	@ (80096ac <USB_SetTurnaroundTime+0x130>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d802      	bhi.n	80095fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095f8:	230b      	movs	r3, #11
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e036      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4a2a      	ldr	r2, [pc, #168]	@ (80096ac <USB_SetTurnaroundTime+0x130>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d906      	bls.n	8009614 <USB_SetTurnaroundTime+0x98>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4a29      	ldr	r2, [pc, #164]	@ (80096b0 <USB_SetTurnaroundTime+0x134>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d802      	bhi.n	8009614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800960e:	230a      	movs	r3, #10
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e02b      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a26      	ldr	r2, [pc, #152]	@ (80096b0 <USB_SetTurnaroundTime+0x134>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d906      	bls.n	800962a <USB_SetTurnaroundTime+0xae>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4a25      	ldr	r2, [pc, #148]	@ (80096b4 <USB_SetTurnaroundTime+0x138>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d202      	bcs.n	800962a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009624:	2309      	movs	r3, #9
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e020      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4a21      	ldr	r2, [pc, #132]	@ (80096b4 <USB_SetTurnaroundTime+0x138>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d306      	bcc.n	8009640 <USB_SetTurnaroundTime+0xc4>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4a20      	ldr	r2, [pc, #128]	@ (80096b8 <USB_SetTurnaroundTime+0x13c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d802      	bhi.n	8009640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800963a:	2308      	movs	r3, #8
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e015      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a1d      	ldr	r2, [pc, #116]	@ (80096b8 <USB_SetTurnaroundTime+0x13c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d906      	bls.n	8009656 <USB_SetTurnaroundTime+0xda>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4a1c      	ldr	r2, [pc, #112]	@ (80096bc <USB_SetTurnaroundTime+0x140>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d202      	bcs.n	8009656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009650:	2307      	movs	r3, #7
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	e00a      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009656:	2306      	movs	r3, #6
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e007      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009662:	2309      	movs	r3, #9
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	e001      	b.n	800966c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009668:	2309      	movs	r3, #9
 800966a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	029b      	lsls	r3, r3, #10
 8009680:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009684:	431a      	orrs	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	00d8acbf 	.word	0x00d8acbf
 800969c:	00e4e1c0 	.word	0x00e4e1c0
 80096a0:	00f42400 	.word	0x00f42400
 80096a4:	01067380 	.word	0x01067380
 80096a8:	011a499f 	.word	0x011a499f
 80096ac:	01312cff 	.word	0x01312cff
 80096b0:	014ca43f 	.word	0x014ca43f
 80096b4:	016e3600 	.word	0x016e3600
 80096b8:	01a6ab1f 	.word	0x01a6ab1f
 80096bc:	01e84800 	.word	0x01e84800

080096c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f043 0201 	orr.w	r2, r3, #1
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f023 0201 	bic.w	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d115      	bne.n	8009752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009732:	200a      	movs	r0, #10
 8009734:	f7fa feac 	bl	8004490 <HAL_Delay>
      ms += 10U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	330a      	adds	r3, #10
 800973c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 f93f 	bl	800a9c2 <USB_GetMode>
 8009744:	4603      	mov	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d01e      	beq.n	8009788 <USB_SetCurrentMode+0x84>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2bc7      	cmp	r3, #199	@ 0xc7
 800974e:	d9f0      	bls.n	8009732 <USB_SetCurrentMode+0x2e>
 8009750:	e01a      	b.n	8009788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d115      	bne.n	8009784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009764:	200a      	movs	r0, #10
 8009766:	f7fa fe93 	bl	8004490 <HAL_Delay>
      ms += 10U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	330a      	adds	r3, #10
 800976e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f926 	bl	800a9c2 <USB_GetMode>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <USB_SetCurrentMode+0x84>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009780:	d9f0      	bls.n	8009764 <USB_SetCurrentMode+0x60>
 8009782:	e001      	b.n	8009788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e005      	b.n	8009794 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2bc8      	cmp	r3, #200	@ 0xc8
 800978c:	d101      	bne.n	8009792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800979c:	b084      	sub	sp, #16
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	e009      	b.n	80097d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3340      	adds	r3, #64	@ 0x40
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3301      	adds	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b0e      	cmp	r3, #14
 80097d4:	d9f2      	bls.n	80097bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d11c      	bne.n	8009818 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009802:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800980e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	639a      	str	r2, [r3, #56]	@ 0x38
 8009816:	e00b      	b.n	8009830 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009836:	461a      	mov	r2, r3
 8009838:	2300      	movs	r3, #0
 800983a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800983c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009840:	2b01      	cmp	r3, #1
 8009842:	d10d      	bne.n	8009860 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009848:	2b00      	cmp	r3, #0
 800984a:	d104      	bne.n	8009856 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800984c:	2100      	movs	r1, #0
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f968 	bl	8009b24 <USB_SetDevSpeed>
 8009854:	e008      	b.n	8009868 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f963 	bl	8009b24 <USB_SetDevSpeed>
 800985e:	e003      	b.n	8009868 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009860:	2103      	movs	r1, #3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f95e 	bl	8009b24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009868:	2110      	movs	r1, #16
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8fa 	bl	8009a64 <USB_FlushTxFifo>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f924 	bl	8009ac8 <USB_FlushRxFifo>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009890:	461a      	mov	r2, r3
 8009892:	2300      	movs	r3, #0
 8009894:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	461a      	mov	r2, r3
 800989e:	2300      	movs	r3, #0
 80098a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a8:	461a      	mov	r2, r3
 80098aa:	2300      	movs	r3, #0
 80098ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
 80098b2:	e043      	b.n	800993c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ca:	d118      	bne.n	80098fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098de:	461a      	mov	r2, r3
 80098e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e013      	b.n	8009910 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f4:	461a      	mov	r2, r3
 80098f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	e008      	b.n	8009910 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990a:	461a      	mov	r2, r3
 800990c:	2300      	movs	r3, #0
 800990e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991c:	461a      	mov	r2, r3
 800991e:	2300      	movs	r3, #0
 8009920:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992e:	461a      	mov	r2, r3
 8009930:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009934:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	3301      	adds	r3, #1
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009940:	461a      	mov	r2, r3
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4293      	cmp	r3, r2
 8009946:	d3b5      	bcc.n	80098b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009948:	2300      	movs	r3, #0
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	e043      	b.n	80099d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009964:	d118      	bne.n	8009998 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009978:	461a      	mov	r2, r3
 800997a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	e013      	b.n	80099aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800998e:	461a      	mov	r2, r3
 8009990:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	e008      	b.n	80099aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a4:	461a      	mov	r2, r3
 80099a6:	2300      	movs	r3, #0
 80099a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b6:	461a      	mov	r2, r3
 80099b8:	2300      	movs	r3, #0
 80099ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c8:	461a      	mov	r2, r3
 80099ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	3301      	adds	r3, #1
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099da:	461a      	mov	r2, r3
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	4293      	cmp	r3, r2
 80099e0:	d3b5      	bcc.n	800994e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d105      	bne.n	8009a18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	f043 0210 	orr.w	r2, r3, #16
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699a      	ldr	r2, [r3, #24]
 8009a1c:	4b10      	ldr	r3, [pc, #64]	@ (8009a60 <USB_DevInit+0x2c4>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f043 0208 	orr.w	r2, r3, #8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d107      	bne.n	8009a50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a48:	f043 0304 	orr.w	r3, r3, #4
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a5c:	b004      	add	sp, #16
 8009a5e:	4770      	bx	lr
 8009a60:	803c3800 	.word	0x803c3800

08009a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3301      	adds	r3, #1
 8009a76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a7e:	d901      	bls.n	8009a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e01b      	b.n	8009abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	daf2      	bge.n	8009a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	019b      	lsls	r3, r3, #6
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aa8:	d901      	bls.n	8009aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e006      	b.n	8009abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	d0f0      	beq.n	8009a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ae0:	d901      	bls.n	8009ae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e018      	b.n	8009b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	daf2      	bge.n	8009ad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2210      	movs	r2, #16
 8009af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b04:	d901      	bls.n	8009b0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e006      	b.n	8009b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d0f0      	beq.n	8009af8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b44:	4313      	orrs	r3, r2
 8009b46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b087      	sub	sp, #28
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f003 0306 	and.w	r3, r3, #6
 8009b6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b76:	2300      	movs	r3, #0
 8009b78:	75fb      	strb	r3, [r7, #23]
 8009b7a:	e00a      	b.n	8009b92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d002      	beq.n	8009b88 <USB_GetDevSpeed+0x32>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b06      	cmp	r3, #6
 8009b86:	d102      	bne.n	8009b8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	75fb      	strb	r3, [r7, #23]
 8009b8c:	e001      	b.n	8009b92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b8e:	230f      	movs	r3, #15
 8009b90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d13a      	bne.n	8009c32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d155      	bne.n	8009ca0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	791b      	ldrb	r3, [r3, #4]
 8009c0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	059b      	lsls	r3, r3, #22
 8009c16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	e036      	b.n	8009ca0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c38:	69da      	ldr	r2, [r3, #28]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	2101      	movs	r1, #1
 8009c44:	fa01 f303 	lsl.w	r3, r1, r3
 8009c48:	041b      	lsls	r3, r3, #16
 8009c4a:	68f9      	ldr	r1, [r7, #12]
 8009c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c50:	4313      	orrs	r3, r2
 8009c52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d11a      	bne.n	8009ca0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	791b      	ldrb	r3, [r3, #4]
 8009c84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c86:	430b      	orrs	r3, r1
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d161      	bne.n	8009d90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce2:	d11f      	bne.n	8009d24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 030f 	and.w	r3, r3, #15
 8009d34:	2101      	movs	r1, #1
 8009d36:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d44:	4013      	ands	r3, r2
 8009d46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d4e:	69da      	ldr	r2, [r3, #28]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	2101      	movs	r1, #1
 8009d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	43db      	mvns	r3, r3
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d68:	4013      	ands	r3, r2
 8009d6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	0159      	lsls	r1, r3, #5
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	440b      	add	r3, r1
 8009d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d86:	4619      	mov	r1, r3
 8009d88:	4b35      	ldr	r3, [pc, #212]	@ (8009e60 <USB_DeactivateEndpoint+0x1b0>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	600b      	str	r3, [r1, #0]
 8009d8e:	e060      	b.n	8009e52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009da6:	d11f      	bne.n	8009de8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	0151      	lsls	r1, r2, #5
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	0151      	lsls	r1, r2, #5
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	440a      	add	r2, r1
 8009dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009de6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfe:	041b      	lsls	r3, r3, #16
 8009e00:	43db      	mvns	r3, r3
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e08:	4013      	ands	r3, r2
 8009e0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e12:	69da      	ldr	r2, [r3, #28]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	43db      	mvns	r3, r3
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	0159      	lsls	r1, r3, #5
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	440b      	add	r3, r1
 8009e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4b05      	ldr	r3, [pc, #20]	@ (8009e64 <USB_DeactivateEndpoint+0x1b4>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	ec337800 	.word	0xec337800
 8009e64:	eff37800 	.word	0xeff37800

08009e68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08a      	sub	sp, #40	@ 0x28
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	f040 817f 	bne.w	800a188 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d132      	bne.n	8009ef8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009eb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	0151      	lsls	r1, r2, #5
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	440a      	add	r2, r1
 8009ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef0:	0cdb      	lsrs	r3, r3, #19
 8009ef2:	04db      	lsls	r3, r3, #19
 8009ef4:	6113      	str	r3, [r2, #16]
 8009ef6:	e097      	b.n	800a028 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	0151      	lsls	r1, r2, #5
 8009f0a:	69fa      	ldr	r2, [r7, #28]
 8009f0c:	440a      	add	r2, r1
 8009f0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f12:	0cdb      	lsrs	r3, r3, #19
 8009f14:	04db      	lsls	r3, r3, #19
 8009f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f3a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d11a      	bne.n	8009f78 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	691a      	ldr	r2, [r3, #16]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d903      	bls.n	8009f56 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	0151      	lsls	r1, r2, #5
 8009f68:	69fa      	ldr	r2, [r7, #28]
 8009f6a:	440a      	add	r2, r1
 8009f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f74:	6113      	str	r3, [r2, #16]
 8009f76:	e044      	b.n	800a002 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	4413      	add	r3, r2
 8009f82:	1e5a      	subs	r2, r3, #1
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	8afb      	ldrh	r3, [r7, #22]
 8009f9e:	04d9      	lsls	r1, r3, #19
 8009fa0:	4ba4      	ldr	r3, [pc, #656]	@ (800a234 <USB_EPStartXfer+0x3cc>)
 8009fa2:	400b      	ands	r3, r1
 8009fa4:	69b9      	ldr	r1, [r7, #24]
 8009fa6:	0148      	lsls	r0, r1, #5
 8009fa8:	69f9      	ldr	r1, [r7, #28]
 8009faa:	4401      	add	r1, r0
 8009fac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	791b      	ldrb	r3, [r3, #4]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d122      	bne.n	800a002 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009fda:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	8afb      	ldrh	r3, [r7, #22]
 8009fec:	075b      	lsls	r3, r3, #29
 8009fee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009ff2:	69b9      	ldr	r1, [r7, #24]
 8009ff4:	0148      	lsls	r0, r1, #5
 8009ff6:	69f9      	ldr	r1, [r7, #28]
 8009ff8:	4401      	add	r1, r0
 8009ffa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ffe:	4313      	orrs	r3, r2
 800a000:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a018:	69b9      	ldr	r1, [r7, #24]
 800a01a:	0148      	lsls	r0, r1, #5
 800a01c:	69f9      	ldr	r1, [r7, #28]
 800a01e:	4401      	add	r1, r0
 800a020:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a024:	4313      	orrs	r3, r2
 800a026:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d14b      	bne.n	800a0c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a042:	461a      	mov	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d128      	bne.n	800a0a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d110      	bne.n	800a084 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	440a      	add	r2, r1
 800a078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	e00f      	b.n	800a0a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	e166      	b.n	800a394 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	791b      	ldrb	r3, [r3, #4]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d015      	beq.n	800a11a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 814e 	beq.w	800a394 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	f003 030f 	and.w	r3, r3, #15
 800a108:	2101      	movs	r1, #1
 800a10a:	fa01 f303 	lsl.w	r3, r1, r3
 800a10e:	69f9      	ldr	r1, [r7, #28]
 800a110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	634b      	str	r3, [r1, #52]	@ 0x34
 800a118:	e13c      	b.n	800a394 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a126:	2b00      	cmp	r3, #0
 800a128:	d110      	bne.n	800a14c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a144:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	e00f      	b.n	800a16c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	0151      	lsls	r1, r2, #5
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	440a      	add	r2, r1
 800a162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a16a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	68d9      	ldr	r1, [r3, #12]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	b298      	uxth	r0, r3
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4603      	mov	r3, r0
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f9b9 	bl	800a4f8 <USB_WritePacket>
 800a186:	e105      	b.n	800a394 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a2:	0cdb      	lsrs	r3, r3, #19
 800a1a4:	04db      	lsls	r3, r3, #19
 800a1a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1ca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d132      	bne.n	800a238 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	689a      	ldr	r2, [r3, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a200:	69b9      	ldr	r1, [r7, #24]
 800a202:	0148      	lsls	r0, r1, #5
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	4401      	add	r1, r0
 800a208:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a20c:	4313      	orrs	r3, r2
 800a20e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	0151      	lsls	r1, r2, #5
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	440a      	add	r2, r1
 800a226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a22a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a22e:	6113      	str	r3, [r2, #16]
 800a230:	e062      	b.n	800a2f8 <USB_EPStartXfer+0x490>
 800a232:	bf00      	nop
 800a234:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d123      	bne.n	800a288 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a256:	69b9      	ldr	r1, [r7, #24]
 800a258:	0148      	lsls	r0, r1, #5
 800a25a:	69f9      	ldr	r1, [r7, #28]
 800a25c:	4401      	add	r1, r0
 800a25e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a262:	4313      	orrs	r3, r2
 800a264:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	0151      	lsls	r1, r2, #5
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	440a      	add	r2, r1
 800a27c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a280:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a284:	6113      	str	r3, [r2, #16]
 800a286:	e037      	b.n	800a2f8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	691a      	ldr	r2, [r3, #16]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	4413      	add	r3, r2
 800a292:	1e5a      	subs	r2, r3, #1
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	8afa      	ldrh	r2, [r7, #22]
 800a2a4:	fb03 f202 	mul.w	r2, r3, r2
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	8afb      	ldrh	r3, [r7, #22]
 800a2bc:	04d9      	lsls	r1, r3, #19
 800a2be:	4b38      	ldr	r3, [pc, #224]	@ (800a3a0 <USB_EPStartXfer+0x538>)
 800a2c0:	400b      	ands	r3, r1
 800a2c2:	69b9      	ldr	r1, [r7, #24]
 800a2c4:	0148      	lsls	r0, r1, #5
 800a2c6:	69f9      	ldr	r1, [r7, #28]
 800a2c8:	4401      	add	r1, r0
 800a2ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2de:	691a      	ldr	r2, [r3, #16]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2e8:	69b9      	ldr	r1, [r7, #24]
 800a2ea:	0148      	lsls	r0, r1, #5
 800a2ec:	69f9      	ldr	r1, [r7, #28]
 800a2ee:	4401      	add	r1, r0
 800a2f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d10d      	bne.n	800a31a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d009      	beq.n	800a31a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	68d9      	ldr	r1, [r3, #12]
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a316:	460a      	mov	r2, r1
 800a318:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d128      	bne.n	800a374 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d110      	bne.n	800a354 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a34c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e00f      	b.n	800a374 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	0151      	lsls	r1, r2, #5
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	440a      	add	r2, r1
 800a36a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a36e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a372:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	0151      	lsls	r1, r2, #5
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	440a      	add	r2, r1
 800a38a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a38e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a392:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	1ff80000 	.word	0x1ff80000

0800a3a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d14a      	bne.n	800a458 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3da:	f040 8086 	bne.w	800a4ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	7812      	ldrb	r2, [r2, #0]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a400:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	7812      	ldrb	r2, [r2, #0]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a420:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a424:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3301      	adds	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a432:	4293      	cmp	r3, r2
 800a434:	d902      	bls.n	800a43c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	75fb      	strb	r3, [r7, #23]
          break;
 800a43a:	e056      	b.n	800a4ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a454:	d0e7      	beq.n	800a426 <USB_EPStopXfer+0x82>
 800a456:	e048      	b.n	800a4ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	4413      	add	r3, r2
 800a462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a46c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a470:	d13b      	bne.n	800a4ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	7812      	ldrb	r2, [r2, #0]
 800a486:	0151      	lsls	r1, r2, #5
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	440a      	add	r2, r1
 800a48c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a490:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a494:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	0151      	lsls	r1, r2, #5
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	440a      	add	r2, r1
 800a4b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d902      	bls.n	800a4d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ce:	e00c      	b.n	800a4ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e8:	d0e7      	beq.n	800a4ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b089      	sub	sp, #36	@ 0x24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4611      	mov	r1, r2
 800a504:	461a      	mov	r2, r3
 800a506:	460b      	mov	r3, r1
 800a508:	71fb      	strb	r3, [r7, #7]
 800a50a:	4613      	mov	r3, r2
 800a50c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d123      	bne.n	800a566 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a51e:	88bb      	ldrh	r3, [r7, #4]
 800a520:	3303      	adds	r3, #3
 800a522:	089b      	lsrs	r3, r3, #2
 800a524:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a526:	2300      	movs	r3, #0
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	e018      	b.n	800a55e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	031a      	lsls	r2, r3, #12
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	4413      	add	r3, r2
 800a534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a538:	461a      	mov	r2, r3
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	3301      	adds	r3, #1
 800a544:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	3301      	adds	r3, #1
 800a54a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	3301      	adds	r3, #1
 800a550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3301      	adds	r3, #1
 800a556:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d3e2      	bcc.n	800a52c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3724      	adds	r7, #36	@ 0x24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a574:	b480      	push	{r7}
 800a576:	b08b      	sub	sp, #44	@ 0x2c
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	089b      	lsrs	r3, r3, #2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a592:	88fb      	ldrh	r3, [r7, #6]
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a59a:	2300      	movs	r3, #0
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	e014      	b.n	800a5ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	623b      	str	r3, [r7, #32]
 800a5ca:	6a3a      	ldr	r2, [r7, #32]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d3e6      	bcc.n	800a5a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a5d2:	8bfb      	ldrh	r3, [r7, #30]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01e      	beq.n	800a616 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	701a      	strb	r2, [r3, #0]
      i++;
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	3301      	adds	r3, #1
 800a602:	623b      	str	r3, [r7, #32]
      pDest++;
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	3301      	adds	r3, #1
 800a608:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a60a:	8bfb      	ldrh	r3, [r7, #30]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a610:	8bfb      	ldrh	r3, [r7, #30]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1ea      	bne.n	800a5ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a618:	4618      	mov	r0, r3
 800a61a:	372c      	adds	r7, #44	@ 0x2c
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	785b      	ldrb	r3, [r3, #1]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d12c      	bne.n	800a69a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	db12      	blt.n	800a678 <USB_EPSetStall+0x54>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00f      	beq.n	800a678 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	0151      	lsls	r1, r2, #5
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	440a      	add	r2, r1
 800a66e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a672:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a676:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a692:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	e02b      	b.n	800a6f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	db12      	blt.n	800a6d2 <USB_EPSetStall+0xae>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00f      	beq.n	800a6d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	0151      	lsls	r1, r2, #5
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	0151      	lsls	r1, r2, #5
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	440a      	add	r2, r1
 800a6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d128      	bne.n	800a76e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	0151      	lsls	r1, r2, #5
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	440a      	add	r2, r1
 800a732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a736:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a73a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	791b      	ldrb	r3, [r3, #4]
 800a740:	2b03      	cmp	r3, #3
 800a742:	d003      	beq.n	800a74c <USB_EPClearStall+0x4c>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	791b      	ldrb	r3, [r3, #4]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d138      	bne.n	800a7be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	0151      	lsls	r1, r2, #5
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	440a      	add	r2, r1
 800a762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e027      	b.n	800a7be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a788:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a78c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	791b      	ldrb	r3, [r3, #4]
 800a792:	2b03      	cmp	r3, #3
 800a794:	d003      	beq.n	800a79e <USB_EPClearStall+0x9e>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d10f      	bne.n	800a7be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	0151      	lsls	r1, r2, #5
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	440a      	add	r2, r1
 800a7b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a7ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a806:	4313      	orrs	r3, r2
 800a808:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a846:	f023 0302 	bic.w	r3, r3, #2
 800a84a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a888:	f043 0302 	orr.w	r3, r3, #2
 800a88c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b085      	sub	sp, #20
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	0c1b      	lsrs	r3, r3, #16
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	4013      	ands	r3, r2
 800a918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	b29b      	uxth	r3, r3
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	4013      	ands	r3, r2
 800a956:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a958:	68bb      	ldr	r3, [r7, #8]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a966:	b480      	push	{r7}
 800a968:	b087      	sub	sp, #28
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a988:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	fa22 f303 	lsr.w	r3, r2, r3
 800a996:	01db      	lsls	r3, r3, #7
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a9fc:	f023 0307 	bic.w	r3, r3, #7
 800aa00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	333c      	adds	r3, #60	@ 0x3c
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	4a26      	ldr	r2, [pc, #152]	@ (800aadc <USB_EP0_OutStart+0xb8>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d90a      	bls.n	800aa5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa58:	d101      	bne.n	800aa5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e037      	b.n	800aace <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa64:	461a      	mov	r2, r3
 800aa66:	2300      	movs	r3, #0
 800aa68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa8c:	f043 0318 	orr.w	r3, r3, #24
 800aa90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaa0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aaa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d10f      	bne.n	800aacc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab2:	461a      	mov	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aaca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	4f54300a 	.word	0x4f54300a

0800aae0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaf8:	d901      	bls.n	800aafe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e01b      	b.n	800ab36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	daf2      	bge.n	800aaec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f043 0201 	orr.w	r2, r3, #1
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab22:	d901      	bls.n	800ab28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e006      	b.n	800ab36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d0f0      	beq.n	800ab16 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab54:	f002 fc38 	bl	800d3c8 <USBD_static_malloc>
 800ab58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32b0      	adds	r2, #176	@ 0xb0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab70:	2302      	movs	r3, #2
 800ab72:	e0d4      	b.n	800ad1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ab78:	2100      	movs	r1, #0
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f003 fb86 	bl	800e28c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32b0      	adds	r2, #176	@ 0xb0
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	32b0      	adds	r2, #176	@ 0xb0
 800ab9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7c1b      	ldrb	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d138      	bne.n	800ac1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abac:	4b5e      	ldr	r3, [pc, #376]	@ (800ad28 <USBD_CDC_Init+0x1e4>)
 800abae:	7819      	ldrb	r1, [r3, #0]
 800abb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abb4:	2202      	movs	r2, #2
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f002 fae3 	bl	800d182 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abbc:	4b5a      	ldr	r3, [pc, #360]	@ (800ad28 <USBD_CDC_Init+0x1e4>)
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	f003 020f 	and.w	r2, r3, #15
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	3324      	adds	r3, #36	@ 0x24
 800abd2:	2201      	movs	r2, #1
 800abd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abd6:	4b55      	ldr	r3, [pc, #340]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800abd8:	7819      	ldrb	r1, [r3, #0]
 800abda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abde:	2202      	movs	r2, #2
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f002 face 	bl	800d182 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abe6:	4b51      	ldr	r3, [pc, #324]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 020f 	and.w	r2, r3, #15
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abfe:	2201      	movs	r2, #1
 800ac00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac02:	4b4b      	ldr	r3, [pc, #300]	@ (800ad30 <USBD_CDC_Init+0x1ec>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	f003 020f 	and.w	r2, r3, #15
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	3326      	adds	r3, #38	@ 0x26
 800ac18:	2210      	movs	r2, #16
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e035      	b.n	800ac8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac1e:	4b42      	ldr	r3, [pc, #264]	@ (800ad28 <USBD_CDC_Init+0x1e4>)
 800ac20:	7819      	ldrb	r1, [r3, #0]
 800ac22:	2340      	movs	r3, #64	@ 0x40
 800ac24:	2202      	movs	r2, #2
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f002 faab 	bl	800d182 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac2c:	4b3e      	ldr	r3, [pc, #248]	@ (800ad28 <USBD_CDC_Init+0x1e4>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f003 020f 	and.w	r2, r3, #15
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	440b      	add	r3, r1
 800ac40:	3324      	adds	r3, #36	@ 0x24
 800ac42:	2201      	movs	r2, #1
 800ac44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac46:	4b39      	ldr	r3, [pc, #228]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800ac48:	7819      	ldrb	r1, [r3, #0]
 800ac4a:	2340      	movs	r3, #64	@ 0x40
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f002 fa97 	bl	800d182 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac54:	4b35      	ldr	r3, [pc, #212]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 020f 	and.w	r2, r3, #15
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac70:	4b2f      	ldr	r3, [pc, #188]	@ (800ad30 <USBD_CDC_Init+0x1ec>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 020f 	and.w	r2, r3, #15
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3326      	adds	r3, #38	@ 0x26
 800ac86:	2210      	movs	r2, #16
 800ac88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac8a:	4b29      	ldr	r3, [pc, #164]	@ (800ad30 <USBD_CDC_Init+0x1ec>)
 800ac8c:	7819      	ldrb	r1, [r3, #0]
 800ac8e:	2308      	movs	r3, #8
 800ac90:	2203      	movs	r2, #3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f002 fa75 	bl	800d182 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac98:	4b25      	ldr	r3, [pc, #148]	@ (800ad30 <USBD_CDC_Init+0x1ec>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 020f 	and.w	r2, r3, #15
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3324      	adds	r3, #36	@ 0x24
 800acae:	2201      	movs	r2, #1
 800acb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	33b0      	adds	r3, #176	@ 0xb0
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ace8:	2302      	movs	r3, #2
 800acea:	e018      	b.n	800ad1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	7c1b      	ldrb	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800acf6:	7819      	ldrb	r1, [r3, #0]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f002 fb2c 	bl	800d360 <USBD_LL_PrepareReceive>
 800ad08:	e008      	b.n	800ad1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad0a:	4b08      	ldr	r3, [pc, #32]	@ (800ad2c <USBD_CDC_Init+0x1e8>)
 800ad0c:	7819      	ldrb	r1, [r3, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad14:	2340      	movs	r3, #64	@ 0x40
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f002 fb22 	bl	800d360 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	200000b3 	.word	0x200000b3
 800ad2c:	200000b4 	.word	0x200000b4
 800ad30:	200000b5 	.word	0x200000b5

0800ad34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad40:	4b3a      	ldr	r3, [pc, #232]	@ (800ae2c <USBD_CDC_DeInit+0xf8>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f002 fa41 	bl	800d1ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad4c:	4b37      	ldr	r3, [pc, #220]	@ (800ae2c <USBD_CDC_DeInit+0xf8>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 020f 	and.w	r2, r3, #15
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	3324      	adds	r3, #36	@ 0x24
 800ad62:	2200      	movs	r2, #0
 800ad64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad66:	4b32      	ldr	r3, [pc, #200]	@ (800ae30 <USBD_CDC_DeInit+0xfc>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f002 fa2e 	bl	800d1ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad72:	4b2f      	ldr	r3, [pc, #188]	@ (800ae30 <USBD_CDC_DeInit+0xfc>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	f003 020f 	and.w	r2, r3, #15
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad8e:	4b29      	ldr	r3, [pc, #164]	@ (800ae34 <USBD_CDC_DeInit+0x100>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f002 fa1a 	bl	800d1ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad9a:	4b26      	ldr	r3, [pc, #152]	@ (800ae34 <USBD_CDC_DeInit+0x100>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 020f 	and.w	r2, r3, #15
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	440b      	add	r3, r1
 800adae:	3324      	adds	r3, #36	@ 0x24
 800adb0:	2200      	movs	r2, #0
 800adb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adb4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae34 <USBD_CDC_DeInit+0x100>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	3326      	adds	r3, #38	@ 0x26
 800adca:	2200      	movs	r2, #0
 800adcc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	32b0      	adds	r2, #176	@ 0xb0
 800add8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01f      	beq.n	800ae20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	33b0      	adds	r3, #176	@ 0xb0
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	32b0      	adds	r2, #176	@ 0xb0
 800adfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f002 faee 	bl	800d3e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	32b0      	adds	r2, #176	@ 0xb0
 800ae12:	2100      	movs	r1, #0
 800ae14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200000b3 	.word	0x200000b3
 800ae30:	200000b4 	.word	0x200000b4
 800ae34:	200000b5 	.word	0x200000b5

0800ae38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	32b0      	adds	r2, #176	@ 0xb0
 800ae4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e0bf      	b.n	800afe8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d050      	beq.n	800af16 <USBD_CDC_Setup+0xde>
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	f040 80af 	bne.w	800afd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88db      	ldrh	r3, [r3, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d03a      	beq.n	800aef8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da1b      	bge.n	800aec4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	33b0      	adds	r3, #176	@ 0xb0
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aea2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	88d2      	ldrh	r2, [r2, #6]
 800aea8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b07      	cmp	r3, #7
 800aeb0:	bf28      	it	cs
 800aeb2:	2307      	movcs	r3, #7
 800aeb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	89fa      	ldrh	r2, [r7, #14]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 fd53 	bl	800c968 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aec2:	e090      	b.n	800afe6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	785a      	ldrb	r2, [r3, #1]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	88db      	ldrh	r3, [r3, #6]
 800aed2:	2b3f      	cmp	r3, #63	@ 0x3f
 800aed4:	d803      	bhi.n	800aede <USBD_CDC_Setup+0xa6>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	e000      	b.n	800aee0 <USBD_CDC_Setup+0xa8>
 800aede:	2240      	movs	r2, #64	@ 0x40
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aee6:	6939      	ldr	r1, [r7, #16]
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aeee:	461a      	mov	r2, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 fd65 	bl	800c9c0 <USBD_CtlPrepareRx>
      break;
 800aef6:	e076      	b.n	800afe6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	33b0      	adds	r3, #176	@ 0xb0
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	7850      	ldrb	r0, [r2, #1]
 800af0e:	2200      	movs	r2, #0
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	4798      	blx	r3
      break;
 800af14:	e067      	b.n	800afe6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b0b      	cmp	r3, #11
 800af1c:	d851      	bhi.n	800afc2 <USBD_CDC_Setup+0x18a>
 800af1e:	a201      	add	r2, pc, #4	@ (adr r2, 800af24 <USBD_CDC_Setup+0xec>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800af55 	.word	0x0800af55
 800af28:	0800afd1 	.word	0x0800afd1
 800af2c:	0800afc3 	.word	0x0800afc3
 800af30:	0800afc3 	.word	0x0800afc3
 800af34:	0800afc3 	.word	0x0800afc3
 800af38:	0800afc3 	.word	0x0800afc3
 800af3c:	0800afc3 	.word	0x0800afc3
 800af40:	0800afc3 	.word	0x0800afc3
 800af44:	0800afc3 	.word	0x0800afc3
 800af48:	0800afc3 	.word	0x0800afc3
 800af4c:	0800af7f 	.word	0x0800af7f
 800af50:	0800afa9 	.word	0x0800afa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d107      	bne.n	800af70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af60:	f107 030a 	add.w	r3, r7, #10
 800af64:	2202      	movs	r2, #2
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 fcfd 	bl	800c968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af6e:	e032      	b.n	800afd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fc7b 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	75fb      	strb	r3, [r7, #23]
          break;
 800af7c:	e02b      	b.n	800afd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b03      	cmp	r3, #3
 800af88:	d107      	bne.n	800af9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af8a:	f107 030d 	add.w	r3, r7, #13
 800af8e:	2201      	movs	r2, #1
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f001 fce8 	bl	800c968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af98:	e01d      	b.n	800afd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 fc66 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800afa2:	2303      	movs	r3, #3
 800afa4:	75fb      	strb	r3, [r7, #23]
          break;
 800afa6:	e016      	b.n	800afd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d00f      	beq.n	800afd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f001 fc59 	bl	800c86e <USBD_CtlError>
            ret = USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afc0:	e008      	b.n	800afd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fc52 	bl	800c86e <USBD_CtlError>
          ret = USBD_FAIL;
 800afca:	2303      	movs	r3, #3
 800afcc:	75fb      	strb	r3, [r7, #23]
          break;
 800afce:	e002      	b.n	800afd6 <USBD_CDC_Setup+0x19e>
          break;
 800afd0:	bf00      	nop
 800afd2:	e008      	b.n	800afe6 <USBD_CDC_Setup+0x1ae>
          break;
 800afd4:	bf00      	nop
      }
      break;
 800afd6:	e006      	b.n	800afe6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fc47 	bl	800c86e <USBD_CtlError>
      ret = USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	75fb      	strb	r3, [r7, #23]
      break;
 800afe4:	bf00      	nop
  }

  return (uint8_t)ret;
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	32b0      	adds	r2, #176	@ 0xb0
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b016:	2303      	movs	r3, #3
 800b018:	e065      	b.n	800b0e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	32b0      	adds	r2, #176	@ 0xb0
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	3318      	adds	r3, #24
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d02f      	beq.n	800b0a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	f003 020f 	and.w	r2, r3, #15
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	3318      	adds	r3, #24
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	78fb      	ldrb	r3, [r7, #3]
 800b05c:	f003 010f 	and.w	r1, r3, #15
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	460b      	mov	r3, r1
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	440b      	add	r3, r1
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4403      	add	r3, r0
 800b06c:	331c      	adds	r3, #28
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	fbb2 f1f3 	udiv	r1, r2, r3
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d112      	bne.n	800b0a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	f003 020f 	and.w	r2, r3, #15
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	3318      	adds	r3, #24
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b096:	78f9      	ldrb	r1, [r7, #3]
 800b098:	2300      	movs	r3, #0
 800b09a:	2200      	movs	r2, #0
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f002 f93e 	bl	800d31e <USBD_LL_Transmit>
 800b0a2:	e01f      	b.n	800b0e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	33b0      	adds	r3, #176	@ 0xb0
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d010      	beq.n	800b0e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	33b0      	adds	r3, #176	@ 0xb0
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b0e0:	78fa      	ldrb	r2, [r7, #3]
 800b0e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	32b0      	adds	r2, #176	@ 0xb0
 800b104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b108:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	32b0      	adds	r2, #176	@ 0xb0
 800b114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e01a      	b.n	800b156 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f002 f93c 	bl	800d3a2 <USBD_LL_GetRxDataSize>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	33b0      	adds	r3, #176	@ 0xb0
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b150:	4611      	mov	r1, r2
 800b152:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32b0      	adds	r2, #176	@ 0xb0
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d101      	bne.n	800b180 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e024      	b.n	800b1ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	33b0      	adds	r3, #176	@ 0xb0
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d019      	beq.n	800b1c8 <USBD_CDC_EP0_RxReady+0x6a>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b19a:	2bff      	cmp	r3, #255	@ 0xff
 800b19c:	d014      	beq.n	800b1c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	33b0      	adds	r3, #176	@ 0xb0
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	22ff      	movs	r2, #255	@ 0xff
 800b1c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1dc:	2182      	movs	r1, #130	@ 0x82
 800b1de:	4818      	ldr	r0, [pc, #96]	@ (800b240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1e0:	f000 fd0f 	bl	800bc02 <USBD_GetEpDesc>
 800b1e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	4815      	ldr	r0, [pc, #84]	@ (800b240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1ea:	f000 fd0a 	bl	800bc02 <USBD_GetEpDesc>
 800b1ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1f0:	2181      	movs	r1, #129	@ 0x81
 800b1f2:	4813      	ldr	r0, [pc, #76]	@ (800b240 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1f4:	f000 fd05 	bl	800bc02 <USBD_GetEpDesc>
 800b1f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2210      	movs	r2, #16
 800b204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d006      	beq.n	800b21a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2200      	movs	r2, #0
 800b210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b214:	711a      	strb	r2, [r3, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b228:	711a      	strb	r2, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2243      	movs	r2, #67	@ 0x43
 800b232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b234:	4b02      	ldr	r3, [pc, #8]	@ (800b240 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000070 	.word	0x20000070

0800b244 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b24c:	2182      	movs	r1, #130	@ 0x82
 800b24e:	4818      	ldr	r0, [pc, #96]	@ (800b2b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b250:	f000 fcd7 	bl	800bc02 <USBD_GetEpDesc>
 800b254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b256:	2101      	movs	r1, #1
 800b258:	4815      	ldr	r0, [pc, #84]	@ (800b2b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b25a:	f000 fcd2 	bl	800bc02 <USBD_GetEpDesc>
 800b25e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b260:	2181      	movs	r1, #129	@ 0x81
 800b262:	4813      	ldr	r0, [pc, #76]	@ (800b2b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b264:	f000 fccd 	bl	800bc02 <USBD_GetEpDesc>
 800b268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2210      	movs	r2, #16
 800b274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	2200      	movs	r2, #0
 800b280:	711a      	strb	r2, [r3, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f042 0202 	orr.w	r2, r2, #2
 800b288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d006      	beq.n	800b29e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	711a      	strb	r2, [r3, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f042 0202 	orr.w	r2, r2, #2
 800b29c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2243      	movs	r2, #67	@ 0x43
 800b2a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2a4:	4b02      	ldr	r3, [pc, #8]	@ (800b2b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20000070 	.word	0x20000070

0800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2bc:	2182      	movs	r1, #130	@ 0x82
 800b2be:	4818      	ldr	r0, [pc, #96]	@ (800b320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2c0:	f000 fc9f 	bl	800bc02 <USBD_GetEpDesc>
 800b2c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	4815      	ldr	r0, [pc, #84]	@ (800b320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2ca:	f000 fc9a 	bl	800bc02 <USBD_GetEpDesc>
 800b2ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2d0:	2181      	movs	r1, #129	@ 0x81
 800b2d2:	4813      	ldr	r0, [pc, #76]	@ (800b320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2d4:	f000 fc95 	bl	800bc02 <USBD_GetEpDesc>
 800b2d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2210      	movs	r2, #16
 800b2e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d006      	beq.n	800b2fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2f4:	711a      	strb	r2, [r3, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b308:	711a      	strb	r2, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2243      	movs	r2, #67	@ 0x43
 800b312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b314:	4b02      	ldr	r3, [pc, #8]	@ (800b320 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20000070 	.word	0x20000070

0800b324 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	220a      	movs	r2, #10
 800b330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b332:	4b03      	ldr	r3, [pc, #12]	@ (800b340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	2000002c 	.word	0x2000002c

0800b344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b354:	2303      	movs	r3, #3
 800b356:	e009      	b.n	800b36c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	33b0      	adds	r3, #176	@ 0xb0
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b378:	b480      	push	{r7}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	32b0      	adds	r2, #176	@ 0xb0
 800b38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b392:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e008      	b.n	800b3b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	371c      	adds	r7, #28
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	32b0      	adds	r2, #176	@ 0xb0
 800b3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e004      	b.n	800b3ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	32b0      	adds	r2, #176	@ 0xb0
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	32b0      	adds	r2, #176	@ 0xb0
 800b41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	e018      	b.n	800b458 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7c1b      	ldrb	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b42e:	4b0c      	ldr	r3, [pc, #48]	@ (800b460 <USBD_CDC_ReceivePacket+0x68>)
 800b430:	7819      	ldrb	r1, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 ff8f 	bl	800d360 <USBD_LL_PrepareReceive>
 800b442:	e008      	b.n	800b456 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b444:	4b06      	ldr	r3, [pc, #24]	@ (800b460 <USBD_CDC_ReceivePacket+0x68>)
 800b446:	7819      	ldrb	r1, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b44e:	2340      	movs	r3, #64	@ 0x40
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 ff85 	bl	800d360 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	200000b4 	.word	0x200000b4

0800b464 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b478:	2303      	movs	r3, #3
 800b47a:	e01f      	b.n	800b4bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	79fa      	ldrb	r2, [r7, #7]
 800b4ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f001 fdff 	bl	800d0b4 <USBD_LL_Init>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	e025      	b.n	800b528 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	32ae      	adds	r2, #174	@ 0xae
 800b4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00f      	beq.n	800b518 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	32ae      	adds	r2, #174	@ 0xae
 800b502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	f107 020e 	add.w	r2, r7, #14
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	4602      	mov	r2, r0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f001 fe07 	bl	800d14c <USBD_LL_Start>
 800b53e:	4603      	mov	r3, r0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d009      	beq.n	800b58c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	4611      	mov	r1, r2
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	4798      	blx	r3
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	460b      	mov	r3, r1
 800b5a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	78fa      	ldrb	r2, [r7, #3]
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4798      	blx	r3
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 f90c 	bl	800c7fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5fe:	f003 031f 	and.w	r3, r3, #31
 800b602:	2b02      	cmp	r3, #2
 800b604:	d01a      	beq.n	800b63c <USBD_LL_SetupStage+0x72>
 800b606:	2b02      	cmp	r3, #2
 800b608:	d822      	bhi.n	800b650 <USBD_LL_SetupStage+0x86>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <USBD_LL_SetupStage+0x4a>
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d00a      	beq.n	800b628 <USBD_LL_SetupStage+0x5e>
 800b612:	e01d      	b.n	800b650 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fb63 	bl	800bce8 <USBD_StdDevReq>
 800b622:	4603      	mov	r3, r0
 800b624:	73fb      	strb	r3, [r7, #15]
      break;
 800b626:	e020      	b.n	800b66a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fbcb 	bl	800bdcc <USBD_StdItfReq>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]
      break;
 800b63a:	e016      	b.n	800b66a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc2d 	bl	800bea4 <USBD_StdEPReq>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
      break;
 800b64e:	e00c      	b.n	800b66a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b656:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 fdd4 	bl	800d20c <USBD_LL_StallEP>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
      break;
 800b668:	bf00      	nop
  }

  return ret;
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	460b      	mov	r3, r1
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d16e      	bne.n	800b76a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	f040 8098 	bne.w	800b7d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d913      	bls.n	800b6d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	689a      	ldr	r2, [r3, #8]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	1ad2      	subs	r2, r2, r3
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	68da      	ldr	r2, [r3, #12]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	bf28      	it	cs
 800b6c6:	4613      	movcs	r3, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	6879      	ldr	r1, [r7, #4]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f001 f994 	bl	800c9fa <USBD_CtlContinueRx>
 800b6d2:	e07d      	b.n	800b7d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d014      	beq.n	800b70c <USBD_LL_DataOutStage+0x98>
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d81d      	bhi.n	800b722 <USBD_LL_DataOutStage+0xae>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <USBD_LL_DataOutStage+0x7c>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d003      	beq.n	800b6f6 <USBD_LL_DataOutStage+0x82>
 800b6ee:	e018      	b.n	800b722 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	75bb      	strb	r3, [r7, #22]
            break;
 800b6f4:	e018      	b.n	800b728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	4619      	mov	r1, r3
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fa64 	bl	800bbce <USBD_CoreFindIF>
 800b706:	4603      	mov	r3, r0
 800b708:	75bb      	strb	r3, [r7, #22]
            break;
 800b70a:	e00d      	b.n	800b728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b712:	b2db      	uxtb	r3, r3
 800b714:	4619      	mov	r1, r3
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fa66 	bl	800bbe8 <USBD_CoreFindEP>
 800b71c:	4603      	mov	r3, r0
 800b71e:	75bb      	strb	r3, [r7, #22]
            break;
 800b720:	e002      	b.n	800b728 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	75bb      	strb	r3, [r7, #22]
            break;
 800b726:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d119      	bne.n	800b762 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b03      	cmp	r3, #3
 800b738:	d113      	bne.n	800b762 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b73a:	7dba      	ldrb	r2, [r7, #22]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	32ae      	adds	r2, #174	@ 0xae
 800b740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00b      	beq.n	800b762 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b74a:	7dba      	ldrb	r2, [r7, #22]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b752:	7dba      	ldrb	r2, [r7, #22]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	32ae      	adds	r2, #174	@ 0xae
 800b758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 f95a 	bl	800ca1c <USBD_CtlSendStatus>
 800b768:	e032      	b.n	800b7d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b770:	b2db      	uxtb	r3, r3
 800b772:	4619      	mov	r1, r3
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 fa37 	bl	800bbe8 <USBD_CoreFindEP>
 800b77a:	4603      	mov	r3, r0
 800b77c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b77e:	7dbb      	ldrb	r3, [r7, #22]
 800b780:	2bff      	cmp	r3, #255	@ 0xff
 800b782:	d025      	beq.n	800b7d0 <USBD_LL_DataOutStage+0x15c>
 800b784:	7dbb      	ldrb	r3, [r7, #22]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d122      	bne.n	800b7d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b03      	cmp	r3, #3
 800b794:	d117      	bne.n	800b7c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b796:	7dba      	ldrb	r2, [r7, #22]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	32ae      	adds	r2, #174	@ 0xae
 800b79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00f      	beq.n	800b7c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b7a6:	7dba      	ldrb	r2, [r7, #22]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b7ae:	7dba      	ldrb	r2, [r7, #22]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	32ae      	adds	r2, #174	@ 0xae
 800b7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	7afa      	ldrb	r2, [r7, #11]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	4798      	blx	r3
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	e000      	b.n	800b7d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3718      	adds	r7, #24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b086      	sub	sp, #24
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d16f      	bne.n	800b8ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d15a      	bne.n	800b8b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	429a      	cmp	r2, r3
 800b808:	d914      	bls.n	800b834 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	689a      	ldr	r2, [r3, #8]
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	1ad2      	subs	r2, r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	461a      	mov	r2, r3
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f001 f8bc 	bl	800c99e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b826:	2300      	movs	r3, #0
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f001 fd97 	bl	800d360 <USBD_LL_PrepareReceive>
 800b832:	e03f      	b.n	800b8b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	68da      	ldr	r2, [r3, #12]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d11c      	bne.n	800b87a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b848:	429a      	cmp	r2, r3
 800b84a:	d316      	bcc.n	800b87a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b856:	429a      	cmp	r2, r3
 800b858:	d20f      	bcs.n	800b87a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b85a:	2200      	movs	r2, #0
 800b85c:	2100      	movs	r1, #0
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f001 f89d 	bl	800c99e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b86c:	2300      	movs	r3, #0
 800b86e:	2200      	movs	r2, #0
 800b870:	2100      	movs	r1, #0
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f001 fd74 	bl	800d360 <USBD_LL_PrepareReceive>
 800b878:	e01c      	b.n	800b8b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b03      	cmp	r3, #3
 800b884:	d10f      	bne.n	800b8a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d009      	beq.n	800b8a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8a6:	2180      	movs	r1, #128	@ 0x80
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f001 fcaf 	bl	800d20c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f001 f8c7 	bl	800ca42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d03a      	beq.n	800b934 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff fe42 	bl	800b548 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8cc:	e032      	b.n	800b934 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f985 	bl	800bbe8 <USBD_CoreFindEP>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2bff      	cmp	r3, #255	@ 0xff
 800b8e6:	d025      	beq.n	800b934 <USBD_LL_DataInStage+0x15a>
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d122      	bne.n	800b934 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d11c      	bne.n	800b934 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8fa:	7dfa      	ldrb	r2, [r7, #23]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	32ae      	adds	r2, #174	@ 0xae
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d014      	beq.n	800b934 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b90a:	7dfa      	ldrb	r2, [r7, #23]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b912:	7dfa      	ldrb	r2, [r7, #23]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	32ae      	adds	r2, #174	@ 0xae
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	7afa      	ldrb	r2, [r7, #11]
 800b920:	4611      	mov	r1, r2
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b92a:	7dbb      	ldrb	r3, [r7, #22]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b930:	7dbb      	ldrb	r3, [r7, #22]
 800b932:	e000      	b.n	800b936 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b976:	2b00      	cmp	r3, #0
 800b978:	d014      	beq.n	800b9a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00e      	beq.n	800b9a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6852      	ldr	r2, [r2, #4]
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	4611      	mov	r1, r2
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9a4:	2340      	movs	r3, #64	@ 0x40
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 fbe9 	bl	800d182 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2240      	movs	r2, #64	@ 0x40
 800b9bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9c0:	2340      	movs	r3, #64	@ 0x40
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2180      	movs	r1, #128	@ 0x80
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fbdb 	bl	800d182 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2240      	movs	r2, #64	@ 0x40
 800b9d6:	621a      	str	r2, [r3, #32]

  return ret;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b083      	sub	sp, #12
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b04      	cmp	r3, #4
 800ba14:	d006      	beq.n	800ba24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2204      	movs	r2, #4
 800ba28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b04      	cmp	r3, #4
 800ba4c:	d106      	bne.n	800ba5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d110      	bne.n	800baa0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00b      	beq.n	800baa0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d005      	beq.n	800baa0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b082      	sub	sp, #8
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	32ae      	adds	r2, #174	@ 0xae
 800bac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bac8:	2303      	movs	r3, #3
 800baca:	e01c      	b.n	800bb06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d115      	bne.n	800bb04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	32ae      	adds	r2, #174	@ 0xae
 800bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	32ae      	adds	r2, #174	@ 0xae
 800baf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4611      	mov	r1, r2
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	32ae      	adds	r2, #174	@ 0xae
 800bb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e01c      	b.n	800bb6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d115      	bne.n	800bb68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	32ae      	adds	r2, #174	@ 0xae
 800bb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	32ae      	adds	r2, #174	@ 0xae
 800bb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb60:	78fa      	ldrb	r2, [r7, #3]
 800bb62:	4611      	mov	r1, r2
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00e      	beq.n	800bbc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	6852      	ldr	r2, [r2, #4]
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b086      	sub	sp, #24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	885b      	ldrh	r3, [r3, #2]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	7812      	ldrb	r2, [r2, #0]
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d91f      	bls.n	800bc68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc2e:	e013      	b.n	800bc58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc30:	f107 030a 	add.w	r3, r7, #10
 800bc34:	4619      	mov	r1, r3
 800bc36:	6978      	ldr	r0, [r7, #20]
 800bc38:	f000 f81b 	bl	800bc72 <USBD_GetNextDesc>
 800bc3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	785b      	ldrb	r3, [r3, #1]
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	d108      	bne.n	800bc58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	789b      	ldrb	r3, [r3, #2]
 800bc4e:	78fa      	ldrb	r2, [r7, #3]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d008      	beq.n	800bc66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	885b      	ldrh	r3, [r3, #2]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	897b      	ldrh	r3, [r7, #10]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d8e5      	bhi.n	800bc30 <USBD_GetEpDesc+0x2e>
 800bc64:	e000      	b.n	800bc68 <USBD_GetEpDesc+0x66>
          break;
 800bc66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc68:	693b      	ldr	r3, [r7, #16]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b085      	sub	sp, #20
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	7812      	ldrb	r2, [r2, #0]
 800bc88:	4413      	add	r3, r2
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b087      	sub	sp, #28
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bcc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	b21a      	sxth	r2, r3
 800bcd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	b21b      	sxth	r3, r3
 800bcd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bcda:	89fb      	ldrh	r3, [r7, #14]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcfe:	2b40      	cmp	r3, #64	@ 0x40
 800bd00:	d005      	beq.n	800bd0e <USBD_StdDevReq+0x26>
 800bd02:	2b40      	cmp	r3, #64	@ 0x40
 800bd04:	d857      	bhi.n	800bdb6 <USBD_StdDevReq+0xce>
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00f      	beq.n	800bd2a <USBD_StdDevReq+0x42>
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	d153      	bne.n	800bdb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	32ae      	adds	r2, #174	@ 0xae
 800bd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
      break;
 800bd28:	e04a      	b.n	800bdc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	2b09      	cmp	r3, #9
 800bd30:	d83b      	bhi.n	800bdaa <USBD_StdDevReq+0xc2>
 800bd32:	a201      	add	r2, pc, #4	@ (adr r2, 800bd38 <USBD_StdDevReq+0x50>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bd8d 	.word	0x0800bd8d
 800bd3c:	0800bda1 	.word	0x0800bda1
 800bd40:	0800bdab 	.word	0x0800bdab
 800bd44:	0800bd97 	.word	0x0800bd97
 800bd48:	0800bdab 	.word	0x0800bdab
 800bd4c:	0800bd6b 	.word	0x0800bd6b
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bdab 	.word	0x0800bdab
 800bd58:	0800bd83 	.word	0x0800bd83
 800bd5c:	0800bd75 	.word	0x0800bd75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa3c 	bl	800c1e0 <USBD_GetDescriptor>
          break;
 800bd68:	e024      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fba1 	bl	800c4b4 <USBD_SetAddress>
          break;
 800bd72:	e01f      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fbe0 	bl	800c53c <USBD_SetConfig>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]
          break;
 800bd80:	e018      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fc83 	bl	800c690 <USBD_GetConfig>
          break;
 800bd8a:	e013      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fcb4 	bl	800c6fc <USBD_GetStatus>
          break;
 800bd94:	e00e      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fce3 	bl	800c764 <USBD_SetFeature>
          break;
 800bd9e:	e009      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fd07 	bl	800c7b6 <USBD_ClrFeature>
          break;
 800bda8:	e004      	b.n	800bdb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fd5e 	bl	800c86e <USBD_CtlError>
          break;
 800bdb2:	bf00      	nop
      }
      break;
 800bdb4:	e004      	b.n	800bdc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fd58 	bl	800c86e <USBD_CtlError>
      break;
 800bdbe:	bf00      	nop
  }

  return ret;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop

0800bdcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bde2:	2b40      	cmp	r3, #64	@ 0x40
 800bde4:	d005      	beq.n	800bdf2 <USBD_StdItfReq+0x26>
 800bde6:	2b40      	cmp	r3, #64	@ 0x40
 800bde8:	d852      	bhi.n	800be90 <USBD_StdItfReq+0xc4>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <USBD_StdItfReq+0x26>
 800bdee:	2b20      	cmp	r3, #32
 800bdf0:	d14e      	bne.n	800be90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d840      	bhi.n	800be82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	889b      	ldrh	r3, [r3, #4]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b01      	cmp	r3, #1
 800be08:	d836      	bhi.n	800be78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	889b      	ldrh	r3, [r3, #4]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff fedb 	bl	800bbce <USBD_CoreFindIF>
 800be18:	4603      	mov	r3, r0
 800be1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	2bff      	cmp	r3, #255	@ 0xff
 800be20:	d01d      	beq.n	800be5e <USBD_StdItfReq+0x92>
 800be22:	7bbb      	ldrb	r3, [r7, #14]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d11a      	bne.n	800be5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be28:	7bba      	ldrb	r2, [r7, #14]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	32ae      	adds	r2, #174	@ 0xae
 800be2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00f      	beq.n	800be58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800be38:	7bba      	ldrb	r2, [r7, #14]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be40:	7bba      	ldrb	r2, [r7, #14]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	32ae      	adds	r2, #174	@ 0xae
 800be46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4798      	blx	r3
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be56:	e004      	b.n	800be62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be5c:	e001      	b.n	800be62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	88db      	ldrh	r3, [r3, #6]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d110      	bne.n	800be8c <USBD_StdItfReq+0xc0>
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10d      	bne.n	800be8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fdd3 	bl	800ca1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be76:	e009      	b.n	800be8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fcf7 	bl	800c86e <USBD_CtlError>
          break;
 800be80:	e004      	b.n	800be8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fcf2 	bl	800c86e <USBD_CtlError>
          break;
 800be8a:	e000      	b.n	800be8e <USBD_StdItfReq+0xc2>
          break;
 800be8c:	bf00      	nop
      }
      break;
 800be8e:	e004      	b.n	800be9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fceb 	bl	800c86e <USBD_CtlError>
      break;
 800be98:	bf00      	nop
  }

  return ret;
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	889b      	ldrh	r3, [r3, #4]
 800beb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bec0:	2b40      	cmp	r3, #64	@ 0x40
 800bec2:	d007      	beq.n	800bed4 <USBD_StdEPReq+0x30>
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	f200 817f 	bhi.w	800c1c8 <USBD_StdEPReq+0x324>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d02a      	beq.n	800bf24 <USBD_StdEPReq+0x80>
 800bece:	2b20      	cmp	r3, #32
 800bed0:	f040 817a 	bne.w	800c1c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff fe85 	bl	800bbe8 <USBD_CoreFindEP>
 800bede:	4603      	mov	r3, r0
 800bee0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bee2:	7b7b      	ldrb	r3, [r7, #13]
 800bee4:	2bff      	cmp	r3, #255	@ 0xff
 800bee6:	f000 8174 	beq.w	800c1d2 <USBD_StdEPReq+0x32e>
 800beea:	7b7b      	ldrb	r3, [r7, #13]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 8170 	bne.w	800c1d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bef2:	7b7a      	ldrb	r2, [r7, #13]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800befa:	7b7a      	ldrb	r2, [r7, #13]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	32ae      	adds	r2, #174	@ 0xae
 800bf00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f000 8163 	beq.w	800c1d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf0c:	7b7a      	ldrb	r2, [r7, #13]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	@ 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf22:	e156      	b.n	800c1d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d008      	beq.n	800bf3e <USBD_StdEPReq+0x9a>
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	f300 8145 	bgt.w	800c1bc <USBD_StdEPReq+0x318>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 809b 	beq.w	800c06e <USBD_StdEPReq+0x1ca>
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d03c      	beq.n	800bfb6 <USBD_StdEPReq+0x112>
 800bf3c:	e13e      	b.n	800c1bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d002      	beq.n	800bf50 <USBD_StdEPReq+0xac>
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d016      	beq.n	800bf7c <USBD_StdEPReq+0xd8>
 800bf4e:	e02c      	b.n	800bfaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <USBD_StdEPReq+0xce>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b80      	cmp	r3, #128	@ 0x80
 800bf5a:	d00a      	beq.n	800bf72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f953 	bl	800d20c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf66:	2180      	movs	r1, #128	@ 0x80
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 f94f 	bl	800d20c <USBD_LL_StallEP>
 800bf6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf70:	e020      	b.n	800bfb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fc7a 	bl	800c86e <USBD_CtlError>
              break;
 800bf7a:	e01b      	b.n	800bfb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	885b      	ldrh	r3, [r3, #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10e      	bne.n	800bfa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <USBD_StdEPReq+0xfe>
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b80      	cmp	r3, #128	@ 0x80
 800bf8e:	d008      	beq.n	800bfa2 <USBD_StdEPReq+0xfe>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f001 f935 	bl	800d20c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fd3a 	bl	800ca1c <USBD_CtlSendStatus>

              break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fc5e 	bl	800c86e <USBD_CtlError>
              break;
 800bfb2:	bf00      	nop
          }
          break;
 800bfb4:	e107      	b.n	800c1c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d002      	beq.n	800bfc8 <USBD_StdEPReq+0x124>
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d016      	beq.n	800bff4 <USBD_StdEPReq+0x150>
 800bfc6:	e04b      	b.n	800c060 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00d      	beq.n	800bfea <USBD_StdEPReq+0x146>
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b80      	cmp	r3, #128	@ 0x80
 800bfd2:	d00a      	beq.n	800bfea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 f917 	bl	800d20c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfde:	2180      	movs	r1, #128	@ 0x80
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 f913 	bl	800d20c <USBD_LL_StallEP>
 800bfe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe8:	e040      	b.n	800c06c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fc3e 	bl	800c86e <USBD_CtlError>
              break;
 800bff2:	e03b      	b.n	800c06c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d136      	bne.n	800c06a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 f91d 	bl	800d24a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fd03 	bl	800ca1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c016:	7bbb      	ldrb	r3, [r7, #14]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fde4 	bl	800bbe8 <USBD_CoreFindEP>
 800c020:	4603      	mov	r3, r0
 800c022:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c024:	7b7b      	ldrb	r3, [r7, #13]
 800c026:	2bff      	cmp	r3, #255	@ 0xff
 800c028:	d01f      	beq.n	800c06a <USBD_StdEPReq+0x1c6>
 800c02a:	7b7b      	ldrb	r3, [r7, #13]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d11c      	bne.n	800c06a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c030:	7b7a      	ldrb	r2, [r7, #13]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c038:	7b7a      	ldrb	r2, [r7, #13]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	32ae      	adds	r2, #174	@ 0xae
 800c03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d010      	beq.n	800c06a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c048:	7b7a      	ldrb	r2, [r7, #13]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	32ae      	adds	r2, #174	@ 0xae
 800c04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
 800c05a:	4603      	mov	r3, r0
 800c05c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c05e:	e004      	b.n	800c06a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fc03 	bl	800c86e <USBD_CtlError>
              break;
 800c068:	e000      	b.n	800c06c <USBD_StdEPReq+0x1c8>
              break;
 800c06a:	bf00      	nop
          }
          break;
 800c06c:	e0ab      	b.n	800c1c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b02      	cmp	r3, #2
 800c078:	d002      	beq.n	800c080 <USBD_StdEPReq+0x1dc>
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d032      	beq.n	800c0e4 <USBD_StdEPReq+0x240>
 800c07e:	e097      	b.n	800c1b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d007      	beq.n	800c096 <USBD_StdEPReq+0x1f2>
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b80      	cmp	r3, #128	@ 0x80
 800c08a:	d004      	beq.n	800c096 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fbed 	bl	800c86e <USBD_CtlError>
                break;
 800c094:	e091      	b.n	800c1ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da0b      	bge.n	800c0b6 <USBD_StdEPReq+0x212>
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	3310      	adds	r3, #16
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	e00b      	b.n	800c0ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0bc:	4613      	mov	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fc43 	bl	800c968 <USBD_CtlSendData>
              break;
 800c0e2:	e06a      	b.n	800c1ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	da11      	bge.n	800c110 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	f003 020f 	and.w	r2, r3, #15
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	3324      	adds	r3, #36	@ 0x24
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d117      	bne.n	800c136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fbb0 	bl	800c86e <USBD_CtlError>
                  break;
 800c10e:	e054      	b.n	800c1ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	f003 020f 	and.w	r2, r3, #15
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	4613      	mov	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	440b      	add	r3, r1
 800c122:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d104      	bne.n	800c136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fb9d 	bl	800c86e <USBD_CtlError>
                  break;
 800c134:	e041      	b.n	800c1ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	da0b      	bge.n	800c156 <USBD_StdEPReq+0x2b2>
 800c13e:	7bbb      	ldrb	r3, [r7, #14]
 800c140:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c144:	4613      	mov	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	3310      	adds	r3, #16
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	4413      	add	r3, r2
 800c152:	3304      	adds	r3, #4
 800c154:	e00b      	b.n	800c16e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c15c:	4613      	mov	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4413      	add	r3, r2
 800c16c:	3304      	adds	r3, #4
 800c16e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <USBD_StdEPReq+0x2d8>
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	2b80      	cmp	r3, #128	@ 0x80
 800c17a:	d103      	bne.n	800c184 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e00e      	b.n	800c1a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 f87d 	bl	800d288 <USBD_LL_IsStallEP>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2201      	movs	r2, #1
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	e002      	b.n	800c1a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fbdd 	bl	800c968 <USBD_CtlSendData>
              break;
 800c1ae:	e004      	b.n	800c1ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb5b 	bl	800c86e <USBD_CtlError>
              break;
 800c1b8:	bf00      	nop
          }
          break;
 800c1ba:	e004      	b.n	800c1c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fb55 	bl	800c86e <USBD_CtlError>
          break;
 800c1c4:	bf00      	nop
      }
      break;
 800c1c6:	e005      	b.n	800c1d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fb4f 	bl	800c86e <USBD_CtlError>
      break;
 800c1d0:	e000      	b.n	800c1d4 <USBD_StdEPReq+0x330>
      break;
 800c1d2:	bf00      	nop
  }

  return ret;
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	885b      	ldrh	r3, [r3, #2]
 800c1fa:	0a1b      	lsrs	r3, r3, #8
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	3b01      	subs	r3, #1
 800c200:	2b06      	cmp	r3, #6
 800c202:	f200 8128 	bhi.w	800c456 <USBD_GetDescriptor+0x276>
 800c206:	a201      	add	r2, pc, #4	@ (adr r2, 800c20c <USBD_GetDescriptor+0x2c>)
 800c208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20c:	0800c229 	.word	0x0800c229
 800c210:	0800c241 	.word	0x0800c241
 800c214:	0800c281 	.word	0x0800c281
 800c218:	0800c457 	.word	0x0800c457
 800c21c:	0800c457 	.word	0x0800c457
 800c220:	0800c3f7 	.word	0x0800c3f7
 800c224:	0800c423 	.word	0x0800c423
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	7c12      	ldrb	r2, [r2, #16]
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
 800c23c:	60f8      	str	r0, [r7, #12]
      break;
 800c23e:	e112      	b.n	800c466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7c1b      	ldrb	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10d      	bne.n	800c264 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c250:	f107 0208 	add.w	r2, r7, #8
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
 800c258:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	3301      	adds	r3, #1
 800c25e:	2202      	movs	r2, #2
 800c260:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c262:	e100      	b.n	800c466 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26c:	f107 0208 	add.w	r2, r7, #8
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	701a      	strb	r2, [r3, #0]
      break;
 800c27e:	e0f2      	b.n	800c466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	885b      	ldrh	r3, [r3, #2]
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b05      	cmp	r3, #5
 800c288:	f200 80ac 	bhi.w	800c3e4 <USBD_GetDescriptor+0x204>
 800c28c:	a201      	add	r2, pc, #4	@ (adr r2, 800c294 <USBD_GetDescriptor+0xb4>)
 800c28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c292:	bf00      	nop
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2e1 	.word	0x0800c2e1
 800c29c:	0800c315 	.word	0x0800c315
 800c2a0:	0800c349 	.word	0x0800c349
 800c2a4:	0800c37d 	.word	0x0800c37d
 800c2a8:	0800c3b1 	.word	0x0800c3b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	7c12      	ldrb	r2, [r2, #16]
 800c2c4:	f107 0108 	add.w	r1, r7, #8
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
 800c2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ce:	e091      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 facb 	bl	800c86e <USBD_CtlError>
            err++;
 800c2d8:	7afb      	ldrb	r3, [r7, #11]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2de:	e089      	b.n	800c3f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7c12      	ldrb	r2, [r2, #16]
 800c2f8:	f107 0108 	add.w	r1, r7, #8
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4798      	blx	r3
 800c300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c302:	e077      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fab1 	bl	800c86e <USBD_CtlError>
            err++;
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	3301      	adds	r3, #1
 800c310:	72fb      	strb	r3, [r7, #11]
          break;
 800c312:	e06f      	b.n	800c3f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c336:	e05d      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fa97 	bl	800c86e <USBD_CtlError>
            err++;
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	3301      	adds	r3, #1
 800c344:	72fb      	strb	r3, [r7, #11]
          break;
 800c346:	e055      	b.n	800c3f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36a:	e043      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa7d 	bl	800c86e <USBD_CtlError>
            err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
          break;
 800c37a:	e03b      	b.n	800c3f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c39e:	e029      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa63 	bl	800c86e <USBD_CtlError>
            err++;
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ae:	e021      	b.n	800c3f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e00f      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa49 	bl	800c86e <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e007      	b.n	800c3f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa41 	bl	800c86e <USBD_CtlError>
          err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3f2:	bf00      	nop
      }
      break;
 800c3f4:	e037      	b.n	800c466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7c1b      	ldrb	r3, [r3, #16]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d109      	bne.n	800c412 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c406:	f107 0208 	add.w	r2, r7, #8
 800c40a:	4610      	mov	r0, r2
 800c40c:	4798      	blx	r3
 800c40e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c410:	e029      	b.n	800c466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fa2a 	bl	800c86e <USBD_CtlError>
        err++;
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	3301      	adds	r3, #1
 800c41e:	72fb      	strb	r3, [r7, #11]
      break;
 800c420:	e021      	b.n	800c466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7c1b      	ldrb	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10d      	bne.n	800c446 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c432:	f107 0208 	add.w	r2, r7, #8
 800c436:	4610      	mov	r0, r2
 800c438:	4798      	blx	r3
 800c43a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	3301      	adds	r3, #1
 800c440:	2207      	movs	r2, #7
 800c442:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c444:	e00f      	b.n	800c466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fa10 	bl	800c86e <USBD_CtlError>
        err++;
 800c44e:	7afb      	ldrb	r3, [r7, #11]
 800c450:	3301      	adds	r3, #1
 800c452:	72fb      	strb	r3, [r7, #11]
      break;
 800c454:	e007      	b.n	800c466 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fa08 	bl	800c86e <USBD_CtlError>
      err++;
 800c45e:	7afb      	ldrb	r3, [r7, #11]
 800c460:	3301      	adds	r3, #1
 800c462:	72fb      	strb	r3, [r7, #11]
      break;
 800c464:	bf00      	nop
  }

  if (err != 0U)
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11e      	bne.n	800c4aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	88db      	ldrh	r3, [r3, #6]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d016      	beq.n	800c4a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c474:	893b      	ldrh	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00e      	beq.n	800c498 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	88da      	ldrh	r2, [r3, #6]
 800c47e:	893b      	ldrh	r3, [r7, #8]
 800c480:	4293      	cmp	r3, r2
 800c482:	bf28      	it	cs
 800c484:	4613      	movcs	r3, r2
 800c486:	b29b      	uxth	r3, r3
 800c488:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c48a:	893b      	ldrh	r3, [r7, #8]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa69 	bl	800c968 <USBD_CtlSendData>
 800c496:	e009      	b.n	800c4ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9e7 	bl	800c86e <USBD_CtlError>
 800c4a0:	e004      	b.n	800c4ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 faba 	bl	800ca1c <USBD_CtlSendStatus>
 800c4a8:	e000      	b.n	800c4ac <USBD_GetDescriptor+0x2cc>
    return;
 800c4aa:	bf00      	nop
  }
}
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop

0800c4b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	889b      	ldrh	r3, [r3, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d131      	bne.n	800c52a <USBD_SetAddress+0x76>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	88db      	ldrh	r3, [r3, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d12d      	bne.n	800c52a <USBD_SetAddress+0x76>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4d4:	d829      	bhi.n	800c52a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	885b      	ldrh	r3, [r3, #2]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d104      	bne.n	800c4f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f9bc 	bl	800c86e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	e01d      	b.n	800c534 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	7bfa      	ldrb	r2, [r7, #15]
 800c4fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 feeb 	bl	800d2e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa86 	bl	800ca1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d004      	beq.n	800c520 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2202      	movs	r2, #2
 800c51a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c51e:	e009      	b.n	800c534 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c528:	e004      	b.n	800c534 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f99e 	bl	800c86e <USBD_CtlError>
  }
}
 800c532:	bf00      	nop
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	885b      	ldrh	r3, [r3, #2]
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	4b4e      	ldr	r3, [pc, #312]	@ (800c68c <USBD_SetConfig+0x150>)
 800c552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c554:	4b4d      	ldr	r3, [pc, #308]	@ (800c68c <USBD_SetConfig+0x150>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d905      	bls.n	800c568 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f985 	bl	800c86e <USBD_CtlError>
    return USBD_FAIL;
 800c564:	2303      	movs	r3, #3
 800c566:	e08c      	b.n	800c682 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d002      	beq.n	800c57a <USBD_SetConfig+0x3e>
 800c574:	2b03      	cmp	r3, #3
 800c576:	d029      	beq.n	800c5cc <USBD_SetConfig+0x90>
 800c578:	e075      	b.n	800c666 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c57a:	4b44      	ldr	r3, [pc, #272]	@ (800c68c <USBD_SetConfig+0x150>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d020      	beq.n	800c5c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c582:	4b42      	ldr	r3, [pc, #264]	@ (800c68c <USBD_SetConfig+0x150>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c58c:	4b3f      	ldr	r3, [pc, #252]	@ (800c68c <USBD_SetConfig+0x150>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7fe ffe3 	bl	800b55e <USBD_SetClassConfig>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5a2:	6839      	ldr	r1, [r7, #0]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f962 	bl	800c86e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5b2:	e065      	b.n	800c680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa31 	bl	800ca1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2203      	movs	r2, #3
 800c5be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5c2:	e05d      	b.n	800c680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa29 	bl	800ca1c <USBD_CtlSendStatus>
      break;
 800c5ca:	e059      	b.n	800c680 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5cc:	4b2f      	ldr	r3, [pc, #188]	@ (800c68c <USBD_SetConfig+0x150>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d112      	bne.n	800c5fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c68c <USBD_SetConfig+0x150>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5e6:	4b29      	ldr	r3, [pc, #164]	@ (800c68c <USBD_SetConfig+0x150>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fe ffd2 	bl	800b596 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa12 	bl	800ca1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5f8:	e042      	b.n	800c680 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c5fa:	4b24      	ldr	r3, [pc, #144]	@ (800c68c <USBD_SetConfig+0x150>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d02a      	beq.n	800c65e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7fe ffc0 	bl	800b596 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c616:	4b1d      	ldr	r3, [pc, #116]	@ (800c68c <USBD_SetConfig+0x150>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c620:	4b1a      	ldr	r3, [pc, #104]	@ (800c68c <USBD_SetConfig+0x150>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	4619      	mov	r1, r3
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7fe ff99 	bl	800b55e <USBD_SetClassConfig>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00f      	beq.n	800c656 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f918 	bl	800c86e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7fe ffa5 	bl	800b596 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c654:	e014      	b.n	800c680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f9e0 	bl	800ca1c <USBD_CtlSendStatus>
      break;
 800c65c:	e010      	b.n	800c680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f9dc 	bl	800ca1c <USBD_CtlSendStatus>
      break;
 800c664:	e00c      	b.n	800c680 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f900 	bl	800c86e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c66e:	4b07      	ldr	r3, [pc, #28]	@ (800c68c <USBD_SetConfig+0x150>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7fe ff8e 	bl	800b596 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c67a:	2303      	movs	r3, #3
 800c67c:	73fb      	strb	r3, [r7, #15]
      break;
 800c67e:	bf00      	nop
  }

  return ret;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	2000084c 	.word	0x2000084c

0800c690 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	88db      	ldrh	r3, [r3, #6]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d004      	beq.n	800c6ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f8e2 	bl	800c86e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6aa:	e023      	b.n	800c6f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	dc02      	bgt.n	800c6be <USBD_GetConfig+0x2e>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dc03      	bgt.n	800c6c4 <USBD_GetConfig+0x34>
 800c6bc:	e015      	b.n	800c6ea <USBD_GetConfig+0x5a>
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d00b      	beq.n	800c6da <USBD_GetConfig+0x4a>
 800c6c2:	e012      	b.n	800c6ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f948 	bl	800c968 <USBD_CtlSendData>
        break;
 800c6d8:	e00c      	b.n	800c6f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	2201      	movs	r2, #1
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f940 	bl	800c968 <USBD_CtlSendData>
        break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f8be 	bl	800c86e <USBD_CtlError>
        break;
 800c6f2:	bf00      	nop
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	2b02      	cmp	r3, #2
 800c712:	d81e      	bhi.n	800c752 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	88db      	ldrh	r3, [r3, #6]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d004      	beq.n	800c726 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f8a5 	bl	800c86e <USBD_CtlError>
        break;
 800c724:	e01a      	b.n	800c75c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f043 0202 	orr.w	r2, r3, #2
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330c      	adds	r3, #12
 800c746:	2202      	movs	r2, #2
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f90c 	bl	800c968 <USBD_CtlSendData>
      break;
 800c750:	e004      	b.n	800c75c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f88a 	bl	800c86e <USBD_CtlError>
      break;
 800c75a:	bf00      	nop
  }
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	885b      	ldrh	r3, [r3, #2]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d107      	bne.n	800c786 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f94c 	bl	800ca1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c784:	e013      	b.n	800c7ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	885b      	ldrh	r3, [r3, #2]
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d10b      	bne.n	800c7a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	889b      	ldrh	r3, [r3, #4]
 800c792:	0a1b      	lsrs	r3, r3, #8
 800c794:	b29b      	uxth	r3, r3
 800c796:	b2da      	uxtb	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f93c 	bl	800ca1c <USBD_CtlSendStatus>
}
 800c7a4:	e003      	b.n	800c7ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f860 	bl	800c86e <USBD_CtlError>
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d80b      	bhi.n	800c7e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	885b      	ldrh	r3, [r3, #2]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10c      	bne.n	800c7f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f91c 	bl	800ca1c <USBD_CtlSendStatus>
      }
      break;
 800c7e4:	e004      	b.n	800c7f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f840 	bl	800c86e <USBD_CtlError>
      break;
 800c7ee:	e000      	b.n	800c7f2 <USBD_ClrFeature+0x3c>
      break;
 800c7f0:	bf00      	nop
  }
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3301      	adds	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fa40 	bl	800bcaa <SWAPBYTE>
 800c82a:	4603      	mov	r3, r0
 800c82c:	461a      	mov	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3301      	adds	r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f7ff fa33 	bl	800bcaa <SWAPBYTE>
 800c844:	4603      	mov	r3, r0
 800c846:	461a      	mov	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3301      	adds	r3, #1
 800c850:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f7ff fa26 	bl	800bcaa <SWAPBYTE>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	80da      	strh	r2, [r3, #6]
}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c878:	2180      	movs	r1, #128	@ 0x80
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fcc6 	bl	800d20c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fcc2 	bl	800d20c <USBD_LL_StallEP>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d042      	beq.n	800c92c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c8aa:	6938      	ldr	r0, [r7, #16]
 800c8ac:	f000 f842 	bl	800c934 <USBD_GetLen>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8ba:	d808      	bhi.n	800c8ce <USBD_GetString+0x3e>
 800c8bc:	6938      	ldr	r0, [r7, #16]
 800c8be:	f000 f839 	bl	800c934 <USBD_GetLen>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	e001      	b.n	800c8d2 <USBD_GetString+0x42>
 800c8ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	4413      	add	r3, r2
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	7812      	ldrb	r2, [r2, #0]
 800c8e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8f8:	e013      	b.n	800c922 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	4413      	add	r3, r2
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	7812      	ldrb	r2, [r2, #0]
 800c904:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	3301      	adds	r3, #1
 800c90a:	613b      	str	r3, [r7, #16]
    idx++;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	3301      	adds	r3, #1
 800c910:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	4413      	add	r3, r2
 800c918:	2200      	movs	r2, #0
 800c91a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c91c:	7dfb      	ldrb	r3, [r7, #23]
 800c91e:	3301      	adds	r3, #1
 800c920:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e7      	bne.n	800c8fa <USBD_GetString+0x6a>
 800c92a:	e000      	b.n	800c92e <USBD_GetString+0x9e>
    return;
 800c92c:	bf00      	nop
  }
}
 800c92e:	3718      	adds	r7, #24
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c944:	e005      	b.n	800c952 <USBD_GetLen+0x1e>
  {
    len++;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	3301      	adds	r3, #1
 800c94a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	3301      	adds	r3, #1
 800c950:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1f5      	bne.n	800c946 <USBD_GetLen+0x12>
  }

  return len;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2202      	movs	r2, #2
 800c978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	2100      	movs	r1, #0
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 fcc5 	bl	800d31e <USBD_LL_Transmit>

  return USBD_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 fcb4 	bl	800d31e <USBD_LL_Transmit>

  return USBD_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2203      	movs	r2, #3
 800c9d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 fcb8 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	60f8      	str	r0, [r7, #12]
 800ca02:	60b9      	str	r1, [r7, #8]
 800ca04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 fca7 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2204      	movs	r2, #4
 800ca28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2100      	movs	r1, #0
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fc73 	bl	800d31e <USBD_LL_Transmit>

  return USBD_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2205      	movs	r2, #5
 800ca4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca52:	2300      	movs	r3, #0
 800ca54:	2200      	movs	r2, #0
 800ca56:	2100      	movs	r1, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fc81 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4912      	ldr	r1, [pc, #72]	@ (800cab8 <MX_USB_DEVICE_Init+0x50>)
 800ca70:	4812      	ldr	r0, [pc, #72]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca72:	f7fe fcf7 	bl	800b464 <USBD_Init>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca7c:	f7f6 fff6 	bl	8003a6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca80:	490f      	ldr	r1, [pc, #60]	@ (800cac0 <MX_USB_DEVICE_Init+0x58>)
 800ca82:	480e      	ldr	r0, [pc, #56]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca84:	f7fe fd1e 	bl	800b4c4 <USBD_RegisterClass>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca8e:	f7f6 ffed 	bl	8003a6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca92:	490c      	ldr	r1, [pc, #48]	@ (800cac4 <MX_USB_DEVICE_Init+0x5c>)
 800ca94:	4809      	ldr	r0, [pc, #36]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800ca96:	f7fe fc55 	bl	800b344 <USBD_CDC_RegisterInterface>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800caa0:	f7f6 ffe4 	bl	8003a6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800caa4:	4805      	ldr	r0, [pc, #20]	@ (800cabc <MX_USB_DEVICE_Init+0x54>)
 800caa6:	f7fe fd43 	bl	800b530 <USBD_Start>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cab0:	f7f6 ffdc 	bl	8003a6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cab4:	bf00      	nop
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	200000cc 	.word	0x200000cc
 800cabc:	20000850 	.word	0x20000850
 800cac0:	20000038 	.word	0x20000038
 800cac4:	200000b8 	.word	0x200000b8

0800cac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cacc:	2200      	movs	r2, #0
 800cace:	4905      	ldr	r1, [pc, #20]	@ (800cae4 <CDC_Init_FS+0x1c>)
 800cad0:	4805      	ldr	r0, [pc, #20]	@ (800cae8 <CDC_Init_FS+0x20>)
 800cad2:	f7fe fc51 	bl	800b378 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cad6:	4905      	ldr	r1, [pc, #20]	@ (800caec <CDC_Init_FS+0x24>)
 800cad8:	4803      	ldr	r0, [pc, #12]	@ (800cae8 <CDC_Init_FS+0x20>)
 800cada:	f7fe fc6f 	bl	800b3bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	2000132c 	.word	0x2000132c
 800cae8:	20000850 	.word	0x20000850
 800caec:	20000b2c 	.word	0x20000b2c

0800caf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800caf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	6039      	str	r1, [r7, #0]
 800cb0a:	71fb      	strb	r3, [r7, #7]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb10:	79fb      	ldrb	r3, [r7, #7]
 800cb12:	2b23      	cmp	r3, #35	@ 0x23
 800cb14:	d84a      	bhi.n	800cbac <CDC_Control_FS+0xac>
 800cb16:	a201      	add	r2, pc, #4	@ (adr r2, 800cb1c <CDC_Control_FS+0x1c>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cbad 	.word	0x0800cbad
 800cb20:	0800cbad 	.word	0x0800cbad
 800cb24:	0800cbad 	.word	0x0800cbad
 800cb28:	0800cbad 	.word	0x0800cbad
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbad 	.word	0x0800cbad
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cbad 	.word	0x0800cbad
 800cb3c:	0800cbad 	.word	0x0800cbad
 800cb40:	0800cbad 	.word	0x0800cbad
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cbad 	.word	0x0800cbad
 800cb4c:	0800cbad 	.word	0x0800cbad
 800cb50:	0800cbad 	.word	0x0800cbad
 800cb54:	0800cbad 	.word	0x0800cbad
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cbad 	.word	0x0800cbad
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cbad 	.word	0x0800cbad
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cbad 	.word	0x0800cbad
 800cb7c:	0800cbad 	.word	0x0800cbad
 800cb80:	0800cbad 	.word	0x0800cbad
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cbad 	.word	0x0800cbad
 800cb8c:	0800cbad 	.word	0x0800cbad
 800cb90:	0800cbad 	.word	0x0800cbad
 800cb94:	0800cbad 	.word	0x0800cbad
 800cb98:	0800cbad 	.word	0x0800cbad
 800cb9c:	0800cbad 	.word	0x0800cbad
 800cba0:	0800cbad 	.word	0x0800cbad
 800cba4:	0800cbad 	.word	0x0800cbad
 800cba8:	0800cbad 	.word	0x0800cbad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbac:	bf00      	nop
  }

  return (USBD_OK);
 800cbae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	4805      	ldr	r0, [pc, #20]	@ (800cbe0 <CDC_Receive_FS+0x24>)
 800cbca:	f7fe fbf7 	bl	800b3bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbce:	4804      	ldr	r0, [pc, #16]	@ (800cbe0 <CDC_Receive_FS+0x24>)
 800cbd0:	f7fe fc12 	bl	800b3f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cbd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000850 	.word	0x20000850

0800cbe4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cbf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
	...

0800cc08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2212      	movs	r2, #18
 800cc18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc1a:	4b03      	ldr	r3, [pc, #12]	@ (800cc28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	200000e8 	.word	0x200000e8

0800cc2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2204      	movs	r2, #4
 800cc3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	@ (800cc4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	200000fc 	.word	0x200000fc

0800cc50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d105      	bne.n	800cc6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	4907      	ldr	r1, [pc, #28]	@ (800cc84 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc66:	4808      	ldr	r0, [pc, #32]	@ (800cc88 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc68:	f7ff fe12 	bl	800c890 <USBD_GetString>
 800cc6c:	e004      	b.n	800cc78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	4904      	ldr	r1, [pc, #16]	@ (800cc84 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc72:	4805      	ldr	r0, [pc, #20]	@ (800cc88 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc74:	f7ff fe0c 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc78:	4b02      	ldr	r3, [pc, #8]	@ (800cc84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20001b2c 	.word	0x20001b2c
 800cc88:	080100a8 	.word	0x080100a8

0800cc8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	6039      	str	r1, [r7, #0]
 800cc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	4904      	ldr	r1, [pc, #16]	@ (800ccac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc9c:	4804      	ldr	r0, [pc, #16]	@ (800ccb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc9e:	f7ff fdf7 	bl	800c890 <USBD_GetString>
  return USBD_StrDesc;
 800cca2:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	20001b2c 	.word	0x20001b2c
 800ccb0:	080100c0 	.word	0x080100c0

0800ccb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	221a      	movs	r2, #26
 800ccc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccc6:	f000 f843 	bl	800cd50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccca:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	20000100 	.word	0x20000100

0800ccd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	6039      	str	r1, [r7, #0]
 800cce2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4907      	ldr	r1, [pc, #28]	@ (800cd0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccee:	4808      	ldr	r0, [pc, #32]	@ (800cd10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccf0:	f7ff fdce 	bl	800c890 <USBD_GetString>
 800ccf4:	e004      	b.n	800cd00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4904      	ldr	r1, [pc, #16]	@ (800cd0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccfa:	4805      	ldr	r0, [pc, #20]	@ (800cd10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccfc:	f7ff fdc8 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd00:	4b02      	ldr	r3, [pc, #8]	@ (800cd0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20001b2c 	.word	0x20001b2c
 800cd10:	080100d4 	.word	0x080100d4

0800cd14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d105      	bne.n	800cd32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4907      	ldr	r1, [pc, #28]	@ (800cd48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd2a:	4808      	ldr	r0, [pc, #32]	@ (800cd4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd2c:	f7ff fdb0 	bl	800c890 <USBD_GetString>
 800cd30:	e004      	b.n	800cd3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	4904      	ldr	r1, [pc, #16]	@ (800cd48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd36:	4805      	ldr	r0, [pc, #20]	@ (800cd4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd38:	f7ff fdaa 	bl	800c890 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd3c:	4b02      	ldr	r3, [pc, #8]	@ (800cd48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	20001b2c 	.word	0x20001b2c
 800cd4c:	080100e0 	.word	0x080100e0

0800cd50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd56:	4b0f      	ldr	r3, [pc, #60]	@ (800cd94 <Get_SerialNum+0x44>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd5c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd98 <Get_SerialNum+0x48>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd62:	4b0e      	ldr	r3, [pc, #56]	@ (800cd9c <Get_SerialNum+0x4c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d009      	beq.n	800cd8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd76:	2208      	movs	r2, #8
 800cd78:	4909      	ldr	r1, [pc, #36]	@ (800cda0 <Get_SerialNum+0x50>)
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f000 f814 	bl	800cda8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd80:	2204      	movs	r2, #4
 800cd82:	4908      	ldr	r1, [pc, #32]	@ (800cda4 <Get_SerialNum+0x54>)
 800cd84:	68b8      	ldr	r0, [r7, #8]
 800cd86:	f000 f80f 	bl	800cda8 <IntToUnicode>
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	1fff7a10 	.word	0x1fff7a10
 800cd98:	1fff7a14 	.word	0x1fff7a14
 800cd9c:	1fff7a18 	.word	0x1fff7a18
 800cda0:	20000102 	.word	0x20000102
 800cda4:	20000112 	.word	0x20000112

0800cda8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]
 800cdbe:	e027      	b.n	800ce10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	0f1b      	lsrs	r3, r3, #28
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d80b      	bhi.n	800cde0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	0f1b      	lsrs	r3, r3, #28
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	440b      	add	r3, r1
 800cdd8:	3230      	adds	r2, #48	@ 0x30
 800cdda:	b2d2      	uxtb	r2, r2
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e00a      	b.n	800cdf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	0f1b      	lsrs	r3, r3, #28
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4619      	mov	r1, r3
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	440b      	add	r3, r1
 800cdf0:	3237      	adds	r2, #55	@ 0x37
 800cdf2:	b2d2      	uxtb	r2, r2
 800cdf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	005b      	lsls	r3, r3, #1
 800ce00:	3301      	adds	r3, #1
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4413      	add	r3, r2
 800ce06:	2200      	movs	r2, #0
 800ce08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	75fb      	strb	r3, [r7, #23]
 800ce10:	7dfa      	ldrb	r2, [r7, #23]
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d3d3      	bcc.n	800cdc0 <IntToUnicode+0x18>
  }
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	371c      	adds	r7, #28
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08a      	sub	sp, #40	@ 0x28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce30:	f107 0314 	add.w	r3, r7, #20
 800ce34:	2200      	movs	r2, #0
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	605a      	str	r2, [r3, #4]
 800ce3a:	609a      	str	r2, [r3, #8]
 800ce3c:	60da      	str	r2, [r3, #12]
 800ce3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce48:	d13a      	bne.n	800cec0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	613b      	str	r3, [r7, #16]
 800ce4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce52:	4a1d      	ldr	r2, [pc, #116]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce54:	f043 0301 	orr.w	r3, r3, #1
 800ce58:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce5a:	4b1b      	ldr	r3, [pc, #108]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	613b      	str	r3, [r7, #16]
 800ce64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ce6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce74:	2303      	movs	r3, #3
 800ce76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce78:	230a      	movs	r3, #10
 800ce7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce7c:	f107 0314 	add.w	r3, r7, #20
 800ce80:	4619      	mov	r1, r3
 800ce82:	4812      	ldr	r0, [pc, #72]	@ (800cecc <HAL_PCD_MspInit+0xa4>)
 800ce84:	f7f9 f8fa 	bl	800607c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce88:	4b0f      	ldr	r3, [pc, #60]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce8c:	4a0e      	ldr	r2, [pc, #56]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce92:	6353      	str	r3, [r2, #52]	@ 0x34
 800ce94:	2300      	movs	r3, #0
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	4b0b      	ldr	r3, [pc, #44]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800ce9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cea2:	6453      	str	r3, [r2, #68]	@ 0x44
 800cea4:	4b08      	ldr	r3, [pc, #32]	@ (800cec8 <HAL_PCD_MspInit+0xa0>)
 800cea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	2043      	movs	r0, #67	@ 0x43
 800ceb6:	f7f8 fd3a 	bl	800592e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ceba:	2043      	movs	r0, #67	@ 0x43
 800cebc:	f7f8 fd53 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cec0:	bf00      	nop
 800cec2:	3728      	adds	r7, #40	@ 0x28
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	40023800 	.word	0x40023800
 800cecc:	40020000 	.word	0x40020000

0800ced0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cee4:	4619      	mov	r1, r3
 800cee6:	4610      	mov	r0, r2
 800cee8:	f7fe fb6f 	bl	800b5ca <USBD_LL_SetupStage>
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cf06:	78fa      	ldrb	r2, [r7, #3]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	4413      	add	r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	f7fe fba9 	bl	800b674 <USBD_LL_DataOutStage>
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	460b      	mov	r3, r1
 800cf34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cf3c:	78fa      	ldrb	r2, [r7, #3]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4613      	mov	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	3320      	adds	r3, #32
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	4619      	mov	r1, r3
 800cf52:	f7fe fc42 	bl	800b7da <USBD_LL_DataInStage>
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe fd7c 	bl	800ba6a <USBD_LL_SOF>
}
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf82:	2301      	movs	r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	79db      	ldrb	r3, [r3, #7]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d102      	bne.n	800cf94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]
 800cf92:	e008      	b.n	800cfa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	79db      	ldrb	r3, [r3, #7]
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d102      	bne.n	800cfa2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	73fb      	strb	r3, [r7, #15]
 800cfa0:	e001      	b.n	800cfa6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cfa2:	f7f6 fd63 	bl	8003a6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfac:	7bfa      	ldrb	r2, [r7, #15]
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fd16 	bl	800b9e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe fcbe 	bl	800b93e <USBD_LL_Reset>
}
 800cfc2:	bf00      	nop
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe fd11 	bl	800ba02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cff2:	f043 0301 	orr.w	r3, r3, #1
 800cff6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7adb      	ldrb	r3, [r3, #11]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d005      	beq.n	800d00c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d000:	4b04      	ldr	r3, [pc, #16]	@ (800d014 <HAL_PCD_SuspendCallback+0x48>)
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	4a03      	ldr	r2, [pc, #12]	@ (800d014 <HAL_PCD_SuspendCallback+0x48>)
 800d006:	f043 0306 	orr.w	r3, r3, #6
 800d00a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d00c:	bf00      	nop
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	e000ed00 	.word	0xe000ed00

0800d018 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fd07 	bl	800ba3a <USBD_LL_Resume>
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fd5f 	bl	800bb0e <USBD_LL_IsoOUTIncomplete>
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d06a:	78fa      	ldrb	r2, [r7, #3]
 800d06c:	4611      	mov	r1, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fd1b 	bl	800baaa <USBD_LL_IsoINIncomplete>
}
 800d074:	bf00      	nop
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe fd71 	bl	800bb72 <USBD_LL_DevConnected>
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe fd6e 	bl	800bb88 <USBD_LL_DevDisconnected>
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d13c      	bne.n	800d13e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d0c4:	4a20      	ldr	r2, [pc, #128]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a1e      	ldr	r2, [pc, #120]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0d4:	4b1c      	ldr	r3, [pc, #112]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d0da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d0dc:	4b1a      	ldr	r3, [pc, #104]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0de:	2204      	movs	r2, #4
 800d0e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d0e2:	4b19      	ldr	r3, [pc, #100]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0e8:	4b17      	ldr	r3, [pc, #92]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0ee:	4b16      	ldr	r3, [pc, #88]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0f4:	4b14      	ldr	r3, [pc, #80]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0fa:	4b13      	ldr	r3, [pc, #76]	@ (800d148 <USBD_LL_Init+0x94>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d100:	4b11      	ldr	r3, [pc, #68]	@ (800d148 <USBD_LL_Init+0x94>)
 800d102:	2200      	movs	r2, #0
 800d104:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d106:	4b10      	ldr	r3, [pc, #64]	@ (800d148 <USBD_LL_Init+0x94>)
 800d108:	2200      	movs	r2, #0
 800d10a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d10c:	4b0e      	ldr	r3, [pc, #56]	@ (800d148 <USBD_LL_Init+0x94>)
 800d10e:	2200      	movs	r2, #0
 800d110:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d112:	480d      	ldr	r0, [pc, #52]	@ (800d148 <USBD_LL_Init+0x94>)
 800d114:	f7f9 f97f 	bl	8006416 <HAL_PCD_Init>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d11e:	f7f6 fca5 	bl	8003a6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d122:	2180      	movs	r1, #128	@ 0x80
 800d124:	4808      	ldr	r0, [pc, #32]	@ (800d148 <USBD_LL_Init+0x94>)
 800d126:	f7fa fbac 	bl	8007882 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d12a:	2240      	movs	r2, #64	@ 0x40
 800d12c:	2100      	movs	r1, #0
 800d12e:	4806      	ldr	r0, [pc, #24]	@ (800d148 <USBD_LL_Init+0x94>)
 800d130:	f7fa fb60 	bl	80077f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d134:	2280      	movs	r2, #128	@ 0x80
 800d136:	2101      	movs	r1, #1
 800d138:	4803      	ldr	r0, [pc, #12]	@ (800d148 <USBD_LL_Init+0x94>)
 800d13a:	f7fa fb5b 	bl	80077f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20001d2c 	.word	0x20001d2c

0800d14c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d162:	4618      	mov	r0, r3
 800d164:	f7f9 fa66 	bl	8006634 <HAL_PCD_Start>
 800d168:	4603      	mov	r3, r0
 800d16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 f942 	bl	800d3f8 <USBD_Get_USB_Status>
 800d174:	4603      	mov	r3, r0
 800d176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d178:	7bbb      	ldrb	r3, [r7, #14]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b084      	sub	sp, #16
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	461a      	mov	r2, r3
 800d190:	4603      	mov	r3, r0
 800d192:	70fb      	strb	r3, [r7, #3]
 800d194:	460b      	mov	r3, r1
 800d196:	70bb      	strb	r3, [r7, #2]
 800d198:	4613      	mov	r3, r2
 800d19a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1aa:	78bb      	ldrb	r3, [r7, #2]
 800d1ac:	883a      	ldrh	r2, [r7, #0]
 800d1ae:	78f9      	ldrb	r1, [r7, #3]
 800d1b0:	f7f9 ff3a 	bl	8007028 <HAL_PCD_EP_Open>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f91c 	bl	800d3f8 <USBD_Get_USB_Status>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1e8:	78fa      	ldrb	r2, [r7, #3]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f9 ff85 	bl	80070fc <HAL_PCD_EP_Close>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f000 f8fd 	bl	800d3f8 <USBD_Get_USB_Status>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d202:	7bbb      	ldrb	r3, [r7, #14]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	460b      	mov	r3, r1
 800d216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d226:	78fa      	ldrb	r2, [r7, #3]
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fa f83d 	bl	80072aa <HAL_PCD_EP_SetStall>
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d234:	7bfb      	ldrb	r3, [r7, #15]
 800d236:	4618      	mov	r0, r3
 800d238:	f000 f8de 	bl	800d3f8 <USBD_Get_USB_Status>
 800d23c:	4603      	mov	r3, r0
 800d23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d240:	7bbb      	ldrb	r3, [r7, #14]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b084      	sub	sp, #16
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	460b      	mov	r3, r1
 800d254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fa f881 	bl	8007370 <HAL_PCD_EP_ClrStall>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d272:	7bfb      	ldrb	r3, [r7, #15]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 f8bf 	bl	800d3f8 <USBD_Get_USB_Status>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d29a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d29c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da0b      	bge.n	800d2bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3316      	adds	r3, #22
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	e00b      	b.n	800d2d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2bc:	78fb      	ldrb	r3, [r7, #3]
 800d2be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2c2:	68f9      	ldr	r1, [r7, #12]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d2d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2fa:	78fa      	ldrb	r2, [r7, #3]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7f9 fe6e 	bl	8006fe0 <HAL_PCD_SetAddress>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 f874 	bl	800d3f8 <USBD_Get_USB_Status>
 800d310:	4603      	mov	r3, r0
 800d312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d314:	7bbb      	ldrb	r3, [r7, #14]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b086      	sub	sp, #24
 800d322:	af00      	add	r7, sp, #0
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
 800d32a:	460b      	mov	r3, r1
 800d32c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d33c:	7af9      	ldrb	r1, [r7, #11]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	f7f9 ff78 	bl	8007236 <HAL_PCD_EP_Transmit>
 800d346:	4603      	mov	r3, r0
 800d348:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 f853 	bl	800d3f8 <USBD_Get_USB_Status>
 800d352:	4603      	mov	r3, r0
 800d354:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d356:	7dbb      	ldrb	r3, [r7, #22]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	607a      	str	r2, [r7, #4]
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	460b      	mov	r3, r1
 800d36e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d37e:	7af9      	ldrb	r1, [r7, #11]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	f7f9 ff04 	bl	8007190 <HAL_PCD_EP_Receive>
 800d388:	4603      	mov	r3, r0
 800d38a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f832 	bl	800d3f8 <USBD_Get_USB_Status>
 800d394:	4603      	mov	r3, r0
 800d396:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d398:	7dbb      	ldrb	r3, [r7, #22]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3b4:	78fa      	ldrb	r2, [r7, #3]
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f9 ff24 	bl	8007206 <HAL_PCD_EP_GetRxCount>
 800d3be:	4603      	mov	r3, r0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3d0:	4b03      	ldr	r3, [pc, #12]	@ (800d3e0 <USBD_static_malloc+0x18>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20002210 	.word	0x20002210

0800d3e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]

}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d817      	bhi.n	800d43c <USBD_Get_USB_Status+0x44>
 800d40c:	a201      	add	r2, pc, #4	@ (adr r2, 800d414 <USBD_Get_USB_Status+0x1c>)
 800d40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d412:	bf00      	nop
 800d414:	0800d425 	.word	0x0800d425
 800d418:	0800d42b 	.word	0x0800d42b
 800d41c:	0800d431 	.word	0x0800d431
 800d420:	0800d437 	.word	0x0800d437
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
    break;
 800d428:	e00b      	b.n	800d442 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d42a:	2303      	movs	r3, #3
 800d42c:	73fb      	strb	r3, [r7, #15]
    break;
 800d42e:	e008      	b.n	800d442 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]
    break;
 800d434:	e005      	b.n	800d442 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d436:	2303      	movs	r3, #3
 800d438:	73fb      	strb	r3, [r7, #15]
    break;
 800d43a:	e002      	b.n	800d442 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d43c:	2303      	movs	r3, #3
 800d43e:	73fb      	strb	r3, [r7, #15]
    break;
 800d440:	bf00      	nop
  }
  return usb_status;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <malloc>:
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <malloc+0xc>)
 800d452:	4601      	mov	r1, r0
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	f000 b825 	b.w	800d4a4 <_malloc_r>
 800d45a:	bf00      	nop
 800d45c:	20000128 	.word	0x20000128

0800d460 <sbrk_aligned>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	4e0f      	ldr	r6, [pc, #60]	@ (800d4a0 <sbrk_aligned+0x40>)
 800d464:	460c      	mov	r4, r1
 800d466:	6831      	ldr	r1, [r6, #0]
 800d468:	4605      	mov	r5, r0
 800d46a:	b911      	cbnz	r1, 800d472 <sbrk_aligned+0x12>
 800d46c:	f000 ff4e 	bl	800e30c <_sbrk_r>
 800d470:	6030      	str	r0, [r6, #0]
 800d472:	4621      	mov	r1, r4
 800d474:	4628      	mov	r0, r5
 800d476:	f000 ff49 	bl	800e30c <_sbrk_r>
 800d47a:	1c43      	adds	r3, r0, #1
 800d47c:	d103      	bne.n	800d486 <sbrk_aligned+0x26>
 800d47e:	f04f 34ff 	mov.w	r4, #4294967295
 800d482:	4620      	mov	r0, r4
 800d484:	bd70      	pop	{r4, r5, r6, pc}
 800d486:	1cc4      	adds	r4, r0, #3
 800d488:	f024 0403 	bic.w	r4, r4, #3
 800d48c:	42a0      	cmp	r0, r4
 800d48e:	d0f8      	beq.n	800d482 <sbrk_aligned+0x22>
 800d490:	1a21      	subs	r1, r4, r0
 800d492:	4628      	mov	r0, r5
 800d494:	f000 ff3a 	bl	800e30c <_sbrk_r>
 800d498:	3001      	adds	r0, #1
 800d49a:	d1f2      	bne.n	800d482 <sbrk_aligned+0x22>
 800d49c:	e7ef      	b.n	800d47e <sbrk_aligned+0x1e>
 800d49e:	bf00      	nop
 800d4a0:	20002430 	.word	0x20002430

0800d4a4 <_malloc_r>:
 800d4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a8:	1ccd      	adds	r5, r1, #3
 800d4aa:	f025 0503 	bic.w	r5, r5, #3
 800d4ae:	3508      	adds	r5, #8
 800d4b0:	2d0c      	cmp	r5, #12
 800d4b2:	bf38      	it	cc
 800d4b4:	250c      	movcc	r5, #12
 800d4b6:	2d00      	cmp	r5, #0
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	db01      	blt.n	800d4c0 <_malloc_r+0x1c>
 800d4bc:	42a9      	cmp	r1, r5
 800d4be:	d904      	bls.n	800d4ca <_malloc_r+0x26>
 800d4c0:	230c      	movs	r3, #12
 800d4c2:	6033      	str	r3, [r6, #0]
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5a0 <_malloc_r+0xfc>
 800d4ce:	f000 f869 	bl	800d5a4 <__malloc_lock>
 800d4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d6:	461c      	mov	r4, r3
 800d4d8:	bb44      	cbnz	r4, 800d52c <_malloc_r+0x88>
 800d4da:	4629      	mov	r1, r5
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff ffbf 	bl	800d460 <sbrk_aligned>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	d158      	bne.n	800d59a <_malloc_r+0xf6>
 800d4e8:	f8d8 4000 	ldr.w	r4, [r8]
 800d4ec:	4627      	mov	r7, r4
 800d4ee:	2f00      	cmp	r7, #0
 800d4f0:	d143      	bne.n	800d57a <_malloc_r+0xd6>
 800d4f2:	2c00      	cmp	r4, #0
 800d4f4:	d04b      	beq.n	800d58e <_malloc_r+0xea>
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	eb04 0903 	add.w	r9, r4, r3
 800d500:	f000 ff04 	bl	800e30c <_sbrk_r>
 800d504:	4581      	cmp	r9, r0
 800d506:	d142      	bne.n	800d58e <_malloc_r+0xea>
 800d508:	6821      	ldr	r1, [r4, #0]
 800d50a:	1a6d      	subs	r5, r5, r1
 800d50c:	4629      	mov	r1, r5
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ffa6 	bl	800d460 <sbrk_aligned>
 800d514:	3001      	adds	r0, #1
 800d516:	d03a      	beq.n	800d58e <_malloc_r+0xea>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	442b      	add	r3, r5
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	f8d8 3000 	ldr.w	r3, [r8]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	bb62      	cbnz	r2, 800d580 <_malloc_r+0xdc>
 800d526:	f8c8 7000 	str.w	r7, [r8]
 800d52a:	e00f      	b.n	800d54c <_malloc_r+0xa8>
 800d52c:	6822      	ldr	r2, [r4, #0]
 800d52e:	1b52      	subs	r2, r2, r5
 800d530:	d420      	bmi.n	800d574 <_malloc_r+0xd0>
 800d532:	2a0b      	cmp	r2, #11
 800d534:	d917      	bls.n	800d566 <_malloc_r+0xc2>
 800d536:	1961      	adds	r1, r4, r5
 800d538:	42a3      	cmp	r3, r4
 800d53a:	6025      	str	r5, [r4, #0]
 800d53c:	bf18      	it	ne
 800d53e:	6059      	strne	r1, [r3, #4]
 800d540:	6863      	ldr	r3, [r4, #4]
 800d542:	bf08      	it	eq
 800d544:	f8c8 1000 	streq.w	r1, [r8]
 800d548:	5162      	str	r2, [r4, r5]
 800d54a:	604b      	str	r3, [r1, #4]
 800d54c:	4630      	mov	r0, r6
 800d54e:	f000 f82f 	bl	800d5b0 <__malloc_unlock>
 800d552:	f104 000b 	add.w	r0, r4, #11
 800d556:	1d23      	adds	r3, r4, #4
 800d558:	f020 0007 	bic.w	r0, r0, #7
 800d55c:	1ac2      	subs	r2, r0, r3
 800d55e:	bf1c      	itt	ne
 800d560:	1a1b      	subne	r3, r3, r0
 800d562:	50a3      	strne	r3, [r4, r2]
 800d564:	e7af      	b.n	800d4c6 <_malloc_r+0x22>
 800d566:	6862      	ldr	r2, [r4, #4]
 800d568:	42a3      	cmp	r3, r4
 800d56a:	bf0c      	ite	eq
 800d56c:	f8c8 2000 	streq.w	r2, [r8]
 800d570:	605a      	strne	r2, [r3, #4]
 800d572:	e7eb      	b.n	800d54c <_malloc_r+0xa8>
 800d574:	4623      	mov	r3, r4
 800d576:	6864      	ldr	r4, [r4, #4]
 800d578:	e7ae      	b.n	800d4d8 <_malloc_r+0x34>
 800d57a:	463c      	mov	r4, r7
 800d57c:	687f      	ldr	r7, [r7, #4]
 800d57e:	e7b6      	b.n	800d4ee <_malloc_r+0x4a>
 800d580:	461a      	mov	r2, r3
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	42a3      	cmp	r3, r4
 800d586:	d1fb      	bne.n	800d580 <_malloc_r+0xdc>
 800d588:	2300      	movs	r3, #0
 800d58a:	6053      	str	r3, [r2, #4]
 800d58c:	e7de      	b.n	800d54c <_malloc_r+0xa8>
 800d58e:	230c      	movs	r3, #12
 800d590:	6033      	str	r3, [r6, #0]
 800d592:	4630      	mov	r0, r6
 800d594:	f000 f80c 	bl	800d5b0 <__malloc_unlock>
 800d598:	e794      	b.n	800d4c4 <_malloc_r+0x20>
 800d59a:	6005      	str	r5, [r0, #0]
 800d59c:	e7d6      	b.n	800d54c <_malloc_r+0xa8>
 800d59e:	bf00      	nop
 800d5a0:	20002434 	.word	0x20002434

0800d5a4 <__malloc_lock>:
 800d5a4:	4801      	ldr	r0, [pc, #4]	@ (800d5ac <__malloc_lock+0x8>)
 800d5a6:	f000 befe 	b.w	800e3a6 <__retarget_lock_acquire_recursive>
 800d5aa:	bf00      	nop
 800d5ac:	20002578 	.word	0x20002578

0800d5b0 <__malloc_unlock>:
 800d5b0:	4801      	ldr	r0, [pc, #4]	@ (800d5b8 <__malloc_unlock+0x8>)
 800d5b2:	f000 bef9 	b.w	800e3a8 <__retarget_lock_release_recursive>
 800d5b6:	bf00      	nop
 800d5b8:	20002578 	.word	0x20002578

0800d5bc <__cvt>:
 800d5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	ec57 6b10 	vmov	r6, r7, d0
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	bfbb      	ittet	lt
 800d5ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d5d2:	461f      	movlt	r7, r3
 800d5d4:	2300      	movge	r3, #0
 800d5d6:	232d      	movlt	r3, #45	@ 0x2d
 800d5d8:	700b      	strb	r3, [r1, #0]
 800d5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d5e0:	4691      	mov	r9, r2
 800d5e2:	f023 0820 	bic.w	r8, r3, #32
 800d5e6:	bfbc      	itt	lt
 800d5e8:	4632      	movlt	r2, r6
 800d5ea:	4616      	movlt	r6, r2
 800d5ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5f0:	d005      	beq.n	800d5fe <__cvt+0x42>
 800d5f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d5f6:	d100      	bne.n	800d5fa <__cvt+0x3e>
 800d5f8:	3401      	adds	r4, #1
 800d5fa:	2102      	movs	r1, #2
 800d5fc:	e000      	b.n	800d600 <__cvt+0x44>
 800d5fe:	2103      	movs	r1, #3
 800d600:	ab03      	add	r3, sp, #12
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	ab02      	add	r3, sp, #8
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	ec47 6b10 	vmov	d0, r6, r7
 800d60c:	4653      	mov	r3, sl
 800d60e:	4622      	mov	r2, r4
 800d610:	f000 ff62 	bl	800e4d8 <_dtoa_r>
 800d614:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d618:	4605      	mov	r5, r0
 800d61a:	d119      	bne.n	800d650 <__cvt+0x94>
 800d61c:	f019 0f01 	tst.w	r9, #1
 800d620:	d00e      	beq.n	800d640 <__cvt+0x84>
 800d622:	eb00 0904 	add.w	r9, r0, r4
 800d626:	2200      	movs	r2, #0
 800d628:	2300      	movs	r3, #0
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f3 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d632:	b108      	cbz	r0, 800d638 <__cvt+0x7c>
 800d634:	f8cd 900c 	str.w	r9, [sp, #12]
 800d638:	2230      	movs	r2, #48	@ 0x30
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	454b      	cmp	r3, r9
 800d63e:	d31e      	bcc.n	800d67e <__cvt+0xc2>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d644:	1b5b      	subs	r3, r3, r5
 800d646:	4628      	mov	r0, r5
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	b004      	add	sp, #16
 800d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d650:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d654:	eb00 0904 	add.w	r9, r0, r4
 800d658:	d1e5      	bne.n	800d626 <__cvt+0x6a>
 800d65a:	7803      	ldrb	r3, [r0, #0]
 800d65c:	2b30      	cmp	r3, #48	@ 0x30
 800d65e:	d10a      	bne.n	800d676 <__cvt+0xba>
 800d660:	2200      	movs	r2, #0
 800d662:	2300      	movs	r3, #0
 800d664:	4630      	mov	r0, r6
 800d666:	4639      	mov	r1, r7
 800d668:	f7f3 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d66c:	b918      	cbnz	r0, 800d676 <__cvt+0xba>
 800d66e:	f1c4 0401 	rsb	r4, r4, #1
 800d672:	f8ca 4000 	str.w	r4, [sl]
 800d676:	f8da 3000 	ldr.w	r3, [sl]
 800d67a:	4499      	add	r9, r3
 800d67c:	e7d3      	b.n	800d626 <__cvt+0x6a>
 800d67e:	1c59      	adds	r1, r3, #1
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	701a      	strb	r2, [r3, #0]
 800d684:	e7d9      	b.n	800d63a <__cvt+0x7e>

0800d686 <__exponent>:
 800d686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d688:	2900      	cmp	r1, #0
 800d68a:	bfba      	itte	lt
 800d68c:	4249      	neglt	r1, r1
 800d68e:	232d      	movlt	r3, #45	@ 0x2d
 800d690:	232b      	movge	r3, #43	@ 0x2b
 800d692:	2909      	cmp	r1, #9
 800d694:	7002      	strb	r2, [r0, #0]
 800d696:	7043      	strb	r3, [r0, #1]
 800d698:	dd29      	ble.n	800d6ee <__exponent+0x68>
 800d69a:	f10d 0307 	add.w	r3, sp, #7
 800d69e:	461d      	mov	r5, r3
 800d6a0:	270a      	movs	r7, #10
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d6a8:	fb07 1416 	mls	r4, r7, r6, r1
 800d6ac:	3430      	adds	r4, #48	@ 0x30
 800d6ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	2c63      	cmp	r4, #99	@ 0x63
 800d6b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	dcf1      	bgt.n	800d6a2 <__exponent+0x1c>
 800d6be:	3130      	adds	r1, #48	@ 0x30
 800d6c0:	1e94      	subs	r4, r2, #2
 800d6c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d6c6:	1c41      	adds	r1, r0, #1
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	42ab      	cmp	r3, r5
 800d6cc:	d30a      	bcc.n	800d6e4 <__exponent+0x5e>
 800d6ce:	f10d 0309 	add.w	r3, sp, #9
 800d6d2:	1a9b      	subs	r3, r3, r2
 800d6d4:	42ac      	cmp	r4, r5
 800d6d6:	bf88      	it	hi
 800d6d8:	2300      	movhi	r3, #0
 800d6da:	3302      	adds	r3, #2
 800d6dc:	4403      	add	r3, r0
 800d6de:	1a18      	subs	r0, r3, r0
 800d6e0:	b003      	add	sp, #12
 800d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d6e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d6ec:	e7ed      	b.n	800d6ca <__exponent+0x44>
 800d6ee:	2330      	movs	r3, #48	@ 0x30
 800d6f0:	3130      	adds	r1, #48	@ 0x30
 800d6f2:	7083      	strb	r3, [r0, #2]
 800d6f4:	70c1      	strb	r1, [r0, #3]
 800d6f6:	1d03      	adds	r3, r0, #4
 800d6f8:	e7f1      	b.n	800d6de <__exponent+0x58>
	...

0800d6fc <_printf_float>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	b08d      	sub	sp, #52	@ 0x34
 800d702:	460c      	mov	r4, r1
 800d704:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d708:	4616      	mov	r6, r2
 800d70a:	461f      	mov	r7, r3
 800d70c:	4605      	mov	r5, r0
 800d70e:	f000 fdc5 	bl	800e29c <_localeconv_r>
 800d712:	6803      	ldr	r3, [r0, #0]
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f2 fdaa 	bl	8000270 <strlen>
 800d71c:	2300      	movs	r3, #0
 800d71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d720:	f8d8 3000 	ldr.w	r3, [r8]
 800d724:	9005      	str	r0, [sp, #20]
 800d726:	3307      	adds	r3, #7
 800d728:	f023 0307 	bic.w	r3, r3, #7
 800d72c:	f103 0208 	add.w	r2, r3, #8
 800d730:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d734:	f8d4 b000 	ldr.w	fp, [r4]
 800d738:	f8c8 2000 	str.w	r2, [r8]
 800d73c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d740:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d744:	9307      	str	r3, [sp, #28]
 800d746:	f8cd 8018 	str.w	r8, [sp, #24]
 800d74a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d74e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d752:	4b9c      	ldr	r3, [pc, #624]	@ (800d9c4 <_printf_float+0x2c8>)
 800d754:	f04f 32ff 	mov.w	r2, #4294967295
 800d758:	f7f3 f9e8 	bl	8000b2c <__aeabi_dcmpun>
 800d75c:	bb70      	cbnz	r0, 800d7bc <_printf_float+0xc0>
 800d75e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d762:	4b98      	ldr	r3, [pc, #608]	@ (800d9c4 <_printf_float+0x2c8>)
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	f7f3 f9c2 	bl	8000af0 <__aeabi_dcmple>
 800d76c:	bb30      	cbnz	r0, 800d7bc <_printf_float+0xc0>
 800d76e:	2200      	movs	r2, #0
 800d770:	2300      	movs	r3, #0
 800d772:	4640      	mov	r0, r8
 800d774:	4649      	mov	r1, r9
 800d776:	f7f3 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800d77a:	b110      	cbz	r0, 800d782 <_printf_float+0x86>
 800d77c:	232d      	movs	r3, #45	@ 0x2d
 800d77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d782:	4a91      	ldr	r2, [pc, #580]	@ (800d9c8 <_printf_float+0x2cc>)
 800d784:	4b91      	ldr	r3, [pc, #580]	@ (800d9cc <_printf_float+0x2d0>)
 800d786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d78a:	bf8c      	ite	hi
 800d78c:	4690      	movhi	r8, r2
 800d78e:	4698      	movls	r8, r3
 800d790:	2303      	movs	r3, #3
 800d792:	6123      	str	r3, [r4, #16]
 800d794:	f02b 0304 	bic.w	r3, fp, #4
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	f04f 0900 	mov.w	r9, #0
 800d79e:	9700      	str	r7, [sp, #0]
 800d7a0:	4633      	mov	r3, r6
 800d7a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f000 f9d2 	bl	800db50 <_printf_common>
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	f040 808d 	bne.w	800d8cc <_printf_float+0x1d0>
 800d7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b6:	b00d      	add	sp, #52	@ 0x34
 800d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7bc:	4642      	mov	r2, r8
 800d7be:	464b      	mov	r3, r9
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	4649      	mov	r1, r9
 800d7c4:	f7f3 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800d7c8:	b140      	cbz	r0, 800d7dc <_printf_float+0xe0>
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfbc      	itt	lt
 800d7d0:	232d      	movlt	r3, #45	@ 0x2d
 800d7d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d7d6:	4a7e      	ldr	r2, [pc, #504]	@ (800d9d0 <_printf_float+0x2d4>)
 800d7d8:	4b7e      	ldr	r3, [pc, #504]	@ (800d9d4 <_printf_float+0x2d8>)
 800d7da:	e7d4      	b.n	800d786 <_printf_float+0x8a>
 800d7dc:	6863      	ldr	r3, [r4, #4]
 800d7de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d7e2:	9206      	str	r2, [sp, #24]
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	d13b      	bne.n	800d860 <_printf_float+0x164>
 800d7e8:	2306      	movs	r3, #6
 800d7ea:	6063      	str	r3, [r4, #4]
 800d7ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6022      	str	r2, [r4, #0]
 800d7f4:	9303      	str	r3, [sp, #12]
 800d7f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d7f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d7fc:	ab09      	add	r3, sp, #36	@ 0x24
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	6861      	ldr	r1, [r4, #4]
 800d802:	ec49 8b10 	vmov	d0, r8, r9
 800d806:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7ff fed6 	bl	800d5bc <__cvt>
 800d810:	9b06      	ldr	r3, [sp, #24]
 800d812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d814:	2b47      	cmp	r3, #71	@ 0x47
 800d816:	4680      	mov	r8, r0
 800d818:	d129      	bne.n	800d86e <_printf_float+0x172>
 800d81a:	1cc8      	adds	r0, r1, #3
 800d81c:	db02      	blt.n	800d824 <_printf_float+0x128>
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	4299      	cmp	r1, r3
 800d822:	dd41      	ble.n	800d8a8 <_printf_float+0x1ac>
 800d824:	f1aa 0a02 	sub.w	sl, sl, #2
 800d828:	fa5f fa8a 	uxtb.w	sl, sl
 800d82c:	3901      	subs	r1, #1
 800d82e:	4652      	mov	r2, sl
 800d830:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d834:	9109      	str	r1, [sp, #36]	@ 0x24
 800d836:	f7ff ff26 	bl	800d686 <__exponent>
 800d83a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d83c:	1813      	adds	r3, r2, r0
 800d83e:	2a01      	cmp	r2, #1
 800d840:	4681      	mov	r9, r0
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	dc02      	bgt.n	800d84c <_printf_float+0x150>
 800d846:	6822      	ldr	r2, [r4, #0]
 800d848:	07d2      	lsls	r2, r2, #31
 800d84a:	d501      	bpl.n	800d850 <_printf_float+0x154>
 800d84c:	3301      	adds	r3, #1
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0a2      	beq.n	800d79e <_printf_float+0xa2>
 800d858:	232d      	movs	r3, #45	@ 0x2d
 800d85a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d85e:	e79e      	b.n	800d79e <_printf_float+0xa2>
 800d860:	9a06      	ldr	r2, [sp, #24]
 800d862:	2a47      	cmp	r2, #71	@ 0x47
 800d864:	d1c2      	bne.n	800d7ec <_printf_float+0xf0>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1c0      	bne.n	800d7ec <_printf_float+0xf0>
 800d86a:	2301      	movs	r3, #1
 800d86c:	e7bd      	b.n	800d7ea <_printf_float+0xee>
 800d86e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d872:	d9db      	bls.n	800d82c <_printf_float+0x130>
 800d874:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d878:	d118      	bne.n	800d8ac <_printf_float+0x1b0>
 800d87a:	2900      	cmp	r1, #0
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	dd0b      	ble.n	800d898 <_printf_float+0x19c>
 800d880:	6121      	str	r1, [r4, #16]
 800d882:	b913      	cbnz	r3, 800d88a <_printf_float+0x18e>
 800d884:	6822      	ldr	r2, [r4, #0]
 800d886:	07d0      	lsls	r0, r2, #31
 800d888:	d502      	bpl.n	800d890 <_printf_float+0x194>
 800d88a:	3301      	adds	r3, #1
 800d88c:	440b      	add	r3, r1
 800d88e:	6123      	str	r3, [r4, #16]
 800d890:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d892:	f04f 0900 	mov.w	r9, #0
 800d896:	e7db      	b.n	800d850 <_printf_float+0x154>
 800d898:	b913      	cbnz	r3, 800d8a0 <_printf_float+0x1a4>
 800d89a:	6822      	ldr	r2, [r4, #0]
 800d89c:	07d2      	lsls	r2, r2, #31
 800d89e:	d501      	bpl.n	800d8a4 <_printf_float+0x1a8>
 800d8a0:	3302      	adds	r3, #2
 800d8a2:	e7f4      	b.n	800d88e <_printf_float+0x192>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e7f2      	b.n	800d88e <_printf_float+0x192>
 800d8a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	db05      	blt.n	800d8be <_printf_float+0x1c2>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	6121      	str	r1, [r4, #16]
 800d8b6:	07d8      	lsls	r0, r3, #31
 800d8b8:	d5ea      	bpl.n	800d890 <_printf_float+0x194>
 800d8ba:	1c4b      	adds	r3, r1, #1
 800d8bc:	e7e7      	b.n	800d88e <_printf_float+0x192>
 800d8be:	2900      	cmp	r1, #0
 800d8c0:	bfd4      	ite	le
 800d8c2:	f1c1 0202 	rsble	r2, r1, #2
 800d8c6:	2201      	movgt	r2, #1
 800d8c8:	4413      	add	r3, r2
 800d8ca:	e7e0      	b.n	800d88e <_printf_float+0x192>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	055a      	lsls	r2, r3, #21
 800d8d0:	d407      	bmi.n	800d8e2 <_printf_float+0x1e6>
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	4642      	mov	r2, r8
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4628      	mov	r0, r5
 800d8da:	47b8      	blx	r7
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d12b      	bne.n	800d938 <_printf_float+0x23c>
 800d8e0:	e767      	b.n	800d7b2 <_printf_float+0xb6>
 800d8e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8e6:	f240 80dd 	bls.w	800daa4 <_printf_float+0x3a8>
 800d8ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f7f3 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d033      	beq.n	800d962 <_printf_float+0x266>
 800d8fa:	4a37      	ldr	r2, [pc, #220]	@ (800d9d8 <_printf_float+0x2dc>)
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f af54 	beq.w	800d7b2 <_printf_float+0xb6>
 800d90a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d90e:	4543      	cmp	r3, r8
 800d910:	db02      	blt.n	800d918 <_printf_float+0x21c>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	07d8      	lsls	r0, r3, #31
 800d916:	d50f      	bpl.n	800d938 <_printf_float+0x23c>
 800d918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d91c:	4631      	mov	r1, r6
 800d91e:	4628      	mov	r0, r5
 800d920:	47b8      	blx	r7
 800d922:	3001      	adds	r0, #1
 800d924:	f43f af45 	beq.w	800d7b2 <_printf_float+0xb6>
 800d928:	f04f 0900 	mov.w	r9, #0
 800d92c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d930:	f104 0a1a 	add.w	sl, r4, #26
 800d934:	45c8      	cmp	r8, r9
 800d936:	dc09      	bgt.n	800d94c <_printf_float+0x250>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	079b      	lsls	r3, r3, #30
 800d93c:	f100 8103 	bmi.w	800db46 <_printf_float+0x44a>
 800d940:	68e0      	ldr	r0, [r4, #12]
 800d942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d944:	4298      	cmp	r0, r3
 800d946:	bfb8      	it	lt
 800d948:	4618      	movlt	r0, r3
 800d94a:	e734      	b.n	800d7b6 <_printf_float+0xba>
 800d94c:	2301      	movs	r3, #1
 800d94e:	4652      	mov	r2, sl
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f af2b 	beq.w	800d7b2 <_printf_float+0xb6>
 800d95c:	f109 0901 	add.w	r9, r9, #1
 800d960:	e7e8      	b.n	800d934 <_printf_float+0x238>
 800d962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	dc39      	bgt.n	800d9dc <_printf_float+0x2e0>
 800d968:	4a1b      	ldr	r2, [pc, #108]	@ (800d9d8 <_printf_float+0x2dc>)
 800d96a:	2301      	movs	r3, #1
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	f43f af1d 	beq.w	800d7b2 <_printf_float+0xb6>
 800d978:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d97c:	ea59 0303 	orrs.w	r3, r9, r3
 800d980:	d102      	bne.n	800d988 <_printf_float+0x28c>
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	07d9      	lsls	r1, r3, #31
 800d986:	d5d7      	bpl.n	800d938 <_printf_float+0x23c>
 800d988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f af0d 	beq.w	800d7b2 <_printf_float+0xb6>
 800d998:	f04f 0a00 	mov.w	sl, #0
 800d99c:	f104 0b1a 	add.w	fp, r4, #26
 800d9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a2:	425b      	negs	r3, r3
 800d9a4:	4553      	cmp	r3, sl
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x2b0>
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	e793      	b.n	800d8d4 <_printf_float+0x1d8>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	465a      	mov	r2, fp
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f aefb 	beq.w	800d7b2 <_printf_float+0xb6>
 800d9bc:	f10a 0a01 	add.w	sl, sl, #1
 800d9c0:	e7ee      	b.n	800d9a0 <_printf_float+0x2a4>
 800d9c2:	bf00      	nop
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	0801030c 	.word	0x0801030c
 800d9cc:	08010308 	.word	0x08010308
 800d9d0:	08010314 	.word	0x08010314
 800d9d4:	08010310 	.word	0x08010310
 800d9d8:	08010318 	.word	0x08010318
 800d9dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9e2:	4553      	cmp	r3, sl
 800d9e4:	bfa8      	it	ge
 800d9e6:	4653      	movge	r3, sl
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	4699      	mov	r9, r3
 800d9ec:	dc36      	bgt.n	800da5c <_printf_float+0x360>
 800d9ee:	f04f 0b00 	mov.w	fp, #0
 800d9f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9f6:	f104 021a 	add.w	r2, r4, #26
 800d9fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9fc:	9306      	str	r3, [sp, #24]
 800d9fe:	eba3 0309 	sub.w	r3, r3, r9
 800da02:	455b      	cmp	r3, fp
 800da04:	dc31      	bgt.n	800da6a <_printf_float+0x36e>
 800da06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da08:	459a      	cmp	sl, r3
 800da0a:	dc3a      	bgt.n	800da82 <_printf_float+0x386>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	07da      	lsls	r2, r3, #31
 800da10:	d437      	bmi.n	800da82 <_printf_float+0x386>
 800da12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da14:	ebaa 0903 	sub.w	r9, sl, r3
 800da18:	9b06      	ldr	r3, [sp, #24]
 800da1a:	ebaa 0303 	sub.w	r3, sl, r3
 800da1e:	4599      	cmp	r9, r3
 800da20:	bfa8      	it	ge
 800da22:	4699      	movge	r9, r3
 800da24:	f1b9 0f00 	cmp.w	r9, #0
 800da28:	dc33      	bgt.n	800da92 <_printf_float+0x396>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da32:	f104 0b1a 	add.w	fp, r4, #26
 800da36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da38:	ebaa 0303 	sub.w	r3, sl, r3
 800da3c:	eba3 0309 	sub.w	r3, r3, r9
 800da40:	4543      	cmp	r3, r8
 800da42:	f77f af79 	ble.w	800d938 <_printf_float+0x23c>
 800da46:	2301      	movs	r3, #1
 800da48:	465a      	mov	r2, fp
 800da4a:	4631      	mov	r1, r6
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b8      	blx	r7
 800da50:	3001      	adds	r0, #1
 800da52:	f43f aeae 	beq.w	800d7b2 <_printf_float+0xb6>
 800da56:	f108 0801 	add.w	r8, r8, #1
 800da5a:	e7ec      	b.n	800da36 <_printf_float+0x33a>
 800da5c:	4642      	mov	r2, r8
 800da5e:	4631      	mov	r1, r6
 800da60:	4628      	mov	r0, r5
 800da62:	47b8      	blx	r7
 800da64:	3001      	adds	r0, #1
 800da66:	d1c2      	bne.n	800d9ee <_printf_float+0x2f2>
 800da68:	e6a3      	b.n	800d7b2 <_printf_float+0xb6>
 800da6a:	2301      	movs	r3, #1
 800da6c:	4631      	mov	r1, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	9206      	str	r2, [sp, #24]
 800da72:	47b8      	blx	r7
 800da74:	3001      	adds	r0, #1
 800da76:	f43f ae9c 	beq.w	800d7b2 <_printf_float+0xb6>
 800da7a:	9a06      	ldr	r2, [sp, #24]
 800da7c:	f10b 0b01 	add.w	fp, fp, #1
 800da80:	e7bb      	b.n	800d9fa <_printf_float+0x2fe>
 800da82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da86:	4631      	mov	r1, r6
 800da88:	4628      	mov	r0, r5
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	d1c0      	bne.n	800da12 <_printf_float+0x316>
 800da90:	e68f      	b.n	800d7b2 <_printf_float+0xb6>
 800da92:	9a06      	ldr	r2, [sp, #24]
 800da94:	464b      	mov	r3, r9
 800da96:	4442      	add	r2, r8
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	d1c3      	bne.n	800da2a <_printf_float+0x32e>
 800daa2:	e686      	b.n	800d7b2 <_printf_float+0xb6>
 800daa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800daa8:	f1ba 0f01 	cmp.w	sl, #1
 800daac:	dc01      	bgt.n	800dab2 <_printf_float+0x3b6>
 800daae:	07db      	lsls	r3, r3, #31
 800dab0:	d536      	bpl.n	800db20 <_printf_float+0x424>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4642      	mov	r2, r8
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f ae78 	beq.w	800d7b2 <_printf_float+0xb6>
 800dac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dac6:	4631      	mov	r1, r6
 800dac8:	4628      	mov	r0, r5
 800daca:	47b8      	blx	r7
 800dacc:	3001      	adds	r0, #1
 800dace:	f43f ae70 	beq.w	800d7b2 <_printf_float+0xb6>
 800dad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dad6:	2200      	movs	r2, #0
 800dad8:	2300      	movs	r3, #0
 800dada:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dade:	f7f2 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800dae2:	b9c0      	cbnz	r0, 800db16 <_printf_float+0x41a>
 800dae4:	4653      	mov	r3, sl
 800dae6:	f108 0201 	add.w	r2, r8, #1
 800daea:	4631      	mov	r1, r6
 800daec:	4628      	mov	r0, r5
 800daee:	47b8      	blx	r7
 800daf0:	3001      	adds	r0, #1
 800daf2:	d10c      	bne.n	800db0e <_printf_float+0x412>
 800daf4:	e65d      	b.n	800d7b2 <_printf_float+0xb6>
 800daf6:	2301      	movs	r3, #1
 800daf8:	465a      	mov	r2, fp
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	f43f ae56 	beq.w	800d7b2 <_printf_float+0xb6>
 800db06:	f108 0801 	add.w	r8, r8, #1
 800db0a:	45d0      	cmp	r8, sl
 800db0c:	dbf3      	blt.n	800daf6 <_printf_float+0x3fa>
 800db0e:	464b      	mov	r3, r9
 800db10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db14:	e6df      	b.n	800d8d6 <_printf_float+0x1da>
 800db16:	f04f 0800 	mov.w	r8, #0
 800db1a:	f104 0b1a 	add.w	fp, r4, #26
 800db1e:	e7f4      	b.n	800db0a <_printf_float+0x40e>
 800db20:	2301      	movs	r3, #1
 800db22:	4642      	mov	r2, r8
 800db24:	e7e1      	b.n	800daea <_printf_float+0x3ee>
 800db26:	2301      	movs	r3, #1
 800db28:	464a      	mov	r2, r9
 800db2a:	4631      	mov	r1, r6
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b8      	blx	r7
 800db30:	3001      	adds	r0, #1
 800db32:	f43f ae3e 	beq.w	800d7b2 <_printf_float+0xb6>
 800db36:	f108 0801 	add.w	r8, r8, #1
 800db3a:	68e3      	ldr	r3, [r4, #12]
 800db3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db3e:	1a5b      	subs	r3, r3, r1
 800db40:	4543      	cmp	r3, r8
 800db42:	dcf0      	bgt.n	800db26 <_printf_float+0x42a>
 800db44:	e6fc      	b.n	800d940 <_printf_float+0x244>
 800db46:	f04f 0800 	mov.w	r8, #0
 800db4a:	f104 0919 	add.w	r9, r4, #25
 800db4e:	e7f4      	b.n	800db3a <_printf_float+0x43e>

0800db50 <_printf_common>:
 800db50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db54:	4616      	mov	r6, r2
 800db56:	4698      	mov	r8, r3
 800db58:	688a      	ldr	r2, [r1, #8]
 800db5a:	690b      	ldr	r3, [r1, #16]
 800db5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db60:	4293      	cmp	r3, r2
 800db62:	bfb8      	it	lt
 800db64:	4613      	movlt	r3, r2
 800db66:	6033      	str	r3, [r6, #0]
 800db68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db6c:	4607      	mov	r7, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	b10a      	cbz	r2, 800db76 <_printf_common+0x26>
 800db72:	3301      	adds	r3, #1
 800db74:	6033      	str	r3, [r6, #0]
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	0699      	lsls	r1, r3, #26
 800db7a:	bf42      	ittt	mi
 800db7c:	6833      	ldrmi	r3, [r6, #0]
 800db7e:	3302      	addmi	r3, #2
 800db80:	6033      	strmi	r3, [r6, #0]
 800db82:	6825      	ldr	r5, [r4, #0]
 800db84:	f015 0506 	ands.w	r5, r5, #6
 800db88:	d106      	bne.n	800db98 <_printf_common+0x48>
 800db8a:	f104 0a19 	add.w	sl, r4, #25
 800db8e:	68e3      	ldr	r3, [r4, #12]
 800db90:	6832      	ldr	r2, [r6, #0]
 800db92:	1a9b      	subs	r3, r3, r2
 800db94:	42ab      	cmp	r3, r5
 800db96:	dc26      	bgt.n	800dbe6 <_printf_common+0x96>
 800db98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db9c:	6822      	ldr	r2, [r4, #0]
 800db9e:	3b00      	subs	r3, #0
 800dba0:	bf18      	it	ne
 800dba2:	2301      	movne	r3, #1
 800dba4:	0692      	lsls	r2, r2, #26
 800dba6:	d42b      	bmi.n	800dc00 <_printf_common+0xb0>
 800dba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbac:	4641      	mov	r1, r8
 800dbae:	4638      	mov	r0, r7
 800dbb0:	47c8      	blx	r9
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d01e      	beq.n	800dbf4 <_printf_common+0xa4>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	6922      	ldr	r2, [r4, #16]
 800dbba:	f003 0306 	and.w	r3, r3, #6
 800dbbe:	2b04      	cmp	r3, #4
 800dbc0:	bf02      	ittt	eq
 800dbc2:	68e5      	ldreq	r5, [r4, #12]
 800dbc4:	6833      	ldreq	r3, [r6, #0]
 800dbc6:	1aed      	subeq	r5, r5, r3
 800dbc8:	68a3      	ldr	r3, [r4, #8]
 800dbca:	bf0c      	ite	eq
 800dbcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbd0:	2500      	movne	r5, #0
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	bfc4      	itt	gt
 800dbd6:	1a9b      	subgt	r3, r3, r2
 800dbd8:	18ed      	addgt	r5, r5, r3
 800dbda:	2600      	movs	r6, #0
 800dbdc:	341a      	adds	r4, #26
 800dbde:	42b5      	cmp	r5, r6
 800dbe0:	d11a      	bne.n	800dc18 <_printf_common+0xc8>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	e008      	b.n	800dbf8 <_printf_common+0xa8>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	4652      	mov	r2, sl
 800dbea:	4641      	mov	r1, r8
 800dbec:	4638      	mov	r0, r7
 800dbee:	47c8      	blx	r9
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d103      	bne.n	800dbfc <_printf_common+0xac>
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfc:	3501      	adds	r5, #1
 800dbfe:	e7c6      	b.n	800db8e <_printf_common+0x3e>
 800dc00:	18e1      	adds	r1, r4, r3
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	2030      	movs	r0, #48	@ 0x30
 800dc06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc0a:	4422      	add	r2, r4
 800dc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc14:	3302      	adds	r3, #2
 800dc16:	e7c7      	b.n	800dba8 <_printf_common+0x58>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	4638      	mov	r0, r7
 800dc20:	47c8      	blx	r9
 800dc22:	3001      	adds	r0, #1
 800dc24:	d0e6      	beq.n	800dbf4 <_printf_common+0xa4>
 800dc26:	3601      	adds	r6, #1
 800dc28:	e7d9      	b.n	800dbde <_printf_common+0x8e>
	...

0800dc2c <_printf_i>:
 800dc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc30:	7e0f      	ldrb	r7, [r1, #24]
 800dc32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc34:	2f78      	cmp	r7, #120	@ 0x78
 800dc36:	4691      	mov	r9, r2
 800dc38:	4680      	mov	r8, r0
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	469a      	mov	sl, r3
 800dc3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc42:	d807      	bhi.n	800dc54 <_printf_i+0x28>
 800dc44:	2f62      	cmp	r7, #98	@ 0x62
 800dc46:	d80a      	bhi.n	800dc5e <_printf_i+0x32>
 800dc48:	2f00      	cmp	r7, #0
 800dc4a:	f000 80d1 	beq.w	800ddf0 <_printf_i+0x1c4>
 800dc4e:	2f58      	cmp	r7, #88	@ 0x58
 800dc50:	f000 80b8 	beq.w	800ddc4 <_printf_i+0x198>
 800dc54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc5c:	e03a      	b.n	800dcd4 <_printf_i+0xa8>
 800dc5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc62:	2b15      	cmp	r3, #21
 800dc64:	d8f6      	bhi.n	800dc54 <_printf_i+0x28>
 800dc66:	a101      	add	r1, pc, #4	@ (adr r1, 800dc6c <_printf_i+0x40>)
 800dc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc6c:	0800dcc5 	.word	0x0800dcc5
 800dc70:	0800dcd9 	.word	0x0800dcd9
 800dc74:	0800dc55 	.word	0x0800dc55
 800dc78:	0800dc55 	.word	0x0800dc55
 800dc7c:	0800dc55 	.word	0x0800dc55
 800dc80:	0800dc55 	.word	0x0800dc55
 800dc84:	0800dcd9 	.word	0x0800dcd9
 800dc88:	0800dc55 	.word	0x0800dc55
 800dc8c:	0800dc55 	.word	0x0800dc55
 800dc90:	0800dc55 	.word	0x0800dc55
 800dc94:	0800dc55 	.word	0x0800dc55
 800dc98:	0800ddd7 	.word	0x0800ddd7
 800dc9c:	0800dd03 	.word	0x0800dd03
 800dca0:	0800dd91 	.word	0x0800dd91
 800dca4:	0800dc55 	.word	0x0800dc55
 800dca8:	0800dc55 	.word	0x0800dc55
 800dcac:	0800ddf9 	.word	0x0800ddf9
 800dcb0:	0800dc55 	.word	0x0800dc55
 800dcb4:	0800dd03 	.word	0x0800dd03
 800dcb8:	0800dc55 	.word	0x0800dc55
 800dcbc:	0800dc55 	.word	0x0800dc55
 800dcc0:	0800dd99 	.word	0x0800dd99
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	1d1a      	adds	r2, r3, #4
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6032      	str	r2, [r6, #0]
 800dccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e09c      	b.n	800de12 <_printf_i+0x1e6>
 800dcd8:	6833      	ldr	r3, [r6, #0]
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	1d19      	adds	r1, r3, #4
 800dcde:	6031      	str	r1, [r6, #0]
 800dce0:	0606      	lsls	r6, r0, #24
 800dce2:	d501      	bpl.n	800dce8 <_printf_i+0xbc>
 800dce4:	681d      	ldr	r5, [r3, #0]
 800dce6:	e003      	b.n	800dcf0 <_printf_i+0xc4>
 800dce8:	0645      	lsls	r5, r0, #25
 800dcea:	d5fb      	bpl.n	800dce4 <_printf_i+0xb8>
 800dcec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcf0:	2d00      	cmp	r5, #0
 800dcf2:	da03      	bge.n	800dcfc <_printf_i+0xd0>
 800dcf4:	232d      	movs	r3, #45	@ 0x2d
 800dcf6:	426d      	negs	r5, r5
 800dcf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcfc:	4858      	ldr	r0, [pc, #352]	@ (800de60 <_printf_i+0x234>)
 800dcfe:	230a      	movs	r3, #10
 800dd00:	e011      	b.n	800dd26 <_printf_i+0xfa>
 800dd02:	6821      	ldr	r1, [r4, #0]
 800dd04:	6833      	ldr	r3, [r6, #0]
 800dd06:	0608      	lsls	r0, r1, #24
 800dd08:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd0c:	d402      	bmi.n	800dd14 <_printf_i+0xe8>
 800dd0e:	0649      	lsls	r1, r1, #25
 800dd10:	bf48      	it	mi
 800dd12:	b2ad      	uxthmi	r5, r5
 800dd14:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd16:	4852      	ldr	r0, [pc, #328]	@ (800de60 <_printf_i+0x234>)
 800dd18:	6033      	str	r3, [r6, #0]
 800dd1a:	bf14      	ite	ne
 800dd1c:	230a      	movne	r3, #10
 800dd1e:	2308      	moveq	r3, #8
 800dd20:	2100      	movs	r1, #0
 800dd22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd26:	6866      	ldr	r6, [r4, #4]
 800dd28:	60a6      	str	r6, [r4, #8]
 800dd2a:	2e00      	cmp	r6, #0
 800dd2c:	db05      	blt.n	800dd3a <_printf_i+0x10e>
 800dd2e:	6821      	ldr	r1, [r4, #0]
 800dd30:	432e      	orrs	r6, r5
 800dd32:	f021 0104 	bic.w	r1, r1, #4
 800dd36:	6021      	str	r1, [r4, #0]
 800dd38:	d04b      	beq.n	800ddd2 <_printf_i+0x1a6>
 800dd3a:	4616      	mov	r6, r2
 800dd3c:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd40:	fb03 5711 	mls	r7, r3, r1, r5
 800dd44:	5dc7      	ldrb	r7, [r0, r7]
 800dd46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd4a:	462f      	mov	r7, r5
 800dd4c:	42bb      	cmp	r3, r7
 800dd4e:	460d      	mov	r5, r1
 800dd50:	d9f4      	bls.n	800dd3c <_printf_i+0x110>
 800dd52:	2b08      	cmp	r3, #8
 800dd54:	d10b      	bne.n	800dd6e <_printf_i+0x142>
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	07df      	lsls	r7, r3, #31
 800dd5a:	d508      	bpl.n	800dd6e <_printf_i+0x142>
 800dd5c:	6923      	ldr	r3, [r4, #16]
 800dd5e:	6861      	ldr	r1, [r4, #4]
 800dd60:	4299      	cmp	r1, r3
 800dd62:	bfde      	ittt	le
 800dd64:	2330      	movle	r3, #48	@ 0x30
 800dd66:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd6e:	1b92      	subs	r2, r2, r6
 800dd70:	6122      	str	r2, [r4, #16]
 800dd72:	f8cd a000 	str.w	sl, [sp]
 800dd76:	464b      	mov	r3, r9
 800dd78:	aa03      	add	r2, sp, #12
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4640      	mov	r0, r8
 800dd7e:	f7ff fee7 	bl	800db50 <_printf_common>
 800dd82:	3001      	adds	r0, #1
 800dd84:	d14a      	bne.n	800de1c <_printf_i+0x1f0>
 800dd86:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8a:	b004      	add	sp, #16
 800dd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	f043 0320 	orr.w	r3, r3, #32
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	4832      	ldr	r0, [pc, #200]	@ (800de64 <_printf_i+0x238>)
 800dd9a:	2778      	movs	r7, #120	@ 0x78
 800dd9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dda0:	6823      	ldr	r3, [r4, #0]
 800dda2:	6831      	ldr	r1, [r6, #0]
 800dda4:	061f      	lsls	r7, r3, #24
 800dda6:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddaa:	d402      	bmi.n	800ddb2 <_printf_i+0x186>
 800ddac:	065f      	lsls	r7, r3, #25
 800ddae:	bf48      	it	mi
 800ddb0:	b2ad      	uxthmi	r5, r5
 800ddb2:	6031      	str	r1, [r6, #0]
 800ddb4:	07d9      	lsls	r1, r3, #31
 800ddb6:	bf44      	itt	mi
 800ddb8:	f043 0320 	orrmi.w	r3, r3, #32
 800ddbc:	6023      	strmi	r3, [r4, #0]
 800ddbe:	b11d      	cbz	r5, 800ddc8 <_printf_i+0x19c>
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	e7ad      	b.n	800dd20 <_printf_i+0xf4>
 800ddc4:	4826      	ldr	r0, [pc, #152]	@ (800de60 <_printf_i+0x234>)
 800ddc6:	e7e9      	b.n	800dd9c <_printf_i+0x170>
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	f023 0320 	bic.w	r3, r3, #32
 800ddce:	6023      	str	r3, [r4, #0]
 800ddd0:	e7f6      	b.n	800ddc0 <_printf_i+0x194>
 800ddd2:	4616      	mov	r6, r2
 800ddd4:	e7bd      	b.n	800dd52 <_printf_i+0x126>
 800ddd6:	6833      	ldr	r3, [r6, #0]
 800ddd8:	6825      	ldr	r5, [r4, #0]
 800ddda:	6961      	ldr	r1, [r4, #20]
 800dddc:	1d18      	adds	r0, r3, #4
 800ddde:	6030      	str	r0, [r6, #0]
 800dde0:	062e      	lsls	r6, r5, #24
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	d501      	bpl.n	800ddea <_printf_i+0x1be>
 800dde6:	6019      	str	r1, [r3, #0]
 800dde8:	e002      	b.n	800ddf0 <_printf_i+0x1c4>
 800ddea:	0668      	lsls	r0, r5, #25
 800ddec:	d5fb      	bpl.n	800dde6 <_printf_i+0x1ba>
 800ddee:	8019      	strh	r1, [r3, #0]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	6123      	str	r3, [r4, #16]
 800ddf4:	4616      	mov	r6, r2
 800ddf6:	e7bc      	b.n	800dd72 <_printf_i+0x146>
 800ddf8:	6833      	ldr	r3, [r6, #0]
 800ddfa:	1d1a      	adds	r2, r3, #4
 800ddfc:	6032      	str	r2, [r6, #0]
 800ddfe:	681e      	ldr	r6, [r3, #0]
 800de00:	6862      	ldr	r2, [r4, #4]
 800de02:	2100      	movs	r1, #0
 800de04:	4630      	mov	r0, r6
 800de06:	f7f2 f9e3 	bl	80001d0 <memchr>
 800de0a:	b108      	cbz	r0, 800de10 <_printf_i+0x1e4>
 800de0c:	1b80      	subs	r0, r0, r6
 800de0e:	6060      	str	r0, [r4, #4]
 800de10:	6863      	ldr	r3, [r4, #4]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	2300      	movs	r3, #0
 800de16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de1a:	e7aa      	b.n	800dd72 <_printf_i+0x146>
 800de1c:	6923      	ldr	r3, [r4, #16]
 800de1e:	4632      	mov	r2, r6
 800de20:	4649      	mov	r1, r9
 800de22:	4640      	mov	r0, r8
 800de24:	47d0      	blx	sl
 800de26:	3001      	adds	r0, #1
 800de28:	d0ad      	beq.n	800dd86 <_printf_i+0x15a>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	079b      	lsls	r3, r3, #30
 800de2e:	d413      	bmi.n	800de58 <_printf_i+0x22c>
 800de30:	68e0      	ldr	r0, [r4, #12]
 800de32:	9b03      	ldr	r3, [sp, #12]
 800de34:	4298      	cmp	r0, r3
 800de36:	bfb8      	it	lt
 800de38:	4618      	movlt	r0, r3
 800de3a:	e7a6      	b.n	800dd8a <_printf_i+0x15e>
 800de3c:	2301      	movs	r3, #1
 800de3e:	4632      	mov	r2, r6
 800de40:	4649      	mov	r1, r9
 800de42:	4640      	mov	r0, r8
 800de44:	47d0      	blx	sl
 800de46:	3001      	adds	r0, #1
 800de48:	d09d      	beq.n	800dd86 <_printf_i+0x15a>
 800de4a:	3501      	adds	r5, #1
 800de4c:	68e3      	ldr	r3, [r4, #12]
 800de4e:	9903      	ldr	r1, [sp, #12]
 800de50:	1a5b      	subs	r3, r3, r1
 800de52:	42ab      	cmp	r3, r5
 800de54:	dcf2      	bgt.n	800de3c <_printf_i+0x210>
 800de56:	e7eb      	b.n	800de30 <_printf_i+0x204>
 800de58:	2500      	movs	r5, #0
 800de5a:	f104 0619 	add.w	r6, r4, #25
 800de5e:	e7f5      	b.n	800de4c <_printf_i+0x220>
 800de60:	0801031a 	.word	0x0801031a
 800de64:	0801032b 	.word	0x0801032b

0800de68 <std>:
 800de68:	2300      	movs	r3, #0
 800de6a:	b510      	push	{r4, lr}
 800de6c:	4604      	mov	r4, r0
 800de6e:	e9c0 3300 	strd	r3, r3, [r0]
 800de72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de76:	6083      	str	r3, [r0, #8]
 800de78:	8181      	strh	r1, [r0, #12]
 800de7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800de7c:	81c2      	strh	r2, [r0, #14]
 800de7e:	6183      	str	r3, [r0, #24]
 800de80:	4619      	mov	r1, r3
 800de82:	2208      	movs	r2, #8
 800de84:	305c      	adds	r0, #92	@ 0x5c
 800de86:	f000 fa01 	bl	800e28c <memset>
 800de8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dec0 <std+0x58>)
 800de8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800de8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <std+0x5c>)
 800de90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de92:	4b0d      	ldr	r3, [pc, #52]	@ (800dec8 <std+0x60>)
 800de94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <std+0x64>)
 800de98:	6323      	str	r3, [r4, #48]	@ 0x30
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <std+0x68>)
 800de9c:	6224      	str	r4, [r4, #32]
 800de9e:	429c      	cmp	r4, r3
 800dea0:	d006      	beq.n	800deb0 <std+0x48>
 800dea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dea6:	4294      	cmp	r4, r2
 800dea8:	d002      	beq.n	800deb0 <std+0x48>
 800deaa:	33d0      	adds	r3, #208	@ 0xd0
 800deac:	429c      	cmp	r4, r3
 800deae:	d105      	bne.n	800debc <std+0x54>
 800deb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800deb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deb8:	f000 ba74 	b.w	800e3a4 <__retarget_lock_init_recursive>
 800debc:	bd10      	pop	{r4, pc}
 800debe:	bf00      	nop
 800dec0:	0800e0dd 	.word	0x0800e0dd
 800dec4:	0800e0ff 	.word	0x0800e0ff
 800dec8:	0800e137 	.word	0x0800e137
 800decc:	0800e15b 	.word	0x0800e15b
 800ded0:	20002438 	.word	0x20002438

0800ded4 <stdio_exit_handler>:
 800ded4:	4a02      	ldr	r2, [pc, #8]	@ (800dee0 <stdio_exit_handler+0xc>)
 800ded6:	4903      	ldr	r1, [pc, #12]	@ (800dee4 <stdio_exit_handler+0x10>)
 800ded8:	4803      	ldr	r0, [pc, #12]	@ (800dee8 <stdio_exit_handler+0x14>)
 800deda:	f000 b869 	b.w	800dfb0 <_fwalk_sglue>
 800dede:	bf00      	nop
 800dee0:	2000011c 	.word	0x2000011c
 800dee4:	0800fb8d 	.word	0x0800fb8d
 800dee8:	2000012c 	.word	0x2000012c

0800deec <cleanup_stdio>:
 800deec:	6841      	ldr	r1, [r0, #4]
 800deee:	4b0c      	ldr	r3, [pc, #48]	@ (800df20 <cleanup_stdio+0x34>)
 800def0:	4299      	cmp	r1, r3
 800def2:	b510      	push	{r4, lr}
 800def4:	4604      	mov	r4, r0
 800def6:	d001      	beq.n	800defc <cleanup_stdio+0x10>
 800def8:	f001 fe48 	bl	800fb8c <_fflush_r>
 800defc:	68a1      	ldr	r1, [r4, #8]
 800defe:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <cleanup_stdio+0x38>)
 800df00:	4299      	cmp	r1, r3
 800df02:	d002      	beq.n	800df0a <cleanup_stdio+0x1e>
 800df04:	4620      	mov	r0, r4
 800df06:	f001 fe41 	bl	800fb8c <_fflush_r>
 800df0a:	68e1      	ldr	r1, [r4, #12]
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <cleanup_stdio+0x3c>)
 800df0e:	4299      	cmp	r1, r3
 800df10:	d004      	beq.n	800df1c <cleanup_stdio+0x30>
 800df12:	4620      	mov	r0, r4
 800df14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df18:	f001 be38 	b.w	800fb8c <_fflush_r>
 800df1c:	bd10      	pop	{r4, pc}
 800df1e:	bf00      	nop
 800df20:	20002438 	.word	0x20002438
 800df24:	200024a0 	.word	0x200024a0
 800df28:	20002508 	.word	0x20002508

0800df2c <global_stdio_init.part.0>:
 800df2c:	b510      	push	{r4, lr}
 800df2e:	4b0b      	ldr	r3, [pc, #44]	@ (800df5c <global_stdio_init.part.0+0x30>)
 800df30:	4c0b      	ldr	r4, [pc, #44]	@ (800df60 <global_stdio_init.part.0+0x34>)
 800df32:	4a0c      	ldr	r2, [pc, #48]	@ (800df64 <global_stdio_init.part.0+0x38>)
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	4620      	mov	r0, r4
 800df38:	2200      	movs	r2, #0
 800df3a:	2104      	movs	r1, #4
 800df3c:	f7ff ff94 	bl	800de68 <std>
 800df40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df44:	2201      	movs	r2, #1
 800df46:	2109      	movs	r1, #9
 800df48:	f7ff ff8e 	bl	800de68 <std>
 800df4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df50:	2202      	movs	r2, #2
 800df52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df56:	2112      	movs	r1, #18
 800df58:	f7ff bf86 	b.w	800de68 <std>
 800df5c:	20002570 	.word	0x20002570
 800df60:	20002438 	.word	0x20002438
 800df64:	0800ded5 	.word	0x0800ded5

0800df68 <__sfp_lock_acquire>:
 800df68:	4801      	ldr	r0, [pc, #4]	@ (800df70 <__sfp_lock_acquire+0x8>)
 800df6a:	f000 ba1c 	b.w	800e3a6 <__retarget_lock_acquire_recursive>
 800df6e:	bf00      	nop
 800df70:	20002579 	.word	0x20002579

0800df74 <__sfp_lock_release>:
 800df74:	4801      	ldr	r0, [pc, #4]	@ (800df7c <__sfp_lock_release+0x8>)
 800df76:	f000 ba17 	b.w	800e3a8 <__retarget_lock_release_recursive>
 800df7a:	bf00      	nop
 800df7c:	20002579 	.word	0x20002579

0800df80 <__sinit>:
 800df80:	b510      	push	{r4, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	f7ff fff0 	bl	800df68 <__sfp_lock_acquire>
 800df88:	6a23      	ldr	r3, [r4, #32]
 800df8a:	b11b      	cbz	r3, 800df94 <__sinit+0x14>
 800df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df90:	f7ff bff0 	b.w	800df74 <__sfp_lock_release>
 800df94:	4b04      	ldr	r3, [pc, #16]	@ (800dfa8 <__sinit+0x28>)
 800df96:	6223      	str	r3, [r4, #32]
 800df98:	4b04      	ldr	r3, [pc, #16]	@ (800dfac <__sinit+0x2c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f5      	bne.n	800df8c <__sinit+0xc>
 800dfa0:	f7ff ffc4 	bl	800df2c <global_stdio_init.part.0>
 800dfa4:	e7f2      	b.n	800df8c <__sinit+0xc>
 800dfa6:	bf00      	nop
 800dfa8:	0800deed 	.word	0x0800deed
 800dfac:	20002570 	.word	0x20002570

0800dfb0 <_fwalk_sglue>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	4607      	mov	r7, r0
 800dfb6:	4688      	mov	r8, r1
 800dfb8:	4614      	mov	r4, r2
 800dfba:	2600      	movs	r6, #0
 800dfbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfc0:	f1b9 0901 	subs.w	r9, r9, #1
 800dfc4:	d505      	bpl.n	800dfd2 <_fwalk_sglue+0x22>
 800dfc6:	6824      	ldr	r4, [r4, #0]
 800dfc8:	2c00      	cmp	r4, #0
 800dfca:	d1f7      	bne.n	800dfbc <_fwalk_sglue+0xc>
 800dfcc:	4630      	mov	r0, r6
 800dfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d907      	bls.n	800dfe8 <_fwalk_sglue+0x38>
 800dfd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	d003      	beq.n	800dfe8 <_fwalk_sglue+0x38>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	47c0      	blx	r8
 800dfe6:	4306      	orrs	r6, r0
 800dfe8:	3568      	adds	r5, #104	@ 0x68
 800dfea:	e7e9      	b.n	800dfc0 <_fwalk_sglue+0x10>

0800dfec <iprintf>:
 800dfec:	b40f      	push	{r0, r1, r2, r3}
 800dfee:	b507      	push	{r0, r1, r2, lr}
 800dff0:	4906      	ldr	r1, [pc, #24]	@ (800e00c <iprintf+0x20>)
 800dff2:	ab04      	add	r3, sp, #16
 800dff4:	6808      	ldr	r0, [r1, #0]
 800dff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dffa:	6881      	ldr	r1, [r0, #8]
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	f001 fc29 	bl	800f854 <_vfiprintf_r>
 800e002:	b003      	add	sp, #12
 800e004:	f85d eb04 	ldr.w	lr, [sp], #4
 800e008:	b004      	add	sp, #16
 800e00a:	4770      	bx	lr
 800e00c:	20000128 	.word	0x20000128

0800e010 <putchar>:
 800e010:	4b02      	ldr	r3, [pc, #8]	@ (800e01c <putchar+0xc>)
 800e012:	4601      	mov	r1, r0
 800e014:	6818      	ldr	r0, [r3, #0]
 800e016:	6882      	ldr	r2, [r0, #8]
 800e018:	f001 be42 	b.w	800fca0 <_putc_r>
 800e01c:	20000128 	.word	0x20000128

0800e020 <_puts_r>:
 800e020:	6a03      	ldr	r3, [r0, #32]
 800e022:	b570      	push	{r4, r5, r6, lr}
 800e024:	6884      	ldr	r4, [r0, #8]
 800e026:	4605      	mov	r5, r0
 800e028:	460e      	mov	r6, r1
 800e02a:	b90b      	cbnz	r3, 800e030 <_puts_r+0x10>
 800e02c:	f7ff ffa8 	bl	800df80 <__sinit>
 800e030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e032:	07db      	lsls	r3, r3, #31
 800e034:	d405      	bmi.n	800e042 <_puts_r+0x22>
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	0598      	lsls	r0, r3, #22
 800e03a:	d402      	bmi.n	800e042 <_puts_r+0x22>
 800e03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e03e:	f000 f9b2 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800e042:	89a3      	ldrh	r3, [r4, #12]
 800e044:	0719      	lsls	r1, r3, #28
 800e046:	d502      	bpl.n	800e04e <_puts_r+0x2e>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d135      	bne.n	800e0ba <_puts_r+0x9a>
 800e04e:	4621      	mov	r1, r4
 800e050:	4628      	mov	r0, r5
 800e052:	f000 f8c5 	bl	800e1e0 <__swsetup_r>
 800e056:	b380      	cbz	r0, 800e0ba <_puts_r+0x9a>
 800e058:	f04f 35ff 	mov.w	r5, #4294967295
 800e05c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e05e:	07da      	lsls	r2, r3, #31
 800e060:	d405      	bmi.n	800e06e <_puts_r+0x4e>
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	059b      	lsls	r3, r3, #22
 800e066:	d402      	bmi.n	800e06e <_puts_r+0x4e>
 800e068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e06a:	f000 f99d 	bl	800e3a8 <__retarget_lock_release_recursive>
 800e06e:	4628      	mov	r0, r5
 800e070:	bd70      	pop	{r4, r5, r6, pc}
 800e072:	2b00      	cmp	r3, #0
 800e074:	da04      	bge.n	800e080 <_puts_r+0x60>
 800e076:	69a2      	ldr	r2, [r4, #24]
 800e078:	429a      	cmp	r2, r3
 800e07a:	dc17      	bgt.n	800e0ac <_puts_r+0x8c>
 800e07c:	290a      	cmp	r1, #10
 800e07e:	d015      	beq.n	800e0ac <_puts_r+0x8c>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	6022      	str	r2, [r4, #0]
 800e086:	7019      	strb	r1, [r3, #0]
 800e088:	68a3      	ldr	r3, [r4, #8]
 800e08a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e08e:	3b01      	subs	r3, #1
 800e090:	60a3      	str	r3, [r4, #8]
 800e092:	2900      	cmp	r1, #0
 800e094:	d1ed      	bne.n	800e072 <_puts_r+0x52>
 800e096:	2b00      	cmp	r3, #0
 800e098:	da11      	bge.n	800e0be <_puts_r+0x9e>
 800e09a:	4622      	mov	r2, r4
 800e09c:	210a      	movs	r1, #10
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f000 f85f 	bl	800e162 <__swbuf_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d0d7      	beq.n	800e058 <_puts_r+0x38>
 800e0a8:	250a      	movs	r5, #10
 800e0aa:	e7d7      	b.n	800e05c <_puts_r+0x3c>
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f000 f857 	bl	800e162 <__swbuf_r>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d1e7      	bne.n	800e088 <_puts_r+0x68>
 800e0b8:	e7ce      	b.n	800e058 <_puts_r+0x38>
 800e0ba:	3e01      	subs	r6, #1
 800e0bc:	e7e4      	b.n	800e088 <_puts_r+0x68>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	220a      	movs	r2, #10
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	e7ee      	b.n	800e0a8 <_puts_r+0x88>
	...

0800e0cc <puts>:
 800e0cc:	4b02      	ldr	r3, [pc, #8]	@ (800e0d8 <puts+0xc>)
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	6818      	ldr	r0, [r3, #0]
 800e0d2:	f7ff bfa5 	b.w	800e020 <_puts_r>
 800e0d6:	bf00      	nop
 800e0d8:	20000128 	.word	0x20000128

0800e0dc <__sread>:
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	460c      	mov	r4, r1
 800e0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e4:	f000 f900 	bl	800e2e8 <_read_r>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	bfab      	itete	ge
 800e0ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e0f0:	181b      	addge	r3, r3, r0
 800e0f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0f6:	bfac      	ite	ge
 800e0f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0fa:	81a3      	strhlt	r3, [r4, #12]
 800e0fc:	bd10      	pop	{r4, pc}

0800e0fe <__swrite>:
 800e0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e102:	461f      	mov	r7, r3
 800e104:	898b      	ldrh	r3, [r1, #12]
 800e106:	05db      	lsls	r3, r3, #23
 800e108:	4605      	mov	r5, r0
 800e10a:	460c      	mov	r4, r1
 800e10c:	4616      	mov	r6, r2
 800e10e:	d505      	bpl.n	800e11c <__swrite+0x1e>
 800e110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e114:	2302      	movs	r3, #2
 800e116:	2200      	movs	r2, #0
 800e118:	f000 f8d4 	bl	800e2c4 <_lseek_r>
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e126:	81a3      	strh	r3, [r4, #12]
 800e128:	4632      	mov	r2, r6
 800e12a:	463b      	mov	r3, r7
 800e12c:	4628      	mov	r0, r5
 800e12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e132:	f000 b8fb 	b.w	800e32c <_write_r>

0800e136 <__sseek>:
 800e136:	b510      	push	{r4, lr}
 800e138:	460c      	mov	r4, r1
 800e13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e13e:	f000 f8c1 	bl	800e2c4 <_lseek_r>
 800e142:	1c43      	adds	r3, r0, #1
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	bf15      	itete	ne
 800e148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e14a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e14e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e152:	81a3      	strheq	r3, [r4, #12]
 800e154:	bf18      	it	ne
 800e156:	81a3      	strhne	r3, [r4, #12]
 800e158:	bd10      	pop	{r4, pc}

0800e15a <__sclose>:
 800e15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15e:	f000 b8a1 	b.w	800e2a4 <_close_r>

0800e162 <__swbuf_r>:
 800e162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e164:	460e      	mov	r6, r1
 800e166:	4614      	mov	r4, r2
 800e168:	4605      	mov	r5, r0
 800e16a:	b118      	cbz	r0, 800e174 <__swbuf_r+0x12>
 800e16c:	6a03      	ldr	r3, [r0, #32]
 800e16e:	b90b      	cbnz	r3, 800e174 <__swbuf_r+0x12>
 800e170:	f7ff ff06 	bl	800df80 <__sinit>
 800e174:	69a3      	ldr	r3, [r4, #24]
 800e176:	60a3      	str	r3, [r4, #8]
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	071a      	lsls	r2, r3, #28
 800e17c:	d501      	bpl.n	800e182 <__swbuf_r+0x20>
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	b943      	cbnz	r3, 800e194 <__swbuf_r+0x32>
 800e182:	4621      	mov	r1, r4
 800e184:	4628      	mov	r0, r5
 800e186:	f000 f82b 	bl	800e1e0 <__swsetup_r>
 800e18a:	b118      	cbz	r0, 800e194 <__swbuf_r+0x32>
 800e18c:	f04f 37ff 	mov.w	r7, #4294967295
 800e190:	4638      	mov	r0, r7
 800e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	6922      	ldr	r2, [r4, #16]
 800e198:	1a98      	subs	r0, r3, r2
 800e19a:	6963      	ldr	r3, [r4, #20]
 800e19c:	b2f6      	uxtb	r6, r6
 800e19e:	4283      	cmp	r3, r0
 800e1a0:	4637      	mov	r7, r6
 800e1a2:	dc05      	bgt.n	800e1b0 <__swbuf_r+0x4e>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f001 fcf0 	bl	800fb8c <_fflush_r>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d1ed      	bne.n	800e18c <__swbuf_r+0x2a>
 800e1b0:	68a3      	ldr	r3, [r4, #8]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	60a3      	str	r3, [r4, #8]
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	6022      	str	r2, [r4, #0]
 800e1bc:	701e      	strb	r6, [r3, #0]
 800e1be:	6962      	ldr	r2, [r4, #20]
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d004      	beq.n	800e1d0 <__swbuf_r+0x6e>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	07db      	lsls	r3, r3, #31
 800e1ca:	d5e1      	bpl.n	800e190 <__swbuf_r+0x2e>
 800e1cc:	2e0a      	cmp	r6, #10
 800e1ce:	d1df      	bne.n	800e190 <__swbuf_r+0x2e>
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f001 fcda 	bl	800fb8c <_fflush_r>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d0d9      	beq.n	800e190 <__swbuf_r+0x2e>
 800e1dc:	e7d6      	b.n	800e18c <__swbuf_r+0x2a>
	...

0800e1e0 <__swsetup_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4b29      	ldr	r3, [pc, #164]	@ (800e288 <__swsetup_r+0xa8>)
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	6818      	ldr	r0, [r3, #0]
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	b118      	cbz	r0, 800e1f4 <__swsetup_r+0x14>
 800e1ec:	6a03      	ldr	r3, [r0, #32]
 800e1ee:	b90b      	cbnz	r3, 800e1f4 <__swsetup_r+0x14>
 800e1f0:	f7ff fec6 	bl	800df80 <__sinit>
 800e1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1f8:	0719      	lsls	r1, r3, #28
 800e1fa:	d422      	bmi.n	800e242 <__swsetup_r+0x62>
 800e1fc:	06da      	lsls	r2, r3, #27
 800e1fe:	d407      	bmi.n	800e210 <__swsetup_r+0x30>
 800e200:	2209      	movs	r2, #9
 800e202:	602a      	str	r2, [r5, #0]
 800e204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	f04f 30ff 	mov.w	r0, #4294967295
 800e20e:	e033      	b.n	800e278 <__swsetup_r+0x98>
 800e210:	0758      	lsls	r0, r3, #29
 800e212:	d512      	bpl.n	800e23a <__swsetup_r+0x5a>
 800e214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e216:	b141      	cbz	r1, 800e22a <__swsetup_r+0x4a>
 800e218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e21c:	4299      	cmp	r1, r3
 800e21e:	d002      	beq.n	800e226 <__swsetup_r+0x46>
 800e220:	4628      	mov	r0, r5
 800e222:	f000 ff29 	bl	800f078 <_free_r>
 800e226:	2300      	movs	r3, #0
 800e228:	6363      	str	r3, [r4, #52]	@ 0x34
 800e22a:	89a3      	ldrh	r3, [r4, #12]
 800e22c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e230:	81a3      	strh	r3, [r4, #12]
 800e232:	2300      	movs	r3, #0
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	6923      	ldr	r3, [r4, #16]
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	f043 0308 	orr.w	r3, r3, #8
 800e240:	81a3      	strh	r3, [r4, #12]
 800e242:	6923      	ldr	r3, [r4, #16]
 800e244:	b94b      	cbnz	r3, 800e25a <__swsetup_r+0x7a>
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e250:	d003      	beq.n	800e25a <__swsetup_r+0x7a>
 800e252:	4621      	mov	r1, r4
 800e254:	4628      	mov	r0, r5
 800e256:	f001 fce7 	bl	800fc28 <__smakebuf_r>
 800e25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e25e:	f013 0201 	ands.w	r2, r3, #1
 800e262:	d00a      	beq.n	800e27a <__swsetup_r+0x9a>
 800e264:	2200      	movs	r2, #0
 800e266:	60a2      	str	r2, [r4, #8]
 800e268:	6962      	ldr	r2, [r4, #20]
 800e26a:	4252      	negs	r2, r2
 800e26c:	61a2      	str	r2, [r4, #24]
 800e26e:	6922      	ldr	r2, [r4, #16]
 800e270:	b942      	cbnz	r2, 800e284 <__swsetup_r+0xa4>
 800e272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e276:	d1c5      	bne.n	800e204 <__swsetup_r+0x24>
 800e278:	bd38      	pop	{r3, r4, r5, pc}
 800e27a:	0799      	lsls	r1, r3, #30
 800e27c:	bf58      	it	pl
 800e27e:	6962      	ldrpl	r2, [r4, #20]
 800e280:	60a2      	str	r2, [r4, #8]
 800e282:	e7f4      	b.n	800e26e <__swsetup_r+0x8e>
 800e284:	2000      	movs	r0, #0
 800e286:	e7f7      	b.n	800e278 <__swsetup_r+0x98>
 800e288:	20000128 	.word	0x20000128

0800e28c <memset>:
 800e28c:	4402      	add	r2, r0
 800e28e:	4603      	mov	r3, r0
 800e290:	4293      	cmp	r3, r2
 800e292:	d100      	bne.n	800e296 <memset+0xa>
 800e294:	4770      	bx	lr
 800e296:	f803 1b01 	strb.w	r1, [r3], #1
 800e29a:	e7f9      	b.n	800e290 <memset+0x4>

0800e29c <_localeconv_r>:
 800e29c:	4800      	ldr	r0, [pc, #0]	@ (800e2a0 <_localeconv_r+0x4>)
 800e29e:	4770      	bx	lr
 800e2a0:	20000268 	.word	0x20000268

0800e2a4 <_close_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4d06      	ldr	r5, [pc, #24]	@ (800e2c0 <_close_r+0x1c>)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	602b      	str	r3, [r5, #0]
 800e2b0:	f7f5 ff64 	bl	800417c <_close>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_close_r+0x1a>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_close_r+0x1a>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	20002574 	.word	0x20002574

0800e2c4 <_lseek_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d07      	ldr	r5, [pc, #28]	@ (800e2e4 <_lseek_r+0x20>)
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	4608      	mov	r0, r1
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	602a      	str	r2, [r5, #0]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f7f5 ff79 	bl	80041ca <_lseek>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_lseek_r+0x1e>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_lseek_r+0x1e>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20002574 	.word	0x20002574

0800e2e8 <_read_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	@ (800e308 <_read_r+0x20>)
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	4608      	mov	r0, r1
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	602a      	str	r2, [r5, #0]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	f7f5 ff23 	bl	8004142 <_read>
 800e2fc:	1c43      	adds	r3, r0, #1
 800e2fe:	d102      	bne.n	800e306 <_read_r+0x1e>
 800e300:	682b      	ldr	r3, [r5, #0]
 800e302:	b103      	cbz	r3, 800e306 <_read_r+0x1e>
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	bd38      	pop	{r3, r4, r5, pc}
 800e308:	20002574 	.word	0x20002574

0800e30c <_sbrk_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	@ (800e328 <_sbrk_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f5 ff64 	bl	80041e4 <_sbrk>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_sbrk_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_sbrk_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	20002574 	.word	0x20002574

0800e32c <_write_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	@ (800e34c <_write_r+0x20>)
 800e330:	4604      	mov	r4, r0
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	2200      	movs	r2, #0
 800e338:	602a      	str	r2, [r5, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7f5 f8a7 	bl	800348e <_write>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_write_r+0x1e>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_write_r+0x1e>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20002574 	.word	0x20002574

0800e350 <__errno>:
 800e350:	4b01      	ldr	r3, [pc, #4]	@ (800e358 <__errno+0x8>)
 800e352:	6818      	ldr	r0, [r3, #0]
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	20000128 	.word	0x20000128

0800e35c <__libc_init_array>:
 800e35c:	b570      	push	{r4, r5, r6, lr}
 800e35e:	4d0d      	ldr	r5, [pc, #52]	@ (800e394 <__libc_init_array+0x38>)
 800e360:	4c0d      	ldr	r4, [pc, #52]	@ (800e398 <__libc_init_array+0x3c>)
 800e362:	1b64      	subs	r4, r4, r5
 800e364:	10a4      	asrs	r4, r4, #2
 800e366:	2600      	movs	r6, #0
 800e368:	42a6      	cmp	r6, r4
 800e36a:	d109      	bne.n	800e380 <__libc_init_array+0x24>
 800e36c:	4d0b      	ldr	r5, [pc, #44]	@ (800e39c <__libc_init_array+0x40>)
 800e36e:	4c0c      	ldr	r4, [pc, #48]	@ (800e3a0 <__libc_init_array+0x44>)
 800e370:	f001 fd9c 	bl	800feac <_init>
 800e374:	1b64      	subs	r4, r4, r5
 800e376:	10a4      	asrs	r4, r4, #2
 800e378:	2600      	movs	r6, #0
 800e37a:	42a6      	cmp	r6, r4
 800e37c:	d105      	bne.n	800e38a <__libc_init_array+0x2e>
 800e37e:	bd70      	pop	{r4, r5, r6, pc}
 800e380:	f855 3b04 	ldr.w	r3, [r5], #4
 800e384:	4798      	blx	r3
 800e386:	3601      	adds	r6, #1
 800e388:	e7ee      	b.n	800e368 <__libc_init_array+0xc>
 800e38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e38e:	4798      	blx	r3
 800e390:	3601      	adds	r6, #1
 800e392:	e7f2      	b.n	800e37a <__libc_init_array+0x1e>
 800e394:	08010684 	.word	0x08010684
 800e398:	08010684 	.word	0x08010684
 800e39c:	08010684 	.word	0x08010684
 800e3a0:	08010688 	.word	0x08010688

0800e3a4 <__retarget_lock_init_recursive>:
 800e3a4:	4770      	bx	lr

0800e3a6 <__retarget_lock_acquire_recursive>:
 800e3a6:	4770      	bx	lr

0800e3a8 <__retarget_lock_release_recursive>:
 800e3a8:	4770      	bx	lr

0800e3aa <memcpy>:
 800e3aa:	440a      	add	r2, r1
 800e3ac:	4291      	cmp	r1, r2
 800e3ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3b2:	d100      	bne.n	800e3b6 <memcpy+0xc>
 800e3b4:	4770      	bx	lr
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3c0:	4291      	cmp	r1, r2
 800e3c2:	d1f9      	bne.n	800e3b8 <memcpy+0xe>
 800e3c4:	bd10      	pop	{r4, pc}

0800e3c6 <quorem>:
 800e3c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ca:	6903      	ldr	r3, [r0, #16]
 800e3cc:	690c      	ldr	r4, [r1, #16]
 800e3ce:	42a3      	cmp	r3, r4
 800e3d0:	4607      	mov	r7, r0
 800e3d2:	db7e      	blt.n	800e4d2 <quorem+0x10c>
 800e3d4:	3c01      	subs	r4, #1
 800e3d6:	f101 0814 	add.w	r8, r1, #20
 800e3da:	00a3      	lsls	r3, r4, #2
 800e3dc:	f100 0514 	add.w	r5, r0, #20
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3fc:	d32e      	bcc.n	800e45c <quorem+0x96>
 800e3fe:	f04f 0a00 	mov.w	sl, #0
 800e402:	46c4      	mov	ip, r8
 800e404:	46ae      	mov	lr, r5
 800e406:	46d3      	mov	fp, sl
 800e408:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e40c:	b298      	uxth	r0, r3
 800e40e:	fb06 a000 	mla	r0, r6, r0, sl
 800e412:	0c02      	lsrs	r2, r0, #16
 800e414:	0c1b      	lsrs	r3, r3, #16
 800e416:	fb06 2303 	mla	r3, r6, r3, r2
 800e41a:	f8de 2000 	ldr.w	r2, [lr]
 800e41e:	b280      	uxth	r0, r0
 800e420:	b292      	uxth	r2, r2
 800e422:	1a12      	subs	r2, r2, r0
 800e424:	445a      	add	r2, fp
 800e426:	f8de 0000 	ldr.w	r0, [lr]
 800e42a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e42e:	b29b      	uxth	r3, r3
 800e430:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e434:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e438:	b292      	uxth	r2, r2
 800e43a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e43e:	45e1      	cmp	r9, ip
 800e440:	f84e 2b04 	str.w	r2, [lr], #4
 800e444:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e448:	d2de      	bcs.n	800e408 <quorem+0x42>
 800e44a:	9b00      	ldr	r3, [sp, #0]
 800e44c:	58eb      	ldr	r3, [r5, r3]
 800e44e:	b92b      	cbnz	r3, 800e45c <quorem+0x96>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	3b04      	subs	r3, #4
 800e454:	429d      	cmp	r5, r3
 800e456:	461a      	mov	r2, r3
 800e458:	d32f      	bcc.n	800e4ba <quorem+0xf4>
 800e45a:	613c      	str	r4, [r7, #16]
 800e45c:	4638      	mov	r0, r7
 800e45e:	f001 f8c7 	bl	800f5f0 <__mcmp>
 800e462:	2800      	cmp	r0, #0
 800e464:	db25      	blt.n	800e4b2 <quorem+0xec>
 800e466:	4629      	mov	r1, r5
 800e468:	2000      	movs	r0, #0
 800e46a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e46e:	f8d1 c000 	ldr.w	ip, [r1]
 800e472:	fa1f fe82 	uxth.w	lr, r2
 800e476:	fa1f f38c 	uxth.w	r3, ip
 800e47a:	eba3 030e 	sub.w	r3, r3, lr
 800e47e:	4403      	add	r3, r0
 800e480:	0c12      	lsrs	r2, r2, #16
 800e482:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e486:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e490:	45c1      	cmp	r9, r8
 800e492:	f841 3b04 	str.w	r3, [r1], #4
 800e496:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e49a:	d2e6      	bcs.n	800e46a <quorem+0xa4>
 800e49c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4a4:	b922      	cbnz	r2, 800e4b0 <quorem+0xea>
 800e4a6:	3b04      	subs	r3, #4
 800e4a8:	429d      	cmp	r5, r3
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	d30b      	bcc.n	800e4c6 <quorem+0x100>
 800e4ae:	613c      	str	r4, [r7, #16]
 800e4b0:	3601      	adds	r6, #1
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	b003      	add	sp, #12
 800e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ba:	6812      	ldr	r2, [r2, #0]
 800e4bc:	3b04      	subs	r3, #4
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	d1cb      	bne.n	800e45a <quorem+0x94>
 800e4c2:	3c01      	subs	r4, #1
 800e4c4:	e7c6      	b.n	800e454 <quorem+0x8e>
 800e4c6:	6812      	ldr	r2, [r2, #0]
 800e4c8:	3b04      	subs	r3, #4
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	d1ef      	bne.n	800e4ae <quorem+0xe8>
 800e4ce:	3c01      	subs	r4, #1
 800e4d0:	e7ea      	b.n	800e4a8 <quorem+0xe2>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e7ee      	b.n	800e4b4 <quorem+0xee>
	...

0800e4d8 <_dtoa_r>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	69c7      	ldr	r7, [r0, #28]
 800e4de:	b097      	sub	sp, #92	@ 0x5c
 800e4e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e4e4:	ec55 4b10 	vmov	r4, r5, d0
 800e4e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e4ea:	9107      	str	r1, [sp, #28]
 800e4ec:	4681      	mov	r9, r0
 800e4ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e4f2:	b97f      	cbnz	r7, 800e514 <_dtoa_r+0x3c>
 800e4f4:	2010      	movs	r0, #16
 800e4f6:	f7fe ffab 	bl	800d450 <malloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800e500:	b920      	cbnz	r0, 800e50c <_dtoa_r+0x34>
 800e502:	4ba9      	ldr	r3, [pc, #676]	@ (800e7a8 <_dtoa_r+0x2d0>)
 800e504:	21ef      	movs	r1, #239	@ 0xef
 800e506:	48a9      	ldr	r0, [pc, #676]	@ (800e7ac <_dtoa_r+0x2d4>)
 800e508:	f001 fc20 	bl	800fd4c <__assert_func>
 800e50c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e510:	6007      	str	r7, [r0, #0]
 800e512:	60c7      	str	r7, [r0, #12]
 800e514:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e518:	6819      	ldr	r1, [r3, #0]
 800e51a:	b159      	cbz	r1, 800e534 <_dtoa_r+0x5c>
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	604a      	str	r2, [r1, #4]
 800e520:	2301      	movs	r3, #1
 800e522:	4093      	lsls	r3, r2
 800e524:	608b      	str	r3, [r1, #8]
 800e526:	4648      	mov	r0, r9
 800e528:	f000 fe30 	bl	800f18c <_Bfree>
 800e52c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
 800e534:	1e2b      	subs	r3, r5, #0
 800e536:	bfb9      	ittee	lt
 800e538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e53c:	9305      	strlt	r3, [sp, #20]
 800e53e:	2300      	movge	r3, #0
 800e540:	6033      	strge	r3, [r6, #0]
 800e542:	9f05      	ldr	r7, [sp, #20]
 800e544:	4b9a      	ldr	r3, [pc, #616]	@ (800e7b0 <_dtoa_r+0x2d8>)
 800e546:	bfbc      	itt	lt
 800e548:	2201      	movlt	r2, #1
 800e54a:	6032      	strlt	r2, [r6, #0]
 800e54c:	43bb      	bics	r3, r7
 800e54e:	d112      	bne.n	800e576 <_dtoa_r+0x9e>
 800e550:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e552:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e55c:	4323      	orrs	r3, r4
 800e55e:	f000 855a 	beq.w	800f016 <_dtoa_r+0xb3e>
 800e562:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e564:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e7c4 <_dtoa_r+0x2ec>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 855c 	beq.w	800f026 <_dtoa_r+0xb4e>
 800e56e:	f10a 0303 	add.w	r3, sl, #3
 800e572:	f000 bd56 	b.w	800f022 <_dtoa_r+0xb4a>
 800e576:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e57a:	2200      	movs	r2, #0
 800e57c:	ec51 0b17 	vmov	r0, r1, d7
 800e580:	2300      	movs	r3, #0
 800e582:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e586:	f7f2 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e58a:	4680      	mov	r8, r0
 800e58c:	b158      	cbz	r0, 800e5a6 <_dtoa_r+0xce>
 800e58e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e590:	2301      	movs	r3, #1
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e596:	b113      	cbz	r3, 800e59e <_dtoa_r+0xc6>
 800e598:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e59a:	4b86      	ldr	r3, [pc, #536]	@ (800e7b4 <_dtoa_r+0x2dc>)
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e7c8 <_dtoa_r+0x2f0>
 800e5a2:	f000 bd40 	b.w	800f026 <_dtoa_r+0xb4e>
 800e5a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e5aa:	aa14      	add	r2, sp, #80	@ 0x50
 800e5ac:	a915      	add	r1, sp, #84	@ 0x54
 800e5ae:	4648      	mov	r0, r9
 800e5b0:	f001 f8ce 	bl	800f750 <__d2b>
 800e5b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e5b8:	9002      	str	r0, [sp, #8]
 800e5ba:	2e00      	cmp	r6, #0
 800e5bc:	d078      	beq.n	800e6b0 <_dtoa_r+0x1d8>
 800e5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e5d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e5d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e5d8:	4619      	mov	r1, r3
 800e5da:	2200      	movs	r2, #0
 800e5dc:	4b76      	ldr	r3, [pc, #472]	@ (800e7b8 <_dtoa_r+0x2e0>)
 800e5de:	f7f1 fe53 	bl	8000288 <__aeabi_dsub>
 800e5e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e790 <_dtoa_r+0x2b8>)
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f7f2 f806 	bl	80005f8 <__aeabi_dmul>
 800e5ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800e798 <_dtoa_r+0x2c0>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	f7f1 fe4b 	bl	800028c <__adddf3>
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	460d      	mov	r5, r1
 800e5fc:	f7f1 ff92 	bl	8000524 <__aeabi_i2d>
 800e600:	a367      	add	r3, pc, #412	@ (adr r3, 800e7a0 <_dtoa_r+0x2c8>)
 800e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e606:	f7f1 fff7 	bl	80005f8 <__aeabi_dmul>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4620      	mov	r0, r4
 800e610:	4629      	mov	r1, r5
 800e612:	f7f1 fe3b 	bl	800028c <__adddf3>
 800e616:	4604      	mov	r4, r0
 800e618:	460d      	mov	r5, r1
 800e61a:	f7f2 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800e61e:	2200      	movs	r2, #0
 800e620:	4607      	mov	r7, r0
 800e622:	2300      	movs	r3, #0
 800e624:	4620      	mov	r0, r4
 800e626:	4629      	mov	r1, r5
 800e628:	f7f2 fa58 	bl	8000adc <__aeabi_dcmplt>
 800e62c:	b140      	cbz	r0, 800e640 <_dtoa_r+0x168>
 800e62e:	4638      	mov	r0, r7
 800e630:	f7f1 ff78 	bl	8000524 <__aeabi_i2d>
 800e634:	4622      	mov	r2, r4
 800e636:	462b      	mov	r3, r5
 800e638:	f7f2 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800e63c:	b900      	cbnz	r0, 800e640 <_dtoa_r+0x168>
 800e63e:	3f01      	subs	r7, #1
 800e640:	2f16      	cmp	r7, #22
 800e642:	d852      	bhi.n	800e6ea <_dtoa_r+0x212>
 800e644:	4b5d      	ldr	r3, [pc, #372]	@ (800e7bc <_dtoa_r+0x2e4>)
 800e646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e652:	f7f2 fa43 	bl	8000adc <__aeabi_dcmplt>
 800e656:	2800      	cmp	r0, #0
 800e658:	d049      	beq.n	800e6ee <_dtoa_r+0x216>
 800e65a:	3f01      	subs	r7, #1
 800e65c:	2300      	movs	r3, #0
 800e65e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e660:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e662:	1b9b      	subs	r3, r3, r6
 800e664:	1e5a      	subs	r2, r3, #1
 800e666:	bf45      	ittet	mi
 800e668:	f1c3 0301 	rsbmi	r3, r3, #1
 800e66c:	9300      	strmi	r3, [sp, #0]
 800e66e:	2300      	movpl	r3, #0
 800e670:	2300      	movmi	r3, #0
 800e672:	9206      	str	r2, [sp, #24]
 800e674:	bf54      	ite	pl
 800e676:	9300      	strpl	r3, [sp, #0]
 800e678:	9306      	strmi	r3, [sp, #24]
 800e67a:	2f00      	cmp	r7, #0
 800e67c:	db39      	blt.n	800e6f2 <_dtoa_r+0x21a>
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	970d      	str	r7, [sp, #52]	@ 0x34
 800e682:	443b      	add	r3, r7
 800e684:	9306      	str	r3, [sp, #24]
 800e686:	2300      	movs	r3, #0
 800e688:	9308      	str	r3, [sp, #32]
 800e68a:	9b07      	ldr	r3, [sp, #28]
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	d863      	bhi.n	800e758 <_dtoa_r+0x280>
 800e690:	2b05      	cmp	r3, #5
 800e692:	bfc4      	itt	gt
 800e694:	3b04      	subgt	r3, #4
 800e696:	9307      	strgt	r3, [sp, #28]
 800e698:	9b07      	ldr	r3, [sp, #28]
 800e69a:	f1a3 0302 	sub.w	r3, r3, #2
 800e69e:	bfcc      	ite	gt
 800e6a0:	2400      	movgt	r4, #0
 800e6a2:	2401      	movle	r4, #1
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d863      	bhi.n	800e770 <_dtoa_r+0x298>
 800e6a8:	e8df f003 	tbb	[pc, r3]
 800e6ac:	2b375452 	.word	0x2b375452
 800e6b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e6b4:	441e      	add	r6, r3
 800e6b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e6ba:	2b20      	cmp	r3, #32
 800e6bc:	bfc1      	itttt	gt
 800e6be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e6c2:	409f      	lslgt	r7, r3
 800e6c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e6c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e6cc:	bfd6      	itet	le
 800e6ce:	f1c3 0320 	rsble	r3, r3, #32
 800e6d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e6d6:	fa04 f003 	lslle.w	r0, r4, r3
 800e6da:	f7f1 ff13 	bl	8000504 <__aeabi_ui2d>
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6e4:	3e01      	subs	r6, #1
 800e6e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e6e8:	e776      	b.n	800e5d8 <_dtoa_r+0x100>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e7b7      	b.n	800e65e <_dtoa_r+0x186>
 800e6ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800e6f0:	e7b6      	b.n	800e660 <_dtoa_r+0x188>
 800e6f2:	9b00      	ldr	r3, [sp, #0]
 800e6f4:	1bdb      	subs	r3, r3, r7
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	427b      	negs	r3, r7
 800e6fa:	9308      	str	r3, [sp, #32]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800e700:	e7c3      	b.n	800e68a <_dtoa_r+0x1b2>
 800e702:	2301      	movs	r3, #1
 800e704:	9309      	str	r3, [sp, #36]	@ 0x24
 800e706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e708:	eb07 0b03 	add.w	fp, r7, r3
 800e70c:	f10b 0301 	add.w	r3, fp, #1
 800e710:	2b01      	cmp	r3, #1
 800e712:	9303      	str	r3, [sp, #12]
 800e714:	bfb8      	it	lt
 800e716:	2301      	movlt	r3, #1
 800e718:	e006      	b.n	800e728 <_dtoa_r+0x250>
 800e71a:	2301      	movs	r3, #1
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e720:	2b00      	cmp	r3, #0
 800e722:	dd28      	ble.n	800e776 <_dtoa_r+0x29e>
 800e724:	469b      	mov	fp, r3
 800e726:	9303      	str	r3, [sp, #12]
 800e728:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e72c:	2100      	movs	r1, #0
 800e72e:	2204      	movs	r2, #4
 800e730:	f102 0514 	add.w	r5, r2, #20
 800e734:	429d      	cmp	r5, r3
 800e736:	d926      	bls.n	800e786 <_dtoa_r+0x2ae>
 800e738:	6041      	str	r1, [r0, #4]
 800e73a:	4648      	mov	r0, r9
 800e73c:	f000 fce6 	bl	800f10c <_Balloc>
 800e740:	4682      	mov	sl, r0
 800e742:	2800      	cmp	r0, #0
 800e744:	d142      	bne.n	800e7cc <_dtoa_r+0x2f4>
 800e746:	4b1e      	ldr	r3, [pc, #120]	@ (800e7c0 <_dtoa_r+0x2e8>)
 800e748:	4602      	mov	r2, r0
 800e74a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e74e:	e6da      	b.n	800e506 <_dtoa_r+0x2e>
 800e750:	2300      	movs	r3, #0
 800e752:	e7e3      	b.n	800e71c <_dtoa_r+0x244>
 800e754:	2300      	movs	r3, #0
 800e756:	e7d5      	b.n	800e704 <_dtoa_r+0x22c>
 800e758:	2401      	movs	r4, #1
 800e75a:	2300      	movs	r3, #0
 800e75c:	9307      	str	r3, [sp, #28]
 800e75e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e760:	f04f 3bff 	mov.w	fp, #4294967295
 800e764:	2200      	movs	r2, #0
 800e766:	f8cd b00c 	str.w	fp, [sp, #12]
 800e76a:	2312      	movs	r3, #18
 800e76c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e76e:	e7db      	b.n	800e728 <_dtoa_r+0x250>
 800e770:	2301      	movs	r3, #1
 800e772:	9309      	str	r3, [sp, #36]	@ 0x24
 800e774:	e7f4      	b.n	800e760 <_dtoa_r+0x288>
 800e776:	f04f 0b01 	mov.w	fp, #1
 800e77a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e77e:	465b      	mov	r3, fp
 800e780:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e784:	e7d0      	b.n	800e728 <_dtoa_r+0x250>
 800e786:	3101      	adds	r1, #1
 800e788:	0052      	lsls	r2, r2, #1
 800e78a:	e7d1      	b.n	800e730 <_dtoa_r+0x258>
 800e78c:	f3af 8000 	nop.w
 800e790:	636f4361 	.word	0x636f4361
 800e794:	3fd287a7 	.word	0x3fd287a7
 800e798:	8b60c8b3 	.word	0x8b60c8b3
 800e79c:	3fc68a28 	.word	0x3fc68a28
 800e7a0:	509f79fb 	.word	0x509f79fb
 800e7a4:	3fd34413 	.word	0x3fd34413
 800e7a8:	08010349 	.word	0x08010349
 800e7ac:	08010360 	.word	0x08010360
 800e7b0:	7ff00000 	.word	0x7ff00000
 800e7b4:	08010319 	.word	0x08010319
 800e7b8:	3ff80000 	.word	0x3ff80000
 800e7bc:	080104b0 	.word	0x080104b0
 800e7c0:	080103b8 	.word	0x080103b8
 800e7c4:	08010345 	.word	0x08010345
 800e7c8:	08010318 	.word	0x08010318
 800e7cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e7d0:	6018      	str	r0, [r3, #0]
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	2b0e      	cmp	r3, #14
 800e7d6:	f200 80a1 	bhi.w	800e91c <_dtoa_r+0x444>
 800e7da:	2c00      	cmp	r4, #0
 800e7dc:	f000 809e 	beq.w	800e91c <_dtoa_r+0x444>
 800e7e0:	2f00      	cmp	r7, #0
 800e7e2:	dd33      	ble.n	800e84c <_dtoa_r+0x374>
 800e7e4:	4b9c      	ldr	r3, [pc, #624]	@ (800ea58 <_dtoa_r+0x580>)
 800e7e6:	f007 020f 	and.w	r2, r7, #15
 800e7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7ee:	ed93 7b00 	vldr	d7, [r3]
 800e7f2:	05f8      	lsls	r0, r7, #23
 800e7f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e7f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7fc:	d516      	bpl.n	800e82c <_dtoa_r+0x354>
 800e7fe:	4b97      	ldr	r3, [pc, #604]	@ (800ea5c <_dtoa_r+0x584>)
 800e800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e808:	f7f2 f820 	bl	800084c <__aeabi_ddiv>
 800e80c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e810:	f004 040f 	and.w	r4, r4, #15
 800e814:	2603      	movs	r6, #3
 800e816:	4d91      	ldr	r5, [pc, #580]	@ (800ea5c <_dtoa_r+0x584>)
 800e818:	b954      	cbnz	r4, 800e830 <_dtoa_r+0x358>
 800e81a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e81e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e822:	f7f2 f813 	bl	800084c <__aeabi_ddiv>
 800e826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e82a:	e028      	b.n	800e87e <_dtoa_r+0x3a6>
 800e82c:	2602      	movs	r6, #2
 800e82e:	e7f2      	b.n	800e816 <_dtoa_r+0x33e>
 800e830:	07e1      	lsls	r1, r4, #31
 800e832:	d508      	bpl.n	800e846 <_dtoa_r+0x36e>
 800e834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e838:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e844:	3601      	adds	r6, #1
 800e846:	1064      	asrs	r4, r4, #1
 800e848:	3508      	adds	r5, #8
 800e84a:	e7e5      	b.n	800e818 <_dtoa_r+0x340>
 800e84c:	f000 80af 	beq.w	800e9ae <_dtoa_r+0x4d6>
 800e850:	427c      	negs	r4, r7
 800e852:	4b81      	ldr	r3, [pc, #516]	@ (800ea58 <_dtoa_r+0x580>)
 800e854:	4d81      	ldr	r5, [pc, #516]	@ (800ea5c <_dtoa_r+0x584>)
 800e856:	f004 020f 	and.w	r2, r4, #15
 800e85a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e866:	f7f1 fec7 	bl	80005f8 <__aeabi_dmul>
 800e86a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e86e:	1124      	asrs	r4, r4, #4
 800e870:	2300      	movs	r3, #0
 800e872:	2602      	movs	r6, #2
 800e874:	2c00      	cmp	r4, #0
 800e876:	f040 808f 	bne.w	800e998 <_dtoa_r+0x4c0>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1d3      	bne.n	800e826 <_dtoa_r+0x34e>
 800e87e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e880:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 8094 	beq.w	800e9b2 <_dtoa_r+0x4da>
 800e88a:	4b75      	ldr	r3, [pc, #468]	@ (800ea60 <_dtoa_r+0x588>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	4620      	mov	r0, r4
 800e890:	4629      	mov	r1, r5
 800e892:	f7f2 f923 	bl	8000adc <__aeabi_dcmplt>
 800e896:	2800      	cmp	r0, #0
 800e898:	f000 808b 	beq.w	800e9b2 <_dtoa_r+0x4da>
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 8087 	beq.w	800e9b2 <_dtoa_r+0x4da>
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	dd34      	ble.n	800e914 <_dtoa_r+0x43c>
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	4b6d      	ldr	r3, [pc, #436]	@ (800ea64 <_dtoa_r+0x58c>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	f7f1 fea1 	bl	80005f8 <__aeabi_dmul>
 800e8b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800e8be:	3601      	adds	r6, #1
 800e8c0:	465c      	mov	r4, fp
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f7f1 fe2e 	bl	8000524 <__aeabi_i2d>
 800e8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8cc:	f7f1 fe94 	bl	80005f8 <__aeabi_dmul>
 800e8d0:	4b65      	ldr	r3, [pc, #404]	@ (800ea68 <_dtoa_r+0x590>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f7f1 fcda 	bl	800028c <__adddf3>
 800e8d8:	4605      	mov	r5, r0
 800e8da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	d16a      	bne.n	800e9b8 <_dtoa_r+0x4e0>
 800e8e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8e6:	4b61      	ldr	r3, [pc, #388]	@ (800ea6c <_dtoa_r+0x594>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f7f1 fccd 	bl	8000288 <__aeabi_dsub>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8f6:	462a      	mov	r2, r5
 800e8f8:	4633      	mov	r3, r6
 800e8fa:	f7f2 f90d 	bl	8000b18 <__aeabi_dcmpgt>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f040 8298 	bne.w	800ee34 <_dtoa_r+0x95c>
 800e904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e908:	462a      	mov	r2, r5
 800e90a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e90e:	f7f2 f8e5 	bl	8000adc <__aeabi_dcmplt>
 800e912:	bb38      	cbnz	r0, 800e964 <_dtoa_r+0x48c>
 800e914:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e918:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e91c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f2c0 8157 	blt.w	800ebd2 <_dtoa_r+0x6fa>
 800e924:	2f0e      	cmp	r7, #14
 800e926:	f300 8154 	bgt.w	800ebd2 <_dtoa_r+0x6fa>
 800e92a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea58 <_dtoa_r+0x580>)
 800e92c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e930:	ed93 7b00 	vldr	d7, [r3]
 800e934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e936:	2b00      	cmp	r3, #0
 800e938:	ed8d 7b00 	vstr	d7, [sp]
 800e93c:	f280 80e5 	bge.w	800eb0a <_dtoa_r+0x632>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f300 80e1 	bgt.w	800eb0a <_dtoa_r+0x632>
 800e948:	d10c      	bne.n	800e964 <_dtoa_r+0x48c>
 800e94a:	4b48      	ldr	r3, [pc, #288]	@ (800ea6c <_dtoa_r+0x594>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	ec51 0b17 	vmov	r0, r1, d7
 800e952:	f7f1 fe51 	bl	80005f8 <__aeabi_dmul>
 800e956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e95a:	f7f2 f8d3 	bl	8000b04 <__aeabi_dcmpge>
 800e95e:	2800      	cmp	r0, #0
 800e960:	f000 8266 	beq.w	800ee30 <_dtoa_r+0x958>
 800e964:	2400      	movs	r4, #0
 800e966:	4625      	mov	r5, r4
 800e968:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e96a:	4656      	mov	r6, sl
 800e96c:	ea6f 0803 	mvn.w	r8, r3
 800e970:	2700      	movs	r7, #0
 800e972:	4621      	mov	r1, r4
 800e974:	4648      	mov	r0, r9
 800e976:	f000 fc09 	bl	800f18c <_Bfree>
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	f000 80bd 	beq.w	800eafa <_dtoa_r+0x622>
 800e980:	b12f      	cbz	r7, 800e98e <_dtoa_r+0x4b6>
 800e982:	42af      	cmp	r7, r5
 800e984:	d003      	beq.n	800e98e <_dtoa_r+0x4b6>
 800e986:	4639      	mov	r1, r7
 800e988:	4648      	mov	r0, r9
 800e98a:	f000 fbff 	bl	800f18c <_Bfree>
 800e98e:	4629      	mov	r1, r5
 800e990:	4648      	mov	r0, r9
 800e992:	f000 fbfb 	bl	800f18c <_Bfree>
 800e996:	e0b0      	b.n	800eafa <_dtoa_r+0x622>
 800e998:	07e2      	lsls	r2, r4, #31
 800e99a:	d505      	bpl.n	800e9a8 <_dtoa_r+0x4d0>
 800e99c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9a0:	f7f1 fe2a 	bl	80005f8 <__aeabi_dmul>
 800e9a4:	3601      	adds	r6, #1
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	1064      	asrs	r4, r4, #1
 800e9aa:	3508      	adds	r5, #8
 800e9ac:	e762      	b.n	800e874 <_dtoa_r+0x39c>
 800e9ae:	2602      	movs	r6, #2
 800e9b0:	e765      	b.n	800e87e <_dtoa_r+0x3a6>
 800e9b2:	9c03      	ldr	r4, [sp, #12]
 800e9b4:	46b8      	mov	r8, r7
 800e9b6:	e784      	b.n	800e8c2 <_dtoa_r+0x3ea>
 800e9b8:	4b27      	ldr	r3, [pc, #156]	@ (800ea58 <_dtoa_r+0x580>)
 800e9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9c4:	4454      	add	r4, sl
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	d054      	beq.n	800ea74 <_dtoa_r+0x59c>
 800e9ca:	4929      	ldr	r1, [pc, #164]	@ (800ea70 <_dtoa_r+0x598>)
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f7f1 ff3d 	bl	800084c <__aeabi_ddiv>
 800e9d2:	4633      	mov	r3, r6
 800e9d4:	462a      	mov	r2, r5
 800e9d6:	f7f1 fc57 	bl	8000288 <__aeabi_dsub>
 800e9da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e9de:	4656      	mov	r6, sl
 800e9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9e4:	f7f2 f8b8 	bl	8000b58 <__aeabi_d2iz>
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	f7f1 fd9b 	bl	8000524 <__aeabi_i2d>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9f6:	f7f1 fc47 	bl	8000288 <__aeabi_dsub>
 800e9fa:	3530      	adds	r5, #48	@ 0x30
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea04:	f806 5b01 	strb.w	r5, [r6], #1
 800ea08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea0c:	f7f2 f866 	bl	8000adc <__aeabi_dcmplt>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d172      	bne.n	800eafa <_dtoa_r+0x622>
 800ea14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea18:	4911      	ldr	r1, [pc, #68]	@ (800ea60 <_dtoa_r+0x588>)
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	f7f1 fc34 	bl	8000288 <__aeabi_dsub>
 800ea20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea24:	f7f2 f85a 	bl	8000adc <__aeabi_dcmplt>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	f040 80b4 	bne.w	800eb96 <_dtoa_r+0x6be>
 800ea2e:	42a6      	cmp	r6, r4
 800ea30:	f43f af70 	beq.w	800e914 <_dtoa_r+0x43c>
 800ea34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ea38:	4b0a      	ldr	r3, [pc, #40]	@ (800ea64 <_dtoa_r+0x58c>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f7f1 fddc 	bl	80005f8 <__aeabi_dmul>
 800ea40:	4b08      	ldr	r3, [pc, #32]	@ (800ea64 <_dtoa_r+0x58c>)
 800ea42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea46:	2200      	movs	r2, #0
 800ea48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea4c:	f7f1 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ea50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea54:	e7c4      	b.n	800e9e0 <_dtoa_r+0x508>
 800ea56:	bf00      	nop
 800ea58:	080104b0 	.word	0x080104b0
 800ea5c:	08010488 	.word	0x08010488
 800ea60:	3ff00000 	.word	0x3ff00000
 800ea64:	40240000 	.word	0x40240000
 800ea68:	401c0000 	.word	0x401c0000
 800ea6c:	40140000 	.word	0x40140000
 800ea70:	3fe00000 	.word	0x3fe00000
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea80:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ea82:	4656      	mov	r6, sl
 800ea84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea88:	f7f2 f866 	bl	8000b58 <__aeabi_d2iz>
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	f7f1 fd49 	bl	8000524 <__aeabi_i2d>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea9a:	f7f1 fbf5 	bl	8000288 <__aeabi_dsub>
 800ea9e:	3530      	adds	r5, #48	@ 0x30
 800eaa0:	f806 5b01 	strb.w	r5, [r6], #1
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	42a6      	cmp	r6, r4
 800eaaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eaae:	f04f 0200 	mov.w	r2, #0
 800eab2:	d124      	bne.n	800eafe <_dtoa_r+0x626>
 800eab4:	4baf      	ldr	r3, [pc, #700]	@ (800ed74 <_dtoa_r+0x89c>)
 800eab6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eaba:	f7f1 fbe7 	bl	800028c <__adddf3>
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eac6:	f7f2 f827 	bl	8000b18 <__aeabi_dcmpgt>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d163      	bne.n	800eb96 <_dtoa_r+0x6be>
 800eace:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ead2:	49a8      	ldr	r1, [pc, #672]	@ (800ed74 <_dtoa_r+0x89c>)
 800ead4:	2000      	movs	r0, #0
 800ead6:	f7f1 fbd7 	bl	8000288 <__aeabi_dsub>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eae2:	f7f1 fffb 	bl	8000adc <__aeabi_dcmplt>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	f43f af14 	beq.w	800e914 <_dtoa_r+0x43c>
 800eaec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eaee:	1e73      	subs	r3, r6, #1
 800eaf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eaf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eaf6:	2b30      	cmp	r3, #48	@ 0x30
 800eaf8:	d0f8      	beq.n	800eaec <_dtoa_r+0x614>
 800eafa:	4647      	mov	r7, r8
 800eafc:	e03b      	b.n	800eb76 <_dtoa_r+0x69e>
 800eafe:	4b9e      	ldr	r3, [pc, #632]	@ (800ed78 <_dtoa_r+0x8a0>)
 800eb00:	f7f1 fd7a 	bl	80005f8 <__aeabi_dmul>
 800eb04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb08:	e7bc      	b.n	800ea84 <_dtoa_r+0x5ac>
 800eb0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eb0e:	4656      	mov	r6, sl
 800eb10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fe98 	bl	800084c <__aeabi_ddiv>
 800eb1c:	f7f2 f81c 	bl	8000b58 <__aeabi_d2iz>
 800eb20:	4680      	mov	r8, r0
 800eb22:	f7f1 fcff 	bl	8000524 <__aeabi_i2d>
 800eb26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb2a:	f7f1 fd65 	bl	80005f8 <__aeabi_dmul>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	460b      	mov	r3, r1
 800eb32:	4620      	mov	r0, r4
 800eb34:	4629      	mov	r1, r5
 800eb36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb3a:	f7f1 fba5 	bl	8000288 <__aeabi_dsub>
 800eb3e:	f806 4b01 	strb.w	r4, [r6], #1
 800eb42:	9d03      	ldr	r5, [sp, #12]
 800eb44:	eba6 040a 	sub.w	r4, r6, sl
 800eb48:	42a5      	cmp	r5, r4
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	d133      	bne.n	800ebb8 <_dtoa_r+0x6e0>
 800eb50:	f7f1 fb9c 	bl	800028c <__adddf3>
 800eb54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb58:	4604      	mov	r4, r0
 800eb5a:	460d      	mov	r5, r1
 800eb5c:	f7f1 ffdc 	bl	8000b18 <__aeabi_dcmpgt>
 800eb60:	b9c0      	cbnz	r0, 800eb94 <_dtoa_r+0x6bc>
 800eb62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb66:	4620      	mov	r0, r4
 800eb68:	4629      	mov	r1, r5
 800eb6a:	f7f1 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb6e:	b110      	cbz	r0, 800eb76 <_dtoa_r+0x69e>
 800eb70:	f018 0f01 	tst.w	r8, #1
 800eb74:	d10e      	bne.n	800eb94 <_dtoa_r+0x6bc>
 800eb76:	9902      	ldr	r1, [sp, #8]
 800eb78:	4648      	mov	r0, r9
 800eb7a:	f000 fb07 	bl	800f18c <_Bfree>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	7033      	strb	r3, [r6, #0]
 800eb82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb84:	3701      	adds	r7, #1
 800eb86:	601f      	str	r7, [r3, #0]
 800eb88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 824b 	beq.w	800f026 <_dtoa_r+0xb4e>
 800eb90:	601e      	str	r6, [r3, #0]
 800eb92:	e248      	b.n	800f026 <_dtoa_r+0xb4e>
 800eb94:	46b8      	mov	r8, r7
 800eb96:	4633      	mov	r3, r6
 800eb98:	461e      	mov	r6, r3
 800eb9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb9e:	2a39      	cmp	r2, #57	@ 0x39
 800eba0:	d106      	bne.n	800ebb0 <_dtoa_r+0x6d8>
 800eba2:	459a      	cmp	sl, r3
 800eba4:	d1f8      	bne.n	800eb98 <_dtoa_r+0x6c0>
 800eba6:	2230      	movs	r2, #48	@ 0x30
 800eba8:	f108 0801 	add.w	r8, r8, #1
 800ebac:	f88a 2000 	strb.w	r2, [sl]
 800ebb0:	781a      	ldrb	r2, [r3, #0]
 800ebb2:	3201      	adds	r2, #1
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	e7a0      	b.n	800eafa <_dtoa_r+0x622>
 800ebb8:	4b6f      	ldr	r3, [pc, #444]	@ (800ed78 <_dtoa_r+0x8a0>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f7f1 fd1c 	bl	80005f8 <__aeabi_dmul>
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	460d      	mov	r5, r1
 800ebc8:	f7f1 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d09f      	beq.n	800eb10 <_dtoa_r+0x638>
 800ebd0:	e7d1      	b.n	800eb76 <_dtoa_r+0x69e>
 800ebd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	f000 80ea 	beq.w	800edae <_dtoa_r+0x8d6>
 800ebda:	9a07      	ldr	r2, [sp, #28]
 800ebdc:	2a01      	cmp	r2, #1
 800ebde:	f300 80cd 	bgt.w	800ed7c <_dtoa_r+0x8a4>
 800ebe2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ebe4:	2a00      	cmp	r2, #0
 800ebe6:	f000 80c1 	beq.w	800ed6c <_dtoa_r+0x894>
 800ebea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebee:	9c08      	ldr	r4, [sp, #32]
 800ebf0:	9e00      	ldr	r6, [sp, #0]
 800ebf2:	9a00      	ldr	r2, [sp, #0]
 800ebf4:	441a      	add	r2, r3
 800ebf6:	9200      	str	r2, [sp, #0]
 800ebf8:	9a06      	ldr	r2, [sp, #24]
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	441a      	add	r2, r3
 800ebfe:	4648      	mov	r0, r9
 800ec00:	9206      	str	r2, [sp, #24]
 800ec02:	f000 fb77 	bl	800f2f4 <__i2b>
 800ec06:	4605      	mov	r5, r0
 800ec08:	b166      	cbz	r6, 800ec24 <_dtoa_r+0x74c>
 800ec0a:	9b06      	ldr	r3, [sp, #24]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	dd09      	ble.n	800ec24 <_dtoa_r+0x74c>
 800ec10:	42b3      	cmp	r3, r6
 800ec12:	9a00      	ldr	r2, [sp, #0]
 800ec14:	bfa8      	it	ge
 800ec16:	4633      	movge	r3, r6
 800ec18:	1ad2      	subs	r2, r2, r3
 800ec1a:	9200      	str	r2, [sp, #0]
 800ec1c:	9a06      	ldr	r2, [sp, #24]
 800ec1e:	1af6      	subs	r6, r6, r3
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	9306      	str	r3, [sp, #24]
 800ec24:	9b08      	ldr	r3, [sp, #32]
 800ec26:	b30b      	cbz	r3, 800ec6c <_dtoa_r+0x794>
 800ec28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 80c6 	beq.w	800edbc <_dtoa_r+0x8e4>
 800ec30:	2c00      	cmp	r4, #0
 800ec32:	f000 80c0 	beq.w	800edb6 <_dtoa_r+0x8de>
 800ec36:	4629      	mov	r1, r5
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4648      	mov	r0, r9
 800ec3c:	f000 fc12 	bl	800f464 <__pow5mult>
 800ec40:	9a02      	ldr	r2, [sp, #8]
 800ec42:	4601      	mov	r1, r0
 800ec44:	4605      	mov	r5, r0
 800ec46:	4648      	mov	r0, r9
 800ec48:	f000 fb6a 	bl	800f320 <__multiply>
 800ec4c:	9902      	ldr	r1, [sp, #8]
 800ec4e:	4680      	mov	r8, r0
 800ec50:	4648      	mov	r0, r9
 800ec52:	f000 fa9b 	bl	800f18c <_Bfree>
 800ec56:	9b08      	ldr	r3, [sp, #32]
 800ec58:	1b1b      	subs	r3, r3, r4
 800ec5a:	9308      	str	r3, [sp, #32]
 800ec5c:	f000 80b1 	beq.w	800edc2 <_dtoa_r+0x8ea>
 800ec60:	9a08      	ldr	r2, [sp, #32]
 800ec62:	4641      	mov	r1, r8
 800ec64:	4648      	mov	r0, r9
 800ec66:	f000 fbfd 	bl	800f464 <__pow5mult>
 800ec6a:	9002      	str	r0, [sp, #8]
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	4648      	mov	r0, r9
 800ec70:	f000 fb40 	bl	800f2f4 <__i2b>
 800ec74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec76:	4604      	mov	r4, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 81d8 	beq.w	800f02e <_dtoa_r+0xb56>
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4601      	mov	r1, r0
 800ec82:	4648      	mov	r0, r9
 800ec84:	f000 fbee 	bl	800f464 <__pow5mult>
 800ec88:	9b07      	ldr	r3, [sp, #28]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f300 809f 	bgt.w	800edd0 <_dtoa_r+0x8f8>
 800ec92:	9b04      	ldr	r3, [sp, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f040 8097 	bne.w	800edc8 <_dtoa_r+0x8f0>
 800ec9a:	9b05      	ldr	r3, [sp, #20]
 800ec9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f040 8093 	bne.w	800edcc <_dtoa_r+0x8f4>
 800eca6:	9b05      	ldr	r3, [sp, #20]
 800eca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ecac:	0d1b      	lsrs	r3, r3, #20
 800ecae:	051b      	lsls	r3, r3, #20
 800ecb0:	b133      	cbz	r3, 800ecc0 <_dtoa_r+0x7e8>
 800ecb2:	9b00      	ldr	r3, [sp, #0]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	9b06      	ldr	r3, [sp, #24]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	9306      	str	r3, [sp, #24]
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	9308      	str	r3, [sp, #32]
 800ecc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 81b8 	beq.w	800f03a <_dtoa_r+0xb62>
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecd0:	6918      	ldr	r0, [r3, #16]
 800ecd2:	f000 fac3 	bl	800f25c <__hi0bits>
 800ecd6:	f1c0 0020 	rsb	r0, r0, #32
 800ecda:	9b06      	ldr	r3, [sp, #24]
 800ecdc:	4418      	add	r0, r3
 800ecde:	f010 001f 	ands.w	r0, r0, #31
 800ece2:	f000 8082 	beq.w	800edea <_dtoa_r+0x912>
 800ece6:	f1c0 0320 	rsb	r3, r0, #32
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	dd73      	ble.n	800edd6 <_dtoa_r+0x8fe>
 800ecee:	9b00      	ldr	r3, [sp, #0]
 800ecf0:	f1c0 001c 	rsb	r0, r0, #28
 800ecf4:	4403      	add	r3, r0
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	9b06      	ldr	r3, [sp, #24]
 800ecfa:	4403      	add	r3, r0
 800ecfc:	4406      	add	r6, r0
 800ecfe:	9306      	str	r3, [sp, #24]
 800ed00:	9b00      	ldr	r3, [sp, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	dd05      	ble.n	800ed12 <_dtoa_r+0x83a>
 800ed06:	9902      	ldr	r1, [sp, #8]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	4648      	mov	r0, r9
 800ed0c:	f000 fc04 	bl	800f518 <__lshift>
 800ed10:	9002      	str	r0, [sp, #8]
 800ed12:	9b06      	ldr	r3, [sp, #24]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	dd05      	ble.n	800ed24 <_dtoa_r+0x84c>
 800ed18:	4621      	mov	r1, r4
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f000 fbfb 	bl	800f518 <__lshift>
 800ed22:	4604      	mov	r4, r0
 800ed24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d061      	beq.n	800edee <_dtoa_r+0x916>
 800ed2a:	9802      	ldr	r0, [sp, #8]
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f000 fc5f 	bl	800f5f0 <__mcmp>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	da5b      	bge.n	800edee <_dtoa_r+0x916>
 800ed36:	2300      	movs	r3, #0
 800ed38:	9902      	ldr	r1, [sp, #8]
 800ed3a:	220a      	movs	r2, #10
 800ed3c:	4648      	mov	r0, r9
 800ed3e:	f000 fa47 	bl	800f1d0 <__multadd>
 800ed42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed44:	9002      	str	r0, [sp, #8]
 800ed46:	f107 38ff 	add.w	r8, r7, #4294967295
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 8177 	beq.w	800f03e <_dtoa_r+0xb66>
 800ed50:	4629      	mov	r1, r5
 800ed52:	2300      	movs	r3, #0
 800ed54:	220a      	movs	r2, #10
 800ed56:	4648      	mov	r0, r9
 800ed58:	f000 fa3a 	bl	800f1d0 <__multadd>
 800ed5c:	f1bb 0f00 	cmp.w	fp, #0
 800ed60:	4605      	mov	r5, r0
 800ed62:	dc6f      	bgt.n	800ee44 <_dtoa_r+0x96c>
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	dc49      	bgt.n	800edfe <_dtoa_r+0x926>
 800ed6a:	e06b      	b.n	800ee44 <_dtoa_r+0x96c>
 800ed6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ed6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed72:	e73c      	b.n	800ebee <_dtoa_r+0x716>
 800ed74:	3fe00000 	.word	0x3fe00000
 800ed78:	40240000 	.word	0x40240000
 800ed7c:	9b03      	ldr	r3, [sp, #12]
 800ed7e:	1e5c      	subs	r4, r3, #1
 800ed80:	9b08      	ldr	r3, [sp, #32]
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	db09      	blt.n	800ed9a <_dtoa_r+0x8c2>
 800ed86:	1b1c      	subs	r4, r3, r4
 800ed88:	9b03      	ldr	r3, [sp, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f6bf af30 	bge.w	800ebf0 <_dtoa_r+0x718>
 800ed90:	9b00      	ldr	r3, [sp, #0]
 800ed92:	9a03      	ldr	r2, [sp, #12]
 800ed94:	1a9e      	subs	r6, r3, r2
 800ed96:	2300      	movs	r3, #0
 800ed98:	e72b      	b.n	800ebf2 <_dtoa_r+0x71a>
 800ed9a:	9b08      	ldr	r3, [sp, #32]
 800ed9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed9e:	9408      	str	r4, [sp, #32]
 800eda0:	1ae3      	subs	r3, r4, r3
 800eda2:	441a      	add	r2, r3
 800eda4:	9e00      	ldr	r6, [sp, #0]
 800eda6:	9b03      	ldr	r3, [sp, #12]
 800eda8:	920d      	str	r2, [sp, #52]	@ 0x34
 800edaa:	2400      	movs	r4, #0
 800edac:	e721      	b.n	800ebf2 <_dtoa_r+0x71a>
 800edae:	9c08      	ldr	r4, [sp, #32]
 800edb0:	9e00      	ldr	r6, [sp, #0]
 800edb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800edb4:	e728      	b.n	800ec08 <_dtoa_r+0x730>
 800edb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800edba:	e751      	b.n	800ec60 <_dtoa_r+0x788>
 800edbc:	9a08      	ldr	r2, [sp, #32]
 800edbe:	9902      	ldr	r1, [sp, #8]
 800edc0:	e750      	b.n	800ec64 <_dtoa_r+0x78c>
 800edc2:	f8cd 8008 	str.w	r8, [sp, #8]
 800edc6:	e751      	b.n	800ec6c <_dtoa_r+0x794>
 800edc8:	2300      	movs	r3, #0
 800edca:	e779      	b.n	800ecc0 <_dtoa_r+0x7e8>
 800edcc:	9b04      	ldr	r3, [sp, #16]
 800edce:	e777      	b.n	800ecc0 <_dtoa_r+0x7e8>
 800edd0:	2300      	movs	r3, #0
 800edd2:	9308      	str	r3, [sp, #32]
 800edd4:	e779      	b.n	800ecca <_dtoa_r+0x7f2>
 800edd6:	d093      	beq.n	800ed00 <_dtoa_r+0x828>
 800edd8:	9a00      	ldr	r2, [sp, #0]
 800edda:	331c      	adds	r3, #28
 800eddc:	441a      	add	r2, r3
 800edde:	9200      	str	r2, [sp, #0]
 800ede0:	9a06      	ldr	r2, [sp, #24]
 800ede2:	441a      	add	r2, r3
 800ede4:	441e      	add	r6, r3
 800ede6:	9206      	str	r2, [sp, #24]
 800ede8:	e78a      	b.n	800ed00 <_dtoa_r+0x828>
 800edea:	4603      	mov	r3, r0
 800edec:	e7f4      	b.n	800edd8 <_dtoa_r+0x900>
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	46b8      	mov	r8, r7
 800edf4:	dc20      	bgt.n	800ee38 <_dtoa_r+0x960>
 800edf6:	469b      	mov	fp, r3
 800edf8:	9b07      	ldr	r3, [sp, #28]
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	dd1e      	ble.n	800ee3c <_dtoa_r+0x964>
 800edfe:	f1bb 0f00 	cmp.w	fp, #0
 800ee02:	f47f adb1 	bne.w	800e968 <_dtoa_r+0x490>
 800ee06:	4621      	mov	r1, r4
 800ee08:	465b      	mov	r3, fp
 800ee0a:	2205      	movs	r2, #5
 800ee0c:	4648      	mov	r0, r9
 800ee0e:	f000 f9df 	bl	800f1d0 <__multadd>
 800ee12:	4601      	mov	r1, r0
 800ee14:	4604      	mov	r4, r0
 800ee16:	9802      	ldr	r0, [sp, #8]
 800ee18:	f000 fbea 	bl	800f5f0 <__mcmp>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	f77f ada3 	ble.w	800e968 <_dtoa_r+0x490>
 800ee22:	4656      	mov	r6, sl
 800ee24:	2331      	movs	r3, #49	@ 0x31
 800ee26:	f806 3b01 	strb.w	r3, [r6], #1
 800ee2a:	f108 0801 	add.w	r8, r8, #1
 800ee2e:	e59f      	b.n	800e970 <_dtoa_r+0x498>
 800ee30:	9c03      	ldr	r4, [sp, #12]
 800ee32:	46b8      	mov	r8, r7
 800ee34:	4625      	mov	r5, r4
 800ee36:	e7f4      	b.n	800ee22 <_dtoa_r+0x94a>
 800ee38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f000 8101 	beq.w	800f046 <_dtoa_r+0xb6e>
 800ee44:	2e00      	cmp	r6, #0
 800ee46:	dd05      	ble.n	800ee54 <_dtoa_r+0x97c>
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4632      	mov	r2, r6
 800ee4c:	4648      	mov	r0, r9
 800ee4e:	f000 fb63 	bl	800f518 <__lshift>
 800ee52:	4605      	mov	r5, r0
 800ee54:	9b08      	ldr	r3, [sp, #32]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d05c      	beq.n	800ef14 <_dtoa_r+0xa3c>
 800ee5a:	6869      	ldr	r1, [r5, #4]
 800ee5c:	4648      	mov	r0, r9
 800ee5e:	f000 f955 	bl	800f10c <_Balloc>
 800ee62:	4606      	mov	r6, r0
 800ee64:	b928      	cbnz	r0, 800ee72 <_dtoa_r+0x99a>
 800ee66:	4b82      	ldr	r3, [pc, #520]	@ (800f070 <_dtoa_r+0xb98>)
 800ee68:	4602      	mov	r2, r0
 800ee6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee6e:	f7ff bb4a 	b.w	800e506 <_dtoa_r+0x2e>
 800ee72:	692a      	ldr	r2, [r5, #16]
 800ee74:	3202      	adds	r2, #2
 800ee76:	0092      	lsls	r2, r2, #2
 800ee78:	f105 010c 	add.w	r1, r5, #12
 800ee7c:	300c      	adds	r0, #12
 800ee7e:	f7ff fa94 	bl	800e3aa <memcpy>
 800ee82:	2201      	movs	r2, #1
 800ee84:	4631      	mov	r1, r6
 800ee86:	4648      	mov	r0, r9
 800ee88:	f000 fb46 	bl	800f518 <__lshift>
 800ee8c:	f10a 0301 	add.w	r3, sl, #1
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	eb0a 030b 	add.w	r3, sl, fp
 800ee96:	9308      	str	r3, [sp, #32]
 800ee98:	9b04      	ldr	r3, [sp, #16]
 800ee9a:	f003 0301 	and.w	r3, r3, #1
 800ee9e:	462f      	mov	r7, r5
 800eea0:	9306      	str	r3, [sp, #24]
 800eea2:	4605      	mov	r5, r0
 800eea4:	9b00      	ldr	r3, [sp, #0]
 800eea6:	9802      	ldr	r0, [sp, #8]
 800eea8:	4621      	mov	r1, r4
 800eeaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800eeae:	f7ff fa8a 	bl	800e3c6 <quorem>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	3330      	adds	r3, #48	@ 0x30
 800eeb6:	9003      	str	r0, [sp, #12]
 800eeb8:	4639      	mov	r1, r7
 800eeba:	9802      	ldr	r0, [sp, #8]
 800eebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eebe:	f000 fb97 	bl	800f5f0 <__mcmp>
 800eec2:	462a      	mov	r2, r5
 800eec4:	9004      	str	r0, [sp, #16]
 800eec6:	4621      	mov	r1, r4
 800eec8:	4648      	mov	r0, r9
 800eeca:	f000 fbad 	bl	800f628 <__mdiff>
 800eece:	68c2      	ldr	r2, [r0, #12]
 800eed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed2:	4606      	mov	r6, r0
 800eed4:	bb02      	cbnz	r2, 800ef18 <_dtoa_r+0xa40>
 800eed6:	4601      	mov	r1, r0
 800eed8:	9802      	ldr	r0, [sp, #8]
 800eeda:	f000 fb89 	bl	800f5f0 <__mcmp>
 800eede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee0:	4602      	mov	r2, r0
 800eee2:	4631      	mov	r1, r6
 800eee4:	4648      	mov	r0, r9
 800eee6:	920c      	str	r2, [sp, #48]	@ 0x30
 800eee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800eeea:	f000 f94f 	bl	800f18c <_Bfree>
 800eeee:	9b07      	ldr	r3, [sp, #28]
 800eef0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eef2:	9e00      	ldr	r6, [sp, #0]
 800eef4:	ea42 0103 	orr.w	r1, r2, r3
 800eef8:	9b06      	ldr	r3, [sp, #24]
 800eefa:	4319      	orrs	r1, r3
 800eefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefe:	d10d      	bne.n	800ef1c <_dtoa_r+0xa44>
 800ef00:	2b39      	cmp	r3, #57	@ 0x39
 800ef02:	d027      	beq.n	800ef54 <_dtoa_r+0xa7c>
 800ef04:	9a04      	ldr	r2, [sp, #16]
 800ef06:	2a00      	cmp	r2, #0
 800ef08:	dd01      	ble.n	800ef0e <_dtoa_r+0xa36>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	3331      	adds	r3, #49	@ 0x31
 800ef0e:	f88b 3000 	strb.w	r3, [fp]
 800ef12:	e52e      	b.n	800e972 <_dtoa_r+0x49a>
 800ef14:	4628      	mov	r0, r5
 800ef16:	e7b9      	b.n	800ee8c <_dtoa_r+0x9b4>
 800ef18:	2201      	movs	r2, #1
 800ef1a:	e7e2      	b.n	800eee2 <_dtoa_r+0xa0a>
 800ef1c:	9904      	ldr	r1, [sp, #16]
 800ef1e:	2900      	cmp	r1, #0
 800ef20:	db04      	blt.n	800ef2c <_dtoa_r+0xa54>
 800ef22:	9807      	ldr	r0, [sp, #28]
 800ef24:	4301      	orrs	r1, r0
 800ef26:	9806      	ldr	r0, [sp, #24]
 800ef28:	4301      	orrs	r1, r0
 800ef2a:	d120      	bne.n	800ef6e <_dtoa_r+0xa96>
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	ddee      	ble.n	800ef0e <_dtoa_r+0xa36>
 800ef30:	9902      	ldr	r1, [sp, #8]
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	2201      	movs	r2, #1
 800ef36:	4648      	mov	r0, r9
 800ef38:	f000 faee 	bl	800f518 <__lshift>
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	9002      	str	r0, [sp, #8]
 800ef40:	f000 fb56 	bl	800f5f0 <__mcmp>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	9b00      	ldr	r3, [sp, #0]
 800ef48:	dc02      	bgt.n	800ef50 <_dtoa_r+0xa78>
 800ef4a:	d1e0      	bne.n	800ef0e <_dtoa_r+0xa36>
 800ef4c:	07da      	lsls	r2, r3, #31
 800ef4e:	d5de      	bpl.n	800ef0e <_dtoa_r+0xa36>
 800ef50:	2b39      	cmp	r3, #57	@ 0x39
 800ef52:	d1da      	bne.n	800ef0a <_dtoa_r+0xa32>
 800ef54:	2339      	movs	r3, #57	@ 0x39
 800ef56:	f88b 3000 	strb.w	r3, [fp]
 800ef5a:	4633      	mov	r3, r6
 800ef5c:	461e      	mov	r6, r3
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef64:	2a39      	cmp	r2, #57	@ 0x39
 800ef66:	d04e      	beq.n	800f006 <_dtoa_r+0xb2e>
 800ef68:	3201      	adds	r2, #1
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	e501      	b.n	800e972 <_dtoa_r+0x49a>
 800ef6e:	2a00      	cmp	r2, #0
 800ef70:	dd03      	ble.n	800ef7a <_dtoa_r+0xaa2>
 800ef72:	2b39      	cmp	r3, #57	@ 0x39
 800ef74:	d0ee      	beq.n	800ef54 <_dtoa_r+0xa7c>
 800ef76:	3301      	adds	r3, #1
 800ef78:	e7c9      	b.n	800ef0e <_dtoa_r+0xa36>
 800ef7a:	9a00      	ldr	r2, [sp, #0]
 800ef7c:	9908      	ldr	r1, [sp, #32]
 800ef7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ef82:	428a      	cmp	r2, r1
 800ef84:	d028      	beq.n	800efd8 <_dtoa_r+0xb00>
 800ef86:	9902      	ldr	r1, [sp, #8]
 800ef88:	2300      	movs	r3, #0
 800ef8a:	220a      	movs	r2, #10
 800ef8c:	4648      	mov	r0, r9
 800ef8e:	f000 f91f 	bl	800f1d0 <__multadd>
 800ef92:	42af      	cmp	r7, r5
 800ef94:	9002      	str	r0, [sp, #8]
 800ef96:	f04f 0300 	mov.w	r3, #0
 800ef9a:	f04f 020a 	mov.w	r2, #10
 800ef9e:	4639      	mov	r1, r7
 800efa0:	4648      	mov	r0, r9
 800efa2:	d107      	bne.n	800efb4 <_dtoa_r+0xadc>
 800efa4:	f000 f914 	bl	800f1d0 <__multadd>
 800efa8:	4607      	mov	r7, r0
 800efaa:	4605      	mov	r5, r0
 800efac:	9b00      	ldr	r3, [sp, #0]
 800efae:	3301      	adds	r3, #1
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	e777      	b.n	800eea4 <_dtoa_r+0x9cc>
 800efb4:	f000 f90c 	bl	800f1d0 <__multadd>
 800efb8:	4629      	mov	r1, r5
 800efba:	4607      	mov	r7, r0
 800efbc:	2300      	movs	r3, #0
 800efbe:	220a      	movs	r2, #10
 800efc0:	4648      	mov	r0, r9
 800efc2:	f000 f905 	bl	800f1d0 <__multadd>
 800efc6:	4605      	mov	r5, r0
 800efc8:	e7f0      	b.n	800efac <_dtoa_r+0xad4>
 800efca:	f1bb 0f00 	cmp.w	fp, #0
 800efce:	bfcc      	ite	gt
 800efd0:	465e      	movgt	r6, fp
 800efd2:	2601      	movle	r6, #1
 800efd4:	4456      	add	r6, sl
 800efd6:	2700      	movs	r7, #0
 800efd8:	9902      	ldr	r1, [sp, #8]
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2201      	movs	r2, #1
 800efde:	4648      	mov	r0, r9
 800efe0:	f000 fa9a 	bl	800f518 <__lshift>
 800efe4:	4621      	mov	r1, r4
 800efe6:	9002      	str	r0, [sp, #8]
 800efe8:	f000 fb02 	bl	800f5f0 <__mcmp>
 800efec:	2800      	cmp	r0, #0
 800efee:	dcb4      	bgt.n	800ef5a <_dtoa_r+0xa82>
 800eff0:	d102      	bne.n	800eff8 <_dtoa_r+0xb20>
 800eff2:	9b00      	ldr	r3, [sp, #0]
 800eff4:	07db      	lsls	r3, r3, #31
 800eff6:	d4b0      	bmi.n	800ef5a <_dtoa_r+0xa82>
 800eff8:	4633      	mov	r3, r6
 800effa:	461e      	mov	r6, r3
 800effc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f000:	2a30      	cmp	r2, #48	@ 0x30
 800f002:	d0fa      	beq.n	800effa <_dtoa_r+0xb22>
 800f004:	e4b5      	b.n	800e972 <_dtoa_r+0x49a>
 800f006:	459a      	cmp	sl, r3
 800f008:	d1a8      	bne.n	800ef5c <_dtoa_r+0xa84>
 800f00a:	2331      	movs	r3, #49	@ 0x31
 800f00c:	f108 0801 	add.w	r8, r8, #1
 800f010:	f88a 3000 	strb.w	r3, [sl]
 800f014:	e4ad      	b.n	800e972 <_dtoa_r+0x49a>
 800f016:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f018:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f074 <_dtoa_r+0xb9c>
 800f01c:	b11b      	cbz	r3, 800f026 <_dtoa_r+0xb4e>
 800f01e:	f10a 0308 	add.w	r3, sl, #8
 800f022:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	4650      	mov	r0, sl
 800f028:	b017      	add	sp, #92	@ 0x5c
 800f02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02e:	9b07      	ldr	r3, [sp, #28]
 800f030:	2b01      	cmp	r3, #1
 800f032:	f77f ae2e 	ble.w	800ec92 <_dtoa_r+0x7ba>
 800f036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f038:	9308      	str	r3, [sp, #32]
 800f03a:	2001      	movs	r0, #1
 800f03c:	e64d      	b.n	800ecda <_dtoa_r+0x802>
 800f03e:	f1bb 0f00 	cmp.w	fp, #0
 800f042:	f77f aed9 	ble.w	800edf8 <_dtoa_r+0x920>
 800f046:	4656      	mov	r6, sl
 800f048:	9802      	ldr	r0, [sp, #8]
 800f04a:	4621      	mov	r1, r4
 800f04c:	f7ff f9bb 	bl	800e3c6 <quorem>
 800f050:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f054:	f806 3b01 	strb.w	r3, [r6], #1
 800f058:	eba6 020a 	sub.w	r2, r6, sl
 800f05c:	4593      	cmp	fp, r2
 800f05e:	ddb4      	ble.n	800efca <_dtoa_r+0xaf2>
 800f060:	9902      	ldr	r1, [sp, #8]
 800f062:	2300      	movs	r3, #0
 800f064:	220a      	movs	r2, #10
 800f066:	4648      	mov	r0, r9
 800f068:	f000 f8b2 	bl	800f1d0 <__multadd>
 800f06c:	9002      	str	r0, [sp, #8]
 800f06e:	e7eb      	b.n	800f048 <_dtoa_r+0xb70>
 800f070:	080103b8 	.word	0x080103b8
 800f074:	0801033c 	.word	0x0801033c

0800f078 <_free_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4605      	mov	r5, r0
 800f07c:	2900      	cmp	r1, #0
 800f07e:	d041      	beq.n	800f104 <_free_r+0x8c>
 800f080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f084:	1f0c      	subs	r4, r1, #4
 800f086:	2b00      	cmp	r3, #0
 800f088:	bfb8      	it	lt
 800f08a:	18e4      	addlt	r4, r4, r3
 800f08c:	f7fe fa8a 	bl	800d5a4 <__malloc_lock>
 800f090:	4a1d      	ldr	r2, [pc, #116]	@ (800f108 <_free_r+0x90>)
 800f092:	6813      	ldr	r3, [r2, #0]
 800f094:	b933      	cbnz	r3, 800f0a4 <_free_r+0x2c>
 800f096:	6063      	str	r3, [r4, #4]
 800f098:	6014      	str	r4, [r2, #0]
 800f09a:	4628      	mov	r0, r5
 800f09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0a0:	f7fe ba86 	b.w	800d5b0 <__malloc_unlock>
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	d908      	bls.n	800f0ba <_free_r+0x42>
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	1821      	adds	r1, r4, r0
 800f0ac:	428b      	cmp	r3, r1
 800f0ae:	bf01      	itttt	eq
 800f0b0:	6819      	ldreq	r1, [r3, #0]
 800f0b2:	685b      	ldreq	r3, [r3, #4]
 800f0b4:	1809      	addeq	r1, r1, r0
 800f0b6:	6021      	streq	r1, [r4, #0]
 800f0b8:	e7ed      	b.n	800f096 <_free_r+0x1e>
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	b10b      	cbz	r3, 800f0c4 <_free_r+0x4c>
 800f0c0:	42a3      	cmp	r3, r4
 800f0c2:	d9fa      	bls.n	800f0ba <_free_r+0x42>
 800f0c4:	6811      	ldr	r1, [r2, #0]
 800f0c6:	1850      	adds	r0, r2, r1
 800f0c8:	42a0      	cmp	r0, r4
 800f0ca:	d10b      	bne.n	800f0e4 <_free_r+0x6c>
 800f0cc:	6820      	ldr	r0, [r4, #0]
 800f0ce:	4401      	add	r1, r0
 800f0d0:	1850      	adds	r0, r2, r1
 800f0d2:	4283      	cmp	r3, r0
 800f0d4:	6011      	str	r1, [r2, #0]
 800f0d6:	d1e0      	bne.n	800f09a <_free_r+0x22>
 800f0d8:	6818      	ldr	r0, [r3, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	6053      	str	r3, [r2, #4]
 800f0de:	4408      	add	r0, r1
 800f0e0:	6010      	str	r0, [r2, #0]
 800f0e2:	e7da      	b.n	800f09a <_free_r+0x22>
 800f0e4:	d902      	bls.n	800f0ec <_free_r+0x74>
 800f0e6:	230c      	movs	r3, #12
 800f0e8:	602b      	str	r3, [r5, #0]
 800f0ea:	e7d6      	b.n	800f09a <_free_r+0x22>
 800f0ec:	6820      	ldr	r0, [r4, #0]
 800f0ee:	1821      	adds	r1, r4, r0
 800f0f0:	428b      	cmp	r3, r1
 800f0f2:	bf04      	itt	eq
 800f0f4:	6819      	ldreq	r1, [r3, #0]
 800f0f6:	685b      	ldreq	r3, [r3, #4]
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	bf04      	itt	eq
 800f0fc:	1809      	addeq	r1, r1, r0
 800f0fe:	6021      	streq	r1, [r4, #0]
 800f100:	6054      	str	r4, [r2, #4]
 800f102:	e7ca      	b.n	800f09a <_free_r+0x22>
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop
 800f108:	20002434 	.word	0x20002434

0800f10c <_Balloc>:
 800f10c:	b570      	push	{r4, r5, r6, lr}
 800f10e:	69c6      	ldr	r6, [r0, #28]
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	b976      	cbnz	r6, 800f134 <_Balloc+0x28>
 800f116:	2010      	movs	r0, #16
 800f118:	f7fe f99a 	bl	800d450 <malloc>
 800f11c:	4602      	mov	r2, r0
 800f11e:	61e0      	str	r0, [r4, #28]
 800f120:	b920      	cbnz	r0, 800f12c <_Balloc+0x20>
 800f122:	4b18      	ldr	r3, [pc, #96]	@ (800f184 <_Balloc+0x78>)
 800f124:	4818      	ldr	r0, [pc, #96]	@ (800f188 <_Balloc+0x7c>)
 800f126:	216b      	movs	r1, #107	@ 0x6b
 800f128:	f000 fe10 	bl	800fd4c <__assert_func>
 800f12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f130:	6006      	str	r6, [r0, #0]
 800f132:	60c6      	str	r6, [r0, #12]
 800f134:	69e6      	ldr	r6, [r4, #28]
 800f136:	68f3      	ldr	r3, [r6, #12]
 800f138:	b183      	cbz	r3, 800f15c <_Balloc+0x50>
 800f13a:	69e3      	ldr	r3, [r4, #28]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f142:	b9b8      	cbnz	r0, 800f174 <_Balloc+0x68>
 800f144:	2101      	movs	r1, #1
 800f146:	fa01 f605 	lsl.w	r6, r1, r5
 800f14a:	1d72      	adds	r2, r6, #5
 800f14c:	0092      	lsls	r2, r2, #2
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 fe1a 	bl	800fd88 <_calloc_r>
 800f154:	b160      	cbz	r0, 800f170 <_Balloc+0x64>
 800f156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f15a:	e00e      	b.n	800f17a <_Balloc+0x6e>
 800f15c:	2221      	movs	r2, #33	@ 0x21
 800f15e:	2104      	movs	r1, #4
 800f160:	4620      	mov	r0, r4
 800f162:	f000 fe11 	bl	800fd88 <_calloc_r>
 800f166:	69e3      	ldr	r3, [r4, #28]
 800f168:	60f0      	str	r0, [r6, #12]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1e4      	bne.n	800f13a <_Balloc+0x2e>
 800f170:	2000      	movs	r0, #0
 800f172:	bd70      	pop	{r4, r5, r6, pc}
 800f174:	6802      	ldr	r2, [r0, #0]
 800f176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f17a:	2300      	movs	r3, #0
 800f17c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f180:	e7f7      	b.n	800f172 <_Balloc+0x66>
 800f182:	bf00      	nop
 800f184:	08010349 	.word	0x08010349
 800f188:	080103c9 	.word	0x080103c9

0800f18c <_Bfree>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	69c6      	ldr	r6, [r0, #28]
 800f190:	4605      	mov	r5, r0
 800f192:	460c      	mov	r4, r1
 800f194:	b976      	cbnz	r6, 800f1b4 <_Bfree+0x28>
 800f196:	2010      	movs	r0, #16
 800f198:	f7fe f95a 	bl	800d450 <malloc>
 800f19c:	4602      	mov	r2, r0
 800f19e:	61e8      	str	r0, [r5, #28]
 800f1a0:	b920      	cbnz	r0, 800f1ac <_Bfree+0x20>
 800f1a2:	4b09      	ldr	r3, [pc, #36]	@ (800f1c8 <_Bfree+0x3c>)
 800f1a4:	4809      	ldr	r0, [pc, #36]	@ (800f1cc <_Bfree+0x40>)
 800f1a6:	218f      	movs	r1, #143	@ 0x8f
 800f1a8:	f000 fdd0 	bl	800fd4c <__assert_func>
 800f1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1b0:	6006      	str	r6, [r0, #0]
 800f1b2:	60c6      	str	r6, [r0, #12]
 800f1b4:	b13c      	cbz	r4, 800f1c6 <_Bfree+0x3a>
 800f1b6:	69eb      	ldr	r3, [r5, #28]
 800f1b8:	6862      	ldr	r2, [r4, #4]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1c0:	6021      	str	r1, [r4, #0]
 800f1c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}
 800f1c8:	08010349 	.word	0x08010349
 800f1cc:	080103c9 	.word	0x080103c9

0800f1d0 <__multadd>:
 800f1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d4:	690d      	ldr	r5, [r1, #16]
 800f1d6:	4607      	mov	r7, r0
 800f1d8:	460c      	mov	r4, r1
 800f1da:	461e      	mov	r6, r3
 800f1dc:	f101 0c14 	add.w	ip, r1, #20
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f1e6:	b299      	uxth	r1, r3
 800f1e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f1ec:	0c1e      	lsrs	r6, r3, #16
 800f1ee:	0c0b      	lsrs	r3, r1, #16
 800f1f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f1f4:	b289      	uxth	r1, r1
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1fc:	4285      	cmp	r5, r0
 800f1fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f202:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f206:	dcec      	bgt.n	800f1e2 <__multadd+0x12>
 800f208:	b30e      	cbz	r6, 800f24e <__multadd+0x7e>
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	42ab      	cmp	r3, r5
 800f20e:	dc19      	bgt.n	800f244 <__multadd+0x74>
 800f210:	6861      	ldr	r1, [r4, #4]
 800f212:	4638      	mov	r0, r7
 800f214:	3101      	adds	r1, #1
 800f216:	f7ff ff79 	bl	800f10c <_Balloc>
 800f21a:	4680      	mov	r8, r0
 800f21c:	b928      	cbnz	r0, 800f22a <__multadd+0x5a>
 800f21e:	4602      	mov	r2, r0
 800f220:	4b0c      	ldr	r3, [pc, #48]	@ (800f254 <__multadd+0x84>)
 800f222:	480d      	ldr	r0, [pc, #52]	@ (800f258 <__multadd+0x88>)
 800f224:	21ba      	movs	r1, #186	@ 0xba
 800f226:	f000 fd91 	bl	800fd4c <__assert_func>
 800f22a:	6922      	ldr	r2, [r4, #16]
 800f22c:	3202      	adds	r2, #2
 800f22e:	f104 010c 	add.w	r1, r4, #12
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	300c      	adds	r0, #12
 800f236:	f7ff f8b8 	bl	800e3aa <memcpy>
 800f23a:	4621      	mov	r1, r4
 800f23c:	4638      	mov	r0, r7
 800f23e:	f7ff ffa5 	bl	800f18c <_Bfree>
 800f242:	4644      	mov	r4, r8
 800f244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f248:	3501      	adds	r5, #1
 800f24a:	615e      	str	r6, [r3, #20]
 800f24c:	6125      	str	r5, [r4, #16]
 800f24e:	4620      	mov	r0, r4
 800f250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f254:	080103b8 	.word	0x080103b8
 800f258:	080103c9 	.word	0x080103c9

0800f25c <__hi0bits>:
 800f25c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f260:	4603      	mov	r3, r0
 800f262:	bf36      	itet	cc
 800f264:	0403      	lslcc	r3, r0, #16
 800f266:	2000      	movcs	r0, #0
 800f268:	2010      	movcc	r0, #16
 800f26a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f26e:	bf3c      	itt	cc
 800f270:	021b      	lslcc	r3, r3, #8
 800f272:	3008      	addcc	r0, #8
 800f274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f278:	bf3c      	itt	cc
 800f27a:	011b      	lslcc	r3, r3, #4
 800f27c:	3004      	addcc	r0, #4
 800f27e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f282:	bf3c      	itt	cc
 800f284:	009b      	lslcc	r3, r3, #2
 800f286:	3002      	addcc	r0, #2
 800f288:	2b00      	cmp	r3, #0
 800f28a:	db05      	blt.n	800f298 <__hi0bits+0x3c>
 800f28c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f290:	f100 0001 	add.w	r0, r0, #1
 800f294:	bf08      	it	eq
 800f296:	2020      	moveq	r0, #32
 800f298:	4770      	bx	lr

0800f29a <__lo0bits>:
 800f29a:	6803      	ldr	r3, [r0, #0]
 800f29c:	4602      	mov	r2, r0
 800f29e:	f013 0007 	ands.w	r0, r3, #7
 800f2a2:	d00b      	beq.n	800f2bc <__lo0bits+0x22>
 800f2a4:	07d9      	lsls	r1, r3, #31
 800f2a6:	d421      	bmi.n	800f2ec <__lo0bits+0x52>
 800f2a8:	0798      	lsls	r0, r3, #30
 800f2aa:	bf49      	itett	mi
 800f2ac:	085b      	lsrmi	r3, r3, #1
 800f2ae:	089b      	lsrpl	r3, r3, #2
 800f2b0:	2001      	movmi	r0, #1
 800f2b2:	6013      	strmi	r3, [r2, #0]
 800f2b4:	bf5c      	itt	pl
 800f2b6:	6013      	strpl	r3, [r2, #0]
 800f2b8:	2002      	movpl	r0, #2
 800f2ba:	4770      	bx	lr
 800f2bc:	b299      	uxth	r1, r3
 800f2be:	b909      	cbnz	r1, 800f2c4 <__lo0bits+0x2a>
 800f2c0:	0c1b      	lsrs	r3, r3, #16
 800f2c2:	2010      	movs	r0, #16
 800f2c4:	b2d9      	uxtb	r1, r3
 800f2c6:	b909      	cbnz	r1, 800f2cc <__lo0bits+0x32>
 800f2c8:	3008      	adds	r0, #8
 800f2ca:	0a1b      	lsrs	r3, r3, #8
 800f2cc:	0719      	lsls	r1, r3, #28
 800f2ce:	bf04      	itt	eq
 800f2d0:	091b      	lsreq	r3, r3, #4
 800f2d2:	3004      	addeq	r0, #4
 800f2d4:	0799      	lsls	r1, r3, #30
 800f2d6:	bf04      	itt	eq
 800f2d8:	089b      	lsreq	r3, r3, #2
 800f2da:	3002      	addeq	r0, #2
 800f2dc:	07d9      	lsls	r1, r3, #31
 800f2de:	d403      	bmi.n	800f2e8 <__lo0bits+0x4e>
 800f2e0:	085b      	lsrs	r3, r3, #1
 800f2e2:	f100 0001 	add.w	r0, r0, #1
 800f2e6:	d003      	beq.n	800f2f0 <__lo0bits+0x56>
 800f2e8:	6013      	str	r3, [r2, #0]
 800f2ea:	4770      	bx	lr
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	4770      	bx	lr
 800f2f0:	2020      	movs	r0, #32
 800f2f2:	4770      	bx	lr

0800f2f4 <__i2b>:
 800f2f4:	b510      	push	{r4, lr}
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	f7ff ff07 	bl	800f10c <_Balloc>
 800f2fe:	4602      	mov	r2, r0
 800f300:	b928      	cbnz	r0, 800f30e <__i2b+0x1a>
 800f302:	4b05      	ldr	r3, [pc, #20]	@ (800f318 <__i2b+0x24>)
 800f304:	4805      	ldr	r0, [pc, #20]	@ (800f31c <__i2b+0x28>)
 800f306:	f240 1145 	movw	r1, #325	@ 0x145
 800f30a:	f000 fd1f 	bl	800fd4c <__assert_func>
 800f30e:	2301      	movs	r3, #1
 800f310:	6144      	str	r4, [r0, #20]
 800f312:	6103      	str	r3, [r0, #16]
 800f314:	bd10      	pop	{r4, pc}
 800f316:	bf00      	nop
 800f318:	080103b8 	.word	0x080103b8
 800f31c:	080103c9 	.word	0x080103c9

0800f320 <__multiply>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	4617      	mov	r7, r2
 800f326:	690a      	ldr	r2, [r1, #16]
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	bfa8      	it	ge
 800f32e:	463b      	movge	r3, r7
 800f330:	4689      	mov	r9, r1
 800f332:	bfa4      	itt	ge
 800f334:	460f      	movge	r7, r1
 800f336:	4699      	movge	r9, r3
 800f338:	693d      	ldr	r5, [r7, #16]
 800f33a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	eb05 060a 	add.w	r6, r5, sl
 800f346:	42b3      	cmp	r3, r6
 800f348:	b085      	sub	sp, #20
 800f34a:	bfb8      	it	lt
 800f34c:	3101      	addlt	r1, #1
 800f34e:	f7ff fedd 	bl	800f10c <_Balloc>
 800f352:	b930      	cbnz	r0, 800f362 <__multiply+0x42>
 800f354:	4602      	mov	r2, r0
 800f356:	4b41      	ldr	r3, [pc, #260]	@ (800f45c <__multiply+0x13c>)
 800f358:	4841      	ldr	r0, [pc, #260]	@ (800f460 <__multiply+0x140>)
 800f35a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f35e:	f000 fcf5 	bl	800fd4c <__assert_func>
 800f362:	f100 0414 	add.w	r4, r0, #20
 800f366:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f36a:	4623      	mov	r3, r4
 800f36c:	2200      	movs	r2, #0
 800f36e:	4573      	cmp	r3, lr
 800f370:	d320      	bcc.n	800f3b4 <__multiply+0x94>
 800f372:	f107 0814 	add.w	r8, r7, #20
 800f376:	f109 0114 	add.w	r1, r9, #20
 800f37a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f37e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f382:	9302      	str	r3, [sp, #8]
 800f384:	1beb      	subs	r3, r5, r7
 800f386:	3b15      	subs	r3, #21
 800f388:	f023 0303 	bic.w	r3, r3, #3
 800f38c:	3304      	adds	r3, #4
 800f38e:	3715      	adds	r7, #21
 800f390:	42bd      	cmp	r5, r7
 800f392:	bf38      	it	cc
 800f394:	2304      	movcc	r3, #4
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	9b02      	ldr	r3, [sp, #8]
 800f39a:	9103      	str	r1, [sp, #12]
 800f39c:	428b      	cmp	r3, r1
 800f39e:	d80c      	bhi.n	800f3ba <__multiply+0x9a>
 800f3a0:	2e00      	cmp	r6, #0
 800f3a2:	dd03      	ble.n	800f3ac <__multiply+0x8c>
 800f3a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d055      	beq.n	800f458 <__multiply+0x138>
 800f3ac:	6106      	str	r6, [r0, #16]
 800f3ae:	b005      	add	sp, #20
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	f843 2b04 	str.w	r2, [r3], #4
 800f3b8:	e7d9      	b.n	800f36e <__multiply+0x4e>
 800f3ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800f3be:	f1ba 0f00 	cmp.w	sl, #0
 800f3c2:	d01f      	beq.n	800f404 <__multiply+0xe4>
 800f3c4:	46c4      	mov	ip, r8
 800f3c6:	46a1      	mov	r9, r4
 800f3c8:	2700      	movs	r7, #0
 800f3ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f3ce:	f8d9 3000 	ldr.w	r3, [r9]
 800f3d2:	fa1f fb82 	uxth.w	fp, r2
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f3dc:	443b      	add	r3, r7
 800f3de:	f8d9 7000 	ldr.w	r7, [r9]
 800f3e2:	0c12      	lsrs	r2, r2, #16
 800f3e4:	0c3f      	lsrs	r7, r7, #16
 800f3e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f3ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3f4:	4565      	cmp	r5, ip
 800f3f6:	f849 3b04 	str.w	r3, [r9], #4
 800f3fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f3fe:	d8e4      	bhi.n	800f3ca <__multiply+0xaa>
 800f400:	9b01      	ldr	r3, [sp, #4]
 800f402:	50e7      	str	r7, [r4, r3]
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f40a:	3104      	adds	r1, #4
 800f40c:	f1b9 0f00 	cmp.w	r9, #0
 800f410:	d020      	beq.n	800f454 <__multiply+0x134>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	4647      	mov	r7, r8
 800f416:	46a4      	mov	ip, r4
 800f418:	f04f 0a00 	mov.w	sl, #0
 800f41c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f420:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f424:	fb09 220b 	mla	r2, r9, fp, r2
 800f428:	4452      	add	r2, sl
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f430:	f84c 3b04 	str.w	r3, [ip], #4
 800f434:	f857 3b04 	ldr.w	r3, [r7], #4
 800f438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f43c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f440:	fb09 330a 	mla	r3, r9, sl, r3
 800f444:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f448:	42bd      	cmp	r5, r7
 800f44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f44e:	d8e5      	bhi.n	800f41c <__multiply+0xfc>
 800f450:	9a01      	ldr	r2, [sp, #4]
 800f452:	50a3      	str	r3, [r4, r2]
 800f454:	3404      	adds	r4, #4
 800f456:	e79f      	b.n	800f398 <__multiply+0x78>
 800f458:	3e01      	subs	r6, #1
 800f45a:	e7a1      	b.n	800f3a0 <__multiply+0x80>
 800f45c:	080103b8 	.word	0x080103b8
 800f460:	080103c9 	.word	0x080103c9

0800f464 <__pow5mult>:
 800f464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f468:	4615      	mov	r5, r2
 800f46a:	f012 0203 	ands.w	r2, r2, #3
 800f46e:	4607      	mov	r7, r0
 800f470:	460e      	mov	r6, r1
 800f472:	d007      	beq.n	800f484 <__pow5mult+0x20>
 800f474:	4c25      	ldr	r4, [pc, #148]	@ (800f50c <__pow5mult+0xa8>)
 800f476:	3a01      	subs	r2, #1
 800f478:	2300      	movs	r3, #0
 800f47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f47e:	f7ff fea7 	bl	800f1d0 <__multadd>
 800f482:	4606      	mov	r6, r0
 800f484:	10ad      	asrs	r5, r5, #2
 800f486:	d03d      	beq.n	800f504 <__pow5mult+0xa0>
 800f488:	69fc      	ldr	r4, [r7, #28]
 800f48a:	b97c      	cbnz	r4, 800f4ac <__pow5mult+0x48>
 800f48c:	2010      	movs	r0, #16
 800f48e:	f7fd ffdf 	bl	800d450 <malloc>
 800f492:	4602      	mov	r2, r0
 800f494:	61f8      	str	r0, [r7, #28]
 800f496:	b928      	cbnz	r0, 800f4a4 <__pow5mult+0x40>
 800f498:	4b1d      	ldr	r3, [pc, #116]	@ (800f510 <__pow5mult+0xac>)
 800f49a:	481e      	ldr	r0, [pc, #120]	@ (800f514 <__pow5mult+0xb0>)
 800f49c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f4a0:	f000 fc54 	bl	800fd4c <__assert_func>
 800f4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4a8:	6004      	str	r4, [r0, #0]
 800f4aa:	60c4      	str	r4, [r0, #12]
 800f4ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4b4:	b94c      	cbnz	r4, 800f4ca <__pow5mult+0x66>
 800f4b6:	f240 2171 	movw	r1, #625	@ 0x271
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	f7ff ff1a 	bl	800f2f4 <__i2b>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	6003      	str	r3, [r0, #0]
 800f4ca:	f04f 0900 	mov.w	r9, #0
 800f4ce:	07eb      	lsls	r3, r5, #31
 800f4d0:	d50a      	bpl.n	800f4e8 <__pow5mult+0x84>
 800f4d2:	4631      	mov	r1, r6
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	f7ff ff22 	bl	800f320 <__multiply>
 800f4dc:	4631      	mov	r1, r6
 800f4de:	4680      	mov	r8, r0
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f7ff fe53 	bl	800f18c <_Bfree>
 800f4e6:	4646      	mov	r6, r8
 800f4e8:	106d      	asrs	r5, r5, #1
 800f4ea:	d00b      	beq.n	800f504 <__pow5mult+0xa0>
 800f4ec:	6820      	ldr	r0, [r4, #0]
 800f4ee:	b938      	cbnz	r0, 800f500 <__pow5mult+0x9c>
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	4638      	mov	r0, r7
 800f4f6:	f7ff ff13 	bl	800f320 <__multiply>
 800f4fa:	6020      	str	r0, [r4, #0]
 800f4fc:	f8c0 9000 	str.w	r9, [r0]
 800f500:	4604      	mov	r4, r0
 800f502:	e7e4      	b.n	800f4ce <__pow5mult+0x6a>
 800f504:	4630      	mov	r0, r6
 800f506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50a:	bf00      	nop
 800f50c:	0801047c 	.word	0x0801047c
 800f510:	08010349 	.word	0x08010349
 800f514:	080103c9 	.word	0x080103c9

0800f518 <__lshift>:
 800f518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f51c:	460c      	mov	r4, r1
 800f51e:	6849      	ldr	r1, [r1, #4]
 800f520:	6923      	ldr	r3, [r4, #16]
 800f522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f526:	68a3      	ldr	r3, [r4, #8]
 800f528:	4607      	mov	r7, r0
 800f52a:	4691      	mov	r9, r2
 800f52c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f530:	f108 0601 	add.w	r6, r8, #1
 800f534:	42b3      	cmp	r3, r6
 800f536:	db0b      	blt.n	800f550 <__lshift+0x38>
 800f538:	4638      	mov	r0, r7
 800f53a:	f7ff fde7 	bl	800f10c <_Balloc>
 800f53e:	4605      	mov	r5, r0
 800f540:	b948      	cbnz	r0, 800f556 <__lshift+0x3e>
 800f542:	4602      	mov	r2, r0
 800f544:	4b28      	ldr	r3, [pc, #160]	@ (800f5e8 <__lshift+0xd0>)
 800f546:	4829      	ldr	r0, [pc, #164]	@ (800f5ec <__lshift+0xd4>)
 800f548:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f54c:	f000 fbfe 	bl	800fd4c <__assert_func>
 800f550:	3101      	adds	r1, #1
 800f552:	005b      	lsls	r3, r3, #1
 800f554:	e7ee      	b.n	800f534 <__lshift+0x1c>
 800f556:	2300      	movs	r3, #0
 800f558:	f100 0114 	add.w	r1, r0, #20
 800f55c:	f100 0210 	add.w	r2, r0, #16
 800f560:	4618      	mov	r0, r3
 800f562:	4553      	cmp	r3, sl
 800f564:	db33      	blt.n	800f5ce <__lshift+0xb6>
 800f566:	6920      	ldr	r0, [r4, #16]
 800f568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f56c:	f104 0314 	add.w	r3, r4, #20
 800f570:	f019 091f 	ands.w	r9, r9, #31
 800f574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f57c:	d02b      	beq.n	800f5d6 <__lshift+0xbe>
 800f57e:	f1c9 0e20 	rsb	lr, r9, #32
 800f582:	468a      	mov	sl, r1
 800f584:	2200      	movs	r2, #0
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	fa00 f009 	lsl.w	r0, r0, r9
 800f58c:	4310      	orrs	r0, r2
 800f58e:	f84a 0b04 	str.w	r0, [sl], #4
 800f592:	f853 2b04 	ldr.w	r2, [r3], #4
 800f596:	459c      	cmp	ip, r3
 800f598:	fa22 f20e 	lsr.w	r2, r2, lr
 800f59c:	d8f3      	bhi.n	800f586 <__lshift+0x6e>
 800f59e:	ebac 0304 	sub.w	r3, ip, r4
 800f5a2:	3b15      	subs	r3, #21
 800f5a4:	f023 0303 	bic.w	r3, r3, #3
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	f104 0015 	add.w	r0, r4, #21
 800f5ae:	4560      	cmp	r0, ip
 800f5b0:	bf88      	it	hi
 800f5b2:	2304      	movhi	r3, #4
 800f5b4:	50ca      	str	r2, [r1, r3]
 800f5b6:	b10a      	cbz	r2, 800f5bc <__lshift+0xa4>
 800f5b8:	f108 0602 	add.w	r6, r8, #2
 800f5bc:	3e01      	subs	r6, #1
 800f5be:	4638      	mov	r0, r7
 800f5c0:	612e      	str	r6, [r5, #16]
 800f5c2:	4621      	mov	r1, r4
 800f5c4:	f7ff fde2 	bl	800f18c <_Bfree>
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	e7c5      	b.n	800f562 <__lshift+0x4a>
 800f5d6:	3904      	subs	r1, #4
 800f5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5e0:	459c      	cmp	ip, r3
 800f5e2:	d8f9      	bhi.n	800f5d8 <__lshift+0xc0>
 800f5e4:	e7ea      	b.n	800f5bc <__lshift+0xa4>
 800f5e6:	bf00      	nop
 800f5e8:	080103b8 	.word	0x080103b8
 800f5ec:	080103c9 	.word	0x080103c9

0800f5f0 <__mcmp>:
 800f5f0:	690a      	ldr	r2, [r1, #16]
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	6900      	ldr	r0, [r0, #16]
 800f5f6:	1a80      	subs	r0, r0, r2
 800f5f8:	b530      	push	{r4, r5, lr}
 800f5fa:	d10e      	bne.n	800f61a <__mcmp+0x2a>
 800f5fc:	3314      	adds	r3, #20
 800f5fe:	3114      	adds	r1, #20
 800f600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f60c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f610:	4295      	cmp	r5, r2
 800f612:	d003      	beq.n	800f61c <__mcmp+0x2c>
 800f614:	d205      	bcs.n	800f622 <__mcmp+0x32>
 800f616:	f04f 30ff 	mov.w	r0, #4294967295
 800f61a:	bd30      	pop	{r4, r5, pc}
 800f61c:	42a3      	cmp	r3, r4
 800f61e:	d3f3      	bcc.n	800f608 <__mcmp+0x18>
 800f620:	e7fb      	b.n	800f61a <__mcmp+0x2a>
 800f622:	2001      	movs	r0, #1
 800f624:	e7f9      	b.n	800f61a <__mcmp+0x2a>
	...

0800f628 <__mdiff>:
 800f628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	4689      	mov	r9, r1
 800f62e:	4606      	mov	r6, r0
 800f630:	4611      	mov	r1, r2
 800f632:	4648      	mov	r0, r9
 800f634:	4614      	mov	r4, r2
 800f636:	f7ff ffdb 	bl	800f5f0 <__mcmp>
 800f63a:	1e05      	subs	r5, r0, #0
 800f63c:	d112      	bne.n	800f664 <__mdiff+0x3c>
 800f63e:	4629      	mov	r1, r5
 800f640:	4630      	mov	r0, r6
 800f642:	f7ff fd63 	bl	800f10c <_Balloc>
 800f646:	4602      	mov	r2, r0
 800f648:	b928      	cbnz	r0, 800f656 <__mdiff+0x2e>
 800f64a:	4b3f      	ldr	r3, [pc, #252]	@ (800f748 <__mdiff+0x120>)
 800f64c:	f240 2137 	movw	r1, #567	@ 0x237
 800f650:	483e      	ldr	r0, [pc, #248]	@ (800f74c <__mdiff+0x124>)
 800f652:	f000 fb7b 	bl	800fd4c <__assert_func>
 800f656:	2301      	movs	r3, #1
 800f658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f65c:	4610      	mov	r0, r2
 800f65e:	b003      	add	sp, #12
 800f660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f664:	bfbc      	itt	lt
 800f666:	464b      	movlt	r3, r9
 800f668:	46a1      	movlt	r9, r4
 800f66a:	4630      	mov	r0, r6
 800f66c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f670:	bfba      	itte	lt
 800f672:	461c      	movlt	r4, r3
 800f674:	2501      	movlt	r5, #1
 800f676:	2500      	movge	r5, #0
 800f678:	f7ff fd48 	bl	800f10c <_Balloc>
 800f67c:	4602      	mov	r2, r0
 800f67e:	b918      	cbnz	r0, 800f688 <__mdiff+0x60>
 800f680:	4b31      	ldr	r3, [pc, #196]	@ (800f748 <__mdiff+0x120>)
 800f682:	f240 2145 	movw	r1, #581	@ 0x245
 800f686:	e7e3      	b.n	800f650 <__mdiff+0x28>
 800f688:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f68c:	6926      	ldr	r6, [r4, #16]
 800f68e:	60c5      	str	r5, [r0, #12]
 800f690:	f109 0310 	add.w	r3, r9, #16
 800f694:	f109 0514 	add.w	r5, r9, #20
 800f698:	f104 0e14 	add.w	lr, r4, #20
 800f69c:	f100 0b14 	add.w	fp, r0, #20
 800f6a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f6a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f6a8:	9301      	str	r3, [sp, #4]
 800f6aa:	46d9      	mov	r9, fp
 800f6ac:	f04f 0c00 	mov.w	ip, #0
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f6b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f6ba:	9301      	str	r3, [sp, #4]
 800f6bc:	fa1f f38a 	uxth.w	r3, sl
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	b283      	uxth	r3, r0
 800f6c4:	1acb      	subs	r3, r1, r3
 800f6c6:	0c00      	lsrs	r0, r0, #16
 800f6c8:	4463      	add	r3, ip
 800f6ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f6ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f6d8:	4576      	cmp	r6, lr
 800f6da:	f849 3b04 	str.w	r3, [r9], #4
 800f6de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6e2:	d8e5      	bhi.n	800f6b0 <__mdiff+0x88>
 800f6e4:	1b33      	subs	r3, r6, r4
 800f6e6:	3b15      	subs	r3, #21
 800f6e8:	f023 0303 	bic.w	r3, r3, #3
 800f6ec:	3415      	adds	r4, #21
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	42a6      	cmp	r6, r4
 800f6f2:	bf38      	it	cc
 800f6f4:	2304      	movcc	r3, #4
 800f6f6:	441d      	add	r5, r3
 800f6f8:	445b      	add	r3, fp
 800f6fa:	461e      	mov	r6, r3
 800f6fc:	462c      	mov	r4, r5
 800f6fe:	4544      	cmp	r4, r8
 800f700:	d30e      	bcc.n	800f720 <__mdiff+0xf8>
 800f702:	f108 0103 	add.w	r1, r8, #3
 800f706:	1b49      	subs	r1, r1, r5
 800f708:	f021 0103 	bic.w	r1, r1, #3
 800f70c:	3d03      	subs	r5, #3
 800f70e:	45a8      	cmp	r8, r5
 800f710:	bf38      	it	cc
 800f712:	2100      	movcc	r1, #0
 800f714:	440b      	add	r3, r1
 800f716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f71a:	b191      	cbz	r1, 800f742 <__mdiff+0x11a>
 800f71c:	6117      	str	r7, [r2, #16]
 800f71e:	e79d      	b.n	800f65c <__mdiff+0x34>
 800f720:	f854 1b04 	ldr.w	r1, [r4], #4
 800f724:	46e6      	mov	lr, ip
 800f726:	0c08      	lsrs	r0, r1, #16
 800f728:	fa1c fc81 	uxtah	ip, ip, r1
 800f72c:	4471      	add	r1, lr
 800f72e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f732:	b289      	uxth	r1, r1
 800f734:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f738:	f846 1b04 	str.w	r1, [r6], #4
 800f73c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f740:	e7dd      	b.n	800f6fe <__mdiff+0xd6>
 800f742:	3f01      	subs	r7, #1
 800f744:	e7e7      	b.n	800f716 <__mdiff+0xee>
 800f746:	bf00      	nop
 800f748:	080103b8 	.word	0x080103b8
 800f74c:	080103c9 	.word	0x080103c9

0800f750 <__d2b>:
 800f750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f754:	460f      	mov	r7, r1
 800f756:	2101      	movs	r1, #1
 800f758:	ec59 8b10 	vmov	r8, r9, d0
 800f75c:	4616      	mov	r6, r2
 800f75e:	f7ff fcd5 	bl	800f10c <_Balloc>
 800f762:	4604      	mov	r4, r0
 800f764:	b930      	cbnz	r0, 800f774 <__d2b+0x24>
 800f766:	4602      	mov	r2, r0
 800f768:	4b23      	ldr	r3, [pc, #140]	@ (800f7f8 <__d2b+0xa8>)
 800f76a:	4824      	ldr	r0, [pc, #144]	@ (800f7fc <__d2b+0xac>)
 800f76c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f770:	f000 faec 	bl	800fd4c <__assert_func>
 800f774:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f77c:	b10d      	cbz	r5, 800f782 <__d2b+0x32>
 800f77e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	f1b8 0300 	subs.w	r3, r8, #0
 800f788:	d023      	beq.n	800f7d2 <__d2b+0x82>
 800f78a:	4668      	mov	r0, sp
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	f7ff fd84 	bl	800f29a <__lo0bits>
 800f792:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f796:	b1d0      	cbz	r0, 800f7ce <__d2b+0x7e>
 800f798:	f1c0 0320 	rsb	r3, r0, #32
 800f79c:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a0:	430b      	orrs	r3, r1
 800f7a2:	40c2      	lsrs	r2, r0
 800f7a4:	6163      	str	r3, [r4, #20]
 800f7a6:	9201      	str	r2, [sp, #4]
 800f7a8:	9b01      	ldr	r3, [sp, #4]
 800f7aa:	61a3      	str	r3, [r4, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bf0c      	ite	eq
 800f7b0:	2201      	moveq	r2, #1
 800f7b2:	2202      	movne	r2, #2
 800f7b4:	6122      	str	r2, [r4, #16]
 800f7b6:	b1a5      	cbz	r5, 800f7e2 <__d2b+0x92>
 800f7b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f7bc:	4405      	add	r5, r0
 800f7be:	603d      	str	r5, [r7, #0]
 800f7c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f7c4:	6030      	str	r0, [r6, #0]
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	b003      	add	sp, #12
 800f7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7ce:	6161      	str	r1, [r4, #20]
 800f7d0:	e7ea      	b.n	800f7a8 <__d2b+0x58>
 800f7d2:	a801      	add	r0, sp, #4
 800f7d4:	f7ff fd61 	bl	800f29a <__lo0bits>
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	6163      	str	r3, [r4, #20]
 800f7dc:	3020      	adds	r0, #32
 800f7de:	2201      	movs	r2, #1
 800f7e0:	e7e8      	b.n	800f7b4 <__d2b+0x64>
 800f7e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f7ea:	6038      	str	r0, [r7, #0]
 800f7ec:	6918      	ldr	r0, [r3, #16]
 800f7ee:	f7ff fd35 	bl	800f25c <__hi0bits>
 800f7f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7f6:	e7e5      	b.n	800f7c4 <__d2b+0x74>
 800f7f8:	080103b8 	.word	0x080103b8
 800f7fc:	080103c9 	.word	0x080103c9

0800f800 <__sfputc_r>:
 800f800:	6893      	ldr	r3, [r2, #8]
 800f802:	3b01      	subs	r3, #1
 800f804:	2b00      	cmp	r3, #0
 800f806:	b410      	push	{r4}
 800f808:	6093      	str	r3, [r2, #8]
 800f80a:	da08      	bge.n	800f81e <__sfputc_r+0x1e>
 800f80c:	6994      	ldr	r4, [r2, #24]
 800f80e:	42a3      	cmp	r3, r4
 800f810:	db01      	blt.n	800f816 <__sfputc_r+0x16>
 800f812:	290a      	cmp	r1, #10
 800f814:	d103      	bne.n	800f81e <__sfputc_r+0x1e>
 800f816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f81a:	f7fe bca2 	b.w	800e162 <__swbuf_r>
 800f81e:	6813      	ldr	r3, [r2, #0]
 800f820:	1c58      	adds	r0, r3, #1
 800f822:	6010      	str	r0, [r2, #0]
 800f824:	7019      	strb	r1, [r3, #0]
 800f826:	4608      	mov	r0, r1
 800f828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <__sfputs_r>:
 800f82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f830:	4606      	mov	r6, r0
 800f832:	460f      	mov	r7, r1
 800f834:	4614      	mov	r4, r2
 800f836:	18d5      	adds	r5, r2, r3
 800f838:	42ac      	cmp	r4, r5
 800f83a:	d101      	bne.n	800f840 <__sfputs_r+0x12>
 800f83c:	2000      	movs	r0, #0
 800f83e:	e007      	b.n	800f850 <__sfputs_r+0x22>
 800f840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f844:	463a      	mov	r2, r7
 800f846:	4630      	mov	r0, r6
 800f848:	f7ff ffda 	bl	800f800 <__sfputc_r>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d1f3      	bne.n	800f838 <__sfputs_r+0xa>
 800f850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f854 <_vfiprintf_r>:
 800f854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f858:	460d      	mov	r5, r1
 800f85a:	b09d      	sub	sp, #116	@ 0x74
 800f85c:	4614      	mov	r4, r2
 800f85e:	4698      	mov	r8, r3
 800f860:	4606      	mov	r6, r0
 800f862:	b118      	cbz	r0, 800f86c <_vfiprintf_r+0x18>
 800f864:	6a03      	ldr	r3, [r0, #32]
 800f866:	b90b      	cbnz	r3, 800f86c <_vfiprintf_r+0x18>
 800f868:	f7fe fb8a 	bl	800df80 <__sinit>
 800f86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f86e:	07d9      	lsls	r1, r3, #31
 800f870:	d405      	bmi.n	800f87e <_vfiprintf_r+0x2a>
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	059a      	lsls	r2, r3, #22
 800f876:	d402      	bmi.n	800f87e <_vfiprintf_r+0x2a>
 800f878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f87a:	f7fe fd94 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	071b      	lsls	r3, r3, #28
 800f882:	d501      	bpl.n	800f888 <_vfiprintf_r+0x34>
 800f884:	692b      	ldr	r3, [r5, #16]
 800f886:	b99b      	cbnz	r3, 800f8b0 <_vfiprintf_r+0x5c>
 800f888:	4629      	mov	r1, r5
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7fe fca8 	bl	800e1e0 <__swsetup_r>
 800f890:	b170      	cbz	r0, 800f8b0 <_vfiprintf_r+0x5c>
 800f892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f894:	07dc      	lsls	r4, r3, #31
 800f896:	d504      	bpl.n	800f8a2 <_vfiprintf_r+0x4e>
 800f898:	f04f 30ff 	mov.w	r0, #4294967295
 800f89c:	b01d      	add	sp, #116	@ 0x74
 800f89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a2:	89ab      	ldrh	r3, [r5, #12]
 800f8a4:	0598      	lsls	r0, r3, #22
 800f8a6:	d4f7      	bmi.n	800f898 <_vfiprintf_r+0x44>
 800f8a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8aa:	f7fe fd7d 	bl	800e3a8 <__retarget_lock_release_recursive>
 800f8ae:	e7f3      	b.n	800f898 <_vfiprintf_r+0x44>
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8b4:	2320      	movs	r3, #32
 800f8b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8be:	2330      	movs	r3, #48	@ 0x30
 800f8c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa70 <_vfiprintf_r+0x21c>
 800f8c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8c8:	f04f 0901 	mov.w	r9, #1
 800f8cc:	4623      	mov	r3, r4
 800f8ce:	469a      	mov	sl, r3
 800f8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8d4:	b10a      	cbz	r2, 800f8da <_vfiprintf_r+0x86>
 800f8d6:	2a25      	cmp	r2, #37	@ 0x25
 800f8d8:	d1f9      	bne.n	800f8ce <_vfiprintf_r+0x7a>
 800f8da:	ebba 0b04 	subs.w	fp, sl, r4
 800f8de:	d00b      	beq.n	800f8f8 <_vfiprintf_r+0xa4>
 800f8e0:	465b      	mov	r3, fp
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7ff ffa1 	bl	800f82e <__sfputs_r>
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	f000 80a7 	beq.w	800fa40 <_vfiprintf_r+0x1ec>
 800f8f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8f4:	445a      	add	r2, fp
 800f8f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f000 809f 	beq.w	800fa40 <_vfiprintf_r+0x1ec>
 800f902:	2300      	movs	r3, #0
 800f904:	f04f 32ff 	mov.w	r2, #4294967295
 800f908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f90c:	f10a 0a01 	add.w	sl, sl, #1
 800f910:	9304      	str	r3, [sp, #16]
 800f912:	9307      	str	r3, [sp, #28]
 800f914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f918:	931a      	str	r3, [sp, #104]	@ 0x68
 800f91a:	4654      	mov	r4, sl
 800f91c:	2205      	movs	r2, #5
 800f91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f922:	4853      	ldr	r0, [pc, #332]	@ (800fa70 <_vfiprintf_r+0x21c>)
 800f924:	f7f0 fc54 	bl	80001d0 <memchr>
 800f928:	9a04      	ldr	r2, [sp, #16]
 800f92a:	b9d8      	cbnz	r0, 800f964 <_vfiprintf_r+0x110>
 800f92c:	06d1      	lsls	r1, r2, #27
 800f92e:	bf44      	itt	mi
 800f930:	2320      	movmi	r3, #32
 800f932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f936:	0713      	lsls	r3, r2, #28
 800f938:	bf44      	itt	mi
 800f93a:	232b      	movmi	r3, #43	@ 0x2b
 800f93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f940:	f89a 3000 	ldrb.w	r3, [sl]
 800f944:	2b2a      	cmp	r3, #42	@ 0x2a
 800f946:	d015      	beq.n	800f974 <_vfiprintf_r+0x120>
 800f948:	9a07      	ldr	r2, [sp, #28]
 800f94a:	4654      	mov	r4, sl
 800f94c:	2000      	movs	r0, #0
 800f94e:	f04f 0c0a 	mov.w	ip, #10
 800f952:	4621      	mov	r1, r4
 800f954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f958:	3b30      	subs	r3, #48	@ 0x30
 800f95a:	2b09      	cmp	r3, #9
 800f95c:	d94b      	bls.n	800f9f6 <_vfiprintf_r+0x1a2>
 800f95e:	b1b0      	cbz	r0, 800f98e <_vfiprintf_r+0x13a>
 800f960:	9207      	str	r2, [sp, #28]
 800f962:	e014      	b.n	800f98e <_vfiprintf_r+0x13a>
 800f964:	eba0 0308 	sub.w	r3, r0, r8
 800f968:	fa09 f303 	lsl.w	r3, r9, r3
 800f96c:	4313      	orrs	r3, r2
 800f96e:	9304      	str	r3, [sp, #16]
 800f970:	46a2      	mov	sl, r4
 800f972:	e7d2      	b.n	800f91a <_vfiprintf_r+0xc6>
 800f974:	9b03      	ldr	r3, [sp, #12]
 800f976:	1d19      	adds	r1, r3, #4
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	9103      	str	r1, [sp, #12]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bfbb      	ittet	lt
 800f980:	425b      	neglt	r3, r3
 800f982:	f042 0202 	orrlt.w	r2, r2, #2
 800f986:	9307      	strge	r3, [sp, #28]
 800f988:	9307      	strlt	r3, [sp, #28]
 800f98a:	bfb8      	it	lt
 800f98c:	9204      	strlt	r2, [sp, #16]
 800f98e:	7823      	ldrb	r3, [r4, #0]
 800f990:	2b2e      	cmp	r3, #46	@ 0x2e
 800f992:	d10a      	bne.n	800f9aa <_vfiprintf_r+0x156>
 800f994:	7863      	ldrb	r3, [r4, #1]
 800f996:	2b2a      	cmp	r3, #42	@ 0x2a
 800f998:	d132      	bne.n	800fa00 <_vfiprintf_r+0x1ac>
 800f99a:	9b03      	ldr	r3, [sp, #12]
 800f99c:	1d1a      	adds	r2, r3, #4
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	9203      	str	r2, [sp, #12]
 800f9a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9a6:	3402      	adds	r4, #2
 800f9a8:	9305      	str	r3, [sp, #20]
 800f9aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa80 <_vfiprintf_r+0x22c>
 800f9ae:	7821      	ldrb	r1, [r4, #0]
 800f9b0:	2203      	movs	r2, #3
 800f9b2:	4650      	mov	r0, sl
 800f9b4:	f7f0 fc0c 	bl	80001d0 <memchr>
 800f9b8:	b138      	cbz	r0, 800f9ca <_vfiprintf_r+0x176>
 800f9ba:	9b04      	ldr	r3, [sp, #16]
 800f9bc:	eba0 000a 	sub.w	r0, r0, sl
 800f9c0:	2240      	movs	r2, #64	@ 0x40
 800f9c2:	4082      	lsls	r2, r0
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	9304      	str	r3, [sp, #16]
 800f9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ce:	4829      	ldr	r0, [pc, #164]	@ (800fa74 <_vfiprintf_r+0x220>)
 800f9d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9d4:	2206      	movs	r2, #6
 800f9d6:	f7f0 fbfb 	bl	80001d0 <memchr>
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d03f      	beq.n	800fa5e <_vfiprintf_r+0x20a>
 800f9de:	4b26      	ldr	r3, [pc, #152]	@ (800fa78 <_vfiprintf_r+0x224>)
 800f9e0:	bb1b      	cbnz	r3, 800fa2a <_vfiprintf_r+0x1d6>
 800f9e2:	9b03      	ldr	r3, [sp, #12]
 800f9e4:	3307      	adds	r3, #7
 800f9e6:	f023 0307 	bic.w	r3, r3, #7
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	9303      	str	r3, [sp, #12]
 800f9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9f0:	443b      	add	r3, r7
 800f9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f4:	e76a      	b.n	800f8cc <_vfiprintf_r+0x78>
 800f9f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9fa:	460c      	mov	r4, r1
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	e7a8      	b.n	800f952 <_vfiprintf_r+0xfe>
 800fa00:	2300      	movs	r3, #0
 800fa02:	3401      	adds	r4, #1
 800fa04:	9305      	str	r3, [sp, #20]
 800fa06:	4619      	mov	r1, r3
 800fa08:	f04f 0c0a 	mov.w	ip, #10
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa12:	3a30      	subs	r2, #48	@ 0x30
 800fa14:	2a09      	cmp	r2, #9
 800fa16:	d903      	bls.n	800fa20 <_vfiprintf_r+0x1cc>
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d0c6      	beq.n	800f9aa <_vfiprintf_r+0x156>
 800fa1c:	9105      	str	r1, [sp, #20]
 800fa1e:	e7c4      	b.n	800f9aa <_vfiprintf_r+0x156>
 800fa20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa24:	4604      	mov	r4, r0
 800fa26:	2301      	movs	r3, #1
 800fa28:	e7f0      	b.n	800fa0c <_vfiprintf_r+0x1b8>
 800fa2a:	ab03      	add	r3, sp, #12
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	462a      	mov	r2, r5
 800fa30:	4b12      	ldr	r3, [pc, #72]	@ (800fa7c <_vfiprintf_r+0x228>)
 800fa32:	a904      	add	r1, sp, #16
 800fa34:	4630      	mov	r0, r6
 800fa36:	f7fd fe61 	bl	800d6fc <_printf_float>
 800fa3a:	4607      	mov	r7, r0
 800fa3c:	1c78      	adds	r0, r7, #1
 800fa3e:	d1d6      	bne.n	800f9ee <_vfiprintf_r+0x19a>
 800fa40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa42:	07d9      	lsls	r1, r3, #31
 800fa44:	d405      	bmi.n	800fa52 <_vfiprintf_r+0x1fe>
 800fa46:	89ab      	ldrh	r3, [r5, #12]
 800fa48:	059a      	lsls	r2, r3, #22
 800fa4a:	d402      	bmi.n	800fa52 <_vfiprintf_r+0x1fe>
 800fa4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa4e:	f7fe fcab 	bl	800e3a8 <__retarget_lock_release_recursive>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	065b      	lsls	r3, r3, #25
 800fa56:	f53f af1f 	bmi.w	800f898 <_vfiprintf_r+0x44>
 800fa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa5c:	e71e      	b.n	800f89c <_vfiprintf_r+0x48>
 800fa5e:	ab03      	add	r3, sp, #12
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	462a      	mov	r2, r5
 800fa64:	4b05      	ldr	r3, [pc, #20]	@ (800fa7c <_vfiprintf_r+0x228>)
 800fa66:	a904      	add	r1, sp, #16
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7fe f8df 	bl	800dc2c <_printf_i>
 800fa6e:	e7e4      	b.n	800fa3a <_vfiprintf_r+0x1e6>
 800fa70:	08010422 	.word	0x08010422
 800fa74:	0801042c 	.word	0x0801042c
 800fa78:	0800d6fd 	.word	0x0800d6fd
 800fa7c:	0800f82f 	.word	0x0800f82f
 800fa80:	08010428 	.word	0x08010428

0800fa84 <__sflush_r>:
 800fa84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8c:	0716      	lsls	r6, r2, #28
 800fa8e:	4605      	mov	r5, r0
 800fa90:	460c      	mov	r4, r1
 800fa92:	d454      	bmi.n	800fb3e <__sflush_r+0xba>
 800fa94:	684b      	ldr	r3, [r1, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	dc02      	bgt.n	800faa0 <__sflush_r+0x1c>
 800fa9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	dd48      	ble.n	800fb32 <__sflush_r+0xae>
 800faa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faa2:	2e00      	cmp	r6, #0
 800faa4:	d045      	beq.n	800fb32 <__sflush_r+0xae>
 800faa6:	2300      	movs	r3, #0
 800faa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800faac:	682f      	ldr	r7, [r5, #0]
 800faae:	6a21      	ldr	r1, [r4, #32]
 800fab0:	602b      	str	r3, [r5, #0]
 800fab2:	d030      	beq.n	800fb16 <__sflush_r+0x92>
 800fab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	0759      	lsls	r1, r3, #29
 800faba:	d505      	bpl.n	800fac8 <__sflush_r+0x44>
 800fabc:	6863      	ldr	r3, [r4, #4]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fac2:	b10b      	cbz	r3, 800fac8 <__sflush_r+0x44>
 800fac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fac6:	1ad2      	subs	r2, r2, r3
 800fac8:	2300      	movs	r3, #0
 800faca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800facc:	6a21      	ldr	r1, [r4, #32]
 800face:	4628      	mov	r0, r5
 800fad0:	47b0      	blx	r6
 800fad2:	1c43      	adds	r3, r0, #1
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	d106      	bne.n	800fae6 <__sflush_r+0x62>
 800fad8:	6829      	ldr	r1, [r5, #0]
 800fada:	291d      	cmp	r1, #29
 800fadc:	d82b      	bhi.n	800fb36 <__sflush_r+0xb2>
 800fade:	4a2a      	ldr	r2, [pc, #168]	@ (800fb88 <__sflush_r+0x104>)
 800fae0:	40ca      	lsrs	r2, r1
 800fae2:	07d6      	lsls	r6, r2, #31
 800fae4:	d527      	bpl.n	800fb36 <__sflush_r+0xb2>
 800fae6:	2200      	movs	r2, #0
 800fae8:	6062      	str	r2, [r4, #4]
 800faea:	04d9      	lsls	r1, r3, #19
 800faec:	6922      	ldr	r2, [r4, #16]
 800faee:	6022      	str	r2, [r4, #0]
 800faf0:	d504      	bpl.n	800fafc <__sflush_r+0x78>
 800faf2:	1c42      	adds	r2, r0, #1
 800faf4:	d101      	bne.n	800fafa <__sflush_r+0x76>
 800faf6:	682b      	ldr	r3, [r5, #0]
 800faf8:	b903      	cbnz	r3, 800fafc <__sflush_r+0x78>
 800fafa:	6560      	str	r0, [r4, #84]	@ 0x54
 800fafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fafe:	602f      	str	r7, [r5, #0]
 800fb00:	b1b9      	cbz	r1, 800fb32 <__sflush_r+0xae>
 800fb02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb06:	4299      	cmp	r1, r3
 800fb08:	d002      	beq.n	800fb10 <__sflush_r+0x8c>
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7ff fab4 	bl	800f078 <_free_r>
 800fb10:	2300      	movs	r3, #0
 800fb12:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb14:	e00d      	b.n	800fb32 <__sflush_r+0xae>
 800fb16:	2301      	movs	r3, #1
 800fb18:	4628      	mov	r0, r5
 800fb1a:	47b0      	blx	r6
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	1c50      	adds	r0, r2, #1
 800fb20:	d1c9      	bne.n	800fab6 <__sflush_r+0x32>
 800fb22:	682b      	ldr	r3, [r5, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d0c6      	beq.n	800fab6 <__sflush_r+0x32>
 800fb28:	2b1d      	cmp	r3, #29
 800fb2a:	d001      	beq.n	800fb30 <__sflush_r+0xac>
 800fb2c:	2b16      	cmp	r3, #22
 800fb2e:	d11e      	bne.n	800fb6e <__sflush_r+0xea>
 800fb30:	602f      	str	r7, [r5, #0]
 800fb32:	2000      	movs	r0, #0
 800fb34:	e022      	b.n	800fb7c <__sflush_r+0xf8>
 800fb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb3a:	b21b      	sxth	r3, r3
 800fb3c:	e01b      	b.n	800fb76 <__sflush_r+0xf2>
 800fb3e:	690f      	ldr	r7, [r1, #16]
 800fb40:	2f00      	cmp	r7, #0
 800fb42:	d0f6      	beq.n	800fb32 <__sflush_r+0xae>
 800fb44:	0793      	lsls	r3, r2, #30
 800fb46:	680e      	ldr	r6, [r1, #0]
 800fb48:	bf08      	it	eq
 800fb4a:	694b      	ldreq	r3, [r1, #20]
 800fb4c:	600f      	str	r7, [r1, #0]
 800fb4e:	bf18      	it	ne
 800fb50:	2300      	movne	r3, #0
 800fb52:	eba6 0807 	sub.w	r8, r6, r7
 800fb56:	608b      	str	r3, [r1, #8]
 800fb58:	f1b8 0f00 	cmp.w	r8, #0
 800fb5c:	dde9      	ble.n	800fb32 <__sflush_r+0xae>
 800fb5e:	6a21      	ldr	r1, [r4, #32]
 800fb60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb62:	4643      	mov	r3, r8
 800fb64:	463a      	mov	r2, r7
 800fb66:	4628      	mov	r0, r5
 800fb68:	47b0      	blx	r6
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	dc08      	bgt.n	800fb80 <__sflush_r+0xfc>
 800fb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb76:	81a3      	strh	r3, [r4, #12]
 800fb78:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb80:	4407      	add	r7, r0
 800fb82:	eba8 0800 	sub.w	r8, r8, r0
 800fb86:	e7e7      	b.n	800fb58 <__sflush_r+0xd4>
 800fb88:	20400001 	.word	0x20400001

0800fb8c <_fflush_r>:
 800fb8c:	b538      	push	{r3, r4, r5, lr}
 800fb8e:	690b      	ldr	r3, [r1, #16]
 800fb90:	4605      	mov	r5, r0
 800fb92:	460c      	mov	r4, r1
 800fb94:	b913      	cbnz	r3, 800fb9c <_fflush_r+0x10>
 800fb96:	2500      	movs	r5, #0
 800fb98:	4628      	mov	r0, r5
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	b118      	cbz	r0, 800fba6 <_fflush_r+0x1a>
 800fb9e:	6a03      	ldr	r3, [r0, #32]
 800fba0:	b90b      	cbnz	r3, 800fba6 <_fflush_r+0x1a>
 800fba2:	f7fe f9ed 	bl	800df80 <__sinit>
 800fba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d0f3      	beq.n	800fb96 <_fflush_r+0xa>
 800fbae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbb0:	07d0      	lsls	r0, r2, #31
 800fbb2:	d404      	bmi.n	800fbbe <_fflush_r+0x32>
 800fbb4:	0599      	lsls	r1, r3, #22
 800fbb6:	d402      	bmi.n	800fbbe <_fflush_r+0x32>
 800fbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbba:	f7fe fbf4 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	4621      	mov	r1, r4
 800fbc2:	f7ff ff5f 	bl	800fa84 <__sflush_r>
 800fbc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbc8:	07da      	lsls	r2, r3, #31
 800fbca:	4605      	mov	r5, r0
 800fbcc:	d4e4      	bmi.n	800fb98 <_fflush_r+0xc>
 800fbce:	89a3      	ldrh	r3, [r4, #12]
 800fbd0:	059b      	lsls	r3, r3, #22
 800fbd2:	d4e1      	bmi.n	800fb98 <_fflush_r+0xc>
 800fbd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbd6:	f7fe fbe7 	bl	800e3a8 <__retarget_lock_release_recursive>
 800fbda:	e7dd      	b.n	800fb98 <_fflush_r+0xc>

0800fbdc <__swhatbuf_r>:
 800fbdc:	b570      	push	{r4, r5, r6, lr}
 800fbde:	460c      	mov	r4, r1
 800fbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe4:	2900      	cmp	r1, #0
 800fbe6:	b096      	sub	sp, #88	@ 0x58
 800fbe8:	4615      	mov	r5, r2
 800fbea:	461e      	mov	r6, r3
 800fbec:	da0d      	bge.n	800fc0a <__swhatbuf_r+0x2e>
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fbf4:	f04f 0100 	mov.w	r1, #0
 800fbf8:	bf14      	ite	ne
 800fbfa:	2340      	movne	r3, #64	@ 0x40
 800fbfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc00:	2000      	movs	r0, #0
 800fc02:	6031      	str	r1, [r6, #0]
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	b016      	add	sp, #88	@ 0x58
 800fc08:	bd70      	pop	{r4, r5, r6, pc}
 800fc0a:	466a      	mov	r2, sp
 800fc0c:	f000 f87c 	bl	800fd08 <_fstat_r>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	dbec      	blt.n	800fbee <__swhatbuf_r+0x12>
 800fc14:	9901      	ldr	r1, [sp, #4]
 800fc16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc1e:	4259      	negs	r1, r3
 800fc20:	4159      	adcs	r1, r3
 800fc22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc26:	e7eb      	b.n	800fc00 <__swhatbuf_r+0x24>

0800fc28 <__smakebuf_r>:
 800fc28:	898b      	ldrh	r3, [r1, #12]
 800fc2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc2c:	079d      	lsls	r5, r3, #30
 800fc2e:	4606      	mov	r6, r0
 800fc30:	460c      	mov	r4, r1
 800fc32:	d507      	bpl.n	800fc44 <__smakebuf_r+0x1c>
 800fc34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	6123      	str	r3, [r4, #16]
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	6163      	str	r3, [r4, #20]
 800fc40:	b003      	add	sp, #12
 800fc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc44:	ab01      	add	r3, sp, #4
 800fc46:	466a      	mov	r2, sp
 800fc48:	f7ff ffc8 	bl	800fbdc <__swhatbuf_r>
 800fc4c:	9f00      	ldr	r7, [sp, #0]
 800fc4e:	4605      	mov	r5, r0
 800fc50:	4639      	mov	r1, r7
 800fc52:	4630      	mov	r0, r6
 800fc54:	f7fd fc26 	bl	800d4a4 <_malloc_r>
 800fc58:	b948      	cbnz	r0, 800fc6e <__smakebuf_r+0x46>
 800fc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc5e:	059a      	lsls	r2, r3, #22
 800fc60:	d4ee      	bmi.n	800fc40 <__smakebuf_r+0x18>
 800fc62:	f023 0303 	bic.w	r3, r3, #3
 800fc66:	f043 0302 	orr.w	r3, r3, #2
 800fc6a:	81a3      	strh	r3, [r4, #12]
 800fc6c:	e7e2      	b.n	800fc34 <__smakebuf_r+0xc>
 800fc6e:	89a3      	ldrh	r3, [r4, #12]
 800fc70:	6020      	str	r0, [r4, #0]
 800fc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	9b01      	ldr	r3, [sp, #4]
 800fc7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc7e:	b15b      	cbz	r3, 800fc98 <__smakebuf_r+0x70>
 800fc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc84:	4630      	mov	r0, r6
 800fc86:	f000 f851 	bl	800fd2c <_isatty_r>
 800fc8a:	b128      	cbz	r0, 800fc98 <__smakebuf_r+0x70>
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	f023 0303 	bic.w	r3, r3, #3
 800fc92:	f043 0301 	orr.w	r3, r3, #1
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	431d      	orrs	r5, r3
 800fc9c:	81a5      	strh	r5, [r4, #12]
 800fc9e:	e7cf      	b.n	800fc40 <__smakebuf_r+0x18>

0800fca0 <_putc_r>:
 800fca0:	b570      	push	{r4, r5, r6, lr}
 800fca2:	460d      	mov	r5, r1
 800fca4:	4614      	mov	r4, r2
 800fca6:	4606      	mov	r6, r0
 800fca8:	b118      	cbz	r0, 800fcb2 <_putc_r+0x12>
 800fcaa:	6a03      	ldr	r3, [r0, #32]
 800fcac:	b90b      	cbnz	r3, 800fcb2 <_putc_r+0x12>
 800fcae:	f7fe f967 	bl	800df80 <__sinit>
 800fcb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcb4:	07d8      	lsls	r0, r3, #31
 800fcb6:	d405      	bmi.n	800fcc4 <_putc_r+0x24>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	0599      	lsls	r1, r3, #22
 800fcbc:	d402      	bmi.n	800fcc4 <_putc_r+0x24>
 800fcbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcc0:	f7fe fb71 	bl	800e3a6 <__retarget_lock_acquire_recursive>
 800fcc4:	68a3      	ldr	r3, [r4, #8]
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	60a3      	str	r3, [r4, #8]
 800fccc:	da05      	bge.n	800fcda <_putc_r+0x3a>
 800fcce:	69a2      	ldr	r2, [r4, #24]
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	db12      	blt.n	800fcfa <_putc_r+0x5a>
 800fcd4:	b2eb      	uxtb	r3, r5
 800fcd6:	2b0a      	cmp	r3, #10
 800fcd8:	d00f      	beq.n	800fcfa <_putc_r+0x5a>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	1c5a      	adds	r2, r3, #1
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	701d      	strb	r5, [r3, #0]
 800fce2:	b2ed      	uxtb	r5, r5
 800fce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fce6:	07da      	lsls	r2, r3, #31
 800fce8:	d405      	bmi.n	800fcf6 <_putc_r+0x56>
 800fcea:	89a3      	ldrh	r3, [r4, #12]
 800fcec:	059b      	lsls	r3, r3, #22
 800fcee:	d402      	bmi.n	800fcf6 <_putc_r+0x56>
 800fcf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcf2:	f7fe fb59 	bl	800e3a8 <__retarget_lock_release_recursive>
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	bd70      	pop	{r4, r5, r6, pc}
 800fcfa:	4629      	mov	r1, r5
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f7fe fa2f 	bl	800e162 <__swbuf_r>
 800fd04:	4605      	mov	r5, r0
 800fd06:	e7ed      	b.n	800fce4 <_putc_r+0x44>

0800fd08 <_fstat_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d07      	ldr	r5, [pc, #28]	@ (800fd28 <_fstat_r+0x20>)
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	4611      	mov	r1, r2
 800fd14:	602b      	str	r3, [r5, #0]
 800fd16:	f7f4 fa3d 	bl	8004194 <_fstat>
 800fd1a:	1c43      	adds	r3, r0, #1
 800fd1c:	d102      	bne.n	800fd24 <_fstat_r+0x1c>
 800fd1e:	682b      	ldr	r3, [r5, #0]
 800fd20:	b103      	cbz	r3, 800fd24 <_fstat_r+0x1c>
 800fd22:	6023      	str	r3, [r4, #0]
 800fd24:	bd38      	pop	{r3, r4, r5, pc}
 800fd26:	bf00      	nop
 800fd28:	20002574 	.word	0x20002574

0800fd2c <_isatty_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4d06      	ldr	r5, [pc, #24]	@ (800fd48 <_isatty_r+0x1c>)
 800fd30:	2300      	movs	r3, #0
 800fd32:	4604      	mov	r4, r0
 800fd34:	4608      	mov	r0, r1
 800fd36:	602b      	str	r3, [r5, #0]
 800fd38:	f7f4 fa3c 	bl	80041b4 <_isatty>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	d102      	bne.n	800fd46 <_isatty_r+0x1a>
 800fd40:	682b      	ldr	r3, [r5, #0]
 800fd42:	b103      	cbz	r3, 800fd46 <_isatty_r+0x1a>
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	bd38      	pop	{r3, r4, r5, pc}
 800fd48:	20002574 	.word	0x20002574

0800fd4c <__assert_func>:
 800fd4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd4e:	4614      	mov	r4, r2
 800fd50:	461a      	mov	r2, r3
 800fd52:	4b09      	ldr	r3, [pc, #36]	@ (800fd78 <__assert_func+0x2c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4605      	mov	r5, r0
 800fd58:	68d8      	ldr	r0, [r3, #12]
 800fd5a:	b14c      	cbz	r4, 800fd70 <__assert_func+0x24>
 800fd5c:	4b07      	ldr	r3, [pc, #28]	@ (800fd7c <__assert_func+0x30>)
 800fd5e:	9100      	str	r1, [sp, #0]
 800fd60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd64:	4906      	ldr	r1, [pc, #24]	@ (800fd80 <__assert_func+0x34>)
 800fd66:	462b      	mov	r3, r5
 800fd68:	f000 f842 	bl	800fdf0 <fiprintf>
 800fd6c:	f000 f852 	bl	800fe14 <abort>
 800fd70:	4b04      	ldr	r3, [pc, #16]	@ (800fd84 <__assert_func+0x38>)
 800fd72:	461c      	mov	r4, r3
 800fd74:	e7f3      	b.n	800fd5e <__assert_func+0x12>
 800fd76:	bf00      	nop
 800fd78:	20000128 	.word	0x20000128
 800fd7c:	0801043d 	.word	0x0801043d
 800fd80:	0801044a 	.word	0x0801044a
 800fd84:	08010478 	.word	0x08010478

0800fd88 <_calloc_r>:
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	fba1 5402 	umull	r5, r4, r1, r2
 800fd8e:	b934      	cbnz	r4, 800fd9e <_calloc_r+0x16>
 800fd90:	4629      	mov	r1, r5
 800fd92:	f7fd fb87 	bl	800d4a4 <_malloc_r>
 800fd96:	4606      	mov	r6, r0
 800fd98:	b928      	cbnz	r0, 800fda6 <_calloc_r+0x1e>
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	bd70      	pop	{r4, r5, r6, pc}
 800fd9e:	220c      	movs	r2, #12
 800fda0:	6002      	str	r2, [r0, #0]
 800fda2:	2600      	movs	r6, #0
 800fda4:	e7f9      	b.n	800fd9a <_calloc_r+0x12>
 800fda6:	462a      	mov	r2, r5
 800fda8:	4621      	mov	r1, r4
 800fdaa:	f7fe fa6f 	bl	800e28c <memset>
 800fdae:	e7f4      	b.n	800fd9a <_calloc_r+0x12>

0800fdb0 <__ascii_mbtowc>:
 800fdb0:	b082      	sub	sp, #8
 800fdb2:	b901      	cbnz	r1, 800fdb6 <__ascii_mbtowc+0x6>
 800fdb4:	a901      	add	r1, sp, #4
 800fdb6:	b142      	cbz	r2, 800fdca <__ascii_mbtowc+0x1a>
 800fdb8:	b14b      	cbz	r3, 800fdce <__ascii_mbtowc+0x1e>
 800fdba:	7813      	ldrb	r3, [r2, #0]
 800fdbc:	600b      	str	r3, [r1, #0]
 800fdbe:	7812      	ldrb	r2, [r2, #0]
 800fdc0:	1e10      	subs	r0, r2, #0
 800fdc2:	bf18      	it	ne
 800fdc4:	2001      	movne	r0, #1
 800fdc6:	b002      	add	sp, #8
 800fdc8:	4770      	bx	lr
 800fdca:	4610      	mov	r0, r2
 800fdcc:	e7fb      	b.n	800fdc6 <__ascii_mbtowc+0x16>
 800fdce:	f06f 0001 	mvn.w	r0, #1
 800fdd2:	e7f8      	b.n	800fdc6 <__ascii_mbtowc+0x16>

0800fdd4 <__ascii_wctomb>:
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	4608      	mov	r0, r1
 800fdd8:	b141      	cbz	r1, 800fdec <__ascii_wctomb+0x18>
 800fdda:	2aff      	cmp	r2, #255	@ 0xff
 800fddc:	d904      	bls.n	800fde8 <__ascii_wctomb+0x14>
 800fdde:	228a      	movs	r2, #138	@ 0x8a
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	f04f 30ff 	mov.w	r0, #4294967295
 800fde6:	4770      	bx	lr
 800fde8:	700a      	strb	r2, [r1, #0]
 800fdea:	2001      	movs	r0, #1
 800fdec:	4770      	bx	lr
	...

0800fdf0 <fiprintf>:
 800fdf0:	b40e      	push	{r1, r2, r3}
 800fdf2:	b503      	push	{r0, r1, lr}
 800fdf4:	4601      	mov	r1, r0
 800fdf6:	ab03      	add	r3, sp, #12
 800fdf8:	4805      	ldr	r0, [pc, #20]	@ (800fe10 <fiprintf+0x20>)
 800fdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfe:	6800      	ldr	r0, [r0, #0]
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	f7ff fd27 	bl	800f854 <_vfiprintf_r>
 800fe06:	b002      	add	sp, #8
 800fe08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe0c:	b003      	add	sp, #12
 800fe0e:	4770      	bx	lr
 800fe10:	20000128 	.word	0x20000128

0800fe14 <abort>:
 800fe14:	b508      	push	{r3, lr}
 800fe16:	2006      	movs	r0, #6
 800fe18:	f000 f82c 	bl	800fe74 <raise>
 800fe1c:	2001      	movs	r0, #1
 800fe1e:	f7f4 f985 	bl	800412c <_exit>

0800fe22 <_raise_r>:
 800fe22:	291f      	cmp	r1, #31
 800fe24:	b538      	push	{r3, r4, r5, lr}
 800fe26:	4605      	mov	r5, r0
 800fe28:	460c      	mov	r4, r1
 800fe2a:	d904      	bls.n	800fe36 <_raise_r+0x14>
 800fe2c:	2316      	movs	r3, #22
 800fe2e:	6003      	str	r3, [r0, #0]
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	bd38      	pop	{r3, r4, r5, pc}
 800fe36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe38:	b112      	cbz	r2, 800fe40 <_raise_r+0x1e>
 800fe3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe3e:	b94b      	cbnz	r3, 800fe54 <_raise_r+0x32>
 800fe40:	4628      	mov	r0, r5
 800fe42:	f000 f831 	bl	800fea8 <_getpid_r>
 800fe46:	4622      	mov	r2, r4
 800fe48:	4601      	mov	r1, r0
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe50:	f000 b818 	b.w	800fe84 <_kill_r>
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d00a      	beq.n	800fe6e <_raise_r+0x4c>
 800fe58:	1c59      	adds	r1, r3, #1
 800fe5a:	d103      	bne.n	800fe64 <_raise_r+0x42>
 800fe5c:	2316      	movs	r3, #22
 800fe5e:	6003      	str	r3, [r0, #0]
 800fe60:	2001      	movs	r0, #1
 800fe62:	e7e7      	b.n	800fe34 <_raise_r+0x12>
 800fe64:	2100      	movs	r1, #0
 800fe66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	4798      	blx	r3
 800fe6e:	2000      	movs	r0, #0
 800fe70:	e7e0      	b.n	800fe34 <_raise_r+0x12>
	...

0800fe74 <raise>:
 800fe74:	4b02      	ldr	r3, [pc, #8]	@ (800fe80 <raise+0xc>)
 800fe76:	4601      	mov	r1, r0
 800fe78:	6818      	ldr	r0, [r3, #0]
 800fe7a:	f7ff bfd2 	b.w	800fe22 <_raise_r>
 800fe7e:	bf00      	nop
 800fe80:	20000128 	.word	0x20000128

0800fe84 <_kill_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d07      	ldr	r5, [pc, #28]	@ (800fea4 <_kill_r+0x20>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	4611      	mov	r1, r2
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	f7f4 f93b 	bl	800410c <_kill>
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	d102      	bne.n	800fea0 <_kill_r+0x1c>
 800fe9a:	682b      	ldr	r3, [r5, #0]
 800fe9c:	b103      	cbz	r3, 800fea0 <_kill_r+0x1c>
 800fe9e:	6023      	str	r3, [r4, #0]
 800fea0:	bd38      	pop	{r3, r4, r5, pc}
 800fea2:	bf00      	nop
 800fea4:	20002574 	.word	0x20002574

0800fea8 <_getpid_r>:
 800fea8:	f7f4 b928 	b.w	80040fc <_getpid>

0800feac <_init>:
 800feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feae:	bf00      	nop
 800feb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb2:	bc08      	pop	{r3}
 800feb4:	469e      	mov	lr, r3
 800feb6:	4770      	bx	lr

0800feb8 <_fini>:
 800feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feba:	bf00      	nop
 800febc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800febe:	bc08      	pop	{r3}
 800fec0:	469e      	mov	lr, r3
 800fec2:	4770      	bx	lr
