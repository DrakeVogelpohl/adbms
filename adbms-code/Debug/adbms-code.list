
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010450  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080105e0  080105e0  000115e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dc8  08010dc8  000122f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010dc8  08010dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dd0  08010dd0  000122f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dd0  08010dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010dd4  08010dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  20000000  08010dd8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122f4  2**0
                  CONTENTS
 10 .bss          00002298  200002f4  200002f4  000122f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000258c  2000258c  000122f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002003f  00000000  00000000  00012324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f2f  00000000  00000000  00032363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00037298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001336  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a9a  00000000  00000000  00039ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021843  00000000  00000000  00060970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d728f  00000000  00000000  000821b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159442  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bf8  00000000  00000000  00159488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00161080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f4 	.word	0x200002f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080105c8 	.word	0x080105c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	080105c8 	.word	0x080105c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a8 	b.w	8000fb0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f826 	bl	8000cb8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_f2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__aeabi_f2ulz+0x38>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcb7 	bl	80005f8 <__aeabi_dmul>
 8000c8a:	f000 f993 	bl	8000fb4 <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc38 	bl	8000504 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <__aeabi_f2ulz+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcae 	bl	80005f8 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf0 	bl	8000288 <__aeabi_dsub>
 8000ca8:	f000 f984 	bl	8000fb4 <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001004:	2300      	movs	r3, #0
 8001006:	737b      	strb	r3, [r7, #13]
 8001008:	e019      	b.n	800103e <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b29b      	uxth	r3, r3
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	440a      	add	r2, r1
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4053      	eors	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	490b      	ldr	r1, [pc, #44]	@ (8001058 <Pec15_Calc+0x64>)
 800102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4053      	eors	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3e1      	bcc.n	800100a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	08010808 	.word	0x08010808

0800105c <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800106a:	2310      	movs	r3, #16
 800106c:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800106e:	238f      	movs	r3, #143	@ 0x8f
 8001070:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8001072:	2300      	movs	r3, #0
 8001074:	757b      	strb	r3, [r7, #21]
 8001076:	e024      	b.n	80010c2 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	b29a      	uxth	r2, r3
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	4053      	eors	r3, r2
 8001088:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800108a:	2308      	movs	r3, #8
 800108c:	753b      	strb	r3, [r7, #20]
 800108e:	e012      	b.n	80010b6 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800109a:	8afb      	ldrh	r3, [r7, #22]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010a0:	8afa      	ldrh	r2, [r7, #22]
 80010a2:	8a7b      	ldrh	r3, [r7, #18]
 80010a4:	4053      	eors	r3, r2
 80010a6:	82fb      	strh	r3, [r7, #22]
 80010a8:	e002      	b.n	80010b0 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010b0:	7d3b      	ldrb	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	753b      	strb	r3, [r7, #20]
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	3301      	adds	r3, #1
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	7d7b      	ldrb	r3, [r7, #21]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dcd6      	bgt.n	8001078 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010e8:	4053      	eors	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010ee:	2306      	movs	r3, #6
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	e012      	b.n	800111a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010f4:	8afb      	ldrh	r3, [r7, #22]
 80010f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001104:	8afa      	ldrh	r2, [r7, #22]
 8001106:	8a7b      	ldrh	r3, [r7, #18]
 8001108:	4053      	eors	r3, r2
 800110a:	82fb      	strh	r3, [r7, #22]
 800110c:	e002      	b.n	8001114 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001114:	7d3b      	ldrb	r3, [r7, #20]
 8001116:	3b01      	subs	r3, #1
 8001118:	753b      	strb	r3, [r7, #20]
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e9      	bne.n	80010f4 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29b      	uxth	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 8001142:	230c      	movs	r3, #12
 8001144:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800114e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f9f6 	bl	8000548 <__aeabi_f2d>
 800115c:	a314      	add	r3, pc, #80	@ (adr r3, 80011b0 <Set_UnderOver_Voltage_Threshold+0x78>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb73 	bl	800084c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3b01      	subs	r3, #1
 800117a:	2202      	movs	r2, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	edd7 7a01 	vldr	s15, [r7, #4]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 80011a2:	89bb      	ldrh	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	30553261 	.word	0x30553261
 80011b4:	3f63a92a 	.word	0x3f63a92a

080011b8 <ADBMS_getVoltage>:

float ADBMS_getVoltage(int data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    // voltage in Volts
    float voltage_float = ((data + 10000) * 0.000150);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9ab 	bl	8000524 <__aeabi_i2d>
 80011ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <ADBMS_getVoltage+0x40>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	ee07 3a90 	vmov	s15, r3
}
 80011ee:	eeb0 0a67 	vmov.f32	s0, s15
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	30553261 	.word	0x30553261
 80011fc:	3f23a92a 	.word	0x3f23a92a

08001200 <ADBMS_Init>:

void ADBMS_Init(adbms6830_ICs *ICs, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	807b      	strh	r3, [r7, #2]
    ICs->hspi           = hspi;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	601a      	str	r2, [r3, #0]
    ICs->csb_pinBank    = csb_pinBank;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    ICs->csb_pin        = csb_pin;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	811a      	strh	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <ADBMS_Set_Config_A>:


void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e0f7      	b.n	800142c <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25b      	sxtb	r3, r3
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	b259      	sxtb	r1, r3
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	b25b      	sxtb	r3, r3
 800127a:	430b      	orrs	r3, r1
 800127c:	b259      	sxtb	r1, r3
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	1899      	adds	r1, r3, r2
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	3301      	adds	r3, #1
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	784a      	ldrb	r2, [r1, #1]
 80012b4:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	430b      	orrs	r3, r1
 80012f4:	b259      	sxtb	r1, r3
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	461a      	mov	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	430b      	orrs	r3, r1
 8001316:	b259      	sxtb	r1, r3
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8001342:	b299      	uxth	r1, r3
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3303      	adds	r3, #3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	885b      	ldrh	r3, [r3, #2]
 800136a:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800136e:	b29b      	uxth	r3, r3
 8001370:	121b      	asrs	r3, r3, #8
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	3304      	adds	r3, #4
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f001 0203 	and.w	r2, r1, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	015b      	lsls	r3, r3, #5
 80013a8:	b259      	sxtb	r1, r3
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	430b      	orrs	r3, r1
 80013ca:	b259      	sxtb	r1, r3
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b25b      	sxtb	r3, r3
 800140e:	430b      	orrs	r3, r1
 8001410:	b259      	sxtb	r1, r3
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	3305      	adds	r3, #5
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f67f af04 	bls.w	800123c <ADBMS_Set_Config_A+0x10>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e09b      	b.n	800158a <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	b299      	uxth	r1, r3
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	461a      	mov	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001484:	b29b      	uxth	r3, r3
 8001486:	b25b      	sxtb	r3, r3
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	b25a      	sxtb	r2, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	b29b      	uxth	r3, r3
 800149c:	121b      	asrs	r3, r3, #8
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b259      	sxtb	r1, r3
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3301      	adds	r3, #1
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	1119      	asrs	r1, r3, #4
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3302      	adds	r3, #2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	440b      	add	r3, r1
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b259      	sxtb	r1, r3
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	3303      	adds	r3, #3
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	88d9      	ldrh	r1, [r3, #6]
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3304      	adds	r3, #4
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	88db      	ldrh	r3, [r3, #6]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b299      	uxth	r1, r3
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	3305      	adds	r3, #5
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b01      	cmp	r3, #1
 800158e:	f67f af60 	bls.w	8001452 <ADBMS_Set_Config_B+0x10>
    }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <ADBMS_Set_ADCV>:

void ADBMS_Set_ADCV(adcv_ adcv, uint16_t *adcv_cmd_buffer)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	7138      	strb	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    *adcv_cmd_buffer = (0x1 << 9) 
                        | ((adcv.rd && 0x1) << 8) 
 80015aa:	793b      	ldrb	r3, [r7, #4]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015bc:	b21a      	sxth	r2, r3
                        | ((adcv.cont && 0x1) << 7) 
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
                        | (0x3 << 5) 
 80015d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d4:	b21a      	sxth	r2, r3
                        | ((adcv.dcp && 0x1) << 4) 
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
                        | ((adcv.rstf && 0x1) << 2) 
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
                        | (adcv.ow && 0x3);
 80015fa:	793b      	ldrb	r3, [r7, #4]
 80015fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29a      	uxth	r2, r3
    *adcv_cmd_buffer = (0x1 << 9) 
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	801a      	strh	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <ADBMS_Set_ADSV>:

void ADBMS_Set_ADSV(adsv_ adsv, uint16_t *adsv_cmd_buffer)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	7138      	strb	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    *adsv_cmd_buffer = (0x1 << 8)
                        | ((adsv.cont && 0x1) << 7)
 800162e:	793b      	ldrb	r3, [r7, #4]
 8001630:	b21b      	sxth	r3, r3
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	b21b      	sxth	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	b21b      	sxth	r3, r3
                        | (0x3 << 5)
 800163a:	f443 73b0 	orr.w	r3, r3, #352	@ 0x160
 800163e:	b21a      	sxth	r2, r3
                        | ((adsv.dcp && 0x1) << 4)
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	b21b      	sxth	r3, r3
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b21b      	sxth	r3, r3
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
                        | (0x1 << 3)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
                        | (adsv.ow && 0x3);
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
    *adsv_cmd_buffer = (0x1 << 8)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	801a      	strh	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <ADBMS_Set_ADAX>:

void ADBMS_Set_ADAX(adax_ adax, uint16_t *adax_cmd_buffer)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	7138      	strb	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    *adax_cmd_buffer = (0x1 << 10) 
                        | ((adax.ow && 0x1) << 8)
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21b      	sxth	r3, r3
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	b21b      	sxth	r3, r3
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	b21a      	sxth	r2, r3
                        | ((adax.pup && 0x1) << 7)
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
                        | ((adax.ch && 0x10) << 6)
 80016b2:	793a      	ldrb	r2, [r7, #4]
 80016b4:	f002 027c 	and.w	r2, r2, #124	@ 0x7c
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	2a00      	cmp	r2, #0
 80016bc:	d001      	beq.n	80016c2 <ADBMS_Set_ADAX+0x40>
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	e000      	b.n	80016c4 <ADBMS_Set_ADAX+0x42>
 80016c2:	2200      	movs	r2, #0
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
                        | (0x1 << 4)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	b21a      	sxth	r2, r3
                        | (adax.ch && 0xF);
 80016ce:	793b      	ldrb	r3, [r7, #4]
 80016d0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
    *adax_cmd_buffer = (0x1 << 10) 
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <ADBMS_Pack_CMD>:
    *adax2_cmd_buffer = (0x1 << 10) 
                        | (adax2.ch && 0xF);
}

void ADBMS_Pack_CMD(uint16_t tx_cmd, uint8_t *spi_tx_dataBuf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fc69 	bl	8000ff4 <Pec15_Calc>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29a      	uxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3302      	adds	r3, #2
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3303      	adds	r3, #3
 8001738:	89fa      	ldrh	r2, [r7, #14]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ADBMS_Pack_Write_Data_RegGrp>:

void ADBMS_Pack_Write_Data_RegGrp(uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	81fb      	strh	r3, [r7, #14]

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);

    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ffcd 	bl	80016f8 <ADBMS_Pack_CMD>

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 800175e:	2302      	movs	r3, #2
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e04d      	b.n	8001800 <ADBMS_Pack_Write_Data_RegGrp+0xba>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 8001764:	2300      	movs	r3, #0
 8001766:	75bb      	strb	r3, [r7, #22]
 8001768:	e01b      	b.n	80017a2 <ADBMS_Pack_Write_Data_RegGrp+0x5c>
            spi_tx_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	f1c3 0202 	rsb	r2, r3, #2
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	461a      	mov	r2, r3
 800177a:	7dbb      	ldrb	r3, [r7, #22]
 800177c:	4413      	add	r3, r2
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	441a      	add	r2, r3
 8001784:	7dbb      	ldrb	r3, [r7, #22]
 8001786:	1d19      	adds	r1, r3, #4
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	f1c3 0302 	rsb	r3, r3, #2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	4619      	mov	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	440b      	add	r3, r1
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 800179c:	7dbb      	ldrb	r3, [r7, #22]
 800179e:	3301      	adds	r3, #1
 80017a0:	75bb      	strb	r3, [r7, #22]
 80017a2:	7dbb      	ldrb	r3, [r7, #22]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d9e0      	bls.n	800176a <ADBMS_Pack_Write_Data_RegGrp+0x24>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	f1c3 0202 	rsb	r2, r3, #2
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	2106      	movs	r1, #6
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fc4b 	bl	800105c <Pec10_Calc>
 80017c6:	4603      	mov	r3, r0
 80017c8:	82bb      	strh	r3, [r7, #20]
        spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 80017ca:	8abb      	ldrh	r3, [r7, #20]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	f1c3 0302 	rsb	r3, r3, #2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	330a      	adds	r3, #10
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	440b      	add	r3, r1
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
        spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	f1c3 0302 	rsb	r3, r3, #2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	330b      	adds	r3, #11
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	8aba      	ldrh	r2, [r7, #20]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	75fb      	strb	r3, [r7, #23]
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ae      	bne.n	8001764 <ADBMS_Pack_Write_Data_RegGrp+0x1e>
    }
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <ADBMS_Process_Read_Data_RegGrp>:

bool ADBMS_Process_Read_Data_RegGrp(uint8_t *rx_dataBuf_raw, uint8_t *dataBuf)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
    // Move Rx ptr to skip over data during transmit phase 
    uint8_t *rx_dataBuf = rx_dataBuf_raw + CMD_LEN + PEC_LEN;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	613b      	str	r3, [r7, #16]

    bool pec_error = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001824:	2300      	movs	r3, #0
 8001826:	75bb      	strb	r3, [r7, #22]
 8001828:	e051      	b.n	80018ce <ADBMS_Process_Read_Data_RegGrp+0xbe>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 800182a:	2300      	movs	r3, #0
 800182c:	757b      	strb	r3, [r7, #21]
 800182e:	e016      	b.n	800185e <ADBMS_Process_Read_Data_RegGrp+0x4e>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001830:	7d7a      	ldrb	r2, [r7, #21]
 8001832:	7dbb      	ldrb	r3, [r7, #22]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1899      	adds	r1, r3, r2
 800183e:	7dba      	ldrb	r2, [r7, #22]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	780a      	ldrb	r2, [r1, #0]
 8001856:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001858:	7d7b      	ldrb	r3, [r7, #21]
 800185a:	3301      	adds	r3, #1
 800185c:	757b      	strb	r3, [r7, #21]
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d9e5      	bls.n	8001830 <ADBMS_Process_Read_Data_RegGrp+0x20>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 8001864:	7dbb      	ldrb	r3, [r7, #22]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	3306      	adds	r3, #6
 800186a:	461a      	mov	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b21b      	sxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21b      	sxth	r3, r3
 8001878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187c:	b21a      	sxth	r2, r3
 800187e:	7dbb      	ldrb	r3, [r7, #22]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	3307      	adds	r3, #7
 8001884:	4619      	mov	r1, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	440b      	add	r3, r1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	81fb      	strh	r3, [r7, #14]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	2106      	movs	r1, #6
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff fbda 	bl	800105c <Pec10_Calc>
 80018a8:	4603      	mov	r3, r0
 80018aa:	81bb      	strh	r3, [r7, #12]
        pec_error |= (rx_pec != calc_pec);
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	89f9      	ldrh	r1, [r7, #14]
 80018b0:	89ba      	ldrh	r2, [r7, #12]
 80018b2:	4291      	cmp	r1, r2
 80018b4:	bf14      	ite	ne
 80018b6:	2201      	movne	r2, #1
 80018b8:	2200      	moveq	r2, #0
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	4313      	orrs	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018c8:	7dbb      	ldrb	r3, [r7, #22]
 80018ca:	3301      	adds	r3, #1
 80018cc:	75bb      	strb	r3, [r7, #22]
 80018ce:	7dbb      	ldrb	r3, [r7, #22]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d9aa      	bls.n	800182a <ADBMS_Process_Read_Data_RegGrp+0x1a>
    }
    return pec_error;
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <ADBMS_WakeUP_ICs_Polling>:

void ADBMS_WakeUP_ICs_Polling()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e012      	b.n	8001912 <ADBMS_WakeUP_ICs_Polling+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 80018f2:	f004 ff57 	bl	80067a4 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f003 f830 	bl	800495c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4808      	ldr	r0, [pc, #32]	@ (8001924 <ADBMS_WakeUP_ICs_Polling+0x44>)
 8001902:	f004 ff4f 	bl	80067a4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f003 f828 	bl	800495c <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3301      	adds	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d9e9      	bls.n	80018ec <ADBMS_WakeUP_ICs_Polling+0xc>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40020000 	.word	0x40020000

08001928 <ADBMS_Write_CMD_Polling>:

void ADBMS_Write_CMD_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
    // spi_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
    // spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fedb 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	480a      	ldr	r0, [pc, #40]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001948:	f004 ff2c 	bl	80067a4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800194c:	f107 010c 	add.w	r1, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2204      	movs	r2, #4
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fe89 	bl	800866e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2110      	movs	r1, #16
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <ADBMS_Write_CMD_Polling+0x48>)
 8001962:	f004 ff1f 	bl	80067a4 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000

08001974 <ADBMS_Write_Data_RegGrp_Polling>:

void ADBMS_Write_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_tx_dataBuf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
    //     uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
    //     spi_tx_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
    //     spi_tx_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
    // }

    ADBMS_Pack_Write_Data_RegGrp(tx_cmd, data, spi_tx_dataBuf);
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fedb 	bl	8001746 <ADBMS_Pack_Write_Data_RegGrp>

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2110      	movs	r1, #16
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 8001996:	f004 ff05 	bl	80067a4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_tx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2214      	movs	r2, #20
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f006 fe63 	bl	800866e <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4803      	ldr	r0, [pc, #12]	@ (80019bc <ADBMS_Write_Data_RegGrp_Polling+0x48>)
 80019ae:	f004 fef9 	bl	80067a4 <HAL_GPIO_WritePin>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000

080019c0 <ADBMS_Read_Data_RegGrp_Polling>:

bool ADBMS_Read_Data_RegGrp_Polling(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_rx_dataBuf)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[DATABUF_LEN] = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
    // spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);

    // uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
    // spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
    // spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
    ADBMS_Pack_CMD(tx_cmd, spi_tx_dataBuf);
 80019e0:	f107 0214 	add.w	r2, r7, #20
 80019e4:	897b      	ldrh	r3, [r7, #10]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fe85 	bl	80016f8 <ADBMS_Pack_CMD>

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2110      	movs	r1, #16
 80019f2:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <ADBMS_Read_Data_RegGrp_Polling+0x68>)
 80019f4:	f004 fed6 	bl	80067a4 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_rx_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 80019f8:	f107 0114 	add.w	r1, r7, #20
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2314      	movs	r3, #20
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f006 ff75 	bl	80088f6 <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2110      	movs	r1, #16
 8001a10:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <ADBMS_Read_Data_RegGrp_Polling+0x68>)
 8001a12:	f004 fec7 	bl	80067a4 <HAL_GPIO_WritePin>

    return ADBMS_Process_Read_Data_RegGrp(spi_rx_dataBuf, dataBuf);
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7ff fef9 	bl	8001810 <ADBMS_Process_Read_Data_RegGrp>
 8001a1e:	4603      	mov	r3, r0
    //     }
    //     uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
    //     uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * (DATA_LEN + PEC_LEN)));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
    //     pec_error |= (rx_pec != calc_pec);
    // }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020000 	.word	0x40020000

08001a2c <ADBMS_Interface_Initialize>:
#include "adbms_interface.h"

void ADBMS_Interface_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	807b      	strh	r3, [r7, #2]
    ADBMS_Init(&adbms->ICs, hspi, csb_pinBank, csb_pin);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	f7ff fbdd 	bl	8001200 <ADBMS_Init>

    // Define which VoltageReg groups to read
    adbms->vregs[0] = RDCVA;
 8001a46:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf8 <ADBMS_Interface_Initialize+0x1cc>)
 8001a48:	881a      	ldrh	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
    adbms->vregs[1] = RDCVB;
 8001a50:	4b6a      	ldr	r3, [pc, #424]	@ (8001bfc <ADBMS_Interface_Initialize+0x1d0>)
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
    adbms->vregs[2] = RDCVC;
 8001a5a:	4b69      	ldr	r3, [pc, #420]	@ (8001c00 <ADBMS_Interface_Initialize+0x1d4>)
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
    adbms->vregs[3] = RDCVD;
 8001a64:	4b67      	ldr	r3, [pc, #412]	@ (8001c04 <ADBMS_Interface_Initialize+0x1d8>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
    adbms->vregs[4] = RDCVE;
 8001a6e:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <ADBMS_Interface_Initialize+0x1dc>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c

    // Define which TempReg groups to read
    adbms->tregs[0] = RDAUXA;
 8001a78:	4b64      	ldr	r3, [pc, #400]	@ (8001c0c <ADBMS_Interface_Initialize+0x1e0>)
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    adbms->tregs[1] = RDAUXB;
 8001a82:	4b63      	ldr	r3, [pc, #396]	@ (8001c10 <ADBMS_Interface_Initialize+0x1e4>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    adbms->tregs[2] = RDAUXC;
 8001a8c:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <ADBMS_Interface_Initialize+0x1e8>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    adbms->tregs[3] = RDAUXD;
 8001a96:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <ADBMS_Interface_Initialize+0x1ec>)
 8001a98:	881a      	ldrh	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126

    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]
 8001aa4:	e042      	b.n	8001b2c <ADBMS_Interface_Initialize+0x100>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 8001aa6:	7dfa      	ldrb	r2, [r7, #23]
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001ab8:	7893      	ldrb	r3, [r2, #2]
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	7093      	strb	r3, [r2, #2]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001ad2:	8893      	ldrh	r3, [r2, #4]
 8001ad4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001ad8:	f361 134e 	bfi	r3, r1, #5, #10
 8001adc:	8093      	strh	r3, [r2, #4]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001ade:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001ae2:	f7ff fb29 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001af0:	b291      	uxth	r1, r2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	3326      	adds	r3, #38	@ 0x26
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	88da      	ldrh	r2, [r3, #6]
 8001afc:	f361 020b 	bfi	r2, r1, #0, #12
 8001b00:	80da      	strh	r2, [r3, #6]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001b02:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8001c1c <ADBMS_Interface_Initialize+0x1f0>
 8001b06:	f7ff fb17 	bl	8001138 <Set_UnderOver_Voltage_Threshold>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b14:	b291      	uxth	r1, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	3326      	adds	r3, #38	@ 0x26
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	891a      	ldrh	r2, [r3, #8]
 8001b20:	f361 020b 	bfi	r2, r1, #0, #12
 8001b24:	811a      	strh	r2, [r3, #8]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d9b9      	bls.n	8001aa6 <ADBMS_Interface_Initialize+0x7a>
    }
    // Init sensing cmd
    adbms->adcv.cont = 1;
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f892 3146 	ldrb.w	r3, [r2, #326]	@ 0x146
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	f882 3146 	strb.w	r3, [r2, #326]	@ 0x146

    // Package config and sensing structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f503 7295 	add.w	r2, r3, #298	@ 0x12a
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3332      	adds	r3, #50	@ 0x32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff fb6d 	bl	800122c <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f503 729b 	add.w	r2, r3, #310	@ 0x136
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	333e      	adds	r3, #62	@ 0x3e
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7ff fc6f 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Set_ADCV(adbms->adcv, &adbms->ICs.adcv);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	f893 0146 	ldrb.w	r0, [r3, #326]	@ 0x146
 8001b72:	f7ff fd15 	bl	80015a0 <ADBMS_Set_ADCV>
    ADBMS_Set_ADAX(adbms->adax, &adbms->ICs.adax);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	f893 0148 	ldrb.w	r0, [r3, #328]	@ 0x148
 8001b84:	f7ff fd7d 	bl	8001682 <ADBMS_Set_ADAX>

    // Write Config 
    ADBMS_WakeUP_ICs_Polling();
 8001b88:	f7ff feaa 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001b8c:	f7ff fea8 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_tx_dataBuf);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <ADBMS_Interface_Initialize+0x1f4>)
 8001b96:	8819      	ldrh	r1, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	330a      	adds	r3, #10
 8001ba2:	f7ff fee7 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
    ADBMS_WakeUP_ICs_Polling();
 8001ba6:	f7ff fe9b 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <ADBMS_Interface_Initialize+0x1f8>)
 8001bb0:	8819      	ldrh	r1, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	330a      	adds	r3, #10
 8001bbc:	f7ff feda 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>

    // Turn on sensing
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adcv);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7ff feab 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f002 fec2 	bl	800495c <HAL_Delay>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f7ff fe9f 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001bea:	2008      	movs	r0, #8
 8001bec:	f002 feb6 	bl	800495c <HAL_Delay>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	20000006 	.word	0x20000006
 8001c00:	20000008 	.word	0x20000008
 8001c04:	2000000a 	.word	0x2000000a
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000018 	.word	0x20000018
 8001c10:	2000001a 	.word	0x2000001a
 8001c14:	2000001c 	.word	0x2000001c
 8001c18:	2000001e 	.word	0x2000001e
 8001c1c:	40866666 	.word	0x40866666
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000002 	.word	0x20000002

08001c28 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <UpdateADInternalFault+0x2e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc81 	bl	8000548 <__aeabi_f2d>
 8001c46:	a330      	add	r3, pc, #192	@ (adr r3, 8001d08 <UpdateADInternalFault+0xe0>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe ff64 	bl	8000b18 <__aeabi_dcmpgt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <UpdateADInternalFault+0x32>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <UpdateADInternalFault+0x34>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <UpdateADInternalFault+0x5e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8001c78:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d501      	bpl.n	8001c8a <UpdateADInternalFault+0x62>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <UpdateADInternalFault+0x64>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <UpdateADInternalFault+0x8e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8001ca8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d00 <UpdateADInternalFault+0xd8>
 8001cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	dd01      	ble.n	8001cba <UpdateADInternalFault+0x92>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <UpdateADInternalFault+0x94>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b

    // check undertemperature fault
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <UpdateADInternalFault+0xbe>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 8001cd8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001d04 <UpdateADInternalFault+0xdc>
 8001cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d501      	bpl.n	8001cea <UpdateADInternalFault+0xc2>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <UpdateADInternalFault+0xc4>
 8001cea:	2300      	movs	r3, #0
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	42b40000 	.word	0x42b40000
 8001d04:	c2200000 	.word	0xc2200000
 8001d08:	cccccccd 	.word	0xcccccccd
 8001d0c:	4010cccc 	.word	0x4010cccc

08001d10 <ADBMS_UpdateVoltages>:


void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    uint8_t pec = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001d1c:	f7ff fde0 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>

    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVA, (adbms->ICs.cell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <ADBMS_UpdateVoltages+0xf4>)
 8001d26:	8819      	ldrh	r1, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f103 0252 	add.w	r2, r3, #82	@ 0x52
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	330a      	adds	r3, #10
 8001d32:	f7ff fe45 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVB, (adbms->ICs.cell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <ADBMS_UpdateVoltages+0xf8>)
 8001d46:	8819      	ldrh	r1, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3352      	adds	r3, #82	@ 0x52
 8001d4c:	f103 020c 	add.w	r2, r3, #12
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	330a      	adds	r3, #10
 8001d54:	f7ff fe34 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	4413      	add	r3, r2
 8001d60:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVC, (adbms->ICs.cell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <ADBMS_UpdateVoltages+0xfc>)
 8001d68:	8819      	ldrh	r1, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3352      	adds	r3, #82	@ 0x52
 8001d6e:	f103 0218 	add.w	r2, r3, #24
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	330a      	adds	r3, #10
 8001d76:	f7ff fe23 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4413      	add	r3, r2
 8001d82:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVD, (adbms->ICs.cell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <ADBMS_UpdateVoltages+0x100>)
 8001d8a:	8819      	ldrh	r1, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3352      	adds	r3, #82	@ 0x52
 8001d90:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	330a      	adds	r3, #10
 8001d98:	f7ff fe12 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	4413      	add	r3, r2
 8001da4:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_tx_dataBuf);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <ADBMS_UpdateVoltages+0x104>)
 8001dac:	8819      	ldrh	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3352      	adds	r3, #82	@ 0x52
 8001db2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	330a      	adds	r3, #10
 8001dba:	f7ff fe01 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	73fb      	strb	r3, [r7, #15]
    adbms->total_pec_failures += pec;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edc3 7a8b 	vstr	s15, [r3, #556]	@ 0x22c
    adbms->voltage_pec_failure = pec;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f889 	bl	8001f0c <ADBMS_CalculateValues_Voltages>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000004 	.word	0x20000004
 8001e08:	20000006 	.word	0x20000006
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000000a 	.word	0x2000000a
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    uint8_t pec = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs_Polling();
 8001e24:	f7ff fd5c 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <ADBMS_UpdateTemps+0xe4>)
 8001e2e:	8819      	ldrh	r1, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 02e2 	add.w	r2, r3, #226	@ 0xe2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	331e      	adds	r3, #30
 8001e3a:	f7ff fdc1 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	4413      	add	r3, r2
 8001e46:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <ADBMS_UpdateTemps+0xe8>)
 8001e4e:	8819      	ldrh	r1, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	33e2      	adds	r3, #226	@ 0xe2
 8001e54:	f103 020c 	add.w	r2, r3, #12
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	331e      	adds	r3, #30
 8001e5c:	f7ff fdb0 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4413      	add	r3, r2
 8001e68:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <ADBMS_UpdateTemps+0xec>)
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	33e2      	adds	r3, #226	@ 0xe2
 8001e76:	f103 0218 	add.w	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	331e      	adds	r3, #30
 8001e7e:	f7ff fd9f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	4413      	add	r3, r2
 8001e8a:	73fb      	strb	r3, [r7, #15]
    pec += ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <ADBMS_UpdateTemps+0xf0>)
 8001e92:	8819      	ldrh	r1, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	33e2      	adds	r3, #226	@ 0xe2
 8001e98:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	331e      	adds	r3, #30
 8001ea0:	f7ff fd8e 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	4413      	add	r3, r2
 8001eac:	73fb      	strb	r3, [r7, #15]
    adbms->total_pec_failures += pec;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	ed93 7a8b 	vldr	s14, [r3, #556]	@ 0x22c
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edc3 7a8b 	vstr	s15, [r3, #556]	@ 0x22c
    adbms->temp_pec_failure = pec;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adax);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f7ff fd1e 	bl	8001928 <ADBMS_Write_CMD_Polling>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f90b 	bl	8002108 <ADBMS_CalculateValues_Temps>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000018 	.word	0x20000018
 8001f00:	2000001a 	.word	0x2000001a
 8001f04:	2000001c 	.word	0x2000001c
 8001f08:	2000001e 	.word	0x2000001e

08001f0c <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d014      	beq.n	8001f4e <ADBMS_CalculateValues_Voltages+0x42>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <ADBMS_CalculateValues_Voltages+0x42>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d022      	beq.n	8001f9e <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ed93 7a8a 	vldr	s14, [r3, #552]	@ 0x228
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8001f7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	dd04      	ble.n	8001f94 <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001f92:	e0b3      	b.n	80020fc <ADBMS_CalculateValues_Voltages+0x1f0>
            adbms->pec_fault_ = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 8001f9c:	e0ae      	b.n	80020fc <ADBMS_CalculateValues_Voltages+0x1f0>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
    adbms->max_v = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    adbms->min_v = FLT_MAX;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a53      	ldr	r2, [pc, #332]	@ (8002104 <ADBMS_CalculateValues_Voltages+0x1f8>)
 8001fb6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]
 8001fbe:	e08f      	b.n	80020e0 <ADBMS_CalculateValues_Voltages+0x1d4>
    {
        for (uint8_t creg_grp = 0; creg_grp < NUM_VREG_GRPS_READ; creg_grp++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75bb      	strb	r3, [r7, #22]
 8001fc4:	e085      	b.n	80020d2 <ADBMS_CalculateValues_Voltages+0x1c6>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	757b      	strb	r3, [r7, #21]
 8001fca:	e07a      	b.n	80020c2 <ADBMS_CalculateValues_Voltages+0x1b6>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001fcc:	7dba      	ldrb	r2, [r7, #22]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	7d7a      	ldrb	r2, [r7, #21]
 8001fd6:	0852      	lsrs	r2, r2, #1
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4413      	add	r3, r2
 8001fdc:	2b0d      	cmp	r3, #13
 8001fde:	dc74      	bgt.n	80020ca <ADBMS_CalculateValues_Voltages+0x1be>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001fe0:	7dba      	ldrb	r2, [r7, #22]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4619      	mov	r1, r3
 8001fec:	7dfa      	ldrb	r2, [r7, #23]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	18ca      	adds	r2, r1, r3
 8001ff8:	7d7b      	ldrb	r3, [r7, #21]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002006:	b21b      	sxth	r3, r3
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b219      	sxth	r1, r3
 800200c:	7dba      	ldrb	r2, [r7, #22]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4618      	mov	r0, r3
 8002018:	7dfa      	ldrb	r2, [r7, #23]
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	18c2      	adds	r2, r0, r3
 8002024:	7d7b      	ldrb	r3, [r7, #21]
 8002026:	4413      	add	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002030:	b21b      	sxth	r3, r3
 8002032:	430b      	orrs	r3, r1
 8002034:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 8002036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f8bc 	bl	80011b8 <ADBMS_getVoltage>
 8002040:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8002044:	7dfa      	ldrb	r2, [r7, #23]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4619      	mov	r1, r3
 8002050:	7dba      	ldrb	r2, [r7, #22]
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	440b      	add	r3, r1
 800205a:	7d7a      	ldrb	r2, [r7, #21]
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	4413      	add	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	3352      	adds	r3, #82	@ 0x52
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	ed93 7a7f 	vldr	s14, [r3, #508]	@ 0x1fc
 8002076:	edd7 7a03 	vldr	s15, [r7, #12]
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
                if (curr_voltage > adbms->max_v){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 800208a:	ed97 7a03 	vldr	s14, [r7, #12]
 800208e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	dd03      	ble.n	80020a0 <ADBMS_CalculateValues_Voltages+0x194>
                    adbms->max_v = curr_voltage;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                }
                if (curr_voltage < adbms->min_v){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 80020a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d503      	bpl.n	80020bc <ADBMS_CalculateValues_Voltages+0x1b0>
                    adbms->min_v = curr_voltage;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80020bc:	7d7b      	ldrb	r3, [r7, #21]
 80020be:	3302      	adds	r3, #2
 80020c0:	757b      	strb	r3, [r7, #21]
 80020c2:	7d7b      	ldrb	r3, [r7, #21]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d981      	bls.n	8001fcc <ADBMS_CalculateValues_Voltages+0xc0>
 80020c8:	e000      	b.n	80020cc <ADBMS_CalculateValues_Voltages+0x1c0>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80020ca:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < NUM_VREG_GRPS_READ; creg_grp++)
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	3301      	adds	r3, #1
 80020d0:	75bb      	strb	r3, [r7, #22]
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	f67f af76 	bls.w	8001fc6 <ADBMS_CalculateValues_Voltages+0xba>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	3301      	adds	r3, #1
 80020de:	75fb      	strb	r3, [r7, #23]
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	f67f af6c 	bls.w	8001fc0 <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	ed93 7a7f 	vldr	s14, [r3, #508]	@ 0x1fc
 80020ee:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 80020f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	edc3 7a82 	vstr	s15, [r3, #520]	@ 0x208
}
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	7f7fffff 	.word	0x7f7fffff

08002108 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <ADBMS_CalculateValues_Temps+0x42>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00c      	beq.n	800214a <ADBMS_CalculateValues_Temps+0x42>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8002150:	2b00      	cmp	r3, #0
 8002152:	d022      	beq.n	800219a <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	ed93 7a8a 	vldr	s14, [r3, #552]	@ 0x228
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	edd3 7a8a 	vldr	s15, [r3, #552]	@ 0x228
 8002178:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800217c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	dd04      	ble.n	8002190 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 800218e:	e0e8      	b.n	8002362 <ADBMS_CalculateValues_Temps+0x25a>
            adbms->pec_fault_ = 0;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 8002198:	e0e3      	b.n	8002362 <ADBMS_CalculateValues_Temps+0x25a>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    adbms->min_temp = FLT_MAX;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a70      	ldr	r2, [pc, #448]	@ (8002370 <ADBMS_CalculateValues_Temps+0x268>)
 80021ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
    bool openwire_temp_fault = false;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	e0b2      	b.n	8002324 <ADBMS_CalculateValues_Temps+0x21c>
    {
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 80021be:	2300      	movs	r3, #0
 80021c0:	76fb      	strb	r3, [r7, #27]
 80021c2:	e0a8      	b.n	8002316 <ADBMS_CalculateValues_Temps+0x20e>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80021c4:	2300      	movs	r3, #0
 80021c6:	76bb      	strb	r3, [r7, #26]
 80021c8:	e09e      	b.n	8002308 <ADBMS_CalculateValues_Temps+0x200>
            {
                // skip because only want temps 2-10
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 80021ca:	7efb      	ldrb	r3, [r7, #27]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <ADBMS_CalculateValues_Temps+0xd0>
 80021d0:	7ebb      	ldrb	r3, [r7, #26]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f240 8094 	bls.w	8002300 <ADBMS_CalculateValues_Temps+0x1f8>
 80021d8:	7efa      	ldrb	r2, [r7, #27]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	7eba      	ldrb	r2, [r7, #26]
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	4413      	add	r3, r2
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	f300 8089 	bgt.w	8002300 <ADBMS_CalculateValues_Temps+0x1f8>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 80021ee:	7efa      	ldrb	r2, [r7, #27]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4619      	mov	r1, r3
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	18ca      	adds	r2, r1, r3
 8002206:	7ebb      	ldrb	r3, [r7, #26]
 8002208:	4413      	add	r3, r2
 800220a:	3301      	adds	r3, #1
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002214:	b21b      	sxth	r3, r3
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b219      	sxth	r1, r3
 800221a:	7efa      	ldrb	r2, [r7, #27]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4618      	mov	r0, r3
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	18c2      	adds	r2, r0, r3
 8002232:	7ebb      	ldrb	r3, [r7, #26]
 8002234:	4413      	add	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 800223e:	b21b      	sxth	r3, r3
 8002240:	430b      	orrs	r3, r1
 8002242:	833b      	strh	r3, [r7, #24]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 8002244:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe ffb5 	bl	80011b8 <ADBMS_getVoltage>
 800224e:	ed87 0a05 	vstr	s0, [r7, #20]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 8002252:	4b48      	ldr	r3, [pc, #288]	@ (8002374 <ADBMS_CalculateValues_Temps+0x26c>)
 8002254:	613b      	str	r3, [r7, #16]
                if (vref - raw_temp_voltage < 1e-1)
 8002256:	ed97 7a04 	vldr	s14, [r7, #16]
 800225a:	edd7 7a05 	vldr	s15, [r7, #20]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f7fe f96f 	bl	8000548 <__aeabi_f2d>
 800226a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002368 <ADBMS_CalculateValues_Temps+0x260>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe fc34 	bl	8000adc <__aeabi_dcmplt>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <ADBMS_CalculateValues_Temps+0x178>
                    openwire_temp_fault = true;
 800227a:	2301      	movs	r3, #1
 800227c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 8002280:	edd7 0a04 	vldr	s1, [r7, #16]
 8002284:	ed97 0a05 	vldr	s0, [r7, #20]
 8002288:	f002 f9d2 	bl	8004630 <getTemp>
 800228c:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->temperatures[cic*NUM_TEMPS_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	00d9      	lsls	r1, r3, #3
 8002294:	7efa      	ldrb	r2, [r7, #27]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	440b      	add	r3, r1
 800229e:	7eba      	ldrb	r2, [r7, #26]
 80022a0:	0852      	lsrs	r2, r2, #1
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b02      	subs	r3, #2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	336e      	adds	r3, #110	@ 0x6e
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 80022b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 80022cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80022d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	dd03      	ble.n	80022e2 <ADBMS_CalculateValues_Temps+0x1da>
                    adbms->max_temp = curr_temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
                if (curr_temp < adbms->min_temp)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 80022e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d505      	bpl.n	8002302 <ADBMS_CalculateValues_Temps+0x1fa>
                    adbms->min_temp = curr_temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 80022fe:	e000      	b.n	8002302 <ADBMS_CalculateValues_Temps+0x1fa>
                if((creg_grp==0 && cbyte <= 2) || creg_grp*DATA_LEN/2 + cbyte/2 >= AUX_GPIO) continue;
 8002300:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002302:	7ebb      	ldrb	r3, [r7, #26]
 8002304:	3302      	adds	r3, #2
 8002306:	76bb      	strb	r3, [r7, #26]
 8002308:	7ebb      	ldrb	r3, [r7, #26]
 800230a:	2b05      	cmp	r3, #5
 800230c:	f67f af5d 	bls.w	80021ca <ADBMS_CalculateValues_Temps+0xc2>
        for (uint8_t creg_grp = 0; creg_grp < AUX_REG_GRP; creg_grp++)
 8002310:	7efb      	ldrb	r3, [r7, #27]
 8002312:	3301      	adds	r3, #1
 8002314:	76fb      	strb	r3, [r7, #27]
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	2b03      	cmp	r3, #3
 800231a:	f67f af53 	bls.w	80021c4 <ADBMS_CalculateValues_Temps+0xbc>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f77f af49 	ble.w	80021be <ADBMS_CalculateValues_Temps+0xb6>
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <ADBMS_CalculateValues_Temps+0x236>
 8002336:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <ADBMS_CalculateValues_Temps+0x23a>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <ADBMS_CalculateValues_Temps+0x23c>
 8002342:	2300      	movs	r3, #0
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 8002350:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002354:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
    
}
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	9999999a 	.word	0x9999999a
 800236c:	3fb99999 	.word	0x3fb99999
 8002370:	7f7fffff 	.word	0x7f7fffff
 8002374:	40400000 	.word	0x40400000

08002378 <cellBalanceOff>:
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
}

void cellBalanceOff(adbms_ *adbms)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    // Turn off CB indication LED
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2140      	movs	r1, #64	@ 0x40
 8002384:	4815      	ldr	r0, [pc, #84]	@ (80023dc <cellBalanceOff+0x64>)
 8002386:	f004 fa0d 	bl	80067a4 <HAL_GPIO_WritePin>

    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e009      	b.n	80023a4 <cellBalanceOff+0x2c>
    {
        adbms->cfb[cic].dcc = 0;
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3326      	adds	r3, #38	@ 0x26
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	819a      	strh	r2, [r3, #12]
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	ddf2      	ble.n	8002390 <cellBalanceOff+0x18>
    }
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 729b 	add.w	r2, r3, #310	@ 0x136
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	333e      	adds	r3, #62	@ 0x3e
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7ff f843 	bl	8001442 <ADBMS_Set_Config_B>
    ADBMS_Write_Data_RegGrp_Polling(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_tx_dataBuf);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <cellBalanceOff+0x68>)
 80023c2:	8819      	ldrh	r1, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	330a      	adds	r3, #10
 80023ce:	f7ff fad1 	bl	8001974 <ADBMS_Write_Data_RegGrp_Polling>
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40020400 	.word	0x40020400
 80023e0:	20000002 	.word	0x20000002

080023e4 <UpdateOWCFault>:

void UpdateOWCFault(adbms_ *adbms)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    // check openwire fault
    ADBMS_WakeUP_ICs_Polling();
 80023ec:	f7ff fa78 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    cellBalanceOff(adbms);   // need to turn off cell balancing to check for OWC
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffc1 	bl	8002378 <cellBalanceOff>

    /// OWC EVEN Check
    adbms->adsv.cont = 1;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 1; // Enable OW on even-channel 
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 800240a:	2101      	movs	r1, #1
 800240c:	f361 0383 	bfi	r3, r1, #2, #2
 8002410:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4611      	mov	r1, r2
 800241e:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 8002422:	f7ff f8ff 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7ff fa78 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 8002438:	2008      	movs	r0, #8
 800243a:	f002 fa8f 	bl	800495c <HAL_Delay>

    // Get new s-channel voltages
    bool pec = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	747b      	strb	r3, [r7, #17]
    ADBMS_WakeUP_ICs_Polling();
 8002442:	f7ff fa4d 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <UpdateOWCFault+0x234>)
 800244c:	8819      	ldrh	r1, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	331e      	adds	r3, #30
 8002458:	f7ff fab2 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	7c7b      	ldrb	r3, [r7, #17]
 8002462:	4313      	orrs	r3, r2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b69      	ldr	r3, [pc, #420]	@ (800261c <UpdateOWCFault+0x238>)
 8002476:	8819      	ldrh	r1, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	339a      	adds	r3, #154	@ 0x9a
 800247c:	f103 020c 	add.w	r2, r3, #12
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	331e      	adds	r3, #30
 8002484:	f7ff fa9c 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	7c7b      	ldrb	r3, [r7, #17]
 800248e:	4313      	orrs	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002620 <UpdateOWCFault+0x23c>)
 80024a2:	8819      	ldrh	r1, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	339a      	adds	r3, #154	@ 0x9a
 80024a8:	f103 0218 	add.w	r2, r3, #24
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	331e      	adds	r3, #30
 80024b0:	f7ff fa86 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	7c7b      	ldrb	r3, [r7, #17]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	4b55      	ldr	r3, [pc, #340]	@ (8002624 <UpdateOWCFault+0x240>)
 80024ce:	8819      	ldrh	r1, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	339a      	adds	r3, #154	@ 0x9a
 80024d4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	331e      	adds	r3, #30
 80024dc:	f7ff fa70 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	7c7b      	ldrb	r3, [r7, #17]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002628 <UpdateOWCFault+0x244>)
 80024fa:	8819      	ldrh	r1, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	339a      	adds	r3, #154	@ 0x9a
 8002500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	331e      	adds	r3, #30
 8002508:	f7ff fa5a 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	7c7b      	ldrb	r3, [r7, #17]
 8002512:	4313      	orrs	r3, r2
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	747b      	strb	r3, [r7, #17]

    if(pec){
 8002520:	7c7b      	ldrb	r3, [r7, #17]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <UpdateOWCFault+0x176>
        adbms->current_owc_failures += 1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 800252c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8002540:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	dc00      	bgt.n	8002550 <UpdateOWCFault+0x16c>
            adbms->pec_fault_ = 1;
        }
        return;
 800254e:	e1bb      	b.n	80028c8 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 8002558:	e1b6      	b.n	80028c8 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	e06b      	b.n	8002642 <UpdateOWCFault+0x25e>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 800256a:	2305      	movs	r3, #5
 800256c:	737b      	strb	r3, [r7, #13]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800256e:	2300      	movs	r3, #0
 8002570:	75bb      	strb	r3, [r7, #22]
 8002572:	e05f      	b.n	8002634 <UpdateOWCFault+0x250>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002574:	2300      	movs	r3, #0
 8002576:	757b      	strb	r3, [r7, #21]
 8002578:	e04a      	b.n	8002610 <UpdateOWCFault+0x22c>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 800257a:	7dba      	ldrb	r2, [r7, #22]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	7d7a      	ldrb	r2, [r7, #21]
 8002584:	0852      	lsrs	r2, r2, #1
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	4413      	add	r3, r2
 800258a:	2b0d      	cmp	r3, #13
 800258c:	dc4e      	bgt.n	800262c <UpdateOWCFault+0x248>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 800258e:	7dba      	ldrb	r2, [r7, #22]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4619      	mov	r1, r3
 800259a:	7dfa      	ldrb	r2, [r7, #23]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	18ca      	adds	r2, r1, r3
 80025a6:	7d7b      	ldrb	r3, [r7, #21]
 80025a8:	4413      	add	r3, r2
 80025aa:	3301      	adds	r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b219      	sxth	r1, r3
 80025ba:	7dba      	ldrb	r2, [r7, #22]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	7dfa      	ldrb	r2, [r7, #23]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	18c2      	adds	r2, r0, r3
 80025d2:	7d7b      	ldrb	r3, [r7, #21]
 80025d4:	4413      	add	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80025de:	b21b      	sxth	r3, r3
 80025e0:	430b      	orrs	r3, r1
 80025e2:	817b      	strh	r3, [r7, #10]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 80025e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fde5 	bl	80011b8 <ADBMS_getVoltage>
 80025ee:	eef0 7a40 	vmov.f32	s15, s0
 80025f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d504      	bpl.n	800260a <UpdateOWCFault+0x226>
                {
                    adbms->openwire_fault_ = 1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
                    return;
 8002608:	e15e      	b.n	80028c8 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 800260a:	7d7b      	ldrb	r3, [r7, #21]
 800260c:	3302      	adds	r3, #2
 800260e:	757b      	strb	r3, [r7, #21]
 8002610:	7d7b      	ldrb	r3, [r7, #21]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d9b1      	bls.n	800257a <UpdateOWCFault+0x196>
 8002616:	e00a      	b.n	800262e <UpdateOWCFault+0x24a>
 8002618:	2000000e 	.word	0x2000000e
 800261c:	20000010 	.word	0x20000010
 8002620:	20000012 	.word	0x20000012
 8002624:	20000014 	.word	0x20000014
 8002628:	20000016 	.word	0x20000016
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 800262c:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 800262e:	7dbb      	ldrb	r3, [r7, #22]
 8002630:	3301      	adds	r3, #1
 8002632:	75bb      	strb	r3, [r7, #22]
 8002634:	7dba      	ldrb	r2, [r7, #22]
 8002636:	7b7b      	ldrb	r3, [r7, #13]
 8002638:	429a      	cmp	r2, r3
 800263a:	d39b      	bcc.n	8002574 <UpdateOWCFault+0x190>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	3301      	adds	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d990      	bls.n	800256a <UpdateOWCFault+0x186>
            }
        }
    }

    /// OWC ODD Check
    adbms->adsv.cont = 1;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 2; // Enable OW on odd-channel 
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 800265c:	2102      	movs	r1, #2
 800265e:	f361 0383 	bfi	r3, r1, #2, #2
 8002662:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4611      	mov	r1, r2
 8002670:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 8002674:	f7fe ffd6 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff f94f 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(8);    // S-Channels are updated at 8ms
 800268a:	2008      	movs	r0, #8
 800268c:	f002 f966 	bl	800495c <HAL_Delay>

    // Get new s-channel voltages
    ADBMS_WakeUP_ICs_Polling();
 8002690:	f7ff f926 	bl	80018e0 <ADBMS_WakeUP_ICs_Polling>
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVA, (adbms->ICs.scell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4b8d      	ldr	r3, [pc, #564]	@ (80028d0 <UpdateOWCFault+0x4ec>)
 800269a:	8819      	ldrh	r1, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 029a 	add.w	r2, r3, #154	@ 0x9a
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	331e      	adds	r3, #30
 80026a6:	f7ff f98b 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	7c7b      	ldrb	r3, [r7, #17]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVB, (adbms->ICs.scell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	4b84      	ldr	r3, [pc, #528]	@ (80028d4 <UpdateOWCFault+0x4f0>)
 80026c4:	8819      	ldrh	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	339a      	adds	r3, #154	@ 0x9a
 80026ca:	f103 020c 	add.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	331e      	adds	r3, #30
 80026d2:	f7ff f975 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	7c7b      	ldrb	r3, [r7, #17]
 80026dc:	4313      	orrs	r3, r2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVC, (adbms->ICs.scell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <UpdateOWCFault+0x4f4>)
 80026f0:	8819      	ldrh	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	339a      	adds	r3, #154	@ 0x9a
 80026f6:	f103 0218 	add.w	r2, r3, #24
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	331e      	adds	r3, #30
 80026fe:	f7ff f95f 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	7c7b      	ldrb	r3, [r7, #17]
 8002708:	4313      	orrs	r3, r2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVD, (adbms->ICs.scell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	4b70      	ldr	r3, [pc, #448]	@ (80028dc <UpdateOWCFault+0x4f8>)
 800271c:	8819      	ldrh	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	339a      	adds	r3, #154	@ 0x9a
 8002722:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	331e      	adds	r3, #30
 800272a:	f7ff f949 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	7c7b      	ldrb	r3, [r7, #17]
 8002734:	4313      	orrs	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    pec |= ADBMS_Read_Data_RegGrp_Polling(adbms->ICs.hspi, RDSVE, (adbms->ICs.scell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_rx_dataBuf);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <UpdateOWCFault+0x4fc>)
 8002748:	8819      	ldrh	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	339a      	adds	r3, #154	@ 0x9a
 800274e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	331e      	adds	r3, #30
 8002756:	f7ff f933 	bl	80019c0 <ADBMS_Read_Data_RegGrp_Polling>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	7c7b      	ldrb	r3, [r7, #17]
 8002760:	4313      	orrs	r3, r2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	747b      	strb	r3, [r7, #17]

    if(pec){
 800276e:	7c7b      	ldrb	r3, [r7, #17]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <UpdateOWCFault+0x3c4>
        adbms->current_owc_failures += 1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 800277a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800277e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
        if(adbms->current_owc_failures > PEC_FAILURE_THRESHOLD){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 800278e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dc00      	bgt.n	800279e <UpdateOWCFault+0x3ba>
            adbms->pec_fault_ = 1;
        }
        return;
 800279c:	e094      	b.n	80028c8 <UpdateOWCFault+0x4e4>
            adbms->pec_fault_ = 1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
        return;
 80027a6:	e08f      	b.n	80028c8 <UpdateOWCFault+0x4e4>
    }else adbms->current_owc_failures = 0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224

    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	753b      	strb	r3, [r7, #20]
 80027b6:	e061      	b.n	800287c <UpdateOWCFault+0x498>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 80027b8:	2305      	movs	r3, #5
 80027ba:	743b      	strb	r3, [r7, #16]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 80027bc:	2300      	movs	r3, #0
 80027be:	74fb      	strb	r3, [r7, #19]
 80027c0:	e055      	b.n	800286e <UpdateOWCFault+0x48a>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 80027c2:	2300      	movs	r3, #0
 80027c4:	74bb      	strb	r3, [r7, #18]
 80027c6:	e04a      	b.n	800285e <UpdateOWCFault+0x47a>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 80027c8:	7cfa      	ldrb	r2, [r7, #19]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	7cba      	ldrb	r2, [r7, #18]
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4413      	add	r3, r2
 80027d8:	2b0d      	cmp	r3, #13
 80027da:	dc44      	bgt.n	8002866 <UpdateOWCFault+0x482>
                int16_t raw_val = (((uint16_t)adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.scell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 80027dc:	7cfa      	ldrb	r2, [r7, #19]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4619      	mov	r1, r3
 80027e8:	7d3a      	ldrb	r2, [r7, #20]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	18ca      	adds	r2, r1, r3
 80027f4:	7cbb      	ldrb	r3, [r7, #18]
 80027f6:	4413      	add	r3, r2
 80027f8:	3301      	adds	r3, #1
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8002802:	b21b      	sxth	r3, r3
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	b219      	sxth	r1, r3
 8002808:	7cfa      	ldrb	r2, [r7, #19]
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4618      	mov	r0, r3
 8002814:	7d3a      	ldrb	r2, [r7, #20]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	18c2      	adds	r2, r0, r3
 8002820:	7cbb      	ldrb	r3, [r7, #18]
 8002822:	4413      	add	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800282c:	b21b      	sxth	r3, r3
 800282e:	430b      	orrs	r3, r1
 8002830:	81fb      	strh	r3, [r7, #14]
                if (ADBMS_getVoltage(raw_val) < 0.5)
 8002832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fcbe 	bl	80011b8 <ADBMS_getVoltage>
 800283c:	eef0 7a40 	vmov.f32	s15, s0
 8002840:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	d504      	bpl.n	8002858 <UpdateOWCFault+0x474>
                {
                    adbms->openwire_fault_ = 1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
                    return;
 8002856:	e037      	b.n	80028c8 <UpdateOWCFault+0x4e4>
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8002858:	7cbb      	ldrb	r3, [r7, #18]
 800285a:	3302      	adds	r3, #2
 800285c:	74bb      	strb	r3, [r7, #18]
 800285e:	7cbb      	ldrb	r3, [r7, #18]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d9b1      	bls.n	80027c8 <UpdateOWCFault+0x3e4>
 8002864:	e000      	b.n	8002868 <UpdateOWCFault+0x484>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8002866:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	3301      	adds	r3, #1
 800286c:	74fb      	strb	r3, [r7, #19]
 800286e:	7cfa      	ldrb	r2, [r7, #19]
 8002870:	7c3b      	ldrb	r3, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3a5      	bcc.n	80027c2 <UpdateOWCFault+0x3de>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8002876:	7d3b      	ldrb	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	753b      	strb	r3, [r7, #20]
 800287c:	7d3b      	ldrb	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d99a      	bls.n	80027b8 <UpdateOWCFault+0x3d4>
            }
        }
    }

    /// Turn off owc
    adbms->adsv.cont = 0;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    adbms->adsv.ow = 0; // Enable OW on odd-channel 
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f892 3147 	ldrb.w	r3, [r2, #327]	@ 0x147
 8002896:	f023 030c 	bic.w	r3, r3, #12
 800289a:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
    ADBMS_Set_ADSV(adbms->adsv, &adbms->ICs.adsv);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4611      	mov	r1, r2
 80028a8:	f893 0147 	ldrb.w	r0, [r3, #327]	@ 0x147
 80028ac:	f7fe feba 	bl	8001624 <ADBMS_Set_ADSV>
    ADBMS_Write_CMD_Polling(adbms->ICs.hspi, adbms->ICs.adsv);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7ff f833 	bl	8001928 <ADBMS_Write_CMD_Polling>
    HAL_Delay(1);    // S-Channels are updated at 8ms
 80028c2:	2001      	movs	r0, #1
 80028c4:	f002 f84a 	bl	800495c <HAL_Delay>
}
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000000e 	.word	0x2000000e
 80028d4:	20000010 	.word	0x20000010
 80028d8:	20000012 	.word	0x20000012
 80028dc:	20000014 	.word	0x20000014
 80028e0:	20000016 	.word	0x20000016

080028e4 <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 80028ec:	487b      	ldr	r0, [pc, #492]	@ (8002adc <ADBMS_Print_Vals+0x1f8>)
 80028ee:	f00b fb6b 	bl	800dfc8 <puts>
    printf("total v: %f\n", adbms->total_v);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe25 	bl	8000548 <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4877      	ldr	r0, [pc, #476]	@ (8002ae0 <ADBMS_Print_Vals+0x1fc>)
 8002904:	f00b faf0 	bl	800dee8 <iprintf>
    printf("max v: %f\t", adbms->max_v);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4872      	ldr	r0, [pc, #456]	@ (8002ae4 <ADBMS_Print_Vals+0x200>)
 800291a:	f00b fae5 	bl	800dee8 <iprintf>
    printf("min v: %f\t", adbms->min_v);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe0f 	bl	8000548 <__aeabi_f2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	486e      	ldr	r0, [pc, #440]	@ (8002ae8 <ADBMS_Print_Vals+0x204>)
 8002930:	f00b fada 	bl	800dee8 <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fe04 	bl	8000548 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4869      	ldr	r0, [pc, #420]	@ (8002aec <ADBMS_Print_Vals+0x208>)
 8002946:	f00b facf 	bl	800dee8 <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	ed93 7a80 	vldr	s14, [r3, #512]	@ 0x200
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	ee17 0a90 	vmov	r0, s15
 800295e:	f7fd fdf3 	bl	8000548 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4862      	ldr	r0, [pc, #392]	@ (8002af0 <ADBMS_Print_Vals+0x20c>)
 8002968:	f00b fabe 	bl	800dee8 <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e02b      	b.n	80029ca <ADBMS_Print_Vals+0xe6>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e022      	b.n	80029be <ADBMS_Print_Vals+0xda>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	461a      	mov	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	1c5c      	adds	r4, r3, #1
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	461a      	mov	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	3352      	adds	r3, #82	@ 0x52
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdce 	bl	8000548 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4621      	mov	r1, r4
 80029b2:	4850      	ldr	r0, [pc, #320]	@ (8002af4 <ADBMS_Print_Vals+0x210>)
 80029b4:	f00b fa98 	bl	800dee8 <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	3301      	adds	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b0d      	cmp	r3, #13
 80029c2:	ddd9      	ble.n	8002978 <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	ddd0      	ble.n	8002972 <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 80029d0:	200a      	movs	r0, #10
 80029d2:	f00b fa9b 	bl	800df0c <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 80029d6:	4848      	ldr	r0, [pc, #288]	@ (8002af8 <ADBMS_Print_Vals+0x214>)
 80029d8:	f00b faf6 	bl	800dfc8 <puts>
    printf("max temp: %f\t", adbms->max_temp);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fdb0 	bl	8000548 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4843      	ldr	r0, [pc, #268]	@ (8002afc <ADBMS_Print_Vals+0x218>)
 80029ee:	f00b fa7b 	bl	800dee8 <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fda5 	bl	8000548 <__aeabi_f2d>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	483f      	ldr	r0, [pc, #252]	@ (8002b00 <ADBMS_Print_Vals+0x21c>)
 8002a04:	f00b fa70 	bl	800dee8 <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	483a      	ldr	r0, [pc, #232]	@ (8002b04 <ADBMS_Print_Vals+0x220>)
 8002a1a:	f00b fa65 	bl	800dee8 <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e023      	b.n	8002a6c <ADBMS_Print_Vals+0x188>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	e01a      	b.n	8002a60 <ADBMS_Print_Vals+0x17c>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	00da      	lsls	r2, r3, #3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	1c5c      	adds	r4, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	00da      	lsls	r2, r3, #3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	336e      	adds	r3, #110	@ 0x6e
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd7d 	bl	8000548 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4621      	mov	r1, r4
 8002a54:	482c      	ldr	r0, [pc, #176]	@ (8002b08 <ADBMS_Print_Vals+0x224>)
 8002a56:	f00b fa47 	bl	800dee8 <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	dde1      	ble.n	8002a2a <ADBMS_Print_Vals+0x146>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	ddd8      	ble.n	8002a24 <ADBMS_Print_Vals+0x140>
        }
    }
    printf("\n");
 8002a72:	200a      	movs	r0, #10
 8002a74:	f00b fa4a 	bl	800df0c <putchar>

    printf("Faults\n");
 8002a78:	4824      	ldr	r0, [pc, #144]	@ (8002b0c <ADBMS_Print_Vals+0x228>)
 8002a7a:	f00b faa5 	bl	800dfc8 <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8002a84:	4619      	mov	r1, r3
 8002a86:	4822      	ldr	r0, [pc, #136]	@ (8002b10 <ADBMS_Print_Vals+0x22c>)
 8002a88:	f00b fa2e 	bl	800dee8 <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002a92:	4619      	mov	r1, r3
 8002a94:	481f      	ldr	r0, [pc, #124]	@ (8002b14 <ADBMS_Print_Vals+0x230>)
 8002a96:	f00b fa27 	bl	800dee8 <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	481d      	ldr	r0, [pc, #116]	@ (8002b18 <ADBMS_Print_Vals+0x234>)
 8002aa4:	f00b fa20 	bl	800dee8 <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8002aae:	4619      	mov	r1, r3
 8002ab0:	481a      	ldr	r0, [pc, #104]	@ (8002b1c <ADBMS_Print_Vals+0x238>)
 8002ab2:	f00b fa19 	bl	800dee8 <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002abc:	4619      	mov	r1, r3
 8002abe:	4818      	ldr	r0, [pc, #96]	@ (8002b20 <ADBMS_Print_Vals+0x23c>)
 8002ac0:	f00b fa12 	bl	800dee8 <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8002aca:	4619      	mov	r1, r3
 8002acc:	4815      	ldr	r0, [pc, #84]	@ (8002b24 <ADBMS_Print_Vals+0x240>)
 8002ace:	f00b fa0b 	bl	800dee8 <iprintf>
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	080105e0 	.word	0x080105e0
 8002ae0:	080105ec 	.word	0x080105ec
 8002ae4:	080105fc 	.word	0x080105fc
 8002ae8:	08010608 	.word	0x08010608
 8002aec:	08010614 	.word	0x08010614
 8002af0:	08010620 	.word	0x08010620
 8002af4:	08010630 	.word	0x08010630
 8002af8:	0801063c 	.word	0x0801063c
 8002afc:	08010644 	.word	0x08010644
 8002b00:	08010654 	.word	0x08010654
 8002b04:	08010664 	.word	0x08010664
 8002b08:	08010674 	.word	0x08010674
 8002b0c:	0801067c 	.word	0x0801067c
 8002b10:	08010684 	.word	0x08010684
 8002b14:	08010698 	.word	0x08010698
 8002b18:	080106ac 	.word	0x080106ac
 8002b1c:	080106b8 	.word	0x080106b8
 8002b20:	080106d0 	.word	0x080106d0
 8002b24:	080106e0 	.word	0x080106e0

08002b28 <bms_mainbaord_setup>:
#include "bms.h"

mainboard_ mainboard;

void bms_mainbaord_setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *csb_pinBank, uint16_t csb_pin, ADC_HandleTypeDef *hadc, CAN_HandleTypeDef *hcan1, CAN_HandleTypeDef *hcan2)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b09c      	sub	sp, #112	@ 0x70
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80fb      	strh	r3, [r7, #6]
	// initialize handles
	mainboard.hadc = hadc;
 8002b38:	4a36      	ldr	r2, [pc, #216]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f8c2 3238 	str.w	r3, [r2, #568]	@ 0x238
	mainboard.hcan_drive = hcan1;
 8002b40:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b44:	f8c2 323c 	str.w	r3, [r2, #572]	@ 0x23c
	mainboard.hcan_data = hcan2;
 8002b48:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b4c:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240

	// get offset for current
	mainboard.current_offset = getCurrentOffset(mainboard.hadc);
 8002b50:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b52:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fe26 	bl	80037a8 <getCurrentOffset>
 8002b5c:	eef0 7a40 	vmov.f32	s15, s0
 8002b60:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b62:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// initialize ad chip;
	ADBMS_Interface_Initialize(&mainboard.adbms, hspi, csb_pinBank, csb_pin);
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4829      	ldr	r0, [pc, #164]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b6e:	f7fe ff5d 	bl	8001a2c <ADBMS_Interface_Initialize>

	// initialize CAN;
	BMS_Initialize_Can(&mainboard);
 8002b72:	4828      	ldr	r0, [pc, #160]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002b74:	f000 f960 	bl	8002e38 <BMS_Initialize_Can>

	// initialize the timers: adbms_mainboard_loop, drive_can, data_can
	timer_ t_adbms = CreateTimer(500, bms_mainboard_loop);
 8002b78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b7c:	4a26      	ldr	r2, [pc, #152]	@ (8002c18 <bms_mainbaord_setup+0xf0>)
 8002b7e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fddc 	bl	8004740 <CreateTimer>
	timer_ t_adbms_owc_check = CreateTimer(30000, adbms_owc_loop);
 8002b88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <bms_mainbaord_setup+0xf4>)
 8002b8e:	f247 5130 	movw	r1, #30000	@ 0x7530
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fdd4 	bl	8004740 <CreateTimer>
	timer_ t_drive_can = CreateTimer(100, drive_can_loop);
 8002b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b9c:	4a20      	ldr	r2, [pc, #128]	@ (8002c20 <bms_mainbaord_setup+0xf8>)
 8002b9e:	2164      	movs	r1, #100	@ 0x64
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 fdcd 	bl	8004740 <CreateTimer>
	timer_ t_data_can = CreateTimer(1000, data_can_loop);
 8002ba6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002baa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <bms_mainbaord_setup+0xfc>)
 8002bac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 fdc5 	bl	8004740 <CreateTimer>
	timer_ timers[NUM_TIMERS] = {t_adbms, t_adbms_owc_check, t_drive_can, t_data_can};
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bd6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002be0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002be4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mainboard.tg = CreateTimerGroup(timers);
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fdbf 	bl	8004776 <CreateTimerGroup>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002bfc:	f8c2 3230 	str.w	r3, [r2, #560]	@ 0x230

	mainboard.start_time = HAL_GetTick();
 8002c00:	f001 fea0 	bl	8004944 <HAL_GetTick>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4a03      	ldr	r2, [pc, #12]	@ (8002c14 <bms_mainbaord_setup+0xec>)
 8002c08:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
}
 8002c0c:	bf00      	nop
 8002c0e:	3770      	adds	r7, #112	@ 0x70
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000310 	.word	0x20000310
 8002c18:	08002c41 	.word	0x08002c41
 8002c1c:	08002c51 	.word	0x08002c51
 8002c20:	08002f69 	.word	0x08002f69
 8002c24:	08002fd9 	.word	0x08002fd9

08002c28 <tick_mainboard_timers>:
{
  ADBMS_DMA_Complete(&mainboard.adbms); 
}

void tick_mainboard_timers()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	TickTimerGroup(mainboard.tg);
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <tick_mainboard_timers+0x14>)
 8002c2e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fdb8 	bl	80047a8 <TickTimerGroup>
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000310 	.word	0x20000310

08002c40 <bms_mainboard_loop>:

// ADBMS loop that gets ticked
void bms_mainboard_loop()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	UpdateValues();
 8002c44:	f000 f80e 	bl	8002c64 <UpdateValues>
	CheckFaults();
 8002c48:	f000 f87a 	bl	8002d40 <CheckFaults>
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <adbms_owc_loop>:

// Seprate loop that gets ticked to run OWC
void adbms_owc_loop(){ UpdateOWCFault(&mainboard.adbms); }
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <adbms_owc_loop+0x10>)
 8002c56:	f7ff fbc5 	bl	80023e4 <UpdateOWCFault>
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000310 	.word	0x20000310

08002c64 <UpdateValues>:

void UpdateValues()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	// ADBMS values
	ADBMS_UpdateVoltages(&mainboard.adbms);
 8002c68:	4831      	ldr	r0, [pc, #196]	@ (8002d30 <UpdateValues+0xcc>)
 8002c6a:	f7ff f851 	bl	8001d10 <ADBMS_UpdateVoltages>
	ADBMS_UpdateTemps(&mainboard.adbms);
 8002c6e:	4830      	ldr	r0, [pc, #192]	@ (8002d30 <UpdateValues+0xcc>)
 8002c70:	f7ff f8d2 	bl	8001e18 <ADBMS_UpdateTemps>

	UpdateADInternalFault(&mainboard.adbms);
 8002c74:	482e      	ldr	r0, [pc, #184]	@ (8002d30 <UpdateValues+0xcc>)
 8002c76:	f7fe ffd7 	bl	8001c28 <UpdateADInternalFault>

	// update STM32 Pin values
	// reads: shutdown_contactors, IMD_Status, 6822_State
	mainboard.shutdown_present = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); 	   // shutdown status
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	482d      	ldr	r0, [pc, #180]	@ (8002d34 <UpdateValues+0xd0>)
 8002c7e:	f003 fd79 	bl	8006774 <HAL_GPIO_ReadPin>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <UpdateValues+0xcc>)
 8002c90:	f883 2251 	strb.w	r2, [r3, #593]	@ 0x251
	mainboard.imd_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);			   // IMD_Status
 8002c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c98:	4827      	ldr	r0, [pc, #156]	@ (8002d38 <UpdateValues+0xd4>)
 8002c9a:	f003 fd6b 	bl	8006774 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <UpdateValues+0xcc>)
 8002cac:	f883 2252 	strb.w	r2, [r3, #594]	@ 0x252
	mainboard.comms_6822_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);	   // 6822_State
 8002cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cb4:	481f      	ldr	r0, [pc, #124]	@ (8002d34 <UpdateValues+0xd0>)
 8002cb6:	f003 fd5d 	bl	8006774 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <UpdateValues+0xcc>)
 8002cc8:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
	mainboard.charger_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);		   // Charger_Pin
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	481a      	ldr	r0, [pc, #104]	@ (8002d38 <UpdateValues+0xd4>)
 8002cd0:	f003 fd50 	bl	8006774 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <UpdateValues+0xcc>)
 8002ce2:	f883 2253 	strb.w	r2, [r3, #595]	@ 0x253

	// get current
	mainboard.current = getCurrent(mainboard.hadc) - mainboard.current_offset;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <UpdateValues+0xcc>)
 8002ce8:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fceb 	bl	80036c8 <getCurrent>
 8002cf2:	eeb0 7a40 	vmov.f32	s14, s0
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <UpdateValues+0xcc>)
 8002cf8:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <UpdateValues+0xcc>)
 8002d02:	edc3 7a92 	vstr	s15, [r3, #584]	@ 0x248
	mainboard.overcurrent_fault = mainboard.current > OVERCURRENT;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <UpdateValues+0xcc>)
 8002d08:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8002d0c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d3c <UpdateValues+0xd8>
 8002d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	bfcc      	ite	gt
 8002d1a:	2301      	movgt	r3, #1
 8002d1c:	2300      	movle	r3, #0
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <UpdateValues+0xcc>)
 8002d22:	f883 2250 	strb.w	r2, [r3, #592]	@ 0x250

	if(ENABLE_PRINTF_DEBUG_COMMS) send_data_over_printf(); 
 8002d26:	f000 f871 	bl	8002e0c <send_data_over_printf>
	if(ENABLE_USB_COMMS) send_data_over_USB(); 
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000310 	.word	0x20000310
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	43070000 	.word	0x43070000

08002d40 <CheckFaults>:

void CheckFaults()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	// raise fault flag if any fault is true
	// faults are latching
	mainboard.bms_fault = mainboard.bms_fault 
 8002d44:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <CheckFaults+0xc0>)
 8002d46:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
							|| mainboard.adbms.overtemperature_fault_
							|| mainboard.adbms.undertemperature_fault_
							|| mainboard.adbms.openwire_fault_
							|| mainboard.adbms.openwire_temp_fault_
							|| mainboard.adbms.pec_fault_
							|| mainboard.overcurrent_fault;
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d127      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.overvoltage_fault_
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <CheckFaults+0xc0>)
 8002d50:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d122      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.undervoltage_fault_
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <CheckFaults+0xc0>)
 8002d5a:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11d      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.overtemperature_fault_
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <CheckFaults+0xc0>)
 8002d64:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d118      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.undertemperature_fault_
 8002d6c:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <CheckFaults+0xc0>)
 8002d6e:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d113      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_fault_
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <CheckFaults+0xc0>)
 8002d78:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10e      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.openwire_temp_fault_
 8002d80:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <CheckFaults+0xc0>)
 8002d82:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.adbms.pec_fault_
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <CheckFaults+0xc0>)
 8002d8c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <CheckFaults+0x5e>
							|| mainboard.overcurrent_fault;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <CheckFaults+0xc0>)
 8002d96:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <CheckFaults+0x62>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <CheckFaults+0x64>
 8002da2:	2300      	movs	r3, #0
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	b2da      	uxtb	r2, r3
	mainboard.bms_fault = mainboard.bms_fault 
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <CheckFaults+0xc0>)
 8002dac:	f883 2245 	strb.w	r2, [r3, #581]	@ 0x245

	// write BMS_Status - healthy is high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, !mainboard.bms_fault);
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <CheckFaults+0xc0>)
 8002db2:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 8002db6:	f083 0301 	eor.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dc2:	4810      	ldr	r0, [pc, #64]	@ (8002e04 <CheckFaults+0xc4>)
 8002dc4:	f003 fcee 	bl	80067a4 <HAL_GPIO_WritePin>


	// set external faults
	mainboard.external_fault = !mainboard.shutdown_present;
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <CheckFaults+0xc0>)
 8002dca:	f893 3251 	ldrb.w	r3, [r3, #593]	@ 0x251
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <CheckFaults+0xc0>)
 8002de6:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244

	// Turns on external LED if external fault
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, mainboard.external_fault);
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <CheckFaults+0xc0>)
 8002dec:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 8002df0:	461a      	mov	r2, r3
 8002df2:	2180      	movs	r1, #128	@ 0x80
 8002df4:	4804      	ldr	r0, [pc, #16]	@ (8002e08 <CheckFaults+0xc8>)
 8002df6:	f003 fcd5 	bl	80067a4 <HAL_GPIO_WritePin>

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000310 	.word	0x20000310
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020400 	.word	0x40020400

08002e0c <send_data_over_printf>:

void send_data_over_printf()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	// AD Prints
	ADBMS_Print_Vals(&mainboard.adbms);
 8002e10:	4807      	ldr	r0, [pc, #28]	@ (8002e30 <send_data_over_printf+0x24>)
 8002e12:	f7ff fd67 	bl	80028e4 <ADBMS_Print_Vals>

	// Mainboard Prints
	printf("Time: %d\n", (int)(HAL_GetTick() - mainboard.start_time));
 8002e16:	f001 fd95 	bl	8004944 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <send_data_over_printf+0x24>)
 8002e1e:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	4803      	ldr	r0, [pc, #12]	@ (8002e34 <send_data_over_printf+0x28>)
 8002e28:	f00b f85e 	bl	800dee8 <iprintf>
//	printf("External fault: %d\n", mainboard.external_fault);
//	printf("Current: %f\n", mainboard.current);
	
	// TODO Add more prints as needed

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000310 	.word	0x20000310
 8002e34:	08010780 	.word	0x08010780

08002e38 <BMS_Initialize_Can>:
#include "bms_can.h"

bms_can_ bms_can;

void BMS_Initialize_Can(mainboard_ *mainboard)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	// Start CAN
	bms_can.mainboard = mainboard;
 8002e40:	4a3a      	ldr	r2, [pc, #232]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
	HAL_CAN_Start(bms_can.mainboard->hcan_drive);
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fb84 	bl	800555c <HAL_CAN_Start>
	HAL_CAN_Start(bms_can.mainboard->hcan_data);
 8002e54:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fb7d 	bl	800555c <HAL_CAN_Start>

	// Enable notifications (interrupts) for CAN, uses FIFO scheduling to receive msgs
	HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_drive, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002e62:	4b32      	ldr	r3, [pc, #200]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fc89 	bl	8005784 <HAL_CAN_ActivateNotification>
	// HAL_CAN_ActivateNotification(bms_can.mainboard->hcan_data, CAN_IT_RX_FIFO0_MSG_PENDING);	// Don't need to read Data CAN

	// SOC header initialization
	bms_can.TxHeaderSOC_.StdId = 0x150;
 8002e72:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e74:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002e78:	62da      	str	r2, [r3, #44]	@ 0x2c
	bms_can.TxHeaderSOC_.IDE = CAN_ID_STD;
 8002e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34
	bms_can.TxHeaderSOC_.RTR = CAN_RTR_DATA;
 8002e80:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38
	bms_can.TxHeaderSOC_.DLC = 8; // we're sending 8 bytes of data for SOE
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e88:	2208      	movs	r2, #8
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Faults header initialization
	bms_can.TxHeaderFaults_.StdId = 0x151;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e8e:	f240 1251 	movw	r2, #337	@ 0x151
 8002e92:	64da      	str	r2, [r3, #76]	@ 0x4c
	bms_can.TxHeaderFaults_.IDE = CAN_ID_STD;
 8002e94:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
	bms_can.TxHeaderFaults_.RTR = CAN_RTR_DATA;
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58
	bms_can.TxHeaderFaults_.DLC = 8;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Status header initialization
	bms_can.TxHeaderStatus_.StdId = 0x152;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ea8:	f44f 72a9 	mov.w	r2, #338	@ 0x152
 8002eac:	66da      	str	r2, [r3, #108]	@ 0x6c
	bms_can.TxHeaderStatus_.IDE = CAN_ID_STD;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	675a      	str	r2, [r3, #116]	@ 0x74
	bms_can.TxHeaderStatus_.RTR = CAN_RTR_DATA;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	679a      	str	r2, [r3, #120]	@ 0x78
	bms_can.TxHeaderStatus_.DLC = 8;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

	// Charger header initialization
	bms_can.TxHeaderCharger_.ExtId = 0x1806E5F4;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <BMS_Initialize_Can+0xf8>)
 8002ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	bms_can.TxHeaderCharger_.IDE = CAN_ID_EXT;
 8002ec8:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002eca:	2204      	movs	r2, #4
 8002ecc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	bms_can.TxHeaderCharger_.RTR = CAN_RTR_DATA;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	bms_can.TxHeaderCharger_.DLC = 8;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002eda:	2208      	movs	r2, #8
 8002edc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	// Voltages header initialization
	bms_can.TxHeaderVoltages_.StdId = 0x153;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ee2:	f240 1253 	movw	r2, #339	@ 0x153
 8002ee6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	bms_can.TxHeaderVoltages_.IDE = CAN_ID_STD;
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	bms_can.TxHeaderVoltages_.RTR = CAN_RTR_DATA;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	bms_can.TxHeaderVoltages_.DLC = 8;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002efc:	2208      	movs	r2, #8
 8002efe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Temperatures header initialization
	bms_can.TxHeaderTemperatures_.StdId = 0x167;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002f04:	f240 1267 	movw	r2, #359	@ 0x167
 8002f08:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	bms_can.TxHeaderTemperatures_.IDE = CAN_ID_STD;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	bms_can.TxHeaderTemperatures_.RTR = CAN_RTR_DATA;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	bms_can.TxHeaderTemperatures_.DLC = 8;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <BMS_Initialize_Can+0xf4>)
 8002f1e:	2208      	movs	r2, #8
 8002f20:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000056c 	.word	0x2000056c
 8002f30:	1806e5f4 	.word	0x1806e5f4

08002f34 <send_can_messages>:

uint8_t send_can_messages(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *TxHeader, uint8_t *data, uint32_t *TxMailBox)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
	// send msg
	HAL_StatusTypeDef msg_status = HAL_CAN_AddTxMessage(hcan, TxHeader, data, TxMailBox);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f002 fb4b 	bl	80055e4 <HAL_CAN_AddTxMessage>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]

	if (msg_status != HAL_OK)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <send_can_messages+0x28>
	{
		// Error handling
//		printf("CAN Message failed\n");
		return 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <send_can_messages+0x2a>
	}
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <drive_can_loop>:

void drive_can_loop()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	// printf("Sending Drive CAN\n");

	// update and send soc
	populateBMS_SOC(bms_can.txDataSOC_);
 8002f6c:	4812      	ldr	r0, [pc, #72]	@ (8002fb8 <drive_can_loop+0x50>)
 8002f6e:	f000 f88b 	bl	8003088 <populateBMS_SOC>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderSOC_, bms_can.txDataSOC_, &bms_can.TxMailBox_);
 8002f72:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <drive_can_loop+0x54>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <drive_can_loop+0x58>)
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb8 <drive_can_loop+0x50>)
 8002f7e:	4911      	ldr	r1, [pc, #68]	@ (8002fc4 <drive_can_loop+0x5c>)
 8002f80:	f7ff ffd8 	bl	8002f34 <send_can_messages>

	// update and send faults
	populateBMS_Faults(bms_can.txDataFaults_);
 8002f84:	4810      	ldr	r0, [pc, #64]	@ (8002fc8 <drive_can_loop+0x60>)
 8002f86:	f000 f903 	bl	8003190 <populateBMS_Faults>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderFaults_, bms_can.txDataFaults_, &bms_can.TxMailBox_);
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <drive_can_loop+0x54>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <drive_can_loop+0x58>)
 8002f94:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc8 <drive_can_loop+0x60>)
 8002f96:	490d      	ldr	r1, [pc, #52]	@ (8002fcc <drive_can_loop+0x64>)
 8002f98:	f7ff ffcc 	bl	8002f34 <send_can_messages>

	// update and send status
	populateBMS_Status(bms_can.txDataStatus_);
 8002f9c:	480c      	ldr	r0, [pc, #48]	@ (8002fd0 <drive_can_loop+0x68>)
 8002f9e:	f000 f9ed 	bl	800337c <populateBMS_Status>
	send_can_messages(bms_can.mainboard->hcan_drive, &bms_can.TxHeaderStatus_, bms_can.txDataStatus_, &bms_can.TxMailBox_);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <drive_can_loop+0x54>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8d3 023c 	ldr.w	r0, [r3, #572]	@ 0x23c
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <drive_can_loop+0x58>)
 8002fac:	4a08      	ldr	r2, [pc, #32]	@ (8002fd0 <drive_can_loop+0x68>)
 8002fae:	4909      	ldr	r1, [pc, #36]	@ (8002fd4 <drive_can_loop+0x6c>)
 8002fb0:	f7ff ffc0 	bl	8002f34 <send_can_messages>
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200005b0 	.word	0x200005b0
 8002fbc:	2000056c 	.word	0x2000056c
 8002fc0:	20000570 	.word	0x20000570
 8002fc4:	20000598 	.word	0x20000598
 8002fc8:	200005d0 	.word	0x200005d0
 8002fcc:	200005b8 	.word	0x200005b8
 8002fd0:	200005f0 	.word	0x200005f0
 8002fd4:	200005d8 	.word	0x200005d8

08002fd8 <data_can_loop>:

void data_can_loop()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	// send voltage messages
	bms_can.TxHeaderVoltages_.StdId = 0x153; // set the message id for next iteration
 8002fde:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <data_can_loop+0x98>)
 8002fe0:	f240 1253 	movw	r2, #339	@ 0x153
 8002fe4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	e016      	b.n	800301c <data_can_loop+0x44>
		populateBMS_VoltageMessages(bms_can.txDataVoltages_, i);
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4820      	ldr	r0, [pc, #128]	@ (8003074 <data_can_loop+0x9c>)
 8002ff2:	f000 fa77 	bl	80034e4 <populateBMS_VoltageMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderVoltages_, bms_can.txDataVoltages_, &bms_can.TxMailBox_);
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <data_can_loop+0x98>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <data_can_loop+0xa0>)
 8003000:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <data_can_loop+0x9c>)
 8003002:	491e      	ldr	r1, [pc, #120]	@ (800307c <data_can_loop+0xa4>)
 8003004:	f7ff ff96 	bl	8002f34 <send_can_messages>
		bms_can.TxHeaderVoltages_.StdId++;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <data_can_loop+0x98>)
 800300a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800300e:	3301      	adds	r3, #1
 8003010:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <data_can_loop+0x98>)
 8003012:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGE_MSGS; i++) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3301      	adds	r3, #1
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	dde5      	ble.n	8002fee <data_can_loop+0x16>
	}

	// send temperature messages
	bms_can.TxHeaderTemperatures_.StdId = 0x167; // set the message id for next iteration
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <data_can_loop+0x98>)
 8003024:	f240 1267 	movw	r2, #359	@ 0x167
 8003028:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 800302c:	2300      	movs	r3, #0
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e016      	b.n	8003060 <data_can_loop+0x88>
		populateBMS_TemperatureMessages(bms_can.txDataTemperatures_, i);
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	4812      	ldr	r0, [pc, #72]	@ (8003080 <data_can_loop+0xa8>)
 8003036:	f000 fad7 	bl	80035e8 <populateBMS_TemperatureMessages>
		send_can_messages(bms_can.mainboard->hcan_data, &bms_can.TxHeaderTemperatures_, bms_can.txDataTemperatures_, &bms_can.TxMailBox_);
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <data_can_loop+0x98>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
 8003042:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <data_can_loop+0xa0>)
 8003044:	4a0e      	ldr	r2, [pc, #56]	@ (8003080 <data_can_loop+0xa8>)
 8003046:	490f      	ldr	r1, [pc, #60]	@ (8003084 <data_can_loop+0xac>)
 8003048:	f7ff ff74 	bl	8002f34 <send_can_messages>
		bms_can.TxHeaderTemperatures_.StdId++;
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <data_can_loop+0x98>)
 800304e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003052:	3301      	adds	r3, #1
 8003054:	4a06      	ldr	r2, [pc, #24]	@ (8003070 <data_can_loop+0x98>)
 8003056:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	for(int i = 0; i < NUM_DATA_CAN_TEMP_MSGS; i++) {
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	dde5      	ble.n	8003032 <data_can_loop+0x5a>
	}
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	2000056c 	.word	0x2000056c
 8003074:	20000630 	.word	0x20000630
 8003078:	20000570 	.word	0x20000570
 800307c:	20000618 	.word	0x20000618
 8003080:	20000650 	.word	0x20000650
 8003084:	20000638 	.word	0x20000638

08003088 <populateBMS_SOC>:

void populateBMS_SOC(uint8_t *data)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b0a9      	sub	sp, #164	@ 0xa4
 800308c:	af12      	add	r7, sp, #72	@ 0x48
 800308e:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[5];
	populateRawMessage(&signals[0], 0, 12, 0.1, 0);									  // max discharge current
 8003090:	f107 0308 	add.w	r3, r7, #8
 8003094:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 800317c <populateBMS_SOC+0xf4>
 8003098:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8003180 <populateBMS_SOC+0xf8>
 800309c:	210c      	movs	r1, #12
 800309e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800317c <populateBMS_SOC+0xf4>
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fec4 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[1], 0, 12, 0.1, 0);									  // max regen current
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	3310      	adds	r3, #16
 80030ae:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 800317c <populateBMS_SOC+0xf4>
 80030b2:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8003180 <populateBMS_SOC+0xf8>
 80030b6:	210c      	movs	r1, #12
 80030b8:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 800317c <populateBMS_SOC+0xf4>
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 feb7 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.total_v, 16, 0.01, 0);   // battery voltage
 80030c2:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <populateBMS_SOC+0xfc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	3320      	adds	r3, #32
 80030d0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800317c <populateBMS_SOC+0xf4>
 80030d4:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8003188 <populateBMS_SOC+0x100>
 80030d8:	2110      	movs	r1, #16
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fea6 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.avg_temp, 8, 1, -40);    // battery temp
 80030e4:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <populateBMS_SOC+0xfc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	3330      	adds	r3, #48	@ 0x30
 80030f2:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800318c <populateBMS_SOC+0x104>
 80030f6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030fa:	2108      	movs	r1, #8
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fe95 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->current, 16, 0.01, 0);		  // battery current
 8003106:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <populateBMS_SOC+0xfc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	3340      	adds	r3, #64	@ 0x40
 8003114:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800317c <populateBMS_SOC+0xf4>
 8003118:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8003188 <populateBMS_SOC+0x100>
 800311c:	2110      	movs	r1, #16
 800311e:	eeb0 0a67 	vmov.f32	s0, s15
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fe84 	bl	8003e30 <populateRawMessage>
	encodeSignals(data, 5, signals[0], signals[1], signals[2], signals[3], signals[4]);
 8003128:	ac0e      	add	r4, sp, #56	@ 0x38
 800312a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800312e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003134:	ac0a      	add	r4, sp, #40	@ 0x28
 8003136:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800313a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800313c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003140:	ac06      	add	r4, sp, #24
 8003142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800314c:	ac02      	add	r4, sp, #8
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003158:	466a      	mov	r2, sp
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003162:	e882 0003 	stmia.w	r2, {r0, r1}
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	cb0c      	ldmia	r3, {r2, r3}
 800316c:	2105      	movs	r1, #5
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 febd 	bl	8003eee <encodeSignals>
}
 8003174:	bf00      	nop
 8003176:	375c      	adds	r7, #92	@ 0x5c
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	00000000 	.word	0x00000000
 8003180:	3dcccccd 	.word	0x3dcccccd
 8003184:	2000056c 	.word	0x2000056c
 8003188:	3c23d70a 	.word	0x3c23d70a
 800318c:	c2200000 	.word	0xc2200000

08003190 <populateBMS_Faults>:

void populateBMS_Faults(uint8_t *data)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b0c1      	sub	sp, #260	@ 0x104
 8003194:	af1e      	add	r7, sp, #120	@ 0x78
 8003196:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[8];
	populateRawMessage(&signals[0], bms_can.mainboard->bms_fault, 1, 1, 0);																  	// fault summary
 8003198:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <populateBMS_Faults+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f893 3245 	ldrb.w	r3, [r3, #581]	@ 0x245
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a8:	f107 0308 	add.w	r3, r7, #8
 80031ac:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 8003378 <populateBMS_Faults+0x1e8>
 80031b0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80031b4:	2101      	movs	r1, #1
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fe38 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->adbms.undervoltage_fault_, 1, 1, 0);												  	// undervoltage fault
 80031c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <populateBMS_Faults+0x1e4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	3310      	adds	r3, #16
 80031d6:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8003378 <populateBMS_Faults+0x1e8>
 80031da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80031de:	2101      	movs	r1, #1
 80031e0:	eeb0 0a67 	vmov.f32	s0, s15
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fe23 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.overvoltage_fault_, 1, 1, 0);												   	// overvoltage fault
 80031ea:	4b62      	ldr	r3, [pc, #392]	@ (8003374 <populateBMS_Faults+0x1e4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	3320      	adds	r3, #32
 8003200:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8003378 <populateBMS_Faults+0x1e8>
 8003204:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003208:	2101      	movs	r1, #1
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe0e 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.undertemperature_fault_, 1, 1, 0);												// undertemp fault
 8003214:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <populateBMS_Faults+0x1e4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	3330      	adds	r3, #48	@ 0x30
 800322a:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8003378 <populateBMS_Faults+0x1e8>
 800322e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003232:	2101      	movs	r1, #1
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fdf9 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.overtemperature_fault_, 1, 1, 0);											 	// overemp fault
 800323e:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <populateBMS_Faults+0x1e4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	3340      	adds	r3, #64	@ 0x40
 8003254:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8003378 <populateBMS_Faults+0x1e8>
 8003258:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800325c:	2101      	movs	r1, #1
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fde4 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->overcurrent_fault, 1, 1, 0);														 	// overcurrent fault
 8003268:	4b42      	ldr	r3, [pc, #264]	@ (8003374 <populateBMS_Faults+0x1e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f893 3250 	ldrb.w	r3, [r3, #592]	@ 0x250
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	f107 0308 	add.w	r3, r7, #8
 800327c:	3350      	adds	r3, #80	@ 0x50
 800327e:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8003378 <populateBMS_Faults+0x1e8>
 8003282:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003286:	2101      	movs	r1, #1
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fdcf 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[6], bms_can.mainboard->external_fault, 1, 1, 0);													   			// external fault
 8003292:	4b38      	ldr	r3, [pc, #224]	@ (8003374 <populateBMS_Faults+0x1e4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f893 3244 	ldrb.w	r3, [r3, #580]	@ 0x244
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	3360      	adds	r3, #96	@ 0x60
 80032a8:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8003378 <populateBMS_Faults+0x1e8>
 80032ac:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032b0:	2101      	movs	r1, #1
 80032b2:	eeb0 0a67 	vmov.f32	s0, s15
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fdba 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[7], (bms_can.mainboard->adbms.openwire_fault_ || bms_can.mainboard->adbms.openwire_temp_fault_), 1, 1, 0);	// open wire fault
 80032bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003374 <populateBMS_Faults+0x1e4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <populateBMS_Faults+0x144>
 80032c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003374 <populateBMS_Faults+0x1e4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <populateBMS_Faults+0x148>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <populateBMS_Faults+0x14a>
 80032d8:	2300      	movs	r3, #0
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	3370      	adds	r3, #112	@ 0x70
 80032e8:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8003378 <populateBMS_Faults+0x1e8>
 80032ec:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80032f0:	2101      	movs	r1, #1
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd9a 	bl	8003e30 <populateRawMessage>
	encodeSignals(data, 8, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 80032fc:	ac1a      	add	r4, sp, #104	@ 0x68
 80032fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003308:	ac16      	add	r4, sp, #88	@ 0x58
 800330a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800330e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003314:	ac12      	add	r4, sp, #72	@ 0x48
 8003316:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800331a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800331c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003320:	ac0e      	add	r4, sp, #56	@ 0x38
 8003322:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800332c:	ac0a      	add	r4, sp, #40	@ 0x28
 800332e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003338:	ac06      	add	r4, sp, #24
 800333a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003344:	ac02      	add	r4, sp, #8
 8003346:	f107 0318 	add.w	r3, r7, #24
 800334a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003350:	466a      	mov	r2, sp
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800335a:	e882 0003 	stmia.w	r2, {r0, r1}
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	cb0c      	ldmia	r3, {r2, r3}
 8003364:	2108      	movs	r1, #8
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fdc1 	bl	8003eee <encodeSignals>
}
 800336c:	bf00      	nop
 800336e:	378c      	adds	r7, #140	@ 0x8c
 8003370:	46bd      	mov	sp, r7
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	2000056c 	.word	0x2000056c
 8003378:	00000000 	.word	0x00000000

0800337c <populateBMS_Status>:

void populateBMS_Status(uint8_t *data)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b0b9      	sub	sp, #228	@ 0xe4
 8003380:	af1a      	add	r7, sp, #104	@ 0x68
 8003382:	6078      	str	r0, [r7, #4]
	RawCanSignal signals[7];

	populateRawMessage(&signals[0], 0, 8, 1, 0);		 // BMS State
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80034d4 <populateBMS_Status+0x158>
 800338c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003390:	2108      	movs	r1, #8
 8003392:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 80034d4 <populateBMS_Status+0x158>
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fd4a 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[1], bms_can.mainboard->imd_status, 8, 1, 0);		 // IMD State
 800339c:	4b4e      	ldr	r3, [pc, #312]	@ (80034d8 <populateBMS_Status+0x15c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f893 3252 	ldrb.w	r3, [r3, #594]	@ 0x252
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	3310      	adds	r3, #16
 80033b2:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80034d4 <populateBMS_Status+0x158>
 80033b6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80033ba:	2108      	movs	r1, #8
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fd35 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[2], bms_can.mainboard->adbms.max_temp, 8, 1, -40);   // max cell temp
 80033c6:	4b44      	ldr	r3, [pc, #272]	@ (80034d8 <populateBMS_Status+0x15c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	3320      	adds	r3, #32
 80033d4:	ed9f 1a41 	vldr	s2, [pc, #260]	@ 80034dc <populateBMS_Status+0x160>
 80033d8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80033dc:	2108      	movs	r1, #8
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd24 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[3], bms_can.mainboard->adbms.min_temp, 8, 1, -40);   // min cell temp
 80033e8:	4b3b      	ldr	r3, [pc, #236]	@ (80034d8 <populateBMS_Status+0x15c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	3330      	adds	r3, #48	@ 0x30
 80033f6:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 80034dc <populateBMS_Status+0x160>
 80033fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80033fe:	2108      	movs	r1, #8
 8003400:	eeb0 0a67 	vmov.f32	s0, s15
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fd13 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[4], bms_can.mainboard->adbms.max_v, 8, 0.012, 2);	 // max cell voltage
 800340a:	4b33      	ldr	r3, [pc, #204]	@ (80034d8 <populateBMS_Status+0x15c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	edd3 7a80 	vldr	s15, [r3, #512]	@ 0x200
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	3340      	adds	r3, #64	@ 0x40
 8003418:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800341c:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80034e0 <populateBMS_Status+0x164>
 8003420:	2108      	movs	r1, #8
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd02 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[5], bms_can.mainboard->adbms.min_v, 8, 0.012, 2);	 // min cell voltage
 800342c:	4b2a      	ldr	r3, [pc, #168]	@ (80034d8 <populateBMS_Status+0x15c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	3350      	adds	r3, #80	@ 0x50
 800343a:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800343e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80034e0 <populateBMS_Status+0x164>
 8003442:	2108      	movs	r1, #8
 8003444:	eeb0 0a67 	vmov.f32	s0, s15
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fcf1 	bl	8003e30 <populateRawMessage>
	populateRawMessage(&signals[6], 0, 8, 0.5, 0);									 // BMS SOC
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	3360      	adds	r3, #96	@ 0x60
 8003454:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80034d4 <populateBMS_Status+0x158>
 8003458:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800345c:	2108      	movs	r1, #8
 800345e:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80034d4 <populateBMS_Status+0x158>
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fce4 	bl	8003e30 <populateRawMessage>
	encodeSignals(data, 7, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6]);
 8003468:	ac16      	add	r4, sp, #88	@ 0x58
 800346a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800346e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003474:	ac12      	add	r4, sp, #72	@ 0x48
 8003476:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800347a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003480:	ac0e      	add	r4, sp, #56	@ 0x38
 8003482:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800348c:	ac0a      	add	r4, sp, #40	@ 0x28
 800348e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003498:	ac06      	add	r4, sp, #24
 800349a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800349e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034a4:	ac02      	add	r4, sp, #8
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034b0:	466a      	mov	r2, sp
 80034b2:	f107 0310 	add.w	r3, r7, #16
 80034b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034ba:	e882 0003 	stmia.w	r2, {r0, r1}
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	cb0c      	ldmia	r3, {r2, r3}
 80034c4:	2107      	movs	r1, #7
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fd11 	bl	8003eee <encodeSignals>
}
 80034cc:	bf00      	nop
 80034ce:	377c      	adds	r7, #124	@ 0x7c
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	00000000 	.word	0x00000000
 80034d8:	2000056c 	.word	0x2000056c
 80034dc:	c2200000 	.word	0xc2200000
 80034e0:	3c449ba6 	.word	0x3c449ba6

080034e4 <populateBMS_VoltageMessages>:


void populateBMS_VoltageMessages(uint8_t *data, int volt_msg_num)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b0c3      	sub	sp, #268	@ 0x10c
 80034e8:	af1e      	add	r7, sp, #120	@ 0x78
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034f4:	e022      	b.n	800353c <populateBMS_VoltageMessages+0x58>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.voltages[volt_msg_num * NUM_DATA_CAN_VOLTAGES_PER_MSG + i], 8, 0.012, 2);
 80034f6:	f107 0208 	add.w	r2, r7, #8
 80034fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	18d0      	adds	r0, r2, r3
 8003502:	4b35      	ldr	r3, [pc, #212]	@ (80035d8 <populateBMS_VoltageMessages+0xf4>)
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9a      	subs	r2, r3, r2
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003512:	4413      	add	r3, r2
 8003514:	3352      	adds	r3, #82	@ 0x52
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3304      	adds	r3, #4
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8003524:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80035dc <populateBMS_VoltageMessages+0xf8>
 8003528:	2108      	movs	r1, #8
 800352a:	eeb0 0a67 	vmov.f32	s0, s15
 800352e:	f000 fc7f 	bl	8003e30 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_VOLTAGES_PER_MSG; i++){
 8003532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003536:	3301      	adds	r3, #1
 8003538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	2b06      	cmp	r3, #6
 8003542:	ddd8      	ble.n	80034f6 <populateBMS_VoltageMessages+0x12>
	}
	populateRawMessage(&signals[7], 0, 8, 0.004, 0);	// OCV msg that is legacy from BQ code and only included for backwards compatibility
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	3370      	adds	r3, #112	@ 0x70
 800354a:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 80035e0 <populateBMS_VoltageMessages+0xfc>
 800354e:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80035e4 <populateBMS_VoltageMessages+0x100>
 8003552:	2108      	movs	r1, #8
 8003554:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80035e0 <populateBMS_VoltageMessages+0xfc>
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fc69 	bl	8003e30 <populateRawMessage>
	// num_per_msg + 1 because includes the added OCV msg
	encodeSignals(data, NUM_DATA_CAN_VOLTAGES_PER_MSG+1, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 800355e:	ac1a      	add	r4, sp, #104	@ 0x68
 8003560:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800356a:	ac16      	add	r4, sp, #88	@ 0x58
 800356c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003576:	ac12      	add	r4, sp, #72	@ 0x48
 8003578:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800357c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800357e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003582:	ac0e      	add	r4, sp, #56	@ 0x38
 8003584:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800358a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800358e:	ac0a      	add	r4, sp, #40	@ 0x28
 8003590:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800359a:	ac06      	add	r4, sp, #24
 800359c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035a6:	ac02      	add	r4, sp, #8
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035b2:	466a      	mov	r2, sp
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	cb0c      	ldmia	r3, {r2, r3}
 80035c6:	2108      	movs	r1, #8
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fc90 	bl	8003eee <encodeSignals>
}
 80035ce:	bf00      	nop
 80035d0:	3794      	adds	r7, #148	@ 0x94
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000056c 	.word	0x2000056c
 80035dc:	3c449ba6 	.word	0x3c449ba6
 80035e0:	00000000 	.word	0x00000000
 80035e4:	3b83126f 	.word	0x3b83126f

080035e8 <populateBMS_TemperatureMessages>:

void populateBMS_TemperatureMessages(uint8_t *data, int temp_num)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b0c3      	sub	sp, #268	@ 0x10c
 80035ec:	af1e      	add	r7, sp, #120	@ 0x78
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	RawCanSignal signals[8];
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035f8:	e020      	b.n	800363c <populateBMS_TemperatureMessages+0x54>
		populateRawMessage(&signals[i], bms_can.mainboard->adbms.temperatures[temp_num * NUM_DATA_CAN_TEMPS_PER_MSG + i], 8, 1, -40);
 80035fa:	f107 0208 	add.w	r2, r7, #8
 80035fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	18d0      	adds	r0, r2, r3
 8003606:	4b2d      	ldr	r3, [pc, #180]	@ (80036bc <populateBMS_TemperatureMessages+0xd4>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	00d9      	lsls	r1, r3, #3
 800360e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003612:	440b      	add	r3, r1
 8003614:	336e      	adds	r3, #110	@ 0x6e
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 80036c0 <populateBMS_TemperatureMessages+0xd8>
 8003624:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003628:	2108      	movs	r1, #8
 800362a:	eeb0 0a67 	vmov.f32	s0, s15
 800362e:	f000 fbff 	bl	8003e30 <populateRawMessage>
	for(int i = 0; i < NUM_DATA_CAN_TEMPS_PER_MSG; i++){
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003636:	3301      	adds	r3, #1
 8003638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800363c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003640:	2b07      	cmp	r3, #7
 8003642:	ddda      	ble.n	80035fa <populateBMS_TemperatureMessages+0x12>
	}
	encodeSignals(data, NUM_DATA_CAN_TEMPS_PER_MSG, signals[0], signals[1], signals[2], signals[3], signals[4], signals[5], signals[6], signals[7]);
 8003644:	ac1a      	add	r4, sp, #104	@ 0x68
 8003646:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800364a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800364c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003650:	ac16      	add	r4, sp, #88	@ 0x58
 8003652:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800365c:	ac12      	add	r4, sp, #72	@ 0x48
 800365e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003668:	ac0e      	add	r4, sp, #56	@ 0x38
 800366a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800366e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003674:	ac0a      	add	r4, sp, #40	@ 0x28
 8003676:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800367a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800367c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003680:	ac06      	add	r4, sp, #24
 8003682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800368c:	ac02      	add	r4, sp, #8
 800368e:	f107 0318 	add.w	r3, r7, #24
 8003692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003698:	466a      	mov	r2, sp
 800369a:	f107 0310 	add.w	r3, r7, #16
 800369e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	cb0c      	ldmia	r3, {r2, r3}
 80036ac:	2108      	movs	r1, #8
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fc1d 	bl	8003eee <encodeSignals>
}
 80036b4:	bf00      	nop
 80036b6:	3794      	adds	r7, #148	@ 0x94
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000056c 	.word	0x2000056c
 80036c0:	c2200000 	.word	0xc2200000
 80036c4:	00000000 	.word	0x00000000

080036c8 <getCurrent>:
#include "current_driver.h"

float getCurrent(ADC_HandleTypeDef *hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    // Start ADC and poll it
	HAL_ADC_Start(hadc);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 f9ab 	bl	8004a2c <HAL_ADC_Start>
	HAL_StatusTypeDef adc_poll_status = HAL_ADC_PollForConversion(hadc, 5000);
 80036d6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 faab 	bl	8004c36 <HAL_ADC_PollForConversion>
 80036e0:	4603      	mov	r3, r0
 80036e2:	77fb      	strb	r3, [r7, #31]

    // lazy handling of adc polling
    if(adc_poll_status != HAL_OK){
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <getCurrent+0x32>
    	HAL_ADC_Stop(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f001 fa70 	bl	8004bd0 <HAL_ADC_Stop>
    	printf("current is not OK\n");
 80036f0:	482b      	ldr	r0, [pc, #172]	@ (80037a0 <getCurrent+0xd8>)
 80036f2:	f00a fc69 	bl	800dfc8 <puts>
        return -1;
 80036f6:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <getCurrent+0xdc>)
 80036f8:	e03d      	b.n	8003776 <getCurrent+0xae>
    }

    // take 12 bit adc and convert into volts
    float raw_current = ((float) HAL_ADC_GetValue(hadc));
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 fb26 	bl	8004d4c <HAL_ADC_GetValue>
 8003700:	ee07 0a90 	vmov	s15, r0
 8003704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003708:	edc7 7a06 	vstr	s15, [r7, #24]
	float current_adc_voltage = raw_current*3.3/4095;
 800370c:	69b8      	ldr	r0, [r7, #24]
 800370e:	f7fc ff1b 	bl	8000548 <__aeabi_f2d>
 8003712:	a31d      	add	r3, pc, #116	@ (adr r3, 8003788 <getCurrent+0xc0>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc ff6e 	bl	80005f8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	a31a      	add	r3, pc, #104	@ (adr r3, 8003790 <getCurrent+0xc8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fd f88f 	bl	800084c <__aeabi_ddiv>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f7fd fa37 	bl	8000ba8 <__aeabi_d2f>
 800373a:	4603      	mov	r3, r0
 800373c:	617b      	str	r3, [r7, #20]
	// i = v/r
	// Offset of 1.25V so can read both positive and negative current
	// where negative current is charging and positive is discharging
	// (adc_voltage - 1.65V) / (diff-op-amp gain of 2 * iso amp fixed gain of 41 (AMC3302DWE))
	// shunt resistance = 100u Ohms (SH6918F500BHEP)
	float current_adc_offset = current_adc_voltage - 1.25;
 800373e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003742:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8003746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800374a:	edc7 7a04 	vstr	s15, [r7, #16]
	float current = current_adc_offset/(2*41*0.0001);
 800374e:	6938      	ldr	r0, [r7, #16]
 8003750:	f7fc fefa 	bl	8000548 <__aeabi_f2d>
 8003754:	a310      	add	r3, pc, #64	@ (adr r3, 8003798 <getCurrent+0xd0>)
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f7fd f877 	bl	800084c <__aeabi_ddiv>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd fa1f 	bl	8000ba8 <__aeabi_d2f>
 800376a:	4603      	mov	r3, r0
 800376c:	60fb      	str	r3, [r7, #12]

    // Stop ADC
	HAL_ADC_Stop(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 fa2e 	bl	8004bd0 <HAL_ADC_Stop>
    return current;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	f3af 8000 	nop.w
 8003788:	66666666 	.word	0x66666666
 800378c:	400a6666 	.word	0x400a6666
 8003790:	00000000 	.word	0x00000000
 8003794:	40affe00 	.word	0x40affe00
 8003798:	5e9e1b09 	.word	0x5e9e1b09
 800379c:	3f80cb29 	.word	0x3f80cb29
 80037a0:	08010798 	.word	0x08010798
 80037a4:	bf800000 	.word	0xbf800000

080037a8 <getCurrentOffset>:


float getCurrentOffset(ADC_HandleTypeDef *hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	float total_current = 0;
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	e00d      	b.n	80037d8 <getCurrentOffset+0x30>
		total_current += getCurrent(hadc);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff83 	bl	80036c8 <getCurrent>
 80037c2:	eeb0 7a40 	vmov.f32	s14, s0
 80037c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ce:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUM_CURRENT_OFFSET_CYCLES; i++){
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3301      	adds	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	ddee      	ble.n	80037bc <getCurrentOffset+0x14>
	}
	return total_current / NUM_CURRENT_OFFSET_CYCLES;
 80037de:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037ea:	eef0 7a66 	vmov.f32	s15, s13
}
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003800:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003810:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003820:	e000      	b.n	8003824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003824:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f9      	beq.n	8003822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800382e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e009      	b.n	800386c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	60ba      	str	r2, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ffc9 	bl	80037f8 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	dbf1      	blt.n	8003858 <_write+0x12>
	}
	return len;
 8003874:	687b      	ldr	r3, [r7, #4]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003886:	f000 fff7 	bl	8004878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800388a:	f000 f837 	bl	80038fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800388e:	f000 fa23 	bl	8003cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003892:	f000 f9f9 	bl	8003c88 <MX_DMA_Init>
  MX_ADC1_Init();
 8003896:	f000 f89b 	bl	80039d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800389a:	f000 f9a9 	bl	8003bf0 <MX_TIM2_Init>
  MX_CAN1_Init();
 800389e:	f000 f8e9 	bl	8003a74 <MX_CAN1_Init>
  MX_CAN2_Init();
 80038a2:	f000 f939 	bl	8003b18 <MX_CAN2_Init>
  MX_SPI1_Init();
 80038a6:	f000 f96d 	bl	8003b84 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80038aa:	f009 f85b 	bl	800c964 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 80038ae:	2005      	movs	r0, #5
 80038b0:	f001 f854 	bl	800495c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80038b4:	2201      	movs	r2, #1
 80038b6:	2120      	movs	r1, #32
 80038b8:	4809      	ldr	r0, [pc, #36]	@ (80038e0 <main+0x60>)
 80038ba:	f002 ff73 	bl	80067a4 <HAL_GPIO_WritePin>

  // init mainboard
  bms_mainbaord_setup(&hspi1, GPIOA, GPIO_PIN_4, &hadc1, &hcan1, &hcan2);
 80038be:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <main+0x64>)
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <main+0x68>)
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <main+0x6c>)
 80038c8:	2210      	movs	r2, #16
 80038ca:	4909      	ldr	r1, [pc, #36]	@ (80038f0 <main+0x70>)
 80038cc:	4809      	ldr	r0, [pc, #36]	@ (80038f4 <main+0x74>)
 80038ce:	f7ff f92b 	bl	8002b28 <bms_mainbaord_setup>

  printf("Board Starting...\n");
 80038d2:	4809      	ldr	r0, [pc, #36]	@ (80038f8 <main+0x78>)
 80038d4:	f00a fb78 	bl	800dfc8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    tick_mainboard_timers();
 80038d8:	f7ff f9a6 	bl	8002c28 <tick_mainboard_timers>
 80038dc:	e7fc      	b.n	80038d8 <main+0x58>
 80038de:	bf00      	nop
 80038e0:	40020400 	.word	0x40020400
 80038e4:	200006c8 	.word	0x200006c8
 80038e8:	200006a0 	.word	0x200006a0
 80038ec:	20000658 	.word	0x20000658
 80038f0:	40020000 	.word	0x40020000
 80038f4:	200006f0 	.word	0x200006f0
 80038f8:	080107ac 	.word	0x080107ac

080038fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b094      	sub	sp, #80	@ 0x50
 8003900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003902:	f107 0320 	add.w	r3, r7, #32
 8003906:	2230      	movs	r2, #48	@ 0x30
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f00a fc3c 	bl	800e188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <SystemClock_Config+0xcc>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	4a27      	ldr	r2, [pc, #156]	@ (80039c8 <SystemClock_Config+0xcc>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <SystemClock_Config+0xcc>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800393c:	2300      	movs	r3, #0
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <SystemClock_Config+0xd0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <SystemClock_Config+0xd0>)
 8003946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b1f      	ldr	r3, [pc, #124]	@ (80039cc <SystemClock_Config+0xd0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003958:	2301      	movs	r3, #1
 800395a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800395c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003962:	2302      	movs	r3, #2
 8003964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800396c:	2304      	movs	r3, #4
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003970:	23c0      	movs	r3, #192	@ 0xc0
 8003972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003974:	2306      	movs	r3, #6
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003978:	2308      	movs	r3, #8
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800397c:	f107 0320 	add.w	r3, r7, #32
 8003980:	4618      	mov	r0, r3
 8003982:	f004 f97b 	bl	8007c7c <HAL_RCC_OscConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800398c:	f000 fa4a 	bl	8003e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003990:	230f      	movs	r3, #15
 8003992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003994:	2302      	movs	r3, #2
 8003996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800399c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 fbdc 	bl	800816c <HAL_RCC_ClockConfig>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039ba:	f000 fa33 	bl	8003e24 <Error_Handler>
  }
}
 80039be:	bf00      	nop
 80039c0:	3750      	adds	r7, #80	@ 0x50
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40007000 	.word	0x40007000

080039d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039d6:	463b      	mov	r3, r7
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039e2:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <MX_ADC1_Init+0x98>)
 80039e4:	4a21      	ldr	r2, [pc, #132]	@ (8003a6c <MX_ADC1_Init+0x9c>)
 80039e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a68 <MX_ADC1_Init+0x98>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <MX_ADC1_Init+0x98>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80039f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <MX_ADC1_Init+0x98>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <MX_ADC1_Init+0x98>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a08:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a10:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <MX_ADC1_Init+0xa0>)
 8003a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a14:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003a1a:	4b13      	ldr	r3, [pc, #76]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a2e:	480e      	ldr	r0, [pc, #56]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a30:	f000 ffb8 	bl	80049a4 <HAL_ADC_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003a3a:	f000 f9f3 	bl	8003e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4806      	ldr	r0, [pc, #24]	@ (8003a68 <MX_ADC1_Init+0x98>)
 8003a50:	f001 f98a 	bl	8004d68 <HAL_ADC_ConfigChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003a5a:	f000 f9e3 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000658 	.word	0x20000658
 8003a6c:	40012000 	.word	0x40012000
 8003a70:	0f000001 	.word	0x0f000001

08003a74 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	@ 0x28
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a7c:	4a25      	ldr	r2, [pc, #148]	@ (8003b14 <MX_CAN1_Init+0xa0>)
 8003a7e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003a80:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a82:	2210      	movs	r2, #16
 8003a84:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003a86:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a8c:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003a92:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a98:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003ab2:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003abe:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ac4:	4812      	ldr	r0, [pc, #72]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003ac6:	f001 fb6d 	bl	80051a4 <HAL_CAN_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003ad0:	f000 f9a8 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8003ad8:	2312      	movs	r3, #18
 8003ada:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8003af8:	2314      	movs	r3, #20
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8003afc:	463b      	mov	r3, r7
 8003afe:	4619      	mov	r1, r3
 8003b00:	4803      	ldr	r0, [pc, #12]	@ (8003b10 <MX_CAN1_Init+0x9c>)
 8003b02:	f001 fc4b 	bl	800539c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003b06:	bf00      	nop
 8003b08:	3728      	adds	r7, #40	@ 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200006a0 	.word	0x200006a0
 8003b14:	40006400 	.word	0x40006400

08003b18 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b1e:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <MX_CAN2_Init+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b24:	2210      	movs	r2, #16
 8003b26:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003b28:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b3a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003b42:	4b0e      	ldr	r3, [pc, #56]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003b66:	4805      	ldr	r0, [pc, #20]	@ (8003b7c <MX_CAN2_Init+0x64>)
 8003b68:	f001 fb1c 	bl	80051a4 <HAL_CAN_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8003b72:	f000 f957 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200006c8 	.word	0x200006c8
 8003b80:	40006800 	.word	0x40006800

08003b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b88:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003b8a:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <MX_SPI1_Init+0x68>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003b90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bb8:	2218      	movs	r2, #24
 8003bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc8:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bd4:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <MX_SPI1_Init+0x64>)
 8003bd6:	f004 fcc1 	bl	800855c <HAL_SPI_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003be0:	f000 f920 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200006f0 	.word	0x200006f0
 8003bec:	40013000 	.word	0x40013000

08003bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c04:	463b      	mov	r3, r7
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c14:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003c20:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c28:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c34:	4813      	ldr	r0, [pc, #76]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c36:	f005 f8e3 	bl	8008e00 <HAL_TIM_Base_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003c40:	f000 f8f0 	bl	8003e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480c      	ldr	r0, [pc, #48]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c52:	f005 f924 	bl	8008e9e <HAL_TIM_ConfigClockSource>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003c5c:	f000 f8e2 	bl	8003e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c68:	463b      	mov	r3, r7
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4805      	ldr	r0, [pc, #20]	@ (8003c84 <MX_TIM2_Init+0x94>)
 8003c6e:	f005 fb23 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003c78:	f000 f8d4 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000808 	.word	0x20000808

08003c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <MX_DMA_Init+0x4c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <MX_DMA_Init+0x4c>)
 8003c98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <MX_DMA_Init+0x4c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	2038      	movs	r0, #56	@ 0x38
 8003cb0:	f002 f8a3 	bl	8005dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003cb4:	2038      	movs	r0, #56	@ 0x38
 8003cb6:	f002 f8bc 	bl	8005e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	203b      	movs	r0, #59	@ 0x3b
 8003cc0:	f002 f89b 	bl	8005dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003cc4:	203b      	movs	r0, #59	@ 0x3b
 8003cc6:	f002 f8b4 	bl	8005e32 <HAL_NVIC_EnableIRQ>

}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	@ 0x28
 8003cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	4b48      	ldr	r3, [pc, #288]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4a47      	ldr	r2, [pc, #284]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	4b45      	ldr	r3, [pc, #276]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	4b41      	ldr	r3, [pc, #260]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	4a40      	ldr	r2, [pc, #256]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	4a39      	ldr	r2, [pc, #228]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d52:	4b30      	ldr	r3, [pc, #192]	@ (8003e14 <MX_GPIO_Init+0x13c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8003d64:	482c      	ldr	r0, [pc, #176]	@ (8003e18 <MX_GPIO_Init+0x140>)
 8003d66:	f002 fd1d 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d70:	482a      	ldr	r0, [pc, #168]	@ (8003e1c <MX_GPIO_Init+0x144>)
 8003d72:	f002 fd17 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 8003d76:	2200      	movs	r2, #0
 8003d78:	21e0      	movs	r1, #224	@ 0xe0
 8003d7a:	4829      	ldr	r0, [pc, #164]	@ (8003e20 <MX_GPIO_Init+0x148>)
 8003d7c:	f002 fd12 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 8003d80:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8003d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	4619      	mov	r1, r3
 8003d98:	481f      	ldr	r0, [pc, #124]	@ (8003e18 <MX_GPIO_Init+0x140>)
 8003d9a:	f002 fb4f 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 8003d9e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8003da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4619      	mov	r1, r3
 8003db2:	481b      	ldr	r0, [pc, #108]	@ (8003e20 <MX_GPIO_Init+0x148>)
 8003db4:	f002 fb42 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8003db8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4813      	ldr	r0, [pc, #76]	@ (8003e1c <MX_GPIO_Init+0x144>)
 8003dce:	f002 fb35 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 8003dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2300      	movs	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4619      	mov	r1, r3
 8003dea:	480c      	ldr	r0, [pc, #48]	@ (8003e1c <MX_GPIO_Init+0x144>)
 8003dec:	f002 fb26 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 8003df0:	23e0      	movs	r3, #224	@ 0xe0
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	4806      	ldr	r0, [pc, #24]	@ (8003e20 <MX_GPIO_Init+0x148>)
 8003e08:	f002 fb18 	bl	800643c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003e0c:	bf00      	nop
 8003e0e:	3728      	adds	r7, #40	@ 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020000 	.word	0x40020000
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020400 	.word	0x40020400

08003e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <Error_Handler+0x8>

08003e30 <populateRawMessage>:
#include "nfr_can_driver.h"

// Populates a RawCanSignal with data, given a start bit, lenght, factor, and offset
void populateRawMessage(RawCanSignal *signal, float raw_data, int length, float factor, float offset)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6178      	str	r0, [r7, #20]
 8003e38:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e3c:	60f9      	str	r1, [r7, #12]
 8003e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e42:	ed87 1a01 	vstr	s2, [r7, #4]
    // offset and factor data
    uint64_t raw_value = (uint64_t)((raw_data - offset) / factor);
 8003e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e5a:	ee16 0a90 	vmov	r0, s13
 8003e5e:	f7fc ff0b 	bl	8000c78 <__aeabi_f2ulz>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // copy data into RawCanSignal
    memcpy(&(signal->raw_data), &raw_value, sizeof(raw_value));
 8003e6a:	6979      	ldr	r1, [r7, #20]
 8003e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e70:	600a      	str	r2, [r1, #0]
 8003e72:	604b      	str	r3, [r1, #4]
    signal->length = length;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	609a      	str	r2, [r3, #8]

}
 8003e7a:	bf00      	nop
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <generateMask>:
    printf("\n");
}

// Generates a mask for given position and length
uint64_t generateMask(int pos, int len)
{
 8003e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
    return (0xFFFFFFFFFFFFFFFFull << (64 - len) >> (64 - len - pos));
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	f1c1 0640 	rsb	r6, r1, #64	@ 0x40
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9a:	f1a6 0e20 	sub.w	lr, r6, #32
 8003e9e:	f1c6 0c20 	rsb	ip, r6, #32
 8003ea2:	fa01 f306 	lsl.w	r3, r1, r6
 8003ea6:	fa00 fe0e 	lsl.w	lr, r0, lr
 8003eaa:	ea43 030e 	orr.w	r3, r3, lr
 8003eae:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003eb2:	ea43 030c 	orr.w	r3, r3, ip
 8003eb6:	fa00 f206 	lsl.w	r2, r0, r6
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	f1c1 0040 	rsb	r0, r1, #64	@ 0x40
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	1a41      	subs	r1, r0, r1
 8003ec4:	f1c1 0620 	rsb	r6, r1, #32
 8003ec8:	f1a1 0020 	sub.w	r0, r1, #32
 8003ecc:	fa22 f401 	lsr.w	r4, r2, r1
 8003ed0:	fa03 f606 	lsl.w	r6, r3, r6
 8003ed4:	4334      	orrs	r4, r6
 8003ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8003eda:	4304      	orrs	r4, r0
 8003edc:	fa23 f501 	lsr.w	r5, r3, r1
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
}
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eee <encodeSignals>:

// Encodes a CAN msg with number of sub-messages
void encodeSignals(uint8_t *data, int count, ...)
{
 8003eee:	b40e      	push	{r1, r2, r3}
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b092      	sub	sp, #72	@ 0x48
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
    va_list args;
    va_start(args, count);
 8003efa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t buffer = 0;
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    int len_ptr = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f14:	e03c      	b.n	8003f90 <encodeSignals+0xa2>
    {
        RawCanSignal temp = va_arg(args, RawCanSignal);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	3307      	adds	r3, #7
 8003f1a:	f023 0307 	bic.w	r3, r3, #7
 8003f1e:	f103 0210 	add.w	r2, r3, #16
 8003f22:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f24:	f107 0610 	add.w	r6, r7, #16
 8003f28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f2a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // shift data over and apply mask then add to buffer
        uint64_t mask = generateMask(len_ptr, temp.length);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4619      	mov	r1, r3
 8003f32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003f34:	f7ff ffa5 	bl	8003e82 <generateMask>
 8003f38:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
        buffer |= (temp.raw_data.as_uint64 << len_ptr) & mask;
 8003f3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f42:	f1a1 0620 	sub.w	r6, r1, #32
 8003f46:	f1c1 0020 	rsb	r0, r1, #32
 8003f4a:	fa03 f501 	lsl.w	r5, r3, r1
 8003f4e:	fa02 f606 	lsl.w	r6, r2, r6
 8003f52:	4335      	orrs	r5, r6
 8003f54:	fa22 f000 	lsr.w	r0, r2, r0
 8003f58:	4305      	orrs	r5, r0
 8003f5a:	fa02 f401 	lsl.w	r4, r2, r1
 8003f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f62:	ea04 0a02 	and.w	sl, r4, r2
 8003f66:	ea05 0b03 	and.w	fp, r5, r3
 8003f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f6e:	ea42 010a 	orr.w	r1, r2, sl
 8003f72:	6039      	str	r1, [r7, #0]
 8003f74:	ea43 030b 	orr.w	r3, r3, fp
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // update length
        len_ptr += temp.length;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f86:	4413      	add	r3, r2
 8003f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (size_t i = 0; i < count; i++)
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3be      	bcc.n	8003f16 <encodeSignals+0x28>
    }

    // fill in msg
    for (size_t i = 0; i < 8; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f9c:	e01c      	b.n	8003fd8 <encodeSignals+0xea>
    {
        data[i] = (buffer >> (i * 8)) & 0xFF;
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	00d9      	lsls	r1, r3, #3
 8003fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fa6:	f1c1 0420 	rsb	r4, r1, #32
 8003faa:	f1a1 0020 	sub.w	r0, r1, #32
 8003fae:	fa22 f801 	lsr.w	r8, r2, r1
 8003fb2:	fa03 f404 	lsl.w	r4, r3, r4
 8003fb6:	ea48 0804 	orr.w	r8, r8, r4
 8003fba:	fa23 f000 	lsr.w	r0, r3, r0
 8003fbe:	ea48 0800 	orr.w	r8, r8, r0
 8003fc2:	fa23 f901 	lsr.w	r9, r3, r1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	4413      	add	r3, r2
 8003fcc:	fa5f f288 	uxtb.w	r2, r8
 8003fd0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; i++)
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	2b07      	cmp	r3, #7
 8003fdc:	d9df      	bls.n	8003f9e <encodeSignals+0xb0>
    }
}
 8003fde:	bf00      	nop
 8003fe0:	bf00      	nop
 8003fe2:	3748      	adds	r7, #72	@ 0x48
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	b003      	add	sp, #12
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_MspInit+0x4c>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800403c <HAL_MspInit+0x4c>)
 8004000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004004:	6453      	str	r3, [r2, #68]	@ 0x44
 8004006:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <HAL_MspInit+0x4c>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4b09      	ldr	r3, [pc, #36]	@ (800403c <HAL_MspInit+0x4c>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	4a08      	ldr	r2, [pc, #32]	@ (800403c <HAL_MspInit+0x4c>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	@ 0x40
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <HAL_MspInit+0x4c>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800

08004040 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	@ 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a17      	ldr	r2, [pc, #92]	@ (80040bc <HAL_ADC_MspInit+0x7c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d127      	bne.n	80040b2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6453      	str	r3, [r2, #68]	@ 0x44
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4a0e      	ldr	r2, [pc, #56]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6313      	str	r3, [r2, #48]	@ 0x30
 800408e:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <HAL_ADC_MspInit+0x80>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 800409a:	2304      	movs	r3, #4
 800409c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800409e:	2303      	movs	r3, #3
 80040a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	4619      	mov	r1, r3
 80040ac:	4805      	ldr	r0, [pc, #20]	@ (80040c4 <HAL_ADC_MspInit+0x84>)
 80040ae:	f002 f9c5 	bl	800643c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80040b2:	bf00      	nop
 80040b4:	3728      	adds	r7, #40	@ 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40012000 	.word	0x40012000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020000 	.word	0x40020000

080040c8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08c      	sub	sp, #48	@ 0x30
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d0:	f107 031c 	add.w	r3, r7, #28
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a47      	ldr	r2, [pc, #284]	@ (8004204 <HAL_CAN_MspInit+0x13c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d13e      	bne.n	8004168 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	4a45      	ldr	r2, [pc, #276]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 80040f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80040f4:	4b44      	ldr	r3, [pc, #272]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	4b42      	ldr	r3, [pc, #264]	@ (800420c <HAL_CAN_MspInit+0x144>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	4a41      	ldr	r2, [pc, #260]	@ (800420c <HAL_CAN_MspInit+0x144>)
 8004106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800410a:	6413      	str	r3, [r2, #64]	@ 0x40
 800410c:	4b3f      	ldr	r3, [pc, #252]	@ (800420c <HAL_CAN_MspInit+0x144>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_CAN_MspInit+0x144>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	4a3a      	ldr	r2, [pc, #232]	@ (800420c <HAL_CAN_MspInit+0x144>)
 8004122:	f043 0302 	orr.w	r3, r3, #2
 8004126:	6313      	str	r3, [r2, #48]	@ 0x30
 8004128:	4b38      	ldr	r3, [pc, #224]	@ (800420c <HAL_CAN_MspInit+0x144>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004134:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413a:	2302      	movs	r3, #2
 800413c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004142:	2303      	movs	r3, #3
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004146:	2309      	movs	r3, #9
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414a:	f107 031c 	add.w	r3, r7, #28
 800414e:	4619      	mov	r1, r3
 8004150:	482f      	ldr	r0, [pc, #188]	@ (8004210 <HAL_CAN_MspInit+0x148>)
 8004152:	f002 f973 	bl	800643c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004156:	2200      	movs	r2, #0
 8004158:	2100      	movs	r1, #0
 800415a:	2014      	movs	r0, #20
 800415c:	f001 fe4d 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004160:	2014      	movs	r0, #20
 8004162:	f001 fe66 	bl	8005e32 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004166:	e048      	b.n	80041fa <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a29      	ldr	r2, [pc, #164]	@ (8004214 <HAL_CAN_MspInit+0x14c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d143      	bne.n	80041fa <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_CAN_MspInit+0x144>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a24      	ldr	r2, [pc, #144]	@ (800420c <HAL_CAN_MspInit+0x144>)
 800417c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_CAN_MspInit+0x144>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 8004196:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_CAN_MspInit+0x140>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10d      	bne.n	80041bc <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	4b19      	ldr	r3, [pc, #100]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	4a18      	ldr	r2, [pc, #96]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	4a11      	ldr	r2, [pc, #68]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80041cc:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <HAL_CAN_MspInit+0x144>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80041d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	2303      	movs	r3, #3
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80041ea:	2309      	movs	r3, #9
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ee:	f107 031c 	add.w	r3, r7, #28
 80041f2:	4619      	mov	r1, r3
 80041f4:	4806      	ldr	r0, [pc, #24]	@ (8004210 <HAL_CAN_MspInit+0x148>)
 80041f6:	f002 f921 	bl	800643c <HAL_GPIO_Init>
}
 80041fa:	bf00      	nop
 80041fc:	3730      	adds	r7, #48	@ 0x30
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40006400 	.word	0x40006400
 8004208:	20000850 	.word	0x20000850
 800420c:	40023800 	.word	0x40023800
 8004210:	40020400 	.word	0x40020400
 8004214:	40006800 	.word	0x40006800

08004218 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a48      	ldr	r2, [pc, #288]	@ (8004358 <HAL_SPI_MspInit+0x140>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f040 808a 	bne.w	8004350 <HAL_SPI_MspInit+0x138>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	4b46      	ldr	r3, [pc, #280]	@ (800435c <HAL_SPI_MspInit+0x144>)
 8004242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004244:	4a45      	ldr	r2, [pc, #276]	@ (800435c <HAL_SPI_MspInit+0x144>)
 8004246:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800424a:	6453      	str	r3, [r2, #68]	@ 0x44
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_SPI_MspInit+0x144>)
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	4b3f      	ldr	r3, [pc, #252]	@ (800435c <HAL_SPI_MspInit+0x144>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	4a3e      	ldr	r2, [pc, #248]	@ (800435c <HAL_SPI_MspInit+0x144>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6313      	str	r3, [r2, #48]	@ 0x30
 8004268:	4b3c      	ldr	r3, [pc, #240]	@ (800435c <HAL_SPI_MspInit+0x144>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004274:	23e0      	movs	r3, #224	@ 0xe0
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004284:	2305      	movs	r3, #5
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	4834      	ldr	r0, [pc, #208]	@ (8004360 <HAL_SPI_MspInit+0x148>)
 8004290:	f002 f8d4 	bl	800643c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 8004296:	4a34      	ldr	r2, [pc, #208]	@ (8004368 <HAL_SPI_MspInit+0x150>)
 8004298:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800429a:	4b32      	ldr	r3, [pc, #200]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 800429c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80042a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042a2:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042bc:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80042c8:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042d0:	4b24      	ldr	r3, [pc, #144]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80042d6:	4823      	ldr	r0, [pc, #140]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042d8:	f001 fdc6 	bl	8005e68 <HAL_DMA_Init>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80042e2:	f7ff fd9f 	bl	8003e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80042ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004364 <HAL_SPI_MspInit+0x14c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <HAL_SPI_MspInit+0x154>)
 80042f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004370 <HAL_SPI_MspInit+0x158>)
 80042f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80042f8:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <HAL_SPI_MspInit+0x154>)
 80042fa:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80042fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004300:	4b1a      	ldr	r3, [pc, #104]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004306:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004308:	2200      	movs	r2, #0
 800430a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800430c:	4b17      	ldr	r3, [pc, #92]	@ (800436c <HAL_SPI_MspInit+0x154>)
 800430e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004312:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004314:	4b15      	ldr	r3, [pc, #84]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800431a:	4b14      	ldr	r3, [pc, #80]	@ (800436c <HAL_SPI_MspInit+0x154>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004326:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004328:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800432c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800432e:	4b0f      	ldr	r3, [pc, #60]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004330:	2200      	movs	r2, #0
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004334:	480d      	ldr	r0, [pc, #52]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004336:	f001 fd97 	bl	8005e68 <HAL_DMA_Init>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8004340:	f7ff fd70 	bl	8003e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a09      	ldr	r2, [pc, #36]	@ (800436c <HAL_SPI_MspInit+0x154>)
 8004348:	649a      	str	r2, [r3, #72]	@ 0x48
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <HAL_SPI_MspInit+0x154>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	@ 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40013000 	.word	0x40013000
 800435c:	40023800 	.word	0x40023800
 8004360:	40020000 	.word	0x40020000
 8004364:	20000748 	.word	0x20000748
 8004368:	40026410 	.word	0x40026410
 800436c:	200007a8 	.word	0x200007a8
 8004370:	40026458 	.word	0x40026458

08004374 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d10d      	bne.n	80043a2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_TIM_Base_MspInit+0x3c>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_TIM_Base_MspInit+0x3c>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6413      	str	r3, [r2, #64]	@ 0x40
 8004396:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_TIM_Base_MspInit+0x3c>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80043b8:	2200      	movs	r2, #0
 80043ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043be:	4802      	ldr	r0, [pc, #8]	@ (80043c8 <NMI_Handler+0x14>)
 80043c0:	f002 f9f0 	bl	80067a4 <HAL_GPIO_WritePin>
 80043c4:	e7f8      	b.n	80043b8 <NMI_Handler+0x4>
 80043c6:	bf00      	nop
 80043c8:	40020800 	.word	0x40020800

080043cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043d6:	4802      	ldr	r0, [pc, #8]	@ (80043e0 <HardFault_Handler+0x14>)
 80043d8:	f002 f9e4 	bl	80067a4 <HAL_GPIO_WritePin>
 80043dc:	e7f8      	b.n	80043d0 <HardFault_Handler+0x4>
 80043de:	bf00      	nop
 80043e0:	40020800 	.word	0x40020800

080043e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043ee:	4802      	ldr	r0, [pc, #8]	@ (80043f8 <MemManage_Handler+0x14>)
 80043f0:	f002 f9d8 	bl	80067a4 <HAL_GPIO_WritePin>
 80043f4:	e7f8      	b.n	80043e8 <MemManage_Handler+0x4>
 80043f6:	bf00      	nop
 80043f8:	40020800 	.word	0x40020800

080043fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004406:	4802      	ldr	r0, [pc, #8]	@ (8004410 <BusFault_Handler+0x14>)
 8004408:	f002 f9cc 	bl	80067a4 <HAL_GPIO_WritePin>
 800440c:	e7f8      	b.n	8004400 <BusFault_Handler+0x4>
 800440e:	bf00      	nop
 8004410:	40020800 	.word	0x40020800

08004414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004418:	2200      	movs	r2, #0
 800441a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800441e:	4802      	ldr	r0, [pc, #8]	@ (8004428 <UsageFault_Handler+0x14>)
 8004420:	f002 f9c0 	bl	80067a4 <HAL_GPIO_WritePin>
 8004424:	e7f8      	b.n	8004418 <UsageFault_Handler+0x4>
 8004426:	bf00      	nop
 8004428:	40020800 	.word	0x40020800

0800442c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800445a:	f000 fa5f 	bl	800491c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004468:	4802      	ldr	r0, [pc, #8]	@ (8004474 <CAN1_RX0_IRQHandler+0x10>)
 800446a:	f001 f9b1 	bl	80057d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200006a0 	.word	0x200006a0

08004478 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <DMA2_Stream0_IRQHandler+0x10>)
 800447e:	f001 fda1 	bl	8005fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000748 	.word	0x20000748

0800448c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004490:	4802      	ldr	r0, [pc, #8]	@ (800449c <DMA2_Stream3_IRQHandler+0x10>)
 8004492:	f001 fd97 	bl	8005fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200007a8 	.word	0x200007a8

080044a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80044a4:	4802      	ldr	r0, [pc, #8]	@ (80044b0 <OTG_FS_IRQHandler+0x10>)
 80044a6:	f002 fada 	bl	8006a5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20001d3c 	.word	0x20001d3c

080044b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return 1;
 80044b8:	2301      	movs	r3, #1
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_kill>:

int _kill(int pid, int sig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ce:	f009 febd 	bl	800e24c <__errno>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2216      	movs	r2, #22
 80044d6:	601a      	str	r2, [r3, #0]
  return -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_exit>:

void _exit (int status)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044ec:	f04f 31ff 	mov.w	r1, #4294967295
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ffe7 	bl	80044c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <_exit+0x12>

080044fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e00a      	b.n	8004522 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800450c:	f3af 8000 	nop.w
 8004510:	4601      	mov	r1, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	60ba      	str	r2, [r7, #8]
 8004518:	b2ca      	uxtb	r2, r1
 800451a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	3301      	adds	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	dbf0      	blt.n	800450c <_read+0x12>
  }

  return len;
 800452a:	687b      	ldr	r3, [r7, #4]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800455c:	605a      	str	r2, [r3, #4]
  return 0;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <_isatty>:

int _isatty(int file)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a4:	4a14      	ldr	r2, [pc, #80]	@ (80045f8 <_sbrk+0x5c>)
 80045a6:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <_sbrk+0x60>)
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b0:	4b13      	ldr	r3, [pc, #76]	@ (8004600 <_sbrk+0x64>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b8:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <_sbrk+0x64>)
 80045ba:	4a12      	ldr	r2, [pc, #72]	@ (8004604 <_sbrk+0x68>)
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045be:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <_sbrk+0x64>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d207      	bcs.n	80045dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045cc:	f009 fe3e 	bl	800e24c <__errno>
 80045d0:	4603      	mov	r3, r0
 80045d2:	220c      	movs	r2, #12
 80045d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e009      	b.n	80045f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045dc:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <_sbrk+0x64>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <_sbrk+0x64>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	4a05      	ldr	r2, [pc, #20]	@ (8004600 <_sbrk+0x64>)
 80045ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20020000 	.word	0x20020000
 80045fc:	00000400 	.word	0x00000400
 8004600:	20000854 	.word	0x20000854
 8004604:	20002590 	.word	0x20002590

08004608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <SystemInit+0x20>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	4a05      	ldr	r2, [pc, #20]	@ (8004628 <SystemInit+0x20>)
 8004614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000ed00 	.word	0xe000ed00
 800462c:	00000000 	.word	0x00000000

08004630 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8004630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	ed87 0a01 	vstr	s0, [r7, #4]
 800463c:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8004640:	4b3b      	ldr	r3, [pc, #236]	@ (8004730 <getTemp+0x100>)
 8004642:	ed93 7a00 	vldr	s14, [r3]
 8004646:	edd7 7a01 	vldr	s15, [r7, #4]
 800464a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800464e:	ed97 7a00 	vldr	s14, [r7]
 8004652:	edd7 7a01 	vldr	s15, [r7, #4]
 8004656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800465a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465e:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 8004662:	4b34      	ldr	r3, [pc, #208]	@ (8004734 <getTemp+0x104>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fb ff6e 	bl	8000548 <__aeabi_f2d>
 800466c:	4604      	mov	r4, r0
 800466e:	460d      	mov	r5, r1
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7fb ff69 	bl	8000548 <__aeabi_f2d>
 8004676:	4680      	mov	r8, r0
 8004678:	4689      	mov	r9, r1
 800467a:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <getTemp+0x108>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb ff62 	bl	8000548 <__aeabi_f2d>
 8004684:	4682      	mov	sl, r0
 8004686:	468b      	mov	fp, r1
 8004688:	4b2a      	ldr	r3, [pc, #168]	@ (8004734 <getTemp+0x104>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	eeb1 7a67 	vneg.f32	s14, s15
 8004692:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <getTemp+0x10c>)
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800469c:	ee16 0a90 	vmov	r0, s13
 80046a0:	f7fb ff52 	bl	8000548 <__aeabi_f2d>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	ec43 2b10 	vmov	d0, r2, r3
 80046ac:	f00b fb80 	bl	800fdb0 <exp>
 80046b0:	ec53 2b10 	vmov	r2, r3, d0
 80046b4:	4650      	mov	r0, sl
 80046b6:	4659      	mov	r1, fp
 80046b8:	f7fb ff9e 	bl	80005f8 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4640      	mov	r0, r8
 80046c2:	4649      	mov	r1, r9
 80046c4:	f7fc f8c2 	bl	800084c <__aeabi_ddiv>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	ec43 2b17 	vmov	d7, r2, r3
 80046d0:	eeb0 0a47 	vmov.f32	s0, s14
 80046d4:	eef0 0a67 	vmov.f32	s1, s15
 80046d8:	f00b fbb2 	bl	800fe40 <log>
 80046dc:	ec53 2b10 	vmov	r2, r3, d0
 80046e0:	4620      	mov	r0, r4
 80046e2:	4629      	mov	r1, r5
 80046e4:	f7fc f8b2 	bl	800084c <__aeabi_ddiv>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7fc fa5a 	bl	8000ba8 <__aeabi_d2f>
 80046f4:	4603      	mov	r3, r0
 80046f6:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 80046f8:	68b8      	ldr	r0, [r7, #8]
 80046fa:	f7fb ff25 	bl	8000548 <__aeabi_f2d>
 80046fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8004728 <getTemp+0xf8>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb fdc0 	bl	8000288 <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	f7fc fa4a 	bl	8000ba8 <__aeabi_d2f>
 8004714:	4603      	mov	r3, r0
 8004716:	ee07 3a90 	vmov	s15, r3
}
 800471a:	eeb0 0a67 	vmov.f32	s0, s15
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	66666666 	.word	0x66666666
 800472c:	40711266 	.word	0x40711266
 8004730:	20000024 	.word	0x20000024
 8004734:	2000002c 	.word	0x2000002c
 8004738:	20000028 	.word	0x20000028
 800473c:	20000030 	.word	0x20000030

08004740 <CreateTimer>:
#include "virtual_timer.h"

// Creates a new timer
timer_ CreateTimer(uint32_t duration_ms, Callback cb)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b089      	sub	sp, #36	@ 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800474c:	f000 f8fa 	bl	8004944 <HAL_GetTick>
 8004750:	61f8      	str	r0, [r7, #28]
	timer_ timer = {tickstart, duration_ms, cb};
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	61bb      	str	r3, [r7, #24]
	return timer;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	461c      	mov	r4, r3
 8004762:	f107 0310 	add.w	r3, r7, #16
 8004766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800476a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	3724      	adds	r7, #36	@ 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}

08004776 <CreateTimerGroup>:

timer_group_ *CreateTimerGroup(timer_ timers[NUM_TIMERS])
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
	// Allocate the timer group structure
	timer_group_ *tg = (timer_group_ *)malloc(sizeof(timer_group_));
 800477e:	2030      	movs	r0, #48	@ 0x30
 8004780:	f008 fde4 	bl	800d34c <malloc>
 8004784:	4603      	mov	r3, r0
 8004786:	60fb      	str	r3, [r7, #12]
	if (!tg)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <CreateTimerGroup+0x1c>
	{
		return NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	e006      	b.n	80047a0 <CreateTimerGroup+0x2a>
	}

	memcpy(tg->timers, timers, sizeof(timer_) * NUM_TIMERS);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2230      	movs	r2, #48	@ 0x30
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	f009 fd84 	bl	800e2a6 <memcpy>
	return tg;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <TickTimerGroup>:

// Ticks a timer group
void TickTimerGroup(timer_group_ *tg)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e02d      	b.n	8004812 <TickTimerGroup+0x6a>
	{
		// HAL_GetTick is in ms
		// will error with a HAL_GetTick overflow
		if ((HAL_GetTick() - tg->timers[i].tickstart) > tg->timers[i].durations_ms)
 80047b6:	f000 f8c5 	bl	8004944 <HAL_GetTick>
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	1ac1      	subs	r1, r0, r3
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4403      	add	r3, r0
 80047da:	3304      	adds	r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4299      	cmp	r1, r3
 80047e0:	d914      	bls.n	800480c <TickTimerGroup+0x64>
		{
			tg->timers[i].tickstart = HAL_GetTick();
 80047e2:	7bfc      	ldrb	r4, [r7, #15]
 80047e4:	f000 f8ae 	bl	8004944 <HAL_GetTick>
 80047e8:	4601      	mov	r1, r0
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4623      	mov	r3, r4
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4423      	add	r3, r4
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	6019      	str	r1, [r3, #0]
			tg->timers[i].cb();
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3308      	adds	r3, #8
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4798      	blx	r3
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	3301      	adds	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d9ce      	bls.n	80047b6 <TickTimerGroup+0xe>
		}
	}
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}
	...

08004824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800485c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004828:	f7ff feee 	bl	8004608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800482c:	480c      	ldr	r0, [pc, #48]	@ (8004860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800482e:	490d      	ldr	r1, [pc, #52]	@ (8004864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004830:	4a0d      	ldr	r2, [pc, #52]	@ (8004868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004834:	e002      	b.n	800483c <LoopCopyDataInit>

08004836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800483a:	3304      	adds	r3, #4

0800483c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800483c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800483e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004840:	d3f9      	bcc.n	8004836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004842:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004844:	4c0a      	ldr	r4, [pc, #40]	@ (8004870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004848:	e001      	b.n	800484e <LoopFillZerobss>

0800484a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800484a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800484c:	3204      	adds	r2, #4

0800484e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800484e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004850:	d3fb      	bcc.n	800484a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004852:	f009 fd01 	bl	800e258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004856:	f7ff f813 	bl	8003880 <main>
  bx  lr    
 800485a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800485c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004864:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8004868:	08010dd8 	.word	0x08010dd8
  ldr r2, =_sbss
 800486c:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8004870:	2000258c 	.word	0x2000258c

08004874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004874:	e7fe      	b.n	8004874 <ADC_IRQHandler>
	...

08004878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800487c:	4b0e      	ldr	r3, [pc, #56]	@ (80048b8 <HAL_Init+0x40>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0d      	ldr	r2, [pc, #52]	@ (80048b8 <HAL_Init+0x40>)
 8004882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_Init+0x40>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <HAL_Init+0x40>)
 800488e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004894:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <HAL_Init+0x40>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <HAL_Init+0x40>)
 800489a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a0:	2003      	movs	r0, #3
 80048a2:	f001 fa9f 	bl	8005de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048a6:	200f      	movs	r0, #15
 80048a8:	f000 f808 	bl	80048bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048ac:	f7ff fba0 	bl	8003ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00

080048bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048c4:	4b12      	ldr	r3, [pc, #72]	@ (8004910 <HAL_InitTick+0x54>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_InitTick+0x58>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 fab7 	bl	8005e4e <HAL_SYSTICK_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e00e      	b.n	8004908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d80a      	bhi.n	8004906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048f0:	2200      	movs	r2, #0
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	f001 fa7f 	bl	8005dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048fc:	4a06      	ldr	r2, [pc, #24]	@ (8004918 <HAL_InitTick+0x5c>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000020 	.word	0x20000020
 8004914:	20000038 	.word	0x20000038
 8004918:	20000034 	.word	0x20000034

0800491c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_IncTick+0x20>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <HAL_IncTick+0x24>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4413      	add	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <HAL_IncTick+0x24>)
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000038 	.word	0x20000038
 8004940:	20000858 	.word	0x20000858

08004944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return uwTick;
 8004948:	4b03      	ldr	r3, [pc, #12]	@ (8004958 <HAL_GetTick+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000858 	.word	0x20000858

0800495c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004964:	f7ff ffee 	bl	8004944 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d005      	beq.n	8004982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004976:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <HAL_Delay+0x44>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004982:	bf00      	nop
 8004984:	f7ff ffde 	bl	8004944 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d8f7      	bhi.n	8004984 <HAL_Delay+0x28>
  {
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000038 	.word	0x20000038

080049a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e033      	b.n	8004a22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fb3c 	bl	8004040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80049ea:	f023 0302 	bic.w	r3, r3, #2
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fad8 	bl	8004fac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a12:	e001      	b.n	8004a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_Start+0x1a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0b2      	b.n	8004bac <HAL_ADC_Start+0x180>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d018      	beq.n	8004a8e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a6c:	4b52      	ldr	r3, [pc, #328]	@ (8004bb8 <HAL_ADC_Start+0x18c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a52      	ldr	r2, [pc, #328]	@ (8004bbc <HAL_ADC_Start+0x190>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9a      	lsrs	r2, r3, #18
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f9      	bne.n	8004a82 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d17a      	bne.n	8004b92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ac6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ada:	d106      	bne.n	8004aea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	f023 0206 	bic.w	r2, r3, #6
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ae8:	e002      	b.n	8004af0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004af8:	4b31      	ldr	r3, [pc, #196]	@ (8004bc0 <HAL_ADC_Start+0x194>)
 8004afa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004b04:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d12a      	bne.n	8004b68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <HAL_ADC_Start+0x198>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d015      	beq.n	8004b48 <HAL_ADC_Start+0x11c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <HAL_ADC_Start+0x19c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d105      	bne.n	8004b32 <HAL_ADC_Start+0x106>
 8004b26:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <HAL_ADC_Start+0x194>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a25      	ldr	r2, [pc, #148]	@ (8004bcc <HAL_ADC_Start+0x1a0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d136      	bne.n	8004baa <HAL_ADC_Start+0x17e>
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_ADC_Start+0x194>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d130      	bne.n	8004baa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d129      	bne.n	8004baa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	e020      	b.n	8004baa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <HAL_ADC_Start+0x198>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d11b      	bne.n	8004baa <HAL_ADC_Start+0x17e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d114      	bne.n	8004baa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	e00b      	b.n	8004baa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	20000020 	.word	0x20000020
 8004bbc:	431bde83 	.word	0x431bde83
 8004bc0:	40012300 	.word	0x40012300
 8004bc4:	40012000 	.word	0x40012000
 8004bc8:	40012100 	.word	0x40012100
 8004bcc:	40012200 	.word	0x40012200

08004bd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_Stop+0x16>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e021      	b.n	8004c2a <HAL_ADC_Stop+0x5a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f043 0201 	orr.w	r2, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d113      	bne.n	8004c7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c62:	d10b      	bne.n	8004c7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e063      	b.n	8004d44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c7c:	f7ff fe62 	bl	8004944 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c82:	e021      	b.n	8004cc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_ADC_PollForConversion+0x6c>
 8004c92:	f7ff fe57 	bl	8004944 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d212      	bcs.n	8004cc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00b      	beq.n	8004cc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e03d      	b.n	8004d44 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d1d6      	bne.n	8004c84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f06f 0212 	mvn.w	r2, #18
 8004cde:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d123      	bne.n	8004d42 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11f      	bne.n	8004d42 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d111      	bne.n	8004d42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x1c>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e105      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x228>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d925      	bls.n	8004de0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68d9      	ldr	r1, [r3, #12]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	3b1e      	subs	r3, #30
 8004daa:	2207      	movs	r2, #7
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43da      	mvns	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	400a      	ands	r2, r1
 8004db8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68d9      	ldr	r1, [r3, #12]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4618      	mov	r0, r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4403      	add	r3, r0
 8004dd2:	3b1e      	subs	r3, #30
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e022      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6919      	ldr	r1, [r3, #16]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	2207      	movs	r2, #7
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43da      	mvns	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	400a      	ands	r2, r1
 8004e02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6919      	ldr	r1, [r3, #16]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4618      	mov	r0, r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4403      	add	r3, r0
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d824      	bhi.n	8004e78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3b05      	subs	r3, #5
 8004e40:	221f      	movs	r2, #31
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43da      	mvns	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	3b05      	subs	r3, #5
 8004e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e76:	e04c      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d824      	bhi.n	8004eca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	3b23      	subs	r3, #35	@ 0x23
 8004e92:	221f      	movs	r2, #31
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	3b23      	subs	r3, #35	@ 0x23
 8004ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec8:	e023      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	3b41      	subs	r3, #65	@ 0x41
 8004edc:	221f      	movs	r2, #31
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	400a      	ands	r2, r1
 8004eea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	4618      	mov	r0, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	3b41      	subs	r3, #65	@ 0x41
 8004f06:	fa00 f203 	lsl.w	r2, r0, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f12:	4b22      	ldr	r3, [pc, #136]	@ (8004f9c <HAL_ADC_ConfigChannel+0x234>)
 8004f14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x238>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d109      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x1cc>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b12      	cmp	r3, #18
 8004f26:	d105      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a19      	ldr	r2, [pc, #100]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x238>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d123      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x21e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d003      	beq.n	8004f4e <HAL_ADC_ConfigChannel+0x1e6>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b11      	cmp	r3, #17
 8004f4c:	d11b      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d111      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f62:	4b10      	ldr	r3, [pc, #64]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x23c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x240>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	0c9a      	lsrs	r2, r3, #18
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f78:	e002      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012300 	.word	0x40012300
 8004fa0:	40012000 	.word	0x40012000
 8004fa4:	20000020 	.word	0x20000020
 8004fa8:	431bde83 	.word	0x431bde83

08004fac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fb4:	4b79      	ldr	r3, [pc, #484]	@ (800519c <ADC_Init+0x1f0>)
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	4a58      	ldr	r2, [pc, #352]	@ (80051a0 <ADC_Init+0x1f4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6899      	ldr	r1, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6899      	ldr	r1, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	e00f      	b.n	80050aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0202 	bic.w	r2, r2, #2
 80050b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6899      	ldr	r1, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	7e1b      	ldrb	r3, [r3, #24]
 80050c4:	005a      	lsls	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80050f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	3b01      	subs	r3, #1
 8005104:	035a      	lsls	r2, r3, #13
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	e007      	b.n	8005120 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	3b01      	subs	r3, #1
 800513c:	051a      	lsls	r2, r3, #20
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005162:	025a      	lsls	r2, r3, #9
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800517a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	029a      	lsls	r2, r3, #10
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012300 	.word	0x40012300
 80051a0:	0f000001 	.word	0x0f000001

080051a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0ed      	b.n	8005392 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fe ff80 	bl	80040c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d8:	f7ff fbb4 	bl	8004944 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051de:	e012      	b.n	8005206 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051e0:	f7ff fbb0 	bl	8004944 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b0a      	cmp	r3, #10
 80051ec:	d90b      	bls.n	8005206 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2205      	movs	r2, #5
 80051fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0c5      	b.n	8005392 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0e5      	beq.n	80051e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0202 	bic.w	r2, r2, #2
 8005222:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005224:	f7ff fb8e 	bl	8004944 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800522a:	e012      	b.n	8005252 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800522c:	f7ff fb8a 	bl	8004944 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b0a      	cmp	r3, #10
 8005238:	d90b      	bls.n	8005252 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2205      	movs	r2, #5
 800524a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e09f      	b.n	8005392 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	7e1b      	ldrb	r3, [r3, #24]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d108      	bne.n	800527a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e007      	b.n	800528a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005288:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7e5b      	ldrb	r3, [r3, #25]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d108      	bne.n	80052a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e007      	b.n	80052b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7e9b      	ldrb	r3, [r3, #26]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d108      	bne.n	80052ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0220 	orr.w	r2, r2, #32
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e007      	b.n	80052de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0220 	bic.w	r2, r2, #32
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	7edb      	ldrb	r3, [r3, #27]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d108      	bne.n	80052f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0210 	bic.w	r2, r2, #16
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0210 	orr.w	r2, r2, #16
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7f1b      	ldrb	r3, [r3, #28]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d108      	bne.n	8005322 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e007      	b.n	8005332 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0208 	bic.w	r2, r2, #8
 8005330:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	7f5b      	ldrb	r3, [r3, #29]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d108      	bne.n	800534c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0204 	orr.w	r2, r2, #4
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e007      	b.n	800535c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	ea42 0103 	orr.w	r1, r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	1e5a      	subs	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d003      	beq.n	80053c2 <HAL_CAN_ConfigFilter+0x26>
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	f040 80be 	bne.w	800553e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80053c2:	4b65      	ldr	r3, [pc, #404]	@ (8005558 <HAL_CAN_ConfigFilter+0x1bc>)
 80053c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053dc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	431a      	orrs	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	401a      	ands	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d123      	bne.n	800546c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005446:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	3248      	adds	r2, #72	@ 0x48
 800544c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005460:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005462:	6979      	ldr	r1, [r7, #20]
 8005464:	3348      	adds	r3, #72	@ 0x48
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d122      	bne.n	80054ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	431a      	orrs	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005494:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	3248      	adds	r2, #72	@ 0x48
 800549a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80054ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	3348      	adds	r3, #72	@ 0x48
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	401a      	ands	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80054d4:	e007      	b.n	80054e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	431a      	orrs	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	43db      	mvns	r3, r3
 80054f8:	401a      	ands	r2, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005500:	e007      	b.n	8005512 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	431a      	orrs	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	431a      	orrs	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005530:	f023 0201 	bic.w	r2, r3, #1
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e006      	b.n	800554c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40006400 	.word	0x40006400

0800555c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d12e      	bne.n	80055ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005588:	f7ff f9dc 	bl	8004944 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800558e:	e012      	b.n	80055b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005590:	f7ff f9d8 	bl	8004944 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b0a      	cmp	r3, #10
 800559c:	d90b      	bls.n	80055b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2205      	movs	r2, #5
 80055ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e012      	b.n	80055dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e006      	b.n	80055dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	@ 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005602:	7ffb      	ldrb	r3, [r7, #31]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d003      	beq.n	8005610 <HAL_CAN_AddTxMessage+0x2c>
 8005608:	7ffb      	ldrb	r3, [r7, #31]
 800560a:	2b02      	cmp	r3, #2
 800560c:	f040 80ad 	bne.w	800576a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8095 	beq.w	800575a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800563a:	2201      	movs	r2, #1
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	409a      	lsls	r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	6809      	ldr	r1, [r1, #0]
 800565a:	431a      	orrs	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3318      	adds	r3, #24
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	440b      	add	r3, r1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e00f      	b.n	8005688 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005672:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800567c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	3318      	adds	r3, #24
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	440b      	add	r3, r1
 8005686:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	3318      	adds	r3, #24
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	440b      	add	r3, r1
 8005698:	3304      	adds	r3, #4
 800569a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	7d1b      	ldrb	r3, [r3, #20]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d111      	bne.n	80056c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3318      	adds	r3, #24
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	4413      	add	r3, r2
 80056b0:	3304      	adds	r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6811      	ldr	r1, [r2, #0]
 80056b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3318      	adds	r3, #24
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	440b      	add	r3, r1
 80056c4:	3304      	adds	r3, #4
 80056c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3307      	adds	r3, #7
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	061a      	lsls	r2, r3, #24
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3306      	adds	r3, #6
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3305      	adds	r3, #5
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	4313      	orrs	r3, r2
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	3204      	adds	r2, #4
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	4610      	mov	r0, r2
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6811      	ldr	r1, [r2, #0]
 80056f0:	ea43 0200 	orr.w	r2, r3, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	440b      	add	r3, r1
 80056fa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80056fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3303      	adds	r3, #3
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	061a      	lsls	r2, r3, #24
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3302      	adds	r3, #2
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3301      	adds	r3, #1
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	4313      	orrs	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	4610      	mov	r0, r2
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	6811      	ldr	r1, [r2, #0]
 8005726:	ea43 0200 	orr.w	r2, r3, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	440b      	add	r3, r1
 8005730:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005734:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	3318      	adds	r3, #24
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	4413      	add	r3, r2
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	6811      	ldr	r1, [r2, #0]
 8005748:	f043 0201 	orr.w	r2, r3, #1
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3318      	adds	r3, #24
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	440b      	add	r3, r1
 8005754:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e00e      	b.n	8005778 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e006      	b.n	8005778 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3724      	adds	r7, #36	@ 0x24
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005794:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d002      	beq.n	80057a2 <HAL_CAN_ActivateNotification+0x1e>
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d109      	bne.n	80057b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6959      	ldr	r1, [r3, #20]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e006      	b.n	80057c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057d8:	2300      	movs	r3, #0
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d07c      	beq.n	8005910 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d023      	beq.n	8005868 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2201      	movs	r2, #1
 8005826:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f983 	bl	8005b3e <HAL_CAN_TxMailbox0CompleteCallback>
 8005838:	e016      	b.n	8005868 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
 800584c:	e00c      	b.n	8005868 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005860:	e002      	b.n	8005868 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f989 	bl	8005b7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d024      	beq.n	80058bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800587a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f963 	bl	8005b52 <HAL_CAN_TxMailbox1CompleteCallback>
 800588c:	e016      	b.n	80058bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a0:	e00c      	b.n	80058bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	e002      	b.n	80058bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f969 	bl	8005b8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d024      	beq.n	8005910 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80058ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f943 	bl	8005b66 <HAL_CAN_TxMailbox2CompleteCallback>
 80058e0:	e016      	b.n	8005910 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f4:	e00c      	b.n	8005910 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
 8005908:	e002      	b.n	8005910 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f949 	bl	8005ba2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2210      	movs	r2, #16
 8005932:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2208      	movs	r2, #8
 800594e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f93a 	bl	8005bca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f921 	bl	8005bb6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2210      	movs	r2, #16
 8005996:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d006      	beq.n	80059ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2208      	movs	r2, #8
 80059b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f91c 	bl	8005bf2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f903 	bl	8005bde <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2210      	movs	r2, #16
 80059f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f906 	bl	8005c06 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2208      	movs	r2, #8
 8005a14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8ff 	bl	8005c1a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d07b      	beq.n	8005b1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d072      	beq.n	8005b16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	f043 0302 	orr.w	r3, r3, #2
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	f043 0304 	orr.w	r3, r3, #4
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d043      	beq.n	8005b16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d03e      	beq.n	8005b16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a9e:	2b60      	cmp	r3, #96	@ 0x60
 8005aa0:	d02b      	beq.n	8005afa <HAL_CAN_IRQHandler+0x32a>
 8005aa2:	2b60      	cmp	r3, #96	@ 0x60
 8005aa4:	d82e      	bhi.n	8005b04 <HAL_CAN_IRQHandler+0x334>
 8005aa6:	2b50      	cmp	r3, #80	@ 0x50
 8005aa8:	d022      	beq.n	8005af0 <HAL_CAN_IRQHandler+0x320>
 8005aaa:	2b50      	cmp	r3, #80	@ 0x50
 8005aac:	d82a      	bhi.n	8005b04 <HAL_CAN_IRQHandler+0x334>
 8005aae:	2b40      	cmp	r3, #64	@ 0x40
 8005ab0:	d019      	beq.n	8005ae6 <HAL_CAN_IRQHandler+0x316>
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d826      	bhi.n	8005b04 <HAL_CAN_IRQHandler+0x334>
 8005ab6:	2b30      	cmp	r3, #48	@ 0x30
 8005ab8:	d010      	beq.n	8005adc <HAL_CAN_IRQHandler+0x30c>
 8005aba:	2b30      	cmp	r3, #48	@ 0x30
 8005abc:	d822      	bhi.n	8005b04 <HAL_CAN_IRQHandler+0x334>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d002      	beq.n	8005ac8 <HAL_CAN_IRQHandler+0x2f8>
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d005      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ac6:	e01d      	b.n	8005b04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	f043 0308 	orr.w	r3, r3, #8
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ad0:	e019      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ada:	e014      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ae4:	e00f      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005aee:	e00a      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005af8:	e005      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005b02:	e000      	b.n	8005b06 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f87c 	bl	8005c2e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b36:	bf00      	nop
 8005b38:	3728      	adds	r7, #40	@ 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <__NVIC_SetPriorityGrouping>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c54:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c76:	4a04      	ldr	r2, [pc, #16]	@ (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	60d3      	str	r3, [r2, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_GetPriorityGrouping>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 0307 	and.w	r3, r3, #7
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <__NVIC_EnableIRQ>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db0b      	blt.n	8005cd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	f003 021f 	and.w	r2, r3, #31
 8005cc0:	4907      	ldr	r1, [pc, #28]	@ (8005ce0 <__NVIC_EnableIRQ+0x38>)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2001      	movs	r0, #1
 8005cca:	fa00 f202 	lsl.w	r2, r0, r2
 8005cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	e000e100 	.word	0xe000e100

08005ce4 <__NVIC_SetPriority>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db0a      	blt.n	8005d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	490c      	ldr	r1, [pc, #48]	@ (8005d30 <__NVIC_SetPriority+0x4c>)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	0112      	lsls	r2, r2, #4
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	440b      	add	r3, r1
 8005d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d0c:	e00a      	b.n	8005d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4908      	ldr	r1, [pc, #32]	@ (8005d34 <__NVIC_SetPriority+0x50>)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	3b04      	subs	r3, #4
 8005d1c:	0112      	lsls	r2, r2, #4
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	440b      	add	r3, r1
 8005d22:	761a      	strb	r2, [r3, #24]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000e100 	.word	0xe000e100
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <NVIC_EncodePriority>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	@ 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f1c3 0307 	rsb	r3, r3, #7
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	bf28      	it	cs
 8005d56:	2304      	movcs	r3, #4
 8005d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d902      	bls.n	8005d68 <NVIC_EncodePriority+0x30>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3b03      	subs	r3, #3
 8005d66:	e000      	b.n	8005d6a <NVIC_EncodePriority+0x32>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d80:	f04f 31ff 	mov.w	r1, #4294967295
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	43d9      	mvns	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d90:	4313      	orrs	r3, r2
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3724      	adds	r7, #36	@ 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <SysTick_Config>:
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db0:	d301      	bcc.n	8005db6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005db2:	2301      	movs	r3, #1
 8005db4:	e00f      	b.n	8005dd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005db6:	4a0a      	ldr	r2, [pc, #40]	@ (8005de0 <SysTick_Config+0x40>)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dbe:	210f      	movs	r1, #15
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	f7ff ff8e 	bl	8005ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <SysTick_Config+0x40>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dce:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <SysTick_Config+0x40>)
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	e000e010 	.word	0xe000e010

08005de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff ff29 	bl	8005c44 <__NVIC_SetPriorityGrouping>
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	4603      	mov	r3, r0
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e0c:	f7ff ff3e 	bl	8005c8c <__NVIC_GetPriorityGrouping>
 8005e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	6978      	ldr	r0, [r7, #20]
 8005e18:	f7ff ff8e 	bl	8005d38 <NVIC_EncodePriority>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff ff5d 	bl	8005ce4 <__NVIC_SetPriority>
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff ff31 	bl	8005ca8 <__NVIC_EnableIRQ>
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff ffa2 	bl	8005da0 <SysTick_Config>
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e74:	f7fe fd66 	bl	8004944 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e099      	b.n	8005fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ea4:	e00f      	b.n	8005ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ea6:	f7fe fd4d 	bl	8004944 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b05      	cmp	r3, #5
 8005eb2:	d908      	bls.n	8005ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e078      	b.n	8005fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e8      	bne.n	8005ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4b38      	ldr	r3, [pc, #224]	@ (8005fc0 <HAL_DMA_Init+0x158>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d107      	bne.n	8005f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d117      	bne.n	8005f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f9e9 	bl	8006344 <DMA_CheckFifoParam>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2240      	movs	r2, #64	@ 0x40
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005f86:	2301      	movs	r3, #1
 8005f88:	e016      	b.n	8005fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9a0 	bl	80062d8 <DMA_CalcBaseAndBitshift>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa0:	223f      	movs	r2, #63	@ 0x3f
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	f010803f 	.word	0xf010803f

08005fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800620c <HAL_DMA_IRQHandler+0x248>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8006210 <HAL_DMA_IRQHandler+0x24c>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0a9b      	lsrs	r3, r3, #10
 8005fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fee:	2208      	movs	r2, #8
 8005ff0:	409a      	lsls	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01a      	beq.n	8006030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d013      	beq.n	8006030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0204 	bic.w	r2, r2, #4
 8006016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601c:	2208      	movs	r2, #8
 800601e:	409a      	lsls	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006028:	f043 0201 	orr.w	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d012      	beq.n	8006066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	f043 0202 	orr.w	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606a:	2204      	movs	r2, #4
 800606c:	409a      	lsls	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d012      	beq.n	800609c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006088:	2204      	movs	r2, #4
 800608a:	409a      	lsls	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006094:	f043 0204 	orr.w	r2, r3, #4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a0:	2210      	movs	r2, #16
 80060a2:	409a      	lsls	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d043      	beq.n	8006134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03c      	beq.n	8006134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060be:	2210      	movs	r2, #16
 80060c0:	409a      	lsls	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d018      	beq.n	8006106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d108      	bne.n	80060f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d024      	beq.n	8006134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
 80060f2:	e01f      	b.n	8006134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01b      	beq.n	8006134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	e016      	b.n	8006134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0208 	bic.w	r2, r2, #8
 8006122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	2220      	movs	r2, #32
 800613a:	409a      	lsls	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 808f 	beq.w	8006264 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8087 	beq.w	8006264 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615a:	2220      	movs	r2, #32
 800615c:	409a      	lsls	r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b05      	cmp	r3, #5
 800616c:	d136      	bne.n	80061dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0216 	bic.w	r2, r2, #22
 800617c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800618c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <HAL_DMA_IRQHandler+0x1da>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0208 	bic.w	r2, r2, #8
 80061ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b2:	223f      	movs	r2, #63	@ 0x3f
 80061b4:	409a      	lsls	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d07e      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
        }
        return;
 80061da:	e079      	b.n	80062d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01d      	beq.n	8006226 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d031      	beq.n	8006264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
 8006208:	e02c      	b.n	8006264 <HAL_DMA_IRQHandler+0x2a0>
 800620a:	bf00      	nop
 800620c:	20000020 	.word	0x20000020
 8006210:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d023      	beq.n	8006264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
 8006224:	e01e      	b.n	8006264 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10f      	bne.n	8006254 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0210 	bic.w	r2, r2, #16
 8006242:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006268:	2b00      	cmp	r3, #0
 800626a:	d032      	beq.n	80062d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d022      	beq.n	80062be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2205      	movs	r2, #5
 800627c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3301      	adds	r3, #1
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	429a      	cmp	r2, r3
 800629a:	d307      	bcc.n	80062ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f2      	bne.n	8006290 <HAL_DMA_IRQHandler+0x2cc>
 80062aa:	e000      	b.n	80062ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	e000      	b.n	80062d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062d0:	bf00      	nop
    }
  }
}
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3b10      	subs	r3, #16
 80062e8:	4a14      	ldr	r2, [pc, #80]	@ (800633c <DMA_CalcBaseAndBitshift+0x64>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062f2:	4a13      	ldr	r2, [pc, #76]	@ (8006340 <DMA_CalcBaseAndBitshift+0x68>)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b03      	cmp	r3, #3
 8006304:	d909      	bls.n	800631a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	1d1a      	adds	r2, r3, #4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	659a      	str	r2, [r3, #88]	@ 0x58
 8006318:	e007      	b.n	800632a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	aaaaaaab 	.word	0xaaaaaaab
 8006340:	08010a18 	.word	0x08010a18

08006344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11f      	bne.n	800639e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d856      	bhi.n	8006412 <DMA_CheckFifoParam+0xce>
 8006364:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <DMA_CheckFifoParam+0x28>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	0800637d 	.word	0x0800637d
 8006370:	0800638f 	.word	0x0800638f
 8006374:	0800637d 	.word	0x0800637d
 8006378:	08006413 	.word	0x08006413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d046      	beq.n	8006416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800638c:	e043      	b.n	8006416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006396:	d140      	bne.n	800641a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800639c:	e03d      	b.n	800641a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a6:	d121      	bne.n	80063ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d837      	bhi.n	800641e <DMA_CheckFifoParam+0xda>
 80063ae:	a201      	add	r2, pc, #4	@ (adr r2, 80063b4 <DMA_CheckFifoParam+0x70>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063c5 	.word	0x080063c5
 80063b8:	080063cb 	.word	0x080063cb
 80063bc:	080063c5 	.word	0x080063c5
 80063c0:	080063dd 	.word	0x080063dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
      break;
 80063c8:	e030      	b.n	800642c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d025      	beq.n	8006422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063da:	e022      	b.n	8006422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063e4:	d11f      	bne.n	8006426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063ea:	e01c      	b.n	8006426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d903      	bls.n	80063fa <DMA_CheckFifoParam+0xb6>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d003      	beq.n	8006400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063f8:	e018      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
      break;
 80063fe:	e015      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00e      	beq.n	800642a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e00b      	b.n	800642a <DMA_CheckFifoParam+0xe6>
      break;
 8006412:	bf00      	nop
 8006414:	e00a      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;
 8006416:	bf00      	nop
 8006418:	e008      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;
 800641a:	bf00      	nop
 800641c:	e006      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;
 800641e:	bf00      	nop
 8006420:	e004      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;
 8006422:	bf00      	nop
 8006424:	e002      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;   
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <DMA_CheckFifoParam+0xe8>
      break;
 800642a:	bf00      	nop
    }
  } 
  
  return status; 
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop

0800643c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	@ 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e16b      	b.n	8006730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006458:	2201      	movs	r2, #1
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4013      	ands	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	f040 815a 	bne.w	800672a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d005      	beq.n	800648e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800648a:	2b02      	cmp	r3, #2
 800648c:	d130      	bne.n	80064f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	2203      	movs	r2, #3
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4013      	ands	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c4:	2201      	movs	r2, #1
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 0201 	and.w	r2, r3, #1
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d017      	beq.n	800652c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	2203      	movs	r2, #3
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4313      	orrs	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d123      	bne.n	8006580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	08da      	lsrs	r2, r3, #3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3208      	adds	r2, #8
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	220f      	movs	r2, #15
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	08da      	lsrs	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3208      	adds	r2, #8
 800657a:	69b9      	ldr	r1, [r7, #24]
 800657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	2203      	movs	r2, #3
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 0203 	and.w	r2, r3, #3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80b4 	beq.w	800672a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	4b60      	ldr	r3, [pc, #384]	@ (8006748 <HAL_GPIO_Init+0x30c>)
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	4a5f      	ldr	r2, [pc, #380]	@ (8006748 <HAL_GPIO_Init+0x30c>)
 80065cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80065d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006748 <HAL_GPIO_Init+0x30c>)
 80065d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065de:	4a5b      	ldr	r2, [pc, #364]	@ (800674c <HAL_GPIO_Init+0x310>)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	3302      	adds	r3, #2
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	220f      	movs	r2, #15
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a52      	ldr	r2, [pc, #328]	@ (8006750 <HAL_GPIO_Init+0x314>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02b      	beq.n	8006662 <HAL_GPIO_Init+0x226>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a51      	ldr	r2, [pc, #324]	@ (8006754 <HAL_GPIO_Init+0x318>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d025      	beq.n	800665e <HAL_GPIO_Init+0x222>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a50      	ldr	r2, [pc, #320]	@ (8006758 <HAL_GPIO_Init+0x31c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01f      	beq.n	800665a <HAL_GPIO_Init+0x21e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a4f      	ldr	r2, [pc, #316]	@ (800675c <HAL_GPIO_Init+0x320>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d019      	beq.n	8006656 <HAL_GPIO_Init+0x21a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a4e      	ldr	r2, [pc, #312]	@ (8006760 <HAL_GPIO_Init+0x324>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_GPIO_Init+0x216>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a4d      	ldr	r2, [pc, #308]	@ (8006764 <HAL_GPIO_Init+0x328>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00d      	beq.n	800664e <HAL_GPIO_Init+0x212>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a4c      	ldr	r2, [pc, #304]	@ (8006768 <HAL_GPIO_Init+0x32c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <HAL_GPIO_Init+0x20e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a4b      	ldr	r2, [pc, #300]	@ (800676c <HAL_GPIO_Init+0x330>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_GPIO_Init+0x20a>
 8006642:	2307      	movs	r3, #7
 8006644:	e00e      	b.n	8006664 <HAL_GPIO_Init+0x228>
 8006646:	2308      	movs	r3, #8
 8006648:	e00c      	b.n	8006664 <HAL_GPIO_Init+0x228>
 800664a:	2306      	movs	r3, #6
 800664c:	e00a      	b.n	8006664 <HAL_GPIO_Init+0x228>
 800664e:	2305      	movs	r3, #5
 8006650:	e008      	b.n	8006664 <HAL_GPIO_Init+0x228>
 8006652:	2304      	movs	r3, #4
 8006654:	e006      	b.n	8006664 <HAL_GPIO_Init+0x228>
 8006656:	2303      	movs	r3, #3
 8006658:	e004      	b.n	8006664 <HAL_GPIO_Init+0x228>
 800665a:	2302      	movs	r3, #2
 800665c:	e002      	b.n	8006664 <HAL_GPIO_Init+0x228>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <HAL_GPIO_Init+0x228>
 8006662:	2300      	movs	r3, #0
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	f002 0203 	and.w	r2, r2, #3
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	4093      	lsls	r3, r2
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4313      	orrs	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006674:	4935      	ldr	r1, [pc, #212]	@ (800674c <HAL_GPIO_Init+0x310>)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	089b      	lsrs	r3, r3, #2
 800667a:	3302      	adds	r3, #2
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006682:	4b3b      	ldr	r3, [pc, #236]	@ (8006770 <HAL_GPIO_Init+0x334>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	43db      	mvns	r3, r3
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066a6:	4a32      	ldr	r2, [pc, #200]	@ (8006770 <HAL_GPIO_Init+0x334>)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066ac:	4b30      	ldr	r3, [pc, #192]	@ (8006770 <HAL_GPIO_Init+0x334>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066d0:	4a27      	ldr	r2, [pc, #156]	@ (8006770 <HAL_GPIO_Init+0x334>)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066d6:	4b26      	ldr	r3, [pc, #152]	@ (8006770 <HAL_GPIO_Init+0x334>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	43db      	mvns	r3, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4013      	ands	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006770 <HAL_GPIO_Init+0x334>)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006700:	4b1b      	ldr	r3, [pc, #108]	@ (8006770 <HAL_GPIO_Init+0x334>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	43db      	mvns	r3, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006724:	4a12      	ldr	r2, [pc, #72]	@ (8006770 <HAL_GPIO_Init+0x334>)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b0f      	cmp	r3, #15
 8006734:	f67f ae90 	bls.w	8006458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3724      	adds	r7, #36	@ 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40023800 	.word	0x40023800
 800674c:	40013800 	.word	0x40013800
 8006750:	40020000 	.word	0x40020000
 8006754:	40020400 	.word	0x40020400
 8006758:	40020800 	.word	0x40020800
 800675c:	40020c00 	.word	0x40020c00
 8006760:	40021000 	.word	0x40021000
 8006764:	40021400 	.word	0x40021400
 8006768:	40021800 	.word	0x40021800
 800676c:	40021c00 	.word	0x40021c00
 8006770:	40013c00 	.word	0x40013c00

08006774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	887b      	ldrh	r3, [r7, #2]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	e001      	b.n	8006796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	807b      	strh	r3, [r7, #2]
 80067b0:	4613      	mov	r3, r2
 80067b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b4:	787b      	ldrb	r3, [r7, #1]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067c0:	e003      	b.n	80067ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	041a      	lsls	r2, r3, #16
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	619a      	str	r2, [r3, #24]
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af02      	add	r7, sp, #8
 80067dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e101      	b.n	80069ec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f006 fa8e 	bl	800cd24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2203      	movs	r2, #3
 800680c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006816:	d102      	bne.n	800681e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f002 fedb 	bl	80095de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7c1a      	ldrb	r2, [r3, #16]
 8006830:	f88d 2000 	strb.w	r2, [sp]
 8006834:	3304      	adds	r3, #4
 8006836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006838:	f002 fdba 	bl	80093b0 <USB_CoreInit>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0ce      	b.n	80069ec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f002 fed3 	bl	8009600 <USB_SetCurrentMode>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0bf      	b.n	80069ec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
 8006870:	e04a      	b.n	8006908 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006872:	7bfa      	ldrb	r2, [r7, #15]
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3315      	adds	r3, #21
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006886:	7bfa      	ldrb	r2, [r7, #15]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	3314      	adds	r3, #20
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800689a:	7bfa      	ldrb	r2, [r7, #15]
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	b298      	uxth	r0, r3
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	332e      	adds	r3, #46	@ 0x2e
 80068ae:	4602      	mov	r2, r0
 80068b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068b2:	7bfa      	ldrb	r2, [r7, #15]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	3318      	adds	r3, #24
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068c6:	7bfa      	ldrb	r2, [r7, #15]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	331c      	adds	r3, #28
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068da:	7bfa      	ldrb	r2, [r7, #15]
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3320      	adds	r3, #32
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068ee:	7bfa      	ldrb	r2, [r7, #15]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3324      	adds	r3, #36	@ 0x24
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	3301      	adds	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	791b      	ldrb	r3, [r3, #4]
 800690c:	7bfa      	ldrb	r2, [r7, #15]
 800690e:	429a      	cmp	r2, r3
 8006910:	d3af      	bcc.n	8006872 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	e044      	b.n	80069a2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006918:	7bfa      	ldrb	r2, [r7, #15]
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006940:	7bfa      	ldrb	r2, [r7, #15]
 8006942:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006944:	7bfa      	ldrb	r2, [r7, #15]
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800695a:	7bfa      	ldrb	r2, [r7, #15]
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006970:	7bfa      	ldrb	r2, [r7, #15]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006986:	7bfa      	ldrb	r2, [r7, #15]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	3301      	adds	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	791b      	ldrb	r3, [r3, #4]
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d3b5      	bcc.n	8006918 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7c1a      	ldrb	r2, [r3, #16]
 80069b4:	f88d 2000 	strb.w	r2, [sp]
 80069b8:	3304      	adds	r3, #4
 80069ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069bc:	f002 fe6c 	bl	8009698 <USB_DevInit>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e00c      	b.n	80069ec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f003 feb6 	bl	800a756 <USB_DevDisconnect>

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_PCD_Start+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e022      	b.n	8006a56 <HAL_PCD_Start+0x62>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f002 fdbd 	bl	80095bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f003 fe64 	bl	800a714 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a5e:	b590      	push	{r4, r7, lr}
 8006a60:	b08d      	sub	sp, #52	@ 0x34
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f003 ff22 	bl	800a8be <USB_GetMode>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 848c 	bne.w	800739a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f003 fe86 	bl	800a798 <USB_ReadInterrupts>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8482 	beq.w	8007398 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	0a1b      	lsrs	r3, r3, #8
 8006a9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f003 fe73 	bl	800a798 <USB_ReadInterrupts>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d107      	bne.n	8006acc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f002 0202 	and.w	r2, r2, #2
 8006aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f003 fe61 	bl	800a798 <USB_ReadInterrupts>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d161      	bne.n	8006ba4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0210 	bic.w	r2, r2, #16
 8006aee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b1a:	d124      	bne.n	8006b66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d035      	beq.n	8006b94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6a38      	ldr	r0, [r7, #32]
 8006b3c:	f003 fc98 	bl	800a470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	091b      	lsrs	r3, r3, #4
 8006b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b4c:	441a      	add	r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b5e:	441a      	add	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	615a      	str	r2, [r3, #20]
 8006b64:	e016      	b.n	8006b94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006b70:	d110      	bne.n	8006b94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b78:	2208      	movs	r2, #8
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6a38      	ldr	r0, [r7, #32]
 8006b7e:	f003 fc77 	bl	800a470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b8e:	441a      	add	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0210 	orr.w	r2, r2, #16
 8006ba2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f003 fdf5 	bl	800a798 <USB_ReadInterrupts>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006bb8:	f040 80a7 	bne.w	8006d0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f003 fdfa 	bl	800a7be <USB_ReadDevAllOutEpInterrupt>
 8006bca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006bcc:	e099      	b.n	8006d02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 808e 	beq.w	8006cf6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f003 fe1e 	bl	800a826 <USB_ReadDevOutEPInterrupt>
 8006bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	461a      	mov	r2, r3
 8006c04:	2301      	movs	r3, #1
 8006c06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fea4 	bl	8007958 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c26:	461a      	mov	r2, r3
 8006c28:	2308      	movs	r3, #8
 8006c2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 ff7a 	bl	8007b28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d030      	beq.n	8006cbc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d109      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d108      	bne.n	8006caa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f006 f943 	bl	800cf30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2302      	movs	r3, #2
 8006cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cf4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f47f af62 	bne.w	8006bce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f003 fd42 	bl	800a798 <USB_ReadInterrupts>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d1e:	f040 80db 	bne.w	8006ed8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f003 fd63 	bl	800a7f2 <USB_ReadDevAllInEpInterrupt>
 8006d2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006d32:	e0cd      	b.n	8006ed0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80c2 	beq.w	8006ec4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f003 fd89 	bl	800a862 <USB_ReadDevInEPInterrupt>
 8006d50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d057      	beq.n	8006e0c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	2201      	movs	r2, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	43db      	mvns	r3, r3
 8006d76:	69f9      	ldr	r1, [r7, #28]
 8006d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2301      	movs	r3, #1
 8006d90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	799b      	ldrb	r3, [r3, #6]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d132      	bne.n	8006e00 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9e:	4613      	mov	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	3320      	adds	r3, #32
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4403      	add	r3, r0
 8006dba:	331c      	adds	r3, #28
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4419      	add	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4403      	add	r3, r0
 8006dce:	3320      	adds	r3, #32
 8006dd0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d113      	bne.n	8006e00 <HAL_PCD_IRQHandler+0x3a2>
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	3324      	adds	r3, #36	@ 0x24
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d108      	bne.n	8006e00 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	f003 fd90 	bl	800a920 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f006 f80d 	bl	800ce26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e22:	461a      	mov	r2, r3
 8006e24:	2308      	movs	r3, #8
 8006e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2310      	movs	r3, #16
 8006e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d023      	beq.n	8006eb2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e6c:	6a38      	ldr	r0, [r7, #32]
 8006e6e:	f002 fd77 	bl	8009960 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	3310      	adds	r3, #16
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	3304      	adds	r3, #4
 8006e84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	78db      	ldrb	r3, [r3, #3]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d108      	bne.n	8006ea0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f006 f85a 	bl	800cf54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	2302      	movs	r3, #2
 8006eb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fcbd 	bl	800783e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f af2e 	bne.w	8006d34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f003 fc5b 	bl	800a798 <USB_ReadInterrupts>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eec:	d122      	bne.n	8006f34 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d108      	bne.n	8006f1e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fea4 	bl	8007c64 <HAL_PCDEx_LPM_Callback>
 8006f1c:	e002      	b.n	8006f24 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f005 fff8 	bl	800cf14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695a      	ldr	r2, [r3, #20]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f003 fc2d 	bl	800a798 <USB_ReadInterrupts>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f48:	d112      	bne.n	8006f70 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d102      	bne.n	8006f60 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f005 ffb4 	bl	800cec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006f6e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f003 fc0f 	bl	800a798 <USB_ReadInterrupts>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f84:	f040 80b7 	bne.w	80070f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2110      	movs	r1, #16
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 fcdc 	bl	8009960 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fac:	e046      	b.n	800703c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fe0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ff4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007014:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007030:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007034:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	3301      	adds	r3, #1
 800703a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	461a      	mov	r2, r3
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	4293      	cmp	r3, r2
 8007046:	d3b2      	bcc.n	8006fae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007056:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800705a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7bdb      	ldrb	r3, [r3, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d016      	beq.n	8007092 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007074:	f043 030b 	orr.w	r3, r3, #11
 8007078:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800708a:	f043 030b 	orr.w	r3, r3, #11
 800708e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007090:	e015      	b.n	80070be <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80070a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80070a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b8:	f043 030b 	orr.w	r3, r3, #11
 80070bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070e0:	461a      	mov	r2, r3
 80070e2:	f003 fc1d 	bl	800a920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695a      	ldr	r2, [r3, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80070f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f003 fb4c 	bl	800a798 <USB_ReadInterrupts>
 8007100:	4603      	mov	r3, r0
 8007102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800710a:	d123      	bne.n	8007154 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f003 fbe2 	bl	800a8da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f002 fc99 	bl	8009a52 <USB_GetDevSpeed>
 8007120:	4603      	mov	r3, r0
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681c      	ldr	r4, [r3, #0]
 800712c:	f001 fa0a 	bl	8008544 <HAL_RCC_GetHCLKFreq>
 8007130:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007136:	461a      	mov	r2, r3
 8007138:	4620      	mov	r0, r4
 800713a:	f002 f99d 	bl	8009478 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f005 fe99 	bl	800ce76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695a      	ldr	r2, [r3, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007152:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f003 fb1d 	bl	800a798 <USB_ReadInterrupts>
 800715e:	4603      	mov	r3, r0
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10a      	bne.n	800717e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f005 fe76 	bl	800ce5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f002 0208 	and.w	r2, r2, #8
 800717c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f003 fb08 	bl	800a798 <USB_ReadInterrupts>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718e:	2b80      	cmp	r3, #128	@ 0x80
 8007190:	d123      	bne.n	80071da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800719e:	2301      	movs	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a2:	e014      	b.n	80071ce <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a8:	4613      	mov	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fb0a 	bl	80077dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	3301      	adds	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d3e4      	bcc.n	80071a4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f003 fada 	bl	800a798 <USB_ReadInterrupts>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ee:	d13c      	bne.n	800726a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071f0:	2301      	movs	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f4:	e02b      	b.n	800724e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720a:	4613      	mov	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	3318      	adds	r3, #24
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d115      	bne.n	8007248 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800721c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800721e:	2b00      	cmp	r3, #0
 8007220:	da12      	bge.n	8007248 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3317      	adds	r3, #23
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800723e:	b2db      	uxtb	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 faca 	bl	80077dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	3301      	adds	r3, #1
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	791b      	ldrb	r3, [r3, #4]
 8007252:	461a      	mov	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	4293      	cmp	r3, r2
 8007258:	d3cd      	bcc.n	80071f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695a      	ldr	r2, [r3, #20]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f003 fa92 	bl	800a798 <USB_ReadInterrupts>
 8007274:	4603      	mov	r3, r0
 8007276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800727a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800727e:	d156      	bne.n	800732e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007280:	2301      	movs	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
 8007284:	e045      	b.n	8007312 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729a:	4613      	mov	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d12e      	bne.n	800730c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da2b      	bge.n	800730c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80072c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d121      	bne.n	800730c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007304:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007308:	6053      	str	r3, [r2, #4]
            break;
 800730a:	e008      	b.n	800731e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	3301      	adds	r3, #1
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	791b      	ldrb	r3, [r3, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	4293      	cmp	r3, r2
 800731c:	d3b3      	bcc.n	8007286 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	695a      	ldr	r2, [r3, #20]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800732c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f003 fa30 	bl	800a798 <USB_ReadInterrupts>
 8007338:	4603      	mov	r3, r0
 800733a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007342:	d10a      	bne.n	800735a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f005 fe17 	bl	800cf78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f003 fa1a 	bl	800a798 <USB_ReadInterrupts>
 8007364:	4603      	mov	r3, r0
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b04      	cmp	r3, #4
 800736c:	d115      	bne.n	800739a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f005 fe07 	bl	800cf94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6859      	ldr	r1, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	e000      	b.n	800739a <HAL_PCD_IRQHandler+0x93c>
      return;
 8007398:	bf00      	nop
    }
  }
}
 800739a:	3734      	adds	r7, #52	@ 0x34
 800739c:	46bd      	mov	sp, r7
 800739e:	bd90      	pop	{r4, r7, pc}

080073a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_PCD_SetAddress+0x1a>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e012      	b.n	80073e0 <HAL_PCD_SetAddress+0x40>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f003 f979 	bl	800a6c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	4608      	mov	r0, r1
 80073f2:	4611      	mov	r1, r2
 80073f4:	461a      	mov	r2, r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	70fb      	strb	r3, [r7, #3]
 80073fa:	460b      	mov	r3, r1
 80073fc:	803b      	strh	r3, [r7, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da0f      	bge.n	800742e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	4613      	mov	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	3310      	adds	r3, #16
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	3304      	adds	r3, #4
 8007424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	705a      	strb	r2, [r3, #1]
 800742c:	e00f      	b.n	800744e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	3304      	adds	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	b2da      	uxtb	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800745a:	883b      	ldrh	r3, [r7, #0]
 800745c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	78ba      	ldrb	r2, [r7, #2]
 8007468:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800747c:	78bb      	ldrb	r3, [r7, #2]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d102      	bne.n	8007488 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_PCD_EP_Open+0xae>
 8007492:	2302      	movs	r3, #2
 8007494:	e00e      	b.n	80074b4 <HAL_PCD_EP_Open+0xcc>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f002 faf9 	bl	8009a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80074b2:	7afb      	ldrb	r3, [r7, #11]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da0f      	bge.n	80074f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f003 020f 	and.w	r2, r3, #15
 80074d6:	4613      	mov	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	3310      	adds	r3, #16
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	3304      	adds	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	705a      	strb	r2, [r3, #1]
 80074ee:	e00f      	b.n	8007510 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	f003 020f 	and.w	r2, r3, #15
 80074f6:	4613      	mov	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4413      	add	r3, r2
 8007506:	3304      	adds	r3, #4
 8007508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	b2da      	uxtb	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_PCD_EP_Close+0x6e>
 8007526:	2302      	movs	r3, #2
 8007528:	e00e      	b.n	8007548 <HAL_PCD_EP_Close+0x8c>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	4618      	mov	r0, r3
 800753a:	f002 fb37 	bl	8009bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	460b      	mov	r3, r1
 800755e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	3304      	adds	r3, #4
 8007578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2200      	movs	r2, #0
 800758a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2200      	movs	r2, #0
 8007590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	b2da      	uxtb	r2, r3
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	799b      	ldrb	r3, [r3, #6]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d102      	bne.n	80075ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	799b      	ldrb	r3, [r3, #6]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6979      	ldr	r1, [r7, #20]
 80075b8:	f002 fbd4 	bl	8009d64 <USB_EPStartXfer>

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80075e8:	681b      	ldr	r3, [r3, #0]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b086      	sub	sp, #24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	460b      	mov	r3, r1
 8007604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	f003 020f 	and.w	r2, r3, #15
 800760c:	4613      	mov	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	3310      	adds	r3, #16
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	3304      	adds	r3, #4
 800761c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2200      	movs	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2201      	movs	r2, #1
 8007634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007636:	7afb      	ldrb	r3, [r7, #11]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	799b      	ldrb	r3, [r3, #6]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d102      	bne.n	8007650 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	799b      	ldrb	r3, [r3, #6]
 8007658:	461a      	mov	r2, r3
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	f002 fb82 	bl	8009d64 <USB_EPStartXfer>

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	7912      	ldrb	r2, [r2, #4]
 8007680:	4293      	cmp	r3, r2
 8007682:	d901      	bls.n	8007688 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e04f      	b.n	8007728 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800768c:	2b00      	cmp	r3, #0
 800768e:	da0f      	bge.n	80076b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	f003 020f 	and.w	r2, r3, #15
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	3310      	adds	r3, #16
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	4413      	add	r3, r2
 80076a4:	3304      	adds	r3, #4
 80076a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	705a      	strb	r2, [r3, #1]
 80076ae:	e00d      	b.n	80076cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4613      	mov	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	3304      	adds	r3, #4
 80076c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_PCD_EP_SetStall+0x82>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e01d      	b.n	8007728 <HAL_PCD_EP_SetStall+0xbe>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 ff10 	bl	800a520 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7999      	ldrb	r1, [r3, #6]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007718:	461a      	mov	r2, r3
 800771a:	f003 f901 	bl	800a920 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	7912      	ldrb	r2, [r2, #4]
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e042      	b.n	80077d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800774e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007752:	2b00      	cmp	r3, #0
 8007754:	da0f      	bge.n	8007776 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	4613      	mov	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3310      	adds	r3, #16
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	3304      	adds	r3, #4
 800776c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	705a      	strb	r2, [r3, #1]
 8007774:	e00f      	b.n	8007796 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	3304      	adds	r3, #4
 800778e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_PCD_EP_ClrStall+0x86>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e00e      	b.n	80077d4 <HAL_PCD_EP_ClrStall+0xa4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f002 ff19 	bl	800a5fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80077e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da0c      	bge.n	800780a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	3310      	adds	r3, #16
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3304      	adds	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e00c      	b.n	8007824 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	f003 020f 	and.w	r2, r3, #15
 8007810:	4613      	mov	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	4618      	mov	r0, r3
 800782c:	f002 fd38 	bl	800a2a0 <USB_EPStopXfer>
 8007830:	4603      	mov	r3, r0
 8007832:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007834:	7afb      	ldrb	r3, [r7, #11]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b08a      	sub	sp, #40	@ 0x28
 8007842:	af02      	add	r7, sp, #8
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	3310      	adds	r3, #16
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	3304      	adds	r3, #4
 8007864:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	695a      	ldr	r2, [r3, #20]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	429a      	cmp	r2, r3
 8007870:	d901      	bls.n	8007876 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e06b      	b.n	800794e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	429a      	cmp	r2, r3
 800788a:	d902      	bls.n	8007892 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3303      	adds	r3, #3
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800789a:	e02a      	b.n	80078f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d902      	bls.n	80078b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3303      	adds	r3, #3
 80078bc:	089b      	lsrs	r3, r3, #2
 80078be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	68d9      	ldr	r1, [r3, #12]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4603      	mov	r3, r0
 80078d4:	6978      	ldr	r0, [r7, #20]
 80078d6:	f002 fd8d 	bl	800a3f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	429a      	cmp	r2, r3
 8007906:	d809      	bhi.n	800791c <PCD_WriteEmptyTxFifo+0xde>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007910:	429a      	cmp	r2, r3
 8007912:	d203      	bcs.n	800791c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1bf      	bne.n	800789c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	429a      	cmp	r2, r3
 8007926:	d811      	bhi.n	800794c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	2201      	movs	r2, #1
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	43db      	mvns	r3, r3
 8007942:	6939      	ldr	r1, [r7, #16]
 8007944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007948:	4013      	ands	r3, r2
 800794a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	333c      	adds	r3, #60	@ 0x3c
 8007970:	3304      	adds	r3, #4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	799b      	ldrb	r3, [r3, #6]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d17b      	bne.n	8007a86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d015      	beq.n	80079c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4a61      	ldr	r2, [pc, #388]	@ (8007b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	f240 80b9 	bls.w	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80b3 	beq.w	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ba:	461a      	mov	r2, r3
 80079bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079c0:	6093      	str	r3, [r2, #8]
 80079c2:	e0a7      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079da:	461a      	mov	r2, r3
 80079dc:	2320      	movs	r3, #32
 80079de:	6093      	str	r3, [r2, #8]
 80079e0:	e098      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 8093 	bne.w	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	4a4b      	ldr	r2, [pc, #300]	@ (8007b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d90f      	bls.n	8007a16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	6093      	str	r3, [r2, #8]
 8007a14:	e07e      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	3304      	adds	r3, #4
 8007a2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	0159      	lsls	r1, r3, #5
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	440b      	add	r3, r1
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d114      	bne.n	8007a78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a60:	461a      	mov	r2, r3
 8007a62:	2101      	movs	r1, #1
 8007a64:	f002 ff5c 	bl	800a920 <USB_EP0_OutStart>
 8007a68:	e006      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f005 f9b6 	bl	800cdf0 <HAL_PCD_DataOutStageCallback>
 8007a84:	e046      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	4a26      	ldr	r2, [pc, #152]	@ (8007b24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d124      	bne.n	8007ad8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aaa:	6093      	str	r3, [r2, #8]
 8007aac:	e032      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f005 f98d 	bl	800cdf0 <HAL_PCD_DataOutStageCallback>
 8007ad6:	e01d      	b.n	8007b14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d114      	bne.n	8007b08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d108      	bne.n	8007b08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b00:	461a      	mov	r2, r3
 8007b02:	2100      	movs	r1, #0
 8007b04:	f002 ff0c 	bl	800a920 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f005 f96e 	bl	800cdf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	4f54300a 	.word	0x4f54300a
 8007b24:	4f54310a 	.word	0x4f54310a

08007b28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	333c      	adds	r3, #60	@ 0x3c
 8007b40:	3304      	adds	r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d90e      	bls.n	8007b7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b74:	461a      	mov	r2, r3
 8007b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f005 f925 	bl	800cdcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d90c      	bls.n	8007ba4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	799b      	ldrb	r3, [r3, #6]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d108      	bne.n	8007ba4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	f002 febe 	bl	800a920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	4f54300a 	.word	0x4f54300a

08007bb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007bd2:	883b      	ldrh	r3, [r7, #0]
 8007bd4:	0419      	lsls	r1, r3, #16
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8007be0:	e028      	b.n	8007c34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4413      	add	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
 8007bf4:	e00d      	b.n	8007c12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	3340      	adds	r3, #64	@ 0x40
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	7bfa      	ldrb	r2, [r7, #15]
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d3ec      	bcc.n	8007bf6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c1c:	883b      	ldrh	r3, [r7, #0]
 8007c1e:	0418      	lsls	r0, r3, #16
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	4302      	orrs	r2, r0
 8007c2c:	3340      	adds	r3, #64	@ 0x40
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	887a      	ldrh	r2, [r7, #2]
 8007c54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e267      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d075      	beq.n	8007d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007c9a:	4b88      	ldr	r3, [pc, #544]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d00c      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ca6:	4b85      	ldr	r3, [pc, #532]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d112      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cb2:	4b82      	ldr	r3, [pc, #520]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05b      	beq.n	8007d84 <HAL_RCC_OscConfig+0x108>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d157      	bne.n	8007d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e242      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d106      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x74>
 8007ce2:	4b76      	ldr	r3, [pc, #472]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a75      	ldr	r2, [pc, #468]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e01d      	b.n	8007d2c <HAL_RCC_OscConfig+0xb0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCC_OscConfig+0x98>
 8007cfa:	4b70      	ldr	r3, [pc, #448]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4b6d      	ldr	r3, [pc, #436]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e00b      	b.n	8007d2c <HAL_RCC_OscConfig+0xb0>
 8007d14:	4b69      	ldr	r3, [pc, #420]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a68      	ldr	r2, [pc, #416]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4b66      	ldr	r3, [pc, #408]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a65      	ldr	r2, [pc, #404]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d013      	beq.n	8007d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d34:	f7fc fe06 	bl	8004944 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d3c:	f7fc fe02 	bl	8004944 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	@ 0x64
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e207      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0xc0>
 8007d5a:	e014      	b.n	8007d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d5c:	f7fc fdf2 	bl	8004944 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d64:	f7fc fdee 	bl	8004944 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	@ 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e1f3      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d76:	4b51      	ldr	r3, [pc, #324]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0xe8>
 8007d82:	e000      	b.n	8007d86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d063      	beq.n	8007e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007d92:	4b4a      	ldr	r3, [pc, #296]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 030c 	and.w	r3, r3, #12
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d9e:	4b47      	ldr	r3, [pc, #284]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d11c      	bne.n	8007de4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007daa:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d116      	bne.n	8007de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007db6:	4b41      	ldr	r3, [pc, #260]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_RCC_OscConfig+0x152>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d001      	beq.n	8007dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e1c7      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dce:	4b3b      	ldr	r3, [pc, #236]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4937      	ldr	r1, [pc, #220]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de2:	e03a      	b.n	8007e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d020      	beq.n	8007e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dec:	4b34      	ldr	r3, [pc, #208]	@ (8007ec0 <HAL_RCC_OscConfig+0x244>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df2:	f7fc fda7 	bl	8004944 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dfa:	f7fc fda3 	bl	8004944 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e1a8      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e18:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	4925      	ldr	r1, [pc, #148]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	e015      	b.n	8007e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ec0 <HAL_RCC_OscConfig+0x244>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fc fd86 	bl	8004944 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e3c:	f7fc fd82 	bl	8004944 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e187      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d036      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <HAL_RCC_OscConfig+0x248>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e74:	f7fc fd66 	bl	8004944 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e7c:	f7fc fd62 	bl	8004944 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e167      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007ebc <HAL_RCC_OscConfig+0x240>)
 8007e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x200>
 8007e9a:	e01b      	b.n	8007ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <HAL_RCC_OscConfig+0x248>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ea2:	f7fc fd4f 	bl	8004944 <HAL_GetTick>
 8007ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ea8:	e00e      	b.n	8007ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eaa:	f7fc fd4b 	bl	8004944 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d907      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e150      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	42470000 	.word	0x42470000
 8007ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec8:	4b88      	ldr	r3, [pc, #544]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ea      	bne.n	8007eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8097 	beq.w	8008010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ee6:	4b81      	ldr	r3, [pc, #516]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10f      	bne.n	8007f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efa:	4a7c      	ldr	r2, [pc, #496]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f02:	4b7a      	ldr	r3, [pc, #488]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f12:	4b77      	ldr	r3, [pc, #476]	@ (80080f0 <HAL_RCC_OscConfig+0x474>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d118      	bne.n	8007f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f1e:	4b74      	ldr	r3, [pc, #464]	@ (80080f0 <HAL_RCC_OscConfig+0x474>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a73      	ldr	r2, [pc, #460]	@ (80080f0 <HAL_RCC_OscConfig+0x474>)
 8007f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f2a:	f7fc fd0b 	bl	8004944 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f32:	f7fc fd07 	bl	8004944 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e10c      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f44:	4b6a      	ldr	r3, [pc, #424]	@ (80080f0 <HAL_RCC_OscConfig+0x474>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0f0      	beq.n	8007f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d106      	bne.n	8007f66 <HAL_RCC_OscConfig+0x2ea>
 8007f58:	4b64      	ldr	r3, [pc, #400]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5c:	4a63      	ldr	r2, [pc, #396]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f64:	e01c      	b.n	8007fa0 <HAL_RCC_OscConfig+0x324>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCC_OscConfig+0x30c>
 8007f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f72:	4a5e      	ldr	r2, [pc, #376]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f74:	f043 0304 	orr.w	r3, r3, #4
 8007f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f86:	e00b      	b.n	8007fa0 <HAL_RCC_OscConfig+0x324>
 8007f88:	4b58      	ldr	r3, [pc, #352]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8c:	4a57      	ldr	r2, [pc, #348]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f94:	4b55      	ldr	r3, [pc, #340]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f98:	4a54      	ldr	r2, [pc, #336]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007f9a:	f023 0304 	bic.w	r3, r3, #4
 8007f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d015      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa8:	f7fc fccc 	bl	8004944 <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fae:	e00a      	b.n	8007fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb0:	f7fc fcc8 	bl	8004944 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e0cb      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fc6:	4b49      	ldr	r3, [pc, #292]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0ee      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x334>
 8007fd2:	e014      	b.n	8007ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fd4:	f7fc fcb6 	bl	8004944 <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fdc:	f7fc fcb2 	bl	8004944 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e0b5      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1ee      	bne.n	8007fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d105      	bne.n	8008010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008004:	4b39      	ldr	r3, [pc, #228]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	4a38      	ldr	r2, [pc, #224]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 800800a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800800e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80a1 	beq.w	800815c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800801a:	4b34      	ldr	r3, [pc, #208]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
 8008022:	2b08      	cmp	r3, #8
 8008024:	d05c      	beq.n	80080e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d141      	bne.n	80080b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800802e:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <HAL_RCC_OscConfig+0x478>)
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008034:	f7fc fc86 	bl	8004944 <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803c:	f7fc fc82 	bl	8004944 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e087      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800804e:	4b27      	ldr	r3, [pc, #156]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1f0      	bne.n	800803c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69da      	ldr	r2, [r3, #28]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008068:	019b      	lsls	r3, r3, #6
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	3b01      	subs	r3, #1
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	061b      	lsls	r3, r3, #24
 800807e:	491b      	ldr	r1, [pc, #108]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 8008080:	4313      	orrs	r3, r2
 8008082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008084:	4b1b      	ldr	r3, [pc, #108]	@ (80080f4 <HAL_RCC_OscConfig+0x478>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800808a:	f7fc fc5b 	bl	8004944 <HAL_GetTick>
 800808e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008092:	f7fc fc57 	bl	8004944 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e05c      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a4:	4b11      	ldr	r3, [pc, #68]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <HAL_RCC_OscConfig+0x416>
 80080b0:	e054      	b.n	800815c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b2:	4b10      	ldr	r3, [pc, #64]	@ (80080f4 <HAL_RCC_OscConfig+0x478>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b8:	f7fc fc44 	bl	8004944 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fc fc40 	bl	8004944 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e045      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d2:	4b06      	ldr	r3, [pc, #24]	@ (80080ec <HAL_RCC_OscConfig+0x470>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x444>
 80080de:	e03d      	b.n	800815c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e038      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
 80080ec:	40023800 	.word	0x40023800
 80080f0:	40007000 	.word	0x40007000
 80080f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <HAL_RCC_OscConfig+0x4ec>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d028      	beq.n	8008158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008110:	429a      	cmp	r2, r3
 8008112:	d121      	bne.n	8008158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d11a      	bne.n	8008158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008128:	4013      	ands	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800812e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008130:	4293      	cmp	r3, r2
 8008132:	d111      	bne.n	8008158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	085b      	lsrs	r3, r3, #1
 8008140:	3b01      	subs	r3, #1
 8008142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008144:	429a      	cmp	r2, r3
 8008146:	d107      	bne.n	8008158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008154:	429a      	cmp	r2, r3
 8008156:	d001      	beq.n	800815c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	40023800 	.word	0x40023800

0800816c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e0cc      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008180:	4b68      	ldr	r3, [pc, #416]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d90c      	bls.n	80081a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800818e:	4b65      	ldr	r3, [pc, #404]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008196:	4b63      	ldr	r3, [pc, #396]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d001      	beq.n	80081a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e0b8      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d020      	beq.n	80081f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081c0:	4b59      	ldr	r3, [pc, #356]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	4a58      	ldr	r2, [pc, #352]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80081ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081d8:	4b53      	ldr	r3, [pc, #332]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a52      	ldr	r2, [pc, #328]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081e4:	4b50      	ldr	r3, [pc, #320]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	494d      	ldr	r1, [pc, #308]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d044      	beq.n	800828c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800820a:	4b47      	ldr	r3, [pc, #284]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d119      	bne.n	800824a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e07f      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d003      	beq.n	800822a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008226:	2b03      	cmp	r3, #3
 8008228:	d107      	bne.n	800823a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800822a:	4b3f      	ldr	r3, [pc, #252]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e06f      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800823a:	4b3b      	ldr	r3, [pc, #236]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e067      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800824a:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f023 0203 	bic.w	r2, r3, #3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4934      	ldr	r1, [pc, #208]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 8008258:	4313      	orrs	r3, r2
 800825a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800825c:	f7fc fb72 	bl	8004944 <HAL_GetTick>
 8008260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008262:	e00a      	b.n	800827a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008264:	f7fc fb6e 	bl	8004944 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e04f      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827a:	4b2b      	ldr	r3, [pc, #172]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 020c 	and.w	r2, r3, #12
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	429a      	cmp	r2, r3
 800828a:	d1eb      	bne.n	8008264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800828c:	4b25      	ldr	r3, [pc, #148]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d20c      	bcs.n	80082b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800829a:	4b22      	ldr	r3, [pc, #136]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a2:	4b20      	ldr	r3, [pc, #128]	@ (8008324 <HAL_RCC_ClockConfig+0x1b8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d001      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e032      	b.n	800831a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082c0:	4b19      	ldr	r3, [pc, #100]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4916      	ldr	r1, [pc, #88]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082de:	4b12      	ldr	r3, [pc, #72]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	490e      	ldr	r1, [pc, #56]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082f2:	f000 f821 	bl	8008338 <HAL_RCC_GetSysClockFreq>
 80082f6:	4602      	mov	r2, r0
 80082f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008328 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	490a      	ldr	r1, [pc, #40]	@ (800832c <HAL_RCC_ClockConfig+0x1c0>)
 8008304:	5ccb      	ldrb	r3, [r1, r3]
 8008306:	fa22 f303 	lsr.w	r3, r2, r3
 800830a:	4a09      	ldr	r2, [pc, #36]	@ (8008330 <HAL_RCC_ClockConfig+0x1c4>)
 800830c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800830e:	4b09      	ldr	r3, [pc, #36]	@ (8008334 <HAL_RCC_ClockConfig+0x1c8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f7fc fad2 	bl	80048bc <HAL_InitTick>

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	40023c00 	.word	0x40023c00
 8008328:	40023800 	.word	0x40023800
 800832c:	08010a08 	.word	0x08010a08
 8008330:	20000020 	.word	0x20000020
 8008334:	20000034 	.word	0x20000034

08008338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800833c:	b094      	sub	sp, #80	@ 0x50
 800833e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008350:	4b79      	ldr	r3, [pc, #484]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f003 030c 	and.w	r3, r3, #12
 8008358:	2b08      	cmp	r3, #8
 800835a:	d00d      	beq.n	8008378 <HAL_RCC_GetSysClockFreq+0x40>
 800835c:	2b08      	cmp	r3, #8
 800835e:	f200 80e1 	bhi.w	8008524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <HAL_RCC_GetSysClockFreq+0x34>
 8008366:	2b04      	cmp	r3, #4
 8008368:	d003      	beq.n	8008372 <HAL_RCC_GetSysClockFreq+0x3a>
 800836a:	e0db      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800836c:	4b73      	ldr	r3, [pc, #460]	@ (800853c <HAL_RCC_GetSysClockFreq+0x204>)
 800836e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008370:	e0db      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008372:	4b73      	ldr	r3, [pc, #460]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x208>)
 8008374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008376:	e0d8      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008378:	4b6f      	ldr	r3, [pc, #444]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008380:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008382:	4b6d      	ldr	r3, [pc, #436]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d063      	beq.n	8008456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800838e:	4b6a      	ldr	r3, [pc, #424]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	099b      	lsrs	r3, r3, #6
 8008394:	2200      	movs	r2, #0
 8008396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a2:	2300      	movs	r3, #0
 80083a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	f04f 0000 	mov.w	r0, #0
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	0159      	lsls	r1, r3, #5
 80083b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083bc:	0150      	lsls	r0, r2, #5
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4621      	mov	r1, r4
 80083c4:	1a51      	subs	r1, r2, r1
 80083c6:	6139      	str	r1, [r7, #16]
 80083c8:	4629      	mov	r1, r5
 80083ca:	eb63 0301 	sbc.w	r3, r3, r1
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083dc:	4659      	mov	r1, fp
 80083de:	018b      	lsls	r3, r1, #6
 80083e0:	4651      	mov	r1, sl
 80083e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083e6:	4651      	mov	r1, sl
 80083e8:	018a      	lsls	r2, r1, #6
 80083ea:	4651      	mov	r1, sl
 80083ec:	ebb2 0801 	subs.w	r8, r2, r1
 80083f0:	4659      	mov	r1, fp
 80083f2:	eb63 0901 	sbc.w	r9, r3, r1
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800840a:	4690      	mov	r8, r2
 800840c:	4699      	mov	r9, r3
 800840e:	4623      	mov	r3, r4
 8008410:	eb18 0303 	adds.w	r3, r8, r3
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	462b      	mov	r3, r5
 8008418:	eb49 0303 	adc.w	r3, r9, r3
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	f04f 0300 	mov.w	r3, #0
 8008426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800842a:	4629      	mov	r1, r5
 800842c:	024b      	lsls	r3, r1, #9
 800842e:	4621      	mov	r1, r4
 8008430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008434:	4621      	mov	r1, r4
 8008436:	024a      	lsls	r2, r1, #9
 8008438:	4610      	mov	r0, r2
 800843a:	4619      	mov	r1, r3
 800843c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800843e:	2200      	movs	r2, #0
 8008440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008448:	f7f8 fbfe 	bl	8000c48 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4613      	mov	r3, r2
 8008452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008454:	e058      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008456:	4b38      	ldr	r3, [pc, #224]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	099b      	lsrs	r3, r3, #6
 800845c:	2200      	movs	r2, #0
 800845e:	4618      	mov	r0, r3
 8008460:	4611      	mov	r1, r2
 8008462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008466:	623b      	str	r3, [r7, #32]
 8008468:	2300      	movs	r3, #0
 800846a:	627b      	str	r3, [r7, #36]	@ 0x24
 800846c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	f04f 0000 	mov.w	r0, #0
 8008478:	f04f 0100 	mov.w	r1, #0
 800847c:	0159      	lsls	r1, r3, #5
 800847e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008482:	0150      	lsls	r0, r2, #5
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4641      	mov	r1, r8
 800848a:	ebb2 0a01 	subs.w	sl, r2, r1
 800848e:	4649      	mov	r1, r9
 8008490:	eb63 0b01 	sbc.w	fp, r3, r1
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084a8:	ebb2 040a 	subs.w	r4, r2, sl
 80084ac:	eb63 050b 	sbc.w	r5, r3, fp
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	00eb      	lsls	r3, r5, #3
 80084ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084be:	00e2      	lsls	r2, r4, #3
 80084c0:	4614      	mov	r4, r2
 80084c2:	461d      	mov	r5, r3
 80084c4:	4643      	mov	r3, r8
 80084c6:	18e3      	adds	r3, r4, r3
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	464b      	mov	r3, r9
 80084cc:	eb45 0303 	adc.w	r3, r5, r3
 80084d0:	607b      	str	r3, [r7, #4]
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084de:	4629      	mov	r1, r5
 80084e0:	028b      	lsls	r3, r1, #10
 80084e2:	4621      	mov	r1, r4
 80084e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084e8:	4621      	mov	r1, r4
 80084ea:	028a      	lsls	r2, r1, #10
 80084ec:	4610      	mov	r0, r2
 80084ee:	4619      	mov	r1, r3
 80084f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084f2:	2200      	movs	r2, #0
 80084f4:	61bb      	str	r3, [r7, #24]
 80084f6:	61fa      	str	r2, [r7, #28]
 80084f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084fc:	f7f8 fba4 	bl	8000c48 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4613      	mov	r3, r2
 8008506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008508:	4b0b      	ldr	r3, [pc, #44]	@ (8008538 <HAL_RCC_GetSysClockFreq+0x200>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	3301      	adds	r3, #1
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800851a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008522:	e002      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008524:	4b05      	ldr	r3, [pc, #20]	@ (800853c <HAL_RCC_GetSysClockFreq+0x204>)
 8008526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800852a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800852c:	4618      	mov	r0, r3
 800852e:	3750      	adds	r7, #80	@ 0x50
 8008530:	46bd      	mov	sp, r7
 8008532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008536:	bf00      	nop
 8008538:	40023800 	.word	0x40023800
 800853c:	00f42400 	.word	0x00f42400
 8008540:	007a1200 	.word	0x007a1200

08008544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008548:	4b03      	ldr	r3, [pc, #12]	@ (8008558 <HAL_RCC_GetHCLKFreq+0x14>)
 800854a:	681b      	ldr	r3, [r3, #0]
}
 800854c:	4618      	mov	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000020 	.word	0x20000020

0800855c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e07b      	b.n	8008666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d108      	bne.n	8008588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800857e:	d009      	beq.n	8008594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	61da      	str	r2, [r3, #28]
 8008586:	e005      	b.n	8008594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fb fe32 	bl	8004218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80085dc:	431a      	orrs	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008618:	ea42 0103 	orr.w	r1, r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	0c1b      	lsrs	r3, r3, #16
 8008632:	f003 0104 	and.w	r1, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863a:	f003 0210 	and.w	r2, r3, #16
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b088      	sub	sp, #32
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800867e:	f7fc f961 	bl	8004944 <HAL_GetTick>
 8008682:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b01      	cmp	r3, #1
 8008692:	d001      	beq.n	8008698 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008694:	2302      	movs	r3, #2
 8008696:	e12a      	b.n	80088ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_SPI_Transmit+0x36>
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e122      	b.n	80088ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d101      	bne.n	80086b6 <HAL_SPI_Transmit+0x48>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e11b      	b.n	80088ee <HAL_SPI_Transmit+0x280>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2203      	movs	r2, #3
 80086c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	88fa      	ldrh	r2, [r7, #6]
 80086d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008704:	d10f      	bne.n	8008726 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008724:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008730:	2b40      	cmp	r3, #64	@ 0x40
 8008732:	d007      	beq.n	8008744 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008742:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800874c:	d152      	bne.n	80087f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <HAL_SPI_Transmit+0xee>
 8008756:	8b7b      	ldrh	r3, [r7, #26]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d145      	bne.n	80087e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	1c9a      	adds	r2, r3, #2
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008780:	e032      	b.n	80087e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b02      	cmp	r3, #2
 800878e:	d112      	bne.n	80087b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80087b4:	e018      	b.n	80087e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b6:	f7fc f8c5 	bl	8004944 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d803      	bhi.n	80087ce <HAL_SPI_Transmit+0x160>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d102      	bne.n	80087d4 <HAL_SPI_Transmit+0x166>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d109      	bne.n	80087e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e082      	b.n	80088ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1c7      	bne.n	8008782 <HAL_SPI_Transmit+0x114>
 80087f2:	e053      	b.n	800889c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <HAL_SPI_Transmit+0x194>
 80087fc:	8b7b      	ldrh	r3, [r7, #26]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d147      	bne.n	8008892 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008828:	e033      	b.n	8008892 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b02      	cmp	r3, #2
 8008836:	d113      	bne.n	8008860 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	330c      	adds	r3, #12
 8008842:	7812      	ldrb	r2, [r2, #0]
 8008844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800885e:	e018      	b.n	8008892 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008860:	f7fc f870 	bl	8004944 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d803      	bhi.n	8008878 <HAL_SPI_Transmit+0x20a>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d102      	bne.n	800887e <HAL_SPI_Transmit+0x210>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d109      	bne.n	8008892 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e02d      	b.n	80088ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1c6      	bne.n	800882a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fa59 	bl	8008d58 <SPI_EndRxTxTransaction>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3720      	adds	r7, #32
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b08a      	sub	sp, #40	@ 0x28
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008904:	2301      	movs	r3, #1
 8008906:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008908:	f7fc f81c 	bl	8004944 <HAL_GetTick>
 800890c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008914:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800891c:	887b      	ldrh	r3, [r7, #2]
 800891e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008920:	7ffb      	ldrb	r3, [r7, #31]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d00c      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x4a>
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800892c:	d106      	bne.n	800893c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HAL_SPI_TransmitReceive+0x46>
 8008936:	7ffb      	ldrb	r3, [r7, #31]
 8008938:	2b04      	cmp	r3, #4
 800893a:	d001      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800893c:	2302      	movs	r3, #2
 800893e:	e17f      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_SPI_TransmitReceive+0x5c>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_SPI_TransmitReceive+0x5c>
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e174      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_SPI_TransmitReceive+0x6e>
 8008960:	2302      	movs	r3, #2
 8008962:	e16d      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b04      	cmp	r3, #4
 8008976:	d003      	beq.n	8008980 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2205      	movs	r2, #5
 800897c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	887a      	ldrh	r2, [r7, #2]
 8008990:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	887a      	ldrh	r2, [r7, #2]
 8008996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	887a      	ldrh	r2, [r7, #2]
 80089a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	887a      	ldrh	r2, [r7, #2]
 80089a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c0:	2b40      	cmp	r3, #64	@ 0x40
 80089c2:	d007      	beq.n	80089d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089dc:	d17e      	bne.n	8008adc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <HAL_SPI_TransmitReceive+0xf6>
 80089e6:	8afb      	ldrh	r3, [r7, #22]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d16c      	bne.n	8008ac6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f0:	881a      	ldrh	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fc:	1c9a      	adds	r2, r3, #2
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a10:	e059      	b.n	8008ac6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d11b      	bne.n	8008a58 <HAL_SPI_TransmitReceive+0x162>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d016      	beq.n	8008a58 <HAL_SPI_TransmitReceive+0x162>
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d113      	bne.n	8008a58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	881a      	ldrh	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a40:	1c9a      	adds	r2, r3, #2
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d119      	bne.n	8008a9a <HAL_SPI_TransmitReceive+0x1a4>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d014      	beq.n	8008a9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	1c9a      	adds	r2, r3, #2
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a96:	2301      	movs	r3, #1
 8008a98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a9a:	f7fb ff53 	bl	8004944 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d80d      	bhi.n	8008ac6 <HAL_SPI_TransmitReceive+0x1d0>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d009      	beq.n	8008ac6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e0bc      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1a0      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x11c>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d19b      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x11c>
 8008ada:	e082      	b.n	8008be2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HAL_SPI_TransmitReceive+0x1f4>
 8008ae4:	8afb      	ldrh	r3, [r7, #22]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d171      	bne.n	8008bce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b10:	e05d      	b.n	8008bce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d11c      	bne.n	8008b5a <HAL_SPI_TransmitReceive+0x264>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d017      	beq.n	8008b5a <HAL_SPI_TransmitReceive+0x264>
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d114      	bne.n	8008b5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	330c      	adds	r3, #12
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d119      	bne.n	8008b9c <HAL_SPI_TransmitReceive+0x2a6>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d014      	beq.n	8008b9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	b2d2      	uxtb	r2, r2
 8008b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b9c:	f7fb fed2 	bl	8004944 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d803      	bhi.n	8008bb4 <HAL_SPI_TransmitReceive+0x2be>
 8008bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d102      	bne.n	8008bba <HAL_SPI_TransmitReceive+0x2c4>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d109      	bne.n	8008bce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e038      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d19c      	bne.n	8008b12 <HAL_SPI_TransmitReceive+0x21c>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d197      	bne.n	8008b12 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f8b6 	bl	8008d58 <SPI_EndRxTxTransaction>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e01d      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3728      	adds	r7, #40	@ 0x28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	4613      	mov	r3, r2
 8008c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c58:	f7fb fe74 	bl	8004944 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4413      	add	r3, r2
 8008c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c68:	f7fb fe6c 	bl	8004944 <HAL_GetTick>
 8008c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c6e:	4b39      	ldr	r3, [pc, #228]	@ (8008d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	015b      	lsls	r3, r3, #5
 8008c74:	0d1b      	lsrs	r3, r3, #20
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c7e:	e054      	b.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c86:	d050      	beq.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c88:	f7fb fe5c 	bl	8004944 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d902      	bls.n	8008c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d13d      	bne.n	8008d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cb6:	d111      	bne.n	8008cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cc0:	d004      	beq.n	8008ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cca:	d107      	bne.n	8008cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce4:	d10f      	bne.n	8008d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e017      	b.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4013      	ands	r3, r2
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	bf0c      	ite	eq
 8008d3a:	2301      	moveq	r3, #1
 8008d3c:	2300      	movne	r3, #0
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d19b      	bne.n	8008c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3720      	adds	r7, #32
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000020 	.word	0x20000020

08008d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	2102      	movs	r1, #2
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff6a 	bl	8008c48 <SPI_WaitFlagStateUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7e:	f043 0220 	orr.w	r2, r3, #32
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e032      	b.n	8008df0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <SPI_EndRxTxTransaction+0xa0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008dfc <SPI_EndRxTxTransaction+0xa4>)
 8008d90:	fba2 2303 	umull	r2, r3, r2, r3
 8008d94:	0d5b      	lsrs	r3, r3, #21
 8008d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008da8:	d112      	bne.n	8008dd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	2180      	movs	r1, #128	@ 0x80
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f7ff ff47 	bl	8008c48 <SPI_WaitFlagStateUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d016      	beq.n	8008dee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc4:	f043 0220 	orr.w	r2, r3, #32
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e00f      	b.n	8008df0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008de6:	2b80      	cmp	r3, #128	@ 0x80
 8008de8:	d0f2      	beq.n	8008dd0 <SPI_EndRxTxTransaction+0x78>
 8008dea:	e000      	b.n	8008dee <SPI_EndRxTxTransaction+0x96>
        break;
 8008dec:	bf00      	nop
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000020 	.word	0x20000020
 8008dfc:	165e9f81 	.word	0x165e9f81

08008e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e041      	b.n	8008e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fb faa4 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f000 f8f4 	bl	800902c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_TIM_ConfigClockSource+0x1c>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e0b4      	b.n	8009024 <HAL_TIM_ConfigClockSource+0x186>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ee0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef2:	d03e      	beq.n	8008f72 <HAL_TIM_ConfigClockSource+0xd4>
 8008ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef8:	f200 8087 	bhi.w	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f00:	f000 8086 	beq.w	8009010 <HAL_TIM_ConfigClockSource+0x172>
 8008f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f08:	d87f      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f0a:	2b70      	cmp	r3, #112	@ 0x70
 8008f0c:	d01a      	beq.n	8008f44 <HAL_TIM_ConfigClockSource+0xa6>
 8008f0e:	2b70      	cmp	r3, #112	@ 0x70
 8008f10:	d87b      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f12:	2b60      	cmp	r3, #96	@ 0x60
 8008f14:	d050      	beq.n	8008fb8 <HAL_TIM_ConfigClockSource+0x11a>
 8008f16:	2b60      	cmp	r3, #96	@ 0x60
 8008f18:	d877      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f1a:	2b50      	cmp	r3, #80	@ 0x50
 8008f1c:	d03c      	beq.n	8008f98 <HAL_TIM_ConfigClockSource+0xfa>
 8008f1e:	2b50      	cmp	r3, #80	@ 0x50
 8008f20:	d873      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f22:	2b40      	cmp	r3, #64	@ 0x40
 8008f24:	d058      	beq.n	8008fd8 <HAL_TIM_ConfigClockSource+0x13a>
 8008f26:	2b40      	cmp	r3, #64	@ 0x40
 8008f28:	d86f      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f2a:	2b30      	cmp	r3, #48	@ 0x30
 8008f2c:	d064      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2e:	2b30      	cmp	r3, #48	@ 0x30
 8008f30:	d86b      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d060      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d867      	bhi.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d05c      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	d05a      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0x15a>
 8008f42:	e062      	b.n	800900a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f54:	f000 f990 	bl	8009278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	609a      	str	r2, [r3, #8]
      break;
 8008f70:	e04f      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f82:	f000 f979 	bl	8009278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f94:	609a      	str	r2, [r3, #8]
      break;
 8008f96:	e03c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f000 f8ed 	bl	8009184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2150      	movs	r1, #80	@ 0x50
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f946 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008fb6:	e02c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f000 f90c 	bl	80091e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2160      	movs	r1, #96	@ 0x60
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f936 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008fd6:	e01c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f000 f8cd 	bl	8009184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2140      	movs	r1, #64	@ 0x40
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f926 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008ff6:	e00c      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f000 f91d 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8009008:	e003      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e000      	b.n	8009012 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a46      	ldr	r2, [pc, #280]	@ (8009158 <TIM_Base_SetConfig+0x12c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d013      	beq.n	800906c <TIM_Base_SetConfig+0x40>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904a:	d00f      	beq.n	800906c <TIM_Base_SetConfig+0x40>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a43      	ldr	r2, [pc, #268]	@ (800915c <TIM_Base_SetConfig+0x130>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00b      	beq.n	800906c <TIM_Base_SetConfig+0x40>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a42      	ldr	r2, [pc, #264]	@ (8009160 <TIM_Base_SetConfig+0x134>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d007      	beq.n	800906c <TIM_Base_SetConfig+0x40>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a41      	ldr	r2, [pc, #260]	@ (8009164 <TIM_Base_SetConfig+0x138>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d003      	beq.n	800906c <TIM_Base_SetConfig+0x40>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a40      	ldr	r2, [pc, #256]	@ (8009168 <TIM_Base_SetConfig+0x13c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d108      	bne.n	800907e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a35      	ldr	r2, [pc, #212]	@ (8009158 <TIM_Base_SetConfig+0x12c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d02b      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800908c:	d027      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a32      	ldr	r2, [pc, #200]	@ (800915c <TIM_Base_SetConfig+0x130>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d023      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a31      	ldr	r2, [pc, #196]	@ (8009160 <TIM_Base_SetConfig+0x134>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d01f      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a30      	ldr	r2, [pc, #192]	@ (8009164 <TIM_Base_SetConfig+0x138>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d01b      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a2f      	ldr	r2, [pc, #188]	@ (8009168 <TIM_Base_SetConfig+0x13c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d017      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a2e      	ldr	r2, [pc, #184]	@ (800916c <TIM_Base_SetConfig+0x140>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a2d      	ldr	r2, [pc, #180]	@ (8009170 <TIM_Base_SetConfig+0x144>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00f      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009174 <TIM_Base_SetConfig+0x148>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00b      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009178 <TIM_Base_SetConfig+0x14c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d007      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2a      	ldr	r2, [pc, #168]	@ (800917c <TIM_Base_SetConfig+0x150>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d003      	beq.n	80090de <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a29      	ldr	r2, [pc, #164]	@ (8009180 <TIM_Base_SetConfig+0x154>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d108      	bne.n	80090f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a10      	ldr	r2, [pc, #64]	@ (8009158 <TIM_Base_SetConfig+0x12c>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_Base_SetConfig+0xf8>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a12      	ldr	r2, [pc, #72]	@ (8009168 <TIM_Base_SetConfig+0x13c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d103      	bne.n	800912c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b01      	cmp	r3, #1
 800913c:	d105      	bne.n	800914a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f023 0201 	bic.w	r2, r3, #1
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	611a      	str	r2, [r3, #16]
  }
}
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	40010000 	.word	0x40010000
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40000c00 	.word	0x40000c00
 8009168:	40010400 	.word	0x40010400
 800916c:	40014000 	.word	0x40014000
 8009170:	40014400 	.word	0x40014400
 8009174:	40014800 	.word	0x40014800
 8009178:	40001800 	.word	0x40001800
 800917c:	40001c00 	.word	0x40001c00
 8009180:	40002000 	.word	0x40002000

08009184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	f023 0201 	bic.w	r2, r3, #1
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f023 030a 	bic.w	r3, r3, #10
 80091c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	621a      	str	r2, [r3, #32]
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b087      	sub	sp, #28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	f023 0210 	bic.w	r2, r3, #16
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800920c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	031b      	lsls	r3, r3, #12
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800921e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	621a      	str	r2, [r3, #32]
}
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	f043 0307 	orr.w	r3, r3, #7
 8009264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	609a      	str	r2, [r3, #8]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	021a      	lsls	r2, r3, #8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	431a      	orrs	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4313      	orrs	r3, r2
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	609a      	str	r2, [r3, #8]
}
 80092ac:	bf00      	nop
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e05a      	b.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a21      	ldr	r2, [pc, #132]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d022      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931c:	d01d      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d018      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1b      	ldr	r2, [pc, #108]	@ (800939c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d013      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1a      	ldr	r2, [pc, #104]	@ (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d00e      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d009      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a17      	ldr	r2, [pc, #92]	@ (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d004      	beq.n	800935a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a15      	ldr	r2, [pc, #84]	@ (80093ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d10c      	bne.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	4313      	orrs	r3, r2
 800936a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40010000 	.word	0x40010000
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40010400 	.word	0x40010400
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40001800 	.word	0x40001800

080093b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093b0:	b084      	sub	sp, #16
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	f107 001c 	add.w	r0, r7, #28
 80093be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d123      	bne.n	8009412 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80093de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d105      	bne.n	8009406 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fae8 	bl	800a9dc <USB_CoreReset>
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]
 8009410:	e01b      	b.n	800944a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f001 fadc 	bl	800a9dc <USB_CoreReset>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009428:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009434:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	639a      	str	r2, [r3, #56]	@ 0x38
 800943c:	e005      	b.n	800944a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800944a:	7fbb      	ldrb	r3, [r7, #30]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10b      	bne.n	8009468 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f043 0206 	orr.w	r2, r3, #6
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f043 0220 	orr.w	r2, r3, #32
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009474:	b004      	add	sp, #16
 8009476:	4770      	bx	lr

08009478 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d165      	bne.n	8009558 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4a41      	ldr	r2, [pc, #260]	@ (8009594 <USB_SetTurnaroundTime+0x11c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d906      	bls.n	80094a2 <USB_SetTurnaroundTime+0x2a>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4a40      	ldr	r2, [pc, #256]	@ (8009598 <USB_SetTurnaroundTime+0x120>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d202      	bcs.n	80094a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800949c:	230f      	movs	r3, #15
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	e062      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009598 <USB_SetTurnaroundTime+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d306      	bcc.n	80094b8 <USB_SetTurnaroundTime+0x40>
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	4a3b      	ldr	r2, [pc, #236]	@ (800959c <USB_SetTurnaroundTime+0x124>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d202      	bcs.n	80094b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094b2:	230e      	movs	r3, #14
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	e057      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4a38      	ldr	r2, [pc, #224]	@ (800959c <USB_SetTurnaroundTime+0x124>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d306      	bcc.n	80094ce <USB_SetTurnaroundTime+0x56>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4a37      	ldr	r2, [pc, #220]	@ (80095a0 <USB_SetTurnaroundTime+0x128>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d202      	bcs.n	80094ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094c8:	230d      	movs	r3, #13
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	e04c      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	4a33      	ldr	r2, [pc, #204]	@ (80095a0 <USB_SetTurnaroundTime+0x128>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d306      	bcc.n	80094e4 <USB_SetTurnaroundTime+0x6c>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	4a32      	ldr	r2, [pc, #200]	@ (80095a4 <USB_SetTurnaroundTime+0x12c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d802      	bhi.n	80094e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80094de:	230c      	movs	r3, #12
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e041      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4a2f      	ldr	r2, [pc, #188]	@ (80095a4 <USB_SetTurnaroundTime+0x12c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d906      	bls.n	80094fa <USB_SetTurnaroundTime+0x82>
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4a2e      	ldr	r2, [pc, #184]	@ (80095a8 <USB_SetTurnaroundTime+0x130>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d802      	bhi.n	80094fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094f4:	230b      	movs	r3, #11
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	e036      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4a2a      	ldr	r2, [pc, #168]	@ (80095a8 <USB_SetTurnaroundTime+0x130>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d906      	bls.n	8009510 <USB_SetTurnaroundTime+0x98>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4a29      	ldr	r2, [pc, #164]	@ (80095ac <USB_SetTurnaroundTime+0x134>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d802      	bhi.n	8009510 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800950a:	230a      	movs	r3, #10
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e02b      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4a26      	ldr	r2, [pc, #152]	@ (80095ac <USB_SetTurnaroundTime+0x134>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d906      	bls.n	8009526 <USB_SetTurnaroundTime+0xae>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4a25      	ldr	r2, [pc, #148]	@ (80095b0 <USB_SetTurnaroundTime+0x138>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d202      	bcs.n	8009526 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009520:	2309      	movs	r3, #9
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	e020      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a21      	ldr	r2, [pc, #132]	@ (80095b0 <USB_SetTurnaroundTime+0x138>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d306      	bcc.n	800953c <USB_SetTurnaroundTime+0xc4>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4a20      	ldr	r2, [pc, #128]	@ (80095b4 <USB_SetTurnaroundTime+0x13c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d802      	bhi.n	800953c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009536:	2308      	movs	r3, #8
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	e015      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4a1d      	ldr	r2, [pc, #116]	@ (80095b4 <USB_SetTurnaroundTime+0x13c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d906      	bls.n	8009552 <USB_SetTurnaroundTime+0xda>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <USB_SetTurnaroundTime+0x140>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d202      	bcs.n	8009552 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800954c:	2307      	movs	r3, #7
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e00a      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009552:	2306      	movs	r3, #6
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	e007      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800955e:	2309      	movs	r3, #9
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	e001      	b.n	8009568 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009564:	2309      	movs	r3, #9
 8009566:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	029b      	lsls	r3, r3, #10
 800957c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009580:	431a      	orrs	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	00d8acbf 	.word	0x00d8acbf
 8009598:	00e4e1c0 	.word	0x00e4e1c0
 800959c:	00f42400 	.word	0x00f42400
 80095a0:	01067380 	.word	0x01067380
 80095a4:	011a499f 	.word	0x011a499f
 80095a8:	01312cff 	.word	0x01312cff
 80095ac:	014ca43f 	.word	0x014ca43f
 80095b0:	016e3600 	.word	0x016e3600
 80095b4:	01a6ab1f 	.word	0x01a6ab1f
 80095b8:	01e84800 	.word	0x01e84800

080095bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f043 0201 	orr.w	r2, r3, #1
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f023 0201 	bic.w	r2, r3, #1
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d115      	bne.n	800964e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800962e:	200a      	movs	r0, #10
 8009630:	f7fb f994 	bl	800495c <HAL_Delay>
      ms += 10U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	330a      	adds	r3, #10
 8009638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 f93f 	bl	800a8be <USB_GetMode>
 8009640:	4603      	mov	r3, r0
 8009642:	2b01      	cmp	r3, #1
 8009644:	d01e      	beq.n	8009684 <USB_SetCurrentMode+0x84>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2bc7      	cmp	r3, #199	@ 0xc7
 800964a:	d9f0      	bls.n	800962e <USB_SetCurrentMode+0x2e>
 800964c:	e01a      	b.n	8009684 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d115      	bne.n	8009680 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009660:	200a      	movs	r0, #10
 8009662:	f7fb f97b 	bl	800495c <HAL_Delay>
      ms += 10U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	330a      	adds	r3, #10
 800966a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 f926 	bl	800a8be <USB_GetMode>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <USB_SetCurrentMode+0x84>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2bc7      	cmp	r3, #199	@ 0xc7
 800967c:	d9f0      	bls.n	8009660 <USB_SetCurrentMode+0x60>
 800967e:	e001      	b.n	8009684 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e005      	b.n	8009690 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2bc8      	cmp	r3, #200	@ 0xc8
 8009688:	d101      	bne.n	800968e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e000      	b.n	8009690 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009698:	b084      	sub	sp, #16
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	e009      	b.n	80096cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3340      	adds	r3, #64	@ 0x40
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	3301      	adds	r3, #1
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b0e      	cmp	r3, #14
 80096d0:	d9f2      	bls.n	80096b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d11c      	bne.n	8009714 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096e8:	f043 0302 	orr.w	r3, r3, #2
 80096ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	639a      	str	r2, [r3, #56]	@ 0x38
 8009712:	e00b      	b.n	800972c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009724:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009732:	461a      	mov	r2, r3
 8009734:	2300      	movs	r3, #0
 8009736:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009738:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800973c:	2b01      	cmp	r3, #1
 800973e:	d10d      	bne.n	800975c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009744:	2b00      	cmp	r3, #0
 8009746:	d104      	bne.n	8009752 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f968 	bl	8009a20 <USB_SetDevSpeed>
 8009750:	e008      	b.n	8009764 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009752:	2101      	movs	r1, #1
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f963 	bl	8009a20 <USB_SetDevSpeed>
 800975a:	e003      	b.n	8009764 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800975c:	2103      	movs	r1, #3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f95e 	bl	8009a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009764:	2110      	movs	r1, #16
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f8fa 	bl	8009960 <USB_FlushTxFifo>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f924 	bl	80099c4 <USB_FlushRxFifo>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978c:	461a      	mov	r2, r3
 800978e:	2300      	movs	r3, #0
 8009790:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009798:	461a      	mov	r2, r3
 800979a:	2300      	movs	r3, #0
 800979c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a4:	461a      	mov	r2, r3
 80097a6:	2300      	movs	r3, #0
 80097a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	e043      	b.n	8009838 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097c6:	d118      	bne.n	80097fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097da:	461a      	mov	r2, r3
 80097dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e013      	b.n	800980c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f0:	461a      	mov	r2, r3
 80097f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	e008      	b.n	800980c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009806:	461a      	mov	r2, r3
 8009808:	2300      	movs	r3, #0
 800980a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	2300      	movs	r3, #0
 800981c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982a:	461a      	mov	r2, r3
 800982c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	3301      	adds	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800983c:	461a      	mov	r2, r3
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	4293      	cmp	r3, r2
 8009842:	d3b5      	bcc.n	80097b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009844:	2300      	movs	r3, #0
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	e043      	b.n	80098d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009860:	d118      	bne.n	8009894 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009874:	461a      	mov	r2, r3
 8009876:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	e013      	b.n	80098a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988a:	461a      	mov	r2, r3
 800988c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e008      	b.n	80098a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	461a      	mov	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b2:	461a      	mov	r2, r3
 80098b4:	2300      	movs	r3, #0
 80098b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c4:	461a      	mov	r2, r3
 80098c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	3301      	adds	r3, #1
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098d6:	461a      	mov	r2, r3
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	4293      	cmp	r3, r2
 80098dc:	d3b5      	bcc.n	800984a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80098fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f043 0210 	orr.w	r2, r3, #16
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	699a      	ldr	r2, [r3, #24]
 8009918:	4b10      	ldr	r3, [pc, #64]	@ (800995c <USB_DevInit+0x2c4>)
 800991a:	4313      	orrs	r3, r2
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009920:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	f043 0208 	orr.w	r2, r3, #8
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009934:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009938:	2b01      	cmp	r3, #1
 800993a:	d107      	bne.n	800994c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009944:	f043 0304 	orr.w	r3, r3, #4
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009958:	b004      	add	sp, #16
 800995a:	4770      	bx	lr
 800995c:	803c3800 	.word	0x803c3800

08009960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800997a:	d901      	bls.n	8009980 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e01b      	b.n	80099b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	daf2      	bge.n	800996e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	019b      	lsls	r3, r3, #6
 8009990:	f043 0220 	orr.w	r2, r3, #32
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099a4:	d901      	bls.n	80099aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e006      	b.n	80099b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d0f0      	beq.n	8009998 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099dc:	d901      	bls.n	80099e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e018      	b.n	8009a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	daf2      	bge.n	80099d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2210      	movs	r2, #16
 80099f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3301      	adds	r3, #1
 80099f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a00:	d901      	bls.n	8009a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e006      	b.n	8009a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d0f0      	beq.n	80099f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a40:	4313      	orrs	r3, r2
 8009a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b087      	sub	sp, #28
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f003 0306 	and.w	r3, r3, #6
 8009a6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
 8009a76:	e00a      	b.n	8009a8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d002      	beq.n	8009a84 <USB_GetDevSpeed+0x32>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b06      	cmp	r3, #6
 8009a82:	d102      	bne.n	8009a8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a84:	2302      	movs	r3, #2
 8009a86:	75fb      	strb	r3, [r7, #23]
 8009a88:	e001      	b.n	8009a8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a8a:	230f      	movs	r3, #15
 8009a8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	785b      	ldrb	r3, [r3, #1]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d13a      	bne.n	8009b2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009abe:	69da      	ldr	r2, [r3, #28]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	2101      	movs	r1, #1
 8009aca:	fa01 f303 	lsl.w	r3, r1, r3
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	68f9      	ldr	r1, [r7, #12]
 8009ad2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d155      	bne.n	8009b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	791b      	ldrb	r3, [r3, #4]
 8009b0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	059b      	lsls	r3, r3, #22
 8009b12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b14:	4313      	orrs	r3, r2
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	e036      	b.n	8009b9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b34:	69da      	ldr	r2, [r3, #28]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	2101      	movs	r1, #1
 8009b40:	fa01 f303 	lsl.w	r3, r1, r3
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d11a      	bne.n	8009b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b82:	430b      	orrs	r3, r1
 8009b84:	4313      	orrs	r3, r2
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d161      	bne.n	8009c8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bde:	d11f      	bne.n	8009c20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	0151      	lsls	r1, r2, #5
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	440a      	add	r2, r1
 8009bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	2101      	movs	r1, #1
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c40:	4013      	ands	r3, r2
 8009c42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	2101      	movs	r1, #1
 8009c56:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	68f9      	ldr	r1, [r7, #12]
 8009c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c64:	4013      	ands	r3, r2
 8009c66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	0159      	lsls	r1, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c82:	4619      	mov	r1, r3
 8009c84:	4b35      	ldr	r3, [pc, #212]	@ (8009d5c <USB_DeactivateEndpoint+0x1b0>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	600b      	str	r3, [r1, #0]
 8009c8a:	e060      	b.n	8009d4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca2:	d11f      	bne.n	8009ce4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	0151      	lsls	r1, r2, #5
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	440a      	add	r2, r1
 8009cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfa:	041b      	lsls	r3, r3, #16
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	68f9      	ldr	r1, [r7, #12]
 8009d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d04:	4013      	ands	r3, r2
 8009d06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d0e:	69da      	ldr	r2, [r3, #28]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	2101      	movs	r1, #1
 8009d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1e:	041b      	lsls	r3, r3, #16
 8009d20:	43db      	mvns	r3, r3
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d28:	4013      	ands	r3, r2
 8009d2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	0159      	lsls	r1, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	440b      	add	r3, r1
 8009d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d46:	4619      	mov	r1, r3
 8009d48:	4b05      	ldr	r3, [pc, #20]	@ (8009d60 <USB_DeactivateEndpoint+0x1b4>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	ec337800 	.word	0xec337800
 8009d60:	eff37800 	.word	0xeff37800

08009d64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08a      	sub	sp, #40	@ 0x28
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	f040 817f 	bne.w	800a084 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d132      	bne.n	8009df4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	69ba      	ldr	r2, [r7, #24]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dec:	0cdb      	lsrs	r3, r3, #19
 8009dee:	04db      	lsls	r3, r3, #19
 8009df0:	6113      	str	r3, [r2, #16]
 8009df2:	e097      	b.n	8009f24 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	69ba      	ldr	r2, [r7, #24]
 8009e04:	0151      	lsls	r1, r2, #5
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	440a      	add	r2, r1
 8009e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e0e:	0cdb      	lsrs	r3, r3, #19
 8009e10:	04db      	lsls	r3, r3, #19
 8009e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	69fa      	ldr	r2, [r7, #28]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d11a      	bne.n	8009e74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	0151      	lsls	r1, r2, #5
 8009e64:	69fa      	ldr	r2, [r7, #28]
 8009e66:	440a      	add	r2, r1
 8009e68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e70:	6113      	str	r3, [r2, #16]
 8009e72:	e044      	b.n	8009efe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	1e5a      	subs	r2, r3, #1
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e88:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	8afb      	ldrh	r3, [r7, #22]
 8009e9a:	04d9      	lsls	r1, r3, #19
 8009e9c:	4ba4      	ldr	r3, [pc, #656]	@ (800a130 <USB_EPStartXfer+0x3cc>)
 8009e9e:	400b      	ands	r3, r1
 8009ea0:	69b9      	ldr	r1, [r7, #24]
 8009ea2:	0148      	lsls	r0, r1, #5
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	4401      	add	r1, r0
 8009ea8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009eac:	4313      	orrs	r3, r2
 8009eae:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	791b      	ldrb	r3, [r3, #4]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d122      	bne.n	8009efe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	0151      	lsls	r1, r2, #5
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	440a      	add	r2, r1
 8009ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ed6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	8afb      	ldrh	r3, [r7, #22]
 8009ee8:	075b      	lsls	r3, r3, #29
 8009eea:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009eee:	69b9      	ldr	r1, [r7, #24]
 8009ef0:	0148      	lsls	r0, r1, #5
 8009ef2:	69f9      	ldr	r1, [r7, #28]
 8009ef4:	4401      	add	r1, r0
 8009ef6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009efa:	4313      	orrs	r3, r2
 8009efc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	0148      	lsls	r0, r1, #5
 8009f18:	69f9      	ldr	r1, [r7, #28]
 8009f1a:	4401      	add	r1, r0
 8009f1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f20:	4313      	orrs	r3, r2
 8009f22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d14b      	bne.n	8009fc2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3e:	461a      	mov	r2, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d128      	bne.n	8009fa0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d110      	bne.n	8009f80 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	0151      	lsls	r1, r2, #5
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	440a      	add	r2, r1
 8009f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e00f      	b.n	8009fa0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	0151      	lsls	r1, r2, #5
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	440a      	add	r2, r1
 8009f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	e166      	b.n	800a290 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69ba      	ldr	r2, [r7, #24]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fdc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fe0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	791b      	ldrb	r3, [r3, #4]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d015      	beq.n	800a016 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 814e 	beq.w	800a290 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f303 	lsl.w	r3, r1, r3
 800a00a:	69f9      	ldr	r1, [r7, #28]
 800a00c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a010:	4313      	orrs	r3, r2
 800a012:	634b      	str	r3, [r1, #52]	@ 0x34
 800a014:	e13c      	b.n	800a290 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a022:	2b00      	cmp	r3, #0
 800a024:	d110      	bne.n	800a048 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69ba      	ldr	r2, [r7, #24]
 800a036:	0151      	lsls	r1, r2, #5
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	440a      	add	r2, r1
 800a03c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a040:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	e00f      	b.n	800a068 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a066:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	68d9      	ldr	r1, [r3, #12]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	781a      	ldrb	r2, [r3, #0]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	b298      	uxth	r0, r3
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	4603      	mov	r3, r0
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f9b9 	bl	800a3f4 <USB_WritePacket>
 800a082:	e105      	b.n	800a290 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a09e:	0cdb      	lsrs	r3, r3, #19
 800a0a0:	04db      	lsls	r3, r3, #19
 800a0a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0c6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d132      	bne.n	800a134 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0fc:	69b9      	ldr	r1, [r7, #24]
 800a0fe:	0148      	lsls	r0, r1, #5
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	4401      	add	r1, r0
 800a104:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a108:	4313      	orrs	r3, r2
 800a10a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	69fa      	ldr	r2, [r7, #28]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a126:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a12a:	6113      	str	r3, [r2, #16]
 800a12c:	e062      	b.n	800a1f4 <USB_EPStartXfer+0x490>
 800a12e:	bf00      	nop
 800a130:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d123      	bne.n	800a184 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a152:	69b9      	ldr	r1, [r7, #24]
 800a154:	0148      	lsls	r0, r1, #5
 800a156:	69f9      	ldr	r1, [r7, #28]
 800a158:	4401      	add	r1, r0
 800a15a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a15e:	4313      	orrs	r3, r2
 800a160:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a180:	6113      	str	r3, [r2, #16]
 800a182:	e037      	b.n	800a1f4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	1e5a      	subs	r2, r3, #1
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	fbb2 f3f3 	udiv	r3, r2, r3
 800a198:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	8afa      	ldrh	r2, [r7, #22]
 800a1a0:	fb03 f202 	mul.w	r2, r3, r2
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
 800a1b8:	04d9      	lsls	r1, r3, #19
 800a1ba:	4b38      	ldr	r3, [pc, #224]	@ (800a29c <USB_EPStartXfer+0x538>)
 800a1bc:	400b      	ands	r3, r1
 800a1be:	69b9      	ldr	r1, [r7, #24]
 800a1c0:	0148      	lsls	r0, r1, #5
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	4401      	add	r1, r0
 800a1c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1e4:	69b9      	ldr	r1, [r7, #24]
 800a1e6:	0148      	lsls	r0, r1, #5
 800a1e8:	69f9      	ldr	r1, [r7, #28]
 800a1ea:	4401      	add	r1, r0
 800a1ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d10d      	bne.n	800a216 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	68d9      	ldr	r1, [r3, #12]
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a212:	460a      	mov	r2, r1
 800a214:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	791b      	ldrb	r3, [r3, #4]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d128      	bne.n	800a270 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d110      	bne.n	800a250 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	0151      	lsls	r1, r2, #5
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	440a      	add	r2, r1
 800a244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a248:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	e00f      	b.n	800a270 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	0151      	lsls	r1, r2, #5
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	440a      	add	r2, r1
 800a266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a26a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a26e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a28a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a28e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	1ff80000 	.word	0x1ff80000

0800a2a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d14a      	bne.n	800a354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2d6:	f040 8086 	bne.w	800a3e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	7812      	ldrb	r2, [r2, #0]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	0151      	lsls	r1, r2, #5
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	440a      	add	r2, r1
 800a318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a31c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a32e:	4293      	cmp	r3, r2
 800a330:	d902      	bls.n	800a338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	75fb      	strb	r3, [r7, #23]
          break;
 800a336:	e056      	b.n	800a3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a34c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a350:	d0e7      	beq.n	800a322 <USB_EPStopXfer+0x82>
 800a352:	e048      	b.n	800a3e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a36c:	d13b      	bne.n	800a3e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	7812      	ldrb	r2, [r2, #0]
 800a382:	0151      	lsls	r1, r2, #5
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	440a      	add	r2, r1
 800a388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a38c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	7812      	ldrb	r2, [r2, #0]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d902      	bls.n	800a3cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a3ca:	e00c      	b.n	800a3e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3e4:	d0e7      	beq.n	800a3b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b089      	sub	sp, #36	@ 0x24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4611      	mov	r1, r2
 800a400:	461a      	mov	r2, r3
 800a402:	460b      	mov	r3, r1
 800a404:	71fb      	strb	r3, [r7, #7]
 800a406:	4613      	mov	r3, r2
 800a408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a416:	2b00      	cmp	r3, #0
 800a418:	d123      	bne.n	800a462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a41a:	88bb      	ldrh	r3, [r7, #4]
 800a41c:	3303      	adds	r3, #3
 800a41e:	089b      	lsrs	r3, r3, #2
 800a420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a422:	2300      	movs	r3, #0
 800a424:	61bb      	str	r3, [r7, #24]
 800a426:	e018      	b.n	800a45a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	031a      	lsls	r2, r3, #12
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a434:	461a      	mov	r2, r3
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	3301      	adds	r3, #1
 800a440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3301      	adds	r3, #1
 800a446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3301      	adds	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	3301      	adds	r3, #1
 800a452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	3301      	adds	r3, #1
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d3e2      	bcc.n	800a428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3724      	adds	r7, #36	@ 0x24
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a470:	b480      	push	{r7}
 800a472:	b08b      	sub	sp, #44	@ 0x2c
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	4613      	mov	r3, r2
 800a47c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a486:	88fb      	ldrh	r3, [r7, #6]
 800a488:	089b      	lsrs	r3, r3, #2
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a496:	2300      	movs	r3, #0
 800a498:	623b      	str	r3, [r7, #32]
 800a49a:	e014      	b.n	800a4c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4bc:	3301      	adds	r3, #1
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	623b      	str	r3, [r7, #32]
 800a4c6:	6a3a      	ldr	r2, [r7, #32]
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d3e6      	bcc.n	800a49c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4ce:	8bfb      	ldrh	r3, [r7, #30]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01e      	beq.n	800a512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f107 0310 	add.w	r3, r7, #16
 800a4e4:	6812      	ldr	r2, [r2, #0]
 800a4e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	701a      	strb	r2, [r3, #0]
      i++;
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	3301      	adds	r3, #1
 800a504:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a506:	8bfb      	ldrh	r3, [r7, #30]
 800a508:	3b01      	subs	r3, #1
 800a50a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a50c:	8bfb      	ldrh	r3, [r7, #30]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1ea      	bne.n	800a4e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a514:	4618      	mov	r0, r3
 800a516:	372c      	adds	r7, #44	@ 0x2c
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d12c      	bne.n	800a596 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	db12      	blt.n	800a574 <USB_EPSetStall+0x54>
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00f      	beq.n	800a574 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	0151      	lsls	r1, r2, #5
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	440a      	add	r2, r1
 800a56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a56e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a572:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a58e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	e02b      	b.n	800a5ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	db12      	blt.n	800a5ce <USB_EPSetStall+0xae>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00f      	beq.n	800a5ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d128      	bne.n	800a66a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	0151      	lsls	r1, r2, #5
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	440a      	add	r2, r1
 800a62e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a632:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a636:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d003      	beq.n	800a648 <USB_EPClearStall+0x4c>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	791b      	ldrb	r3, [r3, #4]
 800a644:	2b02      	cmp	r3, #2
 800a646:	d138      	bne.n	800a6ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	e027      	b.n	800a6ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	0151      	lsls	r1, r2, #5
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	440a      	add	r2, r1
 800a680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a684:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	791b      	ldrb	r3, [r3, #4]
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d003      	beq.n	800a69a <USB_EPClearStall+0x9e>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	791b      	ldrb	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d10f      	bne.n	800a6ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	0151      	lsls	r1, r2, #5
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a6ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	011b      	lsls	r3, r3, #4
 800a6f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a6fc:	68f9      	ldr	r1, [r7, #12]
 800a6fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a702:	4313      	orrs	r3, r2
 800a704:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a72e:	f023 0303 	bic.w	r3, r3, #3
 800a732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a742:	f023 0302 	bic.w	r3, r3, #2
 800a746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a770:	f023 0303 	bic.w	r3, r3, #3
 800a774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a784:	f043 0302 	orr.w	r3, r3, #2
 800a788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	4013      	ands	r3, r2
 800a7e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	0c1b      	lsrs	r3, r3, #16
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b085      	sub	sp, #20
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	4013      	ands	r3, r2
 800a814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	b29b      	uxth	r3, r3
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a836:	78fb      	ldrb	r3, [r7, #3]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4013      	ands	r3, r2
 800a852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a854:	68bb      	ldr	r3, [r7, #8]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a862:	b480      	push	{r7}
 800a864:	b087      	sub	sp, #28
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a886:	78fb      	ldrb	r3, [r7, #3]
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	fa22 f303 	lsr.w	r3, r2, r3
 800a892:	01db      	lsls	r3, r3, #7
 800a894:	b2db      	uxtb	r3, r3
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	4313      	orrs	r3, r2
 800a89a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	f003 0301 	and.w	r3, r3, #1
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a8f8:	f023 0307 	bic.w	r3, r3, #7
 800a8fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a90c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	460b      	mov	r3, r1
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	333c      	adds	r3, #60	@ 0x3c
 800a936:	3304      	adds	r3, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4a26      	ldr	r2, [pc, #152]	@ (800a9d8 <USB_EP0_OutStart+0xb8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d90a      	bls.n	800a95a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a954:	d101      	bne.n	800a95a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	e037      	b.n	800a9ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a960:	461a      	mov	r2, r3
 800a962:	2300      	movs	r3, #0
 800a964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a974:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a988:	f043 0318 	orr.w	r3, r3, #24
 800a98c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a99c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a9a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d10f      	bne.n	800a9c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a9c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	4f54300a 	.word	0x4f54300a

0800a9dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9f4:	d901      	bls.n	800a9fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e01b      	b.n	800aa32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	daf2      	bge.n	800a9e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f043 0201 	orr.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3301      	adds	r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa1e:	d901      	bls.n	800aa24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e006      	b.n	800aa32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d0f0      	beq.n	800aa12 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
	...

0800aa40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aa50:	f002 fc38 	bl	800d2c4 <USBD_static_malloc>
 800aa54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d109      	bne.n	800aa70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	32b0      	adds	r2, #176	@ 0xb0
 800aa66:	2100      	movs	r1, #0
 800aa68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e0d4      	b.n	800ac1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa74:	2100      	movs	r1, #0
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f003 fb86 	bl	800e188 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	32b0      	adds	r2, #176	@ 0xb0
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	32b0      	adds	r2, #176	@ 0xb0
 800aa96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7c1b      	ldrb	r3, [r3, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d138      	bne.n	800ab1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aaa8:	4b5e      	ldr	r3, [pc, #376]	@ (800ac24 <USBD_CDC_Init+0x1e4>)
 800aaaa:	7819      	ldrb	r1, [r3, #0]
 800aaac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aab0:	2202      	movs	r2, #2
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f002 fae3 	bl	800d07e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aab8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac24 <USBD_CDC_Init+0x1e4>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f003 020f 	and.w	r2, r3, #15
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	3324      	adds	r3, #36	@ 0x24
 800aace:	2201      	movs	r2, #1
 800aad0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aad2:	4b55      	ldr	r3, [pc, #340]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800aad4:	7819      	ldrb	r1, [r3, #0]
 800aad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aada:	2202      	movs	r2, #2
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f002 face 	bl	800d07e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aae2:	4b51      	ldr	r3, [pc, #324]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f003 020f 	and.w	r2, r3, #15
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aafa:	2201      	movs	r2, #1
 800aafc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aafe:	4b4b      	ldr	r3, [pc, #300]	@ (800ac2c <USBD_CDC_Init+0x1ec>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f003 020f 	and.w	r2, r3, #15
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	440b      	add	r3, r1
 800ab12:	3326      	adds	r3, #38	@ 0x26
 800ab14:	2210      	movs	r2, #16
 800ab16:	801a      	strh	r2, [r3, #0]
 800ab18:	e035      	b.n	800ab86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab1a:	4b42      	ldr	r3, [pc, #264]	@ (800ac24 <USBD_CDC_Init+0x1e4>)
 800ab1c:	7819      	ldrb	r1, [r3, #0]
 800ab1e:	2340      	movs	r3, #64	@ 0x40
 800ab20:	2202      	movs	r2, #2
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f002 faab 	bl	800d07e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab28:	4b3e      	ldr	r3, [pc, #248]	@ (800ac24 <USBD_CDC_Init+0x1e4>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f003 020f 	and.w	r2, r3, #15
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3324      	adds	r3, #36	@ 0x24
 800ab3e:	2201      	movs	r2, #1
 800ab40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab42:	4b39      	ldr	r3, [pc, #228]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800ab44:	7819      	ldrb	r1, [r3, #0]
 800ab46:	2340      	movs	r3, #64	@ 0x40
 800ab48:	2202      	movs	r2, #2
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f002 fa97 	bl	800d07e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab50:	4b35      	ldr	r3, [pc, #212]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab68:	2201      	movs	r2, #1
 800ab6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac2c <USBD_CDC_Init+0x1ec>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	f003 020f 	and.w	r2, r3, #15
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	440b      	add	r3, r1
 800ab80:	3326      	adds	r3, #38	@ 0x26
 800ab82:	2210      	movs	r2, #16
 800ab84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab86:	4b29      	ldr	r3, [pc, #164]	@ (800ac2c <USBD_CDC_Init+0x1ec>)
 800ab88:	7819      	ldrb	r1, [r3, #0]
 800ab8a:	2308      	movs	r3, #8
 800ab8c:	2203      	movs	r2, #3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f002 fa75 	bl	800d07e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab94:	4b25      	ldr	r3, [pc, #148]	@ (800ac2c <USBD_CDC_Init+0x1ec>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f003 020f 	and.w	r2, r3, #15
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	440b      	add	r3, r1
 800aba8:	3324      	adds	r3, #36	@ 0x24
 800abaa:	2201      	movs	r2, #1
 800abac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	33b0      	adds	r3, #176	@ 0xb0
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abe4:	2302      	movs	r3, #2
 800abe6:	e018      	b.n	800ac1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7c1b      	ldrb	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800abf2:	7819      	ldrb	r1, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f002 fb2c 	bl	800d25c <USBD_LL_PrepareReceive>
 800ac04:	e008      	b.n	800ac18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac06:	4b08      	ldr	r3, [pc, #32]	@ (800ac28 <USBD_CDC_Init+0x1e8>)
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac10:	2340      	movs	r3, #64	@ 0x40
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f002 fb22 	bl	800d25c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	200000c3 	.word	0x200000c3
 800ac28:	200000c4 	.word	0x200000c4
 800ac2c:	200000c5 	.word	0x200000c5

0800ac30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac3c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad28 <USBD_CDC_DeInit+0xf8>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f002 fa41 	bl	800d0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac48:	4b37      	ldr	r3, [pc, #220]	@ (800ad28 <USBD_CDC_DeInit+0xf8>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	f003 020f 	and.w	r2, r3, #15
 800ac50:	6879      	ldr	r1, [r7, #4]
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3324      	adds	r3, #36	@ 0x24
 800ac5e:	2200      	movs	r2, #0
 800ac60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac62:	4b32      	ldr	r3, [pc, #200]	@ (800ad2c <USBD_CDC_DeInit+0xfc>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f002 fa2e 	bl	800d0ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad2c <USBD_CDC_DeInit+0xfc>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	440b      	add	r3, r1
 800ac82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac86:	2200      	movs	r2, #0
 800ac88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac8a:	4b29      	ldr	r3, [pc, #164]	@ (800ad30 <USBD_CDC_DeInit+0x100>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f002 fa1a 	bl	800d0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac96:	4b26      	ldr	r3, [pc, #152]	@ (800ad30 <USBD_CDC_DeInit+0x100>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 020f 	and.w	r2, r3, #15
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	3324      	adds	r3, #36	@ 0x24
 800acac:	2200      	movs	r2, #0
 800acae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800acb0:	4b1f      	ldr	r3, [pc, #124]	@ (800ad30 <USBD_CDC_DeInit+0x100>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 020f 	and.w	r2, r3, #15
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	440b      	add	r3, r1
 800acc4:	3326      	adds	r3, #38	@ 0x26
 800acc6:	2200      	movs	r2, #0
 800acc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	32b0      	adds	r2, #176	@ 0xb0
 800acd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01f      	beq.n	800ad1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	33b0      	adds	r3, #176	@ 0xb0
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32b0      	adds	r2, #176	@ 0xb0
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f002 faee 	bl	800d2e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	32b0      	adds	r2, #176	@ 0xb0
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	200000c3 	.word	0x200000c3
 800ad2c:	200000c4 	.word	0x200000c4
 800ad30:	200000c5 	.word	0x200000c5

0800ad34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	32b0      	adds	r2, #176	@ 0xb0
 800ad48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e0bf      	b.n	800aee4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d050      	beq.n	800ae12 <USBD_CDC_Setup+0xde>
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	f040 80af 	bne.w	800aed4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	88db      	ldrh	r3, [r3, #6]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d03a      	beq.n	800adf4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b25b      	sxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da1b      	bge.n	800adc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	33b0      	adds	r3, #176	@ 0xb0
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	88d2      	ldrh	r2, [r2, #6]
 800ada4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	88db      	ldrh	r3, [r3, #6]
 800adaa:	2b07      	cmp	r3, #7
 800adac:	bf28      	it	cs
 800adae:	2307      	movcs	r3, #7
 800adb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	89fa      	ldrh	r2, [r7, #14]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f001 fd53 	bl	800c864 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800adbe:	e090      	b.n	800aee2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	785a      	ldrb	r2, [r3, #1]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	88db      	ldrh	r3, [r3, #6]
 800adce:	2b3f      	cmp	r3, #63	@ 0x3f
 800add0:	d803      	bhi.n	800adda <USBD_CDC_Setup+0xa6>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	88db      	ldrh	r3, [r3, #6]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	e000      	b.n	800addc <USBD_CDC_Setup+0xa8>
 800adda:	2240      	movs	r2, #64	@ 0x40
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ade2:	6939      	ldr	r1, [r7, #16]
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800adea:	461a      	mov	r2, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 fd65 	bl	800c8bc <USBD_CtlPrepareRx>
      break;
 800adf2:	e076      	b.n	800aee2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	33b0      	adds	r3, #176	@ 0xb0
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	7850      	ldrb	r0, [r2, #1]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	4798      	blx	r3
      break;
 800ae10:	e067      	b.n	800aee2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	2b0b      	cmp	r3, #11
 800ae18:	d851      	bhi.n	800aebe <USBD_CDC_Setup+0x18a>
 800ae1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae20 <USBD_CDC_Setup+0xec>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae51 	.word	0x0800ae51
 800ae24:	0800aecd 	.word	0x0800aecd
 800ae28:	0800aebf 	.word	0x0800aebf
 800ae2c:	0800aebf 	.word	0x0800aebf
 800ae30:	0800aebf 	.word	0x0800aebf
 800ae34:	0800aebf 	.word	0x0800aebf
 800ae38:	0800aebf 	.word	0x0800aebf
 800ae3c:	0800aebf 	.word	0x0800aebf
 800ae40:	0800aebf 	.word	0x0800aebf
 800ae44:	0800aebf 	.word	0x0800aebf
 800ae48:	0800ae7b 	.word	0x0800ae7b
 800ae4c:	0800aea5 	.word	0x0800aea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d107      	bne.n	800ae6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae5c:	f107 030a 	add.w	r3, r7, #10
 800ae60:	2202      	movs	r2, #2
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 fcfd 	bl	800c864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae6a:	e032      	b.n	800aed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 fc7b 	bl	800c76a <USBD_CtlError>
            ret = USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	75fb      	strb	r3, [r7, #23]
          break;
 800ae78:	e02b      	b.n	800aed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d107      	bne.n	800ae96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae86:	f107 030d 	add.w	r3, r7, #13
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 fce8 	bl	800c864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae94:	e01d      	b.n	800aed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f001 fc66 	bl	800c76a <USBD_CtlError>
            ret = USBD_FAIL;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	75fb      	strb	r3, [r7, #23]
          break;
 800aea2:	e016      	b.n	800aed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d00f      	beq.n	800aed0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fc59 	bl	800c76a <USBD_CtlError>
            ret = USBD_FAIL;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aebc:	e008      	b.n	800aed0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 fc52 	bl	800c76a <USBD_CtlError>
          ret = USBD_FAIL;
 800aec6:	2303      	movs	r3, #3
 800aec8:	75fb      	strb	r3, [r7, #23]
          break;
 800aeca:	e002      	b.n	800aed2 <USBD_CDC_Setup+0x19e>
          break;
 800aecc:	bf00      	nop
 800aece:	e008      	b.n	800aee2 <USBD_CDC_Setup+0x1ae>
          break;
 800aed0:	bf00      	nop
      }
      break;
 800aed2:	e006      	b.n	800aee2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 fc47 	bl	800c76a <USBD_CtlError>
      ret = USBD_FAIL;
 800aedc:	2303      	movs	r3, #3
 800aede:	75fb      	strb	r3, [r7, #23]
      break;
 800aee0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aefe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	32b0      	adds	r2, #176	@ 0xb0
 800af0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	e065      	b.n	800afe2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	32b0      	adds	r2, #176	@ 0xb0
 800af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	3318      	adds	r3, #24
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d02f      	beq.n	800afa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	f003 020f 	and.w	r2, r3, #15
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	3318      	adds	r3, #24
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	f003 010f 	and.w	r1, r3, #15
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	460b      	mov	r3, r1
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	440b      	add	r3, r1
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4403      	add	r3, r0
 800af68:	331c      	adds	r3, #28
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	fbb2 f1f3 	udiv	r1, r2, r3
 800af70:	fb01 f303 	mul.w	r3, r1, r3
 800af74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af76:	2b00      	cmp	r3, #0
 800af78:	d112      	bne.n	800afa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	f003 020f 	and.w	r2, r3, #15
 800af80:	6879      	ldr	r1, [r7, #4]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	3318      	adds	r3, #24
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af92:	78f9      	ldrb	r1, [r7, #3]
 800af94:	2300      	movs	r3, #0
 800af96:	2200      	movs	r2, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f002 f93e 	bl	800d21a <USBD_LL_Transmit>
 800af9e:	e01f      	b.n	800afe0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	33b0      	adds	r3, #176	@ 0xb0
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d010      	beq.n	800afe0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	33b0      	adds	r3, #176	@ 0xb0
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	32b0      	adds	r2, #176	@ 0xb0
 800b000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b004:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	32b0      	adds	r2, #176	@ 0xb0
 800b010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	e01a      	b.n	800b052 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b01c:	78fb      	ldrb	r3, [r7, #3]
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f002 f93c 	bl	800d29e <USBD_LL_GetRxDataSize>
 800b026:	4602      	mov	r2, r0
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	33b0      	adds	r3, #176	@ 0xb0
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b04c:	4611      	mov	r1, r2
 800b04e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	32b0      	adds	r2, #176	@ 0xb0
 800b06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b078:	2303      	movs	r3, #3
 800b07a:	e024      	b.n	800b0c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	33b0      	adds	r3, #176	@ 0xb0
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d019      	beq.n	800b0c4 <USBD_CDC_EP0_RxReady+0x6a>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b096:	2bff      	cmp	r3, #255	@ 0xff
 800b098:	d014      	beq.n	800b0c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	33b0      	adds	r3, #176	@ 0xb0
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b0b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	22ff      	movs	r2, #255	@ 0xff
 800b0c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0d8:	2182      	movs	r1, #130	@ 0x82
 800b0da:	4818      	ldr	r0, [pc, #96]	@ (800b13c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0dc:	f000 fd0f 	bl	800bafe <USBD_GetEpDesc>
 800b0e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	4815      	ldr	r0, [pc, #84]	@ (800b13c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0e6:	f000 fd0a 	bl	800bafe <USBD_GetEpDesc>
 800b0ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0ec:	2181      	movs	r1, #129	@ 0x81
 800b0ee:	4813      	ldr	r0, [pc, #76]	@ (800b13c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0f0:	f000 fd05 	bl	800bafe <USBD_GetEpDesc>
 800b0f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2210      	movs	r2, #16
 800b100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d006      	beq.n	800b116 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b110:	711a      	strb	r2, [r3, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d006      	beq.n	800b12a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b124:	711a      	strb	r2, [r3, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2243      	movs	r2, #67	@ 0x43
 800b12e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b130:	4b02      	ldr	r3, [pc, #8]	@ (800b13c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20000080 	.word	0x20000080

0800b140 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b148:	2182      	movs	r1, #130	@ 0x82
 800b14a:	4818      	ldr	r0, [pc, #96]	@ (800b1ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b14c:	f000 fcd7 	bl	800bafe <USBD_GetEpDesc>
 800b150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b152:	2101      	movs	r1, #1
 800b154:	4815      	ldr	r0, [pc, #84]	@ (800b1ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b156:	f000 fcd2 	bl	800bafe <USBD_GetEpDesc>
 800b15a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b15c:	2181      	movs	r1, #129	@ 0x81
 800b15e:	4813      	ldr	r0, [pc, #76]	@ (800b1ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b160:	f000 fccd 	bl	800bafe <USBD_GetEpDesc>
 800b164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2210      	movs	r2, #16
 800b170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d006      	beq.n	800b186 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2200      	movs	r2, #0
 800b17c:	711a      	strb	r2, [r3, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f042 0202 	orr.w	r2, r2, #2
 800b184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	711a      	strb	r2, [r3, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f042 0202 	orr.w	r2, r2, #2
 800b198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2243      	movs	r2, #67	@ 0x43
 800b19e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1a0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000080 	.word	0x20000080

0800b1b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1b8:	2182      	movs	r1, #130	@ 0x82
 800b1ba:	4818      	ldr	r0, [pc, #96]	@ (800b21c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1bc:	f000 fc9f 	bl	800bafe <USBD_GetEpDesc>
 800b1c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	4815      	ldr	r0, [pc, #84]	@ (800b21c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1c6:	f000 fc9a 	bl	800bafe <USBD_GetEpDesc>
 800b1ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1cc:	2181      	movs	r1, #129	@ 0x81
 800b1ce:	4813      	ldr	r0, [pc, #76]	@ (800b21c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1d0:	f000 fc95 	bl	800bafe <USBD_GetEpDesc>
 800b1d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2210      	movs	r2, #16
 800b1e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d006      	beq.n	800b1f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1f0:	711a      	strb	r2, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d006      	beq.n	800b20a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b204:	711a      	strb	r2, [r3, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2243      	movs	r2, #67	@ 0x43
 800b20e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b210:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20000080 	.word	0x20000080

0800b220 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	220a      	movs	r2, #10
 800b22c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b22e:	4b03      	ldr	r3, [pc, #12]	@ (800b23c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	2000003c 	.word	0x2000003c

0800b240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b250:	2303      	movs	r3, #3
 800b252:	e009      	b.n	800b268 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	33b0      	adds	r3, #176	@ 0xb0
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	32b0      	adds	r2, #176	@ 0xb0
 800b28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b296:	2303      	movs	r3, #3
 800b298:	e008      	b.n	800b2ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	371c      	adds	r7, #28
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	32b0      	adds	r2, #176	@ 0xb0
 800b2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e004      	b.n	800b2e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	32b0      	adds	r2, #176	@ 0xb0
 800b306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	32b0      	adds	r2, #176	@ 0xb0
 800b316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b31e:	2303      	movs	r3, #3
 800b320:	e018      	b.n	800b354 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7c1b      	ldrb	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10a      	bne.n	800b340 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b32a:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <USBD_CDC_ReceivePacket+0x68>)
 800b32c:	7819      	ldrb	r1, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 ff8f 	bl	800d25c <USBD_LL_PrepareReceive>
 800b33e:	e008      	b.n	800b352 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b340:	4b06      	ldr	r3, [pc, #24]	@ (800b35c <USBD_CDC_ReceivePacket+0x68>)
 800b342:	7819      	ldrb	r1, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b34a:	2340      	movs	r3, #64	@ 0x40
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 ff85 	bl	800d25c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200000c4 	.word	0x200000c4

0800b360 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b374:	2303      	movs	r3, #3
 800b376:	e01f      	b.n	800b3b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	79fa      	ldrb	r2, [r7, #7]
 800b3aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f001 fdff 	bl	800cfb0 <USBD_LL_Init>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e025      	b.n	800b424 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	32ae      	adds	r2, #174	@ 0xae
 800b3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00f      	beq.n	800b414 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	32ae      	adds	r2, #174	@ 0xae
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	f107 020e 	add.w	r2, r7, #14
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	4602      	mov	r2, r0
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 fe07 	bl	800d048 <USBD_LL_Start>
 800b43a:	4603      	mov	r3, r0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	4611      	mov	r1, r2
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	460b      	mov	r3, r1
 800b49c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	4798      	blx	r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 f90c 	bl	800c6f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4fa:	f003 031f 	and.w	r3, r3, #31
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d01a      	beq.n	800b538 <USBD_LL_SetupStage+0x72>
 800b502:	2b02      	cmp	r3, #2
 800b504:	d822      	bhi.n	800b54c <USBD_LL_SetupStage+0x86>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <USBD_LL_SetupStage+0x4a>
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d00a      	beq.n	800b524 <USBD_LL_SetupStage+0x5e>
 800b50e:	e01d      	b.n	800b54c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fb63 	bl	800bbe4 <USBD_StdDevReq>
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]
      break;
 800b522:	e020      	b.n	800b566 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fbcb 	bl	800bcc8 <USBD_StdItfReq>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]
      break;
 800b536:	e016      	b.n	800b566 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fc2d 	bl	800bda0 <USBD_StdEPReq>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
      break;
 800b54a:	e00c      	b.n	800b566 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b552:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b556:	b2db      	uxtb	r3, r3
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 fdd4 	bl	800d108 <USBD_LL_StallEP>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]
      break;
 800b564:	bf00      	nop
  }

  return ret;
 800b566:	7bfb      	ldrb	r3, [r7, #15]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	460b      	mov	r3, r1
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d16e      	bne.n	800b666 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b58e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b596:	2b03      	cmp	r3, #3
 800b598:	f040 8098 	bne.w	800b6cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	689a      	ldr	r2, [r3, #8]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d913      	bls.n	800b5d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	689a      	ldr	r2, [r3, #8]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	bf28      	it	cs
 800b5c2:	4613      	movcs	r3, r2
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f001 f994 	bl	800c8f6 <USBD_CtlContinueRx>
 800b5ce:	e07d      	b.n	800b6cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5d6:	f003 031f 	and.w	r3, r3, #31
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d014      	beq.n	800b608 <USBD_LL_DataOutStage+0x98>
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d81d      	bhi.n	800b61e <USBD_LL_DataOutStage+0xae>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <USBD_LL_DataOutStage+0x7c>
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d003      	beq.n	800b5f2 <USBD_LL_DataOutStage+0x82>
 800b5ea:	e018      	b.n	800b61e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b5f0:	e018      	b.n	800b624 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 fa64 	bl	800baca <USBD_CoreFindIF>
 800b602:	4603      	mov	r3, r0
 800b604:	75bb      	strb	r3, [r7, #22]
            break;
 800b606:	e00d      	b.n	800b624 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	4619      	mov	r1, r3
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fa66 	bl	800bae4 <USBD_CoreFindEP>
 800b618:	4603      	mov	r3, r0
 800b61a:	75bb      	strb	r3, [r7, #22]
            break;
 800b61c:	e002      	b.n	800b624 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	75bb      	strb	r3, [r7, #22]
            break;
 800b622:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b624:	7dbb      	ldrb	r3, [r7, #22]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d119      	bne.n	800b65e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b03      	cmp	r3, #3
 800b634:	d113      	bne.n	800b65e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b636:	7dba      	ldrb	r2, [r7, #22]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	32ae      	adds	r2, #174	@ 0xae
 800b63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b646:	7dba      	ldrb	r2, [r7, #22]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b64e:	7dba      	ldrb	r2, [r7, #22]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	32ae      	adds	r2, #174	@ 0xae
 800b654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f001 f95a 	bl	800c918 <USBD_CtlSendStatus>
 800b664:	e032      	b.n	800b6cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b666:	7afb      	ldrb	r3, [r7, #11]
 800b668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	4619      	mov	r1, r3
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fa37 	bl	800bae4 <USBD_CoreFindEP>
 800b676:	4603      	mov	r3, r0
 800b678:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b67a:	7dbb      	ldrb	r3, [r7, #22]
 800b67c:	2bff      	cmp	r3, #255	@ 0xff
 800b67e:	d025      	beq.n	800b6cc <USBD_LL_DataOutStage+0x15c>
 800b680:	7dbb      	ldrb	r3, [r7, #22]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d122      	bne.n	800b6cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d117      	bne.n	800b6c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b692:	7dba      	ldrb	r2, [r7, #22]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	32ae      	adds	r2, #174	@ 0xae
 800b698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00f      	beq.n	800b6c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b6a2:	7dba      	ldrb	r2, [r7, #22]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b6aa:	7dba      	ldrb	r2, [r7, #22]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	32ae      	adds	r2, #174	@ 0xae
 800b6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	7afa      	ldrb	r2, [r7, #11]
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	4798      	blx	r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	e000      	b.n	800b6ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	607a      	str	r2, [r7, #4]
 800b6e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b6e4:	7afb      	ldrb	r3, [r7, #11]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d16f      	bne.n	800b7ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3314      	adds	r3, #20
 800b6ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d15a      	bne.n	800b7b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d914      	bls.n	800b730 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	461a      	mov	r2, r3
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f001 f8bc 	bl	800c89a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b722:	2300      	movs	r3, #0
 800b724:	2200      	movs	r2, #0
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f001 fd97 	bl	800d25c <USBD_LL_PrepareReceive>
 800b72e:	e03f      	b.n	800b7b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	68da      	ldr	r2, [r3, #12]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d11c      	bne.n	800b776 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b744:	429a      	cmp	r2, r3
 800b746:	d316      	bcc.n	800b776 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b752:	429a      	cmp	r2, r3
 800b754:	d20f      	bcs.n	800b776 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b756:	2200      	movs	r2, #0
 800b758:	2100      	movs	r1, #0
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f001 f89d 	bl	800c89a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b768:	2300      	movs	r3, #0
 800b76a:	2200      	movs	r2, #0
 800b76c:	2100      	movs	r1, #0
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f001 fd74 	bl	800d25c <USBD_LL_PrepareReceive>
 800b774:	e01c      	b.n	800b7b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d10f      	bne.n	800b7a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d009      	beq.n	800b7a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7a2:	2180      	movs	r1, #128	@ 0x80
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f001 fcaf 	bl	800d108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f001 f8c7 	bl	800c93e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d03a      	beq.n	800b830 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff fe42 	bl	800b444 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7c8:	e032      	b.n	800b830 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f000 f985 	bl	800bae4 <USBD_CoreFindEP>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	2bff      	cmp	r3, #255	@ 0xff
 800b7e2:	d025      	beq.n	800b830 <USBD_LL_DataInStage+0x15a>
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d122      	bne.n	800b830 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d11c      	bne.n	800b830 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7f6:	7dfa      	ldrb	r2, [r7, #23]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	32ae      	adds	r2, #174	@ 0xae
 800b7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d014      	beq.n	800b830 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b806:	7dfa      	ldrb	r2, [r7, #23]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b80e:	7dfa      	ldrb	r2, [r7, #23]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	32ae      	adds	r2, #174	@ 0xae
 800b814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	7afa      	ldrb	r2, [r7, #11]
 800b81c:	4611      	mov	r1, r2
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	4798      	blx	r3
 800b822:	4603      	mov	r3, r0
 800b824:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b826:	7dbb      	ldrb	r3, [r7, #22]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b82c:	7dbb      	ldrb	r3, [r7, #22]
 800b82e:	e000      	b.n	800b832 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b872:	2b00      	cmp	r3, #0
 800b874:	d014      	beq.n	800b8a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	6852      	ldr	r2, [r2, #4]
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	4611      	mov	r1, r2
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b89c:	2303      	movs	r3, #3
 800b89e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8a0:	2340      	movs	r3, #64	@ 0x40
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 fbe9 	bl	800d07e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2240      	movs	r2, #64	@ 0x40
 800b8b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8bc:	2340      	movs	r3, #64	@ 0x40
 800b8be:	2200      	movs	r2, #0
 800b8c0:	2180      	movs	r1, #128	@ 0x80
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f001 fbdb 	bl	800d07e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2240      	movs	r2, #64	@ 0x40
 800b8d2:	621a      	str	r2, [r3, #32]

  return ret;
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	78fa      	ldrb	r2, [r7, #3]
 800b8ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d006      	beq.n	800b920 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2204      	movs	r2, #4
 800b924:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b04      	cmp	r3, #4
 800b948:	d106      	bne.n	800b958 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b950:	b2da      	uxtb	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b03      	cmp	r3, #3
 800b978:	d110      	bne.n	800b99c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	32ae      	adds	r2, #174	@ 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e01c      	b.n	800ba02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d115      	bne.n	800ba00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	32ae      	adds	r2, #174	@ 0xae
 800b9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00b      	beq.n	800ba00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	32ae      	adds	r2, #174	@ 0xae
 800b9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	460b      	mov	r3, r1
 800ba14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	32ae      	adds	r2, #174	@ 0xae
 800ba20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d101      	bne.n	800ba2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e01c      	b.n	800ba66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d115      	bne.n	800ba64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	32ae      	adds	r2, #174	@ 0xae
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00b      	beq.n	800ba64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	32ae      	adds	r2, #174	@ 0xae
 800ba56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5c:	78fa      	ldrb	r2, [r7, #3]
 800ba5e:	4611      	mov	r1, r2
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00e      	beq.n	800bac0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6852      	ldr	r2, [r2, #4]
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	4611      	mov	r1, r2
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800baca:	b480      	push	{r7}
 800bacc:	b083      	sub	sp, #12
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bad6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b086      	sub	sp, #24
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	7812      	ldrb	r2, [r2, #0]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d91f      	bls.n	800bb64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb2a:	e013      	b.n	800bb54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb2c:	f107 030a 	add.w	r3, r7, #10
 800bb30:	4619      	mov	r1, r3
 800bb32:	6978      	ldr	r0, [r7, #20]
 800bb34:	f000 f81b 	bl	800bb6e <USBD_GetNextDesc>
 800bb38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	785b      	ldrb	r3, [r3, #1]
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	d108      	bne.n	800bb54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	789b      	ldrb	r3, [r3, #2]
 800bb4a:	78fa      	ldrb	r2, [r7, #3]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d008      	beq.n	800bb62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb50:	2300      	movs	r3, #0
 800bb52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	885b      	ldrh	r3, [r3, #2]
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	897b      	ldrh	r3, [r7, #10]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d8e5      	bhi.n	800bb2c <USBD_GetEpDesc+0x2e>
 800bb60:	e000      	b.n	800bb64 <USBD_GetEpDesc+0x66>
          break;
 800bb62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb64:	693b      	ldr	r3, [r7, #16]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b085      	sub	sp, #20
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	7812      	ldrb	r2, [r2, #0]
 800bb84:	4413      	add	r3, r2
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	461a      	mov	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4413      	add	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb98:	68fb      	ldr	r3, [r7, #12]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b087      	sub	sp, #28
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bbc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	b21a      	sxth	r2, r3
 800bbcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbfa:	2b40      	cmp	r3, #64	@ 0x40
 800bbfc:	d005      	beq.n	800bc0a <USBD_StdDevReq+0x26>
 800bbfe:	2b40      	cmp	r3, #64	@ 0x40
 800bc00:	d857      	bhi.n	800bcb2 <USBD_StdDevReq+0xce>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00f      	beq.n	800bc26 <USBD_StdDevReq+0x42>
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	d153      	bne.n	800bcb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	32ae      	adds	r2, #174	@ 0xae
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	4798      	blx	r3
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]
      break;
 800bc24:	e04a      	b.n	800bcbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	785b      	ldrb	r3, [r3, #1]
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	d83b      	bhi.n	800bca6 <USBD_StdDevReq+0xc2>
 800bc2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc34 <USBD_StdDevReq+0x50>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc89 	.word	0x0800bc89
 800bc38:	0800bc9d 	.word	0x0800bc9d
 800bc3c:	0800bca7 	.word	0x0800bca7
 800bc40:	0800bc93 	.word	0x0800bc93
 800bc44:	0800bca7 	.word	0x0800bca7
 800bc48:	0800bc67 	.word	0x0800bc67
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bca7 	.word	0x0800bca7
 800bc54:	0800bc7f 	.word	0x0800bc7f
 800bc58:	0800bc71 	.word	0x0800bc71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa3c 	bl	800c0dc <USBD_GetDescriptor>
          break;
 800bc64:	e024      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fba1 	bl	800c3b0 <USBD_SetAddress>
          break;
 800bc6e:	e01f      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fbe0 	bl	800c438 <USBD_SetConfig>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
          break;
 800bc7c:	e018      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fc83 	bl	800c58c <USBD_GetConfig>
          break;
 800bc86:	e013      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fcb4 	bl	800c5f8 <USBD_GetStatus>
          break;
 800bc90:	e00e      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fce3 	bl	800c660 <USBD_SetFeature>
          break;
 800bc9a:	e009      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fd07 	bl	800c6b2 <USBD_ClrFeature>
          break;
 800bca4:	e004      	b.n	800bcb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fd5e 	bl	800c76a <USBD_CtlError>
          break;
 800bcae:	bf00      	nop
      }
      break;
 800bcb0:	e004      	b.n	800bcbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fd58 	bl	800c76a <USBD_CtlError>
      break;
 800bcba:	bf00      	nop
  }

  return ret;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop

0800bcc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcde:	2b40      	cmp	r3, #64	@ 0x40
 800bce0:	d005      	beq.n	800bcee <USBD_StdItfReq+0x26>
 800bce2:	2b40      	cmp	r3, #64	@ 0x40
 800bce4:	d852      	bhi.n	800bd8c <USBD_StdItfReq+0xc4>
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <USBD_StdItfReq+0x26>
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	d14e      	bne.n	800bd8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d840      	bhi.n	800bd7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	889b      	ldrh	r3, [r3, #4]
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d836      	bhi.n	800bd74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	889b      	ldrh	r3, [r3, #4]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff fedb 	bl	800baca <USBD_CoreFindIF>
 800bd14:	4603      	mov	r3, r0
 800bd16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	2bff      	cmp	r3, #255	@ 0xff
 800bd1c:	d01d      	beq.n	800bd5a <USBD_StdItfReq+0x92>
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d11a      	bne.n	800bd5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd24:	7bba      	ldrb	r2, [r7, #14]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	32ae      	adds	r2, #174	@ 0xae
 800bd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00f      	beq.n	800bd54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd34:	7bba      	ldrb	r2, [r7, #14]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd3c:	7bba      	ldrb	r2, [r7, #14]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	32ae      	adds	r2, #174	@ 0xae
 800bd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd52:	e004      	b.n	800bd5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd58:	e001      	b.n	800bd5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	88db      	ldrh	r3, [r3, #6]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d110      	bne.n	800bd88 <USBD_StdItfReq+0xc0>
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10d      	bne.n	800bd88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fdd3 	bl	800c918 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd72:	e009      	b.n	800bd88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fcf7 	bl	800c76a <USBD_CtlError>
          break;
 800bd7c:	e004      	b.n	800bd88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fcf2 	bl	800c76a <USBD_CtlError>
          break;
 800bd86:	e000      	b.n	800bd8a <USBD_StdItfReq+0xc2>
          break;
 800bd88:	bf00      	nop
      }
      break;
 800bd8a:	e004      	b.n	800bd96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fceb 	bl	800c76a <USBD_CtlError>
      break;
 800bd94:	bf00      	nop
  }

  return ret;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	889b      	ldrh	r3, [r3, #4]
 800bdb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdbc:	2b40      	cmp	r3, #64	@ 0x40
 800bdbe:	d007      	beq.n	800bdd0 <USBD_StdEPReq+0x30>
 800bdc0:	2b40      	cmp	r3, #64	@ 0x40
 800bdc2:	f200 817f 	bhi.w	800c0c4 <USBD_StdEPReq+0x324>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d02a      	beq.n	800be20 <USBD_StdEPReq+0x80>
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	f040 817a 	bne.w	800c0c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff fe85 	bl	800bae4 <USBD_CoreFindEP>
 800bdda:	4603      	mov	r3, r0
 800bddc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdde:	7b7b      	ldrb	r3, [r7, #13]
 800bde0:	2bff      	cmp	r3, #255	@ 0xff
 800bde2:	f000 8174 	beq.w	800c0ce <USBD_StdEPReq+0x32e>
 800bde6:	7b7b      	ldrb	r3, [r7, #13]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f040 8170 	bne.w	800c0ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bdee:	7b7a      	ldrb	r2, [r7, #13]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdf6:	7b7a      	ldrb	r2, [r7, #13]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	32ae      	adds	r2, #174	@ 0xae
 800bdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	f000 8163 	beq.w	800c0ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be08:	7b7a      	ldrb	r2, [r7, #13]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	32ae      	adds	r2, #174	@ 0xae
 800be0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	4798      	blx	r3
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be1e:	e156      	b.n	800c0ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	785b      	ldrb	r3, [r3, #1]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d008      	beq.n	800be3a <USBD_StdEPReq+0x9a>
 800be28:	2b03      	cmp	r3, #3
 800be2a:	f300 8145 	bgt.w	800c0b8 <USBD_StdEPReq+0x318>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 809b 	beq.w	800bf6a <USBD_StdEPReq+0x1ca>
 800be34:	2b01      	cmp	r3, #1
 800be36:	d03c      	beq.n	800beb2 <USBD_StdEPReq+0x112>
 800be38:	e13e      	b.n	800c0b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d002      	beq.n	800be4c <USBD_StdEPReq+0xac>
 800be46:	2b03      	cmp	r3, #3
 800be48:	d016      	beq.n	800be78 <USBD_StdEPReq+0xd8>
 800be4a:	e02c      	b.n	800bea6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00d      	beq.n	800be6e <USBD_StdEPReq+0xce>
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b80      	cmp	r3, #128	@ 0x80
 800be56:	d00a      	beq.n	800be6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 f953 	bl	800d108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be62:	2180      	movs	r1, #128	@ 0x80
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 f94f 	bl	800d108 <USBD_LL_StallEP>
 800be6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be6c:	e020      	b.n	800beb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fc7a 	bl	800c76a <USBD_CtlError>
              break;
 800be76:	e01b      	b.n	800beb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	885b      	ldrh	r3, [r3, #2]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10e      	bne.n	800be9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be80:	7bbb      	ldrb	r3, [r7, #14]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00b      	beq.n	800be9e <USBD_StdEPReq+0xfe>
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	2b80      	cmp	r3, #128	@ 0x80
 800be8a:	d008      	beq.n	800be9e <USBD_StdEPReq+0xfe>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	88db      	ldrh	r3, [r3, #6]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d104      	bne.n	800be9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 f935 	bl	800d108 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fd3a 	bl	800c918 <USBD_CtlSendStatus>

              break;
 800bea4:	e004      	b.n	800beb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fc5e 	bl	800c76a <USBD_CtlError>
              break;
 800beae:	bf00      	nop
          }
          break;
 800beb0:	e107      	b.n	800c0c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d002      	beq.n	800bec4 <USBD_StdEPReq+0x124>
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d016      	beq.n	800bef0 <USBD_StdEPReq+0x150>
 800bec2:	e04b      	b.n	800bf5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00d      	beq.n	800bee6 <USBD_StdEPReq+0x146>
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	2b80      	cmp	r3, #128	@ 0x80
 800bece:	d00a      	beq.n	800bee6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 f917 	bl	800d108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800beda:	2180      	movs	r1, #128	@ 0x80
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 f913 	bl	800d108 <USBD_LL_StallEP>
 800bee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bee4:	e040      	b.n	800bf68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fc3e 	bl	800c76a <USBD_CtlError>
              break;
 800beee:	e03b      	b.n	800bf68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	885b      	ldrh	r3, [r3, #2]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d136      	bne.n	800bf66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d004      	beq.n	800bf0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 f91d 	bl	800d146 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fd03 	bl	800c918 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fde4 	bl	800bae4 <USBD_CoreFindEP>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf20:	7b7b      	ldrb	r3, [r7, #13]
 800bf22:	2bff      	cmp	r3, #255	@ 0xff
 800bf24:	d01f      	beq.n	800bf66 <USBD_StdEPReq+0x1c6>
 800bf26:	7b7b      	ldrb	r3, [r7, #13]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d11c      	bne.n	800bf66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf2c:	7b7a      	ldrb	r2, [r7, #13]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf34:	7b7a      	ldrb	r2, [r7, #13]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32ae      	adds	r2, #174	@ 0xae
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d010      	beq.n	800bf66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf44:	7b7a      	ldrb	r2, [r7, #13]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32ae      	adds	r2, #174	@ 0xae
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
 800bf56:	4603      	mov	r3, r0
 800bf58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf5a:	e004      	b.n	800bf66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fc03 	bl	800c76a <USBD_CtlError>
              break;
 800bf64:	e000      	b.n	800bf68 <USBD_StdEPReq+0x1c8>
              break;
 800bf66:	bf00      	nop
          }
          break;
 800bf68:	e0ab      	b.n	800c0c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d002      	beq.n	800bf7c <USBD_StdEPReq+0x1dc>
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d032      	beq.n	800bfe0 <USBD_StdEPReq+0x240>
 800bf7a:	e097      	b.n	800c0ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d007      	beq.n	800bf92 <USBD_StdEPReq+0x1f2>
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b80      	cmp	r3, #128	@ 0x80
 800bf86:	d004      	beq.n	800bf92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fbed 	bl	800c76a <USBD_CtlError>
                break;
 800bf90:	e091      	b.n	800c0b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	da0b      	bge.n	800bfb2 <USBD_StdEPReq+0x212>
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	3310      	adds	r3, #16
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	3304      	adds	r3, #4
 800bfb0:	e00b      	b.n	800bfca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
 800bfb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3304      	adds	r3, #4
 800bfca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fc43 	bl	800c864 <USBD_CtlSendData>
              break;
 800bfde:	e06a      	b.n	800c0b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	da11      	bge.n	800c00c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	f003 020f 	and.w	r2, r3, #15
 800bfee:	6879      	ldr	r1, [r7, #4]
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	440b      	add	r3, r1
 800bffa:	3324      	adds	r3, #36	@ 0x24
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d117      	bne.n	800c032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fbb0 	bl	800c76a <USBD_CtlError>
                  break;
 800c00a:	e054      	b.n	800c0b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	f003 020f 	and.w	r2, r3, #15
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d104      	bne.n	800c032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fb9d 	bl	800c76a <USBD_CtlError>
                  break;
 800c030:	e041      	b.n	800c0b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	da0b      	bge.n	800c052 <USBD_StdEPReq+0x2b2>
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	3310      	adds	r3, #16
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	3304      	adds	r3, #4
 800c050:	e00b      	b.n	800c06a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	4413      	add	r3, r2
 800c068:	3304      	adds	r3, #4
 800c06a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <USBD_StdEPReq+0x2d8>
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	2b80      	cmp	r3, #128	@ 0x80
 800c076:	d103      	bne.n	800c080 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e00e      	b.n	800c09e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 f87d 	bl	800d184 <USBD_LL_IsStallEP>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2201      	movs	r2, #1
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	e002      	b.n	800c09e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2200      	movs	r2, #0
 800c09c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fbdd 	bl	800c864 <USBD_CtlSendData>
              break;
 800c0aa:	e004      	b.n	800c0b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fb5b 	bl	800c76a <USBD_CtlError>
              break;
 800c0b4:	bf00      	nop
          }
          break;
 800c0b6:	e004      	b.n	800c0c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fb55 	bl	800c76a <USBD_CtlError>
          break;
 800c0c0:	bf00      	nop
      }
      break;
 800c0c2:	e005      	b.n	800c0d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fb4f 	bl	800c76a <USBD_CtlError>
      break;
 800c0cc:	e000      	b.n	800c0d0 <USBD_StdEPReq+0x330>
      break;
 800c0ce:	bf00      	nop
  }

  return ret;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	885b      	ldrh	r3, [r3, #2]
 800c0f6:	0a1b      	lsrs	r3, r3, #8
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	2b06      	cmp	r3, #6
 800c0fe:	f200 8128 	bhi.w	800c352 <USBD_GetDescriptor+0x276>
 800c102:	a201      	add	r2, pc, #4	@ (adr r2, 800c108 <USBD_GetDescriptor+0x2c>)
 800c104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c108:	0800c125 	.word	0x0800c125
 800c10c:	0800c13d 	.word	0x0800c13d
 800c110:	0800c17d 	.word	0x0800c17d
 800c114:	0800c353 	.word	0x0800c353
 800c118:	0800c353 	.word	0x0800c353
 800c11c:	0800c2f3 	.word	0x0800c2f3
 800c120:	0800c31f 	.word	0x0800c31f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	7c12      	ldrb	r2, [r2, #16]
 800c130:	f107 0108 	add.w	r1, r7, #8
 800c134:	4610      	mov	r0, r2
 800c136:	4798      	blx	r3
 800c138:	60f8      	str	r0, [r7, #12]
      break;
 800c13a:	e112      	b.n	800c362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7c1b      	ldrb	r3, [r3, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10d      	bne.n	800c160 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14c:	f107 0208 	add.w	r2, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3301      	adds	r3, #1
 800c15a:	2202      	movs	r2, #2
 800c15c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c15e:	e100      	b.n	800c362 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c168:	f107 0208 	add.w	r2, r7, #8
 800c16c:	4610      	mov	r0, r2
 800c16e:	4798      	blx	r3
 800c170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	2202      	movs	r2, #2
 800c178:	701a      	strb	r2, [r3, #0]
      break;
 800c17a:	e0f2      	b.n	800c362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	885b      	ldrh	r3, [r3, #2]
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b05      	cmp	r3, #5
 800c184:	f200 80ac 	bhi.w	800c2e0 <USBD_GetDescriptor+0x204>
 800c188:	a201      	add	r2, pc, #4	@ (adr r2, 800c190 <USBD_GetDescriptor+0xb4>)
 800c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18e:	bf00      	nop
 800c190:	0800c1a9 	.word	0x0800c1a9
 800c194:	0800c1dd 	.word	0x0800c1dd
 800c198:	0800c211 	.word	0x0800c211
 800c19c:	0800c245 	.word	0x0800c245
 800c1a0:	0800c279 	.word	0x0800c279
 800c1a4:	0800c2ad 	.word	0x0800c2ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	7c12      	ldrb	r2, [r2, #16]
 800c1c0:	f107 0108 	add.w	r1, r7, #8
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	4798      	blx	r3
 800c1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ca:	e091      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 facb 	bl	800c76a <USBD_CtlError>
            err++;
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1da:	e089      	b.n	800c2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	7c12      	ldrb	r2, [r2, #16]
 800c1f4:	f107 0108 	add.w	r1, r7, #8
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	4798      	blx	r3
 800c1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1fe:	e077      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fab1 	bl	800c76a <USBD_CtlError>
            err++;
 800c208:	7afb      	ldrb	r3, [r7, #11]
 800c20a:	3301      	adds	r3, #1
 800c20c:	72fb      	strb	r3, [r7, #11]
          break;
 800c20e:	e06f      	b.n	800c2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00b      	beq.n	800c234 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7c12      	ldrb	r2, [r2, #16]
 800c228:	f107 0108 	add.w	r1, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c232:	e05d      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fa97 	bl	800c76a <USBD_CtlError>
            err++;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	3301      	adds	r3, #1
 800c240:	72fb      	strb	r3, [r7, #11]
          break;
 800c242:	e055      	b.n	800c2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	7c12      	ldrb	r2, [r2, #16]
 800c25c:	f107 0108 	add.w	r1, r7, #8
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
 800c264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c266:	e043      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa7d 	bl	800c76a <USBD_CtlError>
            err++;
 800c270:	7afb      	ldrb	r3, [r7, #11]
 800c272:	3301      	adds	r3, #1
 800c274:	72fb      	strb	r3, [r7, #11]
          break;
 800c276:	e03b      	b.n	800c2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00b      	beq.n	800c29c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	7c12      	ldrb	r2, [r2, #16]
 800c290:	f107 0108 	add.w	r1, r7, #8
 800c294:	4610      	mov	r0, r2
 800c296:	4798      	blx	r3
 800c298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c29a:	e029      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fa63 	bl	800c76a <USBD_CtlError>
            err++;
 800c2a4:	7afb      	ldrb	r3, [r7, #11]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2aa:	e021      	b.n	800c2f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	7c12      	ldrb	r2, [r2, #16]
 800c2c4:	f107 0108 	add.w	r1, r7, #8
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
 800c2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ce:	e00f      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fa49 	bl	800c76a <USBD_CtlError>
            err++;
 800c2d8:	7afb      	ldrb	r3, [r7, #11]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2de:	e007      	b.n	800c2f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fa41 	bl	800c76a <USBD_CtlError>
          err++;
 800c2e8:	7afb      	ldrb	r3, [r7, #11]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2ee:	bf00      	nop
      }
      break;
 800c2f0:	e037      	b.n	800c362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	7c1b      	ldrb	r3, [r3, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d109      	bne.n	800c30e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c302:	f107 0208 	add.w	r2, r7, #8
 800c306:	4610      	mov	r0, r2
 800c308:	4798      	blx	r3
 800c30a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c30c:	e029      	b.n	800c362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa2a 	bl	800c76a <USBD_CtlError>
        err++;
 800c316:	7afb      	ldrb	r3, [r7, #11]
 800c318:	3301      	adds	r3, #1
 800c31a:	72fb      	strb	r3, [r7, #11]
      break;
 800c31c:	e021      	b.n	800c362 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	7c1b      	ldrb	r3, [r3, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10d      	bne.n	800c342 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c32e:	f107 0208 	add.w	r2, r7, #8
 800c332:	4610      	mov	r0, r2
 800c334:	4798      	blx	r3
 800c336:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	2207      	movs	r2, #7
 800c33e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c340:	e00f      	b.n	800c362 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fa10 	bl	800c76a <USBD_CtlError>
        err++;
 800c34a:	7afb      	ldrb	r3, [r7, #11]
 800c34c:	3301      	adds	r3, #1
 800c34e:	72fb      	strb	r3, [r7, #11]
      break;
 800c350:	e007      	b.n	800c362 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fa08 	bl	800c76a <USBD_CtlError>
      err++;
 800c35a:	7afb      	ldrb	r3, [r7, #11]
 800c35c:	3301      	adds	r3, #1
 800c35e:	72fb      	strb	r3, [r7, #11]
      break;
 800c360:	bf00      	nop
  }

  if (err != 0U)
 800c362:	7afb      	ldrb	r3, [r7, #11]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d11e      	bne.n	800c3a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	88db      	ldrh	r3, [r3, #6]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d016      	beq.n	800c39e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c370:	893b      	ldrh	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00e      	beq.n	800c394 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	88da      	ldrh	r2, [r3, #6]
 800c37a:	893b      	ldrh	r3, [r7, #8]
 800c37c:	4293      	cmp	r3, r2
 800c37e:	bf28      	it	cs
 800c380:	4613      	movcs	r3, r2
 800c382:	b29b      	uxth	r3, r3
 800c384:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c386:	893b      	ldrh	r3, [r7, #8]
 800c388:	461a      	mov	r2, r3
 800c38a:	68f9      	ldr	r1, [r7, #12]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fa69 	bl	800c864 <USBD_CtlSendData>
 800c392:	e009      	b.n	800c3a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 f9e7 	bl	800c76a <USBD_CtlError>
 800c39c:	e004      	b.n	800c3a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 faba 	bl	800c918 <USBD_CtlSendStatus>
 800c3a4:	e000      	b.n	800c3a8 <USBD_GetDescriptor+0x2cc>
    return;
 800c3a6:	bf00      	nop
  }
}
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop

0800c3b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	889b      	ldrh	r3, [r3, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d131      	bne.n	800c426 <USBD_SetAddress+0x76>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	88db      	ldrh	r3, [r3, #6]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d12d      	bne.n	800c426 <USBD_SetAddress+0x76>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	885b      	ldrh	r3, [r3, #2]
 800c3ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3d0:	d829      	bhi.n	800c426 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	885b      	ldrh	r3, [r3, #2]
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d104      	bne.n	800c3f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f9bc 	bl	800c76a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f2:	e01d      	b.n	800c430 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7bfa      	ldrb	r2, [r7, #15]
 800c3f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 feeb 	bl	800d1dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fa86 	bl	800c918 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d004      	beq.n	800c41c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41a:	e009      	b.n	800c430 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c424:	e004      	b.n	800c430 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 f99e 	bl	800c76a <USBD_CtlError>
  }
}
 800c42e:	bf00      	nop
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	4b4e      	ldr	r3, [pc, #312]	@ (800c588 <USBD_SetConfig+0x150>)
 800c44e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c450:	4b4d      	ldr	r3, [pc, #308]	@ (800c588 <USBD_SetConfig+0x150>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d905      	bls.n	800c464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f985 	bl	800c76a <USBD_CtlError>
    return USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	e08c      	b.n	800c57e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d002      	beq.n	800c476 <USBD_SetConfig+0x3e>
 800c470:	2b03      	cmp	r3, #3
 800c472:	d029      	beq.n	800c4c8 <USBD_SetConfig+0x90>
 800c474:	e075      	b.n	800c562 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c476:	4b44      	ldr	r3, [pc, #272]	@ (800c588 <USBD_SetConfig+0x150>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d020      	beq.n	800c4c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c47e:	4b42      	ldr	r3, [pc, #264]	@ (800c588 <USBD_SetConfig+0x150>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c488:	4b3f      	ldr	r3, [pc, #252]	@ (800c588 <USBD_SetConfig+0x150>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7fe ffe3 	bl	800b45a <USBD_SetClassConfig>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d008      	beq.n	800c4b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f962 	bl	800c76a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4ae:	e065      	b.n	800c57c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fa31 	bl	800c918 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c4be:	e05d      	b.n	800c57c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa29 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c4c6:	e059      	b.n	800c57c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4c8:	4b2f      	ldr	r3, [pc, #188]	@ (800c588 <USBD_SetConfig+0x150>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d112      	bne.n	800c4f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c4d8:	4b2b      	ldr	r3, [pc, #172]	@ (800c588 <USBD_SetConfig+0x150>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4e2:	4b29      	ldr	r3, [pc, #164]	@ (800c588 <USBD_SetConfig+0x150>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7fe ffd2 	bl	800b492 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fa12 	bl	800c918 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4f4:	e042      	b.n	800c57c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c4f6:	4b24      	ldr	r3, [pc, #144]	@ (800c588 <USBD_SetConfig+0x150>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	429a      	cmp	r2, r3
 800c502:	d02a      	beq.n	800c55a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7fe ffc0 	bl	800b492 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c512:	4b1d      	ldr	r3, [pc, #116]	@ (800c588 <USBD_SetConfig+0x150>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c51c:	4b1a      	ldr	r3, [pc, #104]	@ (800c588 <USBD_SetConfig+0x150>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7fe ff99 	bl	800b45a <USBD_SetClassConfig>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00f      	beq.n	800c552 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f918 	bl	800c76a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7fe ffa5 	bl	800b492 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2202      	movs	r2, #2
 800c54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c550:	e014      	b.n	800c57c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f9e0 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c558:	e010      	b.n	800c57c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f9dc 	bl	800c918 <USBD_CtlSendStatus>
      break;
 800c560:	e00c      	b.n	800c57c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f900 	bl	800c76a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c56a:	4b07      	ldr	r3, [pc, #28]	@ (800c588 <USBD_SetConfig+0x150>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7fe ff8e 	bl	800b492 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c576:	2303      	movs	r3, #3
 800c578:	73fb      	strb	r3, [r7, #15]
      break;
 800c57a:	bf00      	nop
  }

  return ret;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	2000085c 	.word	0x2000085c

0800c58c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	88db      	ldrh	r3, [r3, #6]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d004      	beq.n	800c5a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f8e2 	bl	800c76a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5a6:	e023      	b.n	800c5f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	dc02      	bgt.n	800c5ba <USBD_GetConfig+0x2e>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dc03      	bgt.n	800c5c0 <USBD_GetConfig+0x34>
 800c5b8:	e015      	b.n	800c5e6 <USBD_GetConfig+0x5a>
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d00b      	beq.n	800c5d6 <USBD_GetConfig+0x4a>
 800c5be:	e012      	b.n	800c5e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f948 	bl	800c864 <USBD_CtlSendData>
        break;
 800c5d4:	e00c      	b.n	800c5f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	2201      	movs	r2, #1
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f940 	bl	800c864 <USBD_CtlSendData>
        break;
 800c5e4:	e004      	b.n	800c5f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f8be 	bl	800c76a <USBD_CtlError>
        break;
 800c5ee:	bf00      	nop
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	3b01      	subs	r3, #1
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d81e      	bhi.n	800c64e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	88db      	ldrh	r3, [r3, #6]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d004      	beq.n	800c622 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f8a5 	bl	800c76a <USBD_CtlError>
        break;
 800c620:	e01a      	b.n	800c658 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	f043 0202 	orr.w	r2, r3, #2
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	330c      	adds	r3, #12
 800c642:	2202      	movs	r2, #2
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f90c 	bl	800c864 <USBD_CtlSendData>
      break;
 800c64c:	e004      	b.n	800c658 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f88a 	bl	800c76a <USBD_CtlError>
      break;
 800c656:	bf00      	nop
  }
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d107      	bne.n	800c682 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f94c 	bl	800c918 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c680:	e013      	b.n	800c6aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d10b      	bne.n	800c6a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	889b      	ldrh	r3, [r3, #4]
 800c68e:	0a1b      	lsrs	r3, r3, #8
 800c690:	b29b      	uxth	r3, r3
 800c692:	b2da      	uxtb	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f93c 	bl	800c918 <USBD_CtlSendStatus>
}
 800c6a0:	e003      	b.n	800c6aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f860 	bl	800c76a <USBD_CtlError>
}
 800c6aa:	bf00      	nop
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d80b      	bhi.n	800c6e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	885b      	ldrh	r3, [r3, #2]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d10c      	bne.n	800c6ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f91c 	bl	800c918 <USBD_CtlSendStatus>
      }
      break;
 800c6e0:	e004      	b.n	800c6ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f840 	bl	800c76a <USBD_CtlError>
      break;
 800c6ea:	e000      	b.n	800c6ee <USBD_ClrFeature+0x3c>
      break;
 800c6ec:	bf00      	nop
  }
}
 800c6ee:	bf00      	nop
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3301      	adds	r3, #1
 800c710:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	781a      	ldrb	r2, [r3, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3301      	adds	r3, #1
 800c71e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f7ff fa40 	bl	800bba6 <SWAPBYTE>
 800c726:	4603      	mov	r3, r0
 800c728:	461a      	mov	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3301      	adds	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	3301      	adds	r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f7ff fa33 	bl	800bba6 <SWAPBYTE>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3301      	adds	r3, #1
 800c74c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f7ff fa26 	bl	800bba6 <SWAPBYTE>
 800c75a:	4603      	mov	r3, r0
 800c75c:	461a      	mov	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	80da      	strh	r2, [r3, #6]
}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c774:	2180      	movs	r1, #128	@ 0x80
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fcc6 	bl	800d108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c77c:	2100      	movs	r1, #0
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fcc2 	bl	800d108 <USBD_LL_StallEP>
}
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b086      	sub	sp, #24
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d042      	beq.n	800c828 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f000 f842 	bl	800c830 <USBD_GetLen>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7b6:	d808      	bhi.n	800c7ca <USBD_GetString+0x3e>
 800c7b8:	6938      	ldr	r0, [r7, #16]
 800c7ba:	f000 f839 	bl	800c830 <USBD_GetLen>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	e001      	b.n	800c7ce <USBD_GetString+0x42>
 800c7ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7812      	ldrb	r2, [r2, #0]
 800c7dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c7f4:	e013      	b.n	800c81e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	7812      	ldrb	r2, [r2, #0]
 800c800:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	3301      	adds	r3, #1
 800c806:	613b      	str	r3, [r7, #16]
    idx++;
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	3301      	adds	r3, #1
 800c80c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	4413      	add	r3, r2
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]
    idx++;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	3301      	adds	r3, #1
 800c81c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1e7      	bne.n	800c7f6 <USBD_GetString+0x6a>
 800c826:	e000      	b.n	800c82a <USBD_GetString+0x9e>
    return;
 800c828:	bf00      	nop
  }
}
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c840:	e005      	b.n	800c84e <USBD_GetLen+0x1e>
  {
    len++;
 800c842:	7bfb      	ldrb	r3, [r7, #15]
 800c844:	3301      	adds	r3, #1
 800c846:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	3301      	adds	r3, #1
 800c84c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1f5      	bne.n	800c842 <USBD_GetLen+0x12>
  }

  return len;
 800c856:	7bfb      	ldrb	r3, [r7, #15]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2202      	movs	r2, #2
 800c874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	2100      	movs	r1, #0
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f000 fcc5 	bl	800d21a <USBD_LL_Transmit>

  return USBD_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	60b9      	str	r1, [r7, #8]
 800c8a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 fcb4 	bl	800d21a <USBD_LL_Transmit>

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2203      	movs	r2, #3
 800c8cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 fcb8 	bl	800d25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	60f8      	str	r0, [r7, #12]
 800c8fe:	60b9      	str	r1, [r7, #8]
 800c900:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	2100      	movs	r1, #0
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fca7 	bl	800d25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2204      	movs	r2, #4
 800c924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c928:	2300      	movs	r3, #0
 800c92a:	2200      	movs	r2, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fc73 	bl	800d21a <USBD_LL_Transmit>

  return USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2205      	movs	r2, #5
 800c94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c94e:	2300      	movs	r3, #0
 800c950:	2200      	movs	r2, #0
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fc81 	bl	800d25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c968:	2200      	movs	r2, #0
 800c96a:	4912      	ldr	r1, [pc, #72]	@ (800c9b4 <MX_USB_DEVICE_Init+0x50>)
 800c96c:	4812      	ldr	r0, [pc, #72]	@ (800c9b8 <MX_USB_DEVICE_Init+0x54>)
 800c96e:	f7fe fcf7 	bl	800b360 <USBD_Init>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c978:	f7f7 fa54 	bl	8003e24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c97c:	490f      	ldr	r1, [pc, #60]	@ (800c9bc <MX_USB_DEVICE_Init+0x58>)
 800c97e:	480e      	ldr	r0, [pc, #56]	@ (800c9b8 <MX_USB_DEVICE_Init+0x54>)
 800c980:	f7fe fd1e 	bl	800b3c0 <USBD_RegisterClass>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c98a:	f7f7 fa4b 	bl	8003e24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c98e:	490c      	ldr	r1, [pc, #48]	@ (800c9c0 <MX_USB_DEVICE_Init+0x5c>)
 800c990:	4809      	ldr	r0, [pc, #36]	@ (800c9b8 <MX_USB_DEVICE_Init+0x54>)
 800c992:	f7fe fc55 	bl	800b240 <USBD_CDC_RegisterInterface>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c99c:	f7f7 fa42 	bl	8003e24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9a0:	4805      	ldr	r0, [pc, #20]	@ (800c9b8 <MX_USB_DEVICE_Init+0x54>)
 800c9a2:	f7fe fd43 	bl	800b42c <USBD_Start>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9ac:	f7f7 fa3a 	bl	8003e24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9b0:	bf00      	nop
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	200000dc 	.word	0x200000dc
 800c9b8:	20000860 	.word	0x20000860
 800c9bc:	20000048 	.word	0x20000048
 800c9c0:	200000c8 	.word	0x200000c8

0800c9c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4905      	ldr	r1, [pc, #20]	@ (800c9e0 <CDC_Init_FS+0x1c>)
 800c9cc:	4805      	ldr	r0, [pc, #20]	@ (800c9e4 <CDC_Init_FS+0x20>)
 800c9ce:	f7fe fc51 	bl	800b274 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9d2:	4905      	ldr	r1, [pc, #20]	@ (800c9e8 <CDC_Init_FS+0x24>)
 800c9d4:	4803      	ldr	r0, [pc, #12]	@ (800c9e4 <CDC_Init_FS+0x20>)
 800c9d6:	f7fe fc6f 	bl	800b2b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	2000133c 	.word	0x2000133c
 800c9e4:	20000860 	.word	0x20000860
 800c9e8:	20000b3c 	.word	0x20000b3c

0800c9ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	6039      	str	r1, [r7, #0]
 800ca06:	71fb      	strb	r3, [r7, #7]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	2b23      	cmp	r3, #35	@ 0x23
 800ca10:	d84a      	bhi.n	800caa8 <CDC_Control_FS+0xac>
 800ca12:	a201      	add	r2, pc, #4	@ (adr r2, 800ca18 <CDC_Control_FS+0x1c>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800caa9 	.word	0x0800caa9
 800ca1c:	0800caa9 	.word	0x0800caa9
 800ca20:	0800caa9 	.word	0x0800caa9
 800ca24:	0800caa9 	.word	0x0800caa9
 800ca28:	0800caa9 	.word	0x0800caa9
 800ca2c:	0800caa9 	.word	0x0800caa9
 800ca30:	0800caa9 	.word	0x0800caa9
 800ca34:	0800caa9 	.word	0x0800caa9
 800ca38:	0800caa9 	.word	0x0800caa9
 800ca3c:	0800caa9 	.word	0x0800caa9
 800ca40:	0800caa9 	.word	0x0800caa9
 800ca44:	0800caa9 	.word	0x0800caa9
 800ca48:	0800caa9 	.word	0x0800caa9
 800ca4c:	0800caa9 	.word	0x0800caa9
 800ca50:	0800caa9 	.word	0x0800caa9
 800ca54:	0800caa9 	.word	0x0800caa9
 800ca58:	0800caa9 	.word	0x0800caa9
 800ca5c:	0800caa9 	.word	0x0800caa9
 800ca60:	0800caa9 	.word	0x0800caa9
 800ca64:	0800caa9 	.word	0x0800caa9
 800ca68:	0800caa9 	.word	0x0800caa9
 800ca6c:	0800caa9 	.word	0x0800caa9
 800ca70:	0800caa9 	.word	0x0800caa9
 800ca74:	0800caa9 	.word	0x0800caa9
 800ca78:	0800caa9 	.word	0x0800caa9
 800ca7c:	0800caa9 	.word	0x0800caa9
 800ca80:	0800caa9 	.word	0x0800caa9
 800ca84:	0800caa9 	.word	0x0800caa9
 800ca88:	0800caa9 	.word	0x0800caa9
 800ca8c:	0800caa9 	.word	0x0800caa9
 800ca90:	0800caa9 	.word	0x0800caa9
 800ca94:	0800caa9 	.word	0x0800caa9
 800ca98:	0800caa9 	.word	0x0800caa9
 800ca9c:	0800caa9 	.word	0x0800caa9
 800caa0:	0800caa9 	.word	0x0800caa9
 800caa4:	0800caa9 	.word	0x0800caa9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800caa8:	bf00      	nop
  }

  return (USBD_OK);
 800caaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800caac:	4618      	mov	r0, r3
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4805      	ldr	r0, [pc, #20]	@ (800cadc <CDC_Receive_FS+0x24>)
 800cac6:	f7fe fbf7 	bl	800b2b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800caca:	4804      	ldr	r0, [pc, #16]	@ (800cadc <CDC_Receive_FS+0x24>)
 800cacc:	f7fe fc12 	bl	800b2f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cad0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	20000860 	.word	0x20000860

0800cae0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	4613      	mov	r3, r2
 800caec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800caf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
	...

0800cb04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	6039      	str	r1, [r7, #0]
 800cb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	2212      	movs	r2, #18
 800cb14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb16:	4b03      	ldr	r3, [pc, #12]	@ (800cb24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	200000f8 	.word	0x200000f8

0800cb28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6039      	str	r1, [r7, #0]
 800cb32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2204      	movs	r2, #4
 800cb38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb3a:	4b03      	ldr	r3, [pc, #12]	@ (800cb48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr
 800cb48:	2000010c 	.word	0x2000010c

0800cb4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	6039      	str	r1, [r7, #0]
 800cb56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	4907      	ldr	r1, [pc, #28]	@ (800cb80 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb62:	4808      	ldr	r0, [pc, #32]	@ (800cb84 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb64:	f7ff fe12 	bl	800c78c <USBD_GetString>
 800cb68:	e004      	b.n	800cb74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	4904      	ldr	r1, [pc, #16]	@ (800cb80 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb6e:	4805      	ldr	r0, [pc, #20]	@ (800cb84 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb70:	f7ff fe0c 	bl	800c78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb74:	4b02      	ldr	r3, [pc, #8]	@ (800cb80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20001b3c 	.word	0x20001b3c
 800cb84:	080107c0 	.word	0x080107c0

0800cb88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	6039      	str	r1, [r7, #0]
 800cb92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	4904      	ldr	r1, [pc, #16]	@ (800cba8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb98:	4804      	ldr	r0, [pc, #16]	@ (800cbac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb9a:	f7ff fdf7 	bl	800c78c <USBD_GetString>
  return USBD_StrDesc;
 800cb9e:	4b02      	ldr	r3, [pc, #8]	@ (800cba8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20001b3c 	.word	0x20001b3c
 800cbac:	080107d8 	.word	0x080107d8

0800cbb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	221a      	movs	r2, #26
 800cbc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbc2:	f000 f843 	bl	800cc4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbc6:	4b02      	ldr	r3, [pc, #8]	@ (800cbd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20000110 	.word	0x20000110

0800cbd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d105      	bne.n	800cbf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	4907      	ldr	r1, [pc, #28]	@ (800cc08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbea:	4808      	ldr	r0, [pc, #32]	@ (800cc0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbec:	f7ff fdce 	bl	800c78c <USBD_GetString>
 800cbf0:	e004      	b.n	800cbfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	4904      	ldr	r1, [pc, #16]	@ (800cc08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbf6:	4805      	ldr	r0, [pc, #20]	@ (800cc0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbf8:	f7ff fdc8 	bl	800c78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbfc:	4b02      	ldr	r3, [pc, #8]	@ (800cc08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	20001b3c 	.word	0x20001b3c
 800cc0c:	080107ec 	.word	0x080107ec

0800cc10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	6039      	str	r1, [r7, #0]
 800cc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d105      	bne.n	800cc2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	4907      	ldr	r1, [pc, #28]	@ (800cc44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc26:	4808      	ldr	r0, [pc, #32]	@ (800cc48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc28:	f7ff fdb0 	bl	800c78c <USBD_GetString>
 800cc2c:	e004      	b.n	800cc38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	4904      	ldr	r1, [pc, #16]	@ (800cc44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc32:	4805      	ldr	r0, [pc, #20]	@ (800cc48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc34:	f7ff fdaa 	bl	800c78c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc38:	4b02      	ldr	r3, [pc, #8]	@ (800cc44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20001b3c 	.word	0x20001b3c
 800cc48:	080107f8 	.word	0x080107f8

0800cc4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc52:	4b0f      	ldr	r3, [pc, #60]	@ (800cc90 <Get_SerialNum+0x44>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc58:	4b0e      	ldr	r3, [pc, #56]	@ (800cc94 <Get_SerialNum+0x48>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc98 <Get_SerialNum+0x4c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4413      	add	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d009      	beq.n	800cc86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc72:	2208      	movs	r2, #8
 800cc74:	4909      	ldr	r1, [pc, #36]	@ (800cc9c <Get_SerialNum+0x50>)
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 f814 	bl	800cca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc7c:	2204      	movs	r2, #4
 800cc7e:	4908      	ldr	r1, [pc, #32]	@ (800cca0 <Get_SerialNum+0x54>)
 800cc80:	68b8      	ldr	r0, [r7, #8]
 800cc82:	f000 f80f 	bl	800cca4 <IntToUnicode>
  }
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	1fff7a10 	.word	0x1fff7a10
 800cc94:	1fff7a14 	.word	0x1fff7a14
 800cc98:	1fff7a18 	.word	0x1fff7a18
 800cc9c:	20000112 	.word	0x20000112
 800cca0:	20000122 	.word	0x20000122

0800cca4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	75fb      	strb	r3, [r7, #23]
 800ccba:	e027      	b.n	800cd0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	0f1b      	lsrs	r3, r3, #28
 800ccc0:	2b09      	cmp	r3, #9
 800ccc2:	d80b      	bhi.n	800ccdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	0f1b      	lsrs	r3, r3, #28
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4619      	mov	r1, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3230      	adds	r2, #48	@ 0x30
 800ccd6:	b2d2      	uxtb	r2, r2
 800ccd8:	701a      	strb	r2, [r3, #0]
 800ccda:	e00a      	b.n	800ccf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	0f1b      	lsrs	r3, r3, #28
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4619      	mov	r1, r3
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	440b      	add	r3, r1
 800ccec:	3237      	adds	r2, #55	@ 0x37
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	005b      	lsls	r3, r3, #1
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	4413      	add	r3, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	75fb      	strb	r3, [r7, #23]
 800cd0c:	7dfa      	ldrb	r2, [r7, #23]
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d3d3      	bcc.n	800ccbc <IntToUnicode+0x18>
  }
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
	...

0800cd24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	@ 0x28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	605a      	str	r2, [r3, #4]
 800cd36:	609a      	str	r2, [r3, #8]
 800cd38:	60da      	str	r2, [r3, #12]
 800cd3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd44:	d13a      	bne.n	800cdbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
 800cd4a:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd4e:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd50:	f043 0301 	orr.w	r3, r3, #1
 800cd54:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd56:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cd66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd70:	2303      	movs	r3, #3
 800cd72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd74:	230a      	movs	r3, #10
 800cd76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd78:	f107 0314 	add.w	r3, r7, #20
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4812      	ldr	r0, [pc, #72]	@ (800cdc8 <HAL_PCD_MspInit+0xa4>)
 800cd80:	f7f9 fb5c 	bl	800643c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd84:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd88:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd8e:	6353      	str	r3, [r2, #52]	@ 0x34
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd98:	4a0a      	ldr	r2, [pc, #40]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cd9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cd9e:	6453      	str	r3, [r2, #68]	@ 0x44
 800cda0:	4b08      	ldr	r3, [pc, #32]	@ (800cdc4 <HAL_PCD_MspInit+0xa0>)
 800cda2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cda4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cdac:	2200      	movs	r2, #0
 800cdae:	2100      	movs	r1, #0
 800cdb0:	2043      	movs	r0, #67	@ 0x43
 800cdb2:	f7f9 f822 	bl	8005dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cdb6:	2043      	movs	r0, #67	@ 0x43
 800cdb8:	f7f9 f83b 	bl	8005e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	3728      	adds	r7, #40	@ 0x28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	40023800 	.word	0x40023800
 800cdc8:	40020000 	.word	0x40020000

0800cdcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7fe fb6f 	bl	800b4c6 <USBD_LL_SetupStage>
}
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce02:	78fa      	ldrb	r2, [r7, #3]
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	4613      	mov	r3, r2
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	4413      	add	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	440b      	add	r3, r1
 800ce10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	f7fe fba9 	bl	800b570 <USBD_LL_DataOutStage>
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ce38:	78fa      	ldrb	r2, [r7, #3]
 800ce3a:	6879      	ldr	r1, [r7, #4]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	4413      	add	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	440b      	add	r3, r1
 800ce46:	3320      	adds	r3, #32
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	f7fe fc42 	bl	800b6d6 <USBD_LL_DataInStage>
}
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b082      	sub	sp, #8
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe fd7c 	bl	800b966 <USBD_LL_SOF>
}
 800ce6e:	bf00      	nop
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	79db      	ldrb	r3, [r3, #7]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d102      	bne.n	800ce90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
 800ce8e:	e008      	b.n	800cea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	79db      	ldrb	r3, [r3, #7]
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d102      	bne.n	800ce9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	73fb      	strb	r3, [r7, #15]
 800ce9c:	e001      	b.n	800cea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ce9e:	f7f6 ffc1 	bl	8003e24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cea8:	7bfa      	ldrb	r2, [r7, #15]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe fd16 	bl	800b8de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fcbe 	bl	800b83a <USBD_LL_Reset>
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fd11 	bl	800b8fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	6812      	ldr	r2, [r2, #0]
 800ceea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7adb      	ldrb	r3, [r3, #11]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cefc:	4b04      	ldr	r3, [pc, #16]	@ (800cf10 <HAL_PCD_SuspendCallback+0x48>)
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	4a03      	ldr	r2, [pc, #12]	@ (800cf10 <HAL_PCD_SuspendCallback+0x48>)
 800cf02:	f043 0306 	orr.w	r3, r3, #6
 800cf06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	e000ed00 	.word	0xe000ed00

0800cf14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fd07 	bl	800b936 <USBD_LL_Resume>
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf42:	78fa      	ldrb	r2, [r7, #3]
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fe fd5f 	bl	800ba0a <USBD_LL_IsoOUTIncomplete>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf66:	78fa      	ldrb	r2, [r7, #3]
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fd1b 	bl	800b9a6 <USBD_LL_IsoINIncomplete>
}
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe fd71 	bl	800ba6e <USBD_LL_DevConnected>
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fd6e 	bl	800ba84 <USBD_LL_DevDisconnected>
}
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d13c      	bne.n	800d03a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cfc0:	4a20      	ldr	r2, [pc, #128]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a1e      	ldr	r2, [pc, #120]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfcc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cfd0:	4b1c      	ldr	r3, [pc, #112]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cfd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cfd8:	4b1a      	ldr	r3, [pc, #104]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfda:	2204      	movs	r2, #4
 800cfdc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cfde:	4b19      	ldr	r3, [pc, #100]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cfe4:	4b17      	ldr	r3, [pc, #92]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfea:	4b16      	ldr	r3, [pc, #88]	@ (800d044 <USBD_LL_Init+0x94>)
 800cfec:	2202      	movs	r2, #2
 800cfee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cff0:	4b14      	ldr	r3, [pc, #80]	@ (800d044 <USBD_LL_Init+0x94>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cff6:	4b13      	ldr	r3, [pc, #76]	@ (800d044 <USBD_LL_Init+0x94>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cffc:	4b11      	ldr	r3, [pc, #68]	@ (800d044 <USBD_LL_Init+0x94>)
 800cffe:	2200      	movs	r2, #0
 800d000:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d002:	4b10      	ldr	r3, [pc, #64]	@ (800d044 <USBD_LL_Init+0x94>)
 800d004:	2200      	movs	r2, #0
 800d006:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d008:	4b0e      	ldr	r3, [pc, #56]	@ (800d044 <USBD_LL_Init+0x94>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d00e:	480d      	ldr	r0, [pc, #52]	@ (800d044 <USBD_LL_Init+0x94>)
 800d010:	f7f9 fbe1 	bl	80067d6 <HAL_PCD_Init>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d01a:	f7f6 ff03 	bl	8003e24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d01e:	2180      	movs	r1, #128	@ 0x80
 800d020:	4808      	ldr	r0, [pc, #32]	@ (800d044 <USBD_LL_Init+0x94>)
 800d022:	f7fa fe0e 	bl	8007c42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d026:	2240      	movs	r2, #64	@ 0x40
 800d028:	2100      	movs	r1, #0
 800d02a:	4806      	ldr	r0, [pc, #24]	@ (800d044 <USBD_LL_Init+0x94>)
 800d02c:	f7fa fdc2 	bl	8007bb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d030:	2280      	movs	r2, #128	@ 0x80
 800d032:	2101      	movs	r1, #1
 800d034:	4803      	ldr	r0, [pc, #12]	@ (800d044 <USBD_LL_Init+0x94>)
 800d036:	f7fa fdbd 	bl	8007bb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20001d3c 	.word	0x20001d3c

0800d048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d05e:	4618      	mov	r0, r3
 800d060:	f7f9 fcc8 	bl	80069f4 <HAL_PCD_Start>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f942 	bl	800d2f4 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d074:	7bbb      	ldrb	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	4608      	mov	r0, r1
 800d088:	4611      	mov	r1, r2
 800d08a:	461a      	mov	r2, r3
 800d08c:	4603      	mov	r3, r0
 800d08e:	70fb      	strb	r3, [r7, #3]
 800d090:	460b      	mov	r3, r1
 800d092:	70bb      	strb	r3, [r7, #2]
 800d094:	4613      	mov	r3, r2
 800d096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0a6:	78bb      	ldrb	r3, [r7, #2]
 800d0a8:	883a      	ldrh	r2, [r7, #0]
 800d0aa:	78f9      	ldrb	r1, [r7, #3]
 800d0ac:	f7fa f99c 	bl	80073e8 <HAL_PCD_EP_Open>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b4:	7bfb      	ldrb	r3, [r7, #15]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f000 f91c 	bl	800d2f4 <USBD_Get_USB_Status>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0e4:	78fa      	ldrb	r2, [r7, #3]
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fa f9e7 	bl	80074bc <HAL_PCD_EP_Close>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 f8fd 	bl	800d2f4 <USBD_Get_USB_Status>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d122:	78fa      	ldrb	r2, [r7, #3]
 800d124:	4611      	mov	r1, r2
 800d126:	4618      	mov	r0, r3
 800d128:	f7fa fa9f 	bl	800766a <HAL_PCD_EP_SetStall>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d130:	7bfb      	ldrb	r3, [r7, #15]
 800d132:	4618      	mov	r0, r3
 800d134:	f000 f8de 	bl	800d2f4 <USBD_Get_USB_Status>
 800d138:	4603      	mov	r3, r0
 800d13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	460b      	mov	r3, r1
 800d150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	4611      	mov	r1, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f7fa fae3 	bl	8007730 <HAL_PCD_EP_ClrStall>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	4618      	mov	r0, r3
 800d172:	f000 f8bf 	bl	800d2f4 <USBD_Get_USB_Status>
 800d176:	4603      	mov	r3, r0
 800d178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d196:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	da0b      	bge.n	800d1b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	440b      	add	r3, r1
 800d1b2:	3316      	adds	r3, #22
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	e00b      	b.n	800d1d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1b8:	78fb      	ldrb	r3, [r7, #3]
 800d1ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1be:	68f9      	ldr	r1, [r7, #12]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	440b      	add	r3, r1
 800d1ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d1ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1f6:	78fa      	ldrb	r2, [r7, #3]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fa f8d0 	bl	80073a0 <HAL_PCD_SetAddress>
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d204:	7bfb      	ldrb	r3, [r7, #15]
 800d206:	4618      	mov	r0, r3
 800d208:	f000 f874 	bl	800d2f4 <USBD_Get_USB_Status>
 800d20c:	4603      	mov	r3, r0
 800d20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d210:	7bbb      	ldrb	r3, [r7, #14]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
 800d226:	460b      	mov	r3, r1
 800d228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d238:	7af9      	ldrb	r1, [r7, #11]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	f7fa f9da 	bl	80075f6 <HAL_PCD_EP_Transmit>
 800d242:	4603      	mov	r3, r0
 800d244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f853 	bl	800d2f4 <USBD_Get_USB_Status>
 800d24e:	4603      	mov	r3, r0
 800d250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d252:	7dbb      	ldrb	r3, [r7, #22]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	460b      	mov	r3, r1
 800d26a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d27a:	7af9      	ldrb	r1, [r7, #11]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	f7fa f966 	bl	8007550 <HAL_PCD_EP_Receive>
 800d284:	4603      	mov	r3, r0
 800d286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f832 	bl	800d2f4 <USBD_Get_USB_Status>
 800d290:	4603      	mov	r3, r0
 800d292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d294:	7dbb      	ldrb	r3, [r7, #22]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2b0:	78fa      	ldrb	r2, [r7, #3]
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fa f986 	bl	80075c6 <HAL_PCD_EP_GetRxCount>
 800d2ba:	4603      	mov	r3, r0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2cc:	4b03      	ldr	r3, [pc, #12]	@ (800d2dc <USBD_static_malloc+0x18>)
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	20002220 	.word	0x20002220

0800d2e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]

}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	2b03      	cmp	r3, #3
 800d306:	d817      	bhi.n	800d338 <USBD_Get_USB_Status+0x44>
 800d308:	a201      	add	r2, pc, #4	@ (adr r2, 800d310 <USBD_Get_USB_Status+0x1c>)
 800d30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30e:	bf00      	nop
 800d310:	0800d321 	.word	0x0800d321
 800d314:	0800d327 	.word	0x0800d327
 800d318:	0800d32d 	.word	0x0800d32d
 800d31c:	0800d333 	.word	0x0800d333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
    break;
 800d324:	e00b      	b.n	800d33e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
    break;
 800d32a:	e008      	b.n	800d33e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d32c:	2301      	movs	r3, #1
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	e005      	b.n	800d33e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
    break;
 800d336:	e002      	b.n	800d33e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d338:	2303      	movs	r3, #3
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	bf00      	nop
  }
  return usb_status;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <malloc>:
 800d34c:	4b02      	ldr	r3, [pc, #8]	@ (800d358 <malloc+0xc>)
 800d34e:	4601      	mov	r1, r0
 800d350:	6818      	ldr	r0, [r3, #0]
 800d352:	f000 b825 	b.w	800d3a0 <_malloc_r>
 800d356:	bf00      	nop
 800d358:	20000138 	.word	0x20000138

0800d35c <sbrk_aligned>:
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	4e0f      	ldr	r6, [pc, #60]	@ (800d39c <sbrk_aligned+0x40>)
 800d360:	460c      	mov	r4, r1
 800d362:	6831      	ldr	r1, [r6, #0]
 800d364:	4605      	mov	r5, r0
 800d366:	b911      	cbnz	r1, 800d36e <sbrk_aligned+0x12>
 800d368:	f000 ff4e 	bl	800e208 <_sbrk_r>
 800d36c:	6030      	str	r0, [r6, #0]
 800d36e:	4621      	mov	r1, r4
 800d370:	4628      	mov	r0, r5
 800d372:	f000 ff49 	bl	800e208 <_sbrk_r>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	d103      	bne.n	800d382 <sbrk_aligned+0x26>
 800d37a:	f04f 34ff 	mov.w	r4, #4294967295
 800d37e:	4620      	mov	r0, r4
 800d380:	bd70      	pop	{r4, r5, r6, pc}
 800d382:	1cc4      	adds	r4, r0, #3
 800d384:	f024 0403 	bic.w	r4, r4, #3
 800d388:	42a0      	cmp	r0, r4
 800d38a:	d0f8      	beq.n	800d37e <sbrk_aligned+0x22>
 800d38c:	1a21      	subs	r1, r4, r0
 800d38e:	4628      	mov	r0, r5
 800d390:	f000 ff3a 	bl	800e208 <_sbrk_r>
 800d394:	3001      	adds	r0, #1
 800d396:	d1f2      	bne.n	800d37e <sbrk_aligned+0x22>
 800d398:	e7ef      	b.n	800d37a <sbrk_aligned+0x1e>
 800d39a:	bf00      	nop
 800d39c:	20002440 	.word	0x20002440

0800d3a0 <_malloc_r>:
 800d3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a4:	1ccd      	adds	r5, r1, #3
 800d3a6:	f025 0503 	bic.w	r5, r5, #3
 800d3aa:	3508      	adds	r5, #8
 800d3ac:	2d0c      	cmp	r5, #12
 800d3ae:	bf38      	it	cc
 800d3b0:	250c      	movcc	r5, #12
 800d3b2:	2d00      	cmp	r5, #0
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	db01      	blt.n	800d3bc <_malloc_r+0x1c>
 800d3b8:	42a9      	cmp	r1, r5
 800d3ba:	d904      	bls.n	800d3c6 <_malloc_r+0x26>
 800d3bc:	230c      	movs	r3, #12
 800d3be:	6033      	str	r3, [r6, #0]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d49c <_malloc_r+0xfc>
 800d3ca:	f000 f869 	bl	800d4a0 <__malloc_lock>
 800d3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d3d2:	461c      	mov	r4, r3
 800d3d4:	bb44      	cbnz	r4, 800d428 <_malloc_r+0x88>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7ff ffbf 	bl	800d35c <sbrk_aligned>
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	4604      	mov	r4, r0
 800d3e2:	d158      	bne.n	800d496 <_malloc_r+0xf6>
 800d3e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d3e8:	4627      	mov	r7, r4
 800d3ea:	2f00      	cmp	r7, #0
 800d3ec:	d143      	bne.n	800d476 <_malloc_r+0xd6>
 800d3ee:	2c00      	cmp	r4, #0
 800d3f0:	d04b      	beq.n	800d48a <_malloc_r+0xea>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	eb04 0903 	add.w	r9, r4, r3
 800d3fc:	f000 ff04 	bl	800e208 <_sbrk_r>
 800d400:	4581      	cmp	r9, r0
 800d402:	d142      	bne.n	800d48a <_malloc_r+0xea>
 800d404:	6821      	ldr	r1, [r4, #0]
 800d406:	1a6d      	subs	r5, r5, r1
 800d408:	4629      	mov	r1, r5
 800d40a:	4630      	mov	r0, r6
 800d40c:	f7ff ffa6 	bl	800d35c <sbrk_aligned>
 800d410:	3001      	adds	r0, #1
 800d412:	d03a      	beq.n	800d48a <_malloc_r+0xea>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	442b      	add	r3, r5
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	f8d8 3000 	ldr.w	r3, [r8]
 800d41e:	685a      	ldr	r2, [r3, #4]
 800d420:	bb62      	cbnz	r2, 800d47c <_malloc_r+0xdc>
 800d422:	f8c8 7000 	str.w	r7, [r8]
 800d426:	e00f      	b.n	800d448 <_malloc_r+0xa8>
 800d428:	6822      	ldr	r2, [r4, #0]
 800d42a:	1b52      	subs	r2, r2, r5
 800d42c:	d420      	bmi.n	800d470 <_malloc_r+0xd0>
 800d42e:	2a0b      	cmp	r2, #11
 800d430:	d917      	bls.n	800d462 <_malloc_r+0xc2>
 800d432:	1961      	adds	r1, r4, r5
 800d434:	42a3      	cmp	r3, r4
 800d436:	6025      	str	r5, [r4, #0]
 800d438:	bf18      	it	ne
 800d43a:	6059      	strne	r1, [r3, #4]
 800d43c:	6863      	ldr	r3, [r4, #4]
 800d43e:	bf08      	it	eq
 800d440:	f8c8 1000 	streq.w	r1, [r8]
 800d444:	5162      	str	r2, [r4, r5]
 800d446:	604b      	str	r3, [r1, #4]
 800d448:	4630      	mov	r0, r6
 800d44a:	f000 f82f 	bl	800d4ac <__malloc_unlock>
 800d44e:	f104 000b 	add.w	r0, r4, #11
 800d452:	1d23      	adds	r3, r4, #4
 800d454:	f020 0007 	bic.w	r0, r0, #7
 800d458:	1ac2      	subs	r2, r0, r3
 800d45a:	bf1c      	itt	ne
 800d45c:	1a1b      	subne	r3, r3, r0
 800d45e:	50a3      	strne	r3, [r4, r2]
 800d460:	e7af      	b.n	800d3c2 <_malloc_r+0x22>
 800d462:	6862      	ldr	r2, [r4, #4]
 800d464:	42a3      	cmp	r3, r4
 800d466:	bf0c      	ite	eq
 800d468:	f8c8 2000 	streq.w	r2, [r8]
 800d46c:	605a      	strne	r2, [r3, #4]
 800d46e:	e7eb      	b.n	800d448 <_malloc_r+0xa8>
 800d470:	4623      	mov	r3, r4
 800d472:	6864      	ldr	r4, [r4, #4]
 800d474:	e7ae      	b.n	800d3d4 <_malloc_r+0x34>
 800d476:	463c      	mov	r4, r7
 800d478:	687f      	ldr	r7, [r7, #4]
 800d47a:	e7b6      	b.n	800d3ea <_malloc_r+0x4a>
 800d47c:	461a      	mov	r2, r3
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	42a3      	cmp	r3, r4
 800d482:	d1fb      	bne.n	800d47c <_malloc_r+0xdc>
 800d484:	2300      	movs	r3, #0
 800d486:	6053      	str	r3, [r2, #4]
 800d488:	e7de      	b.n	800d448 <_malloc_r+0xa8>
 800d48a:	230c      	movs	r3, #12
 800d48c:	6033      	str	r3, [r6, #0]
 800d48e:	4630      	mov	r0, r6
 800d490:	f000 f80c 	bl	800d4ac <__malloc_unlock>
 800d494:	e794      	b.n	800d3c0 <_malloc_r+0x20>
 800d496:	6005      	str	r5, [r0, #0]
 800d498:	e7d6      	b.n	800d448 <_malloc_r+0xa8>
 800d49a:	bf00      	nop
 800d49c:	20002444 	.word	0x20002444

0800d4a0 <__malloc_lock>:
 800d4a0:	4801      	ldr	r0, [pc, #4]	@ (800d4a8 <__malloc_lock+0x8>)
 800d4a2:	f000 befe 	b.w	800e2a2 <__retarget_lock_acquire_recursive>
 800d4a6:	bf00      	nop
 800d4a8:	20002588 	.word	0x20002588

0800d4ac <__malloc_unlock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__malloc_unlock+0x8>)
 800d4ae:	f000 bef9 	b.w	800e2a4 <__retarget_lock_release_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20002588 	.word	0x20002588

0800d4b8 <__cvt>:
 800d4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4bc:	ec57 6b10 	vmov	r6, r7, d0
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d4ce:	461f      	movlt	r7, r3
 800d4d0:	2300      	movge	r3, #0
 800d4d2:	232d      	movlt	r3, #45	@ 0x2d
 800d4d4:	700b      	strb	r3, [r1, #0]
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d4dc:	4691      	mov	r9, r2
 800d4de:	f023 0820 	bic.w	r8, r3, #32
 800d4e2:	bfbc      	itt	lt
 800d4e4:	4632      	movlt	r2, r6
 800d4e6:	4616      	movlt	r6, r2
 800d4e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4ec:	d005      	beq.n	800d4fa <__cvt+0x42>
 800d4ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d4f2:	d100      	bne.n	800d4f6 <__cvt+0x3e>
 800d4f4:	3401      	adds	r4, #1
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	e000      	b.n	800d4fc <__cvt+0x44>
 800d4fa:	2103      	movs	r1, #3
 800d4fc:	ab03      	add	r3, sp, #12
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	ab02      	add	r3, sp, #8
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	ec47 6b10 	vmov	d0, r6, r7
 800d508:	4653      	mov	r3, sl
 800d50a:	4622      	mov	r2, r4
 800d50c:	f000 ff64 	bl	800e3d8 <_dtoa_r>
 800d510:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d514:	4605      	mov	r5, r0
 800d516:	d119      	bne.n	800d54c <__cvt+0x94>
 800d518:	f019 0f01 	tst.w	r9, #1
 800d51c:	d00e      	beq.n	800d53c <__cvt+0x84>
 800d51e:	eb00 0904 	add.w	r9, r0, r4
 800d522:	2200      	movs	r2, #0
 800d524:	2300      	movs	r3, #0
 800d526:	4630      	mov	r0, r6
 800d528:	4639      	mov	r1, r7
 800d52a:	f7f3 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d52e:	b108      	cbz	r0, 800d534 <__cvt+0x7c>
 800d530:	f8cd 900c 	str.w	r9, [sp, #12]
 800d534:	2230      	movs	r2, #48	@ 0x30
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	454b      	cmp	r3, r9
 800d53a:	d31e      	bcc.n	800d57a <__cvt+0xc2>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d540:	1b5b      	subs	r3, r3, r5
 800d542:	4628      	mov	r0, r5
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	b004      	add	sp, #16
 800d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d550:	eb00 0904 	add.w	r9, r0, r4
 800d554:	d1e5      	bne.n	800d522 <__cvt+0x6a>
 800d556:	7803      	ldrb	r3, [r0, #0]
 800d558:	2b30      	cmp	r3, #48	@ 0x30
 800d55a:	d10a      	bne.n	800d572 <__cvt+0xba>
 800d55c:	2200      	movs	r2, #0
 800d55e:	2300      	movs	r3, #0
 800d560:	4630      	mov	r0, r6
 800d562:	4639      	mov	r1, r7
 800d564:	f7f3 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d568:	b918      	cbnz	r0, 800d572 <__cvt+0xba>
 800d56a:	f1c4 0401 	rsb	r4, r4, #1
 800d56e:	f8ca 4000 	str.w	r4, [sl]
 800d572:	f8da 3000 	ldr.w	r3, [sl]
 800d576:	4499      	add	r9, r3
 800d578:	e7d3      	b.n	800d522 <__cvt+0x6a>
 800d57a:	1c59      	adds	r1, r3, #1
 800d57c:	9103      	str	r1, [sp, #12]
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	e7d9      	b.n	800d536 <__cvt+0x7e>

0800d582 <__exponent>:
 800d582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d584:	2900      	cmp	r1, #0
 800d586:	bfba      	itte	lt
 800d588:	4249      	neglt	r1, r1
 800d58a:	232d      	movlt	r3, #45	@ 0x2d
 800d58c:	232b      	movge	r3, #43	@ 0x2b
 800d58e:	2909      	cmp	r1, #9
 800d590:	7002      	strb	r2, [r0, #0]
 800d592:	7043      	strb	r3, [r0, #1]
 800d594:	dd29      	ble.n	800d5ea <__exponent+0x68>
 800d596:	f10d 0307 	add.w	r3, sp, #7
 800d59a:	461d      	mov	r5, r3
 800d59c:	270a      	movs	r7, #10
 800d59e:	461a      	mov	r2, r3
 800d5a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d5a4:	fb07 1416 	mls	r4, r7, r6, r1
 800d5a8:	3430      	adds	r4, #48	@ 0x30
 800d5aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	2c63      	cmp	r4, #99	@ 0x63
 800d5b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	dcf1      	bgt.n	800d59e <__exponent+0x1c>
 800d5ba:	3130      	adds	r1, #48	@ 0x30
 800d5bc:	1e94      	subs	r4, r2, #2
 800d5be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5c2:	1c41      	adds	r1, r0, #1
 800d5c4:	4623      	mov	r3, r4
 800d5c6:	42ab      	cmp	r3, r5
 800d5c8:	d30a      	bcc.n	800d5e0 <__exponent+0x5e>
 800d5ca:	f10d 0309 	add.w	r3, sp, #9
 800d5ce:	1a9b      	subs	r3, r3, r2
 800d5d0:	42ac      	cmp	r4, r5
 800d5d2:	bf88      	it	hi
 800d5d4:	2300      	movhi	r3, #0
 800d5d6:	3302      	adds	r3, #2
 800d5d8:	4403      	add	r3, r0
 800d5da:	1a18      	subs	r0, r3, r0
 800d5dc:	b003      	add	sp, #12
 800d5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d5e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d5e8:	e7ed      	b.n	800d5c6 <__exponent+0x44>
 800d5ea:	2330      	movs	r3, #48	@ 0x30
 800d5ec:	3130      	adds	r1, #48	@ 0x30
 800d5ee:	7083      	strb	r3, [r0, #2]
 800d5f0:	70c1      	strb	r1, [r0, #3]
 800d5f2:	1d03      	adds	r3, r0, #4
 800d5f4:	e7f1      	b.n	800d5da <__exponent+0x58>
	...

0800d5f8 <_printf_float>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	b08d      	sub	sp, #52	@ 0x34
 800d5fe:	460c      	mov	r4, r1
 800d600:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d604:	4616      	mov	r6, r2
 800d606:	461f      	mov	r7, r3
 800d608:	4605      	mov	r5, r0
 800d60a:	f000 fdc5 	bl	800e198 <_localeconv_r>
 800d60e:	6803      	ldr	r3, [r0, #0]
 800d610:	9304      	str	r3, [sp, #16]
 800d612:	4618      	mov	r0, r3
 800d614:	f7f2 fe2c 	bl	8000270 <strlen>
 800d618:	2300      	movs	r3, #0
 800d61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d61c:	f8d8 3000 	ldr.w	r3, [r8]
 800d620:	9005      	str	r0, [sp, #20]
 800d622:	3307      	adds	r3, #7
 800d624:	f023 0307 	bic.w	r3, r3, #7
 800d628:	f103 0208 	add.w	r2, r3, #8
 800d62c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d630:	f8d4 b000 	ldr.w	fp, [r4]
 800d634:	f8c8 2000 	str.w	r2, [r8]
 800d638:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d63c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d640:	9307      	str	r3, [sp, #28]
 800d642:	f8cd 8018 	str.w	r8, [sp, #24]
 800d646:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d64a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d64e:	4b9c      	ldr	r3, [pc, #624]	@ (800d8c0 <_printf_float+0x2c8>)
 800d650:	f04f 32ff 	mov.w	r2, #4294967295
 800d654:	f7f3 fa6a 	bl	8000b2c <__aeabi_dcmpun>
 800d658:	bb70      	cbnz	r0, 800d6b8 <_printf_float+0xc0>
 800d65a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d65e:	4b98      	ldr	r3, [pc, #608]	@ (800d8c0 <_printf_float+0x2c8>)
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	f7f3 fa44 	bl	8000af0 <__aeabi_dcmple>
 800d668:	bb30      	cbnz	r0, 800d6b8 <_printf_float+0xc0>
 800d66a:	2200      	movs	r2, #0
 800d66c:	2300      	movs	r3, #0
 800d66e:	4640      	mov	r0, r8
 800d670:	4649      	mov	r1, r9
 800d672:	f7f3 fa33 	bl	8000adc <__aeabi_dcmplt>
 800d676:	b110      	cbz	r0, 800d67e <_printf_float+0x86>
 800d678:	232d      	movs	r3, #45	@ 0x2d
 800d67a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d67e:	4a91      	ldr	r2, [pc, #580]	@ (800d8c4 <_printf_float+0x2cc>)
 800d680:	4b91      	ldr	r3, [pc, #580]	@ (800d8c8 <_printf_float+0x2d0>)
 800d682:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d686:	bf8c      	ite	hi
 800d688:	4690      	movhi	r8, r2
 800d68a:	4698      	movls	r8, r3
 800d68c:	2303      	movs	r3, #3
 800d68e:	6123      	str	r3, [r4, #16]
 800d690:	f02b 0304 	bic.w	r3, fp, #4
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	f04f 0900 	mov.w	r9, #0
 800d69a:	9700      	str	r7, [sp, #0]
 800d69c:	4633      	mov	r3, r6
 800d69e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	f000 f9d2 	bl	800da4c <_printf_common>
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f040 808d 	bne.w	800d7c8 <_printf_float+0x1d0>
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	b00d      	add	sp, #52	@ 0x34
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	4642      	mov	r2, r8
 800d6ba:	464b      	mov	r3, r9
 800d6bc:	4640      	mov	r0, r8
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7f3 fa34 	bl	8000b2c <__aeabi_dcmpun>
 800d6c4:	b140      	cbz	r0, 800d6d8 <_printf_float+0xe0>
 800d6c6:	464b      	mov	r3, r9
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bfbc      	itt	lt
 800d6cc:	232d      	movlt	r3, #45	@ 0x2d
 800d6ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d6d2:	4a7e      	ldr	r2, [pc, #504]	@ (800d8cc <_printf_float+0x2d4>)
 800d6d4:	4b7e      	ldr	r3, [pc, #504]	@ (800d8d0 <_printf_float+0x2d8>)
 800d6d6:	e7d4      	b.n	800d682 <_printf_float+0x8a>
 800d6d8:	6863      	ldr	r3, [r4, #4]
 800d6da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d6de:	9206      	str	r2, [sp, #24]
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	d13b      	bne.n	800d75c <_printf_float+0x164>
 800d6e4:	2306      	movs	r3, #6
 800d6e6:	6063      	str	r3, [r4, #4]
 800d6e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6022      	str	r2, [r4, #0]
 800d6f0:	9303      	str	r3, [sp, #12]
 800d6f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d6f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d6f8:	ab09      	add	r3, sp, #36	@ 0x24
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	6861      	ldr	r1, [r4, #4]
 800d6fe:	ec49 8b10 	vmov	d0, r8, r9
 800d702:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d706:	4628      	mov	r0, r5
 800d708:	f7ff fed6 	bl	800d4b8 <__cvt>
 800d70c:	9b06      	ldr	r3, [sp, #24]
 800d70e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d710:	2b47      	cmp	r3, #71	@ 0x47
 800d712:	4680      	mov	r8, r0
 800d714:	d129      	bne.n	800d76a <_printf_float+0x172>
 800d716:	1cc8      	adds	r0, r1, #3
 800d718:	db02      	blt.n	800d720 <_printf_float+0x128>
 800d71a:	6863      	ldr	r3, [r4, #4]
 800d71c:	4299      	cmp	r1, r3
 800d71e:	dd41      	ble.n	800d7a4 <_printf_float+0x1ac>
 800d720:	f1aa 0a02 	sub.w	sl, sl, #2
 800d724:	fa5f fa8a 	uxtb.w	sl, sl
 800d728:	3901      	subs	r1, #1
 800d72a:	4652      	mov	r2, sl
 800d72c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d730:	9109      	str	r1, [sp, #36]	@ 0x24
 800d732:	f7ff ff26 	bl	800d582 <__exponent>
 800d736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d738:	1813      	adds	r3, r2, r0
 800d73a:	2a01      	cmp	r2, #1
 800d73c:	4681      	mov	r9, r0
 800d73e:	6123      	str	r3, [r4, #16]
 800d740:	dc02      	bgt.n	800d748 <_printf_float+0x150>
 800d742:	6822      	ldr	r2, [r4, #0]
 800d744:	07d2      	lsls	r2, r2, #31
 800d746:	d501      	bpl.n	800d74c <_printf_float+0x154>
 800d748:	3301      	adds	r3, #1
 800d74a:	6123      	str	r3, [r4, #16]
 800d74c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d750:	2b00      	cmp	r3, #0
 800d752:	d0a2      	beq.n	800d69a <_printf_float+0xa2>
 800d754:	232d      	movs	r3, #45	@ 0x2d
 800d756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d75a:	e79e      	b.n	800d69a <_printf_float+0xa2>
 800d75c:	9a06      	ldr	r2, [sp, #24]
 800d75e:	2a47      	cmp	r2, #71	@ 0x47
 800d760:	d1c2      	bne.n	800d6e8 <_printf_float+0xf0>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1c0      	bne.n	800d6e8 <_printf_float+0xf0>
 800d766:	2301      	movs	r3, #1
 800d768:	e7bd      	b.n	800d6e6 <_printf_float+0xee>
 800d76a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d76e:	d9db      	bls.n	800d728 <_printf_float+0x130>
 800d770:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d774:	d118      	bne.n	800d7a8 <_printf_float+0x1b0>
 800d776:	2900      	cmp	r1, #0
 800d778:	6863      	ldr	r3, [r4, #4]
 800d77a:	dd0b      	ble.n	800d794 <_printf_float+0x19c>
 800d77c:	6121      	str	r1, [r4, #16]
 800d77e:	b913      	cbnz	r3, 800d786 <_printf_float+0x18e>
 800d780:	6822      	ldr	r2, [r4, #0]
 800d782:	07d0      	lsls	r0, r2, #31
 800d784:	d502      	bpl.n	800d78c <_printf_float+0x194>
 800d786:	3301      	adds	r3, #1
 800d788:	440b      	add	r3, r1
 800d78a:	6123      	str	r3, [r4, #16]
 800d78c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d78e:	f04f 0900 	mov.w	r9, #0
 800d792:	e7db      	b.n	800d74c <_printf_float+0x154>
 800d794:	b913      	cbnz	r3, 800d79c <_printf_float+0x1a4>
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	07d2      	lsls	r2, r2, #31
 800d79a:	d501      	bpl.n	800d7a0 <_printf_float+0x1a8>
 800d79c:	3302      	adds	r3, #2
 800d79e:	e7f4      	b.n	800d78a <_printf_float+0x192>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e7f2      	b.n	800d78a <_printf_float+0x192>
 800d7a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7aa:	4299      	cmp	r1, r3
 800d7ac:	db05      	blt.n	800d7ba <_printf_float+0x1c2>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	6121      	str	r1, [r4, #16]
 800d7b2:	07d8      	lsls	r0, r3, #31
 800d7b4:	d5ea      	bpl.n	800d78c <_printf_float+0x194>
 800d7b6:	1c4b      	adds	r3, r1, #1
 800d7b8:	e7e7      	b.n	800d78a <_printf_float+0x192>
 800d7ba:	2900      	cmp	r1, #0
 800d7bc:	bfd4      	ite	le
 800d7be:	f1c1 0202 	rsble	r2, r1, #2
 800d7c2:	2201      	movgt	r2, #1
 800d7c4:	4413      	add	r3, r2
 800d7c6:	e7e0      	b.n	800d78a <_printf_float+0x192>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	055a      	lsls	r2, r3, #21
 800d7cc:	d407      	bmi.n	800d7de <_printf_float+0x1e6>
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	4642      	mov	r2, r8
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	47b8      	blx	r7
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d12b      	bne.n	800d834 <_printf_float+0x23c>
 800d7dc:	e767      	b.n	800d6ae <_printf_float+0xb6>
 800d7de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7e2:	f240 80dd 	bls.w	800d9a0 <_printf_float+0x3a8>
 800d7e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f7f3 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d033      	beq.n	800d85e <_printf_float+0x266>
 800d7f6:	4a37      	ldr	r2, [pc, #220]	@ (800d8d4 <_printf_float+0x2dc>)
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	f43f af54 	beq.w	800d6ae <_printf_float+0xb6>
 800d806:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d80a:	4543      	cmp	r3, r8
 800d80c:	db02      	blt.n	800d814 <_printf_float+0x21c>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	07d8      	lsls	r0, r3, #31
 800d812:	d50f      	bpl.n	800d834 <_printf_float+0x23c>
 800d814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d818:	4631      	mov	r1, r6
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	3001      	adds	r0, #1
 800d820:	f43f af45 	beq.w	800d6ae <_printf_float+0xb6>
 800d824:	f04f 0900 	mov.w	r9, #0
 800d828:	f108 38ff 	add.w	r8, r8, #4294967295
 800d82c:	f104 0a1a 	add.w	sl, r4, #26
 800d830:	45c8      	cmp	r8, r9
 800d832:	dc09      	bgt.n	800d848 <_printf_float+0x250>
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	079b      	lsls	r3, r3, #30
 800d838:	f100 8103 	bmi.w	800da42 <_printf_float+0x44a>
 800d83c:	68e0      	ldr	r0, [r4, #12]
 800d83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d840:	4298      	cmp	r0, r3
 800d842:	bfb8      	it	lt
 800d844:	4618      	movlt	r0, r3
 800d846:	e734      	b.n	800d6b2 <_printf_float+0xba>
 800d848:	2301      	movs	r3, #1
 800d84a:	4652      	mov	r2, sl
 800d84c:	4631      	mov	r1, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	47b8      	blx	r7
 800d852:	3001      	adds	r0, #1
 800d854:	f43f af2b 	beq.w	800d6ae <_printf_float+0xb6>
 800d858:	f109 0901 	add.w	r9, r9, #1
 800d85c:	e7e8      	b.n	800d830 <_printf_float+0x238>
 800d85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc39      	bgt.n	800d8d8 <_printf_float+0x2e0>
 800d864:	4a1b      	ldr	r2, [pc, #108]	@ (800d8d4 <_printf_float+0x2dc>)
 800d866:	2301      	movs	r3, #1
 800d868:	4631      	mov	r1, r6
 800d86a:	4628      	mov	r0, r5
 800d86c:	47b8      	blx	r7
 800d86e:	3001      	adds	r0, #1
 800d870:	f43f af1d 	beq.w	800d6ae <_printf_float+0xb6>
 800d874:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d878:	ea59 0303 	orrs.w	r3, r9, r3
 800d87c:	d102      	bne.n	800d884 <_printf_float+0x28c>
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	07d9      	lsls	r1, r3, #31
 800d882:	d5d7      	bpl.n	800d834 <_printf_float+0x23c>
 800d884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f af0d 	beq.w	800d6ae <_printf_float+0xb6>
 800d894:	f04f 0a00 	mov.w	sl, #0
 800d898:	f104 0b1a 	add.w	fp, r4, #26
 800d89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d89e:	425b      	negs	r3, r3
 800d8a0:	4553      	cmp	r3, sl
 800d8a2:	dc01      	bgt.n	800d8a8 <_printf_float+0x2b0>
 800d8a4:	464b      	mov	r3, r9
 800d8a6:	e793      	b.n	800d7d0 <_printf_float+0x1d8>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	465a      	mov	r2, fp
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	47b8      	blx	r7
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	f43f aefb 	beq.w	800d6ae <_printf_float+0xb6>
 800d8b8:	f10a 0a01 	add.w	sl, sl, #1
 800d8bc:	e7ee      	b.n	800d89c <_printf_float+0x2a4>
 800d8be:	bf00      	nop
 800d8c0:	7fefffff 	.word	0x7fefffff
 800d8c4:	08010a24 	.word	0x08010a24
 800d8c8:	08010a20 	.word	0x08010a20
 800d8cc:	08010a2c 	.word	0x08010a2c
 800d8d0:	08010a28 	.word	0x08010a28
 800d8d4:	08010a30 	.word	0x08010a30
 800d8d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8de:	4553      	cmp	r3, sl
 800d8e0:	bfa8      	it	ge
 800d8e2:	4653      	movge	r3, sl
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	4699      	mov	r9, r3
 800d8e8:	dc36      	bgt.n	800d958 <_printf_float+0x360>
 800d8ea:	f04f 0b00 	mov.w	fp, #0
 800d8ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8f2:	f104 021a 	add.w	r2, r4, #26
 800d8f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d8f8:	9306      	str	r3, [sp, #24]
 800d8fa:	eba3 0309 	sub.w	r3, r3, r9
 800d8fe:	455b      	cmp	r3, fp
 800d900:	dc31      	bgt.n	800d966 <_printf_float+0x36e>
 800d902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d904:	459a      	cmp	sl, r3
 800d906:	dc3a      	bgt.n	800d97e <_printf_float+0x386>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	07da      	lsls	r2, r3, #31
 800d90c:	d437      	bmi.n	800d97e <_printf_float+0x386>
 800d90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d910:	ebaa 0903 	sub.w	r9, sl, r3
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	ebaa 0303 	sub.w	r3, sl, r3
 800d91a:	4599      	cmp	r9, r3
 800d91c:	bfa8      	it	ge
 800d91e:	4699      	movge	r9, r3
 800d920:	f1b9 0f00 	cmp.w	r9, #0
 800d924:	dc33      	bgt.n	800d98e <_printf_float+0x396>
 800d926:	f04f 0800 	mov.w	r8, #0
 800d92a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d92e:	f104 0b1a 	add.w	fp, r4, #26
 800d932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d934:	ebaa 0303 	sub.w	r3, sl, r3
 800d938:	eba3 0309 	sub.w	r3, r3, r9
 800d93c:	4543      	cmp	r3, r8
 800d93e:	f77f af79 	ble.w	800d834 <_printf_float+0x23c>
 800d942:	2301      	movs	r3, #1
 800d944:	465a      	mov	r2, fp
 800d946:	4631      	mov	r1, r6
 800d948:	4628      	mov	r0, r5
 800d94a:	47b8      	blx	r7
 800d94c:	3001      	adds	r0, #1
 800d94e:	f43f aeae 	beq.w	800d6ae <_printf_float+0xb6>
 800d952:	f108 0801 	add.w	r8, r8, #1
 800d956:	e7ec      	b.n	800d932 <_printf_float+0x33a>
 800d958:	4642      	mov	r2, r8
 800d95a:	4631      	mov	r1, r6
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b8      	blx	r7
 800d960:	3001      	adds	r0, #1
 800d962:	d1c2      	bne.n	800d8ea <_printf_float+0x2f2>
 800d964:	e6a3      	b.n	800d6ae <_printf_float+0xb6>
 800d966:	2301      	movs	r3, #1
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	9206      	str	r2, [sp, #24]
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae9c 	beq.w	800d6ae <_printf_float+0xb6>
 800d976:	9a06      	ldr	r2, [sp, #24]
 800d978:	f10b 0b01 	add.w	fp, fp, #1
 800d97c:	e7bb      	b.n	800d8f6 <_printf_float+0x2fe>
 800d97e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	d1c0      	bne.n	800d90e <_printf_float+0x316>
 800d98c:	e68f      	b.n	800d6ae <_printf_float+0xb6>
 800d98e:	9a06      	ldr	r2, [sp, #24]
 800d990:	464b      	mov	r3, r9
 800d992:	4442      	add	r2, r8
 800d994:	4631      	mov	r1, r6
 800d996:	4628      	mov	r0, r5
 800d998:	47b8      	blx	r7
 800d99a:	3001      	adds	r0, #1
 800d99c:	d1c3      	bne.n	800d926 <_printf_float+0x32e>
 800d99e:	e686      	b.n	800d6ae <_printf_float+0xb6>
 800d9a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9a4:	f1ba 0f01 	cmp.w	sl, #1
 800d9a8:	dc01      	bgt.n	800d9ae <_printf_float+0x3b6>
 800d9aa:	07db      	lsls	r3, r3, #31
 800d9ac:	d536      	bpl.n	800da1c <_printf_float+0x424>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	4642      	mov	r2, r8
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	47b8      	blx	r7
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	f43f ae78 	beq.w	800d6ae <_printf_float+0xb6>
 800d9be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f ae70 	beq.w	800d6ae <_printf_float+0xb6>
 800d9ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9da:	f7f3 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9de:	b9c0      	cbnz	r0, 800da12 <_printf_float+0x41a>
 800d9e0:	4653      	mov	r3, sl
 800d9e2:	f108 0201 	add.w	r2, r8, #1
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d10c      	bne.n	800da0a <_printf_float+0x412>
 800d9f0:	e65d      	b.n	800d6ae <_printf_float+0xb6>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	465a      	mov	r2, fp
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	f43f ae56 	beq.w	800d6ae <_printf_float+0xb6>
 800da02:	f108 0801 	add.w	r8, r8, #1
 800da06:	45d0      	cmp	r8, sl
 800da08:	dbf3      	blt.n	800d9f2 <_printf_float+0x3fa>
 800da0a:	464b      	mov	r3, r9
 800da0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da10:	e6df      	b.n	800d7d2 <_printf_float+0x1da>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 0b1a 	add.w	fp, r4, #26
 800da1a:	e7f4      	b.n	800da06 <_printf_float+0x40e>
 800da1c:	2301      	movs	r3, #1
 800da1e:	4642      	mov	r2, r8
 800da20:	e7e1      	b.n	800d9e6 <_printf_float+0x3ee>
 800da22:	2301      	movs	r3, #1
 800da24:	464a      	mov	r2, r9
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae3e 	beq.w	800d6ae <_printf_float+0xb6>
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	4543      	cmp	r3, r8
 800da3e:	dcf0      	bgt.n	800da22 <_printf_float+0x42a>
 800da40:	e6fc      	b.n	800d83c <_printf_float+0x244>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	f104 0919 	add.w	r9, r4, #25
 800da4a:	e7f4      	b.n	800da36 <_printf_float+0x43e>

0800da4c <_printf_common>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	4616      	mov	r6, r2
 800da52:	4698      	mov	r8, r3
 800da54:	688a      	ldr	r2, [r1, #8]
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	bfb8      	it	lt
 800da60:	4613      	movlt	r3, r2
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800da68:	4607      	mov	r7, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	b10a      	cbz	r2, 800da72 <_printf_common+0x26>
 800da6e:	3301      	adds	r3, #1
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	0699      	lsls	r1, r3, #26
 800da76:	bf42      	ittt	mi
 800da78:	6833      	ldrmi	r3, [r6, #0]
 800da7a:	3302      	addmi	r3, #2
 800da7c:	6033      	strmi	r3, [r6, #0]
 800da7e:	6825      	ldr	r5, [r4, #0]
 800da80:	f015 0506 	ands.w	r5, r5, #6
 800da84:	d106      	bne.n	800da94 <_printf_common+0x48>
 800da86:	f104 0a19 	add.w	sl, r4, #25
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	6832      	ldr	r2, [r6, #0]
 800da8e:	1a9b      	subs	r3, r3, r2
 800da90:	42ab      	cmp	r3, r5
 800da92:	dc26      	bgt.n	800dae2 <_printf_common+0x96>
 800da94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da98:	6822      	ldr	r2, [r4, #0]
 800da9a:	3b00      	subs	r3, #0
 800da9c:	bf18      	it	ne
 800da9e:	2301      	movne	r3, #1
 800daa0:	0692      	lsls	r2, r2, #26
 800daa2:	d42b      	bmi.n	800dafc <_printf_common+0xb0>
 800daa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800daa8:	4641      	mov	r1, r8
 800daaa:	4638      	mov	r0, r7
 800daac:	47c8      	blx	r9
 800daae:	3001      	adds	r0, #1
 800dab0:	d01e      	beq.n	800daf0 <_printf_common+0xa4>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	6922      	ldr	r2, [r4, #16]
 800dab6:	f003 0306 	and.w	r3, r3, #6
 800daba:	2b04      	cmp	r3, #4
 800dabc:	bf02      	ittt	eq
 800dabe:	68e5      	ldreq	r5, [r4, #12]
 800dac0:	6833      	ldreq	r3, [r6, #0]
 800dac2:	1aed      	subeq	r5, r5, r3
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	bf0c      	ite	eq
 800dac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dacc:	2500      	movne	r5, #0
 800dace:	4293      	cmp	r3, r2
 800dad0:	bfc4      	itt	gt
 800dad2:	1a9b      	subgt	r3, r3, r2
 800dad4:	18ed      	addgt	r5, r5, r3
 800dad6:	2600      	movs	r6, #0
 800dad8:	341a      	adds	r4, #26
 800dada:	42b5      	cmp	r5, r6
 800dadc:	d11a      	bne.n	800db14 <_printf_common+0xc8>
 800dade:	2000      	movs	r0, #0
 800dae0:	e008      	b.n	800daf4 <_printf_common+0xa8>
 800dae2:	2301      	movs	r3, #1
 800dae4:	4652      	mov	r2, sl
 800dae6:	4641      	mov	r1, r8
 800dae8:	4638      	mov	r0, r7
 800daea:	47c8      	blx	r9
 800daec:	3001      	adds	r0, #1
 800daee:	d103      	bne.n	800daf8 <_printf_common+0xac>
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf8:	3501      	adds	r5, #1
 800dafa:	e7c6      	b.n	800da8a <_printf_common+0x3e>
 800dafc:	18e1      	adds	r1, r4, r3
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	2030      	movs	r0, #48	@ 0x30
 800db02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db06:	4422      	add	r2, r4
 800db08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db10:	3302      	adds	r3, #2
 800db12:	e7c7      	b.n	800daa4 <_printf_common+0x58>
 800db14:	2301      	movs	r3, #1
 800db16:	4622      	mov	r2, r4
 800db18:	4641      	mov	r1, r8
 800db1a:	4638      	mov	r0, r7
 800db1c:	47c8      	blx	r9
 800db1e:	3001      	adds	r0, #1
 800db20:	d0e6      	beq.n	800daf0 <_printf_common+0xa4>
 800db22:	3601      	adds	r6, #1
 800db24:	e7d9      	b.n	800dada <_printf_common+0x8e>
	...

0800db28 <_printf_i>:
 800db28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	7e0f      	ldrb	r7, [r1, #24]
 800db2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db30:	2f78      	cmp	r7, #120	@ 0x78
 800db32:	4691      	mov	r9, r2
 800db34:	4680      	mov	r8, r0
 800db36:	460c      	mov	r4, r1
 800db38:	469a      	mov	sl, r3
 800db3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800db3e:	d807      	bhi.n	800db50 <_printf_i+0x28>
 800db40:	2f62      	cmp	r7, #98	@ 0x62
 800db42:	d80a      	bhi.n	800db5a <_printf_i+0x32>
 800db44:	2f00      	cmp	r7, #0
 800db46:	f000 80d1 	beq.w	800dcec <_printf_i+0x1c4>
 800db4a:	2f58      	cmp	r7, #88	@ 0x58
 800db4c:	f000 80b8 	beq.w	800dcc0 <_printf_i+0x198>
 800db50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800db58:	e03a      	b.n	800dbd0 <_printf_i+0xa8>
 800db5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800db5e:	2b15      	cmp	r3, #21
 800db60:	d8f6      	bhi.n	800db50 <_printf_i+0x28>
 800db62:	a101      	add	r1, pc, #4	@ (adr r1, 800db68 <_printf_i+0x40>)
 800db64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db68:	0800dbc1 	.word	0x0800dbc1
 800db6c:	0800dbd5 	.word	0x0800dbd5
 800db70:	0800db51 	.word	0x0800db51
 800db74:	0800db51 	.word	0x0800db51
 800db78:	0800db51 	.word	0x0800db51
 800db7c:	0800db51 	.word	0x0800db51
 800db80:	0800dbd5 	.word	0x0800dbd5
 800db84:	0800db51 	.word	0x0800db51
 800db88:	0800db51 	.word	0x0800db51
 800db8c:	0800db51 	.word	0x0800db51
 800db90:	0800db51 	.word	0x0800db51
 800db94:	0800dcd3 	.word	0x0800dcd3
 800db98:	0800dbff 	.word	0x0800dbff
 800db9c:	0800dc8d 	.word	0x0800dc8d
 800dba0:	0800db51 	.word	0x0800db51
 800dba4:	0800db51 	.word	0x0800db51
 800dba8:	0800dcf5 	.word	0x0800dcf5
 800dbac:	0800db51 	.word	0x0800db51
 800dbb0:	0800dbff 	.word	0x0800dbff
 800dbb4:	0800db51 	.word	0x0800db51
 800dbb8:	0800db51 	.word	0x0800db51
 800dbbc:	0800dc95 	.word	0x0800dc95
 800dbc0:	6833      	ldr	r3, [r6, #0]
 800dbc2:	1d1a      	adds	r2, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6032      	str	r2, [r6, #0]
 800dbc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e09c      	b.n	800dd0e <_printf_i+0x1e6>
 800dbd4:	6833      	ldr	r3, [r6, #0]
 800dbd6:	6820      	ldr	r0, [r4, #0]
 800dbd8:	1d19      	adds	r1, r3, #4
 800dbda:	6031      	str	r1, [r6, #0]
 800dbdc:	0606      	lsls	r6, r0, #24
 800dbde:	d501      	bpl.n	800dbe4 <_printf_i+0xbc>
 800dbe0:	681d      	ldr	r5, [r3, #0]
 800dbe2:	e003      	b.n	800dbec <_printf_i+0xc4>
 800dbe4:	0645      	lsls	r5, r0, #25
 800dbe6:	d5fb      	bpl.n	800dbe0 <_printf_i+0xb8>
 800dbe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dbec:	2d00      	cmp	r5, #0
 800dbee:	da03      	bge.n	800dbf8 <_printf_i+0xd0>
 800dbf0:	232d      	movs	r3, #45	@ 0x2d
 800dbf2:	426d      	negs	r5, r5
 800dbf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbf8:	4858      	ldr	r0, [pc, #352]	@ (800dd5c <_printf_i+0x234>)
 800dbfa:	230a      	movs	r3, #10
 800dbfc:	e011      	b.n	800dc22 <_printf_i+0xfa>
 800dbfe:	6821      	ldr	r1, [r4, #0]
 800dc00:	6833      	ldr	r3, [r6, #0]
 800dc02:	0608      	lsls	r0, r1, #24
 800dc04:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc08:	d402      	bmi.n	800dc10 <_printf_i+0xe8>
 800dc0a:	0649      	lsls	r1, r1, #25
 800dc0c:	bf48      	it	mi
 800dc0e:	b2ad      	uxthmi	r5, r5
 800dc10:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc12:	4852      	ldr	r0, [pc, #328]	@ (800dd5c <_printf_i+0x234>)
 800dc14:	6033      	str	r3, [r6, #0]
 800dc16:	bf14      	ite	ne
 800dc18:	230a      	movne	r3, #10
 800dc1a:	2308      	moveq	r3, #8
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc22:	6866      	ldr	r6, [r4, #4]
 800dc24:	60a6      	str	r6, [r4, #8]
 800dc26:	2e00      	cmp	r6, #0
 800dc28:	db05      	blt.n	800dc36 <_printf_i+0x10e>
 800dc2a:	6821      	ldr	r1, [r4, #0]
 800dc2c:	432e      	orrs	r6, r5
 800dc2e:	f021 0104 	bic.w	r1, r1, #4
 800dc32:	6021      	str	r1, [r4, #0]
 800dc34:	d04b      	beq.n	800dcce <_printf_i+0x1a6>
 800dc36:	4616      	mov	r6, r2
 800dc38:	fbb5 f1f3 	udiv	r1, r5, r3
 800dc3c:	fb03 5711 	mls	r7, r3, r1, r5
 800dc40:	5dc7      	ldrb	r7, [r0, r7]
 800dc42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc46:	462f      	mov	r7, r5
 800dc48:	42bb      	cmp	r3, r7
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	d9f4      	bls.n	800dc38 <_printf_i+0x110>
 800dc4e:	2b08      	cmp	r3, #8
 800dc50:	d10b      	bne.n	800dc6a <_printf_i+0x142>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	07df      	lsls	r7, r3, #31
 800dc56:	d508      	bpl.n	800dc6a <_printf_i+0x142>
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	6861      	ldr	r1, [r4, #4]
 800dc5c:	4299      	cmp	r1, r3
 800dc5e:	bfde      	ittt	le
 800dc60:	2330      	movle	r3, #48	@ 0x30
 800dc62:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc66:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc6a:	1b92      	subs	r2, r2, r6
 800dc6c:	6122      	str	r2, [r4, #16]
 800dc6e:	f8cd a000 	str.w	sl, [sp]
 800dc72:	464b      	mov	r3, r9
 800dc74:	aa03      	add	r2, sp, #12
 800dc76:	4621      	mov	r1, r4
 800dc78:	4640      	mov	r0, r8
 800dc7a:	f7ff fee7 	bl	800da4c <_printf_common>
 800dc7e:	3001      	adds	r0, #1
 800dc80:	d14a      	bne.n	800dd18 <_printf_i+0x1f0>
 800dc82:	f04f 30ff 	mov.w	r0, #4294967295
 800dc86:	b004      	add	sp, #16
 800dc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	f043 0320 	orr.w	r3, r3, #32
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	4832      	ldr	r0, [pc, #200]	@ (800dd60 <_printf_i+0x238>)
 800dc96:	2778      	movs	r7, #120	@ 0x78
 800dc98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	6831      	ldr	r1, [r6, #0]
 800dca0:	061f      	lsls	r7, r3, #24
 800dca2:	f851 5b04 	ldr.w	r5, [r1], #4
 800dca6:	d402      	bmi.n	800dcae <_printf_i+0x186>
 800dca8:	065f      	lsls	r7, r3, #25
 800dcaa:	bf48      	it	mi
 800dcac:	b2ad      	uxthmi	r5, r5
 800dcae:	6031      	str	r1, [r6, #0]
 800dcb0:	07d9      	lsls	r1, r3, #31
 800dcb2:	bf44      	itt	mi
 800dcb4:	f043 0320 	orrmi.w	r3, r3, #32
 800dcb8:	6023      	strmi	r3, [r4, #0]
 800dcba:	b11d      	cbz	r5, 800dcc4 <_printf_i+0x19c>
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	e7ad      	b.n	800dc1c <_printf_i+0xf4>
 800dcc0:	4826      	ldr	r0, [pc, #152]	@ (800dd5c <_printf_i+0x234>)
 800dcc2:	e7e9      	b.n	800dc98 <_printf_i+0x170>
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	f023 0320 	bic.w	r3, r3, #32
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	e7f6      	b.n	800dcbc <_printf_i+0x194>
 800dcce:	4616      	mov	r6, r2
 800dcd0:	e7bd      	b.n	800dc4e <_printf_i+0x126>
 800dcd2:	6833      	ldr	r3, [r6, #0]
 800dcd4:	6825      	ldr	r5, [r4, #0]
 800dcd6:	6961      	ldr	r1, [r4, #20]
 800dcd8:	1d18      	adds	r0, r3, #4
 800dcda:	6030      	str	r0, [r6, #0]
 800dcdc:	062e      	lsls	r6, r5, #24
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	d501      	bpl.n	800dce6 <_printf_i+0x1be>
 800dce2:	6019      	str	r1, [r3, #0]
 800dce4:	e002      	b.n	800dcec <_printf_i+0x1c4>
 800dce6:	0668      	lsls	r0, r5, #25
 800dce8:	d5fb      	bpl.n	800dce2 <_printf_i+0x1ba>
 800dcea:	8019      	strh	r1, [r3, #0]
 800dcec:	2300      	movs	r3, #0
 800dcee:	6123      	str	r3, [r4, #16]
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	e7bc      	b.n	800dc6e <_printf_i+0x146>
 800dcf4:	6833      	ldr	r3, [r6, #0]
 800dcf6:	1d1a      	adds	r2, r3, #4
 800dcf8:	6032      	str	r2, [r6, #0]
 800dcfa:	681e      	ldr	r6, [r3, #0]
 800dcfc:	6862      	ldr	r2, [r4, #4]
 800dcfe:	2100      	movs	r1, #0
 800dd00:	4630      	mov	r0, r6
 800dd02:	f7f2 fa65 	bl	80001d0 <memchr>
 800dd06:	b108      	cbz	r0, 800dd0c <_printf_i+0x1e4>
 800dd08:	1b80      	subs	r0, r0, r6
 800dd0a:	6060      	str	r0, [r4, #4]
 800dd0c:	6863      	ldr	r3, [r4, #4]
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	2300      	movs	r3, #0
 800dd12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd16:	e7aa      	b.n	800dc6e <_printf_i+0x146>
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	4632      	mov	r2, r6
 800dd1c:	4649      	mov	r1, r9
 800dd1e:	4640      	mov	r0, r8
 800dd20:	47d0      	blx	sl
 800dd22:	3001      	adds	r0, #1
 800dd24:	d0ad      	beq.n	800dc82 <_printf_i+0x15a>
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	079b      	lsls	r3, r3, #30
 800dd2a:	d413      	bmi.n	800dd54 <_printf_i+0x22c>
 800dd2c:	68e0      	ldr	r0, [r4, #12]
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	4298      	cmp	r0, r3
 800dd32:	bfb8      	it	lt
 800dd34:	4618      	movlt	r0, r3
 800dd36:	e7a6      	b.n	800dc86 <_printf_i+0x15e>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	4632      	mov	r2, r6
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4640      	mov	r0, r8
 800dd40:	47d0      	blx	sl
 800dd42:	3001      	adds	r0, #1
 800dd44:	d09d      	beq.n	800dc82 <_printf_i+0x15a>
 800dd46:	3501      	adds	r5, #1
 800dd48:	68e3      	ldr	r3, [r4, #12]
 800dd4a:	9903      	ldr	r1, [sp, #12]
 800dd4c:	1a5b      	subs	r3, r3, r1
 800dd4e:	42ab      	cmp	r3, r5
 800dd50:	dcf2      	bgt.n	800dd38 <_printf_i+0x210>
 800dd52:	e7eb      	b.n	800dd2c <_printf_i+0x204>
 800dd54:	2500      	movs	r5, #0
 800dd56:	f104 0619 	add.w	r6, r4, #25
 800dd5a:	e7f5      	b.n	800dd48 <_printf_i+0x220>
 800dd5c:	08010a32 	.word	0x08010a32
 800dd60:	08010a43 	.word	0x08010a43

0800dd64 <std>:
 800dd64:	2300      	movs	r3, #0
 800dd66:	b510      	push	{r4, lr}
 800dd68:	4604      	mov	r4, r0
 800dd6a:	e9c0 3300 	strd	r3, r3, [r0]
 800dd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd72:	6083      	str	r3, [r0, #8]
 800dd74:	8181      	strh	r1, [r0, #12]
 800dd76:	6643      	str	r3, [r0, #100]	@ 0x64
 800dd78:	81c2      	strh	r2, [r0, #14]
 800dd7a:	6183      	str	r3, [r0, #24]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	2208      	movs	r2, #8
 800dd80:	305c      	adds	r0, #92	@ 0x5c
 800dd82:	f000 fa01 	bl	800e188 <memset>
 800dd86:	4b0d      	ldr	r3, [pc, #52]	@ (800ddbc <std+0x58>)
 800dd88:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc0 <std+0x5c>)
 800dd8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc4 <std+0x60>)
 800dd90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <std+0x64>)
 800dd94:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd96:	4b0d      	ldr	r3, [pc, #52]	@ (800ddcc <std+0x68>)
 800dd98:	6224      	str	r4, [r4, #32]
 800dd9a:	429c      	cmp	r4, r3
 800dd9c:	d006      	beq.n	800ddac <std+0x48>
 800dd9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dda2:	4294      	cmp	r4, r2
 800dda4:	d002      	beq.n	800ddac <std+0x48>
 800dda6:	33d0      	adds	r3, #208	@ 0xd0
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d105      	bne.n	800ddb8 <std+0x54>
 800ddac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ddb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb4:	f000 ba74 	b.w	800e2a0 <__retarget_lock_init_recursive>
 800ddb8:	bd10      	pop	{r4, pc}
 800ddba:	bf00      	nop
 800ddbc:	0800dfd9 	.word	0x0800dfd9
 800ddc0:	0800dffb 	.word	0x0800dffb
 800ddc4:	0800e033 	.word	0x0800e033
 800ddc8:	0800e057 	.word	0x0800e057
 800ddcc:	20002448 	.word	0x20002448

0800ddd0 <stdio_exit_handler>:
 800ddd0:	4a02      	ldr	r2, [pc, #8]	@ (800dddc <stdio_exit_handler+0xc>)
 800ddd2:	4903      	ldr	r1, [pc, #12]	@ (800dde0 <stdio_exit_handler+0x10>)
 800ddd4:	4803      	ldr	r0, [pc, #12]	@ (800dde4 <stdio_exit_handler+0x14>)
 800ddd6:	f000 b869 	b.w	800deac <_fwalk_sglue>
 800ddda:	bf00      	nop
 800dddc:	2000012c 	.word	0x2000012c
 800dde0:	0800fa8d 	.word	0x0800fa8d
 800dde4:	2000013c 	.word	0x2000013c

0800dde8 <cleanup_stdio>:
 800dde8:	6841      	ldr	r1, [r0, #4]
 800ddea:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <cleanup_stdio+0x34>)
 800ddec:	4299      	cmp	r1, r3
 800ddee:	b510      	push	{r4, lr}
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	d001      	beq.n	800ddf8 <cleanup_stdio+0x10>
 800ddf4:	f001 fe4a 	bl	800fa8c <_fflush_r>
 800ddf8:	68a1      	ldr	r1, [r4, #8]
 800ddfa:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <cleanup_stdio+0x38>)
 800ddfc:	4299      	cmp	r1, r3
 800ddfe:	d002      	beq.n	800de06 <cleanup_stdio+0x1e>
 800de00:	4620      	mov	r0, r4
 800de02:	f001 fe43 	bl	800fa8c <_fflush_r>
 800de06:	68e1      	ldr	r1, [r4, #12]
 800de08:	4b06      	ldr	r3, [pc, #24]	@ (800de24 <cleanup_stdio+0x3c>)
 800de0a:	4299      	cmp	r1, r3
 800de0c:	d004      	beq.n	800de18 <cleanup_stdio+0x30>
 800de0e:	4620      	mov	r0, r4
 800de10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de14:	f001 be3a 	b.w	800fa8c <_fflush_r>
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	bf00      	nop
 800de1c:	20002448 	.word	0x20002448
 800de20:	200024b0 	.word	0x200024b0
 800de24:	20002518 	.word	0x20002518

0800de28 <global_stdio_init.part.0>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	4b0b      	ldr	r3, [pc, #44]	@ (800de58 <global_stdio_init.part.0+0x30>)
 800de2c:	4c0b      	ldr	r4, [pc, #44]	@ (800de5c <global_stdio_init.part.0+0x34>)
 800de2e:	4a0c      	ldr	r2, [pc, #48]	@ (800de60 <global_stdio_init.part.0+0x38>)
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	4620      	mov	r0, r4
 800de34:	2200      	movs	r2, #0
 800de36:	2104      	movs	r1, #4
 800de38:	f7ff ff94 	bl	800dd64 <std>
 800de3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de40:	2201      	movs	r2, #1
 800de42:	2109      	movs	r1, #9
 800de44:	f7ff ff8e 	bl	800dd64 <std>
 800de48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de4c:	2202      	movs	r2, #2
 800de4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de52:	2112      	movs	r1, #18
 800de54:	f7ff bf86 	b.w	800dd64 <std>
 800de58:	20002580 	.word	0x20002580
 800de5c:	20002448 	.word	0x20002448
 800de60:	0800ddd1 	.word	0x0800ddd1

0800de64 <__sfp_lock_acquire>:
 800de64:	4801      	ldr	r0, [pc, #4]	@ (800de6c <__sfp_lock_acquire+0x8>)
 800de66:	f000 ba1c 	b.w	800e2a2 <__retarget_lock_acquire_recursive>
 800de6a:	bf00      	nop
 800de6c:	20002589 	.word	0x20002589

0800de70 <__sfp_lock_release>:
 800de70:	4801      	ldr	r0, [pc, #4]	@ (800de78 <__sfp_lock_release+0x8>)
 800de72:	f000 ba17 	b.w	800e2a4 <__retarget_lock_release_recursive>
 800de76:	bf00      	nop
 800de78:	20002589 	.word	0x20002589

0800de7c <__sinit>:
 800de7c:	b510      	push	{r4, lr}
 800de7e:	4604      	mov	r4, r0
 800de80:	f7ff fff0 	bl	800de64 <__sfp_lock_acquire>
 800de84:	6a23      	ldr	r3, [r4, #32]
 800de86:	b11b      	cbz	r3, 800de90 <__sinit+0x14>
 800de88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de8c:	f7ff bff0 	b.w	800de70 <__sfp_lock_release>
 800de90:	4b04      	ldr	r3, [pc, #16]	@ (800dea4 <__sinit+0x28>)
 800de92:	6223      	str	r3, [r4, #32]
 800de94:	4b04      	ldr	r3, [pc, #16]	@ (800dea8 <__sinit+0x2c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1f5      	bne.n	800de88 <__sinit+0xc>
 800de9c:	f7ff ffc4 	bl	800de28 <global_stdio_init.part.0>
 800dea0:	e7f2      	b.n	800de88 <__sinit+0xc>
 800dea2:	bf00      	nop
 800dea4:	0800dde9 	.word	0x0800dde9
 800dea8:	20002580 	.word	0x20002580

0800deac <_fwalk_sglue>:
 800deac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb0:	4607      	mov	r7, r0
 800deb2:	4688      	mov	r8, r1
 800deb4:	4614      	mov	r4, r2
 800deb6:	2600      	movs	r6, #0
 800deb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800debc:	f1b9 0901 	subs.w	r9, r9, #1
 800dec0:	d505      	bpl.n	800dece <_fwalk_sglue+0x22>
 800dec2:	6824      	ldr	r4, [r4, #0]
 800dec4:	2c00      	cmp	r4, #0
 800dec6:	d1f7      	bne.n	800deb8 <_fwalk_sglue+0xc>
 800dec8:	4630      	mov	r0, r6
 800deca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d907      	bls.n	800dee4 <_fwalk_sglue+0x38>
 800ded4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ded8:	3301      	adds	r3, #1
 800deda:	d003      	beq.n	800dee4 <_fwalk_sglue+0x38>
 800dedc:	4629      	mov	r1, r5
 800dede:	4638      	mov	r0, r7
 800dee0:	47c0      	blx	r8
 800dee2:	4306      	orrs	r6, r0
 800dee4:	3568      	adds	r5, #104	@ 0x68
 800dee6:	e7e9      	b.n	800debc <_fwalk_sglue+0x10>

0800dee8 <iprintf>:
 800dee8:	b40f      	push	{r0, r1, r2, r3}
 800deea:	b507      	push	{r0, r1, r2, lr}
 800deec:	4906      	ldr	r1, [pc, #24]	@ (800df08 <iprintf+0x20>)
 800deee:	ab04      	add	r3, sp, #16
 800def0:	6808      	ldr	r0, [r1, #0]
 800def2:	f853 2b04 	ldr.w	r2, [r3], #4
 800def6:	6881      	ldr	r1, [r0, #8]
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	f001 fc2b 	bl	800f754 <_vfiprintf_r>
 800defe:	b003      	add	sp, #12
 800df00:	f85d eb04 	ldr.w	lr, [sp], #4
 800df04:	b004      	add	sp, #16
 800df06:	4770      	bx	lr
 800df08:	20000138 	.word	0x20000138

0800df0c <putchar>:
 800df0c:	4b02      	ldr	r3, [pc, #8]	@ (800df18 <putchar+0xc>)
 800df0e:	4601      	mov	r1, r0
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	6882      	ldr	r2, [r0, #8]
 800df14:	f001 be44 	b.w	800fba0 <_putc_r>
 800df18:	20000138 	.word	0x20000138

0800df1c <_puts_r>:
 800df1c:	6a03      	ldr	r3, [r0, #32]
 800df1e:	b570      	push	{r4, r5, r6, lr}
 800df20:	6884      	ldr	r4, [r0, #8]
 800df22:	4605      	mov	r5, r0
 800df24:	460e      	mov	r6, r1
 800df26:	b90b      	cbnz	r3, 800df2c <_puts_r+0x10>
 800df28:	f7ff ffa8 	bl	800de7c <__sinit>
 800df2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df2e:	07db      	lsls	r3, r3, #31
 800df30:	d405      	bmi.n	800df3e <_puts_r+0x22>
 800df32:	89a3      	ldrh	r3, [r4, #12]
 800df34:	0598      	lsls	r0, r3, #22
 800df36:	d402      	bmi.n	800df3e <_puts_r+0x22>
 800df38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df3a:	f000 f9b2 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	0719      	lsls	r1, r3, #28
 800df42:	d502      	bpl.n	800df4a <_puts_r+0x2e>
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d135      	bne.n	800dfb6 <_puts_r+0x9a>
 800df4a:	4621      	mov	r1, r4
 800df4c:	4628      	mov	r0, r5
 800df4e:	f000 f8c5 	bl	800e0dc <__swsetup_r>
 800df52:	b380      	cbz	r0, 800dfb6 <_puts_r+0x9a>
 800df54:	f04f 35ff 	mov.w	r5, #4294967295
 800df58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df5a:	07da      	lsls	r2, r3, #31
 800df5c:	d405      	bmi.n	800df6a <_puts_r+0x4e>
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	059b      	lsls	r3, r3, #22
 800df62:	d402      	bmi.n	800df6a <_puts_r+0x4e>
 800df64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df66:	f000 f99d 	bl	800e2a4 <__retarget_lock_release_recursive>
 800df6a:	4628      	mov	r0, r5
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da04      	bge.n	800df7c <_puts_r+0x60>
 800df72:	69a2      	ldr	r2, [r4, #24]
 800df74:	429a      	cmp	r2, r3
 800df76:	dc17      	bgt.n	800dfa8 <_puts_r+0x8c>
 800df78:	290a      	cmp	r1, #10
 800df7a:	d015      	beq.n	800dfa8 <_puts_r+0x8c>
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	1c5a      	adds	r2, r3, #1
 800df80:	6022      	str	r2, [r4, #0]
 800df82:	7019      	strb	r1, [r3, #0]
 800df84:	68a3      	ldr	r3, [r4, #8]
 800df86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df8a:	3b01      	subs	r3, #1
 800df8c:	60a3      	str	r3, [r4, #8]
 800df8e:	2900      	cmp	r1, #0
 800df90:	d1ed      	bne.n	800df6e <_puts_r+0x52>
 800df92:	2b00      	cmp	r3, #0
 800df94:	da11      	bge.n	800dfba <_puts_r+0x9e>
 800df96:	4622      	mov	r2, r4
 800df98:	210a      	movs	r1, #10
 800df9a:	4628      	mov	r0, r5
 800df9c:	f000 f85f 	bl	800e05e <__swbuf_r>
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	d0d7      	beq.n	800df54 <_puts_r+0x38>
 800dfa4:	250a      	movs	r5, #10
 800dfa6:	e7d7      	b.n	800df58 <_puts_r+0x3c>
 800dfa8:	4622      	mov	r2, r4
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f000 f857 	bl	800e05e <__swbuf_r>
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d1e7      	bne.n	800df84 <_puts_r+0x68>
 800dfb4:	e7ce      	b.n	800df54 <_puts_r+0x38>
 800dfb6:	3e01      	subs	r6, #1
 800dfb8:	e7e4      	b.n	800df84 <_puts_r+0x68>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	6022      	str	r2, [r4, #0]
 800dfc0:	220a      	movs	r2, #10
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	e7ee      	b.n	800dfa4 <_puts_r+0x88>
	...

0800dfc8 <puts>:
 800dfc8:	4b02      	ldr	r3, [pc, #8]	@ (800dfd4 <puts+0xc>)
 800dfca:	4601      	mov	r1, r0
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	f7ff bfa5 	b.w	800df1c <_puts_r>
 800dfd2:	bf00      	nop
 800dfd4:	20000138 	.word	0x20000138

0800dfd8 <__sread>:
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	460c      	mov	r4, r1
 800dfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe0:	f000 f900 	bl	800e1e4 <_read_r>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	bfab      	itete	ge
 800dfe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dfea:	89a3      	ldrhlt	r3, [r4, #12]
 800dfec:	181b      	addge	r3, r3, r0
 800dfee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dff2:	bfac      	ite	ge
 800dff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dff6:	81a3      	strhlt	r3, [r4, #12]
 800dff8:	bd10      	pop	{r4, pc}

0800dffa <__swrite>:
 800dffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffe:	461f      	mov	r7, r3
 800e000:	898b      	ldrh	r3, [r1, #12]
 800e002:	05db      	lsls	r3, r3, #23
 800e004:	4605      	mov	r5, r0
 800e006:	460c      	mov	r4, r1
 800e008:	4616      	mov	r6, r2
 800e00a:	d505      	bpl.n	800e018 <__swrite+0x1e>
 800e00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e010:	2302      	movs	r3, #2
 800e012:	2200      	movs	r2, #0
 800e014:	f000 f8d4 	bl	800e1c0 <_lseek_r>
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e01e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e022:	81a3      	strh	r3, [r4, #12]
 800e024:	4632      	mov	r2, r6
 800e026:	463b      	mov	r3, r7
 800e028:	4628      	mov	r0, r5
 800e02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e02e:	f000 b8fb 	b.w	800e228 <_write_r>

0800e032 <__sseek>:
 800e032:	b510      	push	{r4, lr}
 800e034:	460c      	mov	r4, r1
 800e036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e03a:	f000 f8c1 	bl	800e1c0 <_lseek_r>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	bf15      	itete	ne
 800e044:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e04a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e04e:	81a3      	strheq	r3, [r4, #12]
 800e050:	bf18      	it	ne
 800e052:	81a3      	strhne	r3, [r4, #12]
 800e054:	bd10      	pop	{r4, pc}

0800e056 <__sclose>:
 800e056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e05a:	f000 b8a1 	b.w	800e1a0 <_close_r>

0800e05e <__swbuf_r>:
 800e05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e060:	460e      	mov	r6, r1
 800e062:	4614      	mov	r4, r2
 800e064:	4605      	mov	r5, r0
 800e066:	b118      	cbz	r0, 800e070 <__swbuf_r+0x12>
 800e068:	6a03      	ldr	r3, [r0, #32]
 800e06a:	b90b      	cbnz	r3, 800e070 <__swbuf_r+0x12>
 800e06c:	f7ff ff06 	bl	800de7c <__sinit>
 800e070:	69a3      	ldr	r3, [r4, #24]
 800e072:	60a3      	str	r3, [r4, #8]
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	071a      	lsls	r2, r3, #28
 800e078:	d501      	bpl.n	800e07e <__swbuf_r+0x20>
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	b943      	cbnz	r3, 800e090 <__swbuf_r+0x32>
 800e07e:	4621      	mov	r1, r4
 800e080:	4628      	mov	r0, r5
 800e082:	f000 f82b 	bl	800e0dc <__swsetup_r>
 800e086:	b118      	cbz	r0, 800e090 <__swbuf_r+0x32>
 800e088:	f04f 37ff 	mov.w	r7, #4294967295
 800e08c:	4638      	mov	r0, r7
 800e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	6922      	ldr	r2, [r4, #16]
 800e094:	1a98      	subs	r0, r3, r2
 800e096:	6963      	ldr	r3, [r4, #20]
 800e098:	b2f6      	uxtb	r6, r6
 800e09a:	4283      	cmp	r3, r0
 800e09c:	4637      	mov	r7, r6
 800e09e:	dc05      	bgt.n	800e0ac <__swbuf_r+0x4e>
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f001 fcf2 	bl	800fa8c <_fflush_r>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d1ed      	bne.n	800e088 <__swbuf_r+0x2a>
 800e0ac:	68a3      	ldr	r3, [r4, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	60a3      	str	r3, [r4, #8]
 800e0b2:	6823      	ldr	r3, [r4, #0]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	701e      	strb	r6, [r3, #0]
 800e0ba:	6962      	ldr	r2, [r4, #20]
 800e0bc:	1c43      	adds	r3, r0, #1
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d004      	beq.n	800e0cc <__swbuf_r+0x6e>
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	07db      	lsls	r3, r3, #31
 800e0c6:	d5e1      	bpl.n	800e08c <__swbuf_r+0x2e>
 800e0c8:	2e0a      	cmp	r6, #10
 800e0ca:	d1df      	bne.n	800e08c <__swbuf_r+0x2e>
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f001 fcdc 	bl	800fa8c <_fflush_r>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d0d9      	beq.n	800e08c <__swbuf_r+0x2e>
 800e0d8:	e7d6      	b.n	800e088 <__swbuf_r+0x2a>
	...

0800e0dc <__swsetup_r>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4b29      	ldr	r3, [pc, #164]	@ (800e184 <__swsetup_r+0xa8>)
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	6818      	ldr	r0, [r3, #0]
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	b118      	cbz	r0, 800e0f0 <__swsetup_r+0x14>
 800e0e8:	6a03      	ldr	r3, [r0, #32]
 800e0ea:	b90b      	cbnz	r3, 800e0f0 <__swsetup_r+0x14>
 800e0ec:	f7ff fec6 	bl	800de7c <__sinit>
 800e0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f4:	0719      	lsls	r1, r3, #28
 800e0f6:	d422      	bmi.n	800e13e <__swsetup_r+0x62>
 800e0f8:	06da      	lsls	r2, r3, #27
 800e0fa:	d407      	bmi.n	800e10c <__swsetup_r+0x30>
 800e0fc:	2209      	movs	r2, #9
 800e0fe:	602a      	str	r2, [r5, #0]
 800e100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e104:	81a3      	strh	r3, [r4, #12]
 800e106:	f04f 30ff 	mov.w	r0, #4294967295
 800e10a:	e033      	b.n	800e174 <__swsetup_r+0x98>
 800e10c:	0758      	lsls	r0, r3, #29
 800e10e:	d512      	bpl.n	800e136 <__swsetup_r+0x5a>
 800e110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e112:	b141      	cbz	r1, 800e126 <__swsetup_r+0x4a>
 800e114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e118:	4299      	cmp	r1, r3
 800e11a:	d002      	beq.n	800e122 <__swsetup_r+0x46>
 800e11c:	4628      	mov	r0, r5
 800e11e:	f000 ff2b 	bl	800ef78 <_free_r>
 800e122:	2300      	movs	r3, #0
 800e124:	6363      	str	r3, [r4, #52]	@ 0x34
 800e126:	89a3      	ldrh	r3, [r4, #12]
 800e128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e12c:	81a3      	strh	r3, [r4, #12]
 800e12e:	2300      	movs	r3, #0
 800e130:	6063      	str	r3, [r4, #4]
 800e132:	6923      	ldr	r3, [r4, #16]
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	f043 0308 	orr.w	r3, r3, #8
 800e13c:	81a3      	strh	r3, [r4, #12]
 800e13e:	6923      	ldr	r3, [r4, #16]
 800e140:	b94b      	cbnz	r3, 800e156 <__swsetup_r+0x7a>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e14c:	d003      	beq.n	800e156 <__swsetup_r+0x7a>
 800e14e:	4621      	mov	r1, r4
 800e150:	4628      	mov	r0, r5
 800e152:	f001 fce9 	bl	800fb28 <__smakebuf_r>
 800e156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15a:	f013 0201 	ands.w	r2, r3, #1
 800e15e:	d00a      	beq.n	800e176 <__swsetup_r+0x9a>
 800e160:	2200      	movs	r2, #0
 800e162:	60a2      	str	r2, [r4, #8]
 800e164:	6962      	ldr	r2, [r4, #20]
 800e166:	4252      	negs	r2, r2
 800e168:	61a2      	str	r2, [r4, #24]
 800e16a:	6922      	ldr	r2, [r4, #16]
 800e16c:	b942      	cbnz	r2, 800e180 <__swsetup_r+0xa4>
 800e16e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e172:	d1c5      	bne.n	800e100 <__swsetup_r+0x24>
 800e174:	bd38      	pop	{r3, r4, r5, pc}
 800e176:	0799      	lsls	r1, r3, #30
 800e178:	bf58      	it	pl
 800e17a:	6962      	ldrpl	r2, [r4, #20]
 800e17c:	60a2      	str	r2, [r4, #8]
 800e17e:	e7f4      	b.n	800e16a <__swsetup_r+0x8e>
 800e180:	2000      	movs	r0, #0
 800e182:	e7f7      	b.n	800e174 <__swsetup_r+0x98>
 800e184:	20000138 	.word	0x20000138

0800e188 <memset>:
 800e188:	4402      	add	r2, r0
 800e18a:	4603      	mov	r3, r0
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d100      	bne.n	800e192 <memset+0xa>
 800e190:	4770      	bx	lr
 800e192:	f803 1b01 	strb.w	r1, [r3], #1
 800e196:	e7f9      	b.n	800e18c <memset+0x4>

0800e198 <_localeconv_r>:
 800e198:	4800      	ldr	r0, [pc, #0]	@ (800e19c <_localeconv_r+0x4>)
 800e19a:	4770      	bx	lr
 800e19c:	20000278 	.word	0x20000278

0800e1a0 <_close_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d06      	ldr	r5, [pc, #24]	@ (800e1bc <_close_r+0x1c>)
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	f7f6 f9c2 	bl	8004534 <_close>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d102      	bne.n	800e1ba <_close_r+0x1a>
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	b103      	cbz	r3, 800e1ba <_close_r+0x1a>
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	20002584 	.word	0x20002584

0800e1c0 <_lseek_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d07      	ldr	r5, [pc, #28]	@ (800e1e0 <_lseek_r+0x20>)
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	602a      	str	r2, [r5, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	f7f6 f9d7 	bl	8004582 <_lseek>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_lseek_r+0x1e>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_lseek_r+0x1e>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	20002584 	.word	0x20002584

0800e1e4 <_read_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	4d07      	ldr	r5, [pc, #28]	@ (800e204 <_read_r+0x20>)
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	4608      	mov	r0, r1
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	602a      	str	r2, [r5, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f7f6 f981 	bl	80044fa <_read>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d102      	bne.n	800e202 <_read_r+0x1e>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	b103      	cbz	r3, 800e202 <_read_r+0x1e>
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	20002584 	.word	0x20002584

0800e208 <_sbrk_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d06      	ldr	r5, [pc, #24]	@ (800e224 <_sbrk_r+0x1c>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	f7f6 f9c2 	bl	800459c <_sbrk>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_sbrk_r+0x1a>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_sbrk_r+0x1a>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20002584 	.word	0x20002584

0800e228 <_write_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d07      	ldr	r5, [pc, #28]	@ (800e248 <_write_r+0x20>)
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	2200      	movs	r2, #0
 800e234:	602a      	str	r2, [r5, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f7f5 fb05 	bl	8003846 <_write>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_write_r+0x1e>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_write_r+0x1e>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	20002584 	.word	0x20002584

0800e24c <__errno>:
 800e24c:	4b01      	ldr	r3, [pc, #4]	@ (800e254 <__errno+0x8>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	20000138 	.word	0x20000138

0800e258 <__libc_init_array>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	4d0d      	ldr	r5, [pc, #52]	@ (800e290 <__libc_init_array+0x38>)
 800e25c:	4c0d      	ldr	r4, [pc, #52]	@ (800e294 <__libc_init_array+0x3c>)
 800e25e:	1b64      	subs	r4, r4, r5
 800e260:	10a4      	asrs	r4, r4, #2
 800e262:	2600      	movs	r6, #0
 800e264:	42a6      	cmp	r6, r4
 800e266:	d109      	bne.n	800e27c <__libc_init_array+0x24>
 800e268:	4d0b      	ldr	r5, [pc, #44]	@ (800e298 <__libc_init_array+0x40>)
 800e26a:	4c0c      	ldr	r4, [pc, #48]	@ (800e29c <__libc_init_array+0x44>)
 800e26c:	f002 f9ac 	bl	80105c8 <_init>
 800e270:	1b64      	subs	r4, r4, r5
 800e272:	10a4      	asrs	r4, r4, #2
 800e274:	2600      	movs	r6, #0
 800e276:	42a6      	cmp	r6, r4
 800e278:	d105      	bne.n	800e286 <__libc_init_array+0x2e>
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
 800e27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e280:	4798      	blx	r3
 800e282:	3601      	adds	r6, #1
 800e284:	e7ee      	b.n	800e264 <__libc_init_array+0xc>
 800e286:	f855 3b04 	ldr.w	r3, [r5], #4
 800e28a:	4798      	blx	r3
 800e28c:	3601      	adds	r6, #1
 800e28e:	e7f2      	b.n	800e276 <__libc_init_array+0x1e>
 800e290:	08010dd0 	.word	0x08010dd0
 800e294:	08010dd0 	.word	0x08010dd0
 800e298:	08010dd0 	.word	0x08010dd0
 800e29c:	08010dd4 	.word	0x08010dd4

0800e2a0 <__retarget_lock_init_recursive>:
 800e2a0:	4770      	bx	lr

0800e2a2 <__retarget_lock_acquire_recursive>:
 800e2a2:	4770      	bx	lr

0800e2a4 <__retarget_lock_release_recursive>:
 800e2a4:	4770      	bx	lr

0800e2a6 <memcpy>:
 800e2a6:	440a      	add	r2, r1
 800e2a8:	4291      	cmp	r1, r2
 800e2aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2ae:	d100      	bne.n	800e2b2 <memcpy+0xc>
 800e2b0:	4770      	bx	lr
 800e2b2:	b510      	push	{r4, lr}
 800e2b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2bc:	4291      	cmp	r1, r2
 800e2be:	d1f9      	bne.n	800e2b4 <memcpy+0xe>
 800e2c0:	bd10      	pop	{r4, pc}

0800e2c2 <quorem>:
 800e2c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c6:	6903      	ldr	r3, [r0, #16]
 800e2c8:	690c      	ldr	r4, [r1, #16]
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	db7e      	blt.n	800e3ce <quorem+0x10c>
 800e2d0:	3c01      	subs	r4, #1
 800e2d2:	f101 0814 	add.w	r8, r1, #20
 800e2d6:	00a3      	lsls	r3, r4, #2
 800e2d8:	f100 0514 	add.w	r5, r0, #20
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2e2:	9301      	str	r3, [sp, #4]
 800e2e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2f8:	d32e      	bcc.n	800e358 <quorem+0x96>
 800e2fa:	f04f 0a00 	mov.w	sl, #0
 800e2fe:	46c4      	mov	ip, r8
 800e300:	46ae      	mov	lr, r5
 800e302:	46d3      	mov	fp, sl
 800e304:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e308:	b298      	uxth	r0, r3
 800e30a:	fb06 a000 	mla	r0, r6, r0, sl
 800e30e:	0c02      	lsrs	r2, r0, #16
 800e310:	0c1b      	lsrs	r3, r3, #16
 800e312:	fb06 2303 	mla	r3, r6, r3, r2
 800e316:	f8de 2000 	ldr.w	r2, [lr]
 800e31a:	b280      	uxth	r0, r0
 800e31c:	b292      	uxth	r2, r2
 800e31e:	1a12      	subs	r2, r2, r0
 800e320:	445a      	add	r2, fp
 800e322:	f8de 0000 	ldr.w	r0, [lr]
 800e326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e330:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e334:	b292      	uxth	r2, r2
 800e336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e33a:	45e1      	cmp	r9, ip
 800e33c:	f84e 2b04 	str.w	r2, [lr], #4
 800e340:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e344:	d2de      	bcs.n	800e304 <quorem+0x42>
 800e346:	9b00      	ldr	r3, [sp, #0]
 800e348:	58eb      	ldr	r3, [r5, r3]
 800e34a:	b92b      	cbnz	r3, 800e358 <quorem+0x96>
 800e34c:	9b01      	ldr	r3, [sp, #4]
 800e34e:	3b04      	subs	r3, #4
 800e350:	429d      	cmp	r5, r3
 800e352:	461a      	mov	r2, r3
 800e354:	d32f      	bcc.n	800e3b6 <quorem+0xf4>
 800e356:	613c      	str	r4, [r7, #16]
 800e358:	4638      	mov	r0, r7
 800e35a:	f001 f8c9 	bl	800f4f0 <__mcmp>
 800e35e:	2800      	cmp	r0, #0
 800e360:	db25      	blt.n	800e3ae <quorem+0xec>
 800e362:	4629      	mov	r1, r5
 800e364:	2000      	movs	r0, #0
 800e366:	f858 2b04 	ldr.w	r2, [r8], #4
 800e36a:	f8d1 c000 	ldr.w	ip, [r1]
 800e36e:	fa1f fe82 	uxth.w	lr, r2
 800e372:	fa1f f38c 	uxth.w	r3, ip
 800e376:	eba3 030e 	sub.w	r3, r3, lr
 800e37a:	4403      	add	r3, r0
 800e37c:	0c12      	lsrs	r2, r2, #16
 800e37e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e382:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e386:	b29b      	uxth	r3, r3
 800e388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e38c:	45c1      	cmp	r9, r8
 800e38e:	f841 3b04 	str.w	r3, [r1], #4
 800e392:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e396:	d2e6      	bcs.n	800e366 <quorem+0xa4>
 800e398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e39c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3a0:	b922      	cbnz	r2, 800e3ac <quorem+0xea>
 800e3a2:	3b04      	subs	r3, #4
 800e3a4:	429d      	cmp	r5, r3
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	d30b      	bcc.n	800e3c2 <quorem+0x100>
 800e3aa:	613c      	str	r4, [r7, #16]
 800e3ac:	3601      	adds	r6, #1
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	b003      	add	sp, #12
 800e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	6812      	ldr	r2, [r2, #0]
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	2a00      	cmp	r2, #0
 800e3bc:	d1cb      	bne.n	800e356 <quorem+0x94>
 800e3be:	3c01      	subs	r4, #1
 800e3c0:	e7c6      	b.n	800e350 <quorem+0x8e>
 800e3c2:	6812      	ldr	r2, [r2, #0]
 800e3c4:	3b04      	subs	r3, #4
 800e3c6:	2a00      	cmp	r2, #0
 800e3c8:	d1ef      	bne.n	800e3aa <quorem+0xe8>
 800e3ca:	3c01      	subs	r4, #1
 800e3cc:	e7ea      	b.n	800e3a4 <quorem+0xe2>
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	e7ee      	b.n	800e3b0 <quorem+0xee>
 800e3d2:	0000      	movs	r0, r0
 800e3d4:	0000      	movs	r0, r0
	...

0800e3d8 <_dtoa_r>:
 800e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3dc:	69c7      	ldr	r7, [r0, #28]
 800e3de:	b097      	sub	sp, #92	@ 0x5c
 800e3e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e3e4:	ec55 4b10 	vmov	r4, r5, d0
 800e3e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e3ea:	9107      	str	r1, [sp, #28]
 800e3ec:	4681      	mov	r9, r0
 800e3ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800e3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e3f2:	b97f      	cbnz	r7, 800e414 <_dtoa_r+0x3c>
 800e3f4:	2010      	movs	r0, #16
 800e3f6:	f7fe ffa9 	bl	800d34c <malloc>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800e400:	b920      	cbnz	r0, 800e40c <_dtoa_r+0x34>
 800e402:	4ba9      	ldr	r3, [pc, #676]	@ (800e6a8 <_dtoa_r+0x2d0>)
 800e404:	21ef      	movs	r1, #239	@ 0xef
 800e406:	48a9      	ldr	r0, [pc, #676]	@ (800e6ac <_dtoa_r+0x2d4>)
 800e408:	f001 fc20 	bl	800fc4c <__assert_func>
 800e40c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e410:	6007      	str	r7, [r0, #0]
 800e412:	60c7      	str	r7, [r0, #12]
 800e414:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e418:	6819      	ldr	r1, [r3, #0]
 800e41a:	b159      	cbz	r1, 800e434 <_dtoa_r+0x5c>
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	604a      	str	r2, [r1, #4]
 800e420:	2301      	movs	r3, #1
 800e422:	4093      	lsls	r3, r2
 800e424:	608b      	str	r3, [r1, #8]
 800e426:	4648      	mov	r0, r9
 800e428:	f000 fe30 	bl	800f08c <_Bfree>
 800e42c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	1e2b      	subs	r3, r5, #0
 800e436:	bfb9      	ittee	lt
 800e438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e43c:	9305      	strlt	r3, [sp, #20]
 800e43e:	2300      	movge	r3, #0
 800e440:	6033      	strge	r3, [r6, #0]
 800e442:	9f05      	ldr	r7, [sp, #20]
 800e444:	4b9a      	ldr	r3, [pc, #616]	@ (800e6b0 <_dtoa_r+0x2d8>)
 800e446:	bfbc      	itt	lt
 800e448:	2201      	movlt	r2, #1
 800e44a:	6032      	strlt	r2, [r6, #0]
 800e44c:	43bb      	bics	r3, r7
 800e44e:	d112      	bne.n	800e476 <_dtoa_r+0x9e>
 800e450:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e452:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e45c:	4323      	orrs	r3, r4
 800e45e:	f000 855a 	beq.w	800ef16 <_dtoa_r+0xb3e>
 800e462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e464:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e6c4 <_dtoa_r+0x2ec>
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 855c 	beq.w	800ef26 <_dtoa_r+0xb4e>
 800e46e:	f10a 0303 	add.w	r3, sl, #3
 800e472:	f000 bd56 	b.w	800ef22 <_dtoa_r+0xb4a>
 800e476:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e47a:	2200      	movs	r2, #0
 800e47c:	ec51 0b17 	vmov	r0, r1, d7
 800e480:	2300      	movs	r3, #0
 800e482:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e486:	f7f2 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e48a:	4680      	mov	r8, r0
 800e48c:	b158      	cbz	r0, 800e4a6 <_dtoa_r+0xce>
 800e48e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e490:	2301      	movs	r3, #1
 800e492:	6013      	str	r3, [r2, #0]
 800e494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e496:	b113      	cbz	r3, 800e49e <_dtoa_r+0xc6>
 800e498:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e49a:	4b86      	ldr	r3, [pc, #536]	@ (800e6b4 <_dtoa_r+0x2dc>)
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e6c8 <_dtoa_r+0x2f0>
 800e4a2:	f000 bd40 	b.w	800ef26 <_dtoa_r+0xb4e>
 800e4a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e4aa:	aa14      	add	r2, sp, #80	@ 0x50
 800e4ac:	a915      	add	r1, sp, #84	@ 0x54
 800e4ae:	4648      	mov	r0, r9
 800e4b0:	f001 f8ce 	bl	800f650 <__d2b>
 800e4b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e4b8:	9002      	str	r0, [sp, #8]
 800e4ba:	2e00      	cmp	r6, #0
 800e4bc:	d078      	beq.n	800e5b0 <_dtoa_r+0x1d8>
 800e4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e4c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e4cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e4d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e4d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e4d8:	4619      	mov	r1, r3
 800e4da:	2200      	movs	r2, #0
 800e4dc:	4b76      	ldr	r3, [pc, #472]	@ (800e6b8 <_dtoa_r+0x2e0>)
 800e4de:	f7f1 fed3 	bl	8000288 <__aeabi_dsub>
 800e4e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e690 <_dtoa_r+0x2b8>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	f7f2 f886 	bl	80005f8 <__aeabi_dmul>
 800e4ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800e698 <_dtoa_r+0x2c0>)
 800e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f2:	f7f1 fecb 	bl	800028c <__adddf3>
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	f7f2 f812 	bl	8000524 <__aeabi_i2d>
 800e500:	a367      	add	r3, pc, #412	@ (adr r3, 800e6a0 <_dtoa_r+0x2c8>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f2 f877 	bl	80005f8 <__aeabi_dmul>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4620      	mov	r0, r4
 800e510:	4629      	mov	r1, r5
 800e512:	f7f1 febb 	bl	800028c <__adddf3>
 800e516:	4604      	mov	r4, r0
 800e518:	460d      	mov	r5, r1
 800e51a:	f7f2 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800e51e:	2200      	movs	r2, #0
 800e520:	4607      	mov	r7, r0
 800e522:	2300      	movs	r3, #0
 800e524:	4620      	mov	r0, r4
 800e526:	4629      	mov	r1, r5
 800e528:	f7f2 fad8 	bl	8000adc <__aeabi_dcmplt>
 800e52c:	b140      	cbz	r0, 800e540 <_dtoa_r+0x168>
 800e52e:	4638      	mov	r0, r7
 800e530:	f7f1 fff8 	bl	8000524 <__aeabi_i2d>
 800e534:	4622      	mov	r2, r4
 800e536:	462b      	mov	r3, r5
 800e538:	f7f2 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e53c:	b900      	cbnz	r0, 800e540 <_dtoa_r+0x168>
 800e53e:	3f01      	subs	r7, #1
 800e540:	2f16      	cmp	r7, #22
 800e542:	d852      	bhi.n	800e5ea <_dtoa_r+0x212>
 800e544:	4b5d      	ldr	r3, [pc, #372]	@ (800e6bc <_dtoa_r+0x2e4>)
 800e546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e552:	f7f2 fac3 	bl	8000adc <__aeabi_dcmplt>
 800e556:	2800      	cmp	r0, #0
 800e558:	d049      	beq.n	800e5ee <_dtoa_r+0x216>
 800e55a:	3f01      	subs	r7, #1
 800e55c:	2300      	movs	r3, #0
 800e55e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e560:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e562:	1b9b      	subs	r3, r3, r6
 800e564:	1e5a      	subs	r2, r3, #1
 800e566:	bf45      	ittet	mi
 800e568:	f1c3 0301 	rsbmi	r3, r3, #1
 800e56c:	9300      	strmi	r3, [sp, #0]
 800e56e:	2300      	movpl	r3, #0
 800e570:	2300      	movmi	r3, #0
 800e572:	9206      	str	r2, [sp, #24]
 800e574:	bf54      	ite	pl
 800e576:	9300      	strpl	r3, [sp, #0]
 800e578:	9306      	strmi	r3, [sp, #24]
 800e57a:	2f00      	cmp	r7, #0
 800e57c:	db39      	blt.n	800e5f2 <_dtoa_r+0x21a>
 800e57e:	9b06      	ldr	r3, [sp, #24]
 800e580:	970d      	str	r7, [sp, #52]	@ 0x34
 800e582:	443b      	add	r3, r7
 800e584:	9306      	str	r3, [sp, #24]
 800e586:	2300      	movs	r3, #0
 800e588:	9308      	str	r3, [sp, #32]
 800e58a:	9b07      	ldr	r3, [sp, #28]
 800e58c:	2b09      	cmp	r3, #9
 800e58e:	d863      	bhi.n	800e658 <_dtoa_r+0x280>
 800e590:	2b05      	cmp	r3, #5
 800e592:	bfc4      	itt	gt
 800e594:	3b04      	subgt	r3, #4
 800e596:	9307      	strgt	r3, [sp, #28]
 800e598:	9b07      	ldr	r3, [sp, #28]
 800e59a:	f1a3 0302 	sub.w	r3, r3, #2
 800e59e:	bfcc      	ite	gt
 800e5a0:	2400      	movgt	r4, #0
 800e5a2:	2401      	movle	r4, #1
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d863      	bhi.n	800e670 <_dtoa_r+0x298>
 800e5a8:	e8df f003 	tbb	[pc, r3]
 800e5ac:	2b375452 	.word	0x2b375452
 800e5b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e5b4:	441e      	add	r6, r3
 800e5b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e5ba:	2b20      	cmp	r3, #32
 800e5bc:	bfc1      	itttt	gt
 800e5be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e5c2:	409f      	lslgt	r7, r3
 800e5c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e5c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e5cc:	bfd6      	itet	le
 800e5ce:	f1c3 0320 	rsble	r3, r3, #32
 800e5d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e5d6:	fa04 f003 	lslle.w	r0, r4, r3
 800e5da:	f7f1 ff93 	bl	8000504 <__aeabi_ui2d>
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e5e4:	3e01      	subs	r6, #1
 800e5e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e5e8:	e776      	b.n	800e4d8 <_dtoa_r+0x100>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e7b7      	b.n	800e55e <_dtoa_r+0x186>
 800e5ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800e5f0:	e7b6      	b.n	800e560 <_dtoa_r+0x188>
 800e5f2:	9b00      	ldr	r3, [sp, #0]
 800e5f4:	1bdb      	subs	r3, r3, r7
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	427b      	negs	r3, r7
 800e5fa:	9308      	str	r3, [sp, #32]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800e600:	e7c3      	b.n	800e58a <_dtoa_r+0x1b2>
 800e602:	2301      	movs	r3, #1
 800e604:	9309      	str	r3, [sp, #36]	@ 0x24
 800e606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e608:	eb07 0b03 	add.w	fp, r7, r3
 800e60c:	f10b 0301 	add.w	r3, fp, #1
 800e610:	2b01      	cmp	r3, #1
 800e612:	9303      	str	r3, [sp, #12]
 800e614:	bfb8      	it	lt
 800e616:	2301      	movlt	r3, #1
 800e618:	e006      	b.n	800e628 <_dtoa_r+0x250>
 800e61a:	2301      	movs	r3, #1
 800e61c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e61e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e620:	2b00      	cmp	r3, #0
 800e622:	dd28      	ble.n	800e676 <_dtoa_r+0x29e>
 800e624:	469b      	mov	fp, r3
 800e626:	9303      	str	r3, [sp, #12]
 800e628:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e62c:	2100      	movs	r1, #0
 800e62e:	2204      	movs	r2, #4
 800e630:	f102 0514 	add.w	r5, r2, #20
 800e634:	429d      	cmp	r5, r3
 800e636:	d926      	bls.n	800e686 <_dtoa_r+0x2ae>
 800e638:	6041      	str	r1, [r0, #4]
 800e63a:	4648      	mov	r0, r9
 800e63c:	f000 fce6 	bl	800f00c <_Balloc>
 800e640:	4682      	mov	sl, r0
 800e642:	2800      	cmp	r0, #0
 800e644:	d142      	bne.n	800e6cc <_dtoa_r+0x2f4>
 800e646:	4b1e      	ldr	r3, [pc, #120]	@ (800e6c0 <_dtoa_r+0x2e8>)
 800e648:	4602      	mov	r2, r0
 800e64a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e64e:	e6da      	b.n	800e406 <_dtoa_r+0x2e>
 800e650:	2300      	movs	r3, #0
 800e652:	e7e3      	b.n	800e61c <_dtoa_r+0x244>
 800e654:	2300      	movs	r3, #0
 800e656:	e7d5      	b.n	800e604 <_dtoa_r+0x22c>
 800e658:	2401      	movs	r4, #1
 800e65a:	2300      	movs	r3, #0
 800e65c:	9307      	str	r3, [sp, #28]
 800e65e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e660:	f04f 3bff 	mov.w	fp, #4294967295
 800e664:	2200      	movs	r2, #0
 800e666:	f8cd b00c 	str.w	fp, [sp, #12]
 800e66a:	2312      	movs	r3, #18
 800e66c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e66e:	e7db      	b.n	800e628 <_dtoa_r+0x250>
 800e670:	2301      	movs	r3, #1
 800e672:	9309      	str	r3, [sp, #36]	@ 0x24
 800e674:	e7f4      	b.n	800e660 <_dtoa_r+0x288>
 800e676:	f04f 0b01 	mov.w	fp, #1
 800e67a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e67e:	465b      	mov	r3, fp
 800e680:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e684:	e7d0      	b.n	800e628 <_dtoa_r+0x250>
 800e686:	3101      	adds	r1, #1
 800e688:	0052      	lsls	r2, r2, #1
 800e68a:	e7d1      	b.n	800e630 <_dtoa_r+0x258>
 800e68c:	f3af 8000 	nop.w
 800e690:	636f4361 	.word	0x636f4361
 800e694:	3fd287a7 	.word	0x3fd287a7
 800e698:	8b60c8b3 	.word	0x8b60c8b3
 800e69c:	3fc68a28 	.word	0x3fc68a28
 800e6a0:	509f79fb 	.word	0x509f79fb
 800e6a4:	3fd34413 	.word	0x3fd34413
 800e6a8:	08010a61 	.word	0x08010a61
 800e6ac:	08010a78 	.word	0x08010a78
 800e6b0:	7ff00000 	.word	0x7ff00000
 800e6b4:	08010a31 	.word	0x08010a31
 800e6b8:	3ff80000 	.word	0x3ff80000
 800e6bc:	08010bc8 	.word	0x08010bc8
 800e6c0:	08010ad0 	.word	0x08010ad0
 800e6c4:	08010a5d 	.word	0x08010a5d
 800e6c8:	08010a30 	.word	0x08010a30
 800e6cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e6d0:	6018      	str	r0, [r3, #0]
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	2b0e      	cmp	r3, #14
 800e6d6:	f200 80a1 	bhi.w	800e81c <_dtoa_r+0x444>
 800e6da:	2c00      	cmp	r4, #0
 800e6dc:	f000 809e 	beq.w	800e81c <_dtoa_r+0x444>
 800e6e0:	2f00      	cmp	r7, #0
 800e6e2:	dd33      	ble.n	800e74c <_dtoa_r+0x374>
 800e6e4:	4b9c      	ldr	r3, [pc, #624]	@ (800e958 <_dtoa_r+0x580>)
 800e6e6:	f007 020f 	and.w	r2, r7, #15
 800e6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6ee:	ed93 7b00 	vldr	d7, [r3]
 800e6f2:	05f8      	lsls	r0, r7, #23
 800e6f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e6f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e6fc:	d516      	bpl.n	800e72c <_dtoa_r+0x354>
 800e6fe:	4b97      	ldr	r3, [pc, #604]	@ (800e95c <_dtoa_r+0x584>)
 800e700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e708:	f7f2 f8a0 	bl	800084c <__aeabi_ddiv>
 800e70c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e710:	f004 040f 	and.w	r4, r4, #15
 800e714:	2603      	movs	r6, #3
 800e716:	4d91      	ldr	r5, [pc, #580]	@ (800e95c <_dtoa_r+0x584>)
 800e718:	b954      	cbnz	r4, 800e730 <_dtoa_r+0x358>
 800e71a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e71e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e722:	f7f2 f893 	bl	800084c <__aeabi_ddiv>
 800e726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e72a:	e028      	b.n	800e77e <_dtoa_r+0x3a6>
 800e72c:	2602      	movs	r6, #2
 800e72e:	e7f2      	b.n	800e716 <_dtoa_r+0x33e>
 800e730:	07e1      	lsls	r1, r4, #31
 800e732:	d508      	bpl.n	800e746 <_dtoa_r+0x36e>
 800e734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e73c:	f7f1 ff5c 	bl	80005f8 <__aeabi_dmul>
 800e740:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e744:	3601      	adds	r6, #1
 800e746:	1064      	asrs	r4, r4, #1
 800e748:	3508      	adds	r5, #8
 800e74a:	e7e5      	b.n	800e718 <_dtoa_r+0x340>
 800e74c:	f000 80af 	beq.w	800e8ae <_dtoa_r+0x4d6>
 800e750:	427c      	negs	r4, r7
 800e752:	4b81      	ldr	r3, [pc, #516]	@ (800e958 <_dtoa_r+0x580>)
 800e754:	4d81      	ldr	r5, [pc, #516]	@ (800e95c <_dtoa_r+0x584>)
 800e756:	f004 020f 	and.w	r2, r4, #15
 800e75a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e766:	f7f1 ff47 	bl	80005f8 <__aeabi_dmul>
 800e76a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e76e:	1124      	asrs	r4, r4, #4
 800e770:	2300      	movs	r3, #0
 800e772:	2602      	movs	r6, #2
 800e774:	2c00      	cmp	r4, #0
 800e776:	f040 808f 	bne.w	800e898 <_dtoa_r+0x4c0>
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1d3      	bne.n	800e726 <_dtoa_r+0x34e>
 800e77e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e780:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 8094 	beq.w	800e8b2 <_dtoa_r+0x4da>
 800e78a:	4b75      	ldr	r3, [pc, #468]	@ (800e960 <_dtoa_r+0x588>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	4620      	mov	r0, r4
 800e790:	4629      	mov	r1, r5
 800e792:	f7f2 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800e796:	2800      	cmp	r0, #0
 800e798:	f000 808b 	beq.w	800e8b2 <_dtoa_r+0x4da>
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f000 8087 	beq.w	800e8b2 <_dtoa_r+0x4da>
 800e7a4:	f1bb 0f00 	cmp.w	fp, #0
 800e7a8:	dd34      	ble.n	800e814 <_dtoa_r+0x43c>
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4b6d      	ldr	r3, [pc, #436]	@ (800e964 <_dtoa_r+0x58c>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f1 ff21 	bl	80005f8 <__aeabi_dmul>
 800e7b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800e7be:	3601      	adds	r6, #1
 800e7c0:	465c      	mov	r4, fp
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f7f1 feae 	bl	8000524 <__aeabi_i2d>
 800e7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7cc:	f7f1 ff14 	bl	80005f8 <__aeabi_dmul>
 800e7d0:	4b65      	ldr	r3, [pc, #404]	@ (800e968 <_dtoa_r+0x590>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f7f1 fd5a 	bl	800028c <__adddf3>
 800e7d8:	4605      	mov	r5, r0
 800e7da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e7de:	2c00      	cmp	r4, #0
 800e7e0:	d16a      	bne.n	800e8b8 <_dtoa_r+0x4e0>
 800e7e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7e6:	4b61      	ldr	r3, [pc, #388]	@ (800e96c <_dtoa_r+0x594>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f7f1 fd4d 	bl	8000288 <__aeabi_dsub>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7f6:	462a      	mov	r2, r5
 800e7f8:	4633      	mov	r3, r6
 800e7fa:	f7f2 f98d 	bl	8000b18 <__aeabi_dcmpgt>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f040 8298 	bne.w	800ed34 <_dtoa_r+0x95c>
 800e804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e808:	462a      	mov	r2, r5
 800e80a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e80e:	f7f2 f965 	bl	8000adc <__aeabi_dcmplt>
 800e812:	bb38      	cbnz	r0, 800e864 <_dtoa_r+0x48c>
 800e814:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e81c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f2c0 8157 	blt.w	800ead2 <_dtoa_r+0x6fa>
 800e824:	2f0e      	cmp	r7, #14
 800e826:	f300 8154 	bgt.w	800ead2 <_dtoa_r+0x6fa>
 800e82a:	4b4b      	ldr	r3, [pc, #300]	@ (800e958 <_dtoa_r+0x580>)
 800e82c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e830:	ed93 7b00 	vldr	d7, [r3]
 800e834:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e836:	2b00      	cmp	r3, #0
 800e838:	ed8d 7b00 	vstr	d7, [sp]
 800e83c:	f280 80e5 	bge.w	800ea0a <_dtoa_r+0x632>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	f300 80e1 	bgt.w	800ea0a <_dtoa_r+0x632>
 800e848:	d10c      	bne.n	800e864 <_dtoa_r+0x48c>
 800e84a:	4b48      	ldr	r3, [pc, #288]	@ (800e96c <_dtoa_r+0x594>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	ec51 0b17 	vmov	r0, r1, d7
 800e852:	f7f1 fed1 	bl	80005f8 <__aeabi_dmul>
 800e856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e85a:	f7f2 f953 	bl	8000b04 <__aeabi_dcmpge>
 800e85e:	2800      	cmp	r0, #0
 800e860:	f000 8266 	beq.w	800ed30 <_dtoa_r+0x958>
 800e864:	2400      	movs	r4, #0
 800e866:	4625      	mov	r5, r4
 800e868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e86a:	4656      	mov	r6, sl
 800e86c:	ea6f 0803 	mvn.w	r8, r3
 800e870:	2700      	movs	r7, #0
 800e872:	4621      	mov	r1, r4
 800e874:	4648      	mov	r0, r9
 800e876:	f000 fc09 	bl	800f08c <_Bfree>
 800e87a:	2d00      	cmp	r5, #0
 800e87c:	f000 80bd 	beq.w	800e9fa <_dtoa_r+0x622>
 800e880:	b12f      	cbz	r7, 800e88e <_dtoa_r+0x4b6>
 800e882:	42af      	cmp	r7, r5
 800e884:	d003      	beq.n	800e88e <_dtoa_r+0x4b6>
 800e886:	4639      	mov	r1, r7
 800e888:	4648      	mov	r0, r9
 800e88a:	f000 fbff 	bl	800f08c <_Bfree>
 800e88e:	4629      	mov	r1, r5
 800e890:	4648      	mov	r0, r9
 800e892:	f000 fbfb 	bl	800f08c <_Bfree>
 800e896:	e0b0      	b.n	800e9fa <_dtoa_r+0x622>
 800e898:	07e2      	lsls	r2, r4, #31
 800e89a:	d505      	bpl.n	800e8a8 <_dtoa_r+0x4d0>
 800e89c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8a0:	f7f1 feaa 	bl	80005f8 <__aeabi_dmul>
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	1064      	asrs	r4, r4, #1
 800e8aa:	3508      	adds	r5, #8
 800e8ac:	e762      	b.n	800e774 <_dtoa_r+0x39c>
 800e8ae:	2602      	movs	r6, #2
 800e8b0:	e765      	b.n	800e77e <_dtoa_r+0x3a6>
 800e8b2:	9c03      	ldr	r4, [sp, #12]
 800e8b4:	46b8      	mov	r8, r7
 800e8b6:	e784      	b.n	800e7c2 <_dtoa_r+0x3ea>
 800e8b8:	4b27      	ldr	r3, [pc, #156]	@ (800e958 <_dtoa_r+0x580>)
 800e8ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e8c4:	4454      	add	r4, sl
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	d054      	beq.n	800e974 <_dtoa_r+0x59c>
 800e8ca:	4929      	ldr	r1, [pc, #164]	@ (800e970 <_dtoa_r+0x598>)
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f7f1 ffbd 	bl	800084c <__aeabi_ddiv>
 800e8d2:	4633      	mov	r3, r6
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	f7f1 fcd7 	bl	8000288 <__aeabi_dsub>
 800e8da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e8de:	4656      	mov	r6, sl
 800e8e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8e4:	f7f2 f938 	bl	8000b58 <__aeabi_d2iz>
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	f7f1 fe1b 	bl	8000524 <__aeabi_i2d>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8f6:	f7f1 fcc7 	bl	8000288 <__aeabi_dsub>
 800e8fa:	3530      	adds	r5, #48	@ 0x30
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	460b      	mov	r3, r1
 800e900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e904:	f806 5b01 	strb.w	r5, [r6], #1
 800e908:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e90c:	f7f2 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800e910:	2800      	cmp	r0, #0
 800e912:	d172      	bne.n	800e9fa <_dtoa_r+0x622>
 800e914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e918:	4911      	ldr	r1, [pc, #68]	@ (800e960 <_dtoa_r+0x588>)
 800e91a:	2000      	movs	r0, #0
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e924:	f7f2 f8da 	bl	8000adc <__aeabi_dcmplt>
 800e928:	2800      	cmp	r0, #0
 800e92a:	f040 80b4 	bne.w	800ea96 <_dtoa_r+0x6be>
 800e92e:	42a6      	cmp	r6, r4
 800e930:	f43f af70 	beq.w	800e814 <_dtoa_r+0x43c>
 800e934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e938:	4b0a      	ldr	r3, [pc, #40]	@ (800e964 <_dtoa_r+0x58c>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	f7f1 fe5c 	bl	80005f8 <__aeabi_dmul>
 800e940:	4b08      	ldr	r3, [pc, #32]	@ (800e964 <_dtoa_r+0x58c>)
 800e942:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e946:	2200      	movs	r2, #0
 800e948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e94c:	f7f1 fe54 	bl	80005f8 <__aeabi_dmul>
 800e950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e954:	e7c4      	b.n	800e8e0 <_dtoa_r+0x508>
 800e956:	bf00      	nop
 800e958:	08010bc8 	.word	0x08010bc8
 800e95c:	08010ba0 	.word	0x08010ba0
 800e960:	3ff00000 	.word	0x3ff00000
 800e964:	40240000 	.word	0x40240000
 800e968:	401c0000 	.word	0x401c0000
 800e96c:	40140000 	.word	0x40140000
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	f7f1 fe3e 	bl	80005f8 <__aeabi_dmul>
 800e97c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e980:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e982:	4656      	mov	r6, sl
 800e984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e988:	f7f2 f8e6 	bl	8000b58 <__aeabi_d2iz>
 800e98c:	4605      	mov	r5, r0
 800e98e:	f7f1 fdc9 	bl	8000524 <__aeabi_i2d>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e99a:	f7f1 fc75 	bl	8000288 <__aeabi_dsub>
 800e99e:	3530      	adds	r5, #48	@ 0x30
 800e9a0:	f806 5b01 	strb.w	r5, [r6], #1
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	42a6      	cmp	r6, r4
 800e9aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9ae:	f04f 0200 	mov.w	r2, #0
 800e9b2:	d124      	bne.n	800e9fe <_dtoa_r+0x626>
 800e9b4:	4baf      	ldr	r3, [pc, #700]	@ (800ec74 <_dtoa_r+0x89c>)
 800e9b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e9ba:	f7f1 fc67 	bl	800028c <__adddf3>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9c6:	f7f2 f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d163      	bne.n	800ea96 <_dtoa_r+0x6be>
 800e9ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e9d2:	49a8      	ldr	r1, [pc, #672]	@ (800ec74 <_dtoa_r+0x89c>)
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	f7f1 fc57 	bl	8000288 <__aeabi_dsub>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	460b      	mov	r3, r1
 800e9de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9e2:	f7f2 f87b 	bl	8000adc <__aeabi_dcmplt>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f af14 	beq.w	800e814 <_dtoa_r+0x43c>
 800e9ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e9ee:	1e73      	subs	r3, r6, #1
 800e9f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e9f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e9f6:	2b30      	cmp	r3, #48	@ 0x30
 800e9f8:	d0f8      	beq.n	800e9ec <_dtoa_r+0x614>
 800e9fa:	4647      	mov	r7, r8
 800e9fc:	e03b      	b.n	800ea76 <_dtoa_r+0x69e>
 800e9fe:	4b9e      	ldr	r3, [pc, #632]	@ (800ec78 <_dtoa_r+0x8a0>)
 800ea00:	f7f1 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ea04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea08:	e7bc      	b.n	800e984 <_dtoa_r+0x5ac>
 800ea0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ea0e:	4656      	mov	r6, sl
 800ea10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea14:	4620      	mov	r0, r4
 800ea16:	4629      	mov	r1, r5
 800ea18:	f7f1 ff18 	bl	800084c <__aeabi_ddiv>
 800ea1c:	f7f2 f89c 	bl	8000b58 <__aeabi_d2iz>
 800ea20:	4680      	mov	r8, r0
 800ea22:	f7f1 fd7f 	bl	8000524 <__aeabi_i2d>
 800ea26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea2a:	f7f1 fde5 	bl	80005f8 <__aeabi_dmul>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4620      	mov	r0, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea3a:	f7f1 fc25 	bl	8000288 <__aeabi_dsub>
 800ea3e:	f806 4b01 	strb.w	r4, [r6], #1
 800ea42:	9d03      	ldr	r5, [sp, #12]
 800ea44:	eba6 040a 	sub.w	r4, r6, sl
 800ea48:	42a5      	cmp	r5, r4
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	d133      	bne.n	800eab8 <_dtoa_r+0x6e0>
 800ea50:	f7f1 fc1c 	bl	800028c <__adddf3>
 800ea54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea58:	4604      	mov	r4, r0
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	f7f2 f85c 	bl	8000b18 <__aeabi_dcmpgt>
 800ea60:	b9c0      	cbnz	r0, 800ea94 <_dtoa_r+0x6bc>
 800ea62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea66:	4620      	mov	r0, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f7f2 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea6e:	b110      	cbz	r0, 800ea76 <_dtoa_r+0x69e>
 800ea70:	f018 0f01 	tst.w	r8, #1
 800ea74:	d10e      	bne.n	800ea94 <_dtoa_r+0x6bc>
 800ea76:	9902      	ldr	r1, [sp, #8]
 800ea78:	4648      	mov	r0, r9
 800ea7a:	f000 fb07 	bl	800f08c <_Bfree>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	7033      	strb	r3, [r6, #0]
 800ea82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea84:	3701      	adds	r7, #1
 800ea86:	601f      	str	r7, [r3, #0]
 800ea88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 824b 	beq.w	800ef26 <_dtoa_r+0xb4e>
 800ea90:	601e      	str	r6, [r3, #0]
 800ea92:	e248      	b.n	800ef26 <_dtoa_r+0xb4e>
 800ea94:	46b8      	mov	r8, r7
 800ea96:	4633      	mov	r3, r6
 800ea98:	461e      	mov	r6, r3
 800ea9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea9e:	2a39      	cmp	r2, #57	@ 0x39
 800eaa0:	d106      	bne.n	800eab0 <_dtoa_r+0x6d8>
 800eaa2:	459a      	cmp	sl, r3
 800eaa4:	d1f8      	bne.n	800ea98 <_dtoa_r+0x6c0>
 800eaa6:	2230      	movs	r2, #48	@ 0x30
 800eaa8:	f108 0801 	add.w	r8, r8, #1
 800eaac:	f88a 2000 	strb.w	r2, [sl]
 800eab0:	781a      	ldrb	r2, [r3, #0]
 800eab2:	3201      	adds	r2, #1
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	e7a0      	b.n	800e9fa <_dtoa_r+0x622>
 800eab8:	4b6f      	ldr	r3, [pc, #444]	@ (800ec78 <_dtoa_r+0x8a0>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	f7f1 fd9c 	bl	80005f8 <__aeabi_dmul>
 800eac0:	2200      	movs	r2, #0
 800eac2:	2300      	movs	r3, #0
 800eac4:	4604      	mov	r4, r0
 800eac6:	460d      	mov	r5, r1
 800eac8:	f7f1 fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d09f      	beq.n	800ea10 <_dtoa_r+0x638>
 800ead0:	e7d1      	b.n	800ea76 <_dtoa_r+0x69e>
 800ead2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ead4:	2a00      	cmp	r2, #0
 800ead6:	f000 80ea 	beq.w	800ecae <_dtoa_r+0x8d6>
 800eada:	9a07      	ldr	r2, [sp, #28]
 800eadc:	2a01      	cmp	r2, #1
 800eade:	f300 80cd 	bgt.w	800ec7c <_dtoa_r+0x8a4>
 800eae2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eae4:	2a00      	cmp	r2, #0
 800eae6:	f000 80c1 	beq.w	800ec6c <_dtoa_r+0x894>
 800eaea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eaee:	9c08      	ldr	r4, [sp, #32]
 800eaf0:	9e00      	ldr	r6, [sp, #0]
 800eaf2:	9a00      	ldr	r2, [sp, #0]
 800eaf4:	441a      	add	r2, r3
 800eaf6:	9200      	str	r2, [sp, #0]
 800eaf8:	9a06      	ldr	r2, [sp, #24]
 800eafa:	2101      	movs	r1, #1
 800eafc:	441a      	add	r2, r3
 800eafe:	4648      	mov	r0, r9
 800eb00:	9206      	str	r2, [sp, #24]
 800eb02:	f000 fb77 	bl	800f1f4 <__i2b>
 800eb06:	4605      	mov	r5, r0
 800eb08:	b166      	cbz	r6, 800eb24 <_dtoa_r+0x74c>
 800eb0a:	9b06      	ldr	r3, [sp, #24]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dd09      	ble.n	800eb24 <_dtoa_r+0x74c>
 800eb10:	42b3      	cmp	r3, r6
 800eb12:	9a00      	ldr	r2, [sp, #0]
 800eb14:	bfa8      	it	ge
 800eb16:	4633      	movge	r3, r6
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	9200      	str	r2, [sp, #0]
 800eb1c:	9a06      	ldr	r2, [sp, #24]
 800eb1e:	1af6      	subs	r6, r6, r3
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	9306      	str	r3, [sp, #24]
 800eb24:	9b08      	ldr	r3, [sp, #32]
 800eb26:	b30b      	cbz	r3, 800eb6c <_dtoa_r+0x794>
 800eb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	f000 80c6 	beq.w	800ecbc <_dtoa_r+0x8e4>
 800eb30:	2c00      	cmp	r4, #0
 800eb32:	f000 80c0 	beq.w	800ecb6 <_dtoa_r+0x8de>
 800eb36:	4629      	mov	r1, r5
 800eb38:	4622      	mov	r2, r4
 800eb3a:	4648      	mov	r0, r9
 800eb3c:	f000 fc12 	bl	800f364 <__pow5mult>
 800eb40:	9a02      	ldr	r2, [sp, #8]
 800eb42:	4601      	mov	r1, r0
 800eb44:	4605      	mov	r5, r0
 800eb46:	4648      	mov	r0, r9
 800eb48:	f000 fb6a 	bl	800f220 <__multiply>
 800eb4c:	9902      	ldr	r1, [sp, #8]
 800eb4e:	4680      	mov	r8, r0
 800eb50:	4648      	mov	r0, r9
 800eb52:	f000 fa9b 	bl	800f08c <_Bfree>
 800eb56:	9b08      	ldr	r3, [sp, #32]
 800eb58:	1b1b      	subs	r3, r3, r4
 800eb5a:	9308      	str	r3, [sp, #32]
 800eb5c:	f000 80b1 	beq.w	800ecc2 <_dtoa_r+0x8ea>
 800eb60:	9a08      	ldr	r2, [sp, #32]
 800eb62:	4641      	mov	r1, r8
 800eb64:	4648      	mov	r0, r9
 800eb66:	f000 fbfd 	bl	800f364 <__pow5mult>
 800eb6a:	9002      	str	r0, [sp, #8]
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	4648      	mov	r0, r9
 800eb70:	f000 fb40 	bl	800f1f4 <__i2b>
 800eb74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb76:	4604      	mov	r4, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 81d8 	beq.w	800ef2e <_dtoa_r+0xb56>
 800eb7e:	461a      	mov	r2, r3
 800eb80:	4601      	mov	r1, r0
 800eb82:	4648      	mov	r0, r9
 800eb84:	f000 fbee 	bl	800f364 <__pow5mult>
 800eb88:	9b07      	ldr	r3, [sp, #28]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	f300 809f 	bgt.w	800ecd0 <_dtoa_r+0x8f8>
 800eb92:	9b04      	ldr	r3, [sp, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f040 8097 	bne.w	800ecc8 <_dtoa_r+0x8f0>
 800eb9a:	9b05      	ldr	r3, [sp, #20]
 800eb9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f040 8093 	bne.w	800eccc <_dtoa_r+0x8f4>
 800eba6:	9b05      	ldr	r3, [sp, #20]
 800eba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebac:	0d1b      	lsrs	r3, r3, #20
 800ebae:	051b      	lsls	r3, r3, #20
 800ebb0:	b133      	cbz	r3, 800ebc0 <_dtoa_r+0x7e8>
 800ebb2:	9b00      	ldr	r3, [sp, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	9b06      	ldr	r3, [sp, #24]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	9306      	str	r3, [sp, #24]
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	9308      	str	r3, [sp, #32]
 800ebc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f000 81b8 	beq.w	800ef3a <_dtoa_r+0xb62>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebd0:	6918      	ldr	r0, [r3, #16]
 800ebd2:	f000 fac3 	bl	800f15c <__hi0bits>
 800ebd6:	f1c0 0020 	rsb	r0, r0, #32
 800ebda:	9b06      	ldr	r3, [sp, #24]
 800ebdc:	4418      	add	r0, r3
 800ebde:	f010 001f 	ands.w	r0, r0, #31
 800ebe2:	f000 8082 	beq.w	800ecea <_dtoa_r+0x912>
 800ebe6:	f1c0 0320 	rsb	r3, r0, #32
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	dd73      	ble.n	800ecd6 <_dtoa_r+0x8fe>
 800ebee:	9b00      	ldr	r3, [sp, #0]
 800ebf0:	f1c0 001c 	rsb	r0, r0, #28
 800ebf4:	4403      	add	r3, r0
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	9b06      	ldr	r3, [sp, #24]
 800ebfa:	4403      	add	r3, r0
 800ebfc:	4406      	add	r6, r0
 800ebfe:	9306      	str	r3, [sp, #24]
 800ec00:	9b00      	ldr	r3, [sp, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dd05      	ble.n	800ec12 <_dtoa_r+0x83a>
 800ec06:	9902      	ldr	r1, [sp, #8]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	4648      	mov	r0, r9
 800ec0c:	f000 fc04 	bl	800f418 <__lshift>
 800ec10:	9002      	str	r0, [sp, #8]
 800ec12:	9b06      	ldr	r3, [sp, #24]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	dd05      	ble.n	800ec24 <_dtoa_r+0x84c>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4648      	mov	r0, r9
 800ec1e:	f000 fbfb 	bl	800f418 <__lshift>
 800ec22:	4604      	mov	r4, r0
 800ec24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d061      	beq.n	800ecee <_dtoa_r+0x916>
 800ec2a:	9802      	ldr	r0, [sp, #8]
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	f000 fc5f 	bl	800f4f0 <__mcmp>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	da5b      	bge.n	800ecee <_dtoa_r+0x916>
 800ec36:	2300      	movs	r3, #0
 800ec38:	9902      	ldr	r1, [sp, #8]
 800ec3a:	220a      	movs	r2, #10
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	f000 fa47 	bl	800f0d0 <__multadd>
 800ec42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec44:	9002      	str	r0, [sp, #8]
 800ec46:	f107 38ff 	add.w	r8, r7, #4294967295
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 8177 	beq.w	800ef3e <_dtoa_r+0xb66>
 800ec50:	4629      	mov	r1, r5
 800ec52:	2300      	movs	r3, #0
 800ec54:	220a      	movs	r2, #10
 800ec56:	4648      	mov	r0, r9
 800ec58:	f000 fa3a 	bl	800f0d0 <__multadd>
 800ec5c:	f1bb 0f00 	cmp.w	fp, #0
 800ec60:	4605      	mov	r5, r0
 800ec62:	dc6f      	bgt.n	800ed44 <_dtoa_r+0x96c>
 800ec64:	9b07      	ldr	r3, [sp, #28]
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	dc49      	bgt.n	800ecfe <_dtoa_r+0x926>
 800ec6a:	e06b      	b.n	800ed44 <_dtoa_r+0x96c>
 800ec6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ec72:	e73c      	b.n	800eaee <_dtoa_r+0x716>
 800ec74:	3fe00000 	.word	0x3fe00000
 800ec78:	40240000 	.word	0x40240000
 800ec7c:	9b03      	ldr	r3, [sp, #12]
 800ec7e:	1e5c      	subs	r4, r3, #1
 800ec80:	9b08      	ldr	r3, [sp, #32]
 800ec82:	42a3      	cmp	r3, r4
 800ec84:	db09      	blt.n	800ec9a <_dtoa_r+0x8c2>
 800ec86:	1b1c      	subs	r4, r3, r4
 800ec88:	9b03      	ldr	r3, [sp, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f6bf af30 	bge.w	800eaf0 <_dtoa_r+0x718>
 800ec90:	9b00      	ldr	r3, [sp, #0]
 800ec92:	9a03      	ldr	r2, [sp, #12]
 800ec94:	1a9e      	subs	r6, r3, r2
 800ec96:	2300      	movs	r3, #0
 800ec98:	e72b      	b.n	800eaf2 <_dtoa_r+0x71a>
 800ec9a:	9b08      	ldr	r3, [sp, #32]
 800ec9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec9e:	9408      	str	r4, [sp, #32]
 800eca0:	1ae3      	subs	r3, r4, r3
 800eca2:	441a      	add	r2, r3
 800eca4:	9e00      	ldr	r6, [sp, #0]
 800eca6:	9b03      	ldr	r3, [sp, #12]
 800eca8:	920d      	str	r2, [sp, #52]	@ 0x34
 800ecaa:	2400      	movs	r4, #0
 800ecac:	e721      	b.n	800eaf2 <_dtoa_r+0x71a>
 800ecae:	9c08      	ldr	r4, [sp, #32]
 800ecb0:	9e00      	ldr	r6, [sp, #0]
 800ecb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ecb4:	e728      	b.n	800eb08 <_dtoa_r+0x730>
 800ecb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ecba:	e751      	b.n	800eb60 <_dtoa_r+0x788>
 800ecbc:	9a08      	ldr	r2, [sp, #32]
 800ecbe:	9902      	ldr	r1, [sp, #8]
 800ecc0:	e750      	b.n	800eb64 <_dtoa_r+0x78c>
 800ecc2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ecc6:	e751      	b.n	800eb6c <_dtoa_r+0x794>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e779      	b.n	800ebc0 <_dtoa_r+0x7e8>
 800eccc:	9b04      	ldr	r3, [sp, #16]
 800ecce:	e777      	b.n	800ebc0 <_dtoa_r+0x7e8>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	9308      	str	r3, [sp, #32]
 800ecd4:	e779      	b.n	800ebca <_dtoa_r+0x7f2>
 800ecd6:	d093      	beq.n	800ec00 <_dtoa_r+0x828>
 800ecd8:	9a00      	ldr	r2, [sp, #0]
 800ecda:	331c      	adds	r3, #28
 800ecdc:	441a      	add	r2, r3
 800ecde:	9200      	str	r2, [sp, #0]
 800ece0:	9a06      	ldr	r2, [sp, #24]
 800ece2:	441a      	add	r2, r3
 800ece4:	441e      	add	r6, r3
 800ece6:	9206      	str	r2, [sp, #24]
 800ece8:	e78a      	b.n	800ec00 <_dtoa_r+0x828>
 800ecea:	4603      	mov	r3, r0
 800ecec:	e7f4      	b.n	800ecd8 <_dtoa_r+0x900>
 800ecee:	9b03      	ldr	r3, [sp, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	46b8      	mov	r8, r7
 800ecf4:	dc20      	bgt.n	800ed38 <_dtoa_r+0x960>
 800ecf6:	469b      	mov	fp, r3
 800ecf8:	9b07      	ldr	r3, [sp, #28]
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	dd1e      	ble.n	800ed3c <_dtoa_r+0x964>
 800ecfe:	f1bb 0f00 	cmp.w	fp, #0
 800ed02:	f47f adb1 	bne.w	800e868 <_dtoa_r+0x490>
 800ed06:	4621      	mov	r1, r4
 800ed08:	465b      	mov	r3, fp
 800ed0a:	2205      	movs	r2, #5
 800ed0c:	4648      	mov	r0, r9
 800ed0e:	f000 f9df 	bl	800f0d0 <__multadd>
 800ed12:	4601      	mov	r1, r0
 800ed14:	4604      	mov	r4, r0
 800ed16:	9802      	ldr	r0, [sp, #8]
 800ed18:	f000 fbea 	bl	800f4f0 <__mcmp>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	f77f ada3 	ble.w	800e868 <_dtoa_r+0x490>
 800ed22:	4656      	mov	r6, sl
 800ed24:	2331      	movs	r3, #49	@ 0x31
 800ed26:	f806 3b01 	strb.w	r3, [r6], #1
 800ed2a:	f108 0801 	add.w	r8, r8, #1
 800ed2e:	e59f      	b.n	800e870 <_dtoa_r+0x498>
 800ed30:	9c03      	ldr	r4, [sp, #12]
 800ed32:	46b8      	mov	r8, r7
 800ed34:	4625      	mov	r5, r4
 800ed36:	e7f4      	b.n	800ed22 <_dtoa_r+0x94a>
 800ed38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ed3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 8101 	beq.w	800ef46 <_dtoa_r+0xb6e>
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	dd05      	ble.n	800ed54 <_dtoa_r+0x97c>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	4648      	mov	r0, r9
 800ed4e:	f000 fb63 	bl	800f418 <__lshift>
 800ed52:	4605      	mov	r5, r0
 800ed54:	9b08      	ldr	r3, [sp, #32]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d05c      	beq.n	800ee14 <_dtoa_r+0xa3c>
 800ed5a:	6869      	ldr	r1, [r5, #4]
 800ed5c:	4648      	mov	r0, r9
 800ed5e:	f000 f955 	bl	800f00c <_Balloc>
 800ed62:	4606      	mov	r6, r0
 800ed64:	b928      	cbnz	r0, 800ed72 <_dtoa_r+0x99a>
 800ed66:	4b82      	ldr	r3, [pc, #520]	@ (800ef70 <_dtoa_r+0xb98>)
 800ed68:	4602      	mov	r2, r0
 800ed6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ed6e:	f7ff bb4a 	b.w	800e406 <_dtoa_r+0x2e>
 800ed72:	692a      	ldr	r2, [r5, #16]
 800ed74:	3202      	adds	r2, #2
 800ed76:	0092      	lsls	r2, r2, #2
 800ed78:	f105 010c 	add.w	r1, r5, #12
 800ed7c:	300c      	adds	r0, #12
 800ed7e:	f7ff fa92 	bl	800e2a6 <memcpy>
 800ed82:	2201      	movs	r2, #1
 800ed84:	4631      	mov	r1, r6
 800ed86:	4648      	mov	r0, r9
 800ed88:	f000 fb46 	bl	800f418 <__lshift>
 800ed8c:	f10a 0301 	add.w	r3, sl, #1
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	eb0a 030b 	add.w	r3, sl, fp
 800ed96:	9308      	str	r3, [sp, #32]
 800ed98:	9b04      	ldr	r3, [sp, #16]
 800ed9a:	f003 0301 	and.w	r3, r3, #1
 800ed9e:	462f      	mov	r7, r5
 800eda0:	9306      	str	r3, [sp, #24]
 800eda2:	4605      	mov	r5, r0
 800eda4:	9b00      	ldr	r3, [sp, #0]
 800eda6:	9802      	ldr	r0, [sp, #8]
 800eda8:	4621      	mov	r1, r4
 800edaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800edae:	f7ff fa88 	bl	800e2c2 <quorem>
 800edb2:	4603      	mov	r3, r0
 800edb4:	3330      	adds	r3, #48	@ 0x30
 800edb6:	9003      	str	r0, [sp, #12]
 800edb8:	4639      	mov	r1, r7
 800edba:	9802      	ldr	r0, [sp, #8]
 800edbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edbe:	f000 fb97 	bl	800f4f0 <__mcmp>
 800edc2:	462a      	mov	r2, r5
 800edc4:	9004      	str	r0, [sp, #16]
 800edc6:	4621      	mov	r1, r4
 800edc8:	4648      	mov	r0, r9
 800edca:	f000 fbad 	bl	800f528 <__mdiff>
 800edce:	68c2      	ldr	r2, [r0, #12]
 800edd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd2:	4606      	mov	r6, r0
 800edd4:	bb02      	cbnz	r2, 800ee18 <_dtoa_r+0xa40>
 800edd6:	4601      	mov	r1, r0
 800edd8:	9802      	ldr	r0, [sp, #8]
 800edda:	f000 fb89 	bl	800f4f0 <__mcmp>
 800edde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ede0:	4602      	mov	r2, r0
 800ede2:	4631      	mov	r1, r6
 800ede4:	4648      	mov	r0, r9
 800ede6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ede8:	9309      	str	r3, [sp, #36]	@ 0x24
 800edea:	f000 f94f 	bl	800f08c <_Bfree>
 800edee:	9b07      	ldr	r3, [sp, #28]
 800edf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800edf2:	9e00      	ldr	r6, [sp, #0]
 800edf4:	ea42 0103 	orr.w	r1, r2, r3
 800edf8:	9b06      	ldr	r3, [sp, #24]
 800edfa:	4319      	orrs	r1, r3
 800edfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfe:	d10d      	bne.n	800ee1c <_dtoa_r+0xa44>
 800ee00:	2b39      	cmp	r3, #57	@ 0x39
 800ee02:	d027      	beq.n	800ee54 <_dtoa_r+0xa7c>
 800ee04:	9a04      	ldr	r2, [sp, #16]
 800ee06:	2a00      	cmp	r2, #0
 800ee08:	dd01      	ble.n	800ee0e <_dtoa_r+0xa36>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	3331      	adds	r3, #49	@ 0x31
 800ee0e:	f88b 3000 	strb.w	r3, [fp]
 800ee12:	e52e      	b.n	800e872 <_dtoa_r+0x49a>
 800ee14:	4628      	mov	r0, r5
 800ee16:	e7b9      	b.n	800ed8c <_dtoa_r+0x9b4>
 800ee18:	2201      	movs	r2, #1
 800ee1a:	e7e2      	b.n	800ede2 <_dtoa_r+0xa0a>
 800ee1c:	9904      	ldr	r1, [sp, #16]
 800ee1e:	2900      	cmp	r1, #0
 800ee20:	db04      	blt.n	800ee2c <_dtoa_r+0xa54>
 800ee22:	9807      	ldr	r0, [sp, #28]
 800ee24:	4301      	orrs	r1, r0
 800ee26:	9806      	ldr	r0, [sp, #24]
 800ee28:	4301      	orrs	r1, r0
 800ee2a:	d120      	bne.n	800ee6e <_dtoa_r+0xa96>
 800ee2c:	2a00      	cmp	r2, #0
 800ee2e:	ddee      	ble.n	800ee0e <_dtoa_r+0xa36>
 800ee30:	9902      	ldr	r1, [sp, #8]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	2201      	movs	r2, #1
 800ee36:	4648      	mov	r0, r9
 800ee38:	f000 faee 	bl	800f418 <__lshift>
 800ee3c:	4621      	mov	r1, r4
 800ee3e:	9002      	str	r0, [sp, #8]
 800ee40:	f000 fb56 	bl	800f4f0 <__mcmp>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	9b00      	ldr	r3, [sp, #0]
 800ee48:	dc02      	bgt.n	800ee50 <_dtoa_r+0xa78>
 800ee4a:	d1e0      	bne.n	800ee0e <_dtoa_r+0xa36>
 800ee4c:	07da      	lsls	r2, r3, #31
 800ee4e:	d5de      	bpl.n	800ee0e <_dtoa_r+0xa36>
 800ee50:	2b39      	cmp	r3, #57	@ 0x39
 800ee52:	d1da      	bne.n	800ee0a <_dtoa_r+0xa32>
 800ee54:	2339      	movs	r3, #57	@ 0x39
 800ee56:	f88b 3000 	strb.w	r3, [fp]
 800ee5a:	4633      	mov	r3, r6
 800ee5c:	461e      	mov	r6, r3
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee64:	2a39      	cmp	r2, #57	@ 0x39
 800ee66:	d04e      	beq.n	800ef06 <_dtoa_r+0xb2e>
 800ee68:	3201      	adds	r2, #1
 800ee6a:	701a      	strb	r2, [r3, #0]
 800ee6c:	e501      	b.n	800e872 <_dtoa_r+0x49a>
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	dd03      	ble.n	800ee7a <_dtoa_r+0xaa2>
 800ee72:	2b39      	cmp	r3, #57	@ 0x39
 800ee74:	d0ee      	beq.n	800ee54 <_dtoa_r+0xa7c>
 800ee76:	3301      	adds	r3, #1
 800ee78:	e7c9      	b.n	800ee0e <_dtoa_r+0xa36>
 800ee7a:	9a00      	ldr	r2, [sp, #0]
 800ee7c:	9908      	ldr	r1, [sp, #32]
 800ee7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ee82:	428a      	cmp	r2, r1
 800ee84:	d028      	beq.n	800eed8 <_dtoa_r+0xb00>
 800ee86:	9902      	ldr	r1, [sp, #8]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	220a      	movs	r2, #10
 800ee8c:	4648      	mov	r0, r9
 800ee8e:	f000 f91f 	bl	800f0d0 <__multadd>
 800ee92:	42af      	cmp	r7, r5
 800ee94:	9002      	str	r0, [sp, #8]
 800ee96:	f04f 0300 	mov.w	r3, #0
 800ee9a:	f04f 020a 	mov.w	r2, #10
 800ee9e:	4639      	mov	r1, r7
 800eea0:	4648      	mov	r0, r9
 800eea2:	d107      	bne.n	800eeb4 <_dtoa_r+0xadc>
 800eea4:	f000 f914 	bl	800f0d0 <__multadd>
 800eea8:	4607      	mov	r7, r0
 800eeaa:	4605      	mov	r5, r0
 800eeac:	9b00      	ldr	r3, [sp, #0]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	e777      	b.n	800eda4 <_dtoa_r+0x9cc>
 800eeb4:	f000 f90c 	bl	800f0d0 <__multadd>
 800eeb8:	4629      	mov	r1, r5
 800eeba:	4607      	mov	r7, r0
 800eebc:	2300      	movs	r3, #0
 800eebe:	220a      	movs	r2, #10
 800eec0:	4648      	mov	r0, r9
 800eec2:	f000 f905 	bl	800f0d0 <__multadd>
 800eec6:	4605      	mov	r5, r0
 800eec8:	e7f0      	b.n	800eeac <_dtoa_r+0xad4>
 800eeca:	f1bb 0f00 	cmp.w	fp, #0
 800eece:	bfcc      	ite	gt
 800eed0:	465e      	movgt	r6, fp
 800eed2:	2601      	movle	r6, #1
 800eed4:	4456      	add	r6, sl
 800eed6:	2700      	movs	r7, #0
 800eed8:	9902      	ldr	r1, [sp, #8]
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	2201      	movs	r2, #1
 800eede:	4648      	mov	r0, r9
 800eee0:	f000 fa9a 	bl	800f418 <__lshift>
 800eee4:	4621      	mov	r1, r4
 800eee6:	9002      	str	r0, [sp, #8]
 800eee8:	f000 fb02 	bl	800f4f0 <__mcmp>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	dcb4      	bgt.n	800ee5a <_dtoa_r+0xa82>
 800eef0:	d102      	bne.n	800eef8 <_dtoa_r+0xb20>
 800eef2:	9b00      	ldr	r3, [sp, #0]
 800eef4:	07db      	lsls	r3, r3, #31
 800eef6:	d4b0      	bmi.n	800ee5a <_dtoa_r+0xa82>
 800eef8:	4633      	mov	r3, r6
 800eefa:	461e      	mov	r6, r3
 800eefc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef00:	2a30      	cmp	r2, #48	@ 0x30
 800ef02:	d0fa      	beq.n	800eefa <_dtoa_r+0xb22>
 800ef04:	e4b5      	b.n	800e872 <_dtoa_r+0x49a>
 800ef06:	459a      	cmp	sl, r3
 800ef08:	d1a8      	bne.n	800ee5c <_dtoa_r+0xa84>
 800ef0a:	2331      	movs	r3, #49	@ 0x31
 800ef0c:	f108 0801 	add.w	r8, r8, #1
 800ef10:	f88a 3000 	strb.w	r3, [sl]
 800ef14:	e4ad      	b.n	800e872 <_dtoa_r+0x49a>
 800ef16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ef74 <_dtoa_r+0xb9c>
 800ef1c:	b11b      	cbz	r3, 800ef26 <_dtoa_r+0xb4e>
 800ef1e:	f10a 0308 	add.w	r3, sl, #8
 800ef22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ef24:	6013      	str	r3, [r2, #0]
 800ef26:	4650      	mov	r0, sl
 800ef28:	b017      	add	sp, #92	@ 0x5c
 800ef2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2e:	9b07      	ldr	r3, [sp, #28]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	f77f ae2e 	ble.w	800eb92 <_dtoa_r+0x7ba>
 800ef36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef38:	9308      	str	r3, [sp, #32]
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	e64d      	b.n	800ebda <_dtoa_r+0x802>
 800ef3e:	f1bb 0f00 	cmp.w	fp, #0
 800ef42:	f77f aed9 	ble.w	800ecf8 <_dtoa_r+0x920>
 800ef46:	4656      	mov	r6, sl
 800ef48:	9802      	ldr	r0, [sp, #8]
 800ef4a:	4621      	mov	r1, r4
 800ef4c:	f7ff f9b9 	bl	800e2c2 <quorem>
 800ef50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ef54:	f806 3b01 	strb.w	r3, [r6], #1
 800ef58:	eba6 020a 	sub.w	r2, r6, sl
 800ef5c:	4593      	cmp	fp, r2
 800ef5e:	ddb4      	ble.n	800eeca <_dtoa_r+0xaf2>
 800ef60:	9902      	ldr	r1, [sp, #8]
 800ef62:	2300      	movs	r3, #0
 800ef64:	220a      	movs	r2, #10
 800ef66:	4648      	mov	r0, r9
 800ef68:	f000 f8b2 	bl	800f0d0 <__multadd>
 800ef6c:	9002      	str	r0, [sp, #8]
 800ef6e:	e7eb      	b.n	800ef48 <_dtoa_r+0xb70>
 800ef70:	08010ad0 	.word	0x08010ad0
 800ef74:	08010a54 	.word	0x08010a54

0800ef78 <_free_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	2900      	cmp	r1, #0
 800ef7e:	d041      	beq.n	800f004 <_free_r+0x8c>
 800ef80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef84:	1f0c      	subs	r4, r1, #4
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	bfb8      	it	lt
 800ef8a:	18e4      	addlt	r4, r4, r3
 800ef8c:	f7fe fa88 	bl	800d4a0 <__malloc_lock>
 800ef90:	4a1d      	ldr	r2, [pc, #116]	@ (800f008 <_free_r+0x90>)
 800ef92:	6813      	ldr	r3, [r2, #0]
 800ef94:	b933      	cbnz	r3, 800efa4 <_free_r+0x2c>
 800ef96:	6063      	str	r3, [r4, #4]
 800ef98:	6014      	str	r4, [r2, #0]
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efa0:	f7fe ba84 	b.w	800d4ac <__malloc_unlock>
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	d908      	bls.n	800efba <_free_r+0x42>
 800efa8:	6820      	ldr	r0, [r4, #0]
 800efaa:	1821      	adds	r1, r4, r0
 800efac:	428b      	cmp	r3, r1
 800efae:	bf01      	itttt	eq
 800efb0:	6819      	ldreq	r1, [r3, #0]
 800efb2:	685b      	ldreq	r3, [r3, #4]
 800efb4:	1809      	addeq	r1, r1, r0
 800efb6:	6021      	streq	r1, [r4, #0]
 800efb8:	e7ed      	b.n	800ef96 <_free_r+0x1e>
 800efba:	461a      	mov	r2, r3
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	b10b      	cbz	r3, 800efc4 <_free_r+0x4c>
 800efc0:	42a3      	cmp	r3, r4
 800efc2:	d9fa      	bls.n	800efba <_free_r+0x42>
 800efc4:	6811      	ldr	r1, [r2, #0]
 800efc6:	1850      	adds	r0, r2, r1
 800efc8:	42a0      	cmp	r0, r4
 800efca:	d10b      	bne.n	800efe4 <_free_r+0x6c>
 800efcc:	6820      	ldr	r0, [r4, #0]
 800efce:	4401      	add	r1, r0
 800efd0:	1850      	adds	r0, r2, r1
 800efd2:	4283      	cmp	r3, r0
 800efd4:	6011      	str	r1, [r2, #0]
 800efd6:	d1e0      	bne.n	800ef9a <_free_r+0x22>
 800efd8:	6818      	ldr	r0, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	6053      	str	r3, [r2, #4]
 800efde:	4408      	add	r0, r1
 800efe0:	6010      	str	r0, [r2, #0]
 800efe2:	e7da      	b.n	800ef9a <_free_r+0x22>
 800efe4:	d902      	bls.n	800efec <_free_r+0x74>
 800efe6:	230c      	movs	r3, #12
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	e7d6      	b.n	800ef9a <_free_r+0x22>
 800efec:	6820      	ldr	r0, [r4, #0]
 800efee:	1821      	adds	r1, r4, r0
 800eff0:	428b      	cmp	r3, r1
 800eff2:	bf04      	itt	eq
 800eff4:	6819      	ldreq	r1, [r3, #0]
 800eff6:	685b      	ldreq	r3, [r3, #4]
 800eff8:	6063      	str	r3, [r4, #4]
 800effa:	bf04      	itt	eq
 800effc:	1809      	addeq	r1, r1, r0
 800effe:	6021      	streq	r1, [r4, #0]
 800f000:	6054      	str	r4, [r2, #4]
 800f002:	e7ca      	b.n	800ef9a <_free_r+0x22>
 800f004:	bd38      	pop	{r3, r4, r5, pc}
 800f006:	bf00      	nop
 800f008:	20002444 	.word	0x20002444

0800f00c <_Balloc>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	69c6      	ldr	r6, [r0, #28]
 800f010:	4604      	mov	r4, r0
 800f012:	460d      	mov	r5, r1
 800f014:	b976      	cbnz	r6, 800f034 <_Balloc+0x28>
 800f016:	2010      	movs	r0, #16
 800f018:	f7fe f998 	bl	800d34c <malloc>
 800f01c:	4602      	mov	r2, r0
 800f01e:	61e0      	str	r0, [r4, #28]
 800f020:	b920      	cbnz	r0, 800f02c <_Balloc+0x20>
 800f022:	4b18      	ldr	r3, [pc, #96]	@ (800f084 <_Balloc+0x78>)
 800f024:	4818      	ldr	r0, [pc, #96]	@ (800f088 <_Balloc+0x7c>)
 800f026:	216b      	movs	r1, #107	@ 0x6b
 800f028:	f000 fe10 	bl	800fc4c <__assert_func>
 800f02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f030:	6006      	str	r6, [r0, #0]
 800f032:	60c6      	str	r6, [r0, #12]
 800f034:	69e6      	ldr	r6, [r4, #28]
 800f036:	68f3      	ldr	r3, [r6, #12]
 800f038:	b183      	cbz	r3, 800f05c <_Balloc+0x50>
 800f03a:	69e3      	ldr	r3, [r4, #28]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f042:	b9b8      	cbnz	r0, 800f074 <_Balloc+0x68>
 800f044:	2101      	movs	r1, #1
 800f046:	fa01 f605 	lsl.w	r6, r1, r5
 800f04a:	1d72      	adds	r2, r6, #5
 800f04c:	0092      	lsls	r2, r2, #2
 800f04e:	4620      	mov	r0, r4
 800f050:	f000 fe1a 	bl	800fc88 <_calloc_r>
 800f054:	b160      	cbz	r0, 800f070 <_Balloc+0x64>
 800f056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f05a:	e00e      	b.n	800f07a <_Balloc+0x6e>
 800f05c:	2221      	movs	r2, #33	@ 0x21
 800f05e:	2104      	movs	r1, #4
 800f060:	4620      	mov	r0, r4
 800f062:	f000 fe11 	bl	800fc88 <_calloc_r>
 800f066:	69e3      	ldr	r3, [r4, #28]
 800f068:	60f0      	str	r0, [r6, #12]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1e4      	bne.n	800f03a <_Balloc+0x2e>
 800f070:	2000      	movs	r0, #0
 800f072:	bd70      	pop	{r4, r5, r6, pc}
 800f074:	6802      	ldr	r2, [r0, #0]
 800f076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f07a:	2300      	movs	r3, #0
 800f07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f080:	e7f7      	b.n	800f072 <_Balloc+0x66>
 800f082:	bf00      	nop
 800f084:	08010a61 	.word	0x08010a61
 800f088:	08010ae1 	.word	0x08010ae1

0800f08c <_Bfree>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	69c6      	ldr	r6, [r0, #28]
 800f090:	4605      	mov	r5, r0
 800f092:	460c      	mov	r4, r1
 800f094:	b976      	cbnz	r6, 800f0b4 <_Bfree+0x28>
 800f096:	2010      	movs	r0, #16
 800f098:	f7fe f958 	bl	800d34c <malloc>
 800f09c:	4602      	mov	r2, r0
 800f09e:	61e8      	str	r0, [r5, #28]
 800f0a0:	b920      	cbnz	r0, 800f0ac <_Bfree+0x20>
 800f0a2:	4b09      	ldr	r3, [pc, #36]	@ (800f0c8 <_Bfree+0x3c>)
 800f0a4:	4809      	ldr	r0, [pc, #36]	@ (800f0cc <_Bfree+0x40>)
 800f0a6:	218f      	movs	r1, #143	@ 0x8f
 800f0a8:	f000 fdd0 	bl	800fc4c <__assert_func>
 800f0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0b0:	6006      	str	r6, [r0, #0]
 800f0b2:	60c6      	str	r6, [r0, #12]
 800f0b4:	b13c      	cbz	r4, 800f0c6 <_Bfree+0x3a>
 800f0b6:	69eb      	ldr	r3, [r5, #28]
 800f0b8:	6862      	ldr	r2, [r4, #4]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0c0:	6021      	str	r1, [r4, #0]
 800f0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}
 800f0c8:	08010a61 	.word	0x08010a61
 800f0cc:	08010ae1 	.word	0x08010ae1

0800f0d0 <__multadd>:
 800f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d4:	690d      	ldr	r5, [r1, #16]
 800f0d6:	4607      	mov	r7, r0
 800f0d8:	460c      	mov	r4, r1
 800f0da:	461e      	mov	r6, r3
 800f0dc:	f101 0c14 	add.w	ip, r1, #20
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f0e6:	b299      	uxth	r1, r3
 800f0e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f0ec:	0c1e      	lsrs	r6, r3, #16
 800f0ee:	0c0b      	lsrs	r3, r1, #16
 800f0f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f0f4:	b289      	uxth	r1, r1
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0fc:	4285      	cmp	r5, r0
 800f0fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f102:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f106:	dcec      	bgt.n	800f0e2 <__multadd+0x12>
 800f108:	b30e      	cbz	r6, 800f14e <__multadd+0x7e>
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	42ab      	cmp	r3, r5
 800f10e:	dc19      	bgt.n	800f144 <__multadd+0x74>
 800f110:	6861      	ldr	r1, [r4, #4]
 800f112:	4638      	mov	r0, r7
 800f114:	3101      	adds	r1, #1
 800f116:	f7ff ff79 	bl	800f00c <_Balloc>
 800f11a:	4680      	mov	r8, r0
 800f11c:	b928      	cbnz	r0, 800f12a <__multadd+0x5a>
 800f11e:	4602      	mov	r2, r0
 800f120:	4b0c      	ldr	r3, [pc, #48]	@ (800f154 <__multadd+0x84>)
 800f122:	480d      	ldr	r0, [pc, #52]	@ (800f158 <__multadd+0x88>)
 800f124:	21ba      	movs	r1, #186	@ 0xba
 800f126:	f000 fd91 	bl	800fc4c <__assert_func>
 800f12a:	6922      	ldr	r2, [r4, #16]
 800f12c:	3202      	adds	r2, #2
 800f12e:	f104 010c 	add.w	r1, r4, #12
 800f132:	0092      	lsls	r2, r2, #2
 800f134:	300c      	adds	r0, #12
 800f136:	f7ff f8b6 	bl	800e2a6 <memcpy>
 800f13a:	4621      	mov	r1, r4
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff ffa5 	bl	800f08c <_Bfree>
 800f142:	4644      	mov	r4, r8
 800f144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f148:	3501      	adds	r5, #1
 800f14a:	615e      	str	r6, [r3, #20]
 800f14c:	6125      	str	r5, [r4, #16]
 800f14e:	4620      	mov	r0, r4
 800f150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f154:	08010ad0 	.word	0x08010ad0
 800f158:	08010ae1 	.word	0x08010ae1

0800f15c <__hi0bits>:
 800f15c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f160:	4603      	mov	r3, r0
 800f162:	bf36      	itet	cc
 800f164:	0403      	lslcc	r3, r0, #16
 800f166:	2000      	movcs	r0, #0
 800f168:	2010      	movcc	r0, #16
 800f16a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f16e:	bf3c      	itt	cc
 800f170:	021b      	lslcc	r3, r3, #8
 800f172:	3008      	addcc	r0, #8
 800f174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f178:	bf3c      	itt	cc
 800f17a:	011b      	lslcc	r3, r3, #4
 800f17c:	3004      	addcc	r0, #4
 800f17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f182:	bf3c      	itt	cc
 800f184:	009b      	lslcc	r3, r3, #2
 800f186:	3002      	addcc	r0, #2
 800f188:	2b00      	cmp	r3, #0
 800f18a:	db05      	blt.n	800f198 <__hi0bits+0x3c>
 800f18c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f190:	f100 0001 	add.w	r0, r0, #1
 800f194:	bf08      	it	eq
 800f196:	2020      	moveq	r0, #32
 800f198:	4770      	bx	lr

0800f19a <__lo0bits>:
 800f19a:	6803      	ldr	r3, [r0, #0]
 800f19c:	4602      	mov	r2, r0
 800f19e:	f013 0007 	ands.w	r0, r3, #7
 800f1a2:	d00b      	beq.n	800f1bc <__lo0bits+0x22>
 800f1a4:	07d9      	lsls	r1, r3, #31
 800f1a6:	d421      	bmi.n	800f1ec <__lo0bits+0x52>
 800f1a8:	0798      	lsls	r0, r3, #30
 800f1aa:	bf49      	itett	mi
 800f1ac:	085b      	lsrmi	r3, r3, #1
 800f1ae:	089b      	lsrpl	r3, r3, #2
 800f1b0:	2001      	movmi	r0, #1
 800f1b2:	6013      	strmi	r3, [r2, #0]
 800f1b4:	bf5c      	itt	pl
 800f1b6:	6013      	strpl	r3, [r2, #0]
 800f1b8:	2002      	movpl	r0, #2
 800f1ba:	4770      	bx	lr
 800f1bc:	b299      	uxth	r1, r3
 800f1be:	b909      	cbnz	r1, 800f1c4 <__lo0bits+0x2a>
 800f1c0:	0c1b      	lsrs	r3, r3, #16
 800f1c2:	2010      	movs	r0, #16
 800f1c4:	b2d9      	uxtb	r1, r3
 800f1c6:	b909      	cbnz	r1, 800f1cc <__lo0bits+0x32>
 800f1c8:	3008      	adds	r0, #8
 800f1ca:	0a1b      	lsrs	r3, r3, #8
 800f1cc:	0719      	lsls	r1, r3, #28
 800f1ce:	bf04      	itt	eq
 800f1d0:	091b      	lsreq	r3, r3, #4
 800f1d2:	3004      	addeq	r0, #4
 800f1d4:	0799      	lsls	r1, r3, #30
 800f1d6:	bf04      	itt	eq
 800f1d8:	089b      	lsreq	r3, r3, #2
 800f1da:	3002      	addeq	r0, #2
 800f1dc:	07d9      	lsls	r1, r3, #31
 800f1de:	d403      	bmi.n	800f1e8 <__lo0bits+0x4e>
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	f100 0001 	add.w	r0, r0, #1
 800f1e6:	d003      	beq.n	800f1f0 <__lo0bits+0x56>
 800f1e8:	6013      	str	r3, [r2, #0]
 800f1ea:	4770      	bx	lr
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	4770      	bx	lr
 800f1f0:	2020      	movs	r0, #32
 800f1f2:	4770      	bx	lr

0800f1f4 <__i2b>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	2101      	movs	r1, #1
 800f1fa:	f7ff ff07 	bl	800f00c <_Balloc>
 800f1fe:	4602      	mov	r2, r0
 800f200:	b928      	cbnz	r0, 800f20e <__i2b+0x1a>
 800f202:	4b05      	ldr	r3, [pc, #20]	@ (800f218 <__i2b+0x24>)
 800f204:	4805      	ldr	r0, [pc, #20]	@ (800f21c <__i2b+0x28>)
 800f206:	f240 1145 	movw	r1, #325	@ 0x145
 800f20a:	f000 fd1f 	bl	800fc4c <__assert_func>
 800f20e:	2301      	movs	r3, #1
 800f210:	6144      	str	r4, [r0, #20]
 800f212:	6103      	str	r3, [r0, #16]
 800f214:	bd10      	pop	{r4, pc}
 800f216:	bf00      	nop
 800f218:	08010ad0 	.word	0x08010ad0
 800f21c:	08010ae1 	.word	0x08010ae1

0800f220 <__multiply>:
 800f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f224:	4617      	mov	r7, r2
 800f226:	690a      	ldr	r2, [r1, #16]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	bfa8      	it	ge
 800f22e:	463b      	movge	r3, r7
 800f230:	4689      	mov	r9, r1
 800f232:	bfa4      	itt	ge
 800f234:	460f      	movge	r7, r1
 800f236:	4699      	movge	r9, r3
 800f238:	693d      	ldr	r5, [r7, #16]
 800f23a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	eb05 060a 	add.w	r6, r5, sl
 800f246:	42b3      	cmp	r3, r6
 800f248:	b085      	sub	sp, #20
 800f24a:	bfb8      	it	lt
 800f24c:	3101      	addlt	r1, #1
 800f24e:	f7ff fedd 	bl	800f00c <_Balloc>
 800f252:	b930      	cbnz	r0, 800f262 <__multiply+0x42>
 800f254:	4602      	mov	r2, r0
 800f256:	4b41      	ldr	r3, [pc, #260]	@ (800f35c <__multiply+0x13c>)
 800f258:	4841      	ldr	r0, [pc, #260]	@ (800f360 <__multiply+0x140>)
 800f25a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f25e:	f000 fcf5 	bl	800fc4c <__assert_func>
 800f262:	f100 0414 	add.w	r4, r0, #20
 800f266:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f26a:	4623      	mov	r3, r4
 800f26c:	2200      	movs	r2, #0
 800f26e:	4573      	cmp	r3, lr
 800f270:	d320      	bcc.n	800f2b4 <__multiply+0x94>
 800f272:	f107 0814 	add.w	r8, r7, #20
 800f276:	f109 0114 	add.w	r1, r9, #20
 800f27a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f27e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f282:	9302      	str	r3, [sp, #8]
 800f284:	1beb      	subs	r3, r5, r7
 800f286:	3b15      	subs	r3, #21
 800f288:	f023 0303 	bic.w	r3, r3, #3
 800f28c:	3304      	adds	r3, #4
 800f28e:	3715      	adds	r7, #21
 800f290:	42bd      	cmp	r5, r7
 800f292:	bf38      	it	cc
 800f294:	2304      	movcc	r3, #4
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	9b02      	ldr	r3, [sp, #8]
 800f29a:	9103      	str	r1, [sp, #12]
 800f29c:	428b      	cmp	r3, r1
 800f29e:	d80c      	bhi.n	800f2ba <__multiply+0x9a>
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	dd03      	ble.n	800f2ac <__multiply+0x8c>
 800f2a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d055      	beq.n	800f358 <__multiply+0x138>
 800f2ac:	6106      	str	r6, [r0, #16]
 800f2ae:	b005      	add	sp, #20
 800f2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b4:	f843 2b04 	str.w	r2, [r3], #4
 800f2b8:	e7d9      	b.n	800f26e <__multiply+0x4e>
 800f2ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800f2be:	f1ba 0f00 	cmp.w	sl, #0
 800f2c2:	d01f      	beq.n	800f304 <__multiply+0xe4>
 800f2c4:	46c4      	mov	ip, r8
 800f2c6:	46a1      	mov	r9, r4
 800f2c8:	2700      	movs	r7, #0
 800f2ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f2ce:	f8d9 3000 	ldr.w	r3, [r9]
 800f2d2:	fa1f fb82 	uxth.w	fp, r2
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2dc:	443b      	add	r3, r7
 800f2de:	f8d9 7000 	ldr.w	r7, [r9]
 800f2e2:	0c12      	lsrs	r2, r2, #16
 800f2e4:	0c3f      	lsrs	r7, r7, #16
 800f2e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f2ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2f4:	4565      	cmp	r5, ip
 800f2f6:	f849 3b04 	str.w	r3, [r9], #4
 800f2fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f2fe:	d8e4      	bhi.n	800f2ca <__multiply+0xaa>
 800f300:	9b01      	ldr	r3, [sp, #4]
 800f302:	50e7      	str	r7, [r4, r3]
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f30a:	3104      	adds	r1, #4
 800f30c:	f1b9 0f00 	cmp.w	r9, #0
 800f310:	d020      	beq.n	800f354 <__multiply+0x134>
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	4647      	mov	r7, r8
 800f316:	46a4      	mov	ip, r4
 800f318:	f04f 0a00 	mov.w	sl, #0
 800f31c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f320:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f324:	fb09 220b 	mla	r2, r9, fp, r2
 800f328:	4452      	add	r2, sl
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f330:	f84c 3b04 	str.w	r3, [ip], #4
 800f334:	f857 3b04 	ldr.w	r3, [r7], #4
 800f338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f33c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f340:	fb09 330a 	mla	r3, r9, sl, r3
 800f344:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f348:	42bd      	cmp	r5, r7
 800f34a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f34e:	d8e5      	bhi.n	800f31c <__multiply+0xfc>
 800f350:	9a01      	ldr	r2, [sp, #4]
 800f352:	50a3      	str	r3, [r4, r2]
 800f354:	3404      	adds	r4, #4
 800f356:	e79f      	b.n	800f298 <__multiply+0x78>
 800f358:	3e01      	subs	r6, #1
 800f35a:	e7a1      	b.n	800f2a0 <__multiply+0x80>
 800f35c:	08010ad0 	.word	0x08010ad0
 800f360:	08010ae1 	.word	0x08010ae1

0800f364 <__pow5mult>:
 800f364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f368:	4615      	mov	r5, r2
 800f36a:	f012 0203 	ands.w	r2, r2, #3
 800f36e:	4607      	mov	r7, r0
 800f370:	460e      	mov	r6, r1
 800f372:	d007      	beq.n	800f384 <__pow5mult+0x20>
 800f374:	4c25      	ldr	r4, [pc, #148]	@ (800f40c <__pow5mult+0xa8>)
 800f376:	3a01      	subs	r2, #1
 800f378:	2300      	movs	r3, #0
 800f37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f37e:	f7ff fea7 	bl	800f0d0 <__multadd>
 800f382:	4606      	mov	r6, r0
 800f384:	10ad      	asrs	r5, r5, #2
 800f386:	d03d      	beq.n	800f404 <__pow5mult+0xa0>
 800f388:	69fc      	ldr	r4, [r7, #28]
 800f38a:	b97c      	cbnz	r4, 800f3ac <__pow5mult+0x48>
 800f38c:	2010      	movs	r0, #16
 800f38e:	f7fd ffdd 	bl	800d34c <malloc>
 800f392:	4602      	mov	r2, r0
 800f394:	61f8      	str	r0, [r7, #28]
 800f396:	b928      	cbnz	r0, 800f3a4 <__pow5mult+0x40>
 800f398:	4b1d      	ldr	r3, [pc, #116]	@ (800f410 <__pow5mult+0xac>)
 800f39a:	481e      	ldr	r0, [pc, #120]	@ (800f414 <__pow5mult+0xb0>)
 800f39c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f3a0:	f000 fc54 	bl	800fc4c <__assert_func>
 800f3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3a8:	6004      	str	r4, [r0, #0]
 800f3aa:	60c4      	str	r4, [r0, #12]
 800f3ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3b4:	b94c      	cbnz	r4, 800f3ca <__pow5mult+0x66>
 800f3b6:	f240 2171 	movw	r1, #625	@ 0x271
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f7ff ff1a 	bl	800f1f4 <__i2b>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	6003      	str	r3, [r0, #0]
 800f3ca:	f04f 0900 	mov.w	r9, #0
 800f3ce:	07eb      	lsls	r3, r5, #31
 800f3d0:	d50a      	bpl.n	800f3e8 <__pow5mult+0x84>
 800f3d2:	4631      	mov	r1, r6
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	f7ff ff22 	bl	800f220 <__multiply>
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4680      	mov	r8, r0
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	f7ff fe53 	bl	800f08c <_Bfree>
 800f3e6:	4646      	mov	r6, r8
 800f3e8:	106d      	asrs	r5, r5, #1
 800f3ea:	d00b      	beq.n	800f404 <__pow5mult+0xa0>
 800f3ec:	6820      	ldr	r0, [r4, #0]
 800f3ee:	b938      	cbnz	r0, 800f400 <__pow5mult+0x9c>
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7ff ff13 	bl	800f220 <__multiply>
 800f3fa:	6020      	str	r0, [r4, #0]
 800f3fc:	f8c0 9000 	str.w	r9, [r0]
 800f400:	4604      	mov	r4, r0
 800f402:	e7e4      	b.n	800f3ce <__pow5mult+0x6a>
 800f404:	4630      	mov	r0, r6
 800f406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f40a:	bf00      	nop
 800f40c:	08010b94 	.word	0x08010b94
 800f410:	08010a61 	.word	0x08010a61
 800f414:	08010ae1 	.word	0x08010ae1

0800f418 <__lshift>:
 800f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	460c      	mov	r4, r1
 800f41e:	6849      	ldr	r1, [r1, #4]
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f426:	68a3      	ldr	r3, [r4, #8]
 800f428:	4607      	mov	r7, r0
 800f42a:	4691      	mov	r9, r2
 800f42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f430:	f108 0601 	add.w	r6, r8, #1
 800f434:	42b3      	cmp	r3, r6
 800f436:	db0b      	blt.n	800f450 <__lshift+0x38>
 800f438:	4638      	mov	r0, r7
 800f43a:	f7ff fde7 	bl	800f00c <_Balloc>
 800f43e:	4605      	mov	r5, r0
 800f440:	b948      	cbnz	r0, 800f456 <__lshift+0x3e>
 800f442:	4602      	mov	r2, r0
 800f444:	4b28      	ldr	r3, [pc, #160]	@ (800f4e8 <__lshift+0xd0>)
 800f446:	4829      	ldr	r0, [pc, #164]	@ (800f4ec <__lshift+0xd4>)
 800f448:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f44c:	f000 fbfe 	bl	800fc4c <__assert_func>
 800f450:	3101      	adds	r1, #1
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	e7ee      	b.n	800f434 <__lshift+0x1c>
 800f456:	2300      	movs	r3, #0
 800f458:	f100 0114 	add.w	r1, r0, #20
 800f45c:	f100 0210 	add.w	r2, r0, #16
 800f460:	4618      	mov	r0, r3
 800f462:	4553      	cmp	r3, sl
 800f464:	db33      	blt.n	800f4ce <__lshift+0xb6>
 800f466:	6920      	ldr	r0, [r4, #16]
 800f468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f46c:	f104 0314 	add.w	r3, r4, #20
 800f470:	f019 091f 	ands.w	r9, r9, #31
 800f474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f47c:	d02b      	beq.n	800f4d6 <__lshift+0xbe>
 800f47e:	f1c9 0e20 	rsb	lr, r9, #32
 800f482:	468a      	mov	sl, r1
 800f484:	2200      	movs	r2, #0
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	fa00 f009 	lsl.w	r0, r0, r9
 800f48c:	4310      	orrs	r0, r2
 800f48e:	f84a 0b04 	str.w	r0, [sl], #4
 800f492:	f853 2b04 	ldr.w	r2, [r3], #4
 800f496:	459c      	cmp	ip, r3
 800f498:	fa22 f20e 	lsr.w	r2, r2, lr
 800f49c:	d8f3      	bhi.n	800f486 <__lshift+0x6e>
 800f49e:	ebac 0304 	sub.w	r3, ip, r4
 800f4a2:	3b15      	subs	r3, #21
 800f4a4:	f023 0303 	bic.w	r3, r3, #3
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	f104 0015 	add.w	r0, r4, #21
 800f4ae:	4560      	cmp	r0, ip
 800f4b0:	bf88      	it	hi
 800f4b2:	2304      	movhi	r3, #4
 800f4b4:	50ca      	str	r2, [r1, r3]
 800f4b6:	b10a      	cbz	r2, 800f4bc <__lshift+0xa4>
 800f4b8:	f108 0602 	add.w	r6, r8, #2
 800f4bc:	3e01      	subs	r6, #1
 800f4be:	4638      	mov	r0, r7
 800f4c0:	612e      	str	r6, [r5, #16]
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	f7ff fde2 	bl	800f08c <_Bfree>
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	e7c5      	b.n	800f462 <__lshift+0x4a>
 800f4d6:	3904      	subs	r1, #4
 800f4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4e0:	459c      	cmp	ip, r3
 800f4e2:	d8f9      	bhi.n	800f4d8 <__lshift+0xc0>
 800f4e4:	e7ea      	b.n	800f4bc <__lshift+0xa4>
 800f4e6:	bf00      	nop
 800f4e8:	08010ad0 	.word	0x08010ad0
 800f4ec:	08010ae1 	.word	0x08010ae1

0800f4f0 <__mcmp>:
 800f4f0:	690a      	ldr	r2, [r1, #16]
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	6900      	ldr	r0, [r0, #16]
 800f4f6:	1a80      	subs	r0, r0, r2
 800f4f8:	b530      	push	{r4, r5, lr}
 800f4fa:	d10e      	bne.n	800f51a <__mcmp+0x2a>
 800f4fc:	3314      	adds	r3, #20
 800f4fe:	3114      	adds	r1, #20
 800f500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f50c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f510:	4295      	cmp	r5, r2
 800f512:	d003      	beq.n	800f51c <__mcmp+0x2c>
 800f514:	d205      	bcs.n	800f522 <__mcmp+0x32>
 800f516:	f04f 30ff 	mov.w	r0, #4294967295
 800f51a:	bd30      	pop	{r4, r5, pc}
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	d3f3      	bcc.n	800f508 <__mcmp+0x18>
 800f520:	e7fb      	b.n	800f51a <__mcmp+0x2a>
 800f522:	2001      	movs	r0, #1
 800f524:	e7f9      	b.n	800f51a <__mcmp+0x2a>
	...

0800f528 <__mdiff>:
 800f528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	4689      	mov	r9, r1
 800f52e:	4606      	mov	r6, r0
 800f530:	4611      	mov	r1, r2
 800f532:	4648      	mov	r0, r9
 800f534:	4614      	mov	r4, r2
 800f536:	f7ff ffdb 	bl	800f4f0 <__mcmp>
 800f53a:	1e05      	subs	r5, r0, #0
 800f53c:	d112      	bne.n	800f564 <__mdiff+0x3c>
 800f53e:	4629      	mov	r1, r5
 800f540:	4630      	mov	r0, r6
 800f542:	f7ff fd63 	bl	800f00c <_Balloc>
 800f546:	4602      	mov	r2, r0
 800f548:	b928      	cbnz	r0, 800f556 <__mdiff+0x2e>
 800f54a:	4b3f      	ldr	r3, [pc, #252]	@ (800f648 <__mdiff+0x120>)
 800f54c:	f240 2137 	movw	r1, #567	@ 0x237
 800f550:	483e      	ldr	r0, [pc, #248]	@ (800f64c <__mdiff+0x124>)
 800f552:	f000 fb7b 	bl	800fc4c <__assert_func>
 800f556:	2301      	movs	r3, #1
 800f558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f55c:	4610      	mov	r0, r2
 800f55e:	b003      	add	sp, #12
 800f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f564:	bfbc      	itt	lt
 800f566:	464b      	movlt	r3, r9
 800f568:	46a1      	movlt	r9, r4
 800f56a:	4630      	mov	r0, r6
 800f56c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f570:	bfba      	itte	lt
 800f572:	461c      	movlt	r4, r3
 800f574:	2501      	movlt	r5, #1
 800f576:	2500      	movge	r5, #0
 800f578:	f7ff fd48 	bl	800f00c <_Balloc>
 800f57c:	4602      	mov	r2, r0
 800f57e:	b918      	cbnz	r0, 800f588 <__mdiff+0x60>
 800f580:	4b31      	ldr	r3, [pc, #196]	@ (800f648 <__mdiff+0x120>)
 800f582:	f240 2145 	movw	r1, #581	@ 0x245
 800f586:	e7e3      	b.n	800f550 <__mdiff+0x28>
 800f588:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f58c:	6926      	ldr	r6, [r4, #16]
 800f58e:	60c5      	str	r5, [r0, #12]
 800f590:	f109 0310 	add.w	r3, r9, #16
 800f594:	f109 0514 	add.w	r5, r9, #20
 800f598:	f104 0e14 	add.w	lr, r4, #20
 800f59c:	f100 0b14 	add.w	fp, r0, #20
 800f5a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f5a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f5a8:	9301      	str	r3, [sp, #4]
 800f5aa:	46d9      	mov	r9, fp
 800f5ac:	f04f 0c00 	mov.w	ip, #0
 800f5b0:	9b01      	ldr	r3, [sp, #4]
 800f5b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f5b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5ba:	9301      	str	r3, [sp, #4]
 800f5bc:	fa1f f38a 	uxth.w	r3, sl
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	b283      	uxth	r3, r0
 800f5c4:	1acb      	subs	r3, r1, r3
 800f5c6:	0c00      	lsrs	r0, r0, #16
 800f5c8:	4463      	add	r3, ip
 800f5ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5d8:	4576      	cmp	r6, lr
 800f5da:	f849 3b04 	str.w	r3, [r9], #4
 800f5de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5e2:	d8e5      	bhi.n	800f5b0 <__mdiff+0x88>
 800f5e4:	1b33      	subs	r3, r6, r4
 800f5e6:	3b15      	subs	r3, #21
 800f5e8:	f023 0303 	bic.w	r3, r3, #3
 800f5ec:	3415      	adds	r4, #21
 800f5ee:	3304      	adds	r3, #4
 800f5f0:	42a6      	cmp	r6, r4
 800f5f2:	bf38      	it	cc
 800f5f4:	2304      	movcc	r3, #4
 800f5f6:	441d      	add	r5, r3
 800f5f8:	445b      	add	r3, fp
 800f5fa:	461e      	mov	r6, r3
 800f5fc:	462c      	mov	r4, r5
 800f5fe:	4544      	cmp	r4, r8
 800f600:	d30e      	bcc.n	800f620 <__mdiff+0xf8>
 800f602:	f108 0103 	add.w	r1, r8, #3
 800f606:	1b49      	subs	r1, r1, r5
 800f608:	f021 0103 	bic.w	r1, r1, #3
 800f60c:	3d03      	subs	r5, #3
 800f60e:	45a8      	cmp	r8, r5
 800f610:	bf38      	it	cc
 800f612:	2100      	movcc	r1, #0
 800f614:	440b      	add	r3, r1
 800f616:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f61a:	b191      	cbz	r1, 800f642 <__mdiff+0x11a>
 800f61c:	6117      	str	r7, [r2, #16]
 800f61e:	e79d      	b.n	800f55c <__mdiff+0x34>
 800f620:	f854 1b04 	ldr.w	r1, [r4], #4
 800f624:	46e6      	mov	lr, ip
 800f626:	0c08      	lsrs	r0, r1, #16
 800f628:	fa1c fc81 	uxtah	ip, ip, r1
 800f62c:	4471      	add	r1, lr
 800f62e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f632:	b289      	uxth	r1, r1
 800f634:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f638:	f846 1b04 	str.w	r1, [r6], #4
 800f63c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f640:	e7dd      	b.n	800f5fe <__mdiff+0xd6>
 800f642:	3f01      	subs	r7, #1
 800f644:	e7e7      	b.n	800f616 <__mdiff+0xee>
 800f646:	bf00      	nop
 800f648:	08010ad0 	.word	0x08010ad0
 800f64c:	08010ae1 	.word	0x08010ae1

0800f650 <__d2b>:
 800f650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f654:	460f      	mov	r7, r1
 800f656:	2101      	movs	r1, #1
 800f658:	ec59 8b10 	vmov	r8, r9, d0
 800f65c:	4616      	mov	r6, r2
 800f65e:	f7ff fcd5 	bl	800f00c <_Balloc>
 800f662:	4604      	mov	r4, r0
 800f664:	b930      	cbnz	r0, 800f674 <__d2b+0x24>
 800f666:	4602      	mov	r2, r0
 800f668:	4b23      	ldr	r3, [pc, #140]	@ (800f6f8 <__d2b+0xa8>)
 800f66a:	4824      	ldr	r0, [pc, #144]	@ (800f6fc <__d2b+0xac>)
 800f66c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f670:	f000 faec 	bl	800fc4c <__assert_func>
 800f674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f67c:	b10d      	cbz	r5, 800f682 <__d2b+0x32>
 800f67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f682:	9301      	str	r3, [sp, #4]
 800f684:	f1b8 0300 	subs.w	r3, r8, #0
 800f688:	d023      	beq.n	800f6d2 <__d2b+0x82>
 800f68a:	4668      	mov	r0, sp
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	f7ff fd84 	bl	800f19a <__lo0bits>
 800f692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f696:	b1d0      	cbz	r0, 800f6ce <__d2b+0x7e>
 800f698:	f1c0 0320 	rsb	r3, r0, #32
 800f69c:	fa02 f303 	lsl.w	r3, r2, r3
 800f6a0:	430b      	orrs	r3, r1
 800f6a2:	40c2      	lsrs	r2, r0
 800f6a4:	6163      	str	r3, [r4, #20]
 800f6a6:	9201      	str	r2, [sp, #4]
 800f6a8:	9b01      	ldr	r3, [sp, #4]
 800f6aa:	61a3      	str	r3, [r4, #24]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	bf0c      	ite	eq
 800f6b0:	2201      	moveq	r2, #1
 800f6b2:	2202      	movne	r2, #2
 800f6b4:	6122      	str	r2, [r4, #16]
 800f6b6:	b1a5      	cbz	r5, 800f6e2 <__d2b+0x92>
 800f6b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f6bc:	4405      	add	r5, r0
 800f6be:	603d      	str	r5, [r7, #0]
 800f6c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f6c4:	6030      	str	r0, [r6, #0]
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	b003      	add	sp, #12
 800f6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ce:	6161      	str	r1, [r4, #20]
 800f6d0:	e7ea      	b.n	800f6a8 <__d2b+0x58>
 800f6d2:	a801      	add	r0, sp, #4
 800f6d4:	f7ff fd61 	bl	800f19a <__lo0bits>
 800f6d8:	9b01      	ldr	r3, [sp, #4]
 800f6da:	6163      	str	r3, [r4, #20]
 800f6dc:	3020      	adds	r0, #32
 800f6de:	2201      	movs	r2, #1
 800f6e0:	e7e8      	b.n	800f6b4 <__d2b+0x64>
 800f6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f6ea:	6038      	str	r0, [r7, #0]
 800f6ec:	6918      	ldr	r0, [r3, #16]
 800f6ee:	f7ff fd35 	bl	800f15c <__hi0bits>
 800f6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6f6:	e7e5      	b.n	800f6c4 <__d2b+0x74>
 800f6f8:	08010ad0 	.word	0x08010ad0
 800f6fc:	08010ae1 	.word	0x08010ae1

0800f700 <__sfputc_r>:
 800f700:	6893      	ldr	r3, [r2, #8]
 800f702:	3b01      	subs	r3, #1
 800f704:	2b00      	cmp	r3, #0
 800f706:	b410      	push	{r4}
 800f708:	6093      	str	r3, [r2, #8]
 800f70a:	da08      	bge.n	800f71e <__sfputc_r+0x1e>
 800f70c:	6994      	ldr	r4, [r2, #24]
 800f70e:	42a3      	cmp	r3, r4
 800f710:	db01      	blt.n	800f716 <__sfputc_r+0x16>
 800f712:	290a      	cmp	r1, #10
 800f714:	d103      	bne.n	800f71e <__sfputc_r+0x1e>
 800f716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f71a:	f7fe bca0 	b.w	800e05e <__swbuf_r>
 800f71e:	6813      	ldr	r3, [r2, #0]
 800f720:	1c58      	adds	r0, r3, #1
 800f722:	6010      	str	r0, [r2, #0]
 800f724:	7019      	strb	r1, [r3, #0]
 800f726:	4608      	mov	r0, r1
 800f728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <__sfputs_r>:
 800f72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f730:	4606      	mov	r6, r0
 800f732:	460f      	mov	r7, r1
 800f734:	4614      	mov	r4, r2
 800f736:	18d5      	adds	r5, r2, r3
 800f738:	42ac      	cmp	r4, r5
 800f73a:	d101      	bne.n	800f740 <__sfputs_r+0x12>
 800f73c:	2000      	movs	r0, #0
 800f73e:	e007      	b.n	800f750 <__sfputs_r+0x22>
 800f740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f744:	463a      	mov	r2, r7
 800f746:	4630      	mov	r0, r6
 800f748:	f7ff ffda 	bl	800f700 <__sfputc_r>
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	d1f3      	bne.n	800f738 <__sfputs_r+0xa>
 800f750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f754 <_vfiprintf_r>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	460d      	mov	r5, r1
 800f75a:	b09d      	sub	sp, #116	@ 0x74
 800f75c:	4614      	mov	r4, r2
 800f75e:	4698      	mov	r8, r3
 800f760:	4606      	mov	r6, r0
 800f762:	b118      	cbz	r0, 800f76c <_vfiprintf_r+0x18>
 800f764:	6a03      	ldr	r3, [r0, #32]
 800f766:	b90b      	cbnz	r3, 800f76c <_vfiprintf_r+0x18>
 800f768:	f7fe fb88 	bl	800de7c <__sinit>
 800f76c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f76e:	07d9      	lsls	r1, r3, #31
 800f770:	d405      	bmi.n	800f77e <_vfiprintf_r+0x2a>
 800f772:	89ab      	ldrh	r3, [r5, #12]
 800f774:	059a      	lsls	r2, r3, #22
 800f776:	d402      	bmi.n	800f77e <_vfiprintf_r+0x2a>
 800f778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f77a:	f7fe fd92 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800f77e:	89ab      	ldrh	r3, [r5, #12]
 800f780:	071b      	lsls	r3, r3, #28
 800f782:	d501      	bpl.n	800f788 <_vfiprintf_r+0x34>
 800f784:	692b      	ldr	r3, [r5, #16]
 800f786:	b99b      	cbnz	r3, 800f7b0 <_vfiprintf_r+0x5c>
 800f788:	4629      	mov	r1, r5
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7fe fca6 	bl	800e0dc <__swsetup_r>
 800f790:	b170      	cbz	r0, 800f7b0 <_vfiprintf_r+0x5c>
 800f792:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f794:	07dc      	lsls	r4, r3, #31
 800f796:	d504      	bpl.n	800f7a2 <_vfiprintf_r+0x4e>
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	b01d      	add	sp, #116	@ 0x74
 800f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a2:	89ab      	ldrh	r3, [r5, #12]
 800f7a4:	0598      	lsls	r0, r3, #22
 800f7a6:	d4f7      	bmi.n	800f798 <_vfiprintf_r+0x44>
 800f7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7aa:	f7fe fd7b 	bl	800e2a4 <__retarget_lock_release_recursive>
 800f7ae:	e7f3      	b.n	800f798 <_vfiprintf_r+0x44>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b4:	2320      	movs	r3, #32
 800f7b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7be:	2330      	movs	r3, #48	@ 0x30
 800f7c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f970 <_vfiprintf_r+0x21c>
 800f7c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7c8:	f04f 0901 	mov.w	r9, #1
 800f7cc:	4623      	mov	r3, r4
 800f7ce:	469a      	mov	sl, r3
 800f7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d4:	b10a      	cbz	r2, 800f7da <_vfiprintf_r+0x86>
 800f7d6:	2a25      	cmp	r2, #37	@ 0x25
 800f7d8:	d1f9      	bne.n	800f7ce <_vfiprintf_r+0x7a>
 800f7da:	ebba 0b04 	subs.w	fp, sl, r4
 800f7de:	d00b      	beq.n	800f7f8 <_vfiprintf_r+0xa4>
 800f7e0:	465b      	mov	r3, fp
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f7ff ffa1 	bl	800f72e <__sfputs_r>
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	f000 80a7 	beq.w	800f940 <_vfiprintf_r+0x1ec>
 800f7f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7f4:	445a      	add	r2, fp
 800f7f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 809f 	beq.w	800f940 <_vfiprintf_r+0x1ec>
 800f802:	2300      	movs	r3, #0
 800f804:	f04f 32ff 	mov.w	r2, #4294967295
 800f808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f80c:	f10a 0a01 	add.w	sl, sl, #1
 800f810:	9304      	str	r3, [sp, #16]
 800f812:	9307      	str	r3, [sp, #28]
 800f814:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f818:	931a      	str	r3, [sp, #104]	@ 0x68
 800f81a:	4654      	mov	r4, sl
 800f81c:	2205      	movs	r2, #5
 800f81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f822:	4853      	ldr	r0, [pc, #332]	@ (800f970 <_vfiprintf_r+0x21c>)
 800f824:	f7f0 fcd4 	bl	80001d0 <memchr>
 800f828:	9a04      	ldr	r2, [sp, #16]
 800f82a:	b9d8      	cbnz	r0, 800f864 <_vfiprintf_r+0x110>
 800f82c:	06d1      	lsls	r1, r2, #27
 800f82e:	bf44      	itt	mi
 800f830:	2320      	movmi	r3, #32
 800f832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f836:	0713      	lsls	r3, r2, #28
 800f838:	bf44      	itt	mi
 800f83a:	232b      	movmi	r3, #43	@ 0x2b
 800f83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f840:	f89a 3000 	ldrb.w	r3, [sl]
 800f844:	2b2a      	cmp	r3, #42	@ 0x2a
 800f846:	d015      	beq.n	800f874 <_vfiprintf_r+0x120>
 800f848:	9a07      	ldr	r2, [sp, #28]
 800f84a:	4654      	mov	r4, sl
 800f84c:	2000      	movs	r0, #0
 800f84e:	f04f 0c0a 	mov.w	ip, #10
 800f852:	4621      	mov	r1, r4
 800f854:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f858:	3b30      	subs	r3, #48	@ 0x30
 800f85a:	2b09      	cmp	r3, #9
 800f85c:	d94b      	bls.n	800f8f6 <_vfiprintf_r+0x1a2>
 800f85e:	b1b0      	cbz	r0, 800f88e <_vfiprintf_r+0x13a>
 800f860:	9207      	str	r2, [sp, #28]
 800f862:	e014      	b.n	800f88e <_vfiprintf_r+0x13a>
 800f864:	eba0 0308 	sub.w	r3, r0, r8
 800f868:	fa09 f303 	lsl.w	r3, r9, r3
 800f86c:	4313      	orrs	r3, r2
 800f86e:	9304      	str	r3, [sp, #16]
 800f870:	46a2      	mov	sl, r4
 800f872:	e7d2      	b.n	800f81a <_vfiprintf_r+0xc6>
 800f874:	9b03      	ldr	r3, [sp, #12]
 800f876:	1d19      	adds	r1, r3, #4
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	9103      	str	r1, [sp, #12]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	bfbb      	ittet	lt
 800f880:	425b      	neglt	r3, r3
 800f882:	f042 0202 	orrlt.w	r2, r2, #2
 800f886:	9307      	strge	r3, [sp, #28]
 800f888:	9307      	strlt	r3, [sp, #28]
 800f88a:	bfb8      	it	lt
 800f88c:	9204      	strlt	r2, [sp, #16]
 800f88e:	7823      	ldrb	r3, [r4, #0]
 800f890:	2b2e      	cmp	r3, #46	@ 0x2e
 800f892:	d10a      	bne.n	800f8aa <_vfiprintf_r+0x156>
 800f894:	7863      	ldrb	r3, [r4, #1]
 800f896:	2b2a      	cmp	r3, #42	@ 0x2a
 800f898:	d132      	bne.n	800f900 <_vfiprintf_r+0x1ac>
 800f89a:	9b03      	ldr	r3, [sp, #12]
 800f89c:	1d1a      	adds	r2, r3, #4
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	9203      	str	r2, [sp, #12]
 800f8a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8a6:	3402      	adds	r4, #2
 800f8a8:	9305      	str	r3, [sp, #20]
 800f8aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f980 <_vfiprintf_r+0x22c>
 800f8ae:	7821      	ldrb	r1, [r4, #0]
 800f8b0:	2203      	movs	r2, #3
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	f7f0 fc8c 	bl	80001d0 <memchr>
 800f8b8:	b138      	cbz	r0, 800f8ca <_vfiprintf_r+0x176>
 800f8ba:	9b04      	ldr	r3, [sp, #16]
 800f8bc:	eba0 000a 	sub.w	r0, r0, sl
 800f8c0:	2240      	movs	r2, #64	@ 0x40
 800f8c2:	4082      	lsls	r2, r0
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	3401      	adds	r4, #1
 800f8c8:	9304      	str	r3, [sp, #16]
 800f8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ce:	4829      	ldr	r0, [pc, #164]	@ (800f974 <_vfiprintf_r+0x220>)
 800f8d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8d4:	2206      	movs	r2, #6
 800f8d6:	f7f0 fc7b 	bl	80001d0 <memchr>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d03f      	beq.n	800f95e <_vfiprintf_r+0x20a>
 800f8de:	4b26      	ldr	r3, [pc, #152]	@ (800f978 <_vfiprintf_r+0x224>)
 800f8e0:	bb1b      	cbnz	r3, 800f92a <_vfiprintf_r+0x1d6>
 800f8e2:	9b03      	ldr	r3, [sp, #12]
 800f8e4:	3307      	adds	r3, #7
 800f8e6:	f023 0307 	bic.w	r3, r3, #7
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	9303      	str	r3, [sp, #12]
 800f8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f0:	443b      	add	r3, r7
 800f8f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f4:	e76a      	b.n	800f7cc <_vfiprintf_r+0x78>
 800f8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	e7a8      	b.n	800f852 <_vfiprintf_r+0xfe>
 800f900:	2300      	movs	r3, #0
 800f902:	3401      	adds	r4, #1
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	4619      	mov	r1, r3
 800f908:	f04f 0c0a 	mov.w	ip, #10
 800f90c:	4620      	mov	r0, r4
 800f90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f912:	3a30      	subs	r2, #48	@ 0x30
 800f914:	2a09      	cmp	r2, #9
 800f916:	d903      	bls.n	800f920 <_vfiprintf_r+0x1cc>
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d0c6      	beq.n	800f8aa <_vfiprintf_r+0x156>
 800f91c:	9105      	str	r1, [sp, #20]
 800f91e:	e7c4      	b.n	800f8aa <_vfiprintf_r+0x156>
 800f920:	fb0c 2101 	mla	r1, ip, r1, r2
 800f924:	4604      	mov	r4, r0
 800f926:	2301      	movs	r3, #1
 800f928:	e7f0      	b.n	800f90c <_vfiprintf_r+0x1b8>
 800f92a:	ab03      	add	r3, sp, #12
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	462a      	mov	r2, r5
 800f930:	4b12      	ldr	r3, [pc, #72]	@ (800f97c <_vfiprintf_r+0x228>)
 800f932:	a904      	add	r1, sp, #16
 800f934:	4630      	mov	r0, r6
 800f936:	f7fd fe5f 	bl	800d5f8 <_printf_float>
 800f93a:	4607      	mov	r7, r0
 800f93c:	1c78      	adds	r0, r7, #1
 800f93e:	d1d6      	bne.n	800f8ee <_vfiprintf_r+0x19a>
 800f940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f942:	07d9      	lsls	r1, r3, #31
 800f944:	d405      	bmi.n	800f952 <_vfiprintf_r+0x1fe>
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	059a      	lsls	r2, r3, #22
 800f94a:	d402      	bmi.n	800f952 <_vfiprintf_r+0x1fe>
 800f94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f94e:	f7fe fca9 	bl	800e2a4 <__retarget_lock_release_recursive>
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	065b      	lsls	r3, r3, #25
 800f956:	f53f af1f 	bmi.w	800f798 <_vfiprintf_r+0x44>
 800f95a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f95c:	e71e      	b.n	800f79c <_vfiprintf_r+0x48>
 800f95e:	ab03      	add	r3, sp, #12
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	462a      	mov	r2, r5
 800f964:	4b05      	ldr	r3, [pc, #20]	@ (800f97c <_vfiprintf_r+0x228>)
 800f966:	a904      	add	r1, sp, #16
 800f968:	4630      	mov	r0, r6
 800f96a:	f7fe f8dd 	bl	800db28 <_printf_i>
 800f96e:	e7e4      	b.n	800f93a <_vfiprintf_r+0x1e6>
 800f970:	08010b3a 	.word	0x08010b3a
 800f974:	08010b44 	.word	0x08010b44
 800f978:	0800d5f9 	.word	0x0800d5f9
 800f97c:	0800f72f 	.word	0x0800f72f
 800f980:	08010b40 	.word	0x08010b40

0800f984 <__sflush_r>:
 800f984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f98c:	0716      	lsls	r6, r2, #28
 800f98e:	4605      	mov	r5, r0
 800f990:	460c      	mov	r4, r1
 800f992:	d454      	bmi.n	800fa3e <__sflush_r+0xba>
 800f994:	684b      	ldr	r3, [r1, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	dc02      	bgt.n	800f9a0 <__sflush_r+0x1c>
 800f99a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	dd48      	ble.n	800fa32 <__sflush_r+0xae>
 800f9a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9a2:	2e00      	cmp	r6, #0
 800f9a4:	d045      	beq.n	800fa32 <__sflush_r+0xae>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9ac:	682f      	ldr	r7, [r5, #0]
 800f9ae:	6a21      	ldr	r1, [r4, #32]
 800f9b0:	602b      	str	r3, [r5, #0]
 800f9b2:	d030      	beq.n	800fa16 <__sflush_r+0x92>
 800f9b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f9b6:	89a3      	ldrh	r3, [r4, #12]
 800f9b8:	0759      	lsls	r1, r3, #29
 800f9ba:	d505      	bpl.n	800f9c8 <__sflush_r+0x44>
 800f9bc:	6863      	ldr	r3, [r4, #4]
 800f9be:	1ad2      	subs	r2, r2, r3
 800f9c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f9c2:	b10b      	cbz	r3, 800f9c8 <__sflush_r+0x44>
 800f9c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f9c6:	1ad2      	subs	r2, r2, r3
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9cc:	6a21      	ldr	r1, [r4, #32]
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	47b0      	blx	r6
 800f9d2:	1c43      	adds	r3, r0, #1
 800f9d4:	89a3      	ldrh	r3, [r4, #12]
 800f9d6:	d106      	bne.n	800f9e6 <__sflush_r+0x62>
 800f9d8:	6829      	ldr	r1, [r5, #0]
 800f9da:	291d      	cmp	r1, #29
 800f9dc:	d82b      	bhi.n	800fa36 <__sflush_r+0xb2>
 800f9de:	4a2a      	ldr	r2, [pc, #168]	@ (800fa88 <__sflush_r+0x104>)
 800f9e0:	40ca      	lsrs	r2, r1
 800f9e2:	07d6      	lsls	r6, r2, #31
 800f9e4:	d527      	bpl.n	800fa36 <__sflush_r+0xb2>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	6062      	str	r2, [r4, #4]
 800f9ea:	04d9      	lsls	r1, r3, #19
 800f9ec:	6922      	ldr	r2, [r4, #16]
 800f9ee:	6022      	str	r2, [r4, #0]
 800f9f0:	d504      	bpl.n	800f9fc <__sflush_r+0x78>
 800f9f2:	1c42      	adds	r2, r0, #1
 800f9f4:	d101      	bne.n	800f9fa <__sflush_r+0x76>
 800f9f6:	682b      	ldr	r3, [r5, #0]
 800f9f8:	b903      	cbnz	r3, 800f9fc <__sflush_r+0x78>
 800f9fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800f9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9fe:	602f      	str	r7, [r5, #0]
 800fa00:	b1b9      	cbz	r1, 800fa32 <__sflush_r+0xae>
 800fa02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa06:	4299      	cmp	r1, r3
 800fa08:	d002      	beq.n	800fa10 <__sflush_r+0x8c>
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	f7ff fab4 	bl	800ef78 <_free_r>
 800fa10:	2300      	movs	r3, #0
 800fa12:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa14:	e00d      	b.n	800fa32 <__sflush_r+0xae>
 800fa16:	2301      	movs	r3, #1
 800fa18:	4628      	mov	r0, r5
 800fa1a:	47b0      	blx	r6
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	1c50      	adds	r0, r2, #1
 800fa20:	d1c9      	bne.n	800f9b6 <__sflush_r+0x32>
 800fa22:	682b      	ldr	r3, [r5, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0c6      	beq.n	800f9b6 <__sflush_r+0x32>
 800fa28:	2b1d      	cmp	r3, #29
 800fa2a:	d001      	beq.n	800fa30 <__sflush_r+0xac>
 800fa2c:	2b16      	cmp	r3, #22
 800fa2e:	d11e      	bne.n	800fa6e <__sflush_r+0xea>
 800fa30:	602f      	str	r7, [r5, #0]
 800fa32:	2000      	movs	r0, #0
 800fa34:	e022      	b.n	800fa7c <__sflush_r+0xf8>
 800fa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa3a:	b21b      	sxth	r3, r3
 800fa3c:	e01b      	b.n	800fa76 <__sflush_r+0xf2>
 800fa3e:	690f      	ldr	r7, [r1, #16]
 800fa40:	2f00      	cmp	r7, #0
 800fa42:	d0f6      	beq.n	800fa32 <__sflush_r+0xae>
 800fa44:	0793      	lsls	r3, r2, #30
 800fa46:	680e      	ldr	r6, [r1, #0]
 800fa48:	bf08      	it	eq
 800fa4a:	694b      	ldreq	r3, [r1, #20]
 800fa4c:	600f      	str	r7, [r1, #0]
 800fa4e:	bf18      	it	ne
 800fa50:	2300      	movne	r3, #0
 800fa52:	eba6 0807 	sub.w	r8, r6, r7
 800fa56:	608b      	str	r3, [r1, #8]
 800fa58:	f1b8 0f00 	cmp.w	r8, #0
 800fa5c:	dde9      	ble.n	800fa32 <__sflush_r+0xae>
 800fa5e:	6a21      	ldr	r1, [r4, #32]
 800fa60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fa62:	4643      	mov	r3, r8
 800fa64:	463a      	mov	r2, r7
 800fa66:	4628      	mov	r0, r5
 800fa68:	47b0      	blx	r6
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	dc08      	bgt.n	800fa80 <__sflush_r+0xfc>
 800fa6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa76:	81a3      	strh	r3, [r4, #12]
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa80:	4407      	add	r7, r0
 800fa82:	eba8 0800 	sub.w	r8, r8, r0
 800fa86:	e7e7      	b.n	800fa58 <__sflush_r+0xd4>
 800fa88:	20400001 	.word	0x20400001

0800fa8c <_fflush_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	690b      	ldr	r3, [r1, #16]
 800fa90:	4605      	mov	r5, r0
 800fa92:	460c      	mov	r4, r1
 800fa94:	b913      	cbnz	r3, 800fa9c <_fflush_r+0x10>
 800fa96:	2500      	movs	r5, #0
 800fa98:	4628      	mov	r0, r5
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	b118      	cbz	r0, 800faa6 <_fflush_r+0x1a>
 800fa9e:	6a03      	ldr	r3, [r0, #32]
 800faa0:	b90b      	cbnz	r3, 800faa6 <_fflush_r+0x1a>
 800faa2:	f7fe f9eb 	bl	800de7c <__sinit>
 800faa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d0f3      	beq.n	800fa96 <_fflush_r+0xa>
 800faae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fab0:	07d0      	lsls	r0, r2, #31
 800fab2:	d404      	bmi.n	800fabe <_fflush_r+0x32>
 800fab4:	0599      	lsls	r1, r3, #22
 800fab6:	d402      	bmi.n	800fabe <_fflush_r+0x32>
 800fab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800faba:	f7fe fbf2 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800fabe:	4628      	mov	r0, r5
 800fac0:	4621      	mov	r1, r4
 800fac2:	f7ff ff5f 	bl	800f984 <__sflush_r>
 800fac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fac8:	07da      	lsls	r2, r3, #31
 800faca:	4605      	mov	r5, r0
 800facc:	d4e4      	bmi.n	800fa98 <_fflush_r+0xc>
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	059b      	lsls	r3, r3, #22
 800fad2:	d4e1      	bmi.n	800fa98 <_fflush_r+0xc>
 800fad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fad6:	f7fe fbe5 	bl	800e2a4 <__retarget_lock_release_recursive>
 800fada:	e7dd      	b.n	800fa98 <_fflush_r+0xc>

0800fadc <__swhatbuf_r>:
 800fadc:	b570      	push	{r4, r5, r6, lr}
 800fade:	460c      	mov	r4, r1
 800fae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae4:	2900      	cmp	r1, #0
 800fae6:	b096      	sub	sp, #88	@ 0x58
 800fae8:	4615      	mov	r5, r2
 800faea:	461e      	mov	r6, r3
 800faec:	da0d      	bge.n	800fb0a <__swhatbuf_r+0x2e>
 800faee:	89a3      	ldrh	r3, [r4, #12]
 800faf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faf4:	f04f 0100 	mov.w	r1, #0
 800faf8:	bf14      	ite	ne
 800fafa:	2340      	movne	r3, #64	@ 0x40
 800fafc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb00:	2000      	movs	r0, #0
 800fb02:	6031      	str	r1, [r6, #0]
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	b016      	add	sp, #88	@ 0x58
 800fb08:	bd70      	pop	{r4, r5, r6, pc}
 800fb0a:	466a      	mov	r2, sp
 800fb0c:	f000 f87c 	bl	800fc08 <_fstat_r>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	dbec      	blt.n	800faee <__swhatbuf_r+0x12>
 800fb14:	9901      	ldr	r1, [sp, #4]
 800fb16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb1e:	4259      	negs	r1, r3
 800fb20:	4159      	adcs	r1, r3
 800fb22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb26:	e7eb      	b.n	800fb00 <__swhatbuf_r+0x24>

0800fb28 <__smakebuf_r>:
 800fb28:	898b      	ldrh	r3, [r1, #12]
 800fb2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb2c:	079d      	lsls	r5, r3, #30
 800fb2e:	4606      	mov	r6, r0
 800fb30:	460c      	mov	r4, r1
 800fb32:	d507      	bpl.n	800fb44 <__smakebuf_r+0x1c>
 800fb34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	6123      	str	r3, [r4, #16]
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	6163      	str	r3, [r4, #20]
 800fb40:	b003      	add	sp, #12
 800fb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb44:	ab01      	add	r3, sp, #4
 800fb46:	466a      	mov	r2, sp
 800fb48:	f7ff ffc8 	bl	800fadc <__swhatbuf_r>
 800fb4c:	9f00      	ldr	r7, [sp, #0]
 800fb4e:	4605      	mov	r5, r0
 800fb50:	4639      	mov	r1, r7
 800fb52:	4630      	mov	r0, r6
 800fb54:	f7fd fc24 	bl	800d3a0 <_malloc_r>
 800fb58:	b948      	cbnz	r0, 800fb6e <__smakebuf_r+0x46>
 800fb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb5e:	059a      	lsls	r2, r3, #22
 800fb60:	d4ee      	bmi.n	800fb40 <__smakebuf_r+0x18>
 800fb62:	f023 0303 	bic.w	r3, r3, #3
 800fb66:	f043 0302 	orr.w	r3, r3, #2
 800fb6a:	81a3      	strh	r3, [r4, #12]
 800fb6c:	e7e2      	b.n	800fb34 <__smakebuf_r+0xc>
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	6020      	str	r0, [r4, #0]
 800fb72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb76:	81a3      	strh	r3, [r4, #12]
 800fb78:	9b01      	ldr	r3, [sp, #4]
 800fb7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb7e:	b15b      	cbz	r3, 800fb98 <__smakebuf_r+0x70>
 800fb80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb84:	4630      	mov	r0, r6
 800fb86:	f000 f851 	bl	800fc2c <_isatty_r>
 800fb8a:	b128      	cbz	r0, 800fb98 <__smakebuf_r+0x70>
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	f023 0303 	bic.w	r3, r3, #3
 800fb92:	f043 0301 	orr.w	r3, r3, #1
 800fb96:	81a3      	strh	r3, [r4, #12]
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	431d      	orrs	r5, r3
 800fb9c:	81a5      	strh	r5, [r4, #12]
 800fb9e:	e7cf      	b.n	800fb40 <__smakebuf_r+0x18>

0800fba0 <_putc_r>:
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	460d      	mov	r5, r1
 800fba4:	4614      	mov	r4, r2
 800fba6:	4606      	mov	r6, r0
 800fba8:	b118      	cbz	r0, 800fbb2 <_putc_r+0x12>
 800fbaa:	6a03      	ldr	r3, [r0, #32]
 800fbac:	b90b      	cbnz	r3, 800fbb2 <_putc_r+0x12>
 800fbae:	f7fe f965 	bl	800de7c <__sinit>
 800fbb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbb4:	07d8      	lsls	r0, r3, #31
 800fbb6:	d405      	bmi.n	800fbc4 <_putc_r+0x24>
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	0599      	lsls	r1, r3, #22
 800fbbc:	d402      	bmi.n	800fbc4 <_putc_r+0x24>
 800fbbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbc0:	f7fe fb6f 	bl	800e2a2 <__retarget_lock_acquire_recursive>
 800fbc4:	68a3      	ldr	r3, [r4, #8]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	60a3      	str	r3, [r4, #8]
 800fbcc:	da05      	bge.n	800fbda <_putc_r+0x3a>
 800fbce:	69a2      	ldr	r2, [r4, #24]
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	db12      	blt.n	800fbfa <_putc_r+0x5a>
 800fbd4:	b2eb      	uxtb	r3, r5
 800fbd6:	2b0a      	cmp	r3, #10
 800fbd8:	d00f      	beq.n	800fbfa <_putc_r+0x5a>
 800fbda:	6823      	ldr	r3, [r4, #0]
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	6022      	str	r2, [r4, #0]
 800fbe0:	701d      	strb	r5, [r3, #0]
 800fbe2:	b2ed      	uxtb	r5, r5
 800fbe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbe6:	07da      	lsls	r2, r3, #31
 800fbe8:	d405      	bmi.n	800fbf6 <_putc_r+0x56>
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	059b      	lsls	r3, r3, #22
 800fbee:	d402      	bmi.n	800fbf6 <_putc_r+0x56>
 800fbf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbf2:	f7fe fb57 	bl	800e2a4 <__retarget_lock_release_recursive>
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	bd70      	pop	{r4, r5, r6, pc}
 800fbfa:	4629      	mov	r1, r5
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f7fe fa2d 	bl	800e05e <__swbuf_r>
 800fc04:	4605      	mov	r5, r0
 800fc06:	e7ed      	b.n	800fbe4 <_putc_r+0x44>

0800fc08 <_fstat_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d07      	ldr	r5, [pc, #28]	@ (800fc28 <_fstat_r+0x20>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	4611      	mov	r1, r2
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	f7f4 fc99 	bl	800454c <_fstat>
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	d102      	bne.n	800fc24 <_fstat_r+0x1c>
 800fc1e:	682b      	ldr	r3, [r5, #0]
 800fc20:	b103      	cbz	r3, 800fc24 <_fstat_r+0x1c>
 800fc22:	6023      	str	r3, [r4, #0]
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop
 800fc28:	20002584 	.word	0x20002584

0800fc2c <_isatty_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d06      	ldr	r5, [pc, #24]	@ (800fc48 <_isatty_r+0x1c>)
 800fc30:	2300      	movs	r3, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	4608      	mov	r0, r1
 800fc36:	602b      	str	r3, [r5, #0]
 800fc38:	f7f4 fc98 	bl	800456c <_isatty>
 800fc3c:	1c43      	adds	r3, r0, #1
 800fc3e:	d102      	bne.n	800fc46 <_isatty_r+0x1a>
 800fc40:	682b      	ldr	r3, [r5, #0]
 800fc42:	b103      	cbz	r3, 800fc46 <_isatty_r+0x1a>
 800fc44:	6023      	str	r3, [r4, #0]
 800fc46:	bd38      	pop	{r3, r4, r5, pc}
 800fc48:	20002584 	.word	0x20002584

0800fc4c <__assert_func>:
 800fc4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc4e:	4614      	mov	r4, r2
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b09      	ldr	r3, [pc, #36]	@ (800fc78 <__assert_func+0x2c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4605      	mov	r5, r0
 800fc58:	68d8      	ldr	r0, [r3, #12]
 800fc5a:	b14c      	cbz	r4, 800fc70 <__assert_func+0x24>
 800fc5c:	4b07      	ldr	r3, [pc, #28]	@ (800fc7c <__assert_func+0x30>)
 800fc5e:	9100      	str	r1, [sp, #0]
 800fc60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc64:	4906      	ldr	r1, [pc, #24]	@ (800fc80 <__assert_func+0x34>)
 800fc66:	462b      	mov	r3, r5
 800fc68:	f000 f842 	bl	800fcf0 <fiprintf>
 800fc6c:	f000 f852 	bl	800fd14 <abort>
 800fc70:	4b04      	ldr	r3, [pc, #16]	@ (800fc84 <__assert_func+0x38>)
 800fc72:	461c      	mov	r4, r3
 800fc74:	e7f3      	b.n	800fc5e <__assert_func+0x12>
 800fc76:	bf00      	nop
 800fc78:	20000138 	.word	0x20000138
 800fc7c:	08010b55 	.word	0x08010b55
 800fc80:	08010b62 	.word	0x08010b62
 800fc84:	08010b90 	.word	0x08010b90

0800fc88 <_calloc_r>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	fba1 5402 	umull	r5, r4, r1, r2
 800fc8e:	b934      	cbnz	r4, 800fc9e <_calloc_r+0x16>
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7fd fb85 	bl	800d3a0 <_malloc_r>
 800fc96:	4606      	mov	r6, r0
 800fc98:	b928      	cbnz	r0, 800fca6 <_calloc_r+0x1e>
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	bd70      	pop	{r4, r5, r6, pc}
 800fc9e:	220c      	movs	r2, #12
 800fca0:	6002      	str	r2, [r0, #0]
 800fca2:	2600      	movs	r6, #0
 800fca4:	e7f9      	b.n	800fc9a <_calloc_r+0x12>
 800fca6:	462a      	mov	r2, r5
 800fca8:	4621      	mov	r1, r4
 800fcaa:	f7fe fa6d 	bl	800e188 <memset>
 800fcae:	e7f4      	b.n	800fc9a <_calloc_r+0x12>

0800fcb0 <__ascii_mbtowc>:
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	b901      	cbnz	r1, 800fcb6 <__ascii_mbtowc+0x6>
 800fcb4:	a901      	add	r1, sp, #4
 800fcb6:	b142      	cbz	r2, 800fcca <__ascii_mbtowc+0x1a>
 800fcb8:	b14b      	cbz	r3, 800fcce <__ascii_mbtowc+0x1e>
 800fcba:	7813      	ldrb	r3, [r2, #0]
 800fcbc:	600b      	str	r3, [r1, #0]
 800fcbe:	7812      	ldrb	r2, [r2, #0]
 800fcc0:	1e10      	subs	r0, r2, #0
 800fcc2:	bf18      	it	ne
 800fcc4:	2001      	movne	r0, #1
 800fcc6:	b002      	add	sp, #8
 800fcc8:	4770      	bx	lr
 800fcca:	4610      	mov	r0, r2
 800fccc:	e7fb      	b.n	800fcc6 <__ascii_mbtowc+0x16>
 800fcce:	f06f 0001 	mvn.w	r0, #1
 800fcd2:	e7f8      	b.n	800fcc6 <__ascii_mbtowc+0x16>

0800fcd4 <__ascii_wctomb>:
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	4608      	mov	r0, r1
 800fcd8:	b141      	cbz	r1, 800fcec <__ascii_wctomb+0x18>
 800fcda:	2aff      	cmp	r2, #255	@ 0xff
 800fcdc:	d904      	bls.n	800fce8 <__ascii_wctomb+0x14>
 800fcde:	228a      	movs	r2, #138	@ 0x8a
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	f04f 30ff 	mov.w	r0, #4294967295
 800fce6:	4770      	bx	lr
 800fce8:	700a      	strb	r2, [r1, #0]
 800fcea:	2001      	movs	r0, #1
 800fcec:	4770      	bx	lr
	...

0800fcf0 <fiprintf>:
 800fcf0:	b40e      	push	{r1, r2, r3}
 800fcf2:	b503      	push	{r0, r1, lr}
 800fcf4:	4601      	mov	r1, r0
 800fcf6:	ab03      	add	r3, sp, #12
 800fcf8:	4805      	ldr	r0, [pc, #20]	@ (800fd10 <fiprintf+0x20>)
 800fcfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcfe:	6800      	ldr	r0, [r0, #0]
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	f7ff fd27 	bl	800f754 <_vfiprintf_r>
 800fd06:	b002      	add	sp, #8
 800fd08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd0c:	b003      	add	sp, #12
 800fd0e:	4770      	bx	lr
 800fd10:	20000138 	.word	0x20000138

0800fd14 <abort>:
 800fd14:	b508      	push	{r3, lr}
 800fd16:	2006      	movs	r0, #6
 800fd18:	f000 f82c 	bl	800fd74 <raise>
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	f7f4 fbe1 	bl	80044e4 <_exit>

0800fd22 <_raise_r>:
 800fd22:	291f      	cmp	r1, #31
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4605      	mov	r5, r0
 800fd28:	460c      	mov	r4, r1
 800fd2a:	d904      	bls.n	800fd36 <_raise_r+0x14>
 800fd2c:	2316      	movs	r3, #22
 800fd2e:	6003      	str	r3, [r0, #0]
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295
 800fd34:	bd38      	pop	{r3, r4, r5, pc}
 800fd36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd38:	b112      	cbz	r2, 800fd40 <_raise_r+0x1e>
 800fd3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd3e:	b94b      	cbnz	r3, 800fd54 <_raise_r+0x32>
 800fd40:	4628      	mov	r0, r5
 800fd42:	f000 f831 	bl	800fda8 <_getpid_r>
 800fd46:	4622      	mov	r2, r4
 800fd48:	4601      	mov	r1, r0
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd50:	f000 b818 	b.w	800fd84 <_kill_r>
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d00a      	beq.n	800fd6e <_raise_r+0x4c>
 800fd58:	1c59      	adds	r1, r3, #1
 800fd5a:	d103      	bne.n	800fd64 <_raise_r+0x42>
 800fd5c:	2316      	movs	r3, #22
 800fd5e:	6003      	str	r3, [r0, #0]
 800fd60:	2001      	movs	r0, #1
 800fd62:	e7e7      	b.n	800fd34 <_raise_r+0x12>
 800fd64:	2100      	movs	r1, #0
 800fd66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	4798      	blx	r3
 800fd6e:	2000      	movs	r0, #0
 800fd70:	e7e0      	b.n	800fd34 <_raise_r+0x12>
	...

0800fd74 <raise>:
 800fd74:	4b02      	ldr	r3, [pc, #8]	@ (800fd80 <raise+0xc>)
 800fd76:	4601      	mov	r1, r0
 800fd78:	6818      	ldr	r0, [r3, #0]
 800fd7a:	f7ff bfd2 	b.w	800fd22 <_raise_r>
 800fd7e:	bf00      	nop
 800fd80:	20000138 	.word	0x20000138

0800fd84 <_kill_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	4d07      	ldr	r5, [pc, #28]	@ (800fda4 <_kill_r+0x20>)
 800fd88:	2300      	movs	r3, #0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	4611      	mov	r1, r2
 800fd90:	602b      	str	r3, [r5, #0]
 800fd92:	f7f4 fb97 	bl	80044c4 <_kill>
 800fd96:	1c43      	adds	r3, r0, #1
 800fd98:	d102      	bne.n	800fda0 <_kill_r+0x1c>
 800fd9a:	682b      	ldr	r3, [r5, #0]
 800fd9c:	b103      	cbz	r3, 800fda0 <_kill_r+0x1c>
 800fd9e:	6023      	str	r3, [r4, #0]
 800fda0:	bd38      	pop	{r3, r4, r5, pc}
 800fda2:	bf00      	nop
 800fda4:	20002584 	.word	0x20002584

0800fda8 <_getpid_r>:
 800fda8:	f7f4 bb84 	b.w	80044b4 <_getpid>
 800fdac:	0000      	movs	r0, r0
	...

0800fdb0 <exp>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	ed2d 8b02 	vpush	{d8}
 800fdb6:	ec55 4b10 	vmov	r4, r5, d0
 800fdba:	f000 f895 	bl	800fee8 <__ieee754_exp>
 800fdbe:	eeb0 8a40 	vmov.f32	s16, s0
 800fdc2:	eef0 8a60 	vmov.f32	s17, s1
 800fdc6:	ec45 4b10 	vmov	d0, r4, r5
 800fdca:	f000 f877 	bl	800febc <finite>
 800fdce:	b168      	cbz	r0, 800fdec <exp+0x3c>
 800fdd0:	a317      	add	r3, pc, #92	@ (adr r3, 800fe30 <exp+0x80>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	4629      	mov	r1, r5
 800fdda:	f7f0 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 800fdde:	b160      	cbz	r0, 800fdfa <exp+0x4a>
 800fde0:	f7fe fa34 	bl	800e24c <__errno>
 800fde4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800fe20 <exp+0x70>
 800fde8:	2322      	movs	r3, #34	@ 0x22
 800fdea:	6003      	str	r3, [r0, #0]
 800fdec:	eeb0 0a48 	vmov.f32	s0, s16
 800fdf0:	eef0 0a68 	vmov.f32	s1, s17
 800fdf4:	ecbd 8b02 	vpop	{d8}
 800fdf8:	bd38      	pop	{r3, r4, r5, pc}
 800fdfa:	a30f      	add	r3, pc, #60	@ (adr r3, 800fe38 <exp+0x88>)
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	4620      	mov	r0, r4
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7f0 fe6a 	bl	8000adc <__aeabi_dcmplt>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d0ef      	beq.n	800fdec <exp+0x3c>
 800fe0c:	f7fe fa1e 	bl	800e24c <__errno>
 800fe10:	2322      	movs	r3, #34	@ 0x22
 800fe12:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800fe28 <exp+0x78>
 800fe16:	6003      	str	r3, [r0, #0]
 800fe18:	e7e8      	b.n	800fdec <exp+0x3c>
 800fe1a:	bf00      	nop
 800fe1c:	f3af 8000 	nop.w
 800fe20:	00000000 	.word	0x00000000
 800fe24:	7ff00000 	.word	0x7ff00000
	...
 800fe30:	fefa39ef 	.word	0xfefa39ef
 800fe34:	40862e42 	.word	0x40862e42
 800fe38:	d52d3051 	.word	0xd52d3051
 800fe3c:	c0874910 	.word	0xc0874910

0800fe40 <log>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	ed2d 8b02 	vpush	{d8}
 800fe46:	ec55 4b10 	vmov	r4, r5, d0
 800fe4a:	f000 f9c9 	bl	80101e0 <__ieee754_log>
 800fe4e:	4622      	mov	r2, r4
 800fe50:	462b      	mov	r3, r5
 800fe52:	4620      	mov	r0, r4
 800fe54:	4629      	mov	r1, r5
 800fe56:	eeb0 8a40 	vmov.f32	s16, s0
 800fe5a:	eef0 8a60 	vmov.f32	s17, s1
 800fe5e:	f7f0 fe65 	bl	8000b2c <__aeabi_dcmpun>
 800fe62:	b998      	cbnz	r0, 800fe8c <log+0x4c>
 800fe64:	2200      	movs	r2, #0
 800fe66:	2300      	movs	r3, #0
 800fe68:	4620      	mov	r0, r4
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	f7f0 fe54 	bl	8000b18 <__aeabi_dcmpgt>
 800fe70:	b960      	cbnz	r0, 800fe8c <log+0x4c>
 800fe72:	2200      	movs	r2, #0
 800fe74:	2300      	movs	r3, #0
 800fe76:	4620      	mov	r0, r4
 800fe78:	4629      	mov	r1, r5
 800fe7a:	f7f0 fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe7e:	b160      	cbz	r0, 800fe9a <log+0x5a>
 800fe80:	f7fe f9e4 	bl	800e24c <__errno>
 800fe84:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800feb0 <log+0x70>
 800fe88:	2322      	movs	r3, #34	@ 0x22
 800fe8a:	6003      	str	r3, [r0, #0]
 800fe8c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe90:	eef0 0a68 	vmov.f32	s1, s17
 800fe94:	ecbd 8b02 	vpop	{d8}
 800fe98:	bd38      	pop	{r3, r4, r5, pc}
 800fe9a:	f7fe f9d7 	bl	800e24c <__errno>
 800fe9e:	ecbd 8b02 	vpop	{d8}
 800fea2:	2321      	movs	r3, #33	@ 0x21
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feaa:	4803      	ldr	r0, [pc, #12]	@ (800feb8 <log+0x78>)
 800feac:	f000 b814 	b.w	800fed8 <nan>
 800feb0:	00000000 	.word	0x00000000
 800feb4:	fff00000 	.word	0xfff00000
 800feb8:	08010b90 	.word	0x08010b90

0800febc <finite>:
 800febc:	b082      	sub	sp, #8
 800febe:	ed8d 0b00 	vstr	d0, [sp]
 800fec2:	9801      	ldr	r0, [sp, #4]
 800fec4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fec8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fecc:	0fc0      	lsrs	r0, r0, #31
 800fece:	b002      	add	sp, #8
 800fed0:	4770      	bx	lr
 800fed2:	0000      	movs	r0, r0
 800fed4:	0000      	movs	r0, r0
	...

0800fed8 <nan>:
 800fed8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fee0 <nan+0x8>
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	00000000 	.word	0x00000000
 800fee4:	7ff80000 	.word	0x7ff80000

0800fee8 <__ieee754_exp>:
 800fee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800feec:	ec55 4b10 	vmov	r4, r5, d0
 800fef0:	49b1      	ldr	r1, [pc, #708]	@ (80101b8 <__ieee754_exp+0x2d0>)
 800fef2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fef6:	428a      	cmp	r2, r1
 800fef8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800fefc:	d936      	bls.n	800ff6c <__ieee754_exp+0x84>
 800fefe:	49af      	ldr	r1, [pc, #700]	@ (80101bc <__ieee754_exp+0x2d4>)
 800ff00:	428a      	cmp	r2, r1
 800ff02:	d914      	bls.n	800ff2e <__ieee754_exp+0x46>
 800ff04:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ff08:	4323      	orrs	r3, r4
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	d007      	beq.n	800ff1e <__ieee754_exp+0x36>
 800ff0e:	462b      	mov	r3, r5
 800ff10:	4620      	mov	r0, r4
 800ff12:	4629      	mov	r1, r5
 800ff14:	f7f0 f9ba 	bl	800028c <__adddf3>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	460d      	mov	r5, r1
 800ff1c:	e002      	b.n	800ff24 <__ieee754_exp+0x3c>
 800ff1e:	2e00      	cmp	r6, #0
 800ff20:	f040 8118 	bne.w	8010154 <__ieee754_exp+0x26c>
 800ff24:	ec45 4b10 	vmov	d0, r4, r5
 800ff28:	b004      	add	sp, #16
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010160 <__ieee754_exp+0x278>)
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	4620      	mov	r0, r4
 800ff36:	4629      	mov	r1, r5
 800ff38:	f7f0 fdee 	bl	8000b18 <__aeabi_dcmpgt>
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	b128      	cbz	r0, 800ff4c <__ieee754_exp+0x64>
 800ff40:	2000      	movs	r0, #0
 800ff42:	b004      	add	sp, #16
 800ff44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff48:	f000 bb36 	b.w	80105b8 <__math_oflow>
 800ff4c:	a386      	add	r3, pc, #536	@ (adr r3, 8010168 <__ieee754_exp+0x280>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	4620      	mov	r0, r4
 800ff54:	4629      	mov	r1, r5
 800ff56:	f7f0 fdc1 	bl	8000adc <__aeabi_dcmplt>
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	f000 8087 	beq.w	801006e <__ieee754_exp+0x186>
 800ff60:	4638      	mov	r0, r7
 800ff62:	b004      	add	sp, #16
 800ff64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff68:	f000 bb1e 	b.w	80105a8 <__math_uflow>
 800ff6c:	4b94      	ldr	r3, [pc, #592]	@ (80101c0 <__ieee754_exp+0x2d8>)
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	f240 80a9 	bls.w	80100c6 <__ieee754_exp+0x1de>
 800ff74:	4b93      	ldr	r3, [pc, #588]	@ (80101c4 <__ieee754_exp+0x2dc>)
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d879      	bhi.n	801006e <__ieee754_exp+0x186>
 800ff7a:	4b93      	ldr	r3, [pc, #588]	@ (80101c8 <__ieee754_exp+0x2e0>)
 800ff7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	4620      	mov	r0, r4
 800ff86:	4629      	mov	r1, r5
 800ff88:	f7f0 f97e 	bl	8000288 <__aeabi_dsub>
 800ff8c:	4b8f      	ldr	r3, [pc, #572]	@ (80101cc <__ieee754_exp+0x2e4>)
 800ff8e:	00f7      	lsls	r7, r6, #3
 800ff90:	443b      	add	r3, r7
 800ff92:	ed93 7b00 	vldr	d7, [r3]
 800ff96:	ed8d 7b00 	vstr	d7, [sp]
 800ff9a:	f086 0a01 	eor.w	sl, r6, #1
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4689      	mov	r9, r1
 800ffa2:	ebaa 0a06 	sub.w	sl, sl, r6
 800ffa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffaa:	4640      	mov	r0, r8
 800ffac:	4649      	mov	r1, r9
 800ffae:	f7f0 f96b 	bl	8000288 <__aeabi_dsub>
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	460d      	mov	r5, r1
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	462b      	mov	r3, r5
 800ffba:	4620      	mov	r0, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	f7f0 fb1b 	bl	80005f8 <__aeabi_dmul>
 800ffc2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010170 <__ieee754_exp+0x288>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460f      	mov	r7, r1
 800ffcc:	f7f0 fb14 	bl	80005f8 <__aeabi_dmul>
 800ffd0:	a369      	add	r3, pc, #420	@ (adr r3, 8010178 <__ieee754_exp+0x290>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 f957 	bl	8000288 <__aeabi_dsub>
 800ffda:	4632      	mov	r2, r6
 800ffdc:	463b      	mov	r3, r7
 800ffde:	f7f0 fb0b 	bl	80005f8 <__aeabi_dmul>
 800ffe2:	a367      	add	r3, pc, #412	@ (adr r3, 8010180 <__ieee754_exp+0x298>)
 800ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe8:	f7f0 f950 	bl	800028c <__adddf3>
 800ffec:	4632      	mov	r2, r6
 800ffee:	463b      	mov	r3, r7
 800fff0:	f7f0 fb02 	bl	80005f8 <__aeabi_dmul>
 800fff4:	a364      	add	r3, pc, #400	@ (adr r3, 8010188 <__ieee754_exp+0x2a0>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	f7f0 f945 	bl	8000288 <__aeabi_dsub>
 800fffe:	4632      	mov	r2, r6
 8010000:	463b      	mov	r3, r7
 8010002:	f7f0 faf9 	bl	80005f8 <__aeabi_dmul>
 8010006:	a362      	add	r3, pc, #392	@ (adr r3, 8010190 <__ieee754_exp+0x2a8>)
 8010008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000c:	f7f0 f93e 	bl	800028c <__adddf3>
 8010010:	4632      	mov	r2, r6
 8010012:	463b      	mov	r3, r7
 8010014:	f7f0 faf0 	bl	80005f8 <__aeabi_dmul>
 8010018:	4602      	mov	r2, r0
 801001a:	460b      	mov	r3, r1
 801001c:	4620      	mov	r0, r4
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 f932 	bl	8000288 <__aeabi_dsub>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	4606      	mov	r6, r0
 801002a:	460f      	mov	r7, r1
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 fae2 	bl	80005f8 <__aeabi_dmul>
 8010034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010038:	f1ba 0f00 	cmp.w	sl, #0
 801003c:	d15c      	bne.n	80100f8 <__ieee754_exp+0x210>
 801003e:	2200      	movs	r2, #0
 8010040:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010044:	4630      	mov	r0, r6
 8010046:	4639      	mov	r1, r7
 8010048:	f7f0 f91e 	bl	8000288 <__aeabi_dsub>
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010054:	f7f0 fbfa 	bl	800084c <__aeabi_ddiv>
 8010058:	4622      	mov	r2, r4
 801005a:	462b      	mov	r3, r5
 801005c:	f7f0 f914 	bl	8000288 <__aeabi_dsub>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	2000      	movs	r0, #0
 8010066:	495a      	ldr	r1, [pc, #360]	@ (80101d0 <__ieee754_exp+0x2e8>)
 8010068:	f7f0 f90e 	bl	8000288 <__aeabi_dsub>
 801006c:	e754      	b.n	800ff18 <__ieee754_exp+0x30>
 801006e:	4b59      	ldr	r3, [pc, #356]	@ (80101d4 <__ieee754_exp+0x2ec>)
 8010070:	4620      	mov	r0, r4
 8010072:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010076:	4629      	mov	r1, r5
 8010078:	a347      	add	r3, pc, #284	@ (adr r3, 8010198 <__ieee754_exp+0x2b0>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	f7f0 fabb 	bl	80005f8 <__aeabi_dmul>
 8010082:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010086:	f7f0 f901 	bl	800028c <__adddf3>
 801008a:	f7f0 fd65 	bl	8000b58 <__aeabi_d2iz>
 801008e:	4682      	mov	sl, r0
 8010090:	f7f0 fa48 	bl	8000524 <__aeabi_i2d>
 8010094:	a342      	add	r3, pc, #264	@ (adr r3, 80101a0 <__ieee754_exp+0x2b8>)
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	4606      	mov	r6, r0
 801009c:	460f      	mov	r7, r1
 801009e:	f7f0 faab 	bl	80005f8 <__aeabi_dmul>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 f8ed 	bl	8000288 <__aeabi_dsub>
 80100ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80101a8 <__ieee754_exp+0x2c0>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	4680      	mov	r8, r0
 80100b6:	4689      	mov	r9, r1
 80100b8:	4630      	mov	r0, r6
 80100ba:	4639      	mov	r1, r7
 80100bc:	f7f0 fa9c 	bl	80005f8 <__aeabi_dmul>
 80100c0:	e9cd 0100 	strd	r0, r1, [sp]
 80100c4:	e76f      	b.n	800ffa6 <__ieee754_exp+0xbe>
 80100c6:	4b44      	ldr	r3, [pc, #272]	@ (80101d8 <__ieee754_exp+0x2f0>)
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d810      	bhi.n	80100ee <__ieee754_exp+0x206>
 80100cc:	a338      	add	r3, pc, #224	@ (adr r3, 80101b0 <__ieee754_exp+0x2c8>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	4620      	mov	r0, r4
 80100d4:	4629      	mov	r1, r5
 80100d6:	f7f0 f8d9 	bl	800028c <__adddf3>
 80100da:	4b3d      	ldr	r3, [pc, #244]	@ (80101d0 <__ieee754_exp+0x2e8>)
 80100dc:	2200      	movs	r2, #0
 80100de:	f7f0 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80100e2:	b138      	cbz	r0, 80100f4 <__ieee754_exp+0x20c>
 80100e4:	4b3a      	ldr	r3, [pc, #232]	@ (80101d0 <__ieee754_exp+0x2e8>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	4620      	mov	r0, r4
 80100ea:	4629      	mov	r1, r5
 80100ec:	e712      	b.n	800ff14 <__ieee754_exp+0x2c>
 80100ee:	f04f 0a00 	mov.w	sl, #0
 80100f2:	e760      	b.n	800ffb6 <__ieee754_exp+0xce>
 80100f4:	4682      	mov	sl, r0
 80100f6:	e75e      	b.n	800ffb6 <__ieee754_exp+0xce>
 80100f8:	4632      	mov	r2, r6
 80100fa:	463b      	mov	r3, r7
 80100fc:	2000      	movs	r0, #0
 80100fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8010102:	f7f0 f8c1 	bl	8000288 <__aeabi_dsub>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801010e:	f7f0 fb9d 	bl	800084c <__aeabi_ddiv>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	e9dd 0100 	ldrd	r0, r1, [sp]
 801011a:	f7f0 f8b5 	bl	8000288 <__aeabi_dsub>
 801011e:	4642      	mov	r2, r8
 8010120:	464b      	mov	r3, r9
 8010122:	f7f0 f8b1 	bl	8000288 <__aeabi_dsub>
 8010126:	4602      	mov	r2, r0
 8010128:	460b      	mov	r3, r1
 801012a:	2000      	movs	r0, #0
 801012c:	4928      	ldr	r1, [pc, #160]	@ (80101d0 <__ieee754_exp+0x2e8>)
 801012e:	f7f0 f8ab 	bl	8000288 <__aeabi_dsub>
 8010132:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8010136:	4592      	cmp	sl, r2
 8010138:	db02      	blt.n	8010140 <__ieee754_exp+0x258>
 801013a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801013e:	e6eb      	b.n	800ff18 <__ieee754_exp+0x30>
 8010140:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8010144:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010148:	2200      	movs	r2, #0
 801014a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 801014e:	f7f0 fa53 	bl	80005f8 <__aeabi_dmul>
 8010152:	e6e1      	b.n	800ff18 <__ieee754_exp+0x30>
 8010154:	2400      	movs	r4, #0
 8010156:	2500      	movs	r5, #0
 8010158:	e6e4      	b.n	800ff24 <__ieee754_exp+0x3c>
 801015a:	bf00      	nop
 801015c:	f3af 8000 	nop.w
 8010160:	fefa39ef 	.word	0xfefa39ef
 8010164:	40862e42 	.word	0x40862e42
 8010168:	d52d3051 	.word	0xd52d3051
 801016c:	c0874910 	.word	0xc0874910
 8010170:	72bea4d0 	.word	0x72bea4d0
 8010174:	3e663769 	.word	0x3e663769
 8010178:	c5d26bf1 	.word	0xc5d26bf1
 801017c:	3ebbbd41 	.word	0x3ebbbd41
 8010180:	af25de2c 	.word	0xaf25de2c
 8010184:	3f11566a 	.word	0x3f11566a
 8010188:	16bebd93 	.word	0x16bebd93
 801018c:	3f66c16c 	.word	0x3f66c16c
 8010190:	5555553e 	.word	0x5555553e
 8010194:	3fc55555 	.word	0x3fc55555
 8010198:	652b82fe 	.word	0x652b82fe
 801019c:	3ff71547 	.word	0x3ff71547
 80101a0:	fee00000 	.word	0xfee00000
 80101a4:	3fe62e42 	.word	0x3fe62e42
 80101a8:	35793c76 	.word	0x35793c76
 80101ac:	3dea39ef 	.word	0x3dea39ef
 80101b0:	8800759c 	.word	0x8800759c
 80101b4:	7e37e43c 	.word	0x7e37e43c
 80101b8:	40862e41 	.word	0x40862e41
 80101bc:	7fefffff 	.word	0x7fefffff
 80101c0:	3fd62e42 	.word	0x3fd62e42
 80101c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80101c8:	08010da8 	.word	0x08010da8
 80101cc:	08010d98 	.word	0x08010d98
 80101d0:	3ff00000 	.word	0x3ff00000
 80101d4:	08010db8 	.word	0x08010db8
 80101d8:	3defffff 	.word	0x3defffff
 80101dc:	00000000 	.word	0x00000000

080101e0 <__ieee754_log>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	ec51 0b10 	vmov	r0, r1, d0
 80101e8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80101ec:	b087      	sub	sp, #28
 80101ee:	460d      	mov	r5, r1
 80101f0:	da26      	bge.n	8010240 <__ieee754_log+0x60>
 80101f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80101f6:	4303      	orrs	r3, r0
 80101f8:	4602      	mov	r2, r0
 80101fa:	d10a      	bne.n	8010212 <__ieee754_log+0x32>
 80101fc:	49ce      	ldr	r1, [pc, #824]	@ (8010538 <__ieee754_log+0x358>)
 80101fe:	2200      	movs	r2, #0
 8010200:	2300      	movs	r3, #0
 8010202:	2000      	movs	r0, #0
 8010204:	f7f0 fb22 	bl	800084c <__aeabi_ddiv>
 8010208:	ec41 0b10 	vmov	d0, r0, r1
 801020c:	b007      	add	sp, #28
 801020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010212:	2900      	cmp	r1, #0
 8010214:	da05      	bge.n	8010222 <__ieee754_log+0x42>
 8010216:	460b      	mov	r3, r1
 8010218:	f7f0 f836 	bl	8000288 <__aeabi_dsub>
 801021c:	2200      	movs	r2, #0
 801021e:	2300      	movs	r3, #0
 8010220:	e7f0      	b.n	8010204 <__ieee754_log+0x24>
 8010222:	4bc6      	ldr	r3, [pc, #792]	@ (801053c <__ieee754_log+0x35c>)
 8010224:	2200      	movs	r2, #0
 8010226:	f7f0 f9e7 	bl	80005f8 <__aeabi_dmul>
 801022a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801022e:	460d      	mov	r5, r1
 8010230:	4ac3      	ldr	r2, [pc, #780]	@ (8010540 <__ieee754_log+0x360>)
 8010232:	4295      	cmp	r5, r2
 8010234:	dd06      	ble.n	8010244 <__ieee754_log+0x64>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	f7f0 f827 	bl	800028c <__adddf3>
 801023e:	e7e3      	b.n	8010208 <__ieee754_log+0x28>
 8010240:	2300      	movs	r3, #0
 8010242:	e7f5      	b.n	8010230 <__ieee754_log+0x50>
 8010244:	152c      	asrs	r4, r5, #20
 8010246:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801024a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801024e:	441c      	add	r4, r3
 8010250:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8010254:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8010258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801025c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8010260:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8010264:	ea42 0105 	orr.w	r1, r2, r5
 8010268:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801026c:	2200      	movs	r2, #0
 801026e:	4bb5      	ldr	r3, [pc, #724]	@ (8010544 <__ieee754_log+0x364>)
 8010270:	f7f0 f80a 	bl	8000288 <__aeabi_dsub>
 8010274:	1cab      	adds	r3, r5, #2
 8010276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801027a:	2b02      	cmp	r3, #2
 801027c:	4682      	mov	sl, r0
 801027e:	468b      	mov	fp, r1
 8010280:	f04f 0200 	mov.w	r2, #0
 8010284:	dc53      	bgt.n	801032e <__ieee754_log+0x14e>
 8010286:	2300      	movs	r3, #0
 8010288:	f7f0 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801028c:	b1d0      	cbz	r0, 80102c4 <__ieee754_log+0xe4>
 801028e:	2c00      	cmp	r4, #0
 8010290:	f000 8120 	beq.w	80104d4 <__ieee754_log+0x2f4>
 8010294:	4620      	mov	r0, r4
 8010296:	f7f0 f945 	bl	8000524 <__aeabi_i2d>
 801029a:	a391      	add	r3, pc, #580	@ (adr r3, 80104e0 <__ieee754_log+0x300>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	4606      	mov	r6, r0
 80102a2:	460f      	mov	r7, r1
 80102a4:	f7f0 f9a8 	bl	80005f8 <__aeabi_dmul>
 80102a8:	a38f      	add	r3, pc, #572	@ (adr r3, 80104e8 <__ieee754_log+0x308>)
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	4604      	mov	r4, r0
 80102b0:	460d      	mov	r5, r1
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	f7f0 f99f 	bl	80005f8 <__aeabi_dmul>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4620      	mov	r0, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	e7ba      	b.n	801023a <__ieee754_log+0x5a>
 80102c4:	a38a      	add	r3, pc, #552	@ (adr r3, 80104f0 <__ieee754_log+0x310>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	4650      	mov	r0, sl
 80102cc:	4659      	mov	r1, fp
 80102ce:	f7f0 f993 	bl	80005f8 <__aeabi_dmul>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	2000      	movs	r0, #0
 80102d8:	499b      	ldr	r1, [pc, #620]	@ (8010548 <__ieee754_log+0x368>)
 80102da:	f7ef ffd5 	bl	8000288 <__aeabi_dsub>
 80102de:	4652      	mov	r2, sl
 80102e0:	4606      	mov	r6, r0
 80102e2:	460f      	mov	r7, r1
 80102e4:	465b      	mov	r3, fp
 80102e6:	4650      	mov	r0, sl
 80102e8:	4659      	mov	r1, fp
 80102ea:	f7f0 f985 	bl	80005f8 <__aeabi_dmul>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	4630      	mov	r0, r6
 80102f4:	4639      	mov	r1, r7
 80102f6:	f7f0 f97f 	bl	80005f8 <__aeabi_dmul>
 80102fa:	4606      	mov	r6, r0
 80102fc:	460f      	mov	r7, r1
 80102fe:	b914      	cbnz	r4, 8010306 <__ieee754_log+0x126>
 8010300:	4632      	mov	r2, r6
 8010302:	463b      	mov	r3, r7
 8010304:	e0a0      	b.n	8010448 <__ieee754_log+0x268>
 8010306:	4620      	mov	r0, r4
 8010308:	f7f0 f90c 	bl	8000524 <__aeabi_i2d>
 801030c:	a374      	add	r3, pc, #464	@ (adr r3, 80104e0 <__ieee754_log+0x300>)
 801030e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010312:	4680      	mov	r8, r0
 8010314:	4689      	mov	r9, r1
 8010316:	f7f0 f96f 	bl	80005f8 <__aeabi_dmul>
 801031a:	a373      	add	r3, pc, #460	@ (adr r3, 80104e8 <__ieee754_log+0x308>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	4604      	mov	r4, r0
 8010322:	460d      	mov	r5, r1
 8010324:	4640      	mov	r0, r8
 8010326:	4649      	mov	r1, r9
 8010328:	f7f0 f966 	bl	80005f8 <__aeabi_dmul>
 801032c:	e0a5      	b.n	801047a <__ieee754_log+0x29a>
 801032e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010332:	f7ef ffab 	bl	800028c <__adddf3>
 8010336:	4602      	mov	r2, r0
 8010338:	460b      	mov	r3, r1
 801033a:	4650      	mov	r0, sl
 801033c:	4659      	mov	r1, fp
 801033e:	f7f0 fa85 	bl	800084c <__aeabi_ddiv>
 8010342:	e9cd 0100 	strd	r0, r1, [sp]
 8010346:	4620      	mov	r0, r4
 8010348:	f7f0 f8ec 	bl	8000524 <__aeabi_i2d>
 801034c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010354:	4610      	mov	r0, r2
 8010356:	4619      	mov	r1, r3
 8010358:	f7f0 f94e 	bl	80005f8 <__aeabi_dmul>
 801035c:	4602      	mov	r2, r0
 801035e:	460b      	mov	r3, r1
 8010360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010364:	f7f0 f948 	bl	80005f8 <__aeabi_dmul>
 8010368:	a363      	add	r3, pc, #396	@ (adr r3, 80104f8 <__ieee754_log+0x318>)
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	4680      	mov	r8, r0
 8010370:	4689      	mov	r9, r1
 8010372:	f7f0 f941 	bl	80005f8 <__aeabi_dmul>
 8010376:	a362      	add	r3, pc, #392	@ (adr r3, 8010500 <__ieee754_log+0x320>)
 8010378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037c:	f7ef ff86 	bl	800028c <__adddf3>
 8010380:	4642      	mov	r2, r8
 8010382:	464b      	mov	r3, r9
 8010384:	f7f0 f938 	bl	80005f8 <__aeabi_dmul>
 8010388:	a35f      	add	r3, pc, #380	@ (adr r3, 8010508 <__ieee754_log+0x328>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f7ef ff7d 	bl	800028c <__adddf3>
 8010392:	4642      	mov	r2, r8
 8010394:	464b      	mov	r3, r9
 8010396:	f7f0 f92f 	bl	80005f8 <__aeabi_dmul>
 801039a:	a35d      	add	r3, pc, #372	@ (adr r3, 8010510 <__ieee754_log+0x330>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	f7ef ff74 	bl	800028c <__adddf3>
 80103a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103a8:	f7f0 f926 	bl	80005f8 <__aeabi_dmul>
 80103ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8010518 <__ieee754_log+0x338>)
 80103ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103b6:	4640      	mov	r0, r8
 80103b8:	4649      	mov	r1, r9
 80103ba:	f7f0 f91d 	bl	80005f8 <__aeabi_dmul>
 80103be:	a358      	add	r3, pc, #352	@ (adr r3, 8010520 <__ieee754_log+0x340>)
 80103c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c4:	f7ef ff62 	bl	800028c <__adddf3>
 80103c8:	4642      	mov	r2, r8
 80103ca:	464b      	mov	r3, r9
 80103cc:	f7f0 f914 	bl	80005f8 <__aeabi_dmul>
 80103d0:	a355      	add	r3, pc, #340	@ (adr r3, 8010528 <__ieee754_log+0x348>)
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	f7ef ff59 	bl	800028c <__adddf3>
 80103da:	4642      	mov	r2, r8
 80103dc:	464b      	mov	r3, r9
 80103de:	f7f0 f90b 	bl	80005f8 <__aeabi_dmul>
 80103e2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80103e6:	4602      	mov	r2, r0
 80103e8:	460b      	mov	r3, r1
 80103ea:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80103ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103f2:	f7ef ff4b 	bl	800028c <__adddf3>
 80103f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80103fa:	3551      	adds	r5, #81	@ 0x51
 80103fc:	4335      	orrs	r5, r6
 80103fe:	2d00      	cmp	r5, #0
 8010400:	4680      	mov	r8, r0
 8010402:	4689      	mov	r9, r1
 8010404:	dd48      	ble.n	8010498 <__ieee754_log+0x2b8>
 8010406:	4b50      	ldr	r3, [pc, #320]	@ (8010548 <__ieee754_log+0x368>)
 8010408:	2200      	movs	r2, #0
 801040a:	4650      	mov	r0, sl
 801040c:	4659      	mov	r1, fp
 801040e:	f7f0 f8f3 	bl	80005f8 <__aeabi_dmul>
 8010412:	4652      	mov	r2, sl
 8010414:	465b      	mov	r3, fp
 8010416:	f7f0 f8ef 	bl	80005f8 <__aeabi_dmul>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	4606      	mov	r6, r0
 8010420:	460f      	mov	r7, r1
 8010422:	4640      	mov	r0, r8
 8010424:	4649      	mov	r1, r9
 8010426:	f7ef ff31 	bl	800028c <__adddf3>
 801042a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801042e:	f7f0 f8e3 	bl	80005f8 <__aeabi_dmul>
 8010432:	4680      	mov	r8, r0
 8010434:	4689      	mov	r9, r1
 8010436:	b964      	cbnz	r4, 8010452 <__ieee754_log+0x272>
 8010438:	4602      	mov	r2, r0
 801043a:	460b      	mov	r3, r1
 801043c:	4630      	mov	r0, r6
 801043e:	4639      	mov	r1, r7
 8010440:	f7ef ff22 	bl	8000288 <__aeabi_dsub>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	4650      	mov	r0, sl
 801044a:	4659      	mov	r1, fp
 801044c:	f7ef ff1c 	bl	8000288 <__aeabi_dsub>
 8010450:	e6da      	b.n	8010208 <__ieee754_log+0x28>
 8010452:	a323      	add	r3, pc, #140	@ (adr r3, 80104e0 <__ieee754_log+0x300>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801045c:	f7f0 f8cc 	bl	80005f8 <__aeabi_dmul>
 8010460:	a321      	add	r3, pc, #132	@ (adr r3, 80104e8 <__ieee754_log+0x308>)
 8010462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010466:	4604      	mov	r4, r0
 8010468:	460d      	mov	r5, r1
 801046a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801046e:	f7f0 f8c3 	bl	80005f8 <__aeabi_dmul>
 8010472:	4642      	mov	r2, r8
 8010474:	464b      	mov	r3, r9
 8010476:	f7ef ff09 	bl	800028c <__adddf3>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4630      	mov	r0, r6
 8010480:	4639      	mov	r1, r7
 8010482:	f7ef ff01 	bl	8000288 <__aeabi_dsub>
 8010486:	4652      	mov	r2, sl
 8010488:	465b      	mov	r3, fp
 801048a:	f7ef fefd 	bl	8000288 <__aeabi_dsub>
 801048e:	4602      	mov	r2, r0
 8010490:	460b      	mov	r3, r1
 8010492:	4620      	mov	r0, r4
 8010494:	4629      	mov	r1, r5
 8010496:	e7d9      	b.n	801044c <__ieee754_log+0x26c>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	4650      	mov	r0, sl
 801049e:	4659      	mov	r1, fp
 80104a0:	f7ef fef2 	bl	8000288 <__aeabi_dsub>
 80104a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104a8:	f7f0 f8a6 	bl	80005f8 <__aeabi_dmul>
 80104ac:	4606      	mov	r6, r0
 80104ae:	460f      	mov	r7, r1
 80104b0:	2c00      	cmp	r4, #0
 80104b2:	f43f af25 	beq.w	8010300 <__ieee754_log+0x120>
 80104b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80104e0 <__ieee754_log+0x300>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104c0:	f7f0 f89a 	bl	80005f8 <__aeabi_dmul>
 80104c4:	a308      	add	r3, pc, #32	@ (adr r3, 80104e8 <__ieee754_log+0x308>)
 80104c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d2:	e729      	b.n	8010328 <__ieee754_log+0x148>
 80104d4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010530 <__ieee754_log+0x350>
 80104d8:	e698      	b.n	801020c <__ieee754_log+0x2c>
 80104da:	bf00      	nop
 80104dc:	f3af 8000 	nop.w
 80104e0:	fee00000 	.word	0xfee00000
 80104e4:	3fe62e42 	.word	0x3fe62e42
 80104e8:	35793c76 	.word	0x35793c76
 80104ec:	3dea39ef 	.word	0x3dea39ef
 80104f0:	55555555 	.word	0x55555555
 80104f4:	3fd55555 	.word	0x3fd55555
 80104f8:	df3e5244 	.word	0xdf3e5244
 80104fc:	3fc2f112 	.word	0x3fc2f112
 8010500:	96cb03de 	.word	0x96cb03de
 8010504:	3fc74664 	.word	0x3fc74664
 8010508:	94229359 	.word	0x94229359
 801050c:	3fd24924 	.word	0x3fd24924
 8010510:	55555593 	.word	0x55555593
 8010514:	3fe55555 	.word	0x3fe55555
 8010518:	d078c69f 	.word	0xd078c69f
 801051c:	3fc39a09 	.word	0x3fc39a09
 8010520:	1d8e78af 	.word	0x1d8e78af
 8010524:	3fcc71c5 	.word	0x3fcc71c5
 8010528:	9997fa04 	.word	0x9997fa04
 801052c:	3fd99999 	.word	0x3fd99999
	...
 8010538:	c3500000 	.word	0xc3500000
 801053c:	43500000 	.word	0x43500000
 8010540:	7fefffff 	.word	0x7fefffff
 8010544:	3ff00000 	.word	0x3ff00000
 8010548:	3fe00000 	.word	0x3fe00000

0801054c <with_errno>:
 801054c:	b510      	push	{r4, lr}
 801054e:	ed2d 8b02 	vpush	{d8}
 8010552:	eeb0 8a40 	vmov.f32	s16, s0
 8010556:	eef0 8a60 	vmov.f32	s17, s1
 801055a:	4604      	mov	r4, r0
 801055c:	f7fd fe76 	bl	800e24c <__errno>
 8010560:	eeb0 0a48 	vmov.f32	s0, s16
 8010564:	eef0 0a68 	vmov.f32	s1, s17
 8010568:	ecbd 8b02 	vpop	{d8}
 801056c:	6004      	str	r4, [r0, #0]
 801056e:	bd10      	pop	{r4, pc}

08010570 <xflow>:
 8010570:	4603      	mov	r3, r0
 8010572:	b507      	push	{r0, r1, r2, lr}
 8010574:	ec51 0b10 	vmov	r0, r1, d0
 8010578:	b183      	cbz	r3, 801059c <xflow+0x2c>
 801057a:	4602      	mov	r2, r0
 801057c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010580:	e9cd 2300 	strd	r2, r3, [sp]
 8010584:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010588:	f7f0 f836 	bl	80005f8 <__aeabi_dmul>
 801058c:	ec41 0b10 	vmov	d0, r0, r1
 8010590:	2022      	movs	r0, #34	@ 0x22
 8010592:	b003      	add	sp, #12
 8010594:	f85d eb04 	ldr.w	lr, [sp], #4
 8010598:	f7ff bfd8 	b.w	801054c <with_errno>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	e7ee      	b.n	8010580 <xflow+0x10>
 80105a2:	0000      	movs	r0, r0
 80105a4:	0000      	movs	r0, r0
	...

080105a8 <__math_uflow>:
 80105a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80105b0 <__math_uflow+0x8>
 80105ac:	f7ff bfe0 	b.w	8010570 <xflow>
 80105b0:	00000000 	.word	0x00000000
 80105b4:	10000000 	.word	0x10000000

080105b8 <__math_oflow>:
 80105b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80105c0 <__math_oflow+0x8>
 80105bc:	f7ff bfd8 	b.w	8010570 <xflow>
 80105c0:	00000000 	.word	0x00000000
 80105c4:	70000000 	.word	0x70000000

080105c8 <_init>:
 80105c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ca:	bf00      	nop
 80105cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ce:	bc08      	pop	{r3}
 80105d0:	469e      	mov	lr, r3
 80105d2:	4770      	bx	lr

080105d4 <_fini>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	bf00      	nop
 80105d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105da:	bc08      	pop	{r3}
 80105dc:	469e      	mov	lr, r3
 80105de:	4770      	bx	lr
