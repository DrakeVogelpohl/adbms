
adbms-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800e120  0800e120  0000f120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e8  0800e8e8  000102ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e8e8  0800e8e8  0000f8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8f0  0800e8f0  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f0  0800e8f0  0000f8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8f4  0800e8f4  0000f8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  0800e8f8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102ec  2**0
                  CONTENTS
 10 .bss          00001f8c  200002ec  200002ec  000102ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002278  20002278  000102ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a714  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004176  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001155  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258e5  00000000  00000000  000313a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdbb  00000000  00000000  00056c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d66ae  00000000  00000000  00073a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014a0f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072b4  00000000  00000000  0014a138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001513ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e108 	.word	0x0800e108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	0800e108 	.word	0x0800e108

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <Pec15_Calc>:
* @return CRC15_Value
*
*******************************************************************************
*/
uint16_t Pec15_Calc(uint8_t len, uint8_t *data)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 8000f80:	2310      	movs	r3, #16
 8000f82:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8000f84:	2300      	movs	r3, #0
 8000f86:	737b      	strb	r3, [r7, #13]
 8000f88:	e019      	b.n	8000fbe <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	09db      	lsrs	r3, r3, #7
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	7b7a      	ldrb	r2, [r7, #13]
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	440a      	add	r2, r1
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	4053      	eors	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 8000fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	490b      	ldr	r1, [pc, #44]	@ (8000fd8 <Pec15_Calc+0x64>)
 8000fac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4053      	eors	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	7b7a      	ldrb	r2, [r7, #13]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3e1      	bcc.n	8000f8a <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b29b      	uxth	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	0800e32c 	.word	0x0800e32c

08000fdc <Pec10_Calc>:
* @return CRC10_Value
*
*******************************************************************************
*/
uint16_t Pec10_Calc(bool isRxCmd, int len, uint8_t *data)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 8000fea:	2310      	movs	r3, #16
 8000fec:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 8000fee:	238f      	movs	r3, #143	@ 0x8f
 8000ff0:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	757b      	strb	r3, [r7, #21]
 8000ff6:	e024      	b.n	8001042 <Pec10_Calc+0x66>
    {
        /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)data[nByteIndex] << 2u);
 8000ff8:	7d7b      	ldrb	r3, [r7, #21]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	b29a      	uxth	r2, r3
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	4053      	eors	r3, r2
 8001008:	82fb      	strh	r3, [r7, #22]
 
        /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800100a:	2308      	movs	r3, #8
 800100c:	753b      	strb	r3, [r7, #20]
 800100e:	e012      	b.n	8001036 <Pec10_Calc+0x5a>
        {
            /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <Pec10_Calc+0x4e>
            {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800101a:	8afb      	ldrh	r3, [r7, #22]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001020:	8afa      	ldrh	r2, [r7, #22]
 8001022:	8a7b      	ldrh	r3, [r7, #18]
 8001024:	4053      	eors	r3, r2
 8001026:	82fb      	strh	r3, [r7, #22]
 8001028:	e002      	b.n	8001030 <Pec10_Calc+0x54>
            }
            else
            {
                nRemainder = (uint16_t)(nRemainder << 1u);
 800102a:	8afb      	ldrh	r3, [r7, #22]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001030:	7d3b      	ldrb	r3, [r7, #20]
 8001032:	3b01      	subs	r3, #1
 8001034:	753b      	strb	r3, [r7, #20]
 8001036:	7d3b      	ldrb	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <Pec10_Calc+0x34>
    for (nByteIndex = 0u; nByteIndex < len; ++nByteIndex)
 800103c:	7d7b      	ldrb	r3, [r7, #21]
 800103e:	3301      	adds	r3, #1
 8001040:	757b      	strb	r3, [r7, #21]
 8001042:	7d7b      	ldrb	r3, [r7, #21]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	dcd6      	bgt.n	8000ff8 <Pec10_Calc+0x1c>
            }
        }
    }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (isRxCmd)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00e      	beq.n	800106e <Pec10_Calc+0x92>
    {  
        nRemainder ^= (uint16_t)(((uint16_t)data[len] & (uint8_t)0xFC) << 2u);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b21b      	sxth	r3, r3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	b21b      	sxth	r3, r3
 800105e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 8001062:	b21a      	sxth	r2, r3
 8001064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001068:	4053      	eors	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	82fb      	strh	r3, [r7, #22]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800106e:	2306      	movs	r3, #6
 8001070:	753b      	strb	r3, [r7, #20]
 8001072:	e012      	b.n	800109a <Pec10_Calc+0xbe>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <Pec10_Calc+0xb2>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800107e:	8afb      	ldrh	r3, [r7, #22]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001084:	8afa      	ldrh	r2, [r7, #22]
 8001086:	8a7b      	ldrh	r3, [r7, #18]
 8001088:	4053      	eors	r3, r2
 800108a:	82fb      	strh	r3, [r7, #22]
 800108c:	e002      	b.n	8001094 <Pec10_Calc+0xb8>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800108e:	8afb      	ldrh	r3, [r7, #22]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001094:	7d3b      	ldrb	r3, [r7, #20]
 8001096:	3b01      	subs	r3, #1
 8001098:	753b      	strb	r3, [r7, #20]
 800109a:	7d3b      	ldrb	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e9      	bne.n	8001074 <Pec10_Calc+0x98>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 80010a0:	8afb      	ldrh	r3, [r7, #22]
 80010a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a6:	b29b      	uxth	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	0000      	movs	r0, r0
	...

080010b8 <Set_UnderOver_Voltage_Threshold>:
 * @return VoltageThreshold_value
 *
 *******************************************************************************
*/
uint16_t Set_UnderOver_Voltage_Threshold(float voltage)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t v_th_value;
  uint8_t rbits = 12;
 80010c2:	230c      	movs	r3, #12
 80010c4:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	a314      	add	r3, pc, #80	@ (adr r3, 8001130 <Set_UnderOver_Voltage_Threshold+0x78>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	607b      	str	r3, [r7, #4]
  v_th_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	2202      	movs	r2, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	81bb      	strh	r3, [r7, #12]
  v_th_value &= 0xFFF;
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	81bb      	strh	r3, [r7, #12]
  return v_th_value;
 8001122:	89bb      	ldrh	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	30553261 	.word	0x30553261
 8001134:	3f63a92a 	.word	0x3f63a92a

08001138 <ADBMS_Set_Config_A>:

void ADBMS_Set_Config_A(cfa_ *cfg_a, uint8_t *cfg_a_tx_buffer)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e0f7      	b.n	8001338 <ADBMS_Set_Config_A+0x200>
    {
        cfg_a_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(((cfg_a[cic].refon & 0x01) << 7) | (cfg_a[cic].cth & 0x07));
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	b259      	sxtb	r1, r3
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	b25b      	sxtb	r3, r3
 8001186:	430b      	orrs	r3, r1
 8001188:	b259      	sxtb	r1, r3
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	461a      	mov	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	b2ca      	uxtb	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(cfg_a[cic].flag_d & 0xFF);
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1899      	adds	r1, r3, r2
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	3301      	adds	r3, #1
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	784a      	ldrb	r2, [r1, #1]
 80011c0:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)(((cfg_a[cic].soakon & 0x01) << 7) | ((cfg_a[cic].owrng & 0x01) << 6) | ((cfg_a[cic].owa & 0x07) << 3));
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	01db      	lsls	r3, r3, #7
 80011de:	b259      	sxtb	r1, r3
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	019b      	lsls	r3, r3, #6
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	430b      	orrs	r3, r1
 8001200:	b259      	sxtb	r1, r3
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	b25b      	sxtb	r3, r3
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	b25b      	sxtb	r3, r3
 8001220:	430b      	orrs	r3, r1
 8001222:	b259      	sxtb	r1, r3
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	3302      	adds	r3, #2
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4413      	add	r3, r2
 8001234:	b2ca      	uxtb	r2, r1
 8001236:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(cfg_a[cic].gpo & 0x00FF);
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	885b      	ldrh	r3, [r3, #2]
 800124a:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800124e:	b299      	uxth	r1, r3
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	3303      	adds	r3, #3
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	b2ca      	uxtb	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)((cfg_a[cic].gpo & 0x0300) >> 8);
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	461a      	mov	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	885b      	ldrh	r3, [r3, #2]
 8001276:	f3c3 1349 	ubfx	r3, r3, #5, #10
 800127a:	b29b      	uxth	r3, r3
 800127c:	121b      	asrs	r3, r3, #8
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	3304      	adds	r3, #4
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	f001 0203 	and.w	r2, r1, #3
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
        cfg_a_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)(((cfg_a[cic].snap & 0x01) << 5) | ((cfg_a[cic].mute_st & 0x01) << 4) | ((cfg_a[cic].comm_bk & 0x01) << 3) | (cfg_a[cic].fc & 0x07));
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	b259      	sxtb	r1, r3
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	430b      	orrs	r3, r1
 80012d6:	b259      	sxtb	r1, r3
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	791b      	ldrb	r3, [r3, #4]
 80012ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	430b      	orrs	r3, r1
 80012f8:	b259      	sxtb	r1, r3
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	b25b      	sxtb	r3, r3
 800131a:	430b      	orrs	r3, r1
 800131c:	b259      	sxtb	r1, r3
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	3305      	adds	r3, #5
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3301      	adds	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f43f af04 	beq.w	8001148 <ADBMS_Set_Config_A+0x10>
    }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <ADBMS_Set_Config_B>:

void ADBMS_Set_Config_B(cfb_ *cfg_b, uint8_t *cfg_b_tx_buffer)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e09b      	b.n	8001496 <ADBMS_Set_Config_B+0x148>
    {
        cfg_b_tx_buffer[cic * DATA_LEN + 0] = (uint8_t)(cfg_b[cic].vuv & 0x0FF);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136c:	b299      	uxth	r1, r3
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	461a      	mov	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 1] = (uint8_t)(((cfg_b[cic].vov & 0x00F) << 4) | ((cfg_b[cic].vuv & 0xF00) >> 8));
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001390:	b29b      	uxth	r3, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b25a      	sxtb	r2, r3
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	440b      	add	r3, r1
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	121b      	asrs	r3, r3, #8
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b259      	sxtb	r1, r3
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3301      	adds	r3, #1
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 2] = (uint8_t)((cfg_b[cic].vov & 0xFF0) >> 4);
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	885b      	ldrh	r3, [r3, #2]
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d8:	b29b      	uxth	r3, r3
 80013da:	1119      	asrs	r1, r3, #4
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	3302      	adds	r3, #2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2ca      	uxtb	r2, r1
 80013ee:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 3] = (uint8_t)(((cfg_b[cic].dtmen & 0x01) << 7) | ((cfg_b[cic].dtrng & 0x01) << 6) | (cfg_b[cic].dcto & 0x3F));
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b25b      	sxtb	r3, r3
 8001402:	01db      	lsls	r3, r3, #7
 8001404:	b25a      	sxtb	r2, r3
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	440b      	add	r3, r1
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	b25b      	sxtb	r3, r3
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	b25b      	sxtb	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b25a      	sxtb	r2, r3
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	440b      	add	r3, r1
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	b25b      	sxtb	r3, r3
 8001432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b259      	sxtb	r1, r3
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3303      	adds	r3, #3
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	b2ca      	uxtb	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 4] = (uint8_t)(cfg_b[cic].dcc & 0x00FF);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	88d9      	ldrh	r1, [r3, #6]
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	3304      	adds	r3, #4
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
        cfg_b_tx_buffer[cic * DATA_LEN + 5] = (uint8_t)((cfg_b[cic].dcc & 0xFF00) >> 8);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	88db      	ldrh	r3, [r3, #6]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	b299      	uxth	r1, r3
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	3305      	adds	r3, #5
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f43f af60 	beq.w	800135e <ADBMS_Set_Config_B+0x10>
    }
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <ADBMS_WakeUP_ICs>:

void ADBMS_WakeUP_ICs()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
 80014b6:	e012      	b.n	80014de <ADBMS_WakeUP_ICs+0x32>
        // Blocking Transmit the msg
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <ADBMS_WakeUP_ICs+0x44>)
 80014be:	f002 ff11 	bl	80042e4 <HAL_GPIO_WritePin>
    	HAL_Delay(4);
 80014c2:	2004      	movs	r0, #4
 80014c4:	f001 fdc4 	bl	8003050 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2110      	movs	r1, #16
 80014cc:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <ADBMS_WakeUP_ICs+0x44>)
 80014ce:	f002 ff09 	bl	80042e4 <HAL_GPIO_WritePin>
        HAL_Delay(4);
 80014d2:	2004      	movs	r0, #4
 80014d4:	f001 fdbc 	bl	8003050 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_CHIPS; i++){
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3301      	adds	r3, #1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0e9      	beq.n	80014b8 <ADBMS_WakeUP_ICs+0xc>
    }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020000 	.word	0x40020000

080014f4 <ADBMS_Write_CMD>:

void ADBMS_Write_CMD(SPI_HandleTypeDef *hspi, uint16_t tx_cmd)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
    uint8_t spi_dataBuf[4];
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	723b      	strb	r3, [r7, #8]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	727b      	strb	r3, [r7, #9]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	4619      	mov	r1, r3
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff fd2c 	bl	8000f74 <Pec15_Calc>
 800151c:	4603      	mov	r3, r0
 800151e:	81fb      	strh	r3, [r7, #14]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	72bb      	strb	r3, [r7, #10]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	72fb      	strb	r3, [r7, #11]

    // Blocking Transmit the cmd
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2110      	movs	r1, #16
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <ADBMS_Write_CMD+0x68>)
 8001536:	f002 fed5 	bl	80042e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, CMD_LEN + PEC_LEN, SPI_TIME_OUT) != HAL_OK)
 800153a:	f107 0108 	add.w	r1, r7, #8
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	2204      	movs	r2, #4
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 fe32 	bl	80061ae <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2110      	movs	r1, #16
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <ADBMS_Write_CMD+0x68>)
 8001550:	f002 fec8 	bl	80042e4 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020000 	.word	0x40020000

08001560 <ADBMS_Write_Data>:

void ADBMS_Write_Data(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *data, uint8_t *spi_dataBuf)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	460b      	mov	r3, r1
 800156e:	817b      	strh	r3, [r7, #10]
    spi_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2da      	uxtb	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[1] = (uint8_t)(tx_cmd);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	897a      	ldrh	r2, [r7, #10]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    uint16_t cmd_pec = Pec15_Calc(2, spi_dataBuf);
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff fcf3 	bl	8000f74 <Pec15_Calc>
 800158e:	4603      	mov	r3, r0
 8001590:	82bb      	strh	r3, [r7, #20]
    spi_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 8001592:	8abb      	ldrh	r3, [r7, #20]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3302      	adds	r3, #2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
    spi_dataBuf[3] = (uint8_t)(cmd_pec);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3303      	adds	r3, #3
 80015a4:	8aba      	ldrh	r2, [r7, #20]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    // Decrementing because sends to last chip on the stack first
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e04d      	b.n	800164c <ADBMS_Write_Data+0xec>
        // Copy over data from data ptr
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	75bb      	strb	r3, [r7, #22]
 80015b4:	e01b      	b.n	80015ee <ADBMS_Write_Data+0x8e>
            spi_dataBuf[4 + cbyte + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = data[(NUM_CHIPS-cic) * DATA_LEN + cbyte];
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	f1c3 0201 	rsb	r2, r3, #1
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	461a      	mov	r2, r3
 80015c6:	7dbb      	ldrb	r3, [r7, #22]
 80015c8:	4413      	add	r3, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	441a      	add	r2, r3
 80015d0:	7dbb      	ldrb	r3, [r7, #22]
 80015d2:	1d19      	adds	r1, r3, #4
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	f1c3 0301 	rsb	r3, r3, #1
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	4619      	mov	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	440b      	add	r3, r1
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++){
 80015e8:	7dbb      	ldrb	r3, [r7, #22]
 80015ea:	3301      	adds	r3, #1
 80015ec:	75bb      	strb	r3, [r7, #22]
 80015ee:	7dbb      	ldrb	r3, [r7, #22]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d9e0      	bls.n	80015b6 <ADBMS_Write_Data+0x56>
        }

        // Caclulate PEC10
        uint16_t data_pec = Pec10_Calc(false, DATA_LEN, (data + (NUM_CHIPS-cic) * DATA_LEN));  
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	f1c3 0201 	rsb	r2, r3, #1
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	461a      	mov	r2, r3
 800160a:	2106      	movs	r1, #6
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fce5 	bl	8000fdc <Pec10_Calc>
 8001612:	4603      	mov	r3, r0
 8001614:	827b      	strh	r3, [r7, #18]
        spi_dataBuf[4 + DATA_LEN + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec >> 8);
 8001616:	8a7b      	ldrh	r3, [r7, #18]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	b29a      	uxth	r2, r3
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	f1c3 0301 	rsb	r3, r3, #1
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	330a      	adds	r3, #10
 8001626:	4619      	mov	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	440b      	add	r3, r1
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
        spi_dataBuf[4 + DATA_LEN + 1 + ((NUM_CHIPS-cic)*(DATA_LEN + PEC_LEN))] = (uint8_t)(data_pec);
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	f1c3 0301 	rsb	r3, r3, #1
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	330b      	adds	r3, #11
 800163a:	461a      	mov	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	8a7a      	ldrh	r2, [r7, #18]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
    for(uint8_t cic = NUM_CHIPS; cic > 0; cic--){
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	3b01      	subs	r3, #1
 800164a:	75fb      	strb	r3, [r7, #23]
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ae      	bne.n	80015b0 <ADBMS_Write_Data+0x50>
    }

    // Blocking Transmit the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2110      	movs	r1, #16
 8001656:	4809      	ldr	r0, [pc, #36]	@ (800167c <ADBMS_Write_Data+0x11c>)
 8001658:	f002 fe44 	bl	80042e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(hspi, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	220c      	movs	r2, #12
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f004 fda2 	bl	80061ae <HAL_SPI_Transmit>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2110      	movs	r1, #16
 800166e:	4803      	ldr	r0, [pc, #12]	@ (800167c <ADBMS_Write_Data+0x11c>)
 8001670:	f002 fe38 	bl	80042e4 <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40020000 	.word	0x40020000

08001680 <ADBMS_Read_Data>:
    voltage_float = ((data + 10000) * 0.000150);
    return voltage_float;
}

bool ADBMS_Read_Data(SPI_HandleTypeDef *hspi, uint16_t tx_cmd, uint8_t *dataBuf, uint8_t *spi_dataBuf)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	@ 0x30
 8001684:	af02      	add	r7, sp, #8
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	460b      	mov	r3, r1
 800168e:	817b      	strh	r3, [r7, #10]
    uint8_t spi_tx_dataBuf[4] = {0};
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
    spi_tx_dataBuf[0] = (uint8_t)(tx_cmd >> 8);
 8001694:	897b      	ldrh	r3, [r7, #10]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29b      	uxth	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	753b      	strb	r3, [r7, #20]
    spi_tx_dataBuf[1] = (uint8_t)(tx_cmd);
 800169e:	897b      	ldrh	r3, [r7, #10]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	757b      	strb	r3, [r7, #21]

    uint16_t cmd_pec = Pec15_Calc(2, spi_tx_dataBuf);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fc62 	bl	8000f74 <Pec15_Calc>
 80016b0:	4603      	mov	r3, r0
 80016b2:	847b      	strh	r3, [r7, #34]	@ 0x22
    spi_tx_dataBuf[2] = (uint8_t)(cmd_pec >> 8);
 80016b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	75bb      	strb	r3, [r7, #22]
    spi_tx_dataBuf[3] = (uint8_t)(cmd_pec);
 80016be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	75fb      	strb	r3, [r7, #23]

    // Blocking Transmit Receive the cmd and data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2110      	movs	r1, #16
 80016c8:	4850      	ldr	r0, [pc, #320]	@ (800180c <ADBMS_Read_Data+0x18c>)
 80016ca:	f002 fe0b 	bl	80042e4 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(hspi, spi_tx_dataBuf, spi_dataBuf, DATABUF_LEN, SPI_TIME_OUT) != HAL_OK)
 80016ce:	f107 0114 	add.w	r1, r7, #20
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	230c      	movs	r3, #12
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f004 feaa 	bl	8006436 <HAL_SPI_TransmitReceive>
    {
        // TODO: do something if fails
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2110      	movs	r1, #16
 80016e6:	4849      	ldr	r0, [pc, #292]	@ (800180c <ADBMS_Read_Data+0x18c>)
 80016e8:	f002 fdfc 	bl	80042e4 <HAL_GPIO_WritePin>

    // Discard data received during transmit phase
    uint8_t *rx_dataBuf = spi_dataBuf + CMD_LEN + PEC_LEN;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	61fb      	str	r3, [r7, #28]

    for(uint8_t i = 0; i < DATABUF_LEN-4; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016f8:	e00f      	b.n	800171a <ADBMS_Read_Data+0x9a>
    {
    	printf("byte%d: 0x%02x\n", i, rx_dataBuf[i]);
 80016fa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80016fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4841      	ldr	r0, [pc, #260]	@ (8001810 <ADBMS_Read_Data+0x190>)
 800170c:	f00a f8d6 	bl	800b8bc <iprintf>
    for(uint8_t i = 0; i < DATABUF_LEN-4; i++)
 8001710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001714:	3301      	adds	r3, #1
 8001716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800171a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800171e:	2b07      	cmp	r3, #7
 8001720:	d9eb      	bls.n	80016fa <ADBMS_Read_Data+0x7a>
    }

    // Move the incoming data from the spi data buffer to the correspoding data buffer array in memory
    bool pec_error = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800172e:	e063      	b.n	80017f8 <ADBMS_Read_Data+0x178>
    {
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001736:	e01c      	b.n	8001772 <ADBMS_Read_Data+0xf2>
        {
            dataBuf[cic * DATA_LEN + cbyte] = rx_dataBuf[cbyte + (DATA_LEN+PEC_LEN)*cic];
 8001738:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800173c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	461a      	mov	r2, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	1899      	adds	r1, r3, r2
 800174a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	461a      	mov	r2, r3
 8001758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	780a      	ldrb	r2, [r1, #0]
 8001766:	701a      	strb	r2, [r3, #0]
        for(uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte++)
 8001768:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001776:	2b05      	cmp	r3, #5
 8001778:	d9de      	bls.n	8001738 <ADBMS_Read_Data+0xb8>
        }
        uint16_t rx_pec = (uint16_t)(((rx_dataBuf[DATA_LEN + (DATA_LEN+PEC_LEN)*cic] & 0x03) << 8) | rx_dataBuf[DATA_LEN + 1 + (DATA_LEN+PEC_LEN)*cic]);
 800177a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	3306      	adds	r3, #6
 8001782:	461a      	mov	r2, r3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b21b      	sxth	r3, r3
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21b      	sxth	r3, r3
 8001790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001794:	b21a      	sxth	r2, r3
 8001796:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	3307      	adds	r3, #7
 800179e:	4619      	mov	r1, r3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	440b      	add	r3, r1
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	837b      	strh	r3, [r7, #26]
        uint16_t calc_pec = (uint16_t)Pec10_Calc(true, DATA_LEN, (rx_dataBuf + cic * DATA_LEN));		// Needs the PEC to calculate the PEC, thus have to pass full buffer
 80017ae:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	461a      	mov	r2, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	2106      	movs	r1, #6
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fc09 	bl	8000fdc <Pec10_Calc>
 80017ca:	4603      	mov	r3, r0
 80017cc:	833b      	strh	r3, [r7, #24]
        pec_error |= (rx_pec != calc_pec);
 80017ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017d2:	8b79      	ldrh	r1, [r7, #26]
 80017d4:	8b3a      	ldrh	r2, [r7, #24]
 80017d6:	4291      	cmp	r1, r2
 80017d8:	bf14      	ite	ne
 80017da:	2201      	movne	r2, #1
 80017dc:	2200      	moveq	r2, #0
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	4313      	orrs	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for(uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80017ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017f2:	3301      	adds	r3, #1
 80017f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80017f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d097      	beq.n	8001730 <ADBMS_Read_Data+0xb0>
    }

    return pec_error;
 8001800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8001804:	4618      	mov	r0, r3
 8001806:	3728      	adds	r7, #40	@ 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020000 	.word	0x40020000
 8001810:	0800e120 	.word	0x0800e120

08001814 <ADBMS_Initialize>:
#include "adbms_update_values.h"

void ADBMS_Initialize(adbms_ *adbms, SPI_HandleTypeDef *hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    adbms->ICs.hspi = hspi;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	601a      	str	r2, [r3, #0]
    // Set initial configurations
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e042      	b.n	80018b0 <ADBMS_Initialize+0x9c>
    {
        // Init config A
        adbms->cfa[cic].refon = 1;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800183c:	7813      	ldrb	r3, [r2, #0]
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	7013      	strb	r3, [r2, #0]
        adbms->cfa[cic].gpo = 0x3FF;  // all gpo tunred on
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	440b      	add	r3, r1
 8001852:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001856:	8853      	ldrh	r3, [r2, #2]
 8001858:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800185c:	f361 134e 	bfi	r3, r1, #5, #10
 8001860:	8053      	strh	r3, [r2, #2]

        // Init config B
        adbms->cfb[cic].vuv = Set_UnderOver_Voltage_Threshold(UNDERVOLTAGE);
 8001862:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8001866:	f7ff fc27 	bl	80010b8 <Set_UnderOver_Voltage_Threshold>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001874:	b291      	uxth	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	330c      	adds	r3, #12
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	88da      	ldrh	r2, [r3, #6]
 8001880:	f361 020b 	bfi	r2, r1, #0, #12
 8001884:	80da      	strh	r2, [r3, #6]
        adbms->cfb[cic].vov = Set_UnderOver_Voltage_Threshold(OVERVOLTAGE);
 8001886:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001958 <ADBMS_Initialize+0x144>
 800188a:	f7ff fc15 	bl	80010b8 <Set_UnderOver_Voltage_Threshold>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001898:	b291      	uxth	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	330c      	adds	r3, #12
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	891a      	ldrh	r2, [r3, #8]
 80018a4:	f361 020b 	bfi	r2, r1, #0, #12
 80018a8:	811a      	strh	r2, [r3, #8]
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	3301      	adds	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0b9      	beq.n	800182a <ADBMS_Initialize+0x16>
    }

    // Package config structs into transmitable data
    ADBMS_Set_Config_A(adbms->cfa, adbms->ICs.cfg_a);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3310      	adds	r3, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fc38 	bl	8001138 <ADBMS_Set_Config_A>
    ADBMS_Set_Config_B(adbms->cfb, adbms->ICs.cfg_b);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f103 0266 	add.w	r2, r3, #102	@ 0x66
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3316      	adds	r3, #22
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fd3a 	bl	800134e <ADBMS_Set_Config_B>

    // Write Config 
    ADBMS_WakeUP_ICs();
 80018da:	f7ff fde7 	bl	80014ac <ADBMS_WakeUP_ICs>
    ADBMS_WakeUP_ICs();
 80018de:	f7ff fde5 	bl	80014ac <ADBMS_WakeUP_ICs>
    ADBMS_Write_Data(adbms->ICs.hspi, WRCFGA, adbms->ICs.cfg_a, adbms->ICs.spi_dataBuf);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <ADBMS_Initialize+0x148>)
 80018e8:	8819      	ldrh	r1, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0210 	add.w	r2, r3, #16
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	f7ff fe34 	bl	8001560 <ADBMS_Write_Data>
    ADBMS_WakeUP_ICs();
 80018f8:	f7ff fdd8 	bl	80014ac <ADBMS_WakeUP_ICs>
    ADBMS_Write_Data(adbms->ICs.hspi, WRCFGB, adbms->ICs.cfg_b, adbms->ICs.spi_dataBuf);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <ADBMS_Initialize+0x14c>)
 8001902:	8819      	ldrh	r1, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f103 0216 	add.w	r2, r3, #22
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	f7ff fe27 	bl	8001560 <ADBMS_Write_Data>

    // turn on cell sensing
    // TODO: These are currently hard coded from the datasheet. Make them configurable before release
    adbms->ICs.ADCV = 0x3E0;  // Cont on, everything else off
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8001918:	839a      	strh	r2, [r3, #28]
    adbms->ICs.ADAX = 0x410;  // Everything off
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8001920:	841a      	strh	r2, [r3, #32]
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.ADCV);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	8b9b      	ldrh	r3, [r3, #28]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fde1 	bl	80014f4 <ADBMS_Write_CMD>
    HAL_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f001 fb8c 	bl	8003050 <HAL_Delay>
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.ADAX);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8c1b      	ldrh	r3, [r3, #32]
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f7ff fdd6 	bl	80014f4 <ADBMS_Write_CMD>
    HAL_Delay(8); // ADCs are updated at their conversion rate of 1ms
 8001948:	2008      	movs	r0, #8
 800194a:	f001 fb81 	bl	8003050 <HAL_Delay>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40866666 	.word	0x40866666
 800195c:	20000000 	.word	0x20000000
 8001960:	20000002 	.word	0x20000002

08001964 <ADBMS_UpdateVoltages>:

void ADBMS_UpdateVoltages(adbms_ *adbms)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    // get voltages from ADBMS
    bool pec = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs();
 8001970:	f7ff fd9c 	bl	80014ac <ADBMS_WakeUP_ICs>

    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVA, (adbms->ICs.cell + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <ADBMS_UpdateVoltages+0x100>)
 800197a:	8819      	ldrh	r1, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	f7ff fe7b 	bl	8001680 <ADBMS_Read_Data>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4313      	orrs	r3, r2
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVB, (adbms->ICs.cell + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <ADBMS_UpdateVoltages+0x104>)
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3324      	adds	r3, #36	@ 0x24
 80019aa:	1d9a      	adds	r2, r3, #6
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	f7ff fe66 	bl	8001680 <ADBMS_Read_Data>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVC, (adbms->ICs.cell + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <ADBMS_UpdateVoltages+0x108>)
 80019ce:	8819      	ldrh	r1, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3324      	adds	r3, #36	@ 0x24
 80019d4:	f103 020c 	add.w	r2, r3, #12
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	f7ff fe50 	bl	8001680 <ADBMS_Read_Data>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVD, (adbms->ICs.cell + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <ADBMS_UpdateVoltages+0x10c>)
 80019fa:	8819      	ldrh	r1, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3324      	adds	r3, #36	@ 0x24
 8001a00:	f103 0212 	add.w	r2, r3, #18
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	f7ff fe3a 	bl	8001680 <ADBMS_Read_Data>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDCVE, (adbms->ICs.cell + 4 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <ADBMS_UpdateVoltages+0x110>)
 8001a26:	8819      	ldrh	r1, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3324      	adds	r3, #36	@ 0x24
 8001a2c:	f103 0218 	add.w	r2, r3, #24
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	f7ff fe24 	bl	8001680 <ADBMS_Read_Data>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf14      	ite	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	2300      	moveq	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
    adbms->voltage_pec_failure = pec;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

    // calulate new values with the updated raw ones
     ADBMS_CalculateValues_Voltages(adbms);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f88b 	bl	8001b70 <ADBMS_CalculateValues_Voltages>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000004 	.word	0x20000004
 8001a68:	20000006 	.word	0x20000006
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	2000000a 	.word	0x2000000a
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <ADBMS_UpdateTemps>:

void ADBMS_UpdateTemps(adbms_ *adbms)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    // get temps from ADBMS
    bool pec = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
    ADBMS_WakeUP_ICs(adbms->ICs.hspi);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fd0f 	bl	80014ac <ADBMS_WakeUP_ICs>
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXA, (adbms->ICs.aux + 0 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <ADBMS_UpdateTemps+0xe8>)
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	f7ff fdee 	bl	8001680 <ADBMS_Read_Data>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXB, (adbms->ICs.aux + 1 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <ADBMS_UpdateTemps+0xec>)
 8001abe:	8819      	ldrh	r1, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3348      	adds	r3, #72	@ 0x48
 8001ac4:	1d9a      	adds	r2, r3, #6
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	f7ff fdd9 	bl	8001680 <ADBMS_Read_Data>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXC, (adbms->ICs.aux + 2 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <ADBMS_UpdateTemps+0xf0>)
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3348      	adds	r3, #72	@ 0x48
 8001aee:	f103 020c 	add.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	f7ff fdc3 	bl	8001680 <ADBMS_Read_Data>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    pec |= ADBMS_Read_Data(adbms->ICs.hspi, RDAUXD, (adbms->ICs.aux + 3 * NUM_CHIPS * DATA_LEN), adbms->ICs.spi_dataBuf);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <ADBMS_UpdateTemps+0xf4>)
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3348      	adds	r3, #72	@ 0x48
 8001b1a:	f103 0212 	add.w	r2, r3, #18
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	f7ff fdad 	bl	8001680 <ADBMS_Read_Data>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
    adbms->temp_pec_failure = pec;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

    // need to start new poll for conversion before next read (no continous mode)
    ADBMS_Write_CMD(adbms->ICs.hspi, adbms->ICs.ADAX);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8c1b      	ldrh	r3, [r3, #32]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff fcd1 	bl	80014f4 <ADBMS_Write_CMD>

    // calulate new values with the updated raw ones
    ADBMS_CalculateValues_Temps(adbms);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f904 	bl	8001d60 <ADBMS_CalculateValues_Temps>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000000e 	.word	0x2000000e
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000012 	.word	0x20000012
 8001b6c:	20000014 	.word	0x20000014

08001b70 <ADBMS_CalculateValues_Voltages>:

void ADBMS_CalculateValues_Voltages(adbms_ *adbms)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d014      	beq.n	8001bb2 <ADBMS_CalculateValues_Voltages+0x42>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001b8e:	f083 0301 	eor.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <ADBMS_CalculateValues_Voltages+0x42>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <ADBMS_CalculateValues_Voltages+0x42>
        adbms->current_pec_failures = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->voltage_pec_failure) {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d022      	beq.n	8001c02 <ADBMS_CalculateValues_Voltages+0x92>
        adbms->current_pec_failures += adbms->voltage_pec_failure;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8001be0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	dd04      	ble.n	8001bf8 <ADBMS_CalculateValues_Voltages+0x88>
            adbms->pec_fault_ = 1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001bf6:	e0ad      	b.n	8001d54 <ADBMS_CalculateValues_Voltages+0x1e4>
            adbms->pec_fault_ = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        return;
 8001c00:	e0a8      	b.n	8001d54 <ADBMS_CalculateValues_Voltages+0x1e4>
    }

    // calculate the total, max, and min voltage
    adbms->total_v = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    adbms->max_v = 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    adbms->min_v = FLT_MAX;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a50      	ldr	r2, [pc, #320]	@ (8001d5c <ADBMS_CalculateValues_Voltages+0x1ec>)
 8001c1a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
 8001c22:	e089      	b.n	8001d38 <ADBMS_CalculateValues_Voltages+0x1c8>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8001c24:	2305      	movs	r3, #5
 8001c26:	753b      	strb	r3, [r7, #20]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75bb      	strb	r3, [r7, #22]
 8001c2c:	e07c      	b.n	8001d28 <ADBMS_CalculateValues_Voltages+0x1b8>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	757b      	strb	r3, [r7, #21]
 8001c32:	e071      	b.n	8001d18 <ADBMS_CalculateValues_Voltages+0x1a8>
            {
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001c34:	7dba      	ldrb	r2, [r7, #22]
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	7d7a      	ldrb	r2, [r7, #21]
 8001c3e:	0852      	lsrs	r2, r2, #1
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	4413      	add	r3, r2
 8001c44:	2b0d      	cmp	r3, #13
 8001c46:	dc6b      	bgt.n	8001d20 <ADBMS_CalculateValues_Voltages+0x1b0>
                int16_t raw_val = (((uint16_t)adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1]) << 8) | adbms->ICs.cell[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte];
 8001c48:	7dba      	ldrb	r2, [r7, #22]
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	441a      	add	r2, r3
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	461a      	mov	r2, r3
 8001c58:	7d7b      	ldrb	r3, [r7, #21]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	b219      	sxth	r1, r3
 8001c6c:	7dba      	ldrb	r2, [r7, #22]
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	441a      	add	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	7d7b      	ldrb	r3, [r7, #21]
 8001c7e:	4413      	add	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	827b      	strh	r3, [r7, #18]
                float curr_voltage = ADBMS_getVoltage(raw_val);
 8001c8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fa04 	bl	80020a0 <ADBMS_getVoltage>
 8001c98:	ed87 0a03 	vstr	s0, [r7, #12]
                adbms->voltages[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2] = curr_voltage;
 8001c9c:	7dfa      	ldrb	r2, [r7, #23]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	7dba      	ldrb	r2, [r7, #22]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	7d7a      	ldrb	r2, [r7, #21]
 8001cb4:	0852      	lsrs	r2, r2, #1
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4413      	add	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	331c      	adds	r3, #28
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

                adbms->total_v += curr_voltage;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
                if (curr_voltage > adbms->max_v){
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8001ce0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd03      	ble.n	8001cf6 <ADBMS_CalculateValues_Voltages+0x186>
                    adbms->max_v = curr_voltage;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
                }
                if (curr_voltage < adbms->min_v){
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8001cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d503      	bpl.n	8001d12 <ADBMS_CalculateValues_Voltages+0x1a2>
                    adbms->min_v = curr_voltage;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001d12:	7d7b      	ldrb	r3, [r7, #21]
 8001d14:	3302      	adds	r3, #2
 8001d16:	757b      	strb	r3, [r7, #21]
 8001d18:	7d7b      	ldrb	r3, [r7, #21]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d98a      	bls.n	8001c34 <ADBMS_CalculateValues_Voltages+0xc4>
 8001d1e:	e000      	b.n	8001d22 <ADBMS_CalculateValues_Voltages+0x1b2>
                if(creg_grp*DATA_LEN/2 + cbyte/2 >= NUM_VOLTAGES_CHIP) break;   // only read 14 when getting 15 -- TODO CHANGE COMMENT
 8001d20:	bf00      	nop
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001d22:	7dbb      	ldrb	r3, [r7, #22]
 8001d24:	3301      	adds	r3, #1
 8001d26:	75bb      	strb	r3, [r7, #22]
 8001d28:	7dba      	ldrb	r2, [r7, #22]
 8001d2a:	7d3b      	ldrb	r3, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f4ff af7e 	bcc.w	8001c2e <ADBMS_CalculateValues_Voltages+0xbe>
    for (uint8_t cic = 0; cic < NUM_CHIPS; cic++)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	3301      	adds	r3, #1
 8001d36:	75fb      	strb	r3, [r7, #23]
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f43f af72 	beq.w	8001c24 <ADBMS_CalculateValues_Voltages+0xb4>
            }
        }
    }

    // calculate the avg voltage
    adbms->avg_v = adbms->total_v / (NUM_CHIPS * NUM_VOLTAGES_CHIP);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8001d46:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 8001d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
}
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	7f7fffff 	.word	0x7f7fffff

08001d60 <ADBMS_CalculateValues_Temps>:

void ADBMS_CalculateValues_Temps(adbms_ *adbms)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    // reset current pec failures if there is no current failure
    if(!adbms->voltage_pec_failure && !adbms->temp_pec_failure && !adbms->status_reg_pec_failure) { 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d014      	beq.n	8001da2 <ADBMS_CalculateValues_Temps+0x42>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <ADBMS_CalculateValues_Temps+0x42>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8001d8e:	f083 0301 	eor.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <ADBMS_CalculateValues_Temps+0x42>
        adbms->current_pec_failures = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    }

    // if there is a pec failure, process it and don't update values
    if(adbms->temp_pec_failure) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d022      	beq.n	8001df2 <ADBMS_CalculateValues_Temps+0x92>
        adbms->current_pec_failures += adbms->temp_pec_failure;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
        if(adbms->current_pec_failures > PEC_FAILURE_THRESHOLD) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8001dd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	dd04      	ble.n	8001de8 <ADBMS_CalculateValues_Temps+0x88>
            adbms->pec_fault_ = 1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        }else {
            adbms->pec_fault_ = 0;
        }
        return;
 8001de6:	e0db      	b.n	8001fa0 <ADBMS_CalculateValues_Temps+0x240>
            adbms->pec_fault_ = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        return;
 8001df0:	e0d6      	b.n	8001fa0 <ADBMS_CalculateValues_Temps+0x240>
    }
    
    // calculate the total, max, and min temp
    float total_temp = 0.0;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    adbms->max_temp = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    adbms->min_temp = FLT_MAX;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb0 <ADBMS_CalculateValues_Temps+0x250>)
 8001e06:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    bool openwire_temp_fault = false;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e0a5      	b.n	8001f62 <ADBMS_CalculateValues_Temps+0x202>
    {
        uint8_t num_reg_grps = NUM_VOLTAGES_CHIP / VOLTAGES_REG_GRP + (NUM_VOLTAGES_CHIP % VOLTAGES_REG_GRP != 0);
 8001e16:	2305      	movs	r3, #5
 8001e18:	767b      	strb	r3, [r7, #25]
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	76fb      	strb	r3, [r7, #27]
 8001e1e:	e098      	b.n	8001f52 <ADBMS_CalculateValues_Temps+0x1f2>
        {
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001e20:	2300      	movs	r3, #0
 8001e22:	76bb      	strb	r3, [r7, #26]
 8001e24:	e08e      	b.n	8001f44 <ADBMS_CalculateValues_Temps+0x1e4>
            {
                // skip because only want temps 2-10
                if(creg_grp==0 && cbyte <= 2) continue;
 8001e26:	7efb      	ldrb	r3, [r7, #27]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <ADBMS_CalculateValues_Temps+0xd4>
 8001e2c:	7ebb      	ldrb	r3, [r7, #26]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	f240 8084 	bls.w	8001f3c <ADBMS_CalculateValues_Temps+0x1dc>

                int16_t raw_val = (((uint16_t)adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte]) << 8) | adbms->ICs.aux[creg_grp * NUM_CHIPS * DATA_LEN + cic * DATA_LEN + cbyte + 1];
 8001e34:	7efa      	ldrb	r2, [r7, #27]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	441a      	add	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	461a      	mov	r2, r3
 8001e44:	7ebb      	ldrb	r3, [r7, #26]
 8001e46:	4413      	add	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b219      	sxth	r1, r3
 8001e56:	7efa      	ldrb	r2, [r7, #27]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	461a      	mov	r2, r3
 8001e66:	7ebb      	ldrb	r3, [r7, #26]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	430b      	orrs	r3, r1
 8001e78:	82fb      	strh	r3, [r7, #22]
                float raw_temp_voltage = ADBMS_getVoltage(raw_val);
 8001e7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f90e 	bl	80020a0 <ADBMS_getVoltage>
 8001e84:	ed87 0a04 	vstr	s0, [r7, #16]

                // get ref voltage from status reg - not getting status regs because takes too long
                //float vref = ADBMS_getVoltage(ICs[i].stata.vref2);
                float vref = 3; // 3V defined in the datasheet
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <ADBMS_CalculateValues_Temps+0x254>)
 8001e8a:	60fb      	str	r3, [r7, #12]
                if (vref - raw_temp_voltage < 1e-1)
 8001e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e98:	ee17 0a90 	vmov	r0, s15
 8001e9c:	f7fe fb54 	bl	8000548 <__aeabi_f2d>
 8001ea0:	a341      	add	r3, pc, #260	@ (adr r3, 8001fa8 <ADBMS_CalculateValues_Temps+0x248>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fe19 	bl	8000adc <__aeabi_dcmplt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <ADBMS_CalculateValues_Temps+0x156>
                    openwire_temp_fault = true;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                float curr_temp = getTemp(raw_temp_voltage, vref);
 8001eb6:	edd7 0a03 	vldr	s1, [r7, #12]
 8001eba:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ebe:	f000 ffa3 	bl	8002e08 <getTemp>
 8001ec2:	ed87 0a02 	vstr	s0, [r7, #8]
                adbms->temperatures[cic*NUM_VOLTAGES_CHIP + creg_grp*DATA_LEN/2 + cbyte/2 - 2] = curr_temp;  // -2 because offset for skipped temps
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	7efa      	ldrb	r2, [r7, #27]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	7eba      	ldrb	r2, [r7, #26]
 8001ede:	0852      	lsrs	r2, r2, #1
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b02      	subs	r3, #2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	332a      	adds	r3, #42	@ 0x2a
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	601a      	str	r2, [r3, #0]
                total_temp += curr_temp;
 8001ef2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                if (curr_temp > adbms->max_temp){
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001f08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	dd03      	ble.n	8001f1e <ADBMS_CalculateValues_Temps+0x1be>
                    adbms->max_temp = curr_temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
                }
                if (curr_temp < adbms->min_temp){
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001f24:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d505      	bpl.n	8001f3e <ADBMS_CalculateValues_Temps+0x1de>
                    adbms->min_temp = curr_temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8001f3a:	e000      	b.n	8001f3e <ADBMS_CalculateValues_Temps+0x1de>
                if(creg_grp==0 && cbyte <= 2) continue;
 8001f3c:	bf00      	nop
            for (uint8_t cbyte = 0; cbyte < DATA_LEN; cbyte+=2)
 8001f3e:	7ebb      	ldrb	r3, [r7, #26]
 8001f40:	3302      	adds	r3, #2
 8001f42:	76bb      	strb	r3, [r7, #26]
 8001f44:	7ebb      	ldrb	r3, [r7, #26]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	f67f af6d 	bls.w	8001e26 <ADBMS_CalculateValues_Temps+0xc6>
        for (uint8_t creg_grp = 0; creg_grp < num_reg_grps; creg_grp++)
 8001f4c:	7efb      	ldrb	r3, [r7, #27]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	76fb      	strb	r3, [r7, #27]
 8001f52:	7efa      	ldrb	r2, [r7, #27]
 8001f54:	7e7b      	ldrb	r3, [r7, #25]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	f4ff af62 	bcc.w	8001e20 <ADBMS_CalculateValues_Temps+0xc0>
    for (int cic = 0; cic < NUM_CHIPS; cic++)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f77f af56 	ble.w	8001e16 <ADBMS_CalculateValues_Temps+0xb6>
                }
            }
        }
    }
    adbms->openwire_temp_fault_ = adbms->openwire_temp_fault_ || openwire_temp_fault;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <ADBMS_CalculateValues_Temps+0x21c>
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <ADBMS_CalculateValues_Temps+0x220>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <ADBMS_CalculateValues_Temps+0x222>
 8001f80:	2300      	movs	r3, #0
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    // calculate the avg temp
    adbms->avg_temp = total_temp / (NUM_CHIPS * NUM_TEMPS_CHIP);
 8001f8e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f92:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
    
}
 8001fa0:	3728      	adds	r7, #40	@ 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	9999999a 	.word	0x9999999a
 8001fac:	3fb99999 	.word	0x3fb99999
 8001fb0:	7f7fffff 	.word	0x7f7fffff
 8001fb4:	40400000 	.word	0x40400000

08001fb8 <UpdateADInternalFault>:

void UpdateADInternalFault(adbms_ *adbms)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    // check overvoltage fault
    adbms->overvoltage_fault_ = adbms->overvoltage_fault_ || (adbms->max_v > OVERVOLTAGE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <UpdateADInternalFault+0x2e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	a330      	add	r3, pc, #192	@ (adr r3, 8002098 <UpdateADInternalFault+0xe0>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <UpdateADInternalFault+0x32>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <UpdateADInternalFault+0x34>
 8001fea:	2300      	movs	r3, #0
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5

    // check undervoltage fault
    adbms->undervoltage_fault_ = adbms->undervoltage_fault_ || (adbms->min_v < UNDERVOLTAGE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <UpdateADInternalFault+0x5e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002008:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800200c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	d501      	bpl.n	800201a <UpdateADInternalFault+0x62>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <UpdateADInternalFault+0x64>
 800201a:	2300      	movs	r3, #0
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4

    // check overtemperature fault
    adbms->overtemperature_fault_ = adbms->overtemperature_fault_ || (adbms->max_temp > OVERTEMP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <UpdateADInternalFault+0x8e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002038:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002090 <UpdateADInternalFault+0xd8>
 800203c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	dd01      	ble.n	800204a <UpdateADInternalFault+0x92>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <UpdateADInternalFault+0x94>
 800204a:	2300      	movs	r3, #0
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

    // check under
    adbms->undertemperature_fault_ = adbms->undertemperature_fault_ || (adbms->min_temp < UNDERTEMP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <UpdateADInternalFault+0xbe>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8002068:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002094 <UpdateADInternalFault+0xdc>
 800206c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002074:	d501      	bpl.n	800207a <UpdateADInternalFault+0xc2>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <UpdateADInternalFault+0xc4>
 800207a:	2300      	movs	r3, #0
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6

    // TODO: check status regs for faults - need calcuate status reg values fn that handles status reg pec fualts
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	42b40000 	.word	0x42b40000
 8002094:	c2200000 	.word	0xc2200000
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	4010cccc 	.word	0x4010cccc

080020a0 <ADBMS_getVoltage>:
    }
}
*/

float ADBMS_getVoltage(int data)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    float voltage_float; // voltage in Volts
    voltage_float = ((data + 10000) * 0.000150);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80020ae:	3310      	adds	r3, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa37 	bl	8000524 <__aeabi_i2d>
 80020b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80020e0 <ADBMS_getVoltage+0x40>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fa9c 	bl	80005f8 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd6e 	bl	8000ba8 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	ee07 3a90 	vmov	s15, r3
}
 80020d6:	eeb0 0a67 	vmov.f32	s0, s15
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	30553261 	.word	0x30553261
 80020e4:	3f23a92a 	.word	0x3f23a92a

080020e8 <ADBMS_Print_Vals>:

void ADBMS_Print_Vals(adbms_ *adbms)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    // print the total, max, min, and avg voltage
    printf("\nVOLTAGES\n");
 80020f0:	487a      	ldr	r0, [pc, #488]	@ (80022dc <ADBMS_Print_Vals+0x1f4>)
 80020f2:	f009 fc53 	bl	800b99c <puts>
    printf("total v: %f\n", adbms->total_v);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa23 	bl	8000548 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4876      	ldr	r0, [pc, #472]	@ (80022e0 <ADBMS_Print_Vals+0x1f8>)
 8002108:	f009 fbd8 	bl	800b8bc <iprintf>
    printf("max v: %f\t", adbms->max_v);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4871      	ldr	r0, [pc, #452]	@ (80022e4 <ADBMS_Print_Vals+0x1fc>)
 800211e:	f009 fbcd 	bl	800b8bc <iprintf>
    printf("min v: %f\t", adbms->min_v);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	486d      	ldr	r0, [pc, #436]	@ (80022e8 <ADBMS_Print_Vals+0x200>)
 8002134:	f009 fbc2 	bl	800b8bc <iprintf>
    printf("avg v: %f\t", adbms->avg_v);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa02 	bl	8000548 <__aeabi_f2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4868      	ldr	r0, [pc, #416]	@ (80022ec <ADBMS_Print_Vals+0x204>)
 800214a:	f009 fbb7 	bl	800b8bc <iprintf>
    printf("max-min: %f\n", adbms->max_v - adbms->min_v);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800215a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe f9f1 	bl	8000548 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4861      	ldr	r0, [pc, #388]	@ (80022f0 <ADBMS_Print_Vals+0x208>)
 800216c:	f009 fba6 	bl	800b8bc <iprintf>

    // print every voltage
    for (int i = 0; i < NUM_CHIPS; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e02a      	b.n	80021cc <ADBMS_Print_Vals+0xe4>
    {
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e021      	b.n	80021c0 <ADBMS_Print_Vals+0xd8>
        {
            printf("C%d=%fV\t", (i * NUM_VOLTAGES_CHIP + j + 1), adbms->voltages[i * NUM_VOLTAGES_CHIP + j]);
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	461a      	mov	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	1c5c      	adds	r4, r3, #1
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	461a      	mov	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	331c      	adds	r3, #28
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9cd 	bl	8000548 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4621      	mov	r1, r4
 80021b4:	484f      	ldr	r0, [pc, #316]	@ (80022f4 <ADBMS_Print_Vals+0x20c>)
 80021b6:	f009 fb81 	bl	800b8bc <iprintf>
        for (int j = 0; j < NUM_VOLTAGES_CHIP; j++)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3301      	adds	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	ddda      	ble.n	800217c <ADBMS_Print_Vals+0x94>
    for (int i = 0; i < NUM_CHIPS; i++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	ddd1      	ble.n	8002176 <ADBMS_Print_Vals+0x8e>
        }
    }
    printf("\n");
 80021d2:	200a      	movs	r0, #10
 80021d4:	f009 fb84 	bl	800b8e0 <putchar>

    // print the total, max, min, and avg temp
    printf("\nTEMPS\n");
 80021d8:	4847      	ldr	r0, [pc, #284]	@ (80022f8 <ADBMS_Print_Vals+0x210>)
 80021da:	f009 fbdf 	bl	800b99c <puts>
    printf("max temp: %f\t", adbms->max_temp);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4843      	ldr	r0, [pc, #268]	@ (80022fc <ADBMS_Print_Vals+0x214>)
 80021f0:	f009 fb64 	bl	800b8bc <iprintf>
    printf("min temp: %f\t", adbms->min_temp);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9a4 	bl	8000548 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	483e      	ldr	r0, [pc, #248]	@ (8002300 <ADBMS_Print_Vals+0x218>)
 8002206:	f009 fb59 	bl	800b8bc <iprintf>
    printf("avg temp: %f\n", adbms->avg_temp);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f999 	bl	8000548 <__aeabi_f2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	483a      	ldr	r0, [pc, #232]	@ (8002304 <ADBMS_Print_Vals+0x21c>)
 800221c:	f009 fb4e 	bl	800b8bc <iprintf>

    for (int i = 0; i < NUM_CHIPS; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e022      	b.n	800226c <ADBMS_Print_Vals+0x184>
    {
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	e019      	b.n	8002260 <ADBMS_Print_Vals+0x178>
        {
            printf("T%d=%f\t", (i * NUM_TEMPS_CHIP + j + 1), adbms->temperatures[i * NUM_TEMPS_CHIP + j]);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	00da      	lsls	r2, r3, #3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4413      	add	r3, r2
 8002234:	1c5c      	adds	r4, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	00da      	lsls	r2, r3, #3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	332a      	adds	r3, #42	@ 0x2a
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f97d 	bl	8000548 <__aeabi_f2d>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4621      	mov	r1, r4
 8002254:	482c      	ldr	r0, [pc, #176]	@ (8002308 <ADBMS_Print_Vals+0x220>)
 8002256:	f009 fb31 	bl	800b8bc <iprintf>
        for (int j = 0; j < NUM_TEMPS_CHIP; j++)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3301      	adds	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b07      	cmp	r3, #7
 8002264:	dde2      	ble.n	800222c <ADBMS_Print_Vals+0x144>
    for (int i = 0; i < NUM_CHIPS; i++)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	ddd9      	ble.n	8002226 <ADBMS_Print_Vals+0x13e>
        }
    }
    printf("\n");
 8002272:	200a      	movs	r0, #10
 8002274:	f009 fb34 	bl	800b8e0 <putchar>

    printf("Faults\n");
 8002278:	4824      	ldr	r0, [pc, #144]	@ (800230c <ADBMS_Print_Vals+0x224>)
 800227a:	f009 fb8f 	bl	800b99c <puts>
    printf("undervoltage: %d\t", adbms->undervoltage_fault_);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002284:	4619      	mov	r1, r3
 8002286:	4822      	ldr	r0, [pc, #136]	@ (8002310 <ADBMS_Print_Vals+0x228>)
 8002288:	f009 fb18 	bl	800b8bc <iprintf>
    printf("overvoltage: %d\t", adbms->overvoltage_fault_);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002292:	4619      	mov	r1, r3
 8002294:	481f      	ldr	r0, [pc, #124]	@ (8002314 <ADBMS_Print_Vals+0x22c>)
 8002296:	f009 fb11 	bl	800b8bc <iprintf>
    printf("pec: %d\t", adbms->pec_fault_);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80022a0:	4619      	mov	r1, r3
 80022a2:	481d      	ldr	r0, [pc, #116]	@ (8002318 <ADBMS_Print_Vals+0x230>)
 80022a4:	f009 fb0a 	bl	800b8bc <iprintf>
    printf("overtemperature: %d\t", adbms->overtemperature_fault_);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80022ae:	4619      	mov	r1, r3
 80022b0:	481a      	ldr	r0, [pc, #104]	@ (800231c <ADBMS_Print_Vals+0x234>)
 80022b2:	f009 fb03 	bl	800b8bc <iprintf>
    printf("openwire: %d\t", adbms->openwire_fault_);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80022bc:	4619      	mov	r1, r3
 80022be:	4818      	ldr	r0, [pc, #96]	@ (8002320 <ADBMS_Print_Vals+0x238>)
 80022c0:	f009 fafc 	bl	800b8bc <iprintf>
    printf("openwire_temp: %d\n", adbms->openwire_temp_fault_);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 80022ca:	4619      	mov	r1, r3
 80022cc:	4815      	ldr	r0, [pc, #84]	@ (8002324 <ADBMS_Print_Vals+0x23c>)
 80022ce:	f009 faf5 	bl	800b8bc <iprintf>
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	0800e130 	.word	0x0800e130
 80022e0:	0800e13c 	.word	0x0800e13c
 80022e4:	0800e14c 	.word	0x0800e14c
 80022e8:	0800e158 	.word	0x0800e158
 80022ec:	0800e164 	.word	0x0800e164
 80022f0:	0800e170 	.word	0x0800e170
 80022f4:	0800e180 	.word	0x0800e180
 80022f8:	0800e18c 	.word	0x0800e18c
 80022fc:	0800e194 	.word	0x0800e194
 8002300:	0800e1a4 	.word	0x0800e1a4
 8002304:	0800e1b4 	.word	0x0800e1b4
 8002308:	0800e1c4 	.word	0x0800e1c4
 800230c:	0800e1cc 	.word	0x0800e1cc
 8002310:	0800e1d4 	.word	0x0800e1d4
 8002314:	0800e1e8 	.word	0x0800e1e8
 8002318:	0800e1fc 	.word	0x0800e1fc
 800231c:	0800e208 	.word	0x0800e208
 8002320:	0800e220 	.word	0x0800e220
 8002324:	0800e230 	.word	0x0800e230

08002328 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002330:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002334:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002340:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002344:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002348:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002350:	e000      	b.n	8002354 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002352:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002354:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f9      	beq.n	8002352 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800235e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

int _write(int le, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e009      	b.n	800239c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ffc9 	bl	8002328 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbf1      	blt.n	8002388 <_write+0x12>
	}
	return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f000 fdda 	bl	8002f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f836 	bl	8002428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f000 f9fa 	bl	80027b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023c0:	f000 f89c 	bl	80024fc <MX_ADC1_Init>
  MX_TIM2_Init();
 80023c4:	f000 f9aa 	bl	800271c <MX_TIM2_Init>
  MX_CAN1_Init();
 80023c8:	f000 f8ea 	bl	80025a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80023cc:	f000 f93a 	bl	8002644 <MX_CAN2_Init>
  MX_SPI1_Init();
 80023d0:	f000 f96e 	bl	80026b0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80023d4:	f008 f866 	bl	800a4a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // turn gpio1 on
  HAL_Delay(5);
 80023d8:	2005      	movs	r0, #5
 80023da:	f000 fe39 	bl	8003050 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	2120      	movs	r1, #32
 80023e2:	480d      	ldr	r0, [pc, #52]	@ (8002418 <main+0x68>)
 80023e4:	f001 ff7e 	bl	80042e4 <HAL_GPIO_WritePin>
  printf("Board Starting...\n");
 80023e8:	480c      	ldr	r0, [pc, #48]	@ (800241c <main+0x6c>)
 80023ea:	f009 fad7 	bl	800b99c <puts>
  ADBMS_Initialize(&adbms, &hspi1);
 80023ee:	490c      	ldr	r1, [pc, #48]	@ (8002420 <main+0x70>)
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <main+0x74>)
 80023f2:	f7ff fa0f 	bl	8001814 <ADBMS_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ADBMS_UpdateVoltages(&adbms);
 80023f6:	480b      	ldr	r0, [pc, #44]	@ (8002424 <main+0x74>)
 80023f8:	f7ff fab4 	bl	8001964 <ADBMS_UpdateVoltages>
	  ADBMS_UpdateTemps(&adbms);
 80023fc:	4809      	ldr	r0, [pc, #36]	@ (8002424 <main+0x74>)
 80023fe:	f7ff fb3b 	bl	8001a78 <ADBMS_UpdateTemps>
	  UpdateADInternalFault(&adbms);
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <main+0x74>)
 8002404:	f7ff fdd8 	bl	8001fb8 <UpdateADInternalFault>

    if(ENABLE_PRINTF_DEBUG_COMMS) ADBMS_Print_Vals(&adbms);
 8002408:	4806      	ldr	r0, [pc, #24]	@ (8002424 <main+0x74>)
 800240a:	f7ff fe6d 	bl	80020e8 <ADBMS_Print_Vals>
    if(ENABLE_USB_COMMS) ADBMS_USB_Serial_Print_Vals(&adbms);

    HAL_Delay(500);
 800240e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002412:	f000 fe1d 	bl	8003050 <HAL_Delay>
    ADBMS_UpdateVoltages(&adbms);
 8002416:	e7ee      	b.n	80023f6 <main+0x46>
 8002418:	40020400 	.word	0x40020400
 800241c:	0800e2d0 	.word	0x0800e2d0
 8002420:	200003a0 	.word	0x200003a0
 8002424:	20000440 	.word	0x20000440

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	@ 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	2230      	movs	r2, #48	@ 0x30
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f009 fb90 	bl	800bb5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <SystemClock_Config+0xcc>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <SystemClock_Config+0xcc>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	@ 0x40
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <SystemClock_Config+0xcc>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <SystemClock_Config+0xd0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <SystemClock_Config+0xd0>)
 8002472:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <SystemClock_Config+0xd0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002484:	2301      	movs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248e:	2302      	movs	r3, #2
 8002490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002492:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002498:	2304      	movs	r3, #4
 800249a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800249c:	2360      	movs	r3, #96	@ 0x60
 800249e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80024a0:	2306      	movs	r3, #6
 80024a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024a4:	2304      	movs	r3, #4
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a8:	f107 0320 	add.w	r3, r7, #32
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 f985 	bl	80057bc <HAL_RCC_OscConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024b8:	f000 fa22 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024bc:	230f      	movs	r3, #15
 80024be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c0:	2302      	movs	r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fbe6 	bl	8005cac <HAL_RCC_ClockConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024e6:	f000 fa0b 	bl	8002900 <Error_Handler>
  }
}
 80024ea:	bf00      	nop
 80024ec:	3750      	adds	r7, #80	@ 0x50
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002510:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <MX_ADC1_Init+0x9c>)
 8002512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_ADC1_Init+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002520:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002528:	2200      	movs	r2, #0
 800252a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <MX_ADC1_Init+0x98>)
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_ADC1_Init+0x98>)
 800253c:	4a17      	ldr	r2, [pc, #92]	@ (800259c <MX_ADC1_Init+0xa0>)
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002548:	2201      	movs	r2, #1
 800254a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <MX_ADC1_Init+0x98>)
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002554:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_ADC1_Init+0x98>)
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800255a:	480e      	ldr	r0, [pc, #56]	@ (8002594 <MX_ADC1_Init+0x98>)
 800255c:	f000 fd9c 	bl	8003098 <HAL_ADC_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002566:	f000 f9cb 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800256a:	2302      	movs	r3, #2
 800256c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	4619      	mov	r1, r3
 800257a:	4806      	ldr	r0, [pc, #24]	@ (8002594 <MX_ADC1_Init+0x98>)
 800257c:	f000 fdd0 	bl	8003120 <HAL_ADC_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002586:	f000 f9bb 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000308 	.word	0x20000308
 8002598:	40012000 	.word	0x40012000
 800259c:	0f000001 	.word	0x0f000001

080025a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80025a6:	4b25      	ldr	r3, [pc, #148]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025a8:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <MX_CAN1_Init+0xa0>)
 80025aa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025ae:	2204      	movs	r2, #4
 80025b0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025b8:	4b20      	ldr	r3, [pc, #128]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80025be:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025ea:	4b14      	ldr	r3, [pc, #80]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025f0:	4812      	ldr	r0, [pc, #72]	@ (800263c <MX_CAN1_Init+0x9c>)
 80025f2:	f000 ffb3 	bl	800355c <HAL_CAN_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80025fc:	f000 f980 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002600:	2301      	movs	r3, #1
 8002602:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8002604:	2312      	movs	r3, #18
 8002606:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 800260c:	2300      	movs	r3, #0
 800260e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002620:	2301      	movs	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8002624:	2314      	movs	r3, #20
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4803      	ldr	r0, [pc, #12]	@ (800263c <MX_CAN1_Init+0x9c>)
 800262e:	f001 f891 	bl	8003754 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	@ 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000350 	.word	0x20000350
 8002640:	40006400 	.word	0x40006400

08002644 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <MX_CAN2_Init+0x64>)
 800264a:	4a18      	ldr	r2, [pc, #96]	@ (80026ac <MX_CAN2_Init+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002650:	2204      	movs	r2, #4
 8002652:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800265a:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <MX_CAN2_Init+0x64>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002662:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002666:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <MX_CAN2_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002670:	2200      	movs	r2, #0
 8002672:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <MX_CAN2_Init+0x64>)
 800267c:	2200      	movs	r2, #0
 800267e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002682:	2200      	movs	r2, #0
 8002684:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <MX_CAN2_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_CAN2_Init+0x64>)
 8002694:	f000 ff62 	bl	800355c <HAL_CAN_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800269e:	f000 f92f 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000378 	.word	0x20000378
 80026ac:	40006800 	.word	0x40006800

080026b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026b6:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <MX_SPI1_Init+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ba:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026e4:	2208      	movs	r2, #8
 80026e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_SPI1_Init+0x64>)
 80026fc:	220a      	movs	r2, #10
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	@ (8002714 <MX_SPI1_Init+0x64>)
 8002702:	f003 fccb 	bl	800609c <HAL_SPI_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800270c:	f000 f8f8 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200003a0 	.word	0x200003a0
 8002718:	40013000 	.word	0x40013000

0800271c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	463b      	mov	r3, r7
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <MX_TIM2_Init+0x94>)
 800273a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800273e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <MX_TIM2_Init+0x94>)
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <MX_TIM2_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800274c:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <MX_TIM2_Init+0x94>)
 800274e:	f04f 32ff 	mov.w	r2, #4294967295
 8002752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <MX_TIM2_Init+0x94>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <MX_TIM2_Init+0x94>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002760:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <MX_TIM2_Init+0x94>)
 8002762:	f004 f8ed 	bl	8006940 <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800276c:	f000 f8c8 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <MX_TIM2_Init+0x94>)
 800277e:	f004 f92e 	bl	80069de <HAL_TIM_ConfigClockSource>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002788:	f000 f8ba 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002794:	463b      	mov	r3, r7
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_TIM2_Init+0x94>)
 800279a:	f004 fb2d 	bl	8006df8 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027a4:	f000 f8ac 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200003f8 	.word	0x200003f8

080027b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b48      	ldr	r3, [pc, #288]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a47      	ldr	r2, [pc, #284]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b45      	ldr	r3, [pc, #276]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a40      	ldr	r2, [pc, #256]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b3e      	ldr	r3, [pc, #248]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a39      	ldr	r2, [pc, #228]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b33      	ldr	r3, [pc, #204]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a32      	ldr	r2, [pc, #200]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b30      	ldr	r3, [pc, #192]	@ (80028f0 <MX_GPIO_Init+0x13c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8002840:	482c      	ldr	r0, [pc, #176]	@ (80028f4 <MX_GPIO_Init+0x140>)
 8002842:	f001 fd4f 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_Status_GPIO_GPIO_Port, BMS_Status_GPIO_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800284c:	482a      	ldr	r0, [pc, #168]	@ (80028f8 <MX_GPIO_Init+0x144>)
 800284e:	f001 fd49 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin, GPIO_PIN_RESET);
 8002852:	2200      	movs	r2, #0
 8002854:	21e0      	movs	r1, #224	@ 0xe0
 8002856:	4829      	ldr	r0, [pc, #164]	@ (80028fc <MX_GPIO_Init+0x148>)
 8002858:	f001 fd44 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CSB_Pin Contactor_N_Ctrl_GPIO_Pin Contactor_P_Ctrl_GPIO_Pin Contactor_Pre_Ctrl_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_CSB_Pin|Contactor_N_Ctrl_GPIO_Pin|Contactor_P_Ctrl_GPIO_Pin|Contactor_Pre_Ctrl_GPIO_Pin;
 800285c:	f44f 63e2 	mov.w	r3, #1808	@ 0x710
 8002860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	481f      	ldr	r0, [pc, #124]	@ (80028f4 <MX_GPIO_Init+0x140>)
 8002876:	f001 fb99 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Contactors_IN_Pin Comms_6822_State_GPIO_Pin */
  GPIO_InitStruct.Pin = SD_Contactors_IN_Pin|Comms_6822_State_GPIO_Pin;
 800287a:	f248 0302 	movw	r3, #32770	@ 0x8002
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	481b      	ldr	r0, [pc, #108]	@ (80028fc <MX_GPIO_Init+0x148>)
 8002890:	f001 fb8c 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Charger_GPIO_Pin IMD_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = Charger_GPIO_Pin|IMD_Status_GPIO_Pin;
 8002894:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4813      	ldr	r0, [pc, #76]	@ (80028f8 <MX_GPIO_Init+0x144>)
 80028aa:	f001 fb7f 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Status_GPIO_Pin */
  GPIO_InitStruct.Pin = BMS_Status_GPIO_Pin;
 80028ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_Status_GPIO_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_GPIO_Init+0x144>)
 80028c8:	f001 fb70 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_GPIO_Pin LED2_GPIO_Pin LED3_GPIO_Pin */
  GPIO_InitStruct.Pin = LED1_GPIO_Pin|LED2_GPIO_Pin|LED3_GPIO_Pin;
 80028cc:	23e0      	movs	r3, #224	@ 0xe0
 80028ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4619      	mov	r1, r3
 80028e2:	4806      	ldr	r0, [pc, #24]	@ (80028fc <MX_GPIO_Init+0x148>)
 80028e4:	f001 fb62 	bl	8003fac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	@ 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020400 	.word	0x40020400

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <Error_Handler+0x8>

0800290c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_MspInit+0x4c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <HAL_MspInit+0x4c>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002920:	6453      	str	r3, [r2, #68]	@ 0x44
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <HAL_MspInit+0x4c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_MspInit+0x4c>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a08      	ldr	r2, [pc, #32]	@ (8002958 <HAL_MspInit+0x4c>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_MspInit+0x4c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_ADC_MspInit+0x7c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d127      	bne.n	80029ce <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298c:	6453      	str	r3, [r2, #68]	@ 0x44
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_ADC_MspInit+0x80>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 80029b6:	2304      	movs	r3, #4
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ba:	2303      	movs	r3, #3
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <HAL_ADC_MspInit+0x84>)
 80029ca:	f001 faef 	bl	8003fac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	@ 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40012000 	.word	0x40012000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000

080029e4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a47      	ldr	r2, [pc, #284]	@ (8002b20 <HAL_CAN_MspInit+0x13c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d13e      	bne.n	8002a84 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a45      	ldr	r2, [pc, #276]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002a0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002a10:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10d      	bne.n	8002a34 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	4b42      	ldr	r3, [pc, #264]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	4a41      	ldr	r2, [pc, #260]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a28:	4b3f      	ldr	r3, [pc, #252]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	4b3b      	ldr	r3, [pc, #236]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a44:	4b38      	ldr	r3, [pc, #224]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a62:	2309      	movs	r3, #9
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	482f      	ldr	r0, [pc, #188]	@ (8002b2c <HAL_CAN_MspInit+0x148>)
 8002a6e:	f001 fa9d 	bl	8003fac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2014      	movs	r0, #20
 8002a78:	f001 fa61 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a7c:	2014      	movs	r0, #20
 8002a7e:	f001 fa7a 	bl	8003f76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002a82:	e048      	b.n	8002b16 <HAL_CAN_MspInit+0x132>
  else if(hcan->Instance==CAN2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a29      	ldr	r2, [pc, #164]	@ (8002b30 <HAL_CAN_MspInit+0x14c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d143      	bne.n	8002b16 <HAL_CAN_MspInit+0x132>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002a98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002ab2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_CAN_MspInit+0x140>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10d      	bne.n	8002ad8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002ac6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002acc:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_CAN_MspInit+0x144>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002af4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002b06:	2309      	movs	r3, #9
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4806      	ldr	r0, [pc, #24]	@ (8002b2c <HAL_CAN_MspInit+0x148>)
 8002b12:	f001 fa4b 	bl	8003fac <HAL_GPIO_Init>
}
 8002b16:	bf00      	nop
 8002b18:	3730      	adds	r7, #48	@ 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40006400 	.word	0x40006400
 8002b24:	2000053c 	.word	0x2000053c
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40006800 	.word	0x40006800

08002b34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	@ 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <HAL_SPI_MspInit+0x84>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d12b      	bne.n	8002bae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_SPI_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b8e:	23e0      	movs	r3, #224	@ 0xe0
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <HAL_SPI_MspInit+0x8c>)
 8002baa:	f001 f9ff 	bl	8003fac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002bae:	bf00      	nop
 8002bb0:	3728      	adds	r7, #40	@ 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40013000 	.word	0x40013000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_TIM_Base_MspInit+0x3c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <NMI_Handler+0x4>

08002c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5a:	f000 f9d9 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <CAN1_RX0_IRQHandler+0x10>)
 8002c6a:	f000 fe53 	bl	8003914 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000350 	.word	0x20000350

08002c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <OTG_FS_IRQHandler+0x10>)
 8002c7e:	f001 fc8e 	bl	800459e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20001a28 	.word	0x20001a28

08002c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return 1;
 8002c90:	2301      	movs	r3, #1
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_kill>:

int _kill(int pid, int sig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca6:	f008 ffab 	bl	800bc00 <__errno>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2216      	movs	r2, #22
 8002cae:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_exit>:

void _exit (int status)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ffe7 	bl	8002c9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <_exit+0x12>

08002cd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e00a      	b.n	8002cfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	4601      	mov	r1, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	60ba      	str	r2, [r7, #8]
 8002cf0:	b2ca      	uxtb	r2, r1
 8002cf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	dbf0      	blt.n	8002ce4 <_read+0x12>
  }

  return len;
 8002d02:	687b      	ldr	r3, [r7, #4]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d34:	605a      	str	r2, [r3, #4]
  return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_isatty>:

int _isatty(int file)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f008 ff2c 	bl	800bc00 <__errno>
 8002da8:	4603      	mov	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a05      	ldr	r2, [pc, #20]	@ (8002dd8 <_sbrk+0x64>)
 8002dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20020000 	.word	0x20020000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	20000540 	.word	0x20000540
 8002ddc:	20002278 	.word	0x20002278

08002de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <SystemInit+0x20>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <SystemInit+0x20>)
 8002dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00
 8002e04:	00000000 	.word	0x00000000

08002e08 <getTemp>:
float R25 = 10000.0;
float B = 3435;
float T25 = 298.15;

float getTemp(float raw_temp_voltage, float Vref)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e14:	edc7 0a00 	vstr	s1, [r7]
	// calc thermistor resistance
	float therm_resistance = (raw_temp_voltage * SeriesResistance) / (Vref - raw_temp_voltage);
 8002e18:	4b3b      	ldr	r3, [pc, #236]	@ (8002f08 <getTemp+0x100>)
 8002e1a:	ed93 7a00 	vldr	s14, [r3]
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e26:	ed97 7a00 	vldr	s14, [r7]
 8002e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e36:	edc7 7a03 	vstr	s15, [r7, #12]

	// calc temp from resistance
	float temp_kelvin = B / log(therm_resistance / (R25 * exp(-B / T25)));
 8002e3a:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <getTemp+0x104>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fb82 	bl	8000548 <__aeabi_f2d>
 8002e44:	4604      	mov	r4, r0
 8002e46:	460d      	mov	r5, r1
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7fd fb7d 	bl	8000548 <__aeabi_f2d>
 8002e4e:	4680      	mov	r8, r0
 8002e50:	4689      	mov	r9, r1
 8002e52:	4b2f      	ldr	r3, [pc, #188]	@ (8002f10 <getTemp+0x108>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb76 	bl	8000548 <__aeabi_f2d>
 8002e5c:	4682      	mov	sl, r0
 8002e5e:	468b      	mov	fp, r1
 8002e60:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <getTemp+0x104>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	eeb1 7a67 	vneg.f32	s14, s15
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <getTemp+0x10c>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e74:	ee16 0a90 	vmov	r0, s13
 8002e78:	f7fd fb66 	bl	8000548 <__aeabi_f2d>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	ec43 2b10 	vmov	d0, r2, r3
 8002e84:	f00a fd34 	bl	800d8f0 <exp>
 8002e88:	ec53 2b10 	vmov	r2, r3, d0
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	4659      	mov	r1, fp
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4640      	mov	r0, r8
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	f7fd fcd6 	bl	800084c <__aeabi_ddiv>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	ec43 2b17 	vmov	d7, r2, r3
 8002ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8002eac:	eef0 0a67 	vmov.f32	s1, s15
 8002eb0:	f00a fd66 	bl	800d980 <log>
 8002eb4:	ec53 2b10 	vmov	r2, r3, d0
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fcc6 	bl	800084c <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe6e 	bl	8000ba8 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60bb      	str	r3, [r7, #8]
	return temp_kelvin - 273.15; // Kelvin to Celsius
 8002ed0:	68b8      	ldr	r0, [r7, #8]
 8002ed2:	f7fd fb39 	bl	8000548 <__aeabi_f2d>
 8002ed6:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f00 <getTemp+0xf8>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f7fd f9d4 	bl	8000288 <__aeabi_dsub>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe5e 	bl	8000ba8 <__aeabi_d2f>
 8002eec:	4603      	mov	r3, r0
 8002eee:	ee07 3a90 	vmov	s15, r3
}
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efe:	bf00      	nop
 8002f00:	66666666 	.word	0x66666666
 8002f04:	40711266 	.word	0x40711266
 8002f08:	2000001c 	.word	0x2000001c
 8002f0c:	20000024 	.word	0x20000024
 8002f10:	20000020 	.word	0x20000020
 8002f14:	20000028 	.word	0x20000028

08002f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f1c:	f7ff ff60 	bl	8002de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f20:	480c      	ldr	r0, [pc, #48]	@ (8002f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f28:	e002      	b.n	8002f30 <LoopCopyDataInit>

08002f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2e:	3304      	adds	r3, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f34:	d3f9      	bcc.n	8002f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f3c:	e001      	b.n	8002f42 <LoopFillZerobss>

08002f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f40:	3204      	adds	r2, #4

08002f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f44:	d3fb      	bcc.n	8002f3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002f46:	f008 fe61 	bl	800bc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f4a:	f7ff fa31 	bl	80023b0 <main>
  bx  lr    
 8002f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f58:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8002f5c:	0800e8f8 	.word	0x0800e8f8
  ldr r2, =_sbss
 8002f60:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8002f64:	20002278 	.word	0x20002278

08002f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 ffc7 	bl	8003f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	200f      	movs	r0, #15
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7ff fcb4 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 ffdf 	bl	8003f92 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 ffa7 	bl	8003f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	@ (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000018 	.word	0x20000018
 8003008:	20000030 	.word	0x20000030
 800300c:	2000002c 	.word	0x2000002c

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000030 	.word	0x20000030
 8003034:	20000544 	.word	0x20000544

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000544 	.word	0x20000544

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000030 	.word	0x20000030

08003098 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e033      	b.n	8003116 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fc50 	bl	800295c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f93a 	bl	8003364 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40
 8003106:	e001      	b.n	800310c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e105      	b.n	8003348 <HAL_ADC_ConfigChannel+0x228>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b09      	cmp	r3, #9
 800314a:	d925      	bls.n	8003198 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	3b1e      	subs	r3, #30
 8003162:	2207      	movs	r2, #7
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43da      	mvns	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	400a      	ands	r2, r1
 8003170:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68d9      	ldr	r1, [r3, #12]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	4618      	mov	r0, r3
 8003184:	4603      	mov	r3, r0
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4403      	add	r3, r0
 800318a:	3b1e      	subs	r3, #30
 800318c:	409a      	lsls	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e022      	b.n	80031de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	2207      	movs	r2, #7
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4403      	add	r3, r0
 80031d4:	409a      	lsls	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d824      	bhi.n	8003230 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b05      	subs	r3, #5
 80031f8:	221f      	movs	r2, #31
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	400a      	ands	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	3b05      	subs	r3, #5
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	@ 0x34
 800322e:	e04c      	b.n	80032ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	d824      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b23      	subs	r3, #35	@ 0x23
 800324a:	221f      	movs	r2, #31
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b23      	subs	r3, #35	@ 0x23
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003280:	e023      	b.n	80032ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b41      	subs	r3, #65	@ 0x41
 8003294:	221f      	movs	r2, #31
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b41      	subs	r3, #65	@ 0x41
 80032be:	fa00 f203 	lsl.w	r2, r0, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <HAL_ADC_ConfigChannel+0x234>)
 80032cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <HAL_ADC_ConfigChannel+0x238>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d109      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1cc>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d105      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <HAL_ADC_ConfigChannel+0x238>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d123      	bne.n	800333e <HAL_ADC_ConfigChannel+0x21e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d003      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x1e6>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b11      	cmp	r3, #17
 8003304:	d11b      	bne.n	800333e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d111      	bne.n	800333e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_ADC_ConfigChannel+0x23c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <HAL_ADC_ConfigChannel+0x240>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9a      	lsrs	r2, r3, #18
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003330:	e002      	b.n	8003338 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40012300 	.word	0x40012300
 8003358:	40012000 	.word	0x40012000
 800335c:	20000018 	.word	0x20000018
 8003360:	431bde83 	.word	0x431bde83

08003364 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800336c:	4b79      	ldr	r3, [pc, #484]	@ (8003554 <ADC_Init+0x1f0>)
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f6:	4a58      	ldr	r2, [pc, #352]	@ (8003558 <ADC_Init+0x1f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800340a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800342c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e00f      	b.n	8003462 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003460:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0202 	bic.w	r2, r2, #2
 8003470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7e1b      	ldrb	r3, [r3, #24]
 800347c:	005a      	lsls	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800349e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	3b01      	subs	r3, #1
 80034bc:	035a      	lsls	r2, r3, #13
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e007      	b.n	80034d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	051a      	lsls	r2, r3, #20
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800350c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800351a:	025a      	lsls	r2, r3, #9
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	029a      	lsls	r2, r3, #10
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40012300 	.word	0x40012300
 8003558:	0f000001 	.word	0x0f000001

0800355c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0ed      	b.n	800374a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fa32 	bl	80029e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003590:	f7ff fd52 	bl	8003038 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003596:	e012      	b.n	80035be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003598:	f7ff fd4e 	bl	8003038 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b0a      	cmp	r3, #10
 80035a4:	d90b      	bls.n	80035be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2205      	movs	r2, #5
 80035b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0c5      	b.n	800374a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0e5      	beq.n	8003598 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0202 	bic.w	r2, r2, #2
 80035da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035dc:	f7ff fd2c 	bl	8003038 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035e2:	e012      	b.n	800360a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035e4:	f7ff fd28 	bl	8003038 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b0a      	cmp	r3, #10
 80035f0:	d90b      	bls.n	800360a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2205      	movs	r2, #5
 8003602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e09f      	b.n	800374a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7e1b      	ldrb	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7e5b      	ldrb	r3, [r3, #25]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7e9b      	ldrb	r3, [r3, #26]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0220 	orr.w	r2, r2, #32
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0220 	bic.w	r2, r2, #32
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7edb      	ldrb	r3, [r3, #27]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0210 	bic.w	r2, r2, #16
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0210 	orr.w	r2, r2, #16
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7f1b      	ldrb	r3, [r3, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e007      	b.n	80036ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0208 	bic.w	r2, r2, #8
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7f5b      	ldrb	r3, [r3, #29]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0204 	orr.w	r2, r2, #4
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e007      	b.n	8003714 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	1e5a      	subs	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d003      	beq.n	800377a <HAL_CAN_ConfigFilter+0x26>
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f040 80be 	bne.w	80038f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800377a:	4b65      	ldr	r3, [pc, #404]	@ (8003910 <HAL_CAN_ConfigFilter+0x1bc>)
 800377c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003794:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	431a      	orrs	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2201      	movs	r2, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	401a      	ands	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d123      	bne.n	8003824 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3248      	adds	r2, #72	@ 0x48
 8003804:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003818:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	3348      	adds	r3, #72	@ 0x48
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	440b      	add	r3, r1
 8003822:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d122      	bne.n	8003872 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	431a      	orrs	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800384c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3248      	adds	r2, #72	@ 0x48
 8003852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003866:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	3348      	adds	r3, #72	@ 0x48
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	401a      	ands	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800388c:	e007      	b.n	800389e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	431a      	orrs	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	401a      	ands	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80038b8:	e007      	b.n	80038ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038e8:	f023 0201 	bic.w	r2, r3, #1
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e006      	b.n	8003904 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40006400 	.word	0x40006400

08003914 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	@ 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d07c      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f983 	bl	8003c82 <HAL_CAN_TxMailbox0CompleteCallback>
 800397c:	e016      	b.n	80039ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	e00c      	b.n	80039ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a4:	e002      	b.n	80039ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f989 	bl	8003cbe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d024      	beq.n	8003a00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f963 	bl	8003c96 <HAL_CAN_TxMailbox1CompleteCallback>
 80039d0:	e016      	b.n	8003a00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e4:	e00c      	b.n	8003a00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f8:	e002      	b.n	8003a00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f969 	bl	8003cd2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d024      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f943 	bl	8003caa <HAL_CAN_TxMailbox2CompleteCallback>
 8003a24:	e016      	b.n	8003a54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a38:	e00c      	b.n	8003a54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4c:	e002      	b.n	8003a54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f949 	bl	8003ce6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2210      	movs	r2, #16
 8003a76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d006      	beq.n	8003a9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f93a 	bl	8003d0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f921 	bl	8003cfa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2210      	movs	r2, #16
 8003ada:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f91c 	bl	8003d36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f903 	bl	8003d22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2210      	movs	r2, #16
 8003b36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f906 	bl	8003d4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2208      	movs	r2, #8
 8003b58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8ff 	bl	8003d5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d07b      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d072      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d043      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d03e      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003be2:	2b60      	cmp	r3, #96	@ 0x60
 8003be4:	d02b      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x32a>
 8003be6:	2b60      	cmp	r3, #96	@ 0x60
 8003be8:	d82e      	bhi.n	8003c48 <HAL_CAN_IRQHandler+0x334>
 8003bea:	2b50      	cmp	r3, #80	@ 0x50
 8003bec:	d022      	beq.n	8003c34 <HAL_CAN_IRQHandler+0x320>
 8003bee:	2b50      	cmp	r3, #80	@ 0x50
 8003bf0:	d82a      	bhi.n	8003c48 <HAL_CAN_IRQHandler+0x334>
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d019      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x316>
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d826      	bhi.n	8003c48 <HAL_CAN_IRQHandler+0x334>
 8003bfa:	2b30      	cmp	r3, #48	@ 0x30
 8003bfc:	d010      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x30c>
 8003bfe:	2b30      	cmp	r3, #48	@ 0x30
 8003c00:	d822      	bhi.n	8003c48 <HAL_CAN_IRQHandler+0x334>
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d002      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x2f8>
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d005      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c0a:	e01d      	b.n	8003c48 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c14:	e019      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	f043 0310 	orr.w	r3, r3, #16
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c1e:	e014      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	f043 0320 	orr.w	r3, r3, #32
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c28:	e00f      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c32:	e00a      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c3c:	e005      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c46:	e000      	b.n	8003c4a <HAL_CAN_IRQHandler+0x336>
            break;
 8003c48:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f87c 	bl	8003d72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	@ 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <__NVIC_SetPriorityGrouping>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4907      	ldr	r1, [pc, #28]	@ (8003e24 <__NVIC_EnableIRQ+0x38>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e000e100 	.word	0xe000e100

08003e28 <__NVIC_SetPriority>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	6039      	str	r1, [r7, #0]
 8003e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	db0a      	blt.n	8003e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	490c      	ldr	r1, [pc, #48]	@ (8003e74 <__NVIC_SetPriority+0x4c>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e50:	e00a      	b.n	8003e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <__NVIC_SetPriority+0x50>)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	0112      	lsls	r2, r2, #4
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	440b      	add	r3, r1
 8003e66:	761a      	strb	r2, [r3, #24]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000e100 	.word	0xe000e100
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <NVIC_EncodePriority>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	@ 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf28      	it	cs
 8003e9a:	2304      	movcs	r3, #4
 8003e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d902      	bls.n	8003eac <NVIC_EncodePriority+0x30>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3b03      	subs	r3, #3
 8003eaa:	e000      	b.n	8003eae <NVIC_EncodePriority+0x32>
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43d9      	mvns	r1, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	4313      	orrs	r3, r2
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	@ 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <SysTick_Config>:
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef4:	d301      	bcc.n	8003efa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00f      	b.n	8003f1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <SysTick_Config+0x40>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f02:	210f      	movs	r1, #15
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	f7ff ff8e 	bl	8003e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <SysTick_Config+0x40>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f12:	4b04      	ldr	r3, [pc, #16]	@ (8003f24 <SysTick_Config+0x40>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000e010 	.word	0xe000e010

08003f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff29 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f50:	f7ff ff3e 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff8e 	bl	8003e7c <NVIC_EncodePriority>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff5d 	bl	8003e28 <__NVIC_SetPriority>
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff31 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ffa2 	bl	8003ee4 <SysTick_Config>
 8003fa0:	4603      	mov	r3, r0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	@ 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e16b      	b.n	80042a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f040 815a 	bne.w	800429a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d005      	beq.n	8003ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d130      	bne.n	8004060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004034:	2201      	movs	r2, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 0201 	and.w	r2, r3, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d017      	beq.n	800409c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d123      	bne.n	80040f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	08da      	lsrs	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	220f      	movs	r2, #15
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	08da      	lsrs	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3208      	adds	r2, #8
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0203 	and.w	r2, r3, #3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80b4 	beq.w	800429a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <HAL_GPIO_Init+0x30c>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	4a5f      	ldr	r2, [pc, #380]	@ (80042b8 <HAL_GPIO_Init+0x30c>)
 800413c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004140:	6453      	str	r3, [r2, #68]	@ 0x44
 8004142:	4b5d      	ldr	r3, [pc, #372]	@ (80042b8 <HAL_GPIO_Init+0x30c>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800414e:	4a5b      	ldr	r2, [pc, #364]	@ (80042bc <HAL_GPIO_Init+0x310>)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	3302      	adds	r3, #2
 8004156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a52      	ldr	r2, [pc, #328]	@ (80042c0 <HAL_GPIO_Init+0x314>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d02b      	beq.n	80041d2 <HAL_GPIO_Init+0x226>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a51      	ldr	r2, [pc, #324]	@ (80042c4 <HAL_GPIO_Init+0x318>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d025      	beq.n	80041ce <HAL_GPIO_Init+0x222>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a50      	ldr	r2, [pc, #320]	@ (80042c8 <HAL_GPIO_Init+0x31c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01f      	beq.n	80041ca <HAL_GPIO_Init+0x21e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4f      	ldr	r2, [pc, #316]	@ (80042cc <HAL_GPIO_Init+0x320>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d019      	beq.n	80041c6 <HAL_GPIO_Init+0x21a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4e      	ldr	r2, [pc, #312]	@ (80042d0 <HAL_GPIO_Init+0x324>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_GPIO_Init+0x216>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4d      	ldr	r2, [pc, #308]	@ (80042d4 <HAL_GPIO_Init+0x328>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00d      	beq.n	80041be <HAL_GPIO_Init+0x212>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4c      	ldr	r2, [pc, #304]	@ (80042d8 <HAL_GPIO_Init+0x32c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <HAL_GPIO_Init+0x20e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4b      	ldr	r2, [pc, #300]	@ (80042dc <HAL_GPIO_Init+0x330>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_GPIO_Init+0x20a>
 80041b2:	2307      	movs	r3, #7
 80041b4:	e00e      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041b6:	2308      	movs	r3, #8
 80041b8:	e00c      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041ba:	2306      	movs	r3, #6
 80041bc:	e00a      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041be:	2305      	movs	r3, #5
 80041c0:	e008      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041c2:	2304      	movs	r3, #4
 80041c4:	e006      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041c6:	2303      	movs	r3, #3
 80041c8:	e004      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <HAL_GPIO_Init+0x228>
 80041d2:	2300      	movs	r3, #0
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	f002 0203 	and.w	r2, r2, #3
 80041da:	0092      	lsls	r2, r2, #2
 80041dc:	4093      	lsls	r3, r2
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e4:	4935      	ldr	r1, [pc, #212]	@ (80042bc <HAL_GPIO_Init+0x310>)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	3302      	adds	r3, #2
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041f2:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004216:	4a32      	ldr	r2, [pc, #200]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800421c:	4b30      	ldr	r3, [pc, #192]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004246:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800426a:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004270:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004294:	4a12      	ldr	r2, [pc, #72]	@ (80042e0 <HAL_GPIO_Init+0x334>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	f67f ae90 	bls.w	8003fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	3724      	adds	r7, #36	@ 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40013800 	.word	0x40013800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40020400 	.word	0x40020400
 80042c8:	40020800 	.word	0x40020800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021800 	.word	0x40021800
 80042dc:	40021c00 	.word	0x40021c00
 80042e0:	40013c00 	.word	0x40013c00

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f4:	787b      	ldrb	r3, [r7, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004300:	e003      	b.n	800430a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004302:	887b      	ldrh	r3, [r7, #2]
 8004304:	041a      	lsls	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	619a      	str	r2, [r3, #24]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af02      	add	r7, sp, #8
 800431c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e101      	b.n	800452c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f006 fa8e 	bl	800a864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2203      	movs	r2, #3
 800434c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004356:	d102      	bne.n	800435e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f002 fedb 	bl	800711e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7c1a      	ldrb	r2, [r3, #16]
 8004370:	f88d 2000 	strb.w	r2, [sp]
 8004374:	3304      	adds	r3, #4
 8004376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004378:	f002 fdba 	bl	8006ef0 <USB_CoreInit>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0ce      	b.n	800452c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f002 fed3 	bl	8007140 <USB_SetCurrentMode>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0bf      	b.n	800452c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e04a      	b.n	8004448 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3315      	adds	r3, #21
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3314      	adds	r3, #20
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	b298      	uxth	r0, r3
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	332e      	adds	r3, #46	@ 0x2e
 80043ee:	4602      	mov	r2, r0
 80043f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3318      	adds	r3, #24
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	331c      	adds	r3, #28
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3320      	adds	r3, #32
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3324      	adds	r3, #36	@ 0x24
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	3301      	adds	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	791b      	ldrb	r3, [r3, #4]
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3af      	bcc.n	80043b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e044      	b.n	80044e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	3301      	adds	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	791b      	ldrb	r3, [r3, #4]
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3b5      	bcc.n	8004458 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7c1a      	ldrb	r2, [r3, #16]
 80044f4:	f88d 2000 	strb.w	r2, [sp]
 80044f8:	3304      	adds	r3, #4
 80044fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044fc:	f002 fe6c 	bl	80071d8 <USB_DevInit>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00c      	b.n	800452c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 feb6 	bl	8008296 <USB_DevDisconnect>

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_PCD_Start+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e022      	b.n	8004596 <HAL_PCD_Start+0x62>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f002 fdbd 	bl	80070fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 fe64 	bl	8008254 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800459e:	b590      	push	{r4, r7, lr}
 80045a0:	b08d      	sub	sp, #52	@ 0x34
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 ff22 	bl	80083fe <USB_GetMode>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 848c 	bne.w	8004eda <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 fe86 	bl	80082d8 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8482 	beq.w	8004ed8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 fe73 	bl	80082d8 <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d107      	bne.n	800460c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f002 0202 	and.w	r2, r2, #2
 800460a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f003 fe61 	bl	80082d8 <USB_ReadInterrupts>
 8004616:	4603      	mov	r3, r0
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b10      	cmp	r3, #16
 800461e:	d161      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	3304      	adds	r3, #4
 800464e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800465a:	d124      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d035      	beq.n	80046d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	6a38      	ldr	r0, [r7, #32]
 800467c:	f003 fc98 	bl	8007fb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800468c:	441a      	add	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469e:	441a      	add	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	615a      	str	r2, [r3, #20]
 80046a4:	e016      	b.n	80046d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80046ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046b0:	d110      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046b8:	2208      	movs	r2, #8
 80046ba:	4619      	mov	r1, r3
 80046bc:	6a38      	ldr	r0, [r7, #32]
 80046be:	f003 fc77 	bl	8007fb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ce:	441a      	add	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0210 	orr.w	r2, r2, #16
 80046e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 fdf5 	bl	80082d8 <USB_ReadInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046f8:	f040 80a7 	bne.w	800484a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f003 fdfa 	bl	80082fe <USB_ReadDevAllOutEpInterrupt>
 800470a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800470c:	e099      	b.n	8004842 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 808e 	beq.w	8004836 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f003 fe1e 	bl	8008366 <USB_ReadDevOutEPInterrupt>
 800472a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	2301      	movs	r3, #1
 8004746:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fea4 	bl	8005498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004766:	461a      	mov	r2, r3
 8004768:	2308      	movs	r3, #8
 800476a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800476c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ff7a 	bl	8005668 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	2310      	movs	r3, #16
 800478e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d030      	beq.n	80047fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d109      	bne.n	80047ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80047ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	78db      	ldrb	r3, [r3, #3]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2200      	movs	r2, #0
 80047dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f006 f943 	bl	800aa70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f6:	461a      	mov	r2, r3
 80047f8:	2302      	movs	r3, #2
 80047fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	461a      	mov	r2, r3
 8004814:	2320      	movs	r3, #32
 8004816:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004834:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	3301      	adds	r3, #1
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f af62 	bne.w	800470e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f003 fd42 	bl	80082d8 <USB_ReadInterrupts>
 8004854:	4603      	mov	r3, r0
 8004856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800485a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800485e:	f040 80db 	bne.w	8004a18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f003 fd63 	bl	8008332 <USB_ReadDevAllInEpInterrupt>
 800486c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004872:	e0cd      	b.n	8004a10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80c2 	beq.w	8004a04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f003 fd89 	bl	80083a2 <USB_ReadDevInEPInterrupt>
 8004890:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d057      	beq.n	800494c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	2201      	movs	r2, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048bc:	4013      	ands	r3, r2
 80048be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048cc:	461a      	mov	r2, r3
 80048ce:	2301      	movs	r3, #1
 80048d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	799b      	ldrb	r3, [r3, #6]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d132      	bne.n	8004940 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3320      	adds	r3, #32
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	4613      	mov	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4403      	add	r3, r0
 80048fa:	331c      	adds	r3, #28
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4419      	add	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4403      	add	r3, r0
 800490e:	3320      	adds	r3, #32
 8004910:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d113      	bne.n	8004940 <HAL_PCD_IRQHandler+0x3a2>
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	3324      	adds	r3, #36	@ 0x24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004938:	461a      	mov	r2, r3
 800493a:	2101      	movs	r1, #1
 800493c:	f003 fd90 	bl	8008460 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f006 f80d 	bl	800a966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004962:	461a      	mov	r2, r3
 8004964:	2308      	movs	r3, #8
 8004966:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	461a      	mov	r2, r3
 8004980:	2310      	movs	r3, #16
 8004982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499a:	461a      	mov	r2, r3
 800499c:	2340      	movs	r3, #64	@ 0x40
 800499e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d023      	beq.n	80049f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80049aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ac:	6a38      	ldr	r0, [r7, #32]
 80049ae:	f002 fd77 	bl	80074a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	3310      	adds	r3, #16
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	78db      	ldrb	r3, [r3, #3]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d108      	bne.n	80049e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f006 f85a 	bl	800aa94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ec:	461a      	mov	r2, r3
 80049ee:	2302      	movs	r3, #2
 80049f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80049fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fcbd 	bl	800537e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f47f af2e 	bne.w	8004874 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f003 fc5b 	bl	80082d8 <USB_ReadInterrupts>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a2c:	d122      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d108      	bne.n	8004a5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a54:	2100      	movs	r1, #0
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fea4 	bl	80057a4 <HAL_PCDEx_LPM_Callback>
 8004a5c:	e002      	b.n	8004a64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f005 fff8 	bl	800aa54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 fc2d 	bl	80082d8 <USB_ReadInterrupts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d112      	bne.n	8004ab0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f005 ffb4 	bl	800aa08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004aae:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f003 fc0f 	bl	80082d8 <USB_ReadInterrupts>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac4:	f040 80b7 	bne.w	8004c36 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f002 fcdc 	bl	80074a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aec:	e046      	b.n	8004b7c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afa:	461a      	mov	r2, r3
 8004afc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b78:	3301      	adds	r3, #1
 8004b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d3b2      	bcc.n	8004aee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b96:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004b9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7bdb      	ldrb	r3, [r3, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d016      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb4:	f043 030b 	orr.w	r3, r3, #11
 8004bb8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bca:	f043 030b 	orr.w	r3, r3, #11
 8004bce:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bd0:	e015      	b.n	8004bfe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004be4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004be8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf8:	f043 030b 	orr.w	r3, r3, #11
 8004bfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c0c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c20:	461a      	mov	r2, r3
 8004c22:	f003 fc1d 	bl	8008460 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 fb4c 	bl	80082d8 <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4a:	d123      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f003 fbe2 	bl	800841a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 fc99 	bl	8007592 <USB_GetDevSpeed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681c      	ldr	r4, [r3, #0]
 8004c6c:	f001 fa0a 	bl	8006084 <HAL_RCC_GetHCLKFreq>
 8004c70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c76:	461a      	mov	r2, r3
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f002 f99d 	bl	8006fb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f005 fe99 	bl	800a9b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f003 fb1d 	bl	80082d8 <USB_ReadInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d10a      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f005 fe76 	bl	800a99a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f002 0208 	and.w	r2, r2, #8
 8004cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f003 fb08 	bl	80082d8 <USB_ReadInterrupts>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cce:	2b80      	cmp	r3, #128	@ 0x80
 8004cd0:	d123      	bne.n	8004d1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cde:	2301      	movs	r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce2:	e014      	b.n	8004d0e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fb0a 	bl	800531c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	791b      	ldrb	r3, [r3, #4]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d3e4      	bcc.n	8004ce4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f003 fada 	bl	80082d8 <USB_ReadInterrupts>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2e:	d13c      	bne.n	8004daa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d34:	e02b      	b.n	8004d8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	3318      	adds	r3, #24
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d115      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da12      	bge.n	8004d88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3317      	adds	r3, #23
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 faca 	bl	800531c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	791b      	ldrb	r3, [r3, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d3cd      	bcc.n	8004d36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fa92 	bl	80082d8 <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dbe:	d156      	bne.n	8004e6e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc4:	e045      	b.n	8004e52 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dda:	4613      	mov	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d12e      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	da2b      	bge.n	8004e4c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004e00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d121      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e48:	6053      	str	r3, [r2, #4]
            break;
 8004e4a:	e008      	b.n	8004e5e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	3301      	adds	r3, #1
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d3b3      	bcc.n	8004dc6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f003 fa30 	bl	80082d8 <USB_ReadInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e82:	d10a      	bne.n	8004e9a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f005 fe17 	bl	800aab8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fa1a 	bl	80082d8 <USB_ReadInterrupts>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d115      	bne.n	8004eda <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f005 fe07 	bl	800aad4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e000      	b.n	8004eda <HAL_PCD_IRQHandler+0x93c>
      return;
 8004ed8:	bf00      	nop
    }
  }
}
 8004eda:	3734      	adds	r7, #52	@ 0x34
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}

08004ee0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_PCD_SetAddress+0x1a>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e012      	b.n	8004f20 <HAL_PCD_SetAddress+0x40>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f003 f979 	bl	8008208 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	70fb      	strb	r3, [r7, #3]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	803b      	strh	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da0f      	bge.n	8004f6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	3310      	adds	r3, #16
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	3304      	adds	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	705a      	strb	r2, [r3, #1]
 8004f6c:	e00f      	b.n	8004f8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	3304      	adds	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004f9a:	883b      	ldrh	r3, [r7, #0]
 8004f9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	78ba      	ldrb	r2, [r7, #2]
 8004fa8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fbc:	78bb      	ldrb	r3, [r7, #2]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d102      	bne.n	8004fc8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_PCD_EP_Open+0xae>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e00e      	b.n	8004ff4 <HAL_PCD_EP_Open+0xcc>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 faf9 	bl	80075dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	da0f      	bge.n	8005030 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	f003 020f 	and.w	r2, r3, #15
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	3310      	adds	r3, #16
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	3304      	adds	r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	705a      	strb	r2, [r3, #1]
 800502e:	e00f      	b.n	8005050 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	4613      	mov	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_PCD_EP_Close+0x6e>
 8005066:	2302      	movs	r3, #2
 8005068:	e00e      	b.n	8005088 <HAL_PCD_EP_Close+0x8c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	4618      	mov	r0, r3
 800507a:	f002 fb37 	bl	80076ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	460b      	mov	r3, r1
 800509e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a0:	7afb      	ldrb	r3, [r7, #11]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	3304      	adds	r3, #4
 80050b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d2:	7afb      	ldrb	r3, [r7, #11]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	799b      	ldrb	r3, [r3, #6]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d102      	bne.n	80050ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	799b      	ldrb	r3, [r3, #6]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	f002 fbd4 	bl	80078a4 <USB_EPStartXfer>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 020f 	and.w	r2, r3, #15
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005128:	681b      	ldr	r3, [r3, #0]
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	460b      	mov	r3, r1
 8005144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005146:	7afb      	ldrb	r3, [r7, #11]
 8005148:	f003 020f 	and.w	r2, r3, #15
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3310      	adds	r3, #16
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2201      	movs	r2, #1
 8005174:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	b2da      	uxtb	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	799b      	ldrb	r3, [r3, #6]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	799b      	ldrb	r3, [r3, #6]
 8005198:	461a      	mov	r2, r3
 800519a:	6979      	ldr	r1, [r7, #20]
 800519c:	f002 fb82 	bl	80078a4 <USB_EPStartXfer>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	7912      	ldrb	r2, [r2, #4]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e04f      	b.n	8005268 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da0f      	bge.n	80051f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	3310      	adds	r3, #16
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	705a      	strb	r2, [r3, #1]
 80051ee:	e00d      	b.n	800520c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	3304      	adds	r3, #4
 8005204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_PCD_EP_SetStall+0x82>
 8005228:	2302      	movs	r3, #2
 800522a:	e01d      	b.n	8005268 <HAL_PCD_EP_SetStall+0xbe>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68f9      	ldr	r1, [r7, #12]
 800523a:	4618      	mov	r0, r3
 800523c:	f002 ff10 	bl	8008060 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7999      	ldrb	r1, [r3, #6]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005258:	461a      	mov	r2, r3
 800525a:	f003 f901 	bl	8008460 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	7912      	ldrb	r2, [r2, #4]
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e042      	b.n	8005314 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800528e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da0f      	bge.n	80052b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3310      	adds	r3, #16
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	3304      	adds	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	705a      	strb	r2, [r3, #1]
 80052b4:	e00f      	b.n	80052d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	3304      	adds	r3, #4
 80052ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_PCD_EP_ClrStall+0x86>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e00e      	b.n	8005314 <HAL_PCD_EP_ClrStall+0xa4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	4618      	mov	r0, r3
 8005306:	f002 ff19 	bl	800813c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0c      	bge.n	800534a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3310      	adds	r3, #16
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e00c      	b.n	8005364 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	4618      	mov	r0, r3
 800536c:	f002 fd38 	bl	8007de0 <USB_EPStopXfer>
 8005370:	4603      	mov	r3, r0
 8005372:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005374:	7afb      	ldrb	r3, [r7, #11]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	@ 0x28
 8005382:	af02      	add	r7, sp, #8
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	3310      	adds	r3, #16
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	3304      	adds	r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d901      	bls.n	80053b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e06b      	b.n	800548e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d902      	bls.n	80053d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3303      	adds	r3, #3
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053da:	e02a      	b.n	8005432 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d902      	bls.n	80053f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3303      	adds	r3, #3
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68d9      	ldr	r1, [r3, #12]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	4603      	mov	r3, r0
 8005414:	6978      	ldr	r0, [r7, #20]
 8005416:	f002 fd8d 	bl	8007f34 <USB_WritePacket>

    ep->xfer_buff  += len;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	441a      	add	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	429a      	cmp	r2, r3
 8005446:	d809      	bhi.n	800545c <PCD_WriteEmptyTxFifo+0xde>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005450:	429a      	cmp	r2, r3
 8005452:	d203      	bcs.n	800545c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1bf      	bne.n	80053dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d811      	bhi.n	800548c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	2201      	movs	r2, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	43db      	mvns	r3, r3
 8005482:	6939      	ldr	r1, [r7, #16]
 8005484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005488:	4013      	ands	r3, r2
 800548a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	333c      	adds	r3, #60	@ 0x3c
 80054b0:	3304      	adds	r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	799b      	ldrb	r3, [r3, #6]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d17b      	bne.n	80055c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4a61      	ldr	r2, [pc, #388]	@ (8005660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f240 80b9 	bls.w	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80b3 	beq.w	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005500:	6093      	str	r3, [r2, #8]
 8005502:	e0a7      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	461a      	mov	r2, r3
 800551c:	2320      	movs	r3, #32
 800551e:	6093      	str	r3, [r2, #8]
 8005520:	e098      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 8093 	bne.w	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4a4b      	ldr	r2, [pc, #300]	@ (8005660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d90f      	bls.n	8005556 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005552:	6093      	str	r3, [r2, #8]
 8005554:	e07e      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	0159      	lsls	r1, r3, #5
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	440b      	add	r3, r1
 8005578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d114      	bne.n	80055b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055a0:	461a      	mov	r2, r3
 80055a2:	2101      	movs	r1, #1
 80055a4:	f002 ff5c 	bl	8008460 <USB_EP0_OutStart>
 80055a8:	e006      	b.n	80055b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	441a      	add	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f005 f9b6 	bl	800a930 <HAL_PCD_DataOutStageCallback>
 80055c4:	e046      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4a26      	ldr	r2, [pc, #152]	@ (8005664 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d124      	bne.n	8005618 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e4:	461a      	mov	r2, r3
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	6093      	str	r3, [r2, #8]
 80055ec:	e032      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005604:	461a      	mov	r2, r3
 8005606:	2320      	movs	r3, #32
 8005608:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f005 f98d 	bl	800a930 <HAL_PCD_DataOutStageCallback>
 8005616:	e01d      	b.n	8005654 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d114      	bne.n	8005648 <PCD_EP_OutXfrComplete_int+0x1b0>
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d108      	bne.n	8005648 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005640:	461a      	mov	r2, r3
 8005642:	2100      	movs	r1, #0
 8005644:	f002 ff0c 	bl	8008460 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f005 f96e 	bl	800a930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	4f54300a 	.word	0x4f54300a
 8005664:	4f54310a 	.word	0x4f54310a

08005668 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	333c      	adds	r3, #60	@ 0x3c
 8005680:	3304      	adds	r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a15      	ldr	r2, [pc, #84]	@ (80056f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d90e      	bls.n	80056bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	461a      	mov	r2, r3
 80056b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f005 f925 	bl	800a90c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d90c      	bls.n	80056e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	799b      	ldrb	r3, [r3, #6]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d108      	bne.n	80056e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056dc:	461a      	mov	r2, r3
 80056de:	2101      	movs	r1, #1
 80056e0:	f002 febe 	bl	8008460 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	4f54300a 	.word	0x4f54300a

080056f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
 8005700:	4613      	mov	r3, r2
 8005702:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005712:	883b      	ldrh	r3, [r7, #0]
 8005714:	0419      	lsls	r1, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	430a      	orrs	r2, r1
 800571e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005720:	e028      	b.n	8005774 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	e00d      	b.n	8005752 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	3340      	adds	r3, #64	@ 0x40
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4413      	add	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	3301      	adds	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	3b01      	subs	r3, #1
 8005758:	429a      	cmp	r2, r3
 800575a:	d3ec      	bcc.n	8005736 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800575c:	883b      	ldrh	r3, [r7, #0]
 800575e:	0418      	lsls	r0, r3, #16
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	3b01      	subs	r3, #1
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	4302      	orrs	r2, r0
 800576c:	3340      	adds	r3, #64	@ 0x40
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e267      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d075      	beq.n	80058c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057da:	4b88      	ldr	r3, [pc, #544]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d00c      	beq.n	8005800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b85      	ldr	r3, [pc, #532]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d112      	bne.n	8005818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f2:	4b82      	ldr	r3, [pc, #520]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057fe:	d10b      	bne.n	8005818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	4b7e      	ldr	r3, [pc, #504]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05b      	beq.n	80058c4 <HAL_RCC_OscConfig+0x108>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d157      	bne.n	80058c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e242      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x74>
 8005822:	4b76      	ldr	r3, [pc, #472]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a75      	ldr	r2, [pc, #468]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e01d      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x98>
 800583a:	4b70      	ldr	r3, [pc, #448]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6f      	ldr	r2, [pc, #444]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b6d      	ldr	r3, [pc, #436]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6c      	ldr	r2, [pc, #432]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0xb0>
 8005854:	4b69      	ldr	r3, [pc, #420]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a68      	ldr	r2, [pc, #416]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800585a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b66      	ldr	r3, [pc, #408]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a65      	ldr	r2, [pc, #404]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800586a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fd fbe0 	bl	8003038 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587c:	f7fd fbdc 	bl	8003038 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	@ 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e207      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588e:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0xc0>
 800589a:	e014      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fd fbcc 	bl	8003038 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fd fbc8 	bl	8003038 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	@ 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1f3      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b6:	4b51      	ldr	r3, [pc, #324]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0xe8>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d063      	beq.n	800599a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058d2:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058de:	4b47      	ldr	r3, [pc, #284]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d11c      	bne.n	8005924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ea:	4b44      	ldr	r3, [pc, #272]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d116      	bne.n	8005924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f6:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_RCC_OscConfig+0x152>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e1c7      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4937      	ldr	r1, [pc, #220]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005922:	e03a      	b.n	800599a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d020      	beq.n	800596e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <HAL_RCC_OscConfig+0x244>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fd fb81 	bl	8003038 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593a:	f7fd fb7d 	bl	8003038 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e1a8      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594c:	4b2b      	ldr	r3, [pc, #172]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005958:	4b28      	ldr	r3, [pc, #160]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4925      	ldr	r1, [pc, #148]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	e015      	b.n	800599a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800596e:	4b24      	ldr	r3, [pc, #144]	@ (8005a00 <HAL_RCC_OscConfig+0x244>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd fb60 	bl	8003038 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800597c:	f7fd fb5c 	bl	8003038 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e187      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598e:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d036      	beq.n	8005a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ae:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <HAL_RCC_OscConfig+0x248>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fd fb40 	bl	8003038 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fd fb3c 	bl	8003038 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e167      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ce:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <HAL_RCC_OscConfig+0x240>)
 80059d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x200>
 80059da:	e01b      	b.n	8005a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <HAL_RCC_OscConfig+0x248>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fd fb29 	bl	8003038 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e8:	e00e      	b.n	8005a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ea:	f7fd fb25 	bl	8003038 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d907      	bls.n	8005a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e150      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
 80059fc:	40023800 	.word	0x40023800
 8005a00:	42470000 	.word	0x42470000
 8005a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a08:	4b88      	ldr	r3, [pc, #544]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1ea      	bne.n	80059ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8097 	beq.w	8005b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a26:	4b81      	ldr	r3, [pc, #516]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10f      	bne.n	8005a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	4b7d      	ldr	r3, [pc, #500]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a42:	4b7a      	ldr	r3, [pc, #488]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b77      	ldr	r3, [pc, #476]	@ (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d118      	bne.n	8005a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5e:	4b74      	ldr	r3, [pc, #464]	@ (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a73      	ldr	r2, [pc, #460]	@ (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6a:	f7fd fae5 	bl	8003038 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fd fae1 	bl	8003038 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e10c      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a84:	4b6a      	ldr	r3, [pc, #424]	@ (8005c30 <HAL_RCC_OscConfig+0x474>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x2ea>
 8005a98:	4b64      	ldr	r3, [pc, #400]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	4a63      	ldr	r2, [pc, #396]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x324>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x30c>
 8005aae:	4b5f      	ldr	r3, [pc, #380]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ab4:	f043 0304 	orr.w	r3, r3, #4
 8005ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aba:	4b5c      	ldr	r3, [pc, #368]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abe:	4a5b      	ldr	r2, [pc, #364]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac6:	e00b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x324>
 8005ac8:	4b58      	ldr	r3, [pc, #352]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005acc:	4a57      	ldr	r2, [pc, #348]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad4:	4b55      	ldr	r3, [pc, #340]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad8:	4a54      	ldr	r2, [pc, #336]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005ada:	f023 0304 	bic.w	r3, r3, #4
 8005ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae8:	f7fd faa6 	bl	8003038 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af0:	f7fd faa2 	bl	8003038 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0cb      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b06:	4b49      	ldr	r3, [pc, #292]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0ee      	beq.n	8005af0 <HAL_RCC_OscConfig+0x334>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b14:	f7fd fa90 	bl	8003038 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fa8c 	bl	8003038 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e0b5      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b32:	4b3e      	ldr	r3, [pc, #248]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1ee      	bne.n	8005b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d105      	bne.n	8005b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b44:	4b39      	ldr	r3, [pc, #228]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b48:	4a38      	ldr	r2, [pc, #224]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a1 	beq.w	8005c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b5a:	4b34      	ldr	r3, [pc, #208]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d05c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d141      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b31      	ldr	r3, [pc, #196]	@ (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fd fa60 	bl	8003038 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fd fa5c 	bl	8003038 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e087      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	019b      	lsls	r3, r3, #6
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	491b      	ldr	r1, [pc, #108]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bca:	f7fd fa35 	bl	8003038 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fd fa31 	bl	8003038 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e05c      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be4:	4b11      	ldr	r3, [pc, #68]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x416>
 8005bf0:	e054      	b.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b10      	ldr	r3, [pc, #64]	@ (8005c34 <HAL_RCC_OscConfig+0x478>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fd fa1e 	bl	8003038 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fd fa1a 	bl	8003038 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e045      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCC_OscConfig+0x470>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x444>
 8005c1e:	e03d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e038      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40007000 	.word	0x40007000
 8005c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <HAL_RCC_OscConfig+0x4ec>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d028      	beq.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d121      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11a      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800

08005cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0cc      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b68      	ldr	r3, [pc, #416]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90c      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b65      	ldr	r3, [pc, #404]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b63      	ldr	r3, [pc, #396]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0b8      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d020      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d00:	4b59      	ldr	r3, [pc, #356]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a58      	ldr	r2, [pc, #352]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d18:	4b53      	ldr	r3, [pc, #332]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a52      	ldr	r2, [pc, #328]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d24:	4b50      	ldr	r3, [pc, #320]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	494d      	ldr	r1, [pc, #308]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d044      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b47      	ldr	r3, [pc, #284]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d119      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d003      	beq.n	8005d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d107      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e06f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e067      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d8a:	4b37      	ldr	r3, [pc, #220]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 0203 	bic.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4934      	ldr	r1, [pc, #208]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d9c:	f7fd f94c 	bl	8003038 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da2:	e00a      	b.n	8005dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da4:	f7fd f948 	bl	8003038 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e04f      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dba:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 020c 	and.w	r2, r3, #12
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d1eb      	bne.n	8005da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b25      	ldr	r3, [pc, #148]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d20c      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b22      	ldr	r3, [pc, #136]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b20      	ldr	r3, [pc, #128]	@ (8005e64 <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e032      	b.n	8005e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e00:	4b19      	ldr	r3, [pc, #100]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4916      	ldr	r1, [pc, #88]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e1e:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	490e      	ldr	r1, [pc, #56]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e32:	f000 f821 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	490a      	ldr	r1, [pc, #40]	@ (8005e6c <HAL_RCC_ClockConfig+0x1c0>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	4a09      	ldr	r2, [pc, #36]	@ (8005e70 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e4e:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <HAL_RCC_ClockConfig+0x1c8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fd f8ac 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023c00 	.word	0x40023c00
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	0800e52c 	.word	0x0800e52c
 8005e70:	20000018 	.word	0x20000018
 8005e74:	2000002c 	.word	0x2000002c

08005e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b094      	sub	sp, #80	@ 0x50
 8005e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e90:	4b79      	ldr	r3, [pc, #484]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 030c 	and.w	r3, r3, #12
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	f200 80e1 	bhi.w	8006064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x34>
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eaa:	e0db      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eac:	4b73      	ldr	r3, [pc, #460]	@ (800607c <HAL_RCC_GetSysClockFreq+0x204>)
 8005eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eb0:	e0db      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eb2:	4b73      	ldr	r3, [pc, #460]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x208>)
 8005eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eb6:	e0d8      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d063      	beq.n	8005f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ece:	4b6a      	ldr	r3, [pc, #424]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005eea:	4622      	mov	r2, r4
 8005eec:	462b      	mov	r3, r5
 8005eee:	f04f 0000 	mov.w	r0, #0
 8005ef2:	f04f 0100 	mov.w	r1, #0
 8005ef6:	0159      	lsls	r1, r3, #5
 8005ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005efc:	0150      	lsls	r0, r2, #5
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4621      	mov	r1, r4
 8005f04:	1a51      	subs	r1, r2, r1
 8005f06:	6139      	str	r1, [r7, #16]
 8005f08:	4629      	mov	r1, r5
 8005f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f1c:	4659      	mov	r1, fp
 8005f1e:	018b      	lsls	r3, r1, #6
 8005f20:	4651      	mov	r1, sl
 8005f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f26:	4651      	mov	r1, sl
 8005f28:	018a      	lsls	r2, r1, #6
 8005f2a:	4651      	mov	r1, sl
 8005f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f30:	4659      	mov	r1, fp
 8005f32:	eb63 0901 	sbc.w	r9, r3, r1
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	eb18 0303 	adds.w	r3, r8, r3
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	462b      	mov	r3, r5
 8005f58:	eb49 0303 	adc.w	r3, r9, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	024b      	lsls	r3, r1, #9
 8005f6e:	4621      	mov	r1, r4
 8005f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f74:	4621      	mov	r1, r4
 8005f76:	024a      	lsls	r2, r1, #9
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f7e:	2200      	movs	r2, #0
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f88:	f7fa fe5e 	bl	8000c48 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4613      	mov	r3, r2
 8005f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f94:	e058      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f96:	4b38      	ldr	r3, [pc, #224]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	099b      	lsrs	r3, r3, #6
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fc2:	0150      	lsls	r0, r2, #5
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4641      	mov	r1, r8
 8005fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fce:	4649      	mov	r1, r9
 8005fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8005fec:	eb63 050b 	sbc.w	r5, r3, fp
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	00eb      	lsls	r3, r5, #3
 8005ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ffe:	00e2      	lsls	r2, r4, #3
 8006000:	4614      	mov	r4, r2
 8006002:	461d      	mov	r5, r3
 8006004:	4643      	mov	r3, r8
 8006006:	18e3      	adds	r3, r4, r3
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	464b      	mov	r3, r9
 800600c:	eb45 0303 	adc.w	r3, r5, r3
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800601e:	4629      	mov	r1, r5
 8006020:	028b      	lsls	r3, r1, #10
 8006022:	4621      	mov	r1, r4
 8006024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006028:	4621      	mov	r1, r4
 800602a:	028a      	lsls	r2, r1, #10
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006032:	2200      	movs	r2, #0
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	61fa      	str	r2, [r7, #28]
 8006038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800603c:	f7fa fe04 	bl	8000c48 <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4613      	mov	r3, r2
 8006046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x200>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	3301      	adds	r3, #1
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800605a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006062:	e002      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_RCC_GetSysClockFreq+0x204>)
 8006066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800606a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800606c:	4618      	mov	r0, r3
 800606e:	3750      	adds	r7, #80	@ 0x50
 8006070:	46bd      	mov	sp, r7
 8006072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800
 800607c:	00f42400 	.word	0x00f42400
 8006080:	007a1200 	.word	0x007a1200

08006084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006088:	4b03      	ldr	r3, [pc, #12]	@ (8006098 <HAL_RCC_GetHCLKFreq+0x14>)
 800608a:	681b      	ldr	r3, [r3, #0]
}
 800608c:	4618      	mov	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000018 	.word	0x20000018

0800609c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e07b      	b.n	80061a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060be:	d009      	beq.n	80060d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]
 80060c6:	e005      	b.n	80060d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fc fd20 	bl	8002b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800610a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006158:	ea42 0103 	orr.w	r1, r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006160:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	f003 0104 	and.w	r1, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	f003 0210 	and.w	r2, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061be:	f7fc ff3b 	bl	8003038 <HAL_GetTick>
 80061c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d001      	beq.n	80061d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
 80061d6:	e12a      	b.n	800642e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Transmit+0x36>
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e122      	b.n	800642e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_SPI_Transmit+0x48>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e11b      	b.n	800642e <HAL_SPI_Transmit+0x280>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2203      	movs	r2, #3
 8006202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006244:	d10f      	bne.n	8006266 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	d007      	beq.n	8006284 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800628c:	d152      	bne.n	8006334 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_SPI_Transmit+0xee>
 8006296:	8b7b      	ldrh	r3, [r7, #26]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d145      	bne.n	8006328 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062c0:	e032      	b.n	8006328 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d112      	bne.n	80062f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062f4:	e018      	b.n	8006328 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062f6:	f7fc fe9f 	bl	8003038 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d803      	bhi.n	800630e <HAL_SPI_Transmit+0x160>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d102      	bne.n	8006314 <HAL_SPI_Transmit+0x166>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e082      	b.n	800642e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1c7      	bne.n	80062c2 <HAL_SPI_Transmit+0x114>
 8006332:	e053      	b.n	80063dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_Transmit+0x194>
 800633c:	8b7b      	ldrh	r3, [r7, #26]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d147      	bne.n	80063d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006368:	e033      	b.n	80063d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d113      	bne.n	80063a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800639e:	e018      	b.n	80063d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a0:	f7fc fe4a 	bl	8003038 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d803      	bhi.n	80063b8 <HAL_SPI_Transmit+0x20a>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d102      	bne.n	80063be <HAL_SPI_Transmit+0x210>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e02d      	b.n	800642e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1c6      	bne.n	800636a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fa59 	bl	8006898 <SPI_EndRxTxTransaction>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800642c:	2300      	movs	r3, #0
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	@ 0x28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006448:	f7fc fdf6 	bl	8003038 <HAL_GetTick>
 800644c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006454:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006460:	7ffb      	ldrb	r3, [r7, #31]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d00c      	beq.n	8006480 <HAL_SPI_TransmitReceive+0x4a>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800646c:	d106      	bne.n	800647c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <HAL_SPI_TransmitReceive+0x46>
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d001      	beq.n	8006480 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
 800647e:	e17f      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x5c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x5c>
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e174      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x6e>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e16d      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d003      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2205      	movs	r2, #5
 80064bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	887a      	ldrh	r2, [r7, #2]
 80064d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	887a      	ldrh	r2, [r7, #2]
 80064e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006500:	2b40      	cmp	r3, #64	@ 0x40
 8006502:	d007      	beq.n	8006514 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800651c:	d17e      	bne.n	800661c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_SPI_TransmitReceive+0xf6>
 8006526:	8afb      	ldrh	r3, [r7, #22]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d16c      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	881a      	ldrh	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653c:	1c9a      	adds	r2, r3, #2
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006550:	e059      	b.n	8006606 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d11b      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x162>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_SPI_TransmitReceive+0x162>
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	2b01      	cmp	r3, #1
 800656e:	d113      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006580:	1c9a      	adds	r2, r3, #2
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d119      	bne.n	80065da <HAL_SPI_TransmitReceive+0x1a4>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d014      	beq.n	80065da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	b292      	uxth	r2, r2
 80065bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065d6:	2301      	movs	r3, #1
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065da:	f7fc fd2d 	bl	8003038 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d80d      	bhi.n	8006606 <HAL_SPI_TransmitReceive+0x1d0>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d009      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0bc      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1a0      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x11c>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d19b      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x11c>
 800661a:	e082      	b.n	8006722 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_SPI_TransmitReceive+0x1f4>
 8006624:	8afb      	ldrh	r3, [r7, #22]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d171      	bne.n	800670e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	7812      	ldrb	r2, [r2, #0]
 8006636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006646:	b29b      	uxth	r3, r3
 8006648:	3b01      	subs	r3, #1
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006650:	e05d      	b.n	800670e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d11c      	bne.n	800669a <HAL_SPI_TransmitReceive+0x264>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d017      	beq.n	800669a <HAL_SPI_TransmitReceive+0x264>
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b01      	cmp	r3, #1
 800666e:	d114      	bne.n	800669a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d119      	bne.n	80066dc <HAL_SPI_TransmitReceive+0x2a6>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d014      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066d8:	2301      	movs	r3, #1
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066dc:	f7fc fcac 	bl	8003038 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d803      	bhi.n	80066f4 <HAL_SPI_TransmitReceive+0x2be>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d102      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x2c4>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e038      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d19c      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d197      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f8b6 	bl	8006898 <SPI_EndRxTxTransaction>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e01d      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800677e:	2300      	movs	r3, #0
  }
}
 8006780:	4618      	mov	r0, r3
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006798:	f7fc fc4e 	bl	8003038 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a8:	f7fc fc46 	bl	8003038 <HAL_GetTick>
 80067ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ae:	4b39      	ldr	r3, [pc, #228]	@ (8006894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	0d1b      	lsrs	r3, r3, #20
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067be:	e054      	b.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d050      	beq.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c8:	f7fc fc36 	bl	8003038 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d902      	bls.n	80067de <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d13d      	bne.n	800685a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067f6:	d111      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006800:	d004      	beq.n	800680c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680a:	d107      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800681a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006824:	d10f      	bne.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e017      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3b01      	subs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	bf0c      	ite	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	2300      	movne	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	429a      	cmp	r2, r3
 8006886:	d19b      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000018 	.word	0x20000018

08006898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2201      	movs	r2, #1
 80068ac:	2102      	movs	r1, #2
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ff6a 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e032      	b.n	8006930 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006938 <SPI_EndRxTxTransaction+0xa0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1b      	ldr	r2, [pc, #108]	@ (800693c <SPI_EndRxTxTransaction+0xa4>)
 80068d0:	fba2 2303 	umull	r2, r3, r2, r3
 80068d4:	0d5b      	lsrs	r3, r3, #21
 80068d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068e8:	d112      	bne.n	8006910 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	@ 0x80
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ff47 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d016      	beq.n	800692e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e00f      	b.n	8006930 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	3b01      	subs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b80      	cmp	r3, #128	@ 0x80
 8006928:	d0f2      	beq.n	8006910 <SPI_EndRxTxTransaction+0x78>
 800692a:	e000      	b.n	800692e <SPI_EndRxTxTransaction+0x96>
        break;
 800692c:	bf00      	nop
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000018 	.word	0x20000018
 800693c:	165e9f81 	.word	0x165e9f81

08006940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc f92c 	bl	8002bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 f8f4 	bl	8006b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_ConfigClockSource+0x1c>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e0b4      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x186>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a20:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a32:	d03e      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0xd4>
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a38:	f200 8087 	bhi.w	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a40:	f000 8086 	beq.w	8006b50 <HAL_TIM_ConfigClockSource+0x172>
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a48:	d87f      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a4a:	2b70      	cmp	r3, #112	@ 0x70
 8006a4c:	d01a      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0xa6>
 8006a4e:	2b70      	cmp	r3, #112	@ 0x70
 8006a50:	d87b      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a52:	2b60      	cmp	r3, #96	@ 0x60
 8006a54:	d050      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x11a>
 8006a56:	2b60      	cmp	r3, #96	@ 0x60
 8006a58:	d877      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a5a:	2b50      	cmp	r3, #80	@ 0x50
 8006a5c:	d03c      	beq.n	8006ad8 <HAL_TIM_ConfigClockSource+0xfa>
 8006a5e:	2b50      	cmp	r3, #80	@ 0x50
 8006a60:	d873      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d058      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0x13a>
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d86f      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a6a:	2b30      	cmp	r3, #48	@ 0x30
 8006a6c:	d064      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x15a>
 8006a6e:	2b30      	cmp	r3, #48	@ 0x30
 8006a70:	d86b      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d060      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x15a>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d867      	bhi.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d05c      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x15a>
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d05a      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x15a>
 8006a82:	e062      	b.n	8006b4a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	f000 f990 	bl	8006db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006aa6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]
      break;
 8006ab0:	e04f      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ac2:	f000 f979 	bl	8006db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ad4:	609a      	str	r2, [r3, #8]
      break;
 8006ad6:	e03c      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f000 f8ed 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2150      	movs	r1, #80	@ 0x50
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f946 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 8006af6:	e02c      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b04:	461a      	mov	r2, r3
 8006b06:	f000 f90c 	bl	8006d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2160      	movs	r1, #96	@ 0x60
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f936 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 8006b16:	e01c      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b24:	461a      	mov	r2, r3
 8006b26:	f000 f8cd 	bl	8006cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2140      	movs	r1, #64	@ 0x40
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f926 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 8006b36:	e00c      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f000 f91d 	bl	8006d82 <TIM_ITRx_SetConfig>
      break;
 8006b48:	e003      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4e:	e000      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a46      	ldr	r2, [pc, #280]	@ (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8a:	d00f      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a43      	ldr	r2, [pc, #268]	@ (8006c9c <TIM_Base_SetConfig+0x130>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a42      	ldr	r2, [pc, #264]	@ (8006ca0 <TIM_Base_SetConfig+0x134>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a41      	ldr	r2, [pc, #260]	@ (8006ca4 <TIM_Base_SetConfig+0x138>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a40      	ldr	r2, [pc, #256]	@ (8006ca8 <TIM_Base_SetConfig+0x13c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a35      	ldr	r2, [pc, #212]	@ (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bcc:	d027      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a32      	ldr	r2, [pc, #200]	@ (8006c9c <TIM_Base_SetConfig+0x130>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d023      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a31      	ldr	r2, [pc, #196]	@ (8006ca0 <TIM_Base_SetConfig+0x134>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01f      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a30      	ldr	r2, [pc, #192]	@ (8006ca4 <TIM_Base_SetConfig+0x138>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ca8 <TIM_Base_SetConfig+0x13c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d017      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006cac <TIM_Base_SetConfig+0x140>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb0 <TIM_Base_SetConfig+0x144>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00f      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb4 <TIM_Base_SetConfig+0x148>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb8 <TIM_Base_SetConfig+0x14c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d007      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2a      	ldr	r2, [pc, #168]	@ (8006cbc <TIM_Base_SetConfig+0x150>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a29      	ldr	r2, [pc, #164]	@ (8006cc0 <TIM_Base_SetConfig+0x154>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ca8 <TIM_Base_SetConfig+0x13c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d103      	bne.n	8006c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d105      	bne.n	8006c8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	611a      	str	r2, [r3, #16]
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400
 8006cb4:	40014800 	.word	0x40014800
 8006cb8:	40001800 	.word	0x40001800
 8006cbc:	40001c00 	.word	0x40001c00
 8006cc0:	40002000 	.word	0x40002000

08006cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 030a 	bic.w	r3, r3, #10
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f023 0210 	bic.w	r2, r3, #16
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f043 0307 	orr.w	r3, r3, #7
 8006da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	609a      	str	r2, [r3, #8]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	021a      	lsls	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e05a      	b.n	8006ec6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	@ (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5c:	d01d      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1d      	ldr	r2, [pc, #116]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d10c      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40010000 	.word	0x40010000
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40010400 	.word	0x40010400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40001800 	.word	0x40001800

08006ef0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	f107 001c 	add.w	r0, r7, #28
 8006efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d123      	bne.n	8006f52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d105      	bne.n	8006f46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fae8 	bl	800851c <USB_CoreReset>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e01b      	b.n	8006f8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fadc 	bl	800851c <USB_CoreReset>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f7c:	e005      	b.n	8006f8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f8a:	7fbb      	ldrb	r3, [r7, #30]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10b      	bne.n	8006fa8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f043 0206 	orr.w	r2, r3, #6
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f043 0220 	orr.w	r2, r3, #32
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fb4:	b004      	add	sp, #16
 8006fb6:	4770      	bx	lr

08006fb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d165      	bne.n	8007098 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a41      	ldr	r2, [pc, #260]	@ (80070d4 <USB_SetTurnaroundTime+0x11c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d906      	bls.n	8006fe2 <USB_SetTurnaroundTime+0x2a>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4a40      	ldr	r2, [pc, #256]	@ (80070d8 <USB_SetTurnaroundTime+0x120>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d202      	bcs.n	8006fe2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006fdc:	230f      	movs	r3, #15
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e062      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80070d8 <USB_SetTurnaroundTime+0x120>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d306      	bcc.n	8006ff8 <USB_SetTurnaroundTime+0x40>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	4a3b      	ldr	r2, [pc, #236]	@ (80070dc <USB_SetTurnaroundTime+0x124>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d202      	bcs.n	8006ff8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ff2:	230e      	movs	r3, #14
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e057      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a38      	ldr	r2, [pc, #224]	@ (80070dc <USB_SetTurnaroundTime+0x124>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d306      	bcc.n	800700e <USB_SetTurnaroundTime+0x56>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4a37      	ldr	r2, [pc, #220]	@ (80070e0 <USB_SetTurnaroundTime+0x128>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d202      	bcs.n	800700e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007008:	230d      	movs	r3, #13
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e04c      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a33      	ldr	r2, [pc, #204]	@ (80070e0 <USB_SetTurnaroundTime+0x128>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d306      	bcc.n	8007024 <USB_SetTurnaroundTime+0x6c>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4a32      	ldr	r2, [pc, #200]	@ (80070e4 <USB_SetTurnaroundTime+0x12c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d802      	bhi.n	8007024 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800701e:	230c      	movs	r3, #12
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e041      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4a2f      	ldr	r2, [pc, #188]	@ (80070e4 <USB_SetTurnaroundTime+0x12c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d906      	bls.n	800703a <USB_SetTurnaroundTime+0x82>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4a2e      	ldr	r2, [pc, #184]	@ (80070e8 <USB_SetTurnaroundTime+0x130>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d802      	bhi.n	800703a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007034:	230b      	movs	r3, #11
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e036      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a2a      	ldr	r2, [pc, #168]	@ (80070e8 <USB_SetTurnaroundTime+0x130>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d906      	bls.n	8007050 <USB_SetTurnaroundTime+0x98>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4a29      	ldr	r2, [pc, #164]	@ (80070ec <USB_SetTurnaroundTime+0x134>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d802      	bhi.n	8007050 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800704a:	230a      	movs	r3, #10
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e02b      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4a26      	ldr	r2, [pc, #152]	@ (80070ec <USB_SetTurnaroundTime+0x134>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d906      	bls.n	8007066 <USB_SetTurnaroundTime+0xae>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4a25      	ldr	r2, [pc, #148]	@ (80070f0 <USB_SetTurnaroundTime+0x138>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d202      	bcs.n	8007066 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007060:	2309      	movs	r3, #9
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	e020      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4a21      	ldr	r2, [pc, #132]	@ (80070f0 <USB_SetTurnaroundTime+0x138>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d306      	bcc.n	800707c <USB_SetTurnaroundTime+0xc4>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a20      	ldr	r2, [pc, #128]	@ (80070f4 <USB_SetTurnaroundTime+0x13c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d802      	bhi.n	800707c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007076:	2308      	movs	r3, #8
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	e015      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4a1d      	ldr	r2, [pc, #116]	@ (80070f4 <USB_SetTurnaroundTime+0x13c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d906      	bls.n	8007092 <USB_SetTurnaroundTime+0xda>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <USB_SetTurnaroundTime+0x140>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d202      	bcs.n	8007092 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800708c:	2307      	movs	r3, #7
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	e00a      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007092:	2306      	movs	r3, #6
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e007      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d102      	bne.n	80070a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800709e:	2309      	movs	r3, #9
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e001      	b.n	80070a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070a4:	2309      	movs	r3, #9
 80070a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	00d8acbf 	.word	0x00d8acbf
 80070d8:	00e4e1c0 	.word	0x00e4e1c0
 80070dc:	00f42400 	.word	0x00f42400
 80070e0:	01067380 	.word	0x01067380
 80070e4:	011a499f 	.word	0x011a499f
 80070e8:	01312cff 	.word	0x01312cff
 80070ec:	014ca43f 	.word	0x014ca43f
 80070f0:	016e3600 	.word	0x016e3600
 80070f4:	01a6ab1f 	.word	0x01a6ab1f
 80070f8:	01e84800 	.word	0x01e84800

080070fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f043 0201 	orr.w	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f023 0201 	bic.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d115      	bne.n	800718e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800716e:	200a      	movs	r0, #10
 8007170:	f7fb ff6e 	bl	8003050 <HAL_Delay>
      ms += 10U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	330a      	adds	r3, #10
 8007178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f93f 	bl	80083fe <USB_GetMode>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d01e      	beq.n	80071c4 <USB_SetCurrentMode+0x84>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2bc7      	cmp	r3, #199	@ 0xc7
 800718a:	d9f0      	bls.n	800716e <USB_SetCurrentMode+0x2e>
 800718c:	e01a      	b.n	80071c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d115      	bne.n	80071c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071a0:	200a      	movs	r0, #10
 80071a2:	f7fb ff55 	bl	8003050 <HAL_Delay>
      ms += 10U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	330a      	adds	r3, #10
 80071aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f926 	bl	80083fe <USB_GetMode>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <USB_SetCurrentMode+0x84>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80071bc:	d9f0      	bls.n	80071a0 <USB_SetCurrentMode+0x60>
 80071be:	e001      	b.n	80071c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e005      	b.n	80071d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80071c8:	d101      	bne.n	80071ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e009      	b.n	800720c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	3340      	adds	r3, #64	@ 0x40
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b0e      	cmp	r3, #14
 8007210:	d9f2      	bls.n	80071f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007212:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11c      	bne.n	8007254 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007228:	f043 0302 	orr.w	r3, r3, #2
 800722c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38
 8007252:	e00b      	b.n	800726c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007272:	461a      	mov	r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007278:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10d      	bne.n	800729c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007288:	2100      	movs	r1, #0
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f968 	bl	8007560 <USB_SetDevSpeed>
 8007290:	e008      	b.n	80072a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007292:	2101      	movs	r1, #1
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f963 	bl	8007560 <USB_SetDevSpeed>
 800729a:	e003      	b.n	80072a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800729c:	2103      	movs	r1, #3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f95e 	bl	8007560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072a4:	2110      	movs	r1, #16
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f8fa 	bl	80074a0 <USB_FlushTxFifo>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f924 	bl	8007504 <USB_FlushRxFifo>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072cc:	461a      	mov	r2, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	461a      	mov	r2, r3
 80072da:	2300      	movs	r3, #0
 80072dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e4:	461a      	mov	r2, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ea:	2300      	movs	r3, #0
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	e043      	b.n	8007378 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007306:	d118      	bne.n	800733a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	461a      	mov	r2, r3
 800731c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e013      	b.n	800734c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007330:	461a      	mov	r2, r3
 8007332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e008      	b.n	800734c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	461a      	mov	r2, r3
 8007348:	2300      	movs	r3, #0
 800734a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007358:	461a      	mov	r2, r3
 800735a:	2300      	movs	r3, #0
 800735c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736a:	461a      	mov	r2, r3
 800736c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800737c:	461a      	mov	r2, r3
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4293      	cmp	r3, r2
 8007382:	d3b5      	bcc.n	80072f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	e043      	b.n	8007412 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800739c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073a0:	d118      	bne.n	80073d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b4:	461a      	mov	r2, r3
 80073b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	e013      	b.n	80073e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	461a      	mov	r2, r3
 80073cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e008      	b.n	80073e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e0:	461a      	mov	r2, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	461a      	mov	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	461a      	mov	r2, r3
 8007406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800740a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3301      	adds	r3, #1
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007416:	461a      	mov	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4293      	cmp	r3, r2
 800741c:	d3b5      	bcc.n	800738a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800742c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007430:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800743e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f043 0210 	orr.w	r2, r3, #16
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	4b10      	ldr	r3, [pc, #64]	@ (800749c <USB_DevInit+0x2c4>)
 800745a:	4313      	orrs	r3, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f043 0208 	orr.w	r2, r3, #8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007474:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007478:	2b01      	cmp	r3, #1
 800747a:	d107      	bne.n	800748c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007484:	f043 0304 	orr.w	r3, r3, #4
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007498:	b004      	add	sp, #16
 800749a:	4770      	bx	lr
 800749c:	803c3800 	.word	0x803c3800

080074a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ba:	d901      	bls.n	80074c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e01b      	b.n	80074f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	daf2      	bge.n	80074ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	019b      	lsls	r3, r3, #6
 80074d0:	f043 0220 	orr.w	r2, r3, #32
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074e4:	d901      	bls.n	80074ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e006      	b.n	80074f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d0f0      	beq.n	80074d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800751c:	d901      	bls.n	8007522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e018      	b.n	8007554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	daf2      	bge.n	8007510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2210      	movs	r2, #16
 8007532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007540:	d901      	bls.n	8007546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e006      	b.n	8007554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b10      	cmp	r3, #16
 8007550:	d0f0      	beq.n	8007534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007580:	4313      	orrs	r3, r2
 8007582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0306 	and.w	r3, r3, #6
 80075aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]
 80075b6:	e00a      	b.n	80075ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d002      	beq.n	80075c4 <USB_GetDevSpeed+0x32>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	d102      	bne.n	80075ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075c4:	2302      	movs	r3, #2
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	e001      	b.n	80075ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80075ca:	230f      	movs	r3, #15
 80075cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d13a      	bne.n	800766e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	2101      	movs	r1, #1
 800760a:	fa01 f303 	lsl.w	r3, r1, r3
 800760e:	b29b      	uxth	r3, r3
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007616:	4313      	orrs	r3, r2
 8007618:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d155      	bne.n	80076dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800764c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	059b      	lsls	r3, r3, #22
 8007652:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007654:	4313      	orrs	r3, r2
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	440a      	add	r2, r1
 800765e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	e036      	b.n	80076dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	2101      	movs	r1, #1
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800768c:	4313      	orrs	r3, r2
 800768e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11a      	bne.n	80076dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076c2:	430b      	orrs	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d161      	bne.n	80077cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800771a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800771e:	d11f      	bne.n	8007760 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800773e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800775a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800775e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f303 	lsl.w	r3, r1, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	43db      	mvns	r3, r3
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007780:	4013      	ands	r3, r2
 8007782:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	2101      	movs	r1, #1
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	b29b      	uxth	r3, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077a4:	4013      	ands	r3, r2
 80077a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	0159      	lsls	r1, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	440b      	add	r3, r1
 80077be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c2:	4619      	mov	r1, r3
 80077c4:	4b35      	ldr	r3, [pc, #212]	@ (800789c <USB_DeactivateEndpoint+0x1b0>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
 80077ca:	e060      	b.n	800788e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e2:	d11f      	bne.n	8007824 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007802:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800781e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007822:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	2101      	movs	r1, #1
 8007836:	fa01 f303 	lsl.w	r3, r1, r3
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	43db      	mvns	r3, r3
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007844:	4013      	ands	r3, r2
 8007846:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	041b      	lsls	r3, r3, #16
 8007860:	43db      	mvns	r3, r3
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007868:	4013      	ands	r3, r2
 800786a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	0159      	lsls	r1, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	440b      	add	r3, r1
 8007882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007886:	4619      	mov	r1, r3
 8007888:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <USB_DeactivateEndpoint+0x1b4>)
 800788a:	4013      	ands	r3, r2
 800788c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	ec337800 	.word	0xec337800
 80078a0:	eff37800 	.word	0xeff37800

080078a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	@ 0x28
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	f040 817f 	bne.w	8007bc4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d132      	bne.n	8007934 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800790c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792c:	0cdb      	lsrs	r3, r3, #19
 800792e:	04db      	lsls	r3, r3, #19
 8007930:	6113      	str	r3, [r2, #16]
 8007932:	e097      	b.n	8007a64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794e:	0cdb      	lsrs	r3, r3, #19
 8007950:	04db      	lsls	r3, r3, #19
 8007952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	440a      	add	r2, r1
 800796a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007972:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007976:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d11a      	bne.n	80079b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	429a      	cmp	r2, r3
 8007988:	d903      	bls.n	8007992 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079b0:	6113      	str	r3, [r2, #16]
 80079b2:	e044      	b.n	8007a3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	4413      	add	r3, r2
 80079be:	1e5a      	subs	r2, r3, #1
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d6:	691a      	ldr	r2, [r3, #16]
 80079d8:	8afb      	ldrh	r3, [r7, #22]
 80079da:	04d9      	lsls	r1, r3, #19
 80079dc:	4ba4      	ldr	r3, [pc, #656]	@ (8007c70 <USB_EPStartXfer+0x3cc>)
 80079de:	400b      	ands	r3, r1
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	0148      	lsls	r0, r1, #5
 80079e4:	69f9      	ldr	r1, [r7, #28]
 80079e6:	4401      	add	r1, r0
 80079e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d122      	bne.n	8007a3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	8afb      	ldrh	r3, [r7, #22]
 8007a28:	075b      	lsls	r3, r3, #29
 8007a2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007a2e:	69b9      	ldr	r1, [r7, #24]
 8007a30:	0148      	lsls	r0, r1, #5
 8007a32:	69f9      	ldr	r1, [r7, #28]
 8007a34:	4401      	add	r1, r0
 8007a36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a54:	69b9      	ldr	r1, [r7, #24]
 8007a56:	0148      	lsls	r0, r1, #5
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	4401      	add	r1, r0
 8007a5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a60:	4313      	orrs	r3, r2
 8007a62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d14b      	bne.n	8007b02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	791b      	ldrb	r3, [r3, #4]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d128      	bne.n	8007ae0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d110      	bne.n	8007ac0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e00f      	b.n	8007ae0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ade:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007afa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e166      	b.n	8007dd0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d015      	beq.n	8007b56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 814e 	beq.w	8007dd0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 030f 	and.w	r3, r3, #15
 8007b44:	2101      	movs	r1, #1
 8007b46:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4a:	69f9      	ldr	r1, [r7, #28]
 8007b4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b50:	4313      	orrs	r3, r2
 8007b52:	634b      	str	r3, [r1, #52]	@ 0x34
 8007b54:	e13c      	b.n	8007dd0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d110      	bne.n	8007b88 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e00f      	b.n	8007ba8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ba6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68d9      	ldr	r1, [r3, #12]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	b298      	uxth	r0, r3
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	4603      	mov	r3, r0
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f9b9 	bl	8007f34 <USB_WritePacket>
 8007bc2:	e105      	b.n	8007dd0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bde:	0cdb      	lsrs	r3, r3, #19
 8007be0:	04db      	lsls	r3, r3, #19
 8007be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bfe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c06:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d132      	bne.n	8007c74 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c3c:	69b9      	ldr	r1, [r7, #24]
 8007c3e:	0148      	lsls	r0, r1, #5
 8007c40:	69f9      	ldr	r1, [r7, #28]
 8007c42:	4401      	add	r1, r0
 8007c44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c6a:	6113      	str	r3, [r2, #16]
 8007c6c:	e062      	b.n	8007d34 <USB_EPStartXfer+0x490>
 8007c6e:	bf00      	nop
 8007c70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d123      	bne.n	8007cc4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c92:	69b9      	ldr	r1, [r7, #24]
 8007c94:	0148      	lsls	r0, r1, #5
 8007c96:	69f9      	ldr	r1, [r7, #28]
 8007c98:	4401      	add	r1, r0
 8007c9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cc0:	6113      	str	r3, [r2, #16]
 8007cc2:	e037      	b.n	8007d34 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	1e5a      	subs	r2, r3, #1
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	8afa      	ldrh	r2, [r7, #22]
 8007ce0:	fb03 f202 	mul.w	r2, r3, r2
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	8afb      	ldrh	r3, [r7, #22]
 8007cf8:	04d9      	lsls	r1, r3, #19
 8007cfa:	4b38      	ldr	r3, [pc, #224]	@ (8007ddc <USB_EPStartXfer+0x538>)
 8007cfc:	400b      	ands	r3, r1
 8007cfe:	69b9      	ldr	r1, [r7, #24]
 8007d00:	0148      	lsls	r0, r1, #5
 8007d02:	69f9      	ldr	r1, [r7, #28]
 8007d04:	4401      	add	r1, r0
 8007d06:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d24:	69b9      	ldr	r1, [r7, #24]
 8007d26:	0148      	lsls	r0, r1, #5
 8007d28:	69f9      	ldr	r1, [r7, #28]
 8007d2a:	4401      	add	r1, r0
 8007d2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d30:	4313      	orrs	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d10d      	bne.n	8007d56 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d009      	beq.n	8007d56 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	68d9      	ldr	r1, [r3, #12]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d52:	460a      	mov	r2, r1
 8007d54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d128      	bne.n	8007db0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d110      	bne.n	8007d90 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e00f      	b.n	8007db0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	1ff80000 	.word	0x1ff80000

08007de0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d14a      	bne.n	8007e94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e16:	f040 8086 	bne.w	8007f26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	7812      	ldrb	r2, [r2, #0]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d902      	bls.n	8007e78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]
          break;
 8007e76:	e056      	b.n	8007f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e90:	d0e7      	beq.n	8007e62 <USB_EPStopXfer+0x82>
 8007e92:	e048      	b.n	8007f26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eac:	d13b      	bne.n	8007f26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ecc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ed0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d902      	bls.n	8007f0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]
          break;
 8007f0a:	e00c      	b.n	8007f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f24:	d0e7      	beq.n	8007ef6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b089      	sub	sp, #36	@ 0x24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	461a      	mov	r2, r3
 8007f42:	460b      	mov	r3, r1
 8007f44:	71fb      	strb	r3, [r7, #7]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d123      	bne.n	8007fa2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f5a:	88bb      	ldrh	r3, [r7, #4]
 8007f5c:	3303      	adds	r3, #3
 8007f5e:	089b      	lsrs	r3, r3, #2
 8007f60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e018      	b.n	8007f9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	031a      	lsls	r2, r3, #12
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f74:	461a      	mov	r2, r3
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	3301      	adds	r3, #1
 8007f92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d3e2      	bcc.n	8007f68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3724      	adds	r7, #36	@ 0x24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b08b      	sub	sp, #44	@ 0x2c
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	089b      	lsrs	r3, r3, #2
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	623b      	str	r3, [r7, #32]
 8007fda:	e014      	b.n	8008006 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	3301      	adds	r3, #1
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	3301      	adds	r3, #1
 8008004:	623b      	str	r3, [r7, #32]
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	429a      	cmp	r2, r3
 800800c:	d3e6      	bcc.n	8007fdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800800e:	8bfb      	ldrh	r3, [r7, #30]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01e      	beq.n	8008052 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800801e:	461a      	mov	r2, r3
 8008020:	f107 0310 	add.w	r3, r7, #16
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
 8008034:	b2da      	uxtb	r2, r3
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	701a      	strb	r2, [r3, #0]
      i++;
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	3301      	adds	r3, #1
 800803e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	3301      	adds	r3, #1
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008046:	8bfb      	ldrh	r3, [r7, #30]
 8008048:	3b01      	subs	r3, #1
 800804a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800804c:	8bfb      	ldrh	r3, [r7, #30]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1ea      	bne.n	8008028 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008054:	4618      	mov	r0, r3
 8008056:	372c      	adds	r7, #44	@ 0x2c
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d12c      	bne.n	80080d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	db12      	blt.n	80080b4 <USB_EPSetStall+0x54>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00f      	beq.n	80080b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	e02b      	b.n	800812e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	db12      	blt.n	800810e <USB_EPSetStall+0xae>
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00f      	beq.n	800810e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008108:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800810c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008128:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800812c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d128      	bne.n	80081aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	440a      	add	r2, r1
 800816e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008172:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008176:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	791b      	ldrb	r3, [r3, #4]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d003      	beq.n	8008188 <USB_EPClearStall+0x4c>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d138      	bne.n	80081fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	e027      	b.n	80081fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	791b      	ldrb	r3, [r3, #4]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d003      	beq.n	80081da <USB_EPClearStall+0x9e>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	791b      	ldrb	r3, [r3, #4]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d10f      	bne.n	80081fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008226:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800822a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800823c:	68f9      	ldr	r1, [r7, #12]
 800823e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008242:	4313      	orrs	r3, r2
 8008244:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008282:	f023 0302 	bic.w	r3, r3, #2
 8008286:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082b0:	f023 0303 	bic.w	r3, r3, #3
 80082b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	4013      	ands	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	0c1b      	lsrs	r3, r3, #16
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	4013      	ands	r3, r2
 8008354:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	b29b      	uxth	r3, r3
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4013      	ands	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008394:	68bb      	ldr	r3, [r7, #8]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b087      	sub	sp, #28
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	fa22 f303 	lsr.w	r3, r2, r3
 80083d2:	01db      	lsls	r3, r3, #7
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4013      	ands	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083f0:	68bb      	ldr	r3, [r7, #8]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0301 	and.w	r3, r3, #1
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008434:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008438:	f023 0307 	bic.w	r3, r3, #7
 800843c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800844c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	460b      	mov	r3, r1
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	333c      	adds	r3, #60	@ 0x3c
 8008476:	3304      	adds	r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4a26      	ldr	r2, [pc, #152]	@ (8008518 <USB_EP0_OutStart+0xb8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d90a      	bls.n	800849a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008494:	d101      	bne.n	800849a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e037      	b.n	800850a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a0:	461a      	mov	r2, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c8:	f043 0318 	orr.w	r3, r3, #24
 80084cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80084e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10f      	bne.n	8008508 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008502:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	4f54300a 	.word	0x4f54300a

0800851c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008534:	d901      	bls.n	800853a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e01b      	b.n	8008572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	daf2      	bge.n	8008528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f043 0201 	orr.w	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800855e:	d901      	bls.n	8008564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e006      	b.n	8008572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b01      	cmp	r3, #1
 800856e:	d0f0      	beq.n	8008552 <USB_CoreReset+0x36>

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800858c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008590:	f002 fc38 	bl	800ae04 <USBD_static_malloc>
 8008594:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32b0      	adds	r2, #176	@ 0xb0
 80085a6:	2100      	movs	r1, #0
 80085a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085ac:	2302      	movs	r3, #2
 80085ae:	e0d4      	b.n	800875a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80085b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f003 fad0 	bl	800bb5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32b0      	adds	r2, #176	@ 0xb0
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32b0      	adds	r2, #176	@ 0xb0
 80085d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7c1b      	ldrb	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d138      	bne.n	800865a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 80085ea:	7819      	ldrb	r1, [r3, #0]
 80085ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085f0:	2202      	movs	r2, #2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fae3 	bl	800abbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3324      	adds	r3, #36	@ 0x24
 800860e:	2201      	movs	r2, #1
 8008610:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008612:	4b55      	ldr	r3, [pc, #340]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008614:	7819      	ldrb	r1, [r3, #0]
 8008616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800861a:	2202      	movs	r2, #2
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 face 	bl	800abbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008622:	4b51      	ldr	r3, [pc, #324]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 020f 	and.w	r2, r3, #15
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800863a:	2201      	movs	r2, #1
 800863c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800863e:	4b4b      	ldr	r3, [pc, #300]	@ (800876c <USBD_CDC_Init+0x1ec>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 020f 	and.w	r2, r3, #15
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	3326      	adds	r3, #38	@ 0x26
 8008654:	2210      	movs	r2, #16
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	e035      	b.n	80086c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800865a:	4b42      	ldr	r3, [pc, #264]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 800865c:	7819      	ldrb	r1, [r3, #0]
 800865e:	2340      	movs	r3, #64	@ 0x40
 8008660:	2202      	movs	r2, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f002 faab 	bl	800abbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008668:	4b3e      	ldr	r3, [pc, #248]	@ (8008764 <USBD_CDC_Init+0x1e4>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	3324      	adds	r3, #36	@ 0x24
 800867e:	2201      	movs	r2, #1
 8008680:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008682:	4b39      	ldr	r3, [pc, #228]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008684:	7819      	ldrb	r1, [r3, #0]
 8008686:	2340      	movs	r3, #64	@ 0x40
 8008688:	2202      	movs	r2, #2
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f002 fa97 	bl	800abbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008690:	4b35      	ldr	r3, [pc, #212]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086a8:	2201      	movs	r2, #1
 80086aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80086ac:	4b2f      	ldr	r3, [pc, #188]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3326      	adds	r3, #38	@ 0x26
 80086c2:	2210      	movs	r2, #16
 80086c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086c6:	4b29      	ldr	r3, [pc, #164]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086c8:	7819      	ldrb	r1, [r3, #0]
 80086ca:	2308      	movs	r3, #8
 80086cc:	2203      	movs	r2, #3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f002 fa75 	bl	800abbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80086d4:	4b25      	ldr	r3, [pc, #148]	@ (800876c <USBD_CDC_Init+0x1ec>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 020f 	and.w	r2, r3, #15
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	3324      	adds	r3, #36	@ 0x24
 80086ea:	2201      	movs	r2, #1
 80086ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	33b0      	adds	r3, #176	@ 0xb0
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008724:	2302      	movs	r3, #2
 8008726:	e018      	b.n	800875a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7c1b      	ldrb	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008730:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008732:	7819      	ldrb	r1, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800873a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f002 fb2c 	bl	800ad9c <USBD_LL_PrepareReceive>
 8008744:	e008      	b.n	8008758 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <USBD_CDC_Init+0x1e8>)
 8008748:	7819      	ldrb	r1, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008750:	2340      	movs	r3, #64	@ 0x40
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f002 fb22 	bl	800ad9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200000bb 	.word	0x200000bb
 8008768:	200000bc 	.word	0x200000bc
 800876c:	200000bd 	.word	0x200000bd

08008770 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800877c:	4b3a      	ldr	r3, [pc, #232]	@ (8008868 <USBD_CDC_DeInit+0xf8>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f002 fa41 	bl	800ac0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008788:	4b37      	ldr	r3, [pc, #220]	@ (8008868 <USBD_CDC_DeInit+0xf8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	3324      	adds	r3, #36	@ 0x24
 800879e:	2200      	movs	r2, #0
 80087a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80087a2:	4b32      	ldr	r3, [pc, #200]	@ (800886c <USBD_CDC_DeInit+0xfc>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f002 fa2e 	bl	800ac0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80087ae:	4b2f      	ldr	r3, [pc, #188]	@ (800886c <USBD_CDC_DeInit+0xfc>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f003 020f 	and.w	r2, r3, #15
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087c6:	2200      	movs	r2, #0
 80087c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80087ca:	4b29      	ldr	r3, [pc, #164]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f002 fa1a 	bl	800ac0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80087d6:	4b26      	ldr	r3, [pc, #152]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 020f 	and.w	r2, r3, #15
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3324      	adds	r3, #36	@ 0x24
 80087ec:	2200      	movs	r2, #0
 80087ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008870 <USBD_CDC_DeInit+0x100>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3326      	adds	r3, #38	@ 0x26
 8008806:	2200      	movs	r2, #0
 8008808:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32b0      	adds	r2, #176	@ 0xb0
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01f      	beq.n	800885c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	33b0      	adds	r3, #176	@ 0xb0
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	32b0      	adds	r2, #176	@ 0xb0
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	4618      	mov	r0, r3
 8008840:	f002 faee 	bl	800ae20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	@ 0xb0
 800884e:	2100      	movs	r1, #0
 8008850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200000bb 	.word	0x200000bb
 800886c:	200000bc 	.word	0x200000bc
 8008870:	200000bd 	.word	0x200000bd

08008874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	@ 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e0bf      	b.n	8008a24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d050      	beq.n	8008952 <USBD_CDC_Setup+0xde>
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	f040 80af 	bne.w	8008a14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d03a      	beq.n	8008934 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b25b      	sxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da1b      	bge.n	8008900 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	33b0      	adds	r3, #176	@ 0xb0
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80088de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	88d2      	ldrh	r2, [r2, #6]
 80088e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	bf28      	it	cs
 80088ee:	2307      	movcs	r3, #7
 80088f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	89fa      	ldrh	r2, [r7, #14]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 fd53 	bl	800a3a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088fe:	e090      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	785a      	ldrb	r2, [r3, #1]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	88db      	ldrh	r3, [r3, #6]
 800890e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008910:	d803      	bhi.n	800891a <USBD_CDC_Setup+0xa6>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	e000      	b.n	800891c <USBD_CDC_Setup+0xa8>
 800891a:	2240      	movs	r2, #64	@ 0x40
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008922:	6939      	ldr	r1, [r7, #16]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800892a:	461a      	mov	r2, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fd65 	bl	800a3fc <USBD_CtlPrepareRx>
      break;
 8008932:	e076      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	33b0      	adds	r3, #176	@ 0xb0
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	7850      	ldrb	r0, [r2, #1]
 800894a:	2200      	movs	r2, #0
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4798      	blx	r3
      break;
 8008950:	e067      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b0b      	cmp	r3, #11
 8008958:	d851      	bhi.n	80089fe <USBD_CDC_Setup+0x18a>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <USBD_CDC_Setup+0xec>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008991 	.word	0x08008991
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	080089ff 	.word	0x080089ff
 800896c:	080089ff 	.word	0x080089ff
 8008970:	080089ff 	.word	0x080089ff
 8008974:	080089ff 	.word	0x080089ff
 8008978:	080089ff 	.word	0x080089ff
 800897c:	080089ff 	.word	0x080089ff
 8008980:	080089ff 	.word	0x080089ff
 8008984:	080089ff 	.word	0x080089ff
 8008988:	080089bb 	.word	0x080089bb
 800898c:	080089e5 	.word	0x080089e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b03      	cmp	r3, #3
 800899a:	d107      	bne.n	80089ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800899c:	f107 030a 	add.w	r3, r7, #10
 80089a0:	2202      	movs	r2, #2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 fcfd 	bl	800a3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089aa:	e032      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fc7b 	bl	800a2aa <USBD_CtlError>
            ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	e02b      	b.n	8008a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d107      	bne.n	80089d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089c6:	f107 030d 	add.w	r3, r7, #13
 80089ca:	2201      	movs	r2, #1
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fce8 	bl	800a3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d4:	e01d      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fc66 	bl	800a2aa <USBD_CtlError>
            ret = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	75fb      	strb	r3, [r7, #23]
          break;
 80089e2:	e016      	b.n	8008a12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d00f      	beq.n	8008a10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fc59 	bl	800a2aa <USBD_CtlError>
            ret = USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089fc:	e008      	b.n	8008a10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fc52 	bl	800a2aa <USBD_CtlError>
          ret = USBD_FAIL;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0a:	e002      	b.n	8008a12 <USBD_CDC_Setup+0x19e>
          break;
 8008a0c:	bf00      	nop
 8008a0e:	e008      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>
          break;
 8008a10:	bf00      	nop
      }
      break;
 8008a12:	e006      	b.n	8008a22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fc47 	bl	800a2aa <USBD_CtlError>
      ret = USBD_FAIL;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a20:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	32b0      	adds	r2, #176	@ 0xb0
 8008a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e065      	b.n	8008b22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32b0      	adds	r2, #176	@ 0xb0
 8008a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	3318      	adds	r3, #24
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d02f      	beq.n	8008ae0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	f003 020f 	and.w	r2, r3, #15
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	3318      	adds	r3, #24
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	f003 010f 	and.w	r1, r3, #15
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	440b      	add	r3, r1
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	331c      	adds	r3, #28
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d112      	bne.n	8008ae0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3318      	adds	r3, #24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ad2:	78f9      	ldrb	r1, [r7, #3]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f002 f93e 	bl	800ad5a <USBD_LL_Transmit>
 8008ade:	e01f      	b.n	8008b20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	33b0      	adds	r3, #176	@ 0xb0
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d010      	beq.n	8008b20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33b0      	adds	r3, #176	@ 0xb0
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32b0      	adds	r2, #176	@ 0xb0
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	32b0      	adds	r2, #176	@ 0xb0
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e01a      	b.n	8008b92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f002 f93c 	bl	800adde <USBD_LL_GetRxDataSize>
 8008b66:	4602      	mov	r2, r0
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	33b0      	adds	r3, #176	@ 0xb0
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	32b0      	adds	r2, #176	@ 0xb0
 8008bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e024      	b.n	8008c06 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	33b0      	adds	r3, #176	@ 0xb0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d019      	beq.n	8008c04 <USBD_CDC_EP0_RxReady+0x6a>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bd6:	2bff      	cmp	r3, #255	@ 0xff
 8008bd8:	d014      	beq.n	8008c04 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	33b0      	adds	r3, #176	@ 0xb0
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008bf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	22ff      	movs	r2, #255	@ 0xff
 8008c00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c18:	2182      	movs	r1, #130	@ 0x82
 8008c1a:	4818      	ldr	r0, [pc, #96]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c1c:	f000 fd0f 	bl	800963e <USBD_GetEpDesc>
 8008c20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c22:	2101      	movs	r1, #1
 8008c24:	4815      	ldr	r0, [pc, #84]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c26:	f000 fd0a 	bl	800963e <USBD_GetEpDesc>
 8008c2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c2c:	2181      	movs	r1, #129	@ 0x81
 8008c2e:	4813      	ldr	r0, [pc, #76]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c30:	f000 fd05 	bl	800963e <USBD_GetEpDesc>
 8008c34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c50:	711a      	strb	r2, [r3, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d006      	beq.n	8008c6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c64:	711a      	strb	r2, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2243      	movs	r2, #67	@ 0x43
 8008c6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c70:	4b02      	ldr	r3, [pc, #8]	@ (8008c7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000078 	.word	0x20000078

08008c80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c88:	2182      	movs	r1, #130	@ 0x82
 8008c8a:	4818      	ldr	r0, [pc, #96]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c8c:	f000 fcd7 	bl	800963e <USBD_GetEpDesc>
 8008c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c92:	2101      	movs	r1, #1
 8008c94:	4815      	ldr	r0, [pc, #84]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c96:	f000 fcd2 	bl	800963e <USBD_GetEpDesc>
 8008c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c9c:	2181      	movs	r1, #129	@ 0x81
 8008c9e:	4813      	ldr	r0, [pc, #76]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ca0:	f000 fccd 	bl	800963e <USBD_GetEpDesc>
 8008ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2210      	movs	r2, #16
 8008cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	711a      	strb	r2, [r3, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f042 0202 	orr.w	r2, r2, #2
 8008cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	711a      	strb	r2, [r3, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f042 0202 	orr.w	r2, r2, #2
 8008cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2243      	movs	r2, #67	@ 0x43
 8008cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	@ (8008cec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000078 	.word	0x20000078

08008cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cf8:	2182      	movs	r1, #130	@ 0x82
 8008cfa:	4818      	ldr	r0, [pc, #96]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cfc:	f000 fc9f 	bl	800963e <USBD_GetEpDesc>
 8008d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d02:	2101      	movs	r1, #1
 8008d04:	4815      	ldr	r0, [pc, #84]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d06:	f000 fc9a 	bl	800963e <USBD_GetEpDesc>
 8008d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d0c:	2181      	movs	r1, #129	@ 0x81
 8008d0e:	4813      	ldr	r0, [pc, #76]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d10:	f000 fc95 	bl	800963e <USBD_GetEpDesc>
 8008d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d006      	beq.n	8008d36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d30:	711a      	strb	r2, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d44:	711a      	strb	r2, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2243      	movs	r2, #67	@ 0x43
 8008d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d50:	4b02      	ldr	r3, [pc, #8]	@ (8008d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000078 	.word	0x20000078

08008d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20000034 	.word	0x20000034

08008d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e009      	b.n	8008da8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	33b0      	adds	r3, #176	@ 0xb0
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	32b0      	adds	r2, #176	@ 0xb0
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e008      	b.n	8008dec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32b0      	adds	r2, #176	@ 0xb0
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e004      	b.n	8008e26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	32b0      	adds	r2, #176	@ 0xb0
 8008e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32b0      	adds	r2, #176	@ 0xb0
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e018      	b.n	8008e94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7c1b      	ldrb	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e9c <USBD_CDC_ReceivePacket+0x68>)
 8008e6c:	7819      	ldrb	r1, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 ff8f 	bl	800ad9c <USBD_LL_PrepareReceive>
 8008e7e:	e008      	b.n	8008e92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <USBD_CDC_ReceivePacket+0x68>)
 8008e82:	7819      	ldrb	r1, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e8a:	2340      	movs	r3, #64	@ 0x40
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 ff85 	bl	800ad9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200000bc 	.word	0x200000bc

08008ea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e01f      	b.n	8008ef8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	79fa      	ldrb	r2, [r7, #7]
 8008eea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f001 fdff 	bl	800aaf0 <USBD_LL_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e025      	b.n	8008f64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32ae      	adds	r2, #174	@ 0xae
 8008f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00f      	beq.n	8008f54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32ae      	adds	r2, #174	@ 0xae
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	f107 020e 	add.w	r2, r7, #14
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fe07 	bl	800ab88 <USBD_LL_Start>
 8008f7a:	4603      	mov	r3, r0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f001 f90c 	bl	800a236 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800902c:	461a      	mov	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800903a:	f003 031f 	and.w	r3, r3, #31
 800903e:	2b02      	cmp	r3, #2
 8009040:	d01a      	beq.n	8009078 <USBD_LL_SetupStage+0x72>
 8009042:	2b02      	cmp	r3, #2
 8009044:	d822      	bhi.n	800908c <USBD_LL_SetupStage+0x86>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <USBD_LL_SetupStage+0x4a>
 800904a:	2b01      	cmp	r3, #1
 800904c:	d00a      	beq.n	8009064 <USBD_LL_SetupStage+0x5e>
 800904e:	e01d      	b.n	800908c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb63 	bl	8009724 <USBD_StdDevReq>
 800905e:	4603      	mov	r3, r0
 8009060:	73fb      	strb	r3, [r7, #15]
      break;
 8009062:	e020      	b.n	80090a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fbcb 	bl	8009808 <USBD_StdItfReq>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]
      break;
 8009076:	e016      	b.n	80090a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fc2d 	bl	80098e0 <USBD_StdEPReq>
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
      break;
 800908a:	e00c      	b.n	80090a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009092:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fdd4 	bl	800ac48 <USBD_LL_StallEP>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
      break;
 80090a4:	bf00      	nop
  }

  return ret;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	460b      	mov	r3, r1
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d16e      	bne.n	80091a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80090ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	f040 8098 	bne.w	800920c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d913      	bls.n	8009110 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	1ad2      	subs	r2, r2, r3
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4293      	cmp	r3, r2
 8009100:	bf28      	it	cs
 8009102:	4613      	movcs	r3, r2
 8009104:	461a      	mov	r2, r3
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f001 f994 	bl	800a436 <USBD_CtlContinueRx>
 800910e:	e07d      	b.n	800920c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009116:	f003 031f 	and.w	r3, r3, #31
 800911a:	2b02      	cmp	r3, #2
 800911c:	d014      	beq.n	8009148 <USBD_LL_DataOutStage+0x98>
 800911e:	2b02      	cmp	r3, #2
 8009120:	d81d      	bhi.n	800915e <USBD_LL_DataOutStage+0xae>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <USBD_LL_DataOutStage+0x7c>
 8009126:	2b01      	cmp	r3, #1
 8009128:	d003      	beq.n	8009132 <USBD_LL_DataOutStage+0x82>
 800912a:	e018      	b.n	800915e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	75bb      	strb	r3, [r7, #22]
            break;
 8009130:	e018      	b.n	8009164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009138:	b2db      	uxtb	r3, r3
 800913a:	4619      	mov	r1, r3
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fa64 	bl	800960a <USBD_CoreFindIF>
 8009142:	4603      	mov	r3, r0
 8009144:	75bb      	strb	r3, [r7, #22]
            break;
 8009146:	e00d      	b.n	8009164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fa66 	bl	8009624 <USBD_CoreFindEP>
 8009158:	4603      	mov	r3, r0
 800915a:	75bb      	strb	r3, [r7, #22]
            break;
 800915c:	e002      	b.n	8009164 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	75bb      	strb	r3, [r7, #22]
            break;
 8009162:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009164:	7dbb      	ldrb	r3, [r7, #22]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d119      	bne.n	800919e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b03      	cmp	r3, #3
 8009174:	d113      	bne.n	800919e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	32ae      	adds	r2, #174	@ 0xae
 800917c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00b      	beq.n	800919e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009186:	7dba      	ldrb	r2, [r7, #22]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800918e:	7dba      	ldrb	r2, [r7, #22]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	32ae      	adds	r2, #174	@ 0xae
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f001 f95a 	bl	800a458 <USBD_CtlSendStatus>
 80091a4:	e032      	b.n	800920c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fa37 	bl	8009624 <USBD_CoreFindEP>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ba:	7dbb      	ldrb	r3, [r7, #22]
 80091bc:	2bff      	cmp	r3, #255	@ 0xff
 80091be:	d025      	beq.n	800920c <USBD_LL_DataOutStage+0x15c>
 80091c0:	7dbb      	ldrb	r3, [r7, #22]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d122      	bne.n	800920c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d117      	bne.n	8009202 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80091d2:	7dba      	ldrb	r2, [r7, #22]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	32ae      	adds	r2, #174	@ 0xae
 80091d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00f      	beq.n	8009202 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80091e2:	7dba      	ldrb	r2, [r7, #22]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091ea:	7dba      	ldrb	r2, [r7, #22]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	32ae      	adds	r2, #174	@ 0xae
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	7afa      	ldrb	r2, [r7, #11]
 80091f8:	4611      	mov	r1, r2
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	4798      	blx	r3
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	e000      	b.n	800920e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	460b      	mov	r3, r1
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d16f      	bne.n	800930a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3314      	adds	r3, #20
 800922e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009236:	2b02      	cmp	r3, #2
 8009238:	d15a      	bne.n	80092f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	429a      	cmp	r2, r3
 8009244:	d914      	bls.n	8009270 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	461a      	mov	r2, r3
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f001 f8bc 	bl	800a3da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f001 fd97 	bl	800ad9c <USBD_LL_PrepareReceive>
 800926e:	e03f      	b.n	80092f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	429a      	cmp	r2, r3
 800927a:	d11c      	bne.n	80092b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009284:	429a      	cmp	r2, r3
 8009286:	d316      	bcc.n	80092b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009292:	429a      	cmp	r2, r3
 8009294:	d20f      	bcs.n	80092b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009296:	2200      	movs	r2, #0
 8009298:	2100      	movs	r1, #0
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 f89d 	bl	800a3da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092a8:	2300      	movs	r3, #0
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f001 fd74 	bl	800ad9c <USBD_LL_PrepareReceive>
 80092b4:	e01c      	b.n	80092f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d10f      	bne.n	80092e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e2:	2180      	movs	r1, #128	@ 0x80
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f001 fcaf 	bl	800ac48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f001 f8c7 	bl	800a47e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d03a      	beq.n	8009370 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fe42 	bl	8008f84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009308:	e032      	b.n	8009370 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f985 	bl	8009624 <USBD_CoreFindEP>
 800931a:	4603      	mov	r3, r0
 800931c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	2bff      	cmp	r3, #255	@ 0xff
 8009322:	d025      	beq.n	8009370 <USBD_LL_DataInStage+0x15a>
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d122      	bne.n	8009370 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d11c      	bne.n	8009370 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009336:	7dfa      	ldrb	r2, [r7, #23]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	32ae      	adds	r2, #174	@ 0xae
 800933c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d014      	beq.n	8009370 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009346:	7dfa      	ldrb	r2, [r7, #23]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800934e:	7dfa      	ldrb	r2, [r7, #23]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	32ae      	adds	r2, #174	@ 0xae
 8009354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	7afa      	ldrb	r2, [r7, #11]
 800935c:	4611      	mov	r1, r2
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009366:	7dbb      	ldrb	r3, [r7, #22]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800936c:	7dbb      	ldrb	r3, [r7, #22]
 800936e:	e000      	b.n	8009372 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d014      	beq.n	80093e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6852      	ldr	r2, [r2, #4]
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	4611      	mov	r1, r2
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093e0:	2340      	movs	r3, #64	@ 0x40
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fbe9 	bl	800abbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2240      	movs	r2, #64	@ 0x40
 80093f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093fc:	2340      	movs	r3, #64	@ 0x40
 80093fe:	2200      	movs	r2, #0
 8009400:	2180      	movs	r1, #128	@ 0x80
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 fbdb 	bl	800abbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2240      	movs	r2, #64	@ 0x40
 8009412:	621a      	str	r2, [r3, #32]

  return ret;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b04      	cmp	r3, #4
 8009450:	d006      	beq.n	8009460 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2204      	movs	r2, #4
 8009464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b04      	cmp	r3, #4
 8009488:	d106      	bne.n	8009498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009490:	b2da      	uxtb	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d110      	bne.n	80094dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	460b      	mov	r3, r1
 80094f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	32ae      	adds	r2, #174	@ 0xae
 80094fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	e01c      	b.n	8009542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d115      	bne.n	8009540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	32ae      	adds	r2, #174	@ 0xae
 800951e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32ae      	adds	r2, #174	@ 0xae
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	32ae      	adds	r2, #174	@ 0xae
 8009560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	e01c      	b.n	80095a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b03      	cmp	r3, #3
 8009576:	d115      	bne.n	80095a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	32ae      	adds	r2, #174	@ 0xae
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	32ae      	adds	r2, #174	@ 0xae
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4611      	mov	r1, r2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00e      	beq.n	8009600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6852      	ldr	r2, [r2, #4]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	4611      	mov	r1, r2
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b086      	sub	sp, #24
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	460b      	mov	r3, r1
 8009648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	885b      	ldrh	r3, [r3, #2]
 800965a:	b29b      	uxth	r3, r3
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	4293      	cmp	r3, r2
 8009662:	d91f      	bls.n	80096a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800966a:	e013      	b.n	8009694 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800966c:	f107 030a 	add.w	r3, r7, #10
 8009670:	4619      	mov	r1, r3
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	f000 f81b 	bl	80096ae <USBD_GetNextDesc>
 8009678:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b05      	cmp	r3, #5
 8009680:	d108      	bne.n	8009694 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	789b      	ldrb	r3, [r3, #2]
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	429a      	cmp	r2, r3
 800968e:	d008      	beq.n	80096a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	885b      	ldrh	r3, [r3, #2]
 8009698:	b29a      	uxth	r2, r3
 800969a:	897b      	ldrh	r3, [r7, #10]
 800969c:	429a      	cmp	r2, r3
 800969e:	d8e5      	bhi.n	800966c <USBD_GetEpDesc+0x2e>
 80096a0:	e000      	b.n	80096a4 <USBD_GetEpDesc+0x66>
          break;
 80096a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80096a4:	693b      	ldr	r3, [r7, #16]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	4413      	add	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096d8:	68fb      	ldr	r3, [r7, #12]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b087      	sub	sp, #28
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	3301      	adds	r3, #1
 80096fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009704:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	b21a      	sxth	r2, r3
 800970c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009710:	4313      	orrs	r3, r2
 8009712:	b21b      	sxth	r3, r3
 8009714:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009716:	89fb      	ldrh	r3, [r7, #14]
}
 8009718:	4618      	mov	r0, r3
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800973a:	2b40      	cmp	r3, #64	@ 0x40
 800973c:	d005      	beq.n	800974a <USBD_StdDevReq+0x26>
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d857      	bhi.n	80097f2 <USBD_StdDevReq+0xce>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00f      	beq.n	8009766 <USBD_StdDevReq+0x42>
 8009746:	2b20      	cmp	r3, #32
 8009748:	d153      	bne.n	80097f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	32ae      	adds	r2, #174	@ 0xae
 8009754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
      break;
 8009764:	e04a      	b.n	80097fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d83b      	bhi.n	80097e6 <USBD_StdDevReq+0xc2>
 800976e:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <USBD_StdDevReq+0x50>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	080097c9 	.word	0x080097c9
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080097e7 	.word	0x080097e7
 8009780:	080097d3 	.word	0x080097d3
 8009784:	080097e7 	.word	0x080097e7
 8009788:	080097a7 	.word	0x080097a7
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097e7 	.word	0x080097e7
 8009794:	080097bf 	.word	0x080097bf
 8009798:	080097b1 	.word	0x080097b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa3c 	bl	8009c1c <USBD_GetDescriptor>
          break;
 80097a4:	e024      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fba1 	bl	8009ef0 <USBD_SetAddress>
          break;
 80097ae:	e01f      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fbe0 	bl	8009f78 <USBD_SetConfig>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
          break;
 80097bc:	e018      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc83 	bl	800a0cc <USBD_GetConfig>
          break;
 80097c6:	e013      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fcb4 	bl	800a138 <USBD_GetStatus>
          break;
 80097d0:	e00e      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fce3 	bl	800a1a0 <USBD_SetFeature>
          break;
 80097da:	e009      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fd07 	bl	800a1f2 <USBD_ClrFeature>
          break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fd5e 	bl	800a2aa <USBD_CtlError>
          break;
 80097ee:	bf00      	nop
      }
      break;
 80097f0:	e004      	b.n	80097fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fd58 	bl	800a2aa <USBD_CtlError>
      break;
 80097fa:	bf00      	nop
  }

  return ret;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop

08009808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d005      	beq.n	800982e <USBD_StdItfReq+0x26>
 8009822:	2b40      	cmp	r3, #64	@ 0x40
 8009824:	d852      	bhi.n	80098cc <USBD_StdItfReq+0xc4>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <USBD_StdItfReq+0x26>
 800982a:	2b20      	cmp	r3, #32
 800982c:	d14e      	bne.n	80098cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	2b02      	cmp	r3, #2
 800983a:	d840      	bhi.n	80098be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b01      	cmp	r3, #1
 8009844:	d836      	bhi.n	80098b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	889b      	ldrh	r3, [r3, #4]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fedb 	bl	800960a <USBD_CoreFindIF>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2bff      	cmp	r3, #255	@ 0xff
 800985c:	d01d      	beq.n	800989a <USBD_StdItfReq+0x92>
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11a      	bne.n	800989a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009864:	7bba      	ldrb	r2, [r7, #14]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	32ae      	adds	r2, #174	@ 0xae
 800986a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00f      	beq.n	8009894 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009874:	7bba      	ldrb	r2, [r7, #14]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800987c:	7bba      	ldrb	r2, [r7, #14]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32ae      	adds	r2, #174	@ 0xae
 8009882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009892:	e004      	b.n	800989e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009894:	2303      	movs	r3, #3
 8009896:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009898:	e001      	b.n	800989e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800989a:	2303      	movs	r3, #3
 800989c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d110      	bne.n	80098c8 <USBD_StdItfReq+0xc0>
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10d      	bne.n	80098c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fdd3 	bl	800a458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098b2:	e009      	b.n	80098c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fcf7 	bl	800a2aa <USBD_CtlError>
          break;
 80098bc:	e004      	b.n	80098c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fcf2 	bl	800a2aa <USBD_CtlError>
          break;
 80098c6:	e000      	b.n	80098ca <USBD_StdItfReq+0xc2>
          break;
 80098c8:	bf00      	nop
      }
      break;
 80098ca:	e004      	b.n	80098d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fceb 	bl	800a2aa <USBD_CtlError>
      break;
 80098d4:	bf00      	nop
  }

  return ret;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	889b      	ldrh	r3, [r3, #4]
 80098f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098fc:	2b40      	cmp	r3, #64	@ 0x40
 80098fe:	d007      	beq.n	8009910 <USBD_StdEPReq+0x30>
 8009900:	2b40      	cmp	r3, #64	@ 0x40
 8009902:	f200 817f 	bhi.w	8009c04 <USBD_StdEPReq+0x324>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d02a      	beq.n	8009960 <USBD_StdEPReq+0x80>
 800990a:	2b20      	cmp	r3, #32
 800990c:	f040 817a 	bne.w	8009c04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fe85 	bl	8009624 <USBD_CoreFindEP>
 800991a:	4603      	mov	r3, r0
 800991c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800991e:	7b7b      	ldrb	r3, [r7, #13]
 8009920:	2bff      	cmp	r3, #255	@ 0xff
 8009922:	f000 8174 	beq.w	8009c0e <USBD_StdEPReq+0x32e>
 8009926:	7b7b      	ldrb	r3, [r7, #13]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8170 	bne.w	8009c0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800992e:	7b7a      	ldrb	r2, [r7, #13]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009936:	7b7a      	ldrb	r2, [r7, #13]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	32ae      	adds	r2, #174	@ 0xae
 800993c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8163 	beq.w	8009c0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009948:	7b7a      	ldrb	r2, [r7, #13]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	32ae      	adds	r2, #174	@ 0xae
 800994e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	4798      	blx	r3
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800995e:	e156      	b.n	8009c0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d008      	beq.n	800997a <USBD_StdEPReq+0x9a>
 8009968:	2b03      	cmp	r3, #3
 800996a:	f300 8145 	bgt.w	8009bf8 <USBD_StdEPReq+0x318>
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 809b 	beq.w	8009aaa <USBD_StdEPReq+0x1ca>
 8009974:	2b01      	cmp	r3, #1
 8009976:	d03c      	beq.n	80099f2 <USBD_StdEPReq+0x112>
 8009978:	e13e      	b.n	8009bf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b02      	cmp	r3, #2
 8009984:	d002      	beq.n	800998c <USBD_StdEPReq+0xac>
 8009986:	2b03      	cmp	r3, #3
 8009988:	d016      	beq.n	80099b8 <USBD_StdEPReq+0xd8>
 800998a:	e02c      	b.n	80099e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00d      	beq.n	80099ae <USBD_StdEPReq+0xce>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b80      	cmp	r3, #128	@ 0x80
 8009996:	d00a      	beq.n	80099ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f953 	bl	800ac48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a2:	2180      	movs	r1, #128	@ 0x80
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f94f 	bl	800ac48 <USBD_LL_StallEP>
 80099aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099ac:	e020      	b.n	80099f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fc7a 	bl	800a2aa <USBD_CtlError>
              break;
 80099b6:	e01b      	b.n	80099f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	885b      	ldrh	r3, [r3, #2]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10e      	bne.n	80099de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <USBD_StdEPReq+0xfe>
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	2b80      	cmp	r3, #128	@ 0x80
 80099ca:	d008      	beq.n	80099de <USBD_StdEPReq+0xfe>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	88db      	ldrh	r3, [r3, #6]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 f935 	bl	800ac48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fd3a 	bl	800a458 <USBD_CtlSendStatus>

              break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc5e 	bl	800a2aa <USBD_CtlError>
              break;
 80099ee:	bf00      	nop
          }
          break;
 80099f0:	e107      	b.n	8009c02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d002      	beq.n	8009a04 <USBD_StdEPReq+0x124>
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d016      	beq.n	8009a30 <USBD_StdEPReq+0x150>
 8009a02:	e04b      	b.n	8009a9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <USBD_StdEPReq+0x146>
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b80      	cmp	r3, #128	@ 0x80
 8009a0e:	d00a      	beq.n	8009a26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 f917 	bl	800ac48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a1a:	2180      	movs	r1, #128	@ 0x80
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 f913 	bl	800ac48 <USBD_LL_StallEP>
 8009a22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a24:	e040      	b.n	8009aa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc3e 	bl	800a2aa <USBD_CtlError>
              break;
 8009a2e:	e03b      	b.n	8009aa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	885b      	ldrh	r3, [r3, #2]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d136      	bne.n	8009aa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d004      	beq.n	8009a4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 f91d 	bl	800ac86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fd03 	bl	800a458 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fde4 	bl	8009624 <USBD_CoreFindEP>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a60:	7b7b      	ldrb	r3, [r7, #13]
 8009a62:	2bff      	cmp	r3, #255	@ 0xff
 8009a64:	d01f      	beq.n	8009aa6 <USBD_StdEPReq+0x1c6>
 8009a66:	7b7b      	ldrb	r3, [r7, #13]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11c      	bne.n	8009aa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a6c:	7b7a      	ldrb	r2, [r7, #13]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a74:	7b7a      	ldrb	r2, [r7, #13]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	32ae      	adds	r2, #174	@ 0xae
 8009a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d010      	beq.n	8009aa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a84:	7b7a      	ldrb	r2, [r7, #13]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32ae      	adds	r2, #174	@ 0xae
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a9a:	e004      	b.n	8009aa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fc03 	bl	800a2aa <USBD_CtlError>
              break;
 8009aa4:	e000      	b.n	8009aa8 <USBD_StdEPReq+0x1c8>
              break;
 8009aa6:	bf00      	nop
          }
          break;
 8009aa8:	e0ab      	b.n	8009c02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d002      	beq.n	8009abc <USBD_StdEPReq+0x1dc>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d032      	beq.n	8009b20 <USBD_StdEPReq+0x240>
 8009aba:	e097      	b.n	8009bec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <USBD_StdEPReq+0x1f2>
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b80      	cmp	r3, #128	@ 0x80
 8009ac6:	d004      	beq.n	8009ad2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fbed 	bl	800a2aa <USBD_CtlError>
                break;
 8009ad0:	e091      	b.n	8009bf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	da0b      	bge.n	8009af2 <USBD_StdEPReq+0x212>
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	3310      	adds	r3, #16
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	e00b      	b.n	8009b0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	4413      	add	r3, r2
 8009b08:	3304      	adds	r3, #4
 8009b0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2202      	movs	r2, #2
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc43 	bl	800a3a4 <USBD_CtlSendData>
              break;
 8009b1e:	e06a      	b.n	8009bf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da11      	bge.n	8009b4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	f003 020f 	and.w	r2, r3, #15
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	440b      	add	r3, r1
 8009b3a:	3324      	adds	r3, #36	@ 0x24
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d117      	bne.n	8009b72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbb0 	bl	800a2aa <USBD_CtlError>
                  break;
 8009b4a:	e054      	b.n	8009bf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	f003 020f 	and.w	r2, r3, #15
 8009b52:	6879      	ldr	r1, [r7, #4]
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fb9d 	bl	800a2aa <USBD_CtlError>
                  break;
 8009b70:	e041      	b.n	8009bf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	da0b      	bge.n	8009b92 <USBD_StdEPReq+0x2b2>
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	3310      	adds	r3, #16
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	3304      	adds	r3, #4
 8009b90:	e00b      	b.n	8009baa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	3304      	adds	r3, #4
 8009baa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <USBD_StdEPReq+0x2d8>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	@ 0x80
 8009bb6:	d103      	bne.n	8009bc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	e00e      	b.n	8009bde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f87d 	bl	800acc4 <USBD_LL_IsStallEP>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2202      	movs	r2, #2
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fbdd 	bl	800a3a4 <USBD_CtlSendData>
              break;
 8009bea:	e004      	b.n	8009bf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fb5b 	bl	800a2aa <USBD_CtlError>
              break;
 8009bf4:	bf00      	nop
          }
          break;
 8009bf6:	e004      	b.n	8009c02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fb55 	bl	800a2aa <USBD_CtlError>
          break;
 8009c00:	bf00      	nop
      }
      break;
 8009c02:	e005      	b.n	8009c10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fb4f 	bl	800a2aa <USBD_CtlError>
      break;
 8009c0c:	e000      	b.n	8009c10 <USBD_StdEPReq+0x330>
      break;
 8009c0e:	bf00      	nop
  }

  return ret;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	2b06      	cmp	r3, #6
 8009c3e:	f200 8128 	bhi.w	8009e92 <USBD_GetDescriptor+0x276>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <USBD_GetDescriptor+0x2c>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c7d 	.word	0x08009c7d
 8009c50:	08009cbd 	.word	0x08009cbd
 8009c54:	08009e93 	.word	0x08009e93
 8009c58:	08009e93 	.word	0x08009e93
 8009c5c:	08009e33 	.word	0x08009e33
 8009c60:	08009e5f 	.word	0x08009e5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	7c12      	ldrb	r2, [r2, #16]
 8009c70:	f107 0108 	add.w	r1, r7, #8
 8009c74:	4610      	mov	r0, r2
 8009c76:	4798      	blx	r3
 8009c78:	60f8      	str	r0, [r7, #12]
      break;
 8009c7a:	e112      	b.n	8009ea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7c1b      	ldrb	r3, [r3, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10d      	bne.n	8009ca0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8c:	f107 0208 	add.w	r2, r7, #8
 8009c90:	4610      	mov	r0, r2
 8009c92:	4798      	blx	r3
 8009c94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c9e:	e100      	b.n	8009ea2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca8:	f107 0208 	add.w	r2, r7, #8
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	701a      	strb	r2, [r3, #0]
      break;
 8009cba:	e0f2      	b.n	8009ea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	885b      	ldrh	r3, [r3, #2]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	f200 80ac 	bhi.w	8009e20 <USBD_GetDescriptor+0x204>
 8009cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <USBD_GetDescriptor+0xb4>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009ce9 	.word	0x08009ce9
 8009cd4:	08009d1d 	.word	0x08009d1d
 8009cd8:	08009d51 	.word	0x08009d51
 8009cdc:	08009d85 	.word	0x08009d85
 8009ce0:	08009db9 	.word	0x08009db9
 8009ce4:	08009ded 	.word	0x08009ded
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	7c12      	ldrb	r2, [r2, #16]
 8009d00:	f107 0108 	add.w	r1, r7, #8
 8009d04:	4610      	mov	r0, r2
 8009d06:	4798      	blx	r3
 8009d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0a:	e091      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 facb 	bl	800a2aa <USBD_CtlError>
            err++;
 8009d14:	7afb      	ldrb	r3, [r7, #11]
 8009d16:	3301      	adds	r3, #1
 8009d18:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1a:	e089      	b.n	8009e30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	7c12      	ldrb	r2, [r2, #16]
 8009d34:	f107 0108 	add.w	r1, r7, #8
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4798      	blx	r3
 8009d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d3e:	e077      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fab1 	bl	800a2aa <USBD_CtlError>
            err++;
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d4e:	e06f      	b.n	8009e30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00b      	beq.n	8009d74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	7c12      	ldrb	r2, [r2, #16]
 8009d68:	f107 0108 	add.w	r1, r7, #8
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	4798      	blx	r3
 8009d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d72:	e05d      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fa97 	bl	800a2aa <USBD_CtlError>
            err++;
 8009d7c:	7afb      	ldrb	r3, [r7, #11]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	72fb      	strb	r3, [r7, #11]
          break;
 8009d82:	e055      	b.n	8009e30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	7c12      	ldrb	r2, [r2, #16]
 8009d9c:	f107 0108 	add.w	r1, r7, #8
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009da6:	e043      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa7d 	bl	800a2aa <USBD_CtlError>
            err++;
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	3301      	adds	r3, #1
 8009db4:	72fb      	strb	r3, [r7, #11]
          break;
 8009db6:	e03b      	b.n	8009e30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00b      	beq.n	8009ddc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7c12      	ldrb	r2, [r2, #16]
 8009dd0:	f107 0108 	add.w	r1, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dda:	e029      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fa63 	bl	800a2aa <USBD_CtlError>
            err++;
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	3301      	adds	r3, #1
 8009de8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dea:	e021      	b.n	8009e30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	7c12      	ldrb	r2, [r2, #16]
 8009e04:	f107 0108 	add.w	r1, r7, #8
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e0e:	e00f      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa49 	bl	800a2aa <USBD_CtlError>
            err++;
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e1e:	e007      	b.n	8009e30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fa41 	bl	800a2aa <USBD_CtlError>
          err++;
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e2e:	bf00      	nop
      }
      break;
 8009e30:	e037      	b.n	8009ea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	7c1b      	ldrb	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d109      	bne.n	8009e4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e42:	f107 0208 	add.w	r2, r7, #8
 8009e46:	4610      	mov	r0, r2
 8009e48:	4798      	blx	r3
 8009e4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e4c:	e029      	b.n	8009ea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa2a 	bl	800a2aa <USBD_CtlError>
        err++;
 8009e56:	7afb      	ldrb	r3, [r7, #11]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e5c:	e021      	b.n	8009ea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7c1b      	ldrb	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10d      	bne.n	8009e82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	f107 0208 	add.w	r2, r7, #8
 8009e72:	4610      	mov	r0, r2
 8009e74:	4798      	blx	r3
 8009e76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	2207      	movs	r2, #7
 8009e7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e80:	e00f      	b.n	8009ea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa10 	bl	800a2aa <USBD_CtlError>
        err++;
 8009e8a:	7afb      	ldrb	r3, [r7, #11]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e90:	e007      	b.n	8009ea2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fa08 	bl	800a2aa <USBD_CtlError>
      err++;
 8009e9a:	7afb      	ldrb	r3, [r7, #11]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009ea0:	bf00      	nop
  }

  if (err != 0U)
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11e      	bne.n	8009ee6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	88db      	ldrh	r3, [r3, #6]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d016      	beq.n	8009ede <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009eb0:	893b      	ldrh	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00e      	beq.n	8009ed4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	88da      	ldrh	r2, [r3, #6]
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	bf28      	it	cs
 8009ec0:	4613      	movcs	r3, r2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ec6:	893b      	ldrh	r3, [r7, #8]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fa69 	bl	800a3a4 <USBD_CtlSendData>
 8009ed2:	e009      	b.n	8009ee8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f9e7 	bl	800a2aa <USBD_CtlError>
 8009edc:	e004      	b.n	8009ee8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 faba 	bl	800a458 <USBD_CtlSendStatus>
 8009ee4:	e000      	b.n	8009ee8 <USBD_GetDescriptor+0x2cc>
    return;
 8009ee6:	bf00      	nop
  }
}
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop

08009ef0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d131      	bne.n	8009f66 <USBD_SetAddress+0x76>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d12d      	bne.n	8009f66 <USBD_SetAddress+0x76>
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	885b      	ldrh	r3, [r3, #2]
 8009f0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f10:	d829      	bhi.n	8009f66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d104      	bne.n	8009f34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9bc 	bl	800a2aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f32:	e01d      	b.n	8009f70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7bfa      	ldrb	r2, [r7, #15]
 8009f38:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 feeb 	bl	800ad1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa86 	bl	800a458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d004      	beq.n	8009f5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f5a:	e009      	b.n	8009f70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f64:	e004      	b.n	8009f70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f99e 	bl	800a2aa <USBD_CtlError>
  }
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	885b      	ldrh	r3, [r3, #2]
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	4b4e      	ldr	r3, [pc, #312]	@ (800a0c8 <USBD_SetConfig+0x150>)
 8009f8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f90:	4b4d      	ldr	r3, [pc, #308]	@ (800a0c8 <USBD_SetConfig+0x150>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d905      	bls.n	8009fa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f985 	bl	800a2aa <USBD_CtlError>
    return USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e08c      	b.n	800a0be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d002      	beq.n	8009fb6 <USBD_SetConfig+0x3e>
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d029      	beq.n	800a008 <USBD_SetConfig+0x90>
 8009fb4:	e075      	b.n	800a0a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fb6:	4b44      	ldr	r3, [pc, #272]	@ (800a0c8 <USBD_SetConfig+0x150>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d020      	beq.n	800a000 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fbe:	4b42      	ldr	r3, [pc, #264]	@ (800a0c8 <USBD_SetConfig+0x150>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fc8:	4b3f      	ldr	r3, [pc, #252]	@ (800a0c8 <USBD_SetConfig+0x150>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fe ffe3 	bl	8008f9a <USBD_SetClassConfig>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d008      	beq.n	8009ff0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f962 	bl	800a2aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fee:	e065      	b.n	800a0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa31 	bl	800a458 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ffe:	e05d      	b.n	800a0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fa29 	bl	800a458 <USBD_CtlSendStatus>
      break;
 800a006:	e059      	b.n	800a0bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a008:	4b2f      	ldr	r3, [pc, #188]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d112      	bne.n	800a036 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a018:	4b2b      	ldr	r3, [pc, #172]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a022:	4b29      	ldr	r3, [pc, #164]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7fe ffd2 	bl	8008fd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fa12 	bl	800a458 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a034:	e042      	b.n	800a0bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a036:	4b24      	ldr	r3, [pc, #144]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	429a      	cmp	r2, r3
 800a042:	d02a      	beq.n	800a09a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7fe ffc0 	bl	8008fd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a052:	4b1d      	ldr	r3, [pc, #116]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a05c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fe ff99 	bl	8008f9a <USBD_SetClassConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00f      	beq.n	800a092 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f918 	bl	800a2aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7fe ffa5 	bl	8008fd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a090:	e014      	b.n	800a0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f9e0 	bl	800a458 <USBD_CtlSendStatus>
      break;
 800a098:	e010      	b.n	800a0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9dc 	bl	800a458 <USBD_CtlSendStatus>
      break;
 800a0a0:	e00c      	b.n	800a0bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f900 	bl	800a2aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0aa:	4b07      	ldr	r3, [pc, #28]	@ (800a0c8 <USBD_SetConfig+0x150>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7fe ff8e 	bl	8008fd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ba:	bf00      	nop
  }

  return ret;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000548 	.word	0x20000548

0800a0cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	88db      	ldrh	r3, [r3, #6]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d004      	beq.n	800a0e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f8e2 	bl	800a2aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0e6:	e023      	b.n	800a130 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	dc02      	bgt.n	800a0fa <USBD_GetConfig+0x2e>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dc03      	bgt.n	800a100 <USBD_GetConfig+0x34>
 800a0f8:	e015      	b.n	800a126 <USBD_GetConfig+0x5a>
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d00b      	beq.n	800a116 <USBD_GetConfig+0x4a>
 800a0fe:	e012      	b.n	800a126 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3308      	adds	r3, #8
 800a10a:	2201      	movs	r2, #1
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f948 	bl	800a3a4 <USBD_CtlSendData>
        break;
 800a114:	e00c      	b.n	800a130 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3304      	adds	r3, #4
 800a11a:	2201      	movs	r2, #1
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f940 	bl	800a3a4 <USBD_CtlSendData>
        break;
 800a124:	e004      	b.n	800a130 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f8be 	bl	800a2aa <USBD_CtlError>
        break;
 800a12e:	bf00      	nop
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	3b01      	subs	r3, #1
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d81e      	bhi.n	800a18e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	88db      	ldrh	r3, [r3, #6]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d004      	beq.n	800a162 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f8a5 	bl	800a2aa <USBD_CtlError>
        break;
 800a160:	e01a      	b.n	800a198 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f043 0202 	orr.w	r2, r3, #2
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	330c      	adds	r3, #12
 800a182:	2202      	movs	r2, #2
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f90c 	bl	800a3a4 <USBD_CtlSendData>
      break;
 800a18c:	e004      	b.n	800a198 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f88a 	bl	800a2aa <USBD_CtlError>
      break;
 800a196:	bf00      	nop
  }
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d107      	bne.n	800a1c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f94c 	bl	800a458 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1c0:	e013      	b.n	800a1ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	885b      	ldrh	r3, [r3, #2]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d10b      	bne.n	800a1e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	889b      	ldrh	r3, [r3, #4]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f93c 	bl	800a458 <USBD_CtlSendStatus>
}
 800a1e0:	e003      	b.n	800a1ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f860 	bl	800a2aa <USBD_CtlError>
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a202:	b2db      	uxtb	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	2b02      	cmp	r3, #2
 800a208:	d80b      	bhi.n	800a222 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	885b      	ldrh	r3, [r3, #2]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d10c      	bne.n	800a22c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f91c 	bl	800a458 <USBD_CtlSendStatus>
      }
      break;
 800a220:	e004      	b.n	800a22c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f840 	bl	800a2aa <USBD_CtlError>
      break;
 800a22a:	e000      	b.n	800a22e <USBD_ClrFeature+0x3c>
      break;
 800a22c:	bf00      	nop
  }
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3301      	adds	r3, #1
 800a250:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	781a      	ldrb	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3301      	adds	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f7ff fa40 	bl	80096e6 <SWAPBYTE>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3301      	adds	r3, #1
 800a272:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff fa33 	bl	80096e6 <SWAPBYTE>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3301      	adds	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7ff fa26 	bl	80096e6 <SWAPBYTE>
 800a29a:	4603      	mov	r3, r0
 800a29c:	461a      	mov	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	80da      	strh	r2, [r3, #6]
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2b4:	2180      	movs	r1, #128	@ 0x80
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fcc6 	bl	800ac48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2bc:	2100      	movs	r1, #0
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fcc2 	bl	800ac48 <USBD_LL_StallEP>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d042      	beq.n	800a368 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a2e6:	6938      	ldr	r0, [r7, #16]
 800a2e8:	f000 f842 	bl	800a370 <USBD_GetLen>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f6:	d808      	bhi.n	800a30a <USBD_GetString+0x3e>
 800a2f8:	6938      	ldr	r0, [r7, #16]
 800a2fa:	f000 f839 	bl	800a370 <USBD_GetLen>
 800a2fe:	4603      	mov	r3, r0
 800a300:	3301      	adds	r3, #1
 800a302:	b29b      	uxth	r3, r3
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	e001      	b.n	800a30e <USBD_GetString+0x42>
 800a30a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	4413      	add	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	3301      	adds	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	4413      	add	r3, r2
 800a32a:	2203      	movs	r2, #3
 800a32c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	3301      	adds	r3, #1
 800a332:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a334:	e013      	b.n	800a35e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	4413      	add	r3, r2
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	613b      	str	r3, [r7, #16]
    idx++;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	3301      	adds	r3, #1
 800a34c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	4413      	add	r3, r2
 800a354:	2200      	movs	r2, #0
 800a356:	701a      	strb	r2, [r3, #0]
    idx++;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	3301      	adds	r3, #1
 800a35c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e7      	bne.n	800a336 <USBD_GetString+0x6a>
 800a366:	e000      	b.n	800a36a <USBD_GetString+0x9e>
    return;
 800a368:	bf00      	nop
  }
}
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a380:	e005      	b.n	800a38e <USBD_GetLen+0x1e>
  {
    len++;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	3301      	adds	r3, #1
 800a386:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1f5      	bne.n	800a382 <USBD_GetLen+0x12>
  }

  return len;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 fcc5 	bl	800ad5a <USBD_LL_Transmit>

  return USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fcb4 	bl	800ad5a <USBD_LL_Transmit>

  return USBD_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2203      	movs	r2, #3
 800a40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	2100      	movs	r1, #0
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 fcb8 	bl	800ad9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	2100      	movs	r1, #0
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 fca7 	bl	800ad9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2204      	movs	r2, #4
 800a464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a468:	2300      	movs	r3, #0
 800a46a:	2200      	movs	r2, #0
 800a46c:	2100      	movs	r1, #0
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fc73 	bl	800ad5a <USBD_LL_Transmit>

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2205      	movs	r2, #5
 800a48a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a48e:	2300      	movs	r3, #0
 800a490:	2200      	movs	r2, #0
 800a492:	2100      	movs	r1, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fc81 	bl	800ad9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4912      	ldr	r1, [pc, #72]	@ (800a4f4 <MX_USB_DEVICE_Init+0x50>)
 800a4ac:	4812      	ldr	r0, [pc, #72]	@ (800a4f8 <MX_USB_DEVICE_Init+0x54>)
 800a4ae:	f7fe fcf7 	bl	8008ea0 <USBD_Init>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4b8:	f7f8 fa22 	bl	8002900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4bc:	490f      	ldr	r1, [pc, #60]	@ (800a4fc <MX_USB_DEVICE_Init+0x58>)
 800a4be:	480e      	ldr	r0, [pc, #56]	@ (800a4f8 <MX_USB_DEVICE_Init+0x54>)
 800a4c0:	f7fe fd1e 	bl	8008f00 <USBD_RegisterClass>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4ca:	f7f8 fa19 	bl	8002900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4ce:	490c      	ldr	r1, [pc, #48]	@ (800a500 <MX_USB_DEVICE_Init+0x5c>)
 800a4d0:	4809      	ldr	r0, [pc, #36]	@ (800a4f8 <MX_USB_DEVICE_Init+0x54>)
 800a4d2:	f7fe fc55 	bl	8008d80 <USBD_CDC_RegisterInterface>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4dc:	f7f8 fa10 	bl	8002900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4e0:	4805      	ldr	r0, [pc, #20]	@ (800a4f8 <MX_USB_DEVICE_Init+0x54>)
 800a4e2:	f7fe fd43 	bl	8008f6c <USBD_Start>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4ec:	f7f8 fa08 	bl	8002900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4f0:	bf00      	nop
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	200000d4 	.word	0x200000d4
 800a4f8:	2000054c 	.word	0x2000054c
 800a4fc:	20000040 	.word	0x20000040
 800a500:	200000c0 	.word	0x200000c0

0800a504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a508:	2200      	movs	r2, #0
 800a50a:	4905      	ldr	r1, [pc, #20]	@ (800a520 <CDC_Init_FS+0x1c>)
 800a50c:	4805      	ldr	r0, [pc, #20]	@ (800a524 <CDC_Init_FS+0x20>)
 800a50e:	f7fe fc51 	bl	8008db4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a512:	4905      	ldr	r1, [pc, #20]	@ (800a528 <CDC_Init_FS+0x24>)
 800a514:	4803      	ldr	r0, [pc, #12]	@ (800a524 <CDC_Init_FS+0x20>)
 800a516:	f7fe fc6f 	bl	8008df8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a51a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20001028 	.word	0x20001028
 800a524:	2000054c 	.word	0x2000054c
 800a528:	20000828 	.word	0x20000828

0800a52c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a532:	4618      	mov	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
 800a548:	4613      	mov	r3, r2
 800a54a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	2b23      	cmp	r3, #35	@ 0x23
 800a550:	d84a      	bhi.n	800a5e8 <CDC_Control_FS+0xac>
 800a552:	a201      	add	r2, pc, #4	@ (adr r2, 800a558 <CDC_Control_FS+0x1c>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a5e9 	.word	0x0800a5e9
 800a55c:	0800a5e9 	.word	0x0800a5e9
 800a560:	0800a5e9 	.word	0x0800a5e9
 800a564:	0800a5e9 	.word	0x0800a5e9
 800a568:	0800a5e9 	.word	0x0800a5e9
 800a56c:	0800a5e9 	.word	0x0800a5e9
 800a570:	0800a5e9 	.word	0x0800a5e9
 800a574:	0800a5e9 	.word	0x0800a5e9
 800a578:	0800a5e9 	.word	0x0800a5e9
 800a57c:	0800a5e9 	.word	0x0800a5e9
 800a580:	0800a5e9 	.word	0x0800a5e9
 800a584:	0800a5e9 	.word	0x0800a5e9
 800a588:	0800a5e9 	.word	0x0800a5e9
 800a58c:	0800a5e9 	.word	0x0800a5e9
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a5e9 	.word	0x0800a5e9
 800a598:	0800a5e9 	.word	0x0800a5e9
 800a59c:	0800a5e9 	.word	0x0800a5e9
 800a5a0:	0800a5e9 	.word	0x0800a5e9
 800a5a4:	0800a5e9 	.word	0x0800a5e9
 800a5a8:	0800a5e9 	.word	0x0800a5e9
 800a5ac:	0800a5e9 	.word	0x0800a5e9
 800a5b0:	0800a5e9 	.word	0x0800a5e9
 800a5b4:	0800a5e9 	.word	0x0800a5e9
 800a5b8:	0800a5e9 	.word	0x0800a5e9
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a5e9 	.word	0x0800a5e9
 800a5d0:	0800a5e9 	.word	0x0800a5e9
 800a5d4:	0800a5e9 	.word	0x0800a5e9
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a5e9 	.word	0x0800a5e9
 800a5e0:	0800a5e9 	.word	0x0800a5e9
 800a5e4:	0800a5e9 	.word	0x0800a5e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5e8:	bf00      	nop
  }

  return (USBD_OK);
 800a5ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	4805      	ldr	r0, [pc, #20]	@ (800a61c <CDC_Receive_FS+0x24>)
 800a606:	f7fe fbf7 	bl	8008df8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a60a:	4804      	ldr	r0, [pc, #16]	@ (800a61c <CDC_Receive_FS+0x24>)
 800a60c:	f7fe fc12 	bl	8008e34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	2000054c 	.word	0x2000054c

0800a620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a636:	4618      	mov	r0, r3
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
	...

0800a644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2212      	movs	r2, #18
 800a654:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a656:	4b03      	ldr	r3, [pc, #12]	@ (800a664 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	200000f0 	.word	0x200000f0

0800a668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2204      	movs	r2, #4
 800a678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a67a:	4b03      	ldr	r3, [pc, #12]	@ (800a688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	20000104 	.word	0x20000104

0800a68c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d105      	bne.n	800a6aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4907      	ldr	r1, [pc, #28]	@ (800a6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6a2:	4808      	ldr	r0, [pc, #32]	@ (800a6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6a4:	f7ff fe12 	bl	800a2cc <USBD_GetString>
 800a6a8:	e004      	b.n	800a6b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	4904      	ldr	r1, [pc, #16]	@ (800a6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6ae:	4805      	ldr	r0, [pc, #20]	@ (800a6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6b0:	f7ff fe0c 	bl	800a2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b4:	4b02      	ldr	r3, [pc, #8]	@ (800a6c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20001828 	.word	0x20001828
 800a6c4:	0800e2e4 	.word	0x0800e2e4

0800a6c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	6039      	str	r1, [r7, #0]
 800a6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	4904      	ldr	r1, [pc, #16]	@ (800a6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6d8:	4804      	ldr	r0, [pc, #16]	@ (800a6ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6da:	f7ff fdf7 	bl	800a2cc <USBD_GetString>
  return USBD_StrDesc;
 800a6de:	4b02      	ldr	r3, [pc, #8]	@ (800a6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20001828 	.word	0x20001828
 800a6ec:	0800e2fc 	.word	0x0800e2fc

0800a6f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	6039      	str	r1, [r7, #0]
 800a6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	221a      	movs	r2, #26
 800a700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a702:	f000 f843 	bl	800a78c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a706:	4b02      	ldr	r3, [pc, #8]	@ (800a710 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20000108 	.word	0x20000108

0800a714 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4907      	ldr	r1, [pc, #28]	@ (800a748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a72a:	4808      	ldr	r0, [pc, #32]	@ (800a74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a72c:	f7ff fdce 	bl	800a2cc <USBD_GetString>
 800a730:	e004      	b.n	800a73c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	4904      	ldr	r1, [pc, #16]	@ (800a748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a736:	4805      	ldr	r0, [pc, #20]	@ (800a74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a738:	f7ff fdc8 	bl	800a2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a73c:	4b02      	ldr	r3, [pc, #8]	@ (800a748 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20001828 	.word	0x20001828
 800a74c:	0800e310 	.word	0x0800e310

0800a750 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4907      	ldr	r1, [pc, #28]	@ (800a784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a766:	4808      	ldr	r0, [pc, #32]	@ (800a788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a768:	f7ff fdb0 	bl	800a2cc <USBD_GetString>
 800a76c:	e004      	b.n	800a778 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4904      	ldr	r1, [pc, #16]	@ (800a784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a772:	4805      	ldr	r0, [pc, #20]	@ (800a788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a774:	f7ff fdaa 	bl	800a2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a778:	4b02      	ldr	r3, [pc, #8]	@ (800a784 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20001828 	.word	0x20001828
 800a788:	0800e31c 	.word	0x0800e31c

0800a78c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a792:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d0 <Get_SerialNum+0x44>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a798:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d4 <Get_SerialNum+0x48>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a79e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d8 <Get_SerialNum+0x4c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7b2:	2208      	movs	r2, #8
 800a7b4:	4909      	ldr	r1, [pc, #36]	@ (800a7dc <Get_SerialNum+0x50>)
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 f814 	bl	800a7e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7bc:	2204      	movs	r2, #4
 800a7be:	4908      	ldr	r1, [pc, #32]	@ (800a7e0 <Get_SerialNum+0x54>)
 800a7c0:	68b8      	ldr	r0, [r7, #8]
 800a7c2:	f000 f80f 	bl	800a7e4 <IntToUnicode>
  }
}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	1fff7a10 	.word	0x1fff7a10
 800a7d4:	1fff7a14 	.word	0x1fff7a14
 800a7d8:	1fff7a18 	.word	0x1fff7a18
 800a7dc:	2000010a 	.word	0x2000010a
 800a7e0:	2000011a 	.word	0x2000011a

0800a7e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	75fb      	strb	r3, [r7, #23]
 800a7fa:	e027      	b.n	800a84c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	0f1b      	lsrs	r3, r3, #28
 800a800:	2b09      	cmp	r3, #9
 800a802:	d80b      	bhi.n	800a81c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	0f1b      	lsrs	r3, r3, #28
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	4619      	mov	r1, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	440b      	add	r3, r1
 800a814:	3230      	adds	r2, #48	@ 0x30
 800a816:	b2d2      	uxtb	r2, r2
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	e00a      	b.n	800a832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	0f1b      	lsrs	r3, r3, #28
 800a820:	b2da      	uxtb	r2, r3
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	4619      	mov	r1, r3
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	440b      	add	r3, r1
 800a82c:	3237      	adds	r2, #55	@ 0x37
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	3301      	adds	r3, #1
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	4413      	add	r3, r2
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	3301      	adds	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
 800a84c:	7dfa      	ldrb	r2, [r7, #23]
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	429a      	cmp	r2, r3
 800a852:	d3d3      	bcc.n	800a7fc <IntToUnicode+0x18>
  }
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	@ 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	605a      	str	r2, [r3, #4]
 800a876:	609a      	str	r2, [r3, #8]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a884:	d13a      	bne.n	800a8fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a886:	2300      	movs	r3, #0
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	4b1e      	ldr	r3, [pc, #120]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a88e:	4a1d      	ldr	r2, [pc, #116]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	6313      	str	r3, [r2, #48]	@ 0x30
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a8a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a8a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8b4:	230a      	movs	r3, #10
 800a8b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4812      	ldr	r0, [pc, #72]	@ (800a908 <HAL_PCD_MspInit+0xa4>)
 800a8c0:	f7f9 fb74 	bl	8003fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ce:	6353      	str	r3, [r2, #52]	@ 0x34
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a8d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a8da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8de:	6453      	str	r3, [r2, #68]	@ 0x44
 800a8e0:	4b08      	ldr	r3, [pc, #32]	@ (800a904 <HAL_PCD_MspInit+0xa0>)
 800a8e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	2043      	movs	r0, #67	@ 0x43
 800a8f2:	f7f9 fb24 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8f6:	2043      	movs	r0, #67	@ 0x43
 800a8f8:	f7f9 fb3d 	bl	8003f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	3728      	adds	r7, #40	@ 0x28
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40023800 	.word	0x40023800
 800a908:	40020000 	.word	0x40020000

0800a90c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f7fe fb6f 	bl	8009006 <USBD_LL_SetupStage>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a942:	78fa      	ldrb	r2, [r7, #3]
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	78fb      	ldrb	r3, [r7, #3]
 800a958:	4619      	mov	r1, r3
 800a95a:	f7fe fba9 	bl	80090b0 <USBD_LL_DataOutStage>
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a978:	78fa      	ldrb	r2, [r7, #3]
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	4613      	mov	r3, r2
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	440b      	add	r3, r1
 800a986:	3320      	adds	r3, #32
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	4619      	mov	r1, r3
 800a98e:	f7fe fc42 	bl	8009216 <USBD_LL_DataInStage>
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fd7c 	bl	80094a6 <USBD_LL_SOF>
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	79db      	ldrb	r3, [r3, #7]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
 800a9ce:	e008      	b.n	800a9e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	79db      	ldrb	r3, [r3, #7]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d102      	bne.n	800a9de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
 800a9dc:	e001      	b.n	800a9e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9de:	f7f7 ff8f 	bl	8002900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9e8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fd16 	bl	800941e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fcbe 	bl	800937a <USBD_LL_Reset>
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fd11 	bl	800943e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7adb      	ldrb	r3, [r3, #11]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa3c:	4b04      	ldr	r3, [pc, #16]	@ (800aa50 <HAL_PCD_SuspendCallback+0x48>)
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	4a03      	ldr	r2, [pc, #12]	@ (800aa50 <HAL_PCD_SuspendCallback+0x48>)
 800aa42:	f043 0306 	orr.w	r3, r3, #6
 800aa46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	e000ed00 	.word	0xe000ed00

0800aa54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fd07 	bl	8009476 <USBD_LL_Resume>
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aa82:	78fa      	ldrb	r2, [r7, #3]
 800aa84:	4611      	mov	r1, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fd5f 	bl	800954a <USBD_LL_IsoOUTIncomplete>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe fd1b 	bl	80094e6 <USBD_LL_IsoINIncomplete>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fd71 	bl	80095ae <USBD_LL_DevConnected>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd6e 	bl	80095c4 <USBD_LL_DevDisconnected>
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d13c      	bne.n	800ab7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab00:	4a20      	ldr	r2, [pc, #128]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a1e      	ldr	r2, [pc, #120]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab10:	4b1c      	ldr	r3, [pc, #112]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ab16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ab18:	4b1a      	ldr	r3, [pc, #104]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab1a:	2204      	movs	r2, #4
 800ab1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab1e:	4b19      	ldr	r3, [pc, #100]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab20:	2202      	movs	r2, #2
 800ab22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab24:	4b17      	ldr	r3, [pc, #92]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab2a:	4b16      	ldr	r3, [pc, #88]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab30:	4b14      	ldr	r3, [pc, #80]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab36:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab3c:	4b11      	ldr	r3, [pc, #68]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab42:	4b10      	ldr	r3, [pc, #64]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab48:	4b0e      	ldr	r3, [pc, #56]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab4e:	480d      	ldr	r0, [pc, #52]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab50:	f7f9 fbe1 	bl	8004316 <HAL_PCD_Init>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab5a:	f7f7 fed1 	bl	8002900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab5e:	2180      	movs	r1, #128	@ 0x80
 800ab60:	4808      	ldr	r0, [pc, #32]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab62:	f7fa fe0e 	bl	8005782 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab66:	2240      	movs	r2, #64	@ 0x40
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4806      	ldr	r0, [pc, #24]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab6c:	f7fa fdc2 	bl	80056f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab70:	2280      	movs	r2, #128	@ 0x80
 800ab72:	2101      	movs	r1, #1
 800ab74:	4803      	ldr	r0, [pc, #12]	@ (800ab84 <USBD_LL_Init+0x94>)
 800ab76:	f7fa fdbd 	bl	80056f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20001a28 	.word	0x20001a28

0800ab88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7f9 fcc8 	bl	8004534 <HAL_PCD_Start>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f942 	bl	800ae34 <USBD_Get_USB_Status>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	4608      	mov	r0, r1
 800abc8:	4611      	mov	r1, r2
 800abca:	461a      	mov	r2, r3
 800abcc:	4603      	mov	r3, r0
 800abce:	70fb      	strb	r3, [r7, #3]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70bb      	strb	r3, [r7, #2]
 800abd4:	4613      	mov	r3, r2
 800abd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abe6:	78bb      	ldrb	r3, [r7, #2]
 800abe8:	883a      	ldrh	r2, [r7, #0]
 800abea:	78f9      	ldrb	r1, [r7, #3]
 800abec:	f7fa f99c 	bl	8004f28 <HAL_PCD_EP_Open>
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 f91c 	bl	800ae34 <USBD_Get_USB_Status>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac24:	78fa      	ldrb	r2, [r7, #3]
 800ac26:	4611      	mov	r1, r2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fa f9e7 	bl	8004ffc <HAL_PCD_EP_Close>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 f8fd 	bl	800ae34 <USBD_Get_USB_Status>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac62:	78fa      	ldrb	r2, [r7, #3]
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fa fa9f 	bl	80051aa <HAL_PCD_EP_SetStall>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 f8de 	bl	800ae34 <USBD_Get_USB_Status>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aca0:	78fa      	ldrb	r2, [r7, #3]
 800aca2:	4611      	mov	r1, r2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fa fae3 	bl	8005270 <HAL_PCD_EP_ClrStall>
 800acaa:	4603      	mov	r3, r0
 800acac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f8bf 	bl	800ae34 <USBD_Get_USB_Status>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acba:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	da0b      	bge.n	800acf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ace6:	68f9      	ldr	r1, [r7, #12]
 800ace8:	4613      	mov	r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	4413      	add	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	3316      	adds	r3, #22
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	e00b      	b.n	800ad10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	4613      	mov	r3, r2
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ad0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad36:	78fa      	ldrb	r2, [r7, #3]
 800ad38:	4611      	mov	r1, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fa f8d0 	bl	8004ee0 <HAL_PCD_SetAddress>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 f874 	bl	800ae34 <USBD_Get_USB_Status>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
 800ad66:	460b      	mov	r3, r1
 800ad68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad78:	7af9      	ldrb	r1, [r7, #11]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	f7fa f9da 	bl	8005136 <HAL_PCD_EP_Transmit>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f853 	bl	800ae34 <USBD_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	607a      	str	r2, [r7, #4]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	460b      	mov	r3, r1
 800adaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800adba:	7af9      	ldrb	r1, [r7, #11]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	f7fa f966 	bl	8005090 <HAL_PCD_EP_Receive>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f832 	bl	800ae34 <USBD_Get_USB_Status>
 800add0:	4603      	mov	r3, r0
 800add2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800add4:	7dbb      	ldrb	r3, [r7, #22]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	460b      	mov	r3, r1
 800ade8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adf0:	78fa      	ldrb	r2, [r7, #3]
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fa f986 	bl	8005106 <HAL_PCD_EP_GetRxCount>
 800adfa:	4603      	mov	r3, r0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae0c:	4b03      	ldr	r3, [pc, #12]	@ (800ae1c <USBD_static_malloc+0x18>)
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20001f0c 	.word	0x20001f0c

0800ae20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]

}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d817      	bhi.n	800ae78 <USBD_Get_USB_Status+0x44>
 800ae48:	a201      	add	r2, pc, #4	@ (adr r2, 800ae50 <USBD_Get_USB_Status+0x1c>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800ae61 	.word	0x0800ae61
 800ae54:	0800ae67 	.word	0x0800ae67
 800ae58:	0800ae6d 	.word	0x0800ae6d
 800ae5c:	0800ae73 	.word	0x0800ae73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	73fb      	strb	r3, [r7, #15]
    break;
 800ae64:	e00b      	b.n	800ae7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6a:	e008      	b.n	800ae7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae70:	e005      	b.n	800ae7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae72:	2303      	movs	r3, #3
 800ae74:	73fb      	strb	r3, [r7, #15]
    break;
 800ae76:	e002      	b.n	800ae7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7c:	bf00      	nop
  }
  return usb_status;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <__cvt>:
 800ae8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	ec57 6b10 	vmov	r6, r7, d0
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4619      	mov	r1, r3
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	bfbb      	ittet	lt
 800ae9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aea2:	461f      	movlt	r7, r3
 800aea4:	2300      	movge	r3, #0
 800aea6:	232d      	movlt	r3, #45	@ 0x2d
 800aea8:	700b      	strb	r3, [r1, #0]
 800aeaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aeb0:	4691      	mov	r9, r2
 800aeb2:	f023 0820 	bic.w	r8, r3, #32
 800aeb6:	bfbc      	itt	lt
 800aeb8:	4632      	movlt	r2, r6
 800aeba:	4616      	movlt	r6, r2
 800aebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aec0:	d005      	beq.n	800aece <__cvt+0x42>
 800aec2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aec6:	d100      	bne.n	800aeca <__cvt+0x3e>
 800aec8:	3401      	adds	r4, #1
 800aeca:	2102      	movs	r1, #2
 800aecc:	e000      	b.n	800aed0 <__cvt+0x44>
 800aece:	2103      	movs	r1, #3
 800aed0:	ab03      	add	r3, sp, #12
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	ab02      	add	r3, sp, #8
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	ec47 6b10 	vmov	d0, r6, r7
 800aedc:	4653      	mov	r3, sl
 800aede:	4622      	mov	r2, r4
 800aee0:	f000 ff46 	bl	800bd70 <_dtoa_r>
 800aee4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aee8:	4605      	mov	r5, r0
 800aeea:	d119      	bne.n	800af20 <__cvt+0x94>
 800aeec:	f019 0f01 	tst.w	r9, #1
 800aef0:	d00e      	beq.n	800af10 <__cvt+0x84>
 800aef2:	eb00 0904 	add.w	r9, r0, r4
 800aef6:	2200      	movs	r2, #0
 800aef8:	2300      	movs	r3, #0
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af02:	b108      	cbz	r0, 800af08 <__cvt+0x7c>
 800af04:	f8cd 900c 	str.w	r9, [sp, #12]
 800af08:	2230      	movs	r2, #48	@ 0x30
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	454b      	cmp	r3, r9
 800af0e:	d31e      	bcc.n	800af4e <__cvt+0xc2>
 800af10:	9b03      	ldr	r3, [sp, #12]
 800af12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af14:	1b5b      	subs	r3, r3, r5
 800af16:	4628      	mov	r0, r5
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	b004      	add	sp, #16
 800af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af24:	eb00 0904 	add.w	r9, r0, r4
 800af28:	d1e5      	bne.n	800aef6 <__cvt+0x6a>
 800af2a:	7803      	ldrb	r3, [r0, #0]
 800af2c:	2b30      	cmp	r3, #48	@ 0x30
 800af2e:	d10a      	bne.n	800af46 <__cvt+0xba>
 800af30:	2200      	movs	r2, #0
 800af32:	2300      	movs	r3, #0
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af3c:	b918      	cbnz	r0, 800af46 <__cvt+0xba>
 800af3e:	f1c4 0401 	rsb	r4, r4, #1
 800af42:	f8ca 4000 	str.w	r4, [sl]
 800af46:	f8da 3000 	ldr.w	r3, [sl]
 800af4a:	4499      	add	r9, r3
 800af4c:	e7d3      	b.n	800aef6 <__cvt+0x6a>
 800af4e:	1c59      	adds	r1, r3, #1
 800af50:	9103      	str	r1, [sp, #12]
 800af52:	701a      	strb	r2, [r3, #0]
 800af54:	e7d9      	b.n	800af0a <__cvt+0x7e>

0800af56 <__exponent>:
 800af56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af58:	2900      	cmp	r1, #0
 800af5a:	bfba      	itte	lt
 800af5c:	4249      	neglt	r1, r1
 800af5e:	232d      	movlt	r3, #45	@ 0x2d
 800af60:	232b      	movge	r3, #43	@ 0x2b
 800af62:	2909      	cmp	r1, #9
 800af64:	7002      	strb	r2, [r0, #0]
 800af66:	7043      	strb	r3, [r0, #1]
 800af68:	dd29      	ble.n	800afbe <__exponent+0x68>
 800af6a:	f10d 0307 	add.w	r3, sp, #7
 800af6e:	461d      	mov	r5, r3
 800af70:	270a      	movs	r7, #10
 800af72:	461a      	mov	r2, r3
 800af74:	fbb1 f6f7 	udiv	r6, r1, r7
 800af78:	fb07 1416 	mls	r4, r7, r6, r1
 800af7c:	3430      	adds	r4, #48	@ 0x30
 800af7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af82:	460c      	mov	r4, r1
 800af84:	2c63      	cmp	r4, #99	@ 0x63
 800af86:	f103 33ff 	add.w	r3, r3, #4294967295
 800af8a:	4631      	mov	r1, r6
 800af8c:	dcf1      	bgt.n	800af72 <__exponent+0x1c>
 800af8e:	3130      	adds	r1, #48	@ 0x30
 800af90:	1e94      	subs	r4, r2, #2
 800af92:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af96:	1c41      	adds	r1, r0, #1
 800af98:	4623      	mov	r3, r4
 800af9a:	42ab      	cmp	r3, r5
 800af9c:	d30a      	bcc.n	800afb4 <__exponent+0x5e>
 800af9e:	f10d 0309 	add.w	r3, sp, #9
 800afa2:	1a9b      	subs	r3, r3, r2
 800afa4:	42ac      	cmp	r4, r5
 800afa6:	bf88      	it	hi
 800afa8:	2300      	movhi	r3, #0
 800afaa:	3302      	adds	r3, #2
 800afac:	4403      	add	r3, r0
 800afae:	1a18      	subs	r0, r3, r0
 800afb0:	b003      	add	sp, #12
 800afb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800afb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800afbc:	e7ed      	b.n	800af9a <__exponent+0x44>
 800afbe:	2330      	movs	r3, #48	@ 0x30
 800afc0:	3130      	adds	r1, #48	@ 0x30
 800afc2:	7083      	strb	r3, [r0, #2]
 800afc4:	70c1      	strb	r1, [r0, #3]
 800afc6:	1d03      	adds	r3, r0, #4
 800afc8:	e7f1      	b.n	800afae <__exponent+0x58>
	...

0800afcc <_printf_float>:
 800afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	b08d      	sub	sp, #52	@ 0x34
 800afd2:	460c      	mov	r4, r1
 800afd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800afd8:	4616      	mov	r6, r2
 800afda:	461f      	mov	r7, r3
 800afdc:	4605      	mov	r5, r0
 800afde:	f000 fdc5 	bl	800bb6c <_localeconv_r>
 800afe2:	6803      	ldr	r3, [r0, #0]
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f5 f942 	bl	8000270 <strlen>
 800afec:	2300      	movs	r3, #0
 800afee:	930a      	str	r3, [sp, #40]	@ 0x28
 800aff0:	f8d8 3000 	ldr.w	r3, [r8]
 800aff4:	9005      	str	r0, [sp, #20]
 800aff6:	3307      	adds	r3, #7
 800aff8:	f023 0307 	bic.w	r3, r3, #7
 800affc:	f103 0208 	add.w	r2, r3, #8
 800b000:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b004:	f8d4 b000 	ldr.w	fp, [r4]
 800b008:	f8c8 2000 	str.w	r2, [r8]
 800b00c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b010:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b014:	9307      	str	r3, [sp, #28]
 800b016:	f8cd 8018 	str.w	r8, [sp, #24]
 800b01a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b022:	4b9c      	ldr	r3, [pc, #624]	@ (800b294 <_printf_float+0x2c8>)
 800b024:	f04f 32ff 	mov.w	r2, #4294967295
 800b028:	f7f5 fd80 	bl	8000b2c <__aeabi_dcmpun>
 800b02c:	bb70      	cbnz	r0, 800b08c <_printf_float+0xc0>
 800b02e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b032:	4b98      	ldr	r3, [pc, #608]	@ (800b294 <_printf_float+0x2c8>)
 800b034:	f04f 32ff 	mov.w	r2, #4294967295
 800b038:	f7f5 fd5a 	bl	8000af0 <__aeabi_dcmple>
 800b03c:	bb30      	cbnz	r0, 800b08c <_printf_float+0xc0>
 800b03e:	2200      	movs	r2, #0
 800b040:	2300      	movs	r3, #0
 800b042:	4640      	mov	r0, r8
 800b044:	4649      	mov	r1, r9
 800b046:	f7f5 fd49 	bl	8000adc <__aeabi_dcmplt>
 800b04a:	b110      	cbz	r0, 800b052 <_printf_float+0x86>
 800b04c:	232d      	movs	r3, #45	@ 0x2d
 800b04e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b052:	4a91      	ldr	r2, [pc, #580]	@ (800b298 <_printf_float+0x2cc>)
 800b054:	4b91      	ldr	r3, [pc, #580]	@ (800b29c <_printf_float+0x2d0>)
 800b056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b05a:	bf8c      	ite	hi
 800b05c:	4690      	movhi	r8, r2
 800b05e:	4698      	movls	r8, r3
 800b060:	2303      	movs	r3, #3
 800b062:	6123      	str	r3, [r4, #16]
 800b064:	f02b 0304 	bic.w	r3, fp, #4
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	f04f 0900 	mov.w	r9, #0
 800b06e:	9700      	str	r7, [sp, #0]
 800b070:	4633      	mov	r3, r6
 800b072:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f9d2 	bl	800b420 <_printf_common>
 800b07c:	3001      	adds	r0, #1
 800b07e:	f040 808d 	bne.w	800b19c <_printf_float+0x1d0>
 800b082:	f04f 30ff 	mov.w	r0, #4294967295
 800b086:	b00d      	add	sp, #52	@ 0x34
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08c:	4642      	mov	r2, r8
 800b08e:	464b      	mov	r3, r9
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fd4a 	bl	8000b2c <__aeabi_dcmpun>
 800b098:	b140      	cbz	r0, 800b0ac <_printf_float+0xe0>
 800b09a:	464b      	mov	r3, r9
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bfbc      	itt	lt
 800b0a0:	232d      	movlt	r3, #45	@ 0x2d
 800b0a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b0a6:	4a7e      	ldr	r2, [pc, #504]	@ (800b2a0 <_printf_float+0x2d4>)
 800b0a8:	4b7e      	ldr	r3, [pc, #504]	@ (800b2a4 <_printf_float+0x2d8>)
 800b0aa:	e7d4      	b.n	800b056 <_printf_float+0x8a>
 800b0ac:	6863      	ldr	r3, [r4, #4]
 800b0ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b0b2:	9206      	str	r2, [sp, #24]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	d13b      	bne.n	800b130 <_printf_float+0x164>
 800b0b8:	2306      	movs	r3, #6
 800b0ba:	6063      	str	r3, [r4, #4]
 800b0bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6022      	str	r2, [r4, #0]
 800b0c4:	9303      	str	r3, [sp, #12]
 800b0c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b0cc:	ab09      	add	r3, sp, #36	@ 0x24
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	6861      	ldr	r1, [r4, #4]
 800b0d2:	ec49 8b10 	vmov	d0, r8, r9
 800b0d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7ff fed6 	bl	800ae8c <__cvt>
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0e4:	2b47      	cmp	r3, #71	@ 0x47
 800b0e6:	4680      	mov	r8, r0
 800b0e8:	d129      	bne.n	800b13e <_printf_float+0x172>
 800b0ea:	1cc8      	adds	r0, r1, #3
 800b0ec:	db02      	blt.n	800b0f4 <_printf_float+0x128>
 800b0ee:	6863      	ldr	r3, [r4, #4]
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	dd41      	ble.n	800b178 <_printf_float+0x1ac>
 800b0f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b0f8:	fa5f fa8a 	uxtb.w	sl, sl
 800b0fc:	3901      	subs	r1, #1
 800b0fe:	4652      	mov	r2, sl
 800b100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b104:	9109      	str	r1, [sp, #36]	@ 0x24
 800b106:	f7ff ff26 	bl	800af56 <__exponent>
 800b10a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b10c:	1813      	adds	r3, r2, r0
 800b10e:	2a01      	cmp	r2, #1
 800b110:	4681      	mov	r9, r0
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	dc02      	bgt.n	800b11c <_printf_float+0x150>
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	07d2      	lsls	r2, r2, #31
 800b11a:	d501      	bpl.n	800b120 <_printf_float+0x154>
 800b11c:	3301      	adds	r3, #1
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0a2      	beq.n	800b06e <_printf_float+0xa2>
 800b128:	232d      	movs	r3, #45	@ 0x2d
 800b12a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b12e:	e79e      	b.n	800b06e <_printf_float+0xa2>
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	2a47      	cmp	r2, #71	@ 0x47
 800b134:	d1c2      	bne.n	800b0bc <_printf_float+0xf0>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1c0      	bne.n	800b0bc <_printf_float+0xf0>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e7bd      	b.n	800b0ba <_printf_float+0xee>
 800b13e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b142:	d9db      	bls.n	800b0fc <_printf_float+0x130>
 800b144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b148:	d118      	bne.n	800b17c <_printf_float+0x1b0>
 800b14a:	2900      	cmp	r1, #0
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	dd0b      	ble.n	800b168 <_printf_float+0x19c>
 800b150:	6121      	str	r1, [r4, #16]
 800b152:	b913      	cbnz	r3, 800b15a <_printf_float+0x18e>
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	07d0      	lsls	r0, r2, #31
 800b158:	d502      	bpl.n	800b160 <_printf_float+0x194>
 800b15a:	3301      	adds	r3, #1
 800b15c:	440b      	add	r3, r1
 800b15e:	6123      	str	r3, [r4, #16]
 800b160:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b162:	f04f 0900 	mov.w	r9, #0
 800b166:	e7db      	b.n	800b120 <_printf_float+0x154>
 800b168:	b913      	cbnz	r3, 800b170 <_printf_float+0x1a4>
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	07d2      	lsls	r2, r2, #31
 800b16e:	d501      	bpl.n	800b174 <_printf_float+0x1a8>
 800b170:	3302      	adds	r3, #2
 800b172:	e7f4      	b.n	800b15e <_printf_float+0x192>
 800b174:	2301      	movs	r3, #1
 800b176:	e7f2      	b.n	800b15e <_printf_float+0x192>
 800b178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b17e:	4299      	cmp	r1, r3
 800b180:	db05      	blt.n	800b18e <_printf_float+0x1c2>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	6121      	str	r1, [r4, #16]
 800b186:	07d8      	lsls	r0, r3, #31
 800b188:	d5ea      	bpl.n	800b160 <_printf_float+0x194>
 800b18a:	1c4b      	adds	r3, r1, #1
 800b18c:	e7e7      	b.n	800b15e <_printf_float+0x192>
 800b18e:	2900      	cmp	r1, #0
 800b190:	bfd4      	ite	le
 800b192:	f1c1 0202 	rsble	r2, r1, #2
 800b196:	2201      	movgt	r2, #1
 800b198:	4413      	add	r3, r2
 800b19a:	e7e0      	b.n	800b15e <_printf_float+0x192>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	055a      	lsls	r2, r3, #21
 800b1a0:	d407      	bmi.n	800b1b2 <_printf_float+0x1e6>
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b8      	blx	r7
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d12b      	bne.n	800b208 <_printf_float+0x23c>
 800b1b0:	e767      	b.n	800b082 <_printf_float+0xb6>
 800b1b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1b6:	f240 80dd 	bls.w	800b374 <_printf_float+0x3a8>
 800b1ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f7f5 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d033      	beq.n	800b232 <_printf_float+0x266>
 800b1ca:	4a37      	ldr	r2, [pc, #220]	@ (800b2a8 <_printf_float+0x2dc>)
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b8      	blx	r7
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f43f af54 	beq.w	800b082 <_printf_float+0xb6>
 800b1da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b1de:	4543      	cmp	r3, r8
 800b1e0:	db02      	blt.n	800b1e8 <_printf_float+0x21c>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	07d8      	lsls	r0, r3, #31
 800b1e6:	d50f      	bpl.n	800b208 <_printf_float+0x23c>
 800b1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f af45 	beq.w	800b082 <_printf_float+0xb6>
 800b1f8:	f04f 0900 	mov.w	r9, #0
 800b1fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b200:	f104 0a1a 	add.w	sl, r4, #26
 800b204:	45c8      	cmp	r8, r9
 800b206:	dc09      	bgt.n	800b21c <_printf_float+0x250>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	079b      	lsls	r3, r3, #30
 800b20c:	f100 8103 	bmi.w	800b416 <_printf_float+0x44a>
 800b210:	68e0      	ldr	r0, [r4, #12]
 800b212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b214:	4298      	cmp	r0, r3
 800b216:	bfb8      	it	lt
 800b218:	4618      	movlt	r0, r3
 800b21a:	e734      	b.n	800b086 <_printf_float+0xba>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4652      	mov	r2, sl
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	f43f af2b 	beq.w	800b082 <_printf_float+0xb6>
 800b22c:	f109 0901 	add.w	r9, r9, #1
 800b230:	e7e8      	b.n	800b204 <_printf_float+0x238>
 800b232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	dc39      	bgt.n	800b2ac <_printf_float+0x2e0>
 800b238:	4a1b      	ldr	r2, [pc, #108]	@ (800b2a8 <_printf_float+0x2dc>)
 800b23a:	2301      	movs	r3, #1
 800b23c:	4631      	mov	r1, r6
 800b23e:	4628      	mov	r0, r5
 800b240:	47b8      	blx	r7
 800b242:	3001      	adds	r0, #1
 800b244:	f43f af1d 	beq.w	800b082 <_printf_float+0xb6>
 800b248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b24c:	ea59 0303 	orrs.w	r3, r9, r3
 800b250:	d102      	bne.n	800b258 <_printf_float+0x28c>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	07d9      	lsls	r1, r3, #31
 800b256:	d5d7      	bpl.n	800b208 <_printf_float+0x23c>
 800b258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b25c:	4631      	mov	r1, r6
 800b25e:	4628      	mov	r0, r5
 800b260:	47b8      	blx	r7
 800b262:	3001      	adds	r0, #1
 800b264:	f43f af0d 	beq.w	800b082 <_printf_float+0xb6>
 800b268:	f04f 0a00 	mov.w	sl, #0
 800b26c:	f104 0b1a 	add.w	fp, r4, #26
 800b270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b272:	425b      	negs	r3, r3
 800b274:	4553      	cmp	r3, sl
 800b276:	dc01      	bgt.n	800b27c <_printf_float+0x2b0>
 800b278:	464b      	mov	r3, r9
 800b27a:	e793      	b.n	800b1a4 <_printf_float+0x1d8>
 800b27c:	2301      	movs	r3, #1
 800b27e:	465a      	mov	r2, fp
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f aefb 	beq.w	800b082 <_printf_float+0xb6>
 800b28c:	f10a 0a01 	add.w	sl, sl, #1
 800b290:	e7ee      	b.n	800b270 <_printf_float+0x2a4>
 800b292:	bf00      	nop
 800b294:	7fefffff 	.word	0x7fefffff
 800b298:	0800e540 	.word	0x0800e540
 800b29c:	0800e53c 	.word	0x0800e53c
 800b2a0:	0800e548 	.word	0x0800e548
 800b2a4:	0800e544 	.word	0x0800e544
 800b2a8:	0800e54c 	.word	0x0800e54c
 800b2ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2b2:	4553      	cmp	r3, sl
 800b2b4:	bfa8      	it	ge
 800b2b6:	4653      	movge	r3, sl
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	4699      	mov	r9, r3
 800b2bc:	dc36      	bgt.n	800b32c <_printf_float+0x360>
 800b2be:	f04f 0b00 	mov.w	fp, #0
 800b2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2c6:	f104 021a 	add.w	r2, r4, #26
 800b2ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2cc:	9306      	str	r3, [sp, #24]
 800b2ce:	eba3 0309 	sub.w	r3, r3, r9
 800b2d2:	455b      	cmp	r3, fp
 800b2d4:	dc31      	bgt.n	800b33a <_printf_float+0x36e>
 800b2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d8:	459a      	cmp	sl, r3
 800b2da:	dc3a      	bgt.n	800b352 <_printf_float+0x386>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	07da      	lsls	r2, r3, #31
 800b2e0:	d437      	bmi.n	800b352 <_printf_float+0x386>
 800b2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e4:	ebaa 0903 	sub.w	r9, sl, r3
 800b2e8:	9b06      	ldr	r3, [sp, #24]
 800b2ea:	ebaa 0303 	sub.w	r3, sl, r3
 800b2ee:	4599      	cmp	r9, r3
 800b2f0:	bfa8      	it	ge
 800b2f2:	4699      	movge	r9, r3
 800b2f4:	f1b9 0f00 	cmp.w	r9, #0
 800b2f8:	dc33      	bgt.n	800b362 <_printf_float+0x396>
 800b2fa:	f04f 0800 	mov.w	r8, #0
 800b2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b302:	f104 0b1a 	add.w	fp, r4, #26
 800b306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b308:	ebaa 0303 	sub.w	r3, sl, r3
 800b30c:	eba3 0309 	sub.w	r3, r3, r9
 800b310:	4543      	cmp	r3, r8
 800b312:	f77f af79 	ble.w	800b208 <_printf_float+0x23c>
 800b316:	2301      	movs	r3, #1
 800b318:	465a      	mov	r2, fp
 800b31a:	4631      	mov	r1, r6
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b8      	blx	r7
 800b320:	3001      	adds	r0, #1
 800b322:	f43f aeae 	beq.w	800b082 <_printf_float+0xb6>
 800b326:	f108 0801 	add.w	r8, r8, #1
 800b32a:	e7ec      	b.n	800b306 <_printf_float+0x33a>
 800b32c:	4642      	mov	r2, r8
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	d1c2      	bne.n	800b2be <_printf_float+0x2f2>
 800b338:	e6a3      	b.n	800b082 <_printf_float+0xb6>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4631      	mov	r1, r6
 800b33e:	4628      	mov	r0, r5
 800b340:	9206      	str	r2, [sp, #24]
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f ae9c 	beq.w	800b082 <_printf_float+0xb6>
 800b34a:	9a06      	ldr	r2, [sp, #24]
 800b34c:	f10b 0b01 	add.w	fp, fp, #1
 800b350:	e7bb      	b.n	800b2ca <_printf_float+0x2fe>
 800b352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	d1c0      	bne.n	800b2e2 <_printf_float+0x316>
 800b360:	e68f      	b.n	800b082 <_printf_float+0xb6>
 800b362:	9a06      	ldr	r2, [sp, #24]
 800b364:	464b      	mov	r3, r9
 800b366:	4442      	add	r2, r8
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	d1c3      	bne.n	800b2fa <_printf_float+0x32e>
 800b372:	e686      	b.n	800b082 <_printf_float+0xb6>
 800b374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b378:	f1ba 0f01 	cmp.w	sl, #1
 800b37c:	dc01      	bgt.n	800b382 <_printf_float+0x3b6>
 800b37e:	07db      	lsls	r3, r3, #31
 800b380:	d536      	bpl.n	800b3f0 <_printf_float+0x424>
 800b382:	2301      	movs	r3, #1
 800b384:	4642      	mov	r2, r8
 800b386:	4631      	mov	r1, r6
 800b388:	4628      	mov	r0, r5
 800b38a:	47b8      	blx	r7
 800b38c:	3001      	adds	r0, #1
 800b38e:	f43f ae78 	beq.w	800b082 <_printf_float+0xb6>
 800b392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	f43f ae70 	beq.w	800b082 <_printf_float+0xb6>
 800b3a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ae:	f7f5 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b2:	b9c0      	cbnz	r0, 800b3e6 <_printf_float+0x41a>
 800b3b4:	4653      	mov	r3, sl
 800b3b6:	f108 0201 	add.w	r2, r8, #1
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d10c      	bne.n	800b3de <_printf_float+0x412>
 800b3c4:	e65d      	b.n	800b082 <_printf_float+0xb6>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	465a      	mov	r2, fp
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	47b8      	blx	r7
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f43f ae56 	beq.w	800b082 <_printf_float+0xb6>
 800b3d6:	f108 0801 	add.w	r8, r8, #1
 800b3da:	45d0      	cmp	r8, sl
 800b3dc:	dbf3      	blt.n	800b3c6 <_printf_float+0x3fa>
 800b3de:	464b      	mov	r3, r9
 800b3e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b3e4:	e6df      	b.n	800b1a6 <_printf_float+0x1da>
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	f104 0b1a 	add.w	fp, r4, #26
 800b3ee:	e7f4      	b.n	800b3da <_printf_float+0x40e>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4642      	mov	r2, r8
 800b3f4:	e7e1      	b.n	800b3ba <_printf_float+0x3ee>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	464a      	mov	r2, r9
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b8      	blx	r7
 800b400:	3001      	adds	r0, #1
 800b402:	f43f ae3e 	beq.w	800b082 <_printf_float+0xb6>
 800b406:	f108 0801 	add.w	r8, r8, #1
 800b40a:	68e3      	ldr	r3, [r4, #12]
 800b40c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b40e:	1a5b      	subs	r3, r3, r1
 800b410:	4543      	cmp	r3, r8
 800b412:	dcf0      	bgt.n	800b3f6 <_printf_float+0x42a>
 800b414:	e6fc      	b.n	800b210 <_printf_float+0x244>
 800b416:	f04f 0800 	mov.w	r8, #0
 800b41a:	f104 0919 	add.w	r9, r4, #25
 800b41e:	e7f4      	b.n	800b40a <_printf_float+0x43e>

0800b420 <_printf_common>:
 800b420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b424:	4616      	mov	r6, r2
 800b426:	4698      	mov	r8, r3
 800b428:	688a      	ldr	r2, [r1, #8]
 800b42a:	690b      	ldr	r3, [r1, #16]
 800b42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b430:	4293      	cmp	r3, r2
 800b432:	bfb8      	it	lt
 800b434:	4613      	movlt	r3, r2
 800b436:	6033      	str	r3, [r6, #0]
 800b438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b43c:	4607      	mov	r7, r0
 800b43e:	460c      	mov	r4, r1
 800b440:	b10a      	cbz	r2, 800b446 <_printf_common+0x26>
 800b442:	3301      	adds	r3, #1
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	0699      	lsls	r1, r3, #26
 800b44a:	bf42      	ittt	mi
 800b44c:	6833      	ldrmi	r3, [r6, #0]
 800b44e:	3302      	addmi	r3, #2
 800b450:	6033      	strmi	r3, [r6, #0]
 800b452:	6825      	ldr	r5, [r4, #0]
 800b454:	f015 0506 	ands.w	r5, r5, #6
 800b458:	d106      	bne.n	800b468 <_printf_common+0x48>
 800b45a:	f104 0a19 	add.w	sl, r4, #25
 800b45e:	68e3      	ldr	r3, [r4, #12]
 800b460:	6832      	ldr	r2, [r6, #0]
 800b462:	1a9b      	subs	r3, r3, r2
 800b464:	42ab      	cmp	r3, r5
 800b466:	dc26      	bgt.n	800b4b6 <_printf_common+0x96>
 800b468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b46c:	6822      	ldr	r2, [r4, #0]
 800b46e:	3b00      	subs	r3, #0
 800b470:	bf18      	it	ne
 800b472:	2301      	movne	r3, #1
 800b474:	0692      	lsls	r2, r2, #26
 800b476:	d42b      	bmi.n	800b4d0 <_printf_common+0xb0>
 800b478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b47c:	4641      	mov	r1, r8
 800b47e:	4638      	mov	r0, r7
 800b480:	47c8      	blx	r9
 800b482:	3001      	adds	r0, #1
 800b484:	d01e      	beq.n	800b4c4 <_printf_common+0xa4>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	6922      	ldr	r2, [r4, #16]
 800b48a:	f003 0306 	and.w	r3, r3, #6
 800b48e:	2b04      	cmp	r3, #4
 800b490:	bf02      	ittt	eq
 800b492:	68e5      	ldreq	r5, [r4, #12]
 800b494:	6833      	ldreq	r3, [r6, #0]
 800b496:	1aed      	subeq	r5, r5, r3
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	bf0c      	ite	eq
 800b49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4a0:	2500      	movne	r5, #0
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	bfc4      	itt	gt
 800b4a6:	1a9b      	subgt	r3, r3, r2
 800b4a8:	18ed      	addgt	r5, r5, r3
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	341a      	adds	r4, #26
 800b4ae:	42b5      	cmp	r5, r6
 800b4b0:	d11a      	bne.n	800b4e8 <_printf_common+0xc8>
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	e008      	b.n	800b4c8 <_printf_common+0xa8>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	4641      	mov	r1, r8
 800b4bc:	4638      	mov	r0, r7
 800b4be:	47c8      	blx	r9
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d103      	bne.n	800b4cc <_printf_common+0xac>
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	e7c6      	b.n	800b45e <_printf_common+0x3e>
 800b4d0:	18e1      	adds	r1, r4, r3
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	2030      	movs	r0, #48	@ 0x30
 800b4d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4da:	4422      	add	r2, r4
 800b4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4e4:	3302      	adds	r3, #2
 800b4e6:	e7c7      	b.n	800b478 <_printf_common+0x58>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	4641      	mov	r1, r8
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	47c8      	blx	r9
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d0e6      	beq.n	800b4c4 <_printf_common+0xa4>
 800b4f6:	3601      	adds	r6, #1
 800b4f8:	e7d9      	b.n	800b4ae <_printf_common+0x8e>
	...

0800b4fc <_printf_i>:
 800b4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b500:	7e0f      	ldrb	r7, [r1, #24]
 800b502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b504:	2f78      	cmp	r7, #120	@ 0x78
 800b506:	4691      	mov	r9, r2
 800b508:	4680      	mov	r8, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	469a      	mov	sl, r3
 800b50e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b512:	d807      	bhi.n	800b524 <_printf_i+0x28>
 800b514:	2f62      	cmp	r7, #98	@ 0x62
 800b516:	d80a      	bhi.n	800b52e <_printf_i+0x32>
 800b518:	2f00      	cmp	r7, #0
 800b51a:	f000 80d1 	beq.w	800b6c0 <_printf_i+0x1c4>
 800b51e:	2f58      	cmp	r7, #88	@ 0x58
 800b520:	f000 80b8 	beq.w	800b694 <_printf_i+0x198>
 800b524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b52c:	e03a      	b.n	800b5a4 <_printf_i+0xa8>
 800b52e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b532:	2b15      	cmp	r3, #21
 800b534:	d8f6      	bhi.n	800b524 <_printf_i+0x28>
 800b536:	a101      	add	r1, pc, #4	@ (adr r1, 800b53c <_printf_i+0x40>)
 800b538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b53c:	0800b595 	.word	0x0800b595
 800b540:	0800b5a9 	.word	0x0800b5a9
 800b544:	0800b525 	.word	0x0800b525
 800b548:	0800b525 	.word	0x0800b525
 800b54c:	0800b525 	.word	0x0800b525
 800b550:	0800b525 	.word	0x0800b525
 800b554:	0800b5a9 	.word	0x0800b5a9
 800b558:	0800b525 	.word	0x0800b525
 800b55c:	0800b525 	.word	0x0800b525
 800b560:	0800b525 	.word	0x0800b525
 800b564:	0800b525 	.word	0x0800b525
 800b568:	0800b6a7 	.word	0x0800b6a7
 800b56c:	0800b5d3 	.word	0x0800b5d3
 800b570:	0800b661 	.word	0x0800b661
 800b574:	0800b525 	.word	0x0800b525
 800b578:	0800b525 	.word	0x0800b525
 800b57c:	0800b6c9 	.word	0x0800b6c9
 800b580:	0800b525 	.word	0x0800b525
 800b584:	0800b5d3 	.word	0x0800b5d3
 800b588:	0800b525 	.word	0x0800b525
 800b58c:	0800b525 	.word	0x0800b525
 800b590:	0800b669 	.word	0x0800b669
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	1d1a      	adds	r2, r3, #4
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6032      	str	r2, [r6, #0]
 800b59c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e09c      	b.n	800b6e2 <_printf_i+0x1e6>
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	6820      	ldr	r0, [r4, #0]
 800b5ac:	1d19      	adds	r1, r3, #4
 800b5ae:	6031      	str	r1, [r6, #0]
 800b5b0:	0606      	lsls	r6, r0, #24
 800b5b2:	d501      	bpl.n	800b5b8 <_printf_i+0xbc>
 800b5b4:	681d      	ldr	r5, [r3, #0]
 800b5b6:	e003      	b.n	800b5c0 <_printf_i+0xc4>
 800b5b8:	0645      	lsls	r5, r0, #25
 800b5ba:	d5fb      	bpl.n	800b5b4 <_printf_i+0xb8>
 800b5bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5c0:	2d00      	cmp	r5, #0
 800b5c2:	da03      	bge.n	800b5cc <_printf_i+0xd0>
 800b5c4:	232d      	movs	r3, #45	@ 0x2d
 800b5c6:	426d      	negs	r5, r5
 800b5c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5cc:	4858      	ldr	r0, [pc, #352]	@ (800b730 <_printf_i+0x234>)
 800b5ce:	230a      	movs	r3, #10
 800b5d0:	e011      	b.n	800b5f6 <_printf_i+0xfa>
 800b5d2:	6821      	ldr	r1, [r4, #0]
 800b5d4:	6833      	ldr	r3, [r6, #0]
 800b5d6:	0608      	lsls	r0, r1, #24
 800b5d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5dc:	d402      	bmi.n	800b5e4 <_printf_i+0xe8>
 800b5de:	0649      	lsls	r1, r1, #25
 800b5e0:	bf48      	it	mi
 800b5e2:	b2ad      	uxthmi	r5, r5
 800b5e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5e6:	4852      	ldr	r0, [pc, #328]	@ (800b730 <_printf_i+0x234>)
 800b5e8:	6033      	str	r3, [r6, #0]
 800b5ea:	bf14      	ite	ne
 800b5ec:	230a      	movne	r3, #10
 800b5ee:	2308      	moveq	r3, #8
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5f6:	6866      	ldr	r6, [r4, #4]
 800b5f8:	60a6      	str	r6, [r4, #8]
 800b5fa:	2e00      	cmp	r6, #0
 800b5fc:	db05      	blt.n	800b60a <_printf_i+0x10e>
 800b5fe:	6821      	ldr	r1, [r4, #0]
 800b600:	432e      	orrs	r6, r5
 800b602:	f021 0104 	bic.w	r1, r1, #4
 800b606:	6021      	str	r1, [r4, #0]
 800b608:	d04b      	beq.n	800b6a2 <_printf_i+0x1a6>
 800b60a:	4616      	mov	r6, r2
 800b60c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b610:	fb03 5711 	mls	r7, r3, r1, r5
 800b614:	5dc7      	ldrb	r7, [r0, r7]
 800b616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b61a:	462f      	mov	r7, r5
 800b61c:	42bb      	cmp	r3, r7
 800b61e:	460d      	mov	r5, r1
 800b620:	d9f4      	bls.n	800b60c <_printf_i+0x110>
 800b622:	2b08      	cmp	r3, #8
 800b624:	d10b      	bne.n	800b63e <_printf_i+0x142>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	07df      	lsls	r7, r3, #31
 800b62a:	d508      	bpl.n	800b63e <_printf_i+0x142>
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	6861      	ldr	r1, [r4, #4]
 800b630:	4299      	cmp	r1, r3
 800b632:	bfde      	ittt	le
 800b634:	2330      	movle	r3, #48	@ 0x30
 800b636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b63a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b63e:	1b92      	subs	r2, r2, r6
 800b640:	6122      	str	r2, [r4, #16]
 800b642:	f8cd a000 	str.w	sl, [sp]
 800b646:	464b      	mov	r3, r9
 800b648:	aa03      	add	r2, sp, #12
 800b64a:	4621      	mov	r1, r4
 800b64c:	4640      	mov	r0, r8
 800b64e:	f7ff fee7 	bl	800b420 <_printf_common>
 800b652:	3001      	adds	r0, #1
 800b654:	d14a      	bne.n	800b6ec <_printf_i+0x1f0>
 800b656:	f04f 30ff 	mov.w	r0, #4294967295
 800b65a:	b004      	add	sp, #16
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	f043 0320 	orr.w	r3, r3, #32
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	4832      	ldr	r0, [pc, #200]	@ (800b734 <_printf_i+0x238>)
 800b66a:	2778      	movs	r7, #120	@ 0x78
 800b66c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	6831      	ldr	r1, [r6, #0]
 800b674:	061f      	lsls	r7, r3, #24
 800b676:	f851 5b04 	ldr.w	r5, [r1], #4
 800b67a:	d402      	bmi.n	800b682 <_printf_i+0x186>
 800b67c:	065f      	lsls	r7, r3, #25
 800b67e:	bf48      	it	mi
 800b680:	b2ad      	uxthmi	r5, r5
 800b682:	6031      	str	r1, [r6, #0]
 800b684:	07d9      	lsls	r1, r3, #31
 800b686:	bf44      	itt	mi
 800b688:	f043 0320 	orrmi.w	r3, r3, #32
 800b68c:	6023      	strmi	r3, [r4, #0]
 800b68e:	b11d      	cbz	r5, 800b698 <_printf_i+0x19c>
 800b690:	2310      	movs	r3, #16
 800b692:	e7ad      	b.n	800b5f0 <_printf_i+0xf4>
 800b694:	4826      	ldr	r0, [pc, #152]	@ (800b730 <_printf_i+0x234>)
 800b696:	e7e9      	b.n	800b66c <_printf_i+0x170>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	f023 0320 	bic.w	r3, r3, #32
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	e7f6      	b.n	800b690 <_printf_i+0x194>
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	e7bd      	b.n	800b622 <_printf_i+0x126>
 800b6a6:	6833      	ldr	r3, [r6, #0]
 800b6a8:	6825      	ldr	r5, [r4, #0]
 800b6aa:	6961      	ldr	r1, [r4, #20]
 800b6ac:	1d18      	adds	r0, r3, #4
 800b6ae:	6030      	str	r0, [r6, #0]
 800b6b0:	062e      	lsls	r6, r5, #24
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	d501      	bpl.n	800b6ba <_printf_i+0x1be>
 800b6b6:	6019      	str	r1, [r3, #0]
 800b6b8:	e002      	b.n	800b6c0 <_printf_i+0x1c4>
 800b6ba:	0668      	lsls	r0, r5, #25
 800b6bc:	d5fb      	bpl.n	800b6b6 <_printf_i+0x1ba>
 800b6be:	8019      	strh	r1, [r3, #0]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	e7bc      	b.n	800b642 <_printf_i+0x146>
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	6032      	str	r2, [r6, #0]
 800b6ce:	681e      	ldr	r6, [r3, #0]
 800b6d0:	6862      	ldr	r2, [r4, #4]
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f7f4 fd7b 	bl	80001d0 <memchr>
 800b6da:	b108      	cbz	r0, 800b6e0 <_printf_i+0x1e4>
 800b6dc:	1b80      	subs	r0, r0, r6
 800b6de:	6060      	str	r0, [r4, #4]
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	6123      	str	r3, [r4, #16]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6ea:	e7aa      	b.n	800b642 <_printf_i+0x146>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	4632      	mov	r2, r6
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	47d0      	blx	sl
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d0ad      	beq.n	800b656 <_printf_i+0x15a>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	079b      	lsls	r3, r3, #30
 800b6fe:	d413      	bmi.n	800b728 <_printf_i+0x22c>
 800b700:	68e0      	ldr	r0, [r4, #12]
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	4298      	cmp	r0, r3
 800b706:	bfb8      	it	lt
 800b708:	4618      	movlt	r0, r3
 800b70a:	e7a6      	b.n	800b65a <_printf_i+0x15e>
 800b70c:	2301      	movs	r3, #1
 800b70e:	4632      	mov	r2, r6
 800b710:	4649      	mov	r1, r9
 800b712:	4640      	mov	r0, r8
 800b714:	47d0      	blx	sl
 800b716:	3001      	adds	r0, #1
 800b718:	d09d      	beq.n	800b656 <_printf_i+0x15a>
 800b71a:	3501      	adds	r5, #1
 800b71c:	68e3      	ldr	r3, [r4, #12]
 800b71e:	9903      	ldr	r1, [sp, #12]
 800b720:	1a5b      	subs	r3, r3, r1
 800b722:	42ab      	cmp	r3, r5
 800b724:	dcf2      	bgt.n	800b70c <_printf_i+0x210>
 800b726:	e7eb      	b.n	800b700 <_printf_i+0x204>
 800b728:	2500      	movs	r5, #0
 800b72a:	f104 0619 	add.w	r6, r4, #25
 800b72e:	e7f5      	b.n	800b71c <_printf_i+0x220>
 800b730:	0800e54e 	.word	0x0800e54e
 800b734:	0800e55f 	.word	0x0800e55f

0800b738 <std>:
 800b738:	2300      	movs	r3, #0
 800b73a:	b510      	push	{r4, lr}
 800b73c:	4604      	mov	r4, r0
 800b73e:	e9c0 3300 	strd	r3, r3, [r0]
 800b742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b746:	6083      	str	r3, [r0, #8]
 800b748:	8181      	strh	r1, [r0, #12]
 800b74a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b74c:	81c2      	strh	r2, [r0, #14]
 800b74e:	6183      	str	r3, [r0, #24]
 800b750:	4619      	mov	r1, r3
 800b752:	2208      	movs	r2, #8
 800b754:	305c      	adds	r0, #92	@ 0x5c
 800b756:	f000 fa01 	bl	800bb5c <memset>
 800b75a:	4b0d      	ldr	r3, [pc, #52]	@ (800b790 <std+0x58>)
 800b75c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b75e:	4b0d      	ldr	r3, [pc, #52]	@ (800b794 <std+0x5c>)
 800b760:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b762:	4b0d      	ldr	r3, [pc, #52]	@ (800b798 <std+0x60>)
 800b764:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b766:	4b0d      	ldr	r3, [pc, #52]	@ (800b79c <std+0x64>)
 800b768:	6323      	str	r3, [r4, #48]	@ 0x30
 800b76a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <std+0x68>)
 800b76c:	6224      	str	r4, [r4, #32]
 800b76e:	429c      	cmp	r4, r3
 800b770:	d006      	beq.n	800b780 <std+0x48>
 800b772:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b776:	4294      	cmp	r4, r2
 800b778:	d002      	beq.n	800b780 <std+0x48>
 800b77a:	33d0      	adds	r3, #208	@ 0xd0
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d105      	bne.n	800b78c <std+0x54>
 800b780:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b788:	f000 ba64 	b.w	800bc54 <__retarget_lock_init_recursive>
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	bf00      	nop
 800b790:	0800b9ad 	.word	0x0800b9ad
 800b794:	0800b9cf 	.word	0x0800b9cf
 800b798:	0800ba07 	.word	0x0800ba07
 800b79c:	0800ba2b 	.word	0x0800ba2b
 800b7a0:	2000212c 	.word	0x2000212c

0800b7a4 <stdio_exit_handler>:
 800b7a4:	4a02      	ldr	r2, [pc, #8]	@ (800b7b0 <stdio_exit_handler+0xc>)
 800b7a6:	4903      	ldr	r1, [pc, #12]	@ (800b7b4 <stdio_exit_handler+0x10>)
 800b7a8:	4803      	ldr	r0, [pc, #12]	@ (800b7b8 <stdio_exit_handler+0x14>)
 800b7aa:	f000 b869 	b.w	800b880 <_fwalk_sglue>
 800b7ae:	bf00      	nop
 800b7b0:	20000124 	.word	0x20000124
 800b7b4:	0800d591 	.word	0x0800d591
 800b7b8:	20000134 	.word	0x20000134

0800b7bc <cleanup_stdio>:
 800b7bc:	6841      	ldr	r1, [r0, #4]
 800b7be:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f0 <cleanup_stdio+0x34>)
 800b7c0:	4299      	cmp	r1, r3
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	d001      	beq.n	800b7cc <cleanup_stdio+0x10>
 800b7c8:	f001 fee2 	bl	800d590 <_fflush_r>
 800b7cc:	68a1      	ldr	r1, [r4, #8]
 800b7ce:	4b09      	ldr	r3, [pc, #36]	@ (800b7f4 <cleanup_stdio+0x38>)
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	d002      	beq.n	800b7da <cleanup_stdio+0x1e>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f001 fedb 	bl	800d590 <_fflush_r>
 800b7da:	68e1      	ldr	r1, [r4, #12]
 800b7dc:	4b06      	ldr	r3, [pc, #24]	@ (800b7f8 <cleanup_stdio+0x3c>)
 800b7de:	4299      	cmp	r1, r3
 800b7e0:	d004      	beq.n	800b7ec <cleanup_stdio+0x30>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e8:	f001 bed2 	b.w	800d590 <_fflush_r>
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	bf00      	nop
 800b7f0:	2000212c 	.word	0x2000212c
 800b7f4:	20002194 	.word	0x20002194
 800b7f8:	200021fc 	.word	0x200021fc

0800b7fc <global_stdio_init.part.0>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b82c <global_stdio_init.part.0+0x30>)
 800b800:	4c0b      	ldr	r4, [pc, #44]	@ (800b830 <global_stdio_init.part.0+0x34>)
 800b802:	4a0c      	ldr	r2, [pc, #48]	@ (800b834 <global_stdio_init.part.0+0x38>)
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	4620      	mov	r0, r4
 800b808:	2200      	movs	r2, #0
 800b80a:	2104      	movs	r1, #4
 800b80c:	f7ff ff94 	bl	800b738 <std>
 800b810:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b814:	2201      	movs	r2, #1
 800b816:	2109      	movs	r1, #9
 800b818:	f7ff ff8e 	bl	800b738 <std>
 800b81c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b820:	2202      	movs	r2, #2
 800b822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b826:	2112      	movs	r1, #18
 800b828:	f7ff bf86 	b.w	800b738 <std>
 800b82c:	20002264 	.word	0x20002264
 800b830:	2000212c 	.word	0x2000212c
 800b834:	0800b7a5 	.word	0x0800b7a5

0800b838 <__sfp_lock_acquire>:
 800b838:	4801      	ldr	r0, [pc, #4]	@ (800b840 <__sfp_lock_acquire+0x8>)
 800b83a:	f000 ba0c 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800b83e:	bf00      	nop
 800b840:	2000226d 	.word	0x2000226d

0800b844 <__sfp_lock_release>:
 800b844:	4801      	ldr	r0, [pc, #4]	@ (800b84c <__sfp_lock_release+0x8>)
 800b846:	f000 ba07 	b.w	800bc58 <__retarget_lock_release_recursive>
 800b84a:	bf00      	nop
 800b84c:	2000226d 	.word	0x2000226d

0800b850 <__sinit>:
 800b850:	b510      	push	{r4, lr}
 800b852:	4604      	mov	r4, r0
 800b854:	f7ff fff0 	bl	800b838 <__sfp_lock_acquire>
 800b858:	6a23      	ldr	r3, [r4, #32]
 800b85a:	b11b      	cbz	r3, 800b864 <__sinit+0x14>
 800b85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b860:	f7ff bff0 	b.w	800b844 <__sfp_lock_release>
 800b864:	4b04      	ldr	r3, [pc, #16]	@ (800b878 <__sinit+0x28>)
 800b866:	6223      	str	r3, [r4, #32]
 800b868:	4b04      	ldr	r3, [pc, #16]	@ (800b87c <__sinit+0x2c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1f5      	bne.n	800b85c <__sinit+0xc>
 800b870:	f7ff ffc4 	bl	800b7fc <global_stdio_init.part.0>
 800b874:	e7f2      	b.n	800b85c <__sinit+0xc>
 800b876:	bf00      	nop
 800b878:	0800b7bd 	.word	0x0800b7bd
 800b87c:	20002264 	.word	0x20002264

0800b880 <_fwalk_sglue>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	4607      	mov	r7, r0
 800b886:	4688      	mov	r8, r1
 800b888:	4614      	mov	r4, r2
 800b88a:	2600      	movs	r6, #0
 800b88c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b890:	f1b9 0901 	subs.w	r9, r9, #1
 800b894:	d505      	bpl.n	800b8a2 <_fwalk_sglue+0x22>
 800b896:	6824      	ldr	r4, [r4, #0]
 800b898:	2c00      	cmp	r4, #0
 800b89a:	d1f7      	bne.n	800b88c <_fwalk_sglue+0xc>
 800b89c:	4630      	mov	r0, r6
 800b89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d907      	bls.n	800b8b8 <_fwalk_sglue+0x38>
 800b8a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	d003      	beq.n	800b8b8 <_fwalk_sglue+0x38>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	47c0      	blx	r8
 800b8b6:	4306      	orrs	r6, r0
 800b8b8:	3568      	adds	r5, #104	@ 0x68
 800b8ba:	e7e9      	b.n	800b890 <_fwalk_sglue+0x10>

0800b8bc <iprintf>:
 800b8bc:	b40f      	push	{r0, r1, r2, r3}
 800b8be:	b507      	push	{r0, r1, r2, lr}
 800b8c0:	4906      	ldr	r1, [pc, #24]	@ (800b8dc <iprintf+0x20>)
 800b8c2:	ab04      	add	r3, sp, #16
 800b8c4:	6808      	ldr	r0, [r1, #0]
 800b8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ca:	6881      	ldr	r1, [r0, #8]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	f001 fcc3 	bl	800d258 <_vfiprintf_r>
 800b8d2:	b003      	add	sp, #12
 800b8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8d8:	b004      	add	sp, #16
 800b8da:	4770      	bx	lr
 800b8dc:	20000130 	.word	0x20000130

0800b8e0 <putchar>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	@ (800b8ec <putchar+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	6882      	ldr	r2, [r0, #8]
 800b8e8:	f001 bedc 	b.w	800d6a4 <_putc_r>
 800b8ec:	20000130 	.word	0x20000130

0800b8f0 <_puts_r>:
 800b8f0:	6a03      	ldr	r3, [r0, #32]
 800b8f2:	b570      	push	{r4, r5, r6, lr}
 800b8f4:	6884      	ldr	r4, [r0, #8]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	460e      	mov	r6, r1
 800b8fa:	b90b      	cbnz	r3, 800b900 <_puts_r+0x10>
 800b8fc:	f7ff ffa8 	bl	800b850 <__sinit>
 800b900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b902:	07db      	lsls	r3, r3, #31
 800b904:	d405      	bmi.n	800b912 <_puts_r+0x22>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	0598      	lsls	r0, r3, #22
 800b90a:	d402      	bmi.n	800b912 <_puts_r+0x22>
 800b90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b90e:	f000 f9a2 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	0719      	lsls	r1, r3, #28
 800b916:	d502      	bpl.n	800b91e <_puts_r+0x2e>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d135      	bne.n	800b98a <_puts_r+0x9a>
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 f8c5 	bl	800bab0 <__swsetup_r>
 800b926:	b380      	cbz	r0, 800b98a <_puts_r+0x9a>
 800b928:	f04f 35ff 	mov.w	r5, #4294967295
 800b92c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d405      	bmi.n	800b93e <_puts_r+0x4e>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	059b      	lsls	r3, r3, #22
 800b936:	d402      	bmi.n	800b93e <_puts_r+0x4e>
 800b938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b93a:	f000 f98d 	bl	800bc58 <__retarget_lock_release_recursive>
 800b93e:	4628      	mov	r0, r5
 800b940:	bd70      	pop	{r4, r5, r6, pc}
 800b942:	2b00      	cmp	r3, #0
 800b944:	da04      	bge.n	800b950 <_puts_r+0x60>
 800b946:	69a2      	ldr	r2, [r4, #24]
 800b948:	429a      	cmp	r2, r3
 800b94a:	dc17      	bgt.n	800b97c <_puts_r+0x8c>
 800b94c:	290a      	cmp	r1, #10
 800b94e:	d015      	beq.n	800b97c <_puts_r+0x8c>
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	6022      	str	r2, [r4, #0]
 800b956:	7019      	strb	r1, [r3, #0]
 800b958:	68a3      	ldr	r3, [r4, #8]
 800b95a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b95e:	3b01      	subs	r3, #1
 800b960:	60a3      	str	r3, [r4, #8]
 800b962:	2900      	cmp	r1, #0
 800b964:	d1ed      	bne.n	800b942 <_puts_r+0x52>
 800b966:	2b00      	cmp	r3, #0
 800b968:	da11      	bge.n	800b98e <_puts_r+0x9e>
 800b96a:	4622      	mov	r2, r4
 800b96c:	210a      	movs	r1, #10
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f85f 	bl	800ba32 <__swbuf_r>
 800b974:	3001      	adds	r0, #1
 800b976:	d0d7      	beq.n	800b928 <_puts_r+0x38>
 800b978:	250a      	movs	r5, #10
 800b97a:	e7d7      	b.n	800b92c <_puts_r+0x3c>
 800b97c:	4622      	mov	r2, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f857 	bl	800ba32 <__swbuf_r>
 800b984:	3001      	adds	r0, #1
 800b986:	d1e7      	bne.n	800b958 <_puts_r+0x68>
 800b988:	e7ce      	b.n	800b928 <_puts_r+0x38>
 800b98a:	3e01      	subs	r6, #1
 800b98c:	e7e4      	b.n	800b958 <_puts_r+0x68>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	6022      	str	r2, [r4, #0]
 800b994:	220a      	movs	r2, #10
 800b996:	701a      	strb	r2, [r3, #0]
 800b998:	e7ee      	b.n	800b978 <_puts_r+0x88>
	...

0800b99c <puts>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	@ (800b9a8 <puts+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f7ff bfa5 	b.w	800b8f0 <_puts_r>
 800b9a6:	bf00      	nop
 800b9a8:	20000130 	.word	0x20000130

0800b9ac <__sread>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b4:	f000 f900 	bl	800bbb8 <_read_r>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	bfab      	itete	ge
 800b9bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9be:	89a3      	ldrhlt	r3, [r4, #12]
 800b9c0:	181b      	addge	r3, r3, r0
 800b9c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9c6:	bfac      	ite	ge
 800b9c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9ca:	81a3      	strhlt	r3, [r4, #12]
 800b9cc:	bd10      	pop	{r4, pc}

0800b9ce <__swrite>:
 800b9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d2:	461f      	mov	r7, r3
 800b9d4:	898b      	ldrh	r3, [r1, #12]
 800b9d6:	05db      	lsls	r3, r3, #23
 800b9d8:	4605      	mov	r5, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	4616      	mov	r6, r2
 800b9de:	d505      	bpl.n	800b9ec <__swrite+0x1e>
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f000 f8d4 	bl	800bb94 <_lseek_r>
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	463b      	mov	r3, r7
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	f000 b8eb 	b.w	800bbdc <_write_r>

0800ba06 <__sseek>:
 800ba06:	b510      	push	{r4, lr}
 800ba08:	460c      	mov	r4, r1
 800ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0e:	f000 f8c1 	bl	800bb94 <_lseek_r>
 800ba12:	1c43      	adds	r3, r0, #1
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	bf15      	itete	ne
 800ba18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba22:	81a3      	strheq	r3, [r4, #12]
 800ba24:	bf18      	it	ne
 800ba26:	81a3      	strhne	r3, [r4, #12]
 800ba28:	bd10      	pop	{r4, pc}

0800ba2a <__sclose>:
 800ba2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2e:	f000 b8a1 	b.w	800bb74 <_close_r>

0800ba32 <__swbuf_r>:
 800ba32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba34:	460e      	mov	r6, r1
 800ba36:	4614      	mov	r4, r2
 800ba38:	4605      	mov	r5, r0
 800ba3a:	b118      	cbz	r0, 800ba44 <__swbuf_r+0x12>
 800ba3c:	6a03      	ldr	r3, [r0, #32]
 800ba3e:	b90b      	cbnz	r3, 800ba44 <__swbuf_r+0x12>
 800ba40:	f7ff ff06 	bl	800b850 <__sinit>
 800ba44:	69a3      	ldr	r3, [r4, #24]
 800ba46:	60a3      	str	r3, [r4, #8]
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	071a      	lsls	r2, r3, #28
 800ba4c:	d501      	bpl.n	800ba52 <__swbuf_r+0x20>
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	b943      	cbnz	r3, 800ba64 <__swbuf_r+0x32>
 800ba52:	4621      	mov	r1, r4
 800ba54:	4628      	mov	r0, r5
 800ba56:	f000 f82b 	bl	800bab0 <__swsetup_r>
 800ba5a:	b118      	cbz	r0, 800ba64 <__swbuf_r+0x32>
 800ba5c:	f04f 37ff 	mov.w	r7, #4294967295
 800ba60:	4638      	mov	r0, r7
 800ba62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	6922      	ldr	r2, [r4, #16]
 800ba68:	1a98      	subs	r0, r3, r2
 800ba6a:	6963      	ldr	r3, [r4, #20]
 800ba6c:	b2f6      	uxtb	r6, r6
 800ba6e:	4283      	cmp	r3, r0
 800ba70:	4637      	mov	r7, r6
 800ba72:	dc05      	bgt.n	800ba80 <__swbuf_r+0x4e>
 800ba74:	4621      	mov	r1, r4
 800ba76:	4628      	mov	r0, r5
 800ba78:	f001 fd8a 	bl	800d590 <_fflush_r>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d1ed      	bne.n	800ba5c <__swbuf_r+0x2a>
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	60a3      	str	r3, [r4, #8]
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	6022      	str	r2, [r4, #0]
 800ba8c:	701e      	strb	r6, [r3, #0]
 800ba8e:	6962      	ldr	r2, [r4, #20]
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d004      	beq.n	800baa0 <__swbuf_r+0x6e>
 800ba96:	89a3      	ldrh	r3, [r4, #12]
 800ba98:	07db      	lsls	r3, r3, #31
 800ba9a:	d5e1      	bpl.n	800ba60 <__swbuf_r+0x2e>
 800ba9c:	2e0a      	cmp	r6, #10
 800ba9e:	d1df      	bne.n	800ba60 <__swbuf_r+0x2e>
 800baa0:	4621      	mov	r1, r4
 800baa2:	4628      	mov	r0, r5
 800baa4:	f001 fd74 	bl	800d590 <_fflush_r>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d0d9      	beq.n	800ba60 <__swbuf_r+0x2e>
 800baac:	e7d6      	b.n	800ba5c <__swbuf_r+0x2a>
	...

0800bab0 <__swsetup_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4b29      	ldr	r3, [pc, #164]	@ (800bb58 <__swsetup_r+0xa8>)
 800bab4:	4605      	mov	r5, r0
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	460c      	mov	r4, r1
 800baba:	b118      	cbz	r0, 800bac4 <__swsetup_r+0x14>
 800babc:	6a03      	ldr	r3, [r0, #32]
 800babe:	b90b      	cbnz	r3, 800bac4 <__swsetup_r+0x14>
 800bac0:	f7ff fec6 	bl	800b850 <__sinit>
 800bac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac8:	0719      	lsls	r1, r3, #28
 800baca:	d422      	bmi.n	800bb12 <__swsetup_r+0x62>
 800bacc:	06da      	lsls	r2, r3, #27
 800bace:	d407      	bmi.n	800bae0 <__swsetup_r+0x30>
 800bad0:	2209      	movs	r2, #9
 800bad2:	602a      	str	r2, [r5, #0]
 800bad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	f04f 30ff 	mov.w	r0, #4294967295
 800bade:	e033      	b.n	800bb48 <__swsetup_r+0x98>
 800bae0:	0758      	lsls	r0, r3, #29
 800bae2:	d512      	bpl.n	800bb0a <__swsetup_r+0x5a>
 800bae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bae6:	b141      	cbz	r1, 800bafa <__swsetup_r+0x4a>
 800bae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800baec:	4299      	cmp	r1, r3
 800baee:	d002      	beq.n	800baf6 <__swsetup_r+0x46>
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 ff0d 	bl	800c910 <_free_r>
 800baf6:	2300      	movs	r3, #0
 800baf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	2300      	movs	r3, #0
 800bb04:	6063      	str	r3, [r4, #4]
 800bb06:	6923      	ldr	r3, [r4, #16]
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	f043 0308 	orr.w	r3, r3, #8
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	6923      	ldr	r3, [r4, #16]
 800bb14:	b94b      	cbnz	r3, 800bb2a <__swsetup_r+0x7a>
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb20:	d003      	beq.n	800bb2a <__swsetup_r+0x7a>
 800bb22:	4621      	mov	r1, r4
 800bb24:	4628      	mov	r0, r5
 800bb26:	f001 fd81 	bl	800d62c <__smakebuf_r>
 800bb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb2e:	f013 0201 	ands.w	r2, r3, #1
 800bb32:	d00a      	beq.n	800bb4a <__swsetup_r+0x9a>
 800bb34:	2200      	movs	r2, #0
 800bb36:	60a2      	str	r2, [r4, #8]
 800bb38:	6962      	ldr	r2, [r4, #20]
 800bb3a:	4252      	negs	r2, r2
 800bb3c:	61a2      	str	r2, [r4, #24]
 800bb3e:	6922      	ldr	r2, [r4, #16]
 800bb40:	b942      	cbnz	r2, 800bb54 <__swsetup_r+0xa4>
 800bb42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb46:	d1c5      	bne.n	800bad4 <__swsetup_r+0x24>
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	0799      	lsls	r1, r3, #30
 800bb4c:	bf58      	it	pl
 800bb4e:	6962      	ldrpl	r2, [r4, #20]
 800bb50:	60a2      	str	r2, [r4, #8]
 800bb52:	e7f4      	b.n	800bb3e <__swsetup_r+0x8e>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7f7      	b.n	800bb48 <__swsetup_r+0x98>
 800bb58:	20000130 	.word	0x20000130

0800bb5c <memset>:
 800bb5c:	4402      	add	r2, r0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d100      	bne.n	800bb66 <memset+0xa>
 800bb64:	4770      	bx	lr
 800bb66:	f803 1b01 	strb.w	r1, [r3], #1
 800bb6a:	e7f9      	b.n	800bb60 <memset+0x4>

0800bb6c <_localeconv_r>:
 800bb6c:	4800      	ldr	r0, [pc, #0]	@ (800bb70 <_localeconv_r+0x4>)
 800bb6e:	4770      	bx	lr
 800bb70:	20000270 	.word	0x20000270

0800bb74 <_close_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d06      	ldr	r5, [pc, #24]	@ (800bb90 <_close_r+0x1c>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7f7 f8c4 	bl	8002d0c <_close>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_close_r+0x1a>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_close_r+0x1a>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20002268 	.word	0x20002268

0800bb94 <_lseek_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d07      	ldr	r5, [pc, #28]	@ (800bbb4 <_lseek_r+0x20>)
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	602a      	str	r2, [r5, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f7f7 f8d9 	bl	8002d5a <_lseek>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_lseek_r+0x1e>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_lseek_r+0x1e>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	20002268 	.word	0x20002268

0800bbb8 <_read_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	@ (800bbd8 <_read_r+0x20>)
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f7 f883 	bl	8002cd2 <_read>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_read_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_read_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20002268 	.word	0x20002268

0800bbdc <_write_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d07      	ldr	r5, [pc, #28]	@ (800bbfc <_write_r+0x20>)
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	602a      	str	r2, [r5, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	f7f6 fbc3 	bl	8002376 <_write>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_write_r+0x1e>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_write_r+0x1e>
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	20002268 	.word	0x20002268

0800bc00 <__errno>:
 800bc00:	4b01      	ldr	r3, [pc, #4]	@ (800bc08 <__errno+0x8>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	20000130 	.word	0x20000130

0800bc0c <__libc_init_array>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4d0d      	ldr	r5, [pc, #52]	@ (800bc44 <__libc_init_array+0x38>)
 800bc10:	4c0d      	ldr	r4, [pc, #52]	@ (800bc48 <__libc_init_array+0x3c>)
 800bc12:	1b64      	subs	r4, r4, r5
 800bc14:	10a4      	asrs	r4, r4, #2
 800bc16:	2600      	movs	r6, #0
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	d109      	bne.n	800bc30 <__libc_init_array+0x24>
 800bc1c:	4d0b      	ldr	r5, [pc, #44]	@ (800bc4c <__libc_init_array+0x40>)
 800bc1e:	4c0c      	ldr	r4, [pc, #48]	@ (800bc50 <__libc_init_array+0x44>)
 800bc20:	f002 fa72 	bl	800e108 <_init>
 800bc24:	1b64      	subs	r4, r4, r5
 800bc26:	10a4      	asrs	r4, r4, #2
 800bc28:	2600      	movs	r6, #0
 800bc2a:	42a6      	cmp	r6, r4
 800bc2c:	d105      	bne.n	800bc3a <__libc_init_array+0x2e>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc34:	4798      	blx	r3
 800bc36:	3601      	adds	r6, #1
 800bc38:	e7ee      	b.n	800bc18 <__libc_init_array+0xc>
 800bc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3e:	4798      	blx	r3
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7f2      	b.n	800bc2a <__libc_init_array+0x1e>
 800bc44:	0800e8f0 	.word	0x0800e8f0
 800bc48:	0800e8f0 	.word	0x0800e8f0
 800bc4c:	0800e8f0 	.word	0x0800e8f0
 800bc50:	0800e8f4 	.word	0x0800e8f4

0800bc54 <__retarget_lock_init_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__retarget_lock_acquire_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <__retarget_lock_release_recursive>:
 800bc58:	4770      	bx	lr

0800bc5a <quorem>:
 800bc5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5e:	6903      	ldr	r3, [r0, #16]
 800bc60:	690c      	ldr	r4, [r1, #16]
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	4607      	mov	r7, r0
 800bc66:	db7e      	blt.n	800bd66 <quorem+0x10c>
 800bc68:	3c01      	subs	r4, #1
 800bc6a:	f101 0814 	add.w	r8, r1, #20
 800bc6e:	00a3      	lsls	r3, r4, #2
 800bc70:	f100 0514 	add.w	r5, r0, #20
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc84:	3301      	adds	r3, #1
 800bc86:	429a      	cmp	r2, r3
 800bc88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc90:	d32e      	bcc.n	800bcf0 <quorem+0x96>
 800bc92:	f04f 0a00 	mov.w	sl, #0
 800bc96:	46c4      	mov	ip, r8
 800bc98:	46ae      	mov	lr, r5
 800bc9a:	46d3      	mov	fp, sl
 800bc9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bca0:	b298      	uxth	r0, r3
 800bca2:	fb06 a000 	mla	r0, r6, r0, sl
 800bca6:	0c02      	lsrs	r2, r0, #16
 800bca8:	0c1b      	lsrs	r3, r3, #16
 800bcaa:	fb06 2303 	mla	r3, r6, r3, r2
 800bcae:	f8de 2000 	ldr.w	r2, [lr]
 800bcb2:	b280      	uxth	r0, r0
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	1a12      	subs	r2, r2, r0
 800bcb8:	445a      	add	r2, fp
 800bcba:	f8de 0000 	ldr.w	r0, [lr]
 800bcbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bcc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bccc:	b292      	uxth	r2, r2
 800bcce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bcd2:	45e1      	cmp	r9, ip
 800bcd4:	f84e 2b04 	str.w	r2, [lr], #4
 800bcd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bcdc:	d2de      	bcs.n	800bc9c <quorem+0x42>
 800bcde:	9b00      	ldr	r3, [sp, #0]
 800bce0:	58eb      	ldr	r3, [r5, r3]
 800bce2:	b92b      	cbnz	r3, 800bcf0 <quorem+0x96>
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	3b04      	subs	r3, #4
 800bce8:	429d      	cmp	r5, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	d32f      	bcc.n	800bd4e <quorem+0xf4>
 800bcee:	613c      	str	r4, [r7, #16]
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f001 f97f 	bl	800cff4 <__mcmp>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	db25      	blt.n	800bd46 <quorem+0xec>
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd02:	f8d1 c000 	ldr.w	ip, [r1]
 800bd06:	fa1f fe82 	uxth.w	lr, r2
 800bd0a:	fa1f f38c 	uxth.w	r3, ip
 800bd0e:	eba3 030e 	sub.w	r3, r3, lr
 800bd12:	4403      	add	r3, r0
 800bd14:	0c12      	lsrs	r2, r2, #16
 800bd16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd24:	45c1      	cmp	r9, r8
 800bd26:	f841 3b04 	str.w	r3, [r1], #4
 800bd2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd2e:	d2e6      	bcs.n	800bcfe <quorem+0xa4>
 800bd30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd38:	b922      	cbnz	r2, 800bd44 <quorem+0xea>
 800bd3a:	3b04      	subs	r3, #4
 800bd3c:	429d      	cmp	r5, r3
 800bd3e:	461a      	mov	r2, r3
 800bd40:	d30b      	bcc.n	800bd5a <quorem+0x100>
 800bd42:	613c      	str	r4, [r7, #16]
 800bd44:	3601      	adds	r6, #1
 800bd46:	4630      	mov	r0, r6
 800bd48:	b003      	add	sp, #12
 800bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	6812      	ldr	r2, [r2, #0]
 800bd50:	3b04      	subs	r3, #4
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	d1cb      	bne.n	800bcee <quorem+0x94>
 800bd56:	3c01      	subs	r4, #1
 800bd58:	e7c6      	b.n	800bce8 <quorem+0x8e>
 800bd5a:	6812      	ldr	r2, [r2, #0]
 800bd5c:	3b04      	subs	r3, #4
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	d1ef      	bne.n	800bd42 <quorem+0xe8>
 800bd62:	3c01      	subs	r4, #1
 800bd64:	e7ea      	b.n	800bd3c <quorem+0xe2>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e7ee      	b.n	800bd48 <quorem+0xee>
 800bd6a:	0000      	movs	r0, r0
 800bd6c:	0000      	movs	r0, r0
	...

0800bd70 <_dtoa_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	69c7      	ldr	r7, [r0, #28]
 800bd76:	b097      	sub	sp, #92	@ 0x5c
 800bd78:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bd7c:	ec55 4b10 	vmov	r4, r5, d0
 800bd80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bd82:	9107      	str	r1, [sp, #28]
 800bd84:	4681      	mov	r9, r0
 800bd86:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd88:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd8a:	b97f      	cbnz	r7, 800bdac <_dtoa_r+0x3c>
 800bd8c:	2010      	movs	r0, #16
 800bd8e:	f000 fe09 	bl	800c9a4 <malloc>
 800bd92:	4602      	mov	r2, r0
 800bd94:	f8c9 001c 	str.w	r0, [r9, #28]
 800bd98:	b920      	cbnz	r0, 800bda4 <_dtoa_r+0x34>
 800bd9a:	4ba9      	ldr	r3, [pc, #676]	@ (800c040 <_dtoa_r+0x2d0>)
 800bd9c:	21ef      	movs	r1, #239	@ 0xef
 800bd9e:	48a9      	ldr	r0, [pc, #676]	@ (800c044 <_dtoa_r+0x2d4>)
 800bda0:	f001 fcf4 	bl	800d78c <__assert_func>
 800bda4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bda8:	6007      	str	r7, [r0, #0]
 800bdaa:	60c7      	str	r7, [r0, #12]
 800bdac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bdb0:	6819      	ldr	r1, [r3, #0]
 800bdb2:	b159      	cbz	r1, 800bdcc <_dtoa_r+0x5c>
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	604a      	str	r2, [r1, #4]
 800bdb8:	2301      	movs	r3, #1
 800bdba:	4093      	lsls	r3, r2
 800bdbc:	608b      	str	r3, [r1, #8]
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	f000 fee6 	bl	800cb90 <_Bfree>
 800bdc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	1e2b      	subs	r3, r5, #0
 800bdce:	bfb9      	ittee	lt
 800bdd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bdd4:	9305      	strlt	r3, [sp, #20]
 800bdd6:	2300      	movge	r3, #0
 800bdd8:	6033      	strge	r3, [r6, #0]
 800bdda:	9f05      	ldr	r7, [sp, #20]
 800bddc:	4b9a      	ldr	r3, [pc, #616]	@ (800c048 <_dtoa_r+0x2d8>)
 800bdde:	bfbc      	itt	lt
 800bde0:	2201      	movlt	r2, #1
 800bde2:	6032      	strlt	r2, [r6, #0]
 800bde4:	43bb      	bics	r3, r7
 800bde6:	d112      	bne.n	800be0e <_dtoa_r+0x9e>
 800bde8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bdea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdf4:	4323      	orrs	r3, r4
 800bdf6:	f000 855a 	beq.w	800c8ae <_dtoa_r+0xb3e>
 800bdfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdfc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c05c <_dtoa_r+0x2ec>
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 855c 	beq.w	800c8be <_dtoa_r+0xb4e>
 800be06:	f10a 0303 	add.w	r3, sl, #3
 800be0a:	f000 bd56 	b.w	800c8ba <_dtoa_r+0xb4a>
 800be0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be12:	2200      	movs	r2, #0
 800be14:	ec51 0b17 	vmov	r0, r1, d7
 800be18:	2300      	movs	r3, #0
 800be1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800be1e:	f7f4 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 800be22:	4680      	mov	r8, r0
 800be24:	b158      	cbz	r0, 800be3e <_dtoa_r+0xce>
 800be26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be28:	2301      	movs	r3, #1
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be2e:	b113      	cbz	r3, 800be36 <_dtoa_r+0xc6>
 800be30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be32:	4b86      	ldr	r3, [pc, #536]	@ (800c04c <_dtoa_r+0x2dc>)
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c060 <_dtoa_r+0x2f0>
 800be3a:	f000 bd40 	b.w	800c8be <_dtoa_r+0xb4e>
 800be3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800be42:	aa14      	add	r2, sp, #80	@ 0x50
 800be44:	a915      	add	r1, sp, #84	@ 0x54
 800be46:	4648      	mov	r0, r9
 800be48:	f001 f984 	bl	800d154 <__d2b>
 800be4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be50:	9002      	str	r0, [sp, #8]
 800be52:	2e00      	cmp	r6, #0
 800be54:	d078      	beq.n	800bf48 <_dtoa_r+0x1d8>
 800be56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800be5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be70:	4619      	mov	r1, r3
 800be72:	2200      	movs	r2, #0
 800be74:	4b76      	ldr	r3, [pc, #472]	@ (800c050 <_dtoa_r+0x2e0>)
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c028 <_dtoa_r+0x2b8>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 fbba 	bl	80005f8 <__aeabi_dmul>
 800be84:	a36a      	add	r3, pc, #424	@ (adr r3, 800c030 <_dtoa_r+0x2c0>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f9ff 	bl	800028c <__adddf3>
 800be8e:	4604      	mov	r4, r0
 800be90:	4630      	mov	r0, r6
 800be92:	460d      	mov	r5, r1
 800be94:	f7f4 fb46 	bl	8000524 <__aeabi_i2d>
 800be98:	a367      	add	r3, pc, #412	@ (adr r3, 800c038 <_dtoa_r+0x2c8>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 fbab 	bl	80005f8 <__aeabi_dmul>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4620      	mov	r0, r4
 800bea8:	4629      	mov	r1, r5
 800beaa:	f7f4 f9ef 	bl	800028c <__adddf3>
 800beae:	4604      	mov	r4, r0
 800beb0:	460d      	mov	r5, r1
 800beb2:	f7f4 fe51 	bl	8000b58 <__aeabi_d2iz>
 800beb6:	2200      	movs	r2, #0
 800beb8:	4607      	mov	r7, r0
 800beba:	2300      	movs	r3, #0
 800bebc:	4620      	mov	r0, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800bec4:	b140      	cbz	r0, 800bed8 <_dtoa_r+0x168>
 800bec6:	4638      	mov	r0, r7
 800bec8:	f7f4 fb2c 	bl	8000524 <__aeabi_i2d>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	f7f4 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bed4:	b900      	cbnz	r0, 800bed8 <_dtoa_r+0x168>
 800bed6:	3f01      	subs	r7, #1
 800bed8:	2f16      	cmp	r7, #22
 800beda:	d852      	bhi.n	800bf82 <_dtoa_r+0x212>
 800bedc:	4b5d      	ldr	r3, [pc, #372]	@ (800c054 <_dtoa_r+0x2e4>)
 800bede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800beea:	f7f4 fdf7 	bl	8000adc <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d049      	beq.n	800bf86 <_dtoa_r+0x216>
 800bef2:	3f01      	subs	r7, #1
 800bef4:	2300      	movs	r3, #0
 800bef6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800befa:	1b9b      	subs	r3, r3, r6
 800befc:	1e5a      	subs	r2, r3, #1
 800befe:	bf45      	ittet	mi
 800bf00:	f1c3 0301 	rsbmi	r3, r3, #1
 800bf04:	9300      	strmi	r3, [sp, #0]
 800bf06:	2300      	movpl	r3, #0
 800bf08:	2300      	movmi	r3, #0
 800bf0a:	9206      	str	r2, [sp, #24]
 800bf0c:	bf54      	ite	pl
 800bf0e:	9300      	strpl	r3, [sp, #0]
 800bf10:	9306      	strmi	r3, [sp, #24]
 800bf12:	2f00      	cmp	r7, #0
 800bf14:	db39      	blt.n	800bf8a <_dtoa_r+0x21a>
 800bf16:	9b06      	ldr	r3, [sp, #24]
 800bf18:	970d      	str	r7, [sp, #52]	@ 0x34
 800bf1a:	443b      	add	r3, r7
 800bf1c:	9306      	str	r3, [sp, #24]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9308      	str	r3, [sp, #32]
 800bf22:	9b07      	ldr	r3, [sp, #28]
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d863      	bhi.n	800bff0 <_dtoa_r+0x280>
 800bf28:	2b05      	cmp	r3, #5
 800bf2a:	bfc4      	itt	gt
 800bf2c:	3b04      	subgt	r3, #4
 800bf2e:	9307      	strgt	r3, [sp, #28]
 800bf30:	9b07      	ldr	r3, [sp, #28]
 800bf32:	f1a3 0302 	sub.w	r3, r3, #2
 800bf36:	bfcc      	ite	gt
 800bf38:	2400      	movgt	r4, #0
 800bf3a:	2401      	movle	r4, #1
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d863      	bhi.n	800c008 <_dtoa_r+0x298>
 800bf40:	e8df f003 	tbb	[pc, r3]
 800bf44:	2b375452 	.word	0x2b375452
 800bf48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bf4c:	441e      	add	r6, r3
 800bf4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	bfc1      	itttt	gt
 800bf56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf5a:	409f      	lslgt	r7, r3
 800bf5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf60:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf64:	bfd6      	itet	le
 800bf66:	f1c3 0320 	rsble	r3, r3, #32
 800bf6a:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf6e:	fa04 f003 	lslle.w	r0, r4, r3
 800bf72:	f7f4 fac7 	bl	8000504 <__aeabi_ui2d>
 800bf76:	2201      	movs	r2, #1
 800bf78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf7c:	3e01      	subs	r6, #1
 800bf7e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf80:	e776      	b.n	800be70 <_dtoa_r+0x100>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e7b7      	b.n	800bef6 <_dtoa_r+0x186>
 800bf86:	9010      	str	r0, [sp, #64]	@ 0x40
 800bf88:	e7b6      	b.n	800bef8 <_dtoa_r+0x188>
 800bf8a:	9b00      	ldr	r3, [sp, #0]
 800bf8c:	1bdb      	subs	r3, r3, r7
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	427b      	negs	r3, r7
 800bf92:	9308      	str	r3, [sp, #32]
 800bf94:	2300      	movs	r3, #0
 800bf96:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf98:	e7c3      	b.n	800bf22 <_dtoa_r+0x1b2>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfa0:	eb07 0b03 	add.w	fp, r7, r3
 800bfa4:	f10b 0301 	add.w	r3, fp, #1
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	9303      	str	r3, [sp, #12]
 800bfac:	bfb8      	it	lt
 800bfae:	2301      	movlt	r3, #1
 800bfb0:	e006      	b.n	800bfc0 <_dtoa_r+0x250>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	dd28      	ble.n	800c00e <_dtoa_r+0x29e>
 800bfbc:	469b      	mov	fp, r3
 800bfbe:	9303      	str	r3, [sp, #12]
 800bfc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	2204      	movs	r2, #4
 800bfc8:	f102 0514 	add.w	r5, r2, #20
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	d926      	bls.n	800c01e <_dtoa_r+0x2ae>
 800bfd0:	6041      	str	r1, [r0, #4]
 800bfd2:	4648      	mov	r0, r9
 800bfd4:	f000 fd9c 	bl	800cb10 <_Balloc>
 800bfd8:	4682      	mov	sl, r0
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d142      	bne.n	800c064 <_dtoa_r+0x2f4>
 800bfde:	4b1e      	ldr	r3, [pc, #120]	@ (800c058 <_dtoa_r+0x2e8>)
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	f240 11af 	movw	r1, #431	@ 0x1af
 800bfe6:	e6da      	b.n	800bd9e <_dtoa_r+0x2e>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e7e3      	b.n	800bfb4 <_dtoa_r+0x244>
 800bfec:	2300      	movs	r3, #0
 800bfee:	e7d5      	b.n	800bf9c <_dtoa_r+0x22c>
 800bff0:	2401      	movs	r4, #1
 800bff2:	2300      	movs	r3, #0
 800bff4:	9307      	str	r3, [sp, #28]
 800bff6:	9409      	str	r4, [sp, #36]	@ 0x24
 800bff8:	f04f 3bff 	mov.w	fp, #4294967295
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8cd b00c 	str.w	fp, [sp, #12]
 800c002:	2312      	movs	r3, #18
 800c004:	920c      	str	r2, [sp, #48]	@ 0x30
 800c006:	e7db      	b.n	800bfc0 <_dtoa_r+0x250>
 800c008:	2301      	movs	r3, #1
 800c00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c00c:	e7f4      	b.n	800bff8 <_dtoa_r+0x288>
 800c00e:	f04f 0b01 	mov.w	fp, #1
 800c012:	f8cd b00c 	str.w	fp, [sp, #12]
 800c016:	465b      	mov	r3, fp
 800c018:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c01c:	e7d0      	b.n	800bfc0 <_dtoa_r+0x250>
 800c01e:	3101      	adds	r1, #1
 800c020:	0052      	lsls	r2, r2, #1
 800c022:	e7d1      	b.n	800bfc8 <_dtoa_r+0x258>
 800c024:	f3af 8000 	nop.w
 800c028:	636f4361 	.word	0x636f4361
 800c02c:	3fd287a7 	.word	0x3fd287a7
 800c030:	8b60c8b3 	.word	0x8b60c8b3
 800c034:	3fc68a28 	.word	0x3fc68a28
 800c038:	509f79fb 	.word	0x509f79fb
 800c03c:	3fd34413 	.word	0x3fd34413
 800c040:	0800e57d 	.word	0x0800e57d
 800c044:	0800e594 	.word	0x0800e594
 800c048:	7ff00000 	.word	0x7ff00000
 800c04c:	0800e54d 	.word	0x0800e54d
 800c050:	3ff80000 	.word	0x3ff80000
 800c054:	0800e6e8 	.word	0x0800e6e8
 800c058:	0800e5ec 	.word	0x0800e5ec
 800c05c:	0800e579 	.word	0x0800e579
 800c060:	0800e54c 	.word	0x0800e54c
 800c064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c068:	6018      	str	r0, [r3, #0]
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	2b0e      	cmp	r3, #14
 800c06e:	f200 80a1 	bhi.w	800c1b4 <_dtoa_r+0x444>
 800c072:	2c00      	cmp	r4, #0
 800c074:	f000 809e 	beq.w	800c1b4 <_dtoa_r+0x444>
 800c078:	2f00      	cmp	r7, #0
 800c07a:	dd33      	ble.n	800c0e4 <_dtoa_r+0x374>
 800c07c:	4b9c      	ldr	r3, [pc, #624]	@ (800c2f0 <_dtoa_r+0x580>)
 800c07e:	f007 020f 	and.w	r2, r7, #15
 800c082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c086:	ed93 7b00 	vldr	d7, [r3]
 800c08a:	05f8      	lsls	r0, r7, #23
 800c08c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c090:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c094:	d516      	bpl.n	800c0c4 <_dtoa_r+0x354>
 800c096:	4b97      	ldr	r3, [pc, #604]	@ (800c2f4 <_dtoa_r+0x584>)
 800c098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c09c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0a0:	f7f4 fbd4 	bl	800084c <__aeabi_ddiv>
 800c0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0a8:	f004 040f 	and.w	r4, r4, #15
 800c0ac:	2603      	movs	r6, #3
 800c0ae:	4d91      	ldr	r5, [pc, #580]	@ (800c2f4 <_dtoa_r+0x584>)
 800c0b0:	b954      	cbnz	r4, 800c0c8 <_dtoa_r+0x358>
 800c0b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c0b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ba:	f7f4 fbc7 	bl	800084c <__aeabi_ddiv>
 800c0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0c2:	e028      	b.n	800c116 <_dtoa_r+0x3a6>
 800c0c4:	2602      	movs	r6, #2
 800c0c6:	e7f2      	b.n	800c0ae <_dtoa_r+0x33e>
 800c0c8:	07e1      	lsls	r1, r4, #31
 800c0ca:	d508      	bpl.n	800c0de <_dtoa_r+0x36e>
 800c0cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0d4:	f7f4 fa90 	bl	80005f8 <__aeabi_dmul>
 800c0d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c0dc:	3601      	adds	r6, #1
 800c0de:	1064      	asrs	r4, r4, #1
 800c0e0:	3508      	adds	r5, #8
 800c0e2:	e7e5      	b.n	800c0b0 <_dtoa_r+0x340>
 800c0e4:	f000 80af 	beq.w	800c246 <_dtoa_r+0x4d6>
 800c0e8:	427c      	negs	r4, r7
 800c0ea:	4b81      	ldr	r3, [pc, #516]	@ (800c2f0 <_dtoa_r+0x580>)
 800c0ec:	4d81      	ldr	r5, [pc, #516]	@ (800c2f4 <_dtoa_r+0x584>)
 800c0ee:	f004 020f 	and.w	r2, r4, #15
 800c0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0fe:	f7f4 fa7b 	bl	80005f8 <__aeabi_dmul>
 800c102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c106:	1124      	asrs	r4, r4, #4
 800c108:	2300      	movs	r3, #0
 800c10a:	2602      	movs	r6, #2
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	f040 808f 	bne.w	800c230 <_dtoa_r+0x4c0>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1d3      	bne.n	800c0be <_dtoa_r+0x34e>
 800c116:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c118:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8094 	beq.w	800c24a <_dtoa_r+0x4da>
 800c122:	4b75      	ldr	r3, [pc, #468]	@ (800c2f8 <_dtoa_r+0x588>)
 800c124:	2200      	movs	r2, #0
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f000 808b 	beq.w	800c24a <_dtoa_r+0x4da>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8087 	beq.w	800c24a <_dtoa_r+0x4da>
 800c13c:	f1bb 0f00 	cmp.w	fp, #0
 800c140:	dd34      	ble.n	800c1ac <_dtoa_r+0x43c>
 800c142:	4620      	mov	r0, r4
 800c144:	4b6d      	ldr	r3, [pc, #436]	@ (800c2fc <_dtoa_r+0x58c>)
 800c146:	2200      	movs	r2, #0
 800c148:	4629      	mov	r1, r5
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c152:	f107 38ff 	add.w	r8, r7, #4294967295
 800c156:	3601      	adds	r6, #1
 800c158:	465c      	mov	r4, fp
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7f4 f9e2 	bl	8000524 <__aeabi_i2d>
 800c160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c164:	f7f4 fa48 	bl	80005f8 <__aeabi_dmul>
 800c168:	4b65      	ldr	r3, [pc, #404]	@ (800c300 <_dtoa_r+0x590>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	f7f4 f88e 	bl	800028c <__adddf3>
 800c170:	4605      	mov	r5, r0
 800c172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c176:	2c00      	cmp	r4, #0
 800c178:	d16a      	bne.n	800c250 <_dtoa_r+0x4e0>
 800c17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c17e:	4b61      	ldr	r3, [pc, #388]	@ (800c304 <_dtoa_r+0x594>)
 800c180:	2200      	movs	r2, #0
 800c182:	f7f4 f881 	bl	8000288 <__aeabi_dsub>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c18e:	462a      	mov	r2, r5
 800c190:	4633      	mov	r3, r6
 800c192:	f7f4 fcc1 	bl	8000b18 <__aeabi_dcmpgt>
 800c196:	2800      	cmp	r0, #0
 800c198:	f040 8298 	bne.w	800c6cc <_dtoa_r+0x95c>
 800c19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c1a6:	f7f4 fc99 	bl	8000adc <__aeabi_dcmplt>
 800c1aa:	bb38      	cbnz	r0, 800c1fc <_dtoa_r+0x48c>
 800c1ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c1b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c1b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f2c0 8157 	blt.w	800c46a <_dtoa_r+0x6fa>
 800c1bc:	2f0e      	cmp	r7, #14
 800c1be:	f300 8154 	bgt.w	800c46a <_dtoa_r+0x6fa>
 800c1c2:	4b4b      	ldr	r3, [pc, #300]	@ (800c2f0 <_dtoa_r+0x580>)
 800c1c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1c8:	ed93 7b00 	vldr	d7, [r3]
 800c1cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	ed8d 7b00 	vstr	d7, [sp]
 800c1d4:	f280 80e5 	bge.w	800c3a2 <_dtoa_r+0x632>
 800c1d8:	9b03      	ldr	r3, [sp, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f300 80e1 	bgt.w	800c3a2 <_dtoa_r+0x632>
 800c1e0:	d10c      	bne.n	800c1fc <_dtoa_r+0x48c>
 800c1e2:	4b48      	ldr	r3, [pc, #288]	@ (800c304 <_dtoa_r+0x594>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	ec51 0b17 	vmov	r0, r1, d7
 800c1ea:	f7f4 fa05 	bl	80005f8 <__aeabi_dmul>
 800c1ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f2:	f7f4 fc87 	bl	8000b04 <__aeabi_dcmpge>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f000 8266 	beq.w	800c6c8 <_dtoa_r+0x958>
 800c1fc:	2400      	movs	r4, #0
 800c1fe:	4625      	mov	r5, r4
 800c200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c202:	4656      	mov	r6, sl
 800c204:	ea6f 0803 	mvn.w	r8, r3
 800c208:	2700      	movs	r7, #0
 800c20a:	4621      	mov	r1, r4
 800c20c:	4648      	mov	r0, r9
 800c20e:	f000 fcbf 	bl	800cb90 <_Bfree>
 800c212:	2d00      	cmp	r5, #0
 800c214:	f000 80bd 	beq.w	800c392 <_dtoa_r+0x622>
 800c218:	b12f      	cbz	r7, 800c226 <_dtoa_r+0x4b6>
 800c21a:	42af      	cmp	r7, r5
 800c21c:	d003      	beq.n	800c226 <_dtoa_r+0x4b6>
 800c21e:	4639      	mov	r1, r7
 800c220:	4648      	mov	r0, r9
 800c222:	f000 fcb5 	bl	800cb90 <_Bfree>
 800c226:	4629      	mov	r1, r5
 800c228:	4648      	mov	r0, r9
 800c22a:	f000 fcb1 	bl	800cb90 <_Bfree>
 800c22e:	e0b0      	b.n	800c392 <_dtoa_r+0x622>
 800c230:	07e2      	lsls	r2, r4, #31
 800c232:	d505      	bpl.n	800c240 <_dtoa_r+0x4d0>
 800c234:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c238:	f7f4 f9de 	bl	80005f8 <__aeabi_dmul>
 800c23c:	3601      	adds	r6, #1
 800c23e:	2301      	movs	r3, #1
 800c240:	1064      	asrs	r4, r4, #1
 800c242:	3508      	adds	r5, #8
 800c244:	e762      	b.n	800c10c <_dtoa_r+0x39c>
 800c246:	2602      	movs	r6, #2
 800c248:	e765      	b.n	800c116 <_dtoa_r+0x3a6>
 800c24a:	9c03      	ldr	r4, [sp, #12]
 800c24c:	46b8      	mov	r8, r7
 800c24e:	e784      	b.n	800c15a <_dtoa_r+0x3ea>
 800c250:	4b27      	ldr	r3, [pc, #156]	@ (800c2f0 <_dtoa_r+0x580>)
 800c252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c25c:	4454      	add	r4, sl
 800c25e:	2900      	cmp	r1, #0
 800c260:	d054      	beq.n	800c30c <_dtoa_r+0x59c>
 800c262:	4929      	ldr	r1, [pc, #164]	@ (800c308 <_dtoa_r+0x598>)
 800c264:	2000      	movs	r0, #0
 800c266:	f7f4 faf1 	bl	800084c <__aeabi_ddiv>
 800c26a:	4633      	mov	r3, r6
 800c26c:	462a      	mov	r2, r5
 800c26e:	f7f4 f80b 	bl	8000288 <__aeabi_dsub>
 800c272:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c276:	4656      	mov	r6, sl
 800c278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c27c:	f7f4 fc6c 	bl	8000b58 <__aeabi_d2iz>
 800c280:	4605      	mov	r5, r0
 800c282:	f7f4 f94f 	bl	8000524 <__aeabi_i2d>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c28e:	f7f3 fffb 	bl	8000288 <__aeabi_dsub>
 800c292:	3530      	adds	r5, #48	@ 0x30
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c29c:	f806 5b01 	strb.w	r5, [r6], #1
 800c2a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2a4:	f7f4 fc1a 	bl	8000adc <__aeabi_dcmplt>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d172      	bne.n	800c392 <_dtoa_r+0x622>
 800c2ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2b0:	4911      	ldr	r1, [pc, #68]	@ (800c2f8 <_dtoa_r+0x588>)
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7f3 ffe8 	bl	8000288 <__aeabi_dsub>
 800c2b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2bc:	f7f4 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f040 80b4 	bne.w	800c42e <_dtoa_r+0x6be>
 800c2c6:	42a6      	cmp	r6, r4
 800c2c8:	f43f af70 	beq.w	800c1ac <_dtoa_r+0x43c>
 800c2cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <_dtoa_r+0x58c>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f7f4 f990 	bl	80005f8 <__aeabi_dmul>
 800c2d8:	4b08      	ldr	r3, [pc, #32]	@ (800c2fc <_dtoa_r+0x58c>)
 800c2da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2de:	2200      	movs	r2, #0
 800c2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e4:	f7f4 f988 	bl	80005f8 <__aeabi_dmul>
 800c2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2ec:	e7c4      	b.n	800c278 <_dtoa_r+0x508>
 800c2ee:	bf00      	nop
 800c2f0:	0800e6e8 	.word	0x0800e6e8
 800c2f4:	0800e6c0 	.word	0x0800e6c0
 800c2f8:	3ff00000 	.word	0x3ff00000
 800c2fc:	40240000 	.word	0x40240000
 800c300:	401c0000 	.word	0x401c0000
 800c304:	40140000 	.word	0x40140000
 800c308:	3fe00000 	.word	0x3fe00000
 800c30c:	4631      	mov	r1, r6
 800c30e:	4628      	mov	r0, r5
 800c310:	f7f4 f972 	bl	80005f8 <__aeabi_dmul>
 800c314:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c318:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c31a:	4656      	mov	r6, sl
 800c31c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c320:	f7f4 fc1a 	bl	8000b58 <__aeabi_d2iz>
 800c324:	4605      	mov	r5, r0
 800c326:	f7f4 f8fd 	bl	8000524 <__aeabi_i2d>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c332:	f7f3 ffa9 	bl	8000288 <__aeabi_dsub>
 800c336:	3530      	adds	r5, #48	@ 0x30
 800c338:	f806 5b01 	strb.w	r5, [r6], #1
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	42a6      	cmp	r6, r4
 800c342:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c346:	f04f 0200 	mov.w	r2, #0
 800c34a:	d124      	bne.n	800c396 <_dtoa_r+0x626>
 800c34c:	4baf      	ldr	r3, [pc, #700]	@ (800c60c <_dtoa_r+0x89c>)
 800c34e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c352:	f7f3 ff9b 	bl	800028c <__adddf3>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c35e:	f7f4 fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 800c362:	2800      	cmp	r0, #0
 800c364:	d163      	bne.n	800c42e <_dtoa_r+0x6be>
 800c366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c36a:	49a8      	ldr	r1, [pc, #672]	@ (800c60c <_dtoa_r+0x89c>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f3 ff8b 	bl	8000288 <__aeabi_dsub>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c37a:	f7f4 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f43f af14 	beq.w	800c1ac <_dtoa_r+0x43c>
 800c384:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c386:	1e73      	subs	r3, r6, #1
 800c388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c38a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c38e:	2b30      	cmp	r3, #48	@ 0x30
 800c390:	d0f8      	beq.n	800c384 <_dtoa_r+0x614>
 800c392:	4647      	mov	r7, r8
 800c394:	e03b      	b.n	800c40e <_dtoa_r+0x69e>
 800c396:	4b9e      	ldr	r3, [pc, #632]	@ (800c610 <_dtoa_r+0x8a0>)
 800c398:	f7f4 f92e 	bl	80005f8 <__aeabi_dmul>
 800c39c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3a0:	e7bc      	b.n	800c31c <_dtoa_r+0x5ac>
 800c3a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	f7f4 fa4c 	bl	800084c <__aeabi_ddiv>
 800c3b4:	f7f4 fbd0 	bl	8000b58 <__aeabi_d2iz>
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	f7f4 f8b3 	bl	8000524 <__aeabi_i2d>
 800c3be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3c2:	f7f4 f919 	bl	80005f8 <__aeabi_dmul>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c3d2:	f7f3 ff59 	bl	8000288 <__aeabi_dsub>
 800c3d6:	f806 4b01 	strb.w	r4, [r6], #1
 800c3da:	9d03      	ldr	r5, [sp, #12]
 800c3dc:	eba6 040a 	sub.w	r4, r6, sl
 800c3e0:	42a5      	cmp	r5, r4
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	d133      	bne.n	800c450 <_dtoa_r+0x6e0>
 800c3e8:	f7f3 ff50 	bl	800028c <__adddf3>
 800c3ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	460d      	mov	r5, r1
 800c3f4:	f7f4 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 800c3f8:	b9c0      	cbnz	r0, 800c42c <_dtoa_r+0x6bc>
 800c3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3fe:	4620      	mov	r0, r4
 800c400:	4629      	mov	r1, r5
 800c402:	f7f4 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 800c406:	b110      	cbz	r0, 800c40e <_dtoa_r+0x69e>
 800c408:	f018 0f01 	tst.w	r8, #1
 800c40c:	d10e      	bne.n	800c42c <_dtoa_r+0x6bc>
 800c40e:	9902      	ldr	r1, [sp, #8]
 800c410:	4648      	mov	r0, r9
 800c412:	f000 fbbd 	bl	800cb90 <_Bfree>
 800c416:	2300      	movs	r3, #0
 800c418:	7033      	strb	r3, [r6, #0]
 800c41a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c41c:	3701      	adds	r7, #1
 800c41e:	601f      	str	r7, [r3, #0]
 800c420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 824b 	beq.w	800c8be <_dtoa_r+0xb4e>
 800c428:	601e      	str	r6, [r3, #0]
 800c42a:	e248      	b.n	800c8be <_dtoa_r+0xb4e>
 800c42c:	46b8      	mov	r8, r7
 800c42e:	4633      	mov	r3, r6
 800c430:	461e      	mov	r6, r3
 800c432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c436:	2a39      	cmp	r2, #57	@ 0x39
 800c438:	d106      	bne.n	800c448 <_dtoa_r+0x6d8>
 800c43a:	459a      	cmp	sl, r3
 800c43c:	d1f8      	bne.n	800c430 <_dtoa_r+0x6c0>
 800c43e:	2230      	movs	r2, #48	@ 0x30
 800c440:	f108 0801 	add.w	r8, r8, #1
 800c444:	f88a 2000 	strb.w	r2, [sl]
 800c448:	781a      	ldrb	r2, [r3, #0]
 800c44a:	3201      	adds	r2, #1
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e7a0      	b.n	800c392 <_dtoa_r+0x622>
 800c450:	4b6f      	ldr	r3, [pc, #444]	@ (800c610 <_dtoa_r+0x8a0>)
 800c452:	2200      	movs	r2, #0
 800c454:	f7f4 f8d0 	bl	80005f8 <__aeabi_dmul>
 800c458:	2200      	movs	r2, #0
 800c45a:	2300      	movs	r3, #0
 800c45c:	4604      	mov	r4, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	f7f4 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800c464:	2800      	cmp	r0, #0
 800c466:	d09f      	beq.n	800c3a8 <_dtoa_r+0x638>
 800c468:	e7d1      	b.n	800c40e <_dtoa_r+0x69e>
 800c46a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c46c:	2a00      	cmp	r2, #0
 800c46e:	f000 80ea 	beq.w	800c646 <_dtoa_r+0x8d6>
 800c472:	9a07      	ldr	r2, [sp, #28]
 800c474:	2a01      	cmp	r2, #1
 800c476:	f300 80cd 	bgt.w	800c614 <_dtoa_r+0x8a4>
 800c47a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c47c:	2a00      	cmp	r2, #0
 800c47e:	f000 80c1 	beq.w	800c604 <_dtoa_r+0x894>
 800c482:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c486:	9c08      	ldr	r4, [sp, #32]
 800c488:	9e00      	ldr	r6, [sp, #0]
 800c48a:	9a00      	ldr	r2, [sp, #0]
 800c48c:	441a      	add	r2, r3
 800c48e:	9200      	str	r2, [sp, #0]
 800c490:	9a06      	ldr	r2, [sp, #24]
 800c492:	2101      	movs	r1, #1
 800c494:	441a      	add	r2, r3
 800c496:	4648      	mov	r0, r9
 800c498:	9206      	str	r2, [sp, #24]
 800c49a:	f000 fc2d 	bl	800ccf8 <__i2b>
 800c49e:	4605      	mov	r5, r0
 800c4a0:	b166      	cbz	r6, 800c4bc <_dtoa_r+0x74c>
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	dd09      	ble.n	800c4bc <_dtoa_r+0x74c>
 800c4a8:	42b3      	cmp	r3, r6
 800c4aa:	9a00      	ldr	r2, [sp, #0]
 800c4ac:	bfa8      	it	ge
 800c4ae:	4633      	movge	r3, r6
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	9200      	str	r2, [sp, #0]
 800c4b4:	9a06      	ldr	r2, [sp, #24]
 800c4b6:	1af6      	subs	r6, r6, r3
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	9306      	str	r3, [sp, #24]
 800c4bc:	9b08      	ldr	r3, [sp, #32]
 800c4be:	b30b      	cbz	r3, 800c504 <_dtoa_r+0x794>
 800c4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 80c6 	beq.w	800c654 <_dtoa_r+0x8e4>
 800c4c8:	2c00      	cmp	r4, #0
 800c4ca:	f000 80c0 	beq.w	800c64e <_dtoa_r+0x8de>
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	4648      	mov	r0, r9
 800c4d4:	f000 fcc8 	bl	800ce68 <__pow5mult>
 800c4d8:	9a02      	ldr	r2, [sp, #8]
 800c4da:	4601      	mov	r1, r0
 800c4dc:	4605      	mov	r5, r0
 800c4de:	4648      	mov	r0, r9
 800c4e0:	f000 fc20 	bl	800cd24 <__multiply>
 800c4e4:	9902      	ldr	r1, [sp, #8]
 800c4e6:	4680      	mov	r8, r0
 800c4e8:	4648      	mov	r0, r9
 800c4ea:	f000 fb51 	bl	800cb90 <_Bfree>
 800c4ee:	9b08      	ldr	r3, [sp, #32]
 800c4f0:	1b1b      	subs	r3, r3, r4
 800c4f2:	9308      	str	r3, [sp, #32]
 800c4f4:	f000 80b1 	beq.w	800c65a <_dtoa_r+0x8ea>
 800c4f8:	9a08      	ldr	r2, [sp, #32]
 800c4fa:	4641      	mov	r1, r8
 800c4fc:	4648      	mov	r0, r9
 800c4fe:	f000 fcb3 	bl	800ce68 <__pow5mult>
 800c502:	9002      	str	r0, [sp, #8]
 800c504:	2101      	movs	r1, #1
 800c506:	4648      	mov	r0, r9
 800c508:	f000 fbf6 	bl	800ccf8 <__i2b>
 800c50c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c50e:	4604      	mov	r4, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 81d8 	beq.w	800c8c6 <_dtoa_r+0xb56>
 800c516:	461a      	mov	r2, r3
 800c518:	4601      	mov	r1, r0
 800c51a:	4648      	mov	r0, r9
 800c51c:	f000 fca4 	bl	800ce68 <__pow5mult>
 800c520:	9b07      	ldr	r3, [sp, #28]
 800c522:	2b01      	cmp	r3, #1
 800c524:	4604      	mov	r4, r0
 800c526:	f300 809f 	bgt.w	800c668 <_dtoa_r+0x8f8>
 800c52a:	9b04      	ldr	r3, [sp, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f040 8097 	bne.w	800c660 <_dtoa_r+0x8f0>
 800c532:	9b05      	ldr	r3, [sp, #20]
 800c534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f040 8093 	bne.w	800c664 <_dtoa_r+0x8f4>
 800c53e:	9b05      	ldr	r3, [sp, #20]
 800c540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c544:	0d1b      	lsrs	r3, r3, #20
 800c546:	051b      	lsls	r3, r3, #20
 800c548:	b133      	cbz	r3, 800c558 <_dtoa_r+0x7e8>
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	3301      	adds	r3, #1
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	9b06      	ldr	r3, [sp, #24]
 800c552:	3301      	adds	r3, #1
 800c554:	9306      	str	r3, [sp, #24]
 800c556:	2301      	movs	r3, #1
 800c558:	9308      	str	r3, [sp, #32]
 800c55a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 81b8 	beq.w	800c8d2 <_dtoa_r+0xb62>
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c568:	6918      	ldr	r0, [r3, #16]
 800c56a:	f000 fb79 	bl	800cc60 <__hi0bits>
 800c56e:	f1c0 0020 	rsb	r0, r0, #32
 800c572:	9b06      	ldr	r3, [sp, #24]
 800c574:	4418      	add	r0, r3
 800c576:	f010 001f 	ands.w	r0, r0, #31
 800c57a:	f000 8082 	beq.w	800c682 <_dtoa_r+0x912>
 800c57e:	f1c0 0320 	rsb	r3, r0, #32
 800c582:	2b04      	cmp	r3, #4
 800c584:	dd73      	ble.n	800c66e <_dtoa_r+0x8fe>
 800c586:	9b00      	ldr	r3, [sp, #0]
 800c588:	f1c0 001c 	rsb	r0, r0, #28
 800c58c:	4403      	add	r3, r0
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	9b06      	ldr	r3, [sp, #24]
 800c592:	4403      	add	r3, r0
 800c594:	4406      	add	r6, r0
 800c596:	9306      	str	r3, [sp, #24]
 800c598:	9b00      	ldr	r3, [sp, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dd05      	ble.n	800c5aa <_dtoa_r+0x83a>
 800c59e:	9902      	ldr	r1, [sp, #8]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	f000 fcba 	bl	800cf1c <__lshift>
 800c5a8:	9002      	str	r0, [sp, #8]
 800c5aa:	9b06      	ldr	r3, [sp, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd05      	ble.n	800c5bc <_dtoa_r+0x84c>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	4648      	mov	r0, r9
 800c5b6:	f000 fcb1 	bl	800cf1c <__lshift>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d061      	beq.n	800c686 <_dtoa_r+0x916>
 800c5c2:	9802      	ldr	r0, [sp, #8]
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f000 fd15 	bl	800cff4 <__mcmp>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	da5b      	bge.n	800c686 <_dtoa_r+0x916>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9902      	ldr	r1, [sp, #8]
 800c5d2:	220a      	movs	r2, #10
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 fafd 	bl	800cbd4 <__multadd>
 800c5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5dc:	9002      	str	r0, [sp, #8]
 800c5de:	f107 38ff 	add.w	r8, r7, #4294967295
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 8177 	beq.w	800c8d6 <_dtoa_r+0xb66>
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	220a      	movs	r2, #10
 800c5ee:	4648      	mov	r0, r9
 800c5f0:	f000 faf0 	bl	800cbd4 <__multadd>
 800c5f4:	f1bb 0f00 	cmp.w	fp, #0
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	dc6f      	bgt.n	800c6dc <_dtoa_r+0x96c>
 800c5fc:	9b07      	ldr	r3, [sp, #28]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	dc49      	bgt.n	800c696 <_dtoa_r+0x926>
 800c602:	e06b      	b.n	800c6dc <_dtoa_r+0x96c>
 800c604:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c60a:	e73c      	b.n	800c486 <_dtoa_r+0x716>
 800c60c:	3fe00000 	.word	0x3fe00000
 800c610:	40240000 	.word	0x40240000
 800c614:	9b03      	ldr	r3, [sp, #12]
 800c616:	1e5c      	subs	r4, r3, #1
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	42a3      	cmp	r3, r4
 800c61c:	db09      	blt.n	800c632 <_dtoa_r+0x8c2>
 800c61e:	1b1c      	subs	r4, r3, r4
 800c620:	9b03      	ldr	r3, [sp, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f6bf af30 	bge.w	800c488 <_dtoa_r+0x718>
 800c628:	9b00      	ldr	r3, [sp, #0]
 800c62a:	9a03      	ldr	r2, [sp, #12]
 800c62c:	1a9e      	subs	r6, r3, r2
 800c62e:	2300      	movs	r3, #0
 800c630:	e72b      	b.n	800c48a <_dtoa_r+0x71a>
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c636:	9408      	str	r4, [sp, #32]
 800c638:	1ae3      	subs	r3, r4, r3
 800c63a:	441a      	add	r2, r3
 800c63c:	9e00      	ldr	r6, [sp, #0]
 800c63e:	9b03      	ldr	r3, [sp, #12]
 800c640:	920d      	str	r2, [sp, #52]	@ 0x34
 800c642:	2400      	movs	r4, #0
 800c644:	e721      	b.n	800c48a <_dtoa_r+0x71a>
 800c646:	9c08      	ldr	r4, [sp, #32]
 800c648:	9e00      	ldr	r6, [sp, #0]
 800c64a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c64c:	e728      	b.n	800c4a0 <_dtoa_r+0x730>
 800c64e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c652:	e751      	b.n	800c4f8 <_dtoa_r+0x788>
 800c654:	9a08      	ldr	r2, [sp, #32]
 800c656:	9902      	ldr	r1, [sp, #8]
 800c658:	e750      	b.n	800c4fc <_dtoa_r+0x78c>
 800c65a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c65e:	e751      	b.n	800c504 <_dtoa_r+0x794>
 800c660:	2300      	movs	r3, #0
 800c662:	e779      	b.n	800c558 <_dtoa_r+0x7e8>
 800c664:	9b04      	ldr	r3, [sp, #16]
 800c666:	e777      	b.n	800c558 <_dtoa_r+0x7e8>
 800c668:	2300      	movs	r3, #0
 800c66a:	9308      	str	r3, [sp, #32]
 800c66c:	e779      	b.n	800c562 <_dtoa_r+0x7f2>
 800c66e:	d093      	beq.n	800c598 <_dtoa_r+0x828>
 800c670:	9a00      	ldr	r2, [sp, #0]
 800c672:	331c      	adds	r3, #28
 800c674:	441a      	add	r2, r3
 800c676:	9200      	str	r2, [sp, #0]
 800c678:	9a06      	ldr	r2, [sp, #24]
 800c67a:	441a      	add	r2, r3
 800c67c:	441e      	add	r6, r3
 800c67e:	9206      	str	r2, [sp, #24]
 800c680:	e78a      	b.n	800c598 <_dtoa_r+0x828>
 800c682:	4603      	mov	r3, r0
 800c684:	e7f4      	b.n	800c670 <_dtoa_r+0x900>
 800c686:	9b03      	ldr	r3, [sp, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	46b8      	mov	r8, r7
 800c68c:	dc20      	bgt.n	800c6d0 <_dtoa_r+0x960>
 800c68e:	469b      	mov	fp, r3
 800c690:	9b07      	ldr	r3, [sp, #28]
 800c692:	2b02      	cmp	r3, #2
 800c694:	dd1e      	ble.n	800c6d4 <_dtoa_r+0x964>
 800c696:	f1bb 0f00 	cmp.w	fp, #0
 800c69a:	f47f adb1 	bne.w	800c200 <_dtoa_r+0x490>
 800c69e:	4621      	mov	r1, r4
 800c6a0:	465b      	mov	r3, fp
 800c6a2:	2205      	movs	r2, #5
 800c6a4:	4648      	mov	r0, r9
 800c6a6:	f000 fa95 	bl	800cbd4 <__multadd>
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	9802      	ldr	r0, [sp, #8]
 800c6b0:	f000 fca0 	bl	800cff4 <__mcmp>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f77f ada3 	ble.w	800c200 <_dtoa_r+0x490>
 800c6ba:	4656      	mov	r6, sl
 800c6bc:	2331      	movs	r3, #49	@ 0x31
 800c6be:	f806 3b01 	strb.w	r3, [r6], #1
 800c6c2:	f108 0801 	add.w	r8, r8, #1
 800c6c6:	e59f      	b.n	800c208 <_dtoa_r+0x498>
 800c6c8:	9c03      	ldr	r4, [sp, #12]
 800c6ca:	46b8      	mov	r8, r7
 800c6cc:	4625      	mov	r5, r4
 800c6ce:	e7f4      	b.n	800c6ba <_dtoa_r+0x94a>
 800c6d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f000 8101 	beq.w	800c8de <_dtoa_r+0xb6e>
 800c6dc:	2e00      	cmp	r6, #0
 800c6de:	dd05      	ble.n	800c6ec <_dtoa_r+0x97c>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4632      	mov	r2, r6
 800c6e4:	4648      	mov	r0, r9
 800c6e6:	f000 fc19 	bl	800cf1c <__lshift>
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	9b08      	ldr	r3, [sp, #32]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d05c      	beq.n	800c7ac <_dtoa_r+0xa3c>
 800c6f2:	6869      	ldr	r1, [r5, #4]
 800c6f4:	4648      	mov	r0, r9
 800c6f6:	f000 fa0b 	bl	800cb10 <_Balloc>
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	b928      	cbnz	r0, 800c70a <_dtoa_r+0x99a>
 800c6fe:	4b82      	ldr	r3, [pc, #520]	@ (800c908 <_dtoa_r+0xb98>)
 800c700:	4602      	mov	r2, r0
 800c702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c706:	f7ff bb4a 	b.w	800bd9e <_dtoa_r+0x2e>
 800c70a:	692a      	ldr	r2, [r5, #16]
 800c70c:	3202      	adds	r2, #2
 800c70e:	0092      	lsls	r2, r2, #2
 800c710:	f105 010c 	add.w	r1, r5, #12
 800c714:	300c      	adds	r0, #12
 800c716:	f001 f82b 	bl	800d770 <memcpy>
 800c71a:	2201      	movs	r2, #1
 800c71c:	4631      	mov	r1, r6
 800c71e:	4648      	mov	r0, r9
 800c720:	f000 fbfc 	bl	800cf1c <__lshift>
 800c724:	f10a 0301 	add.w	r3, sl, #1
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	eb0a 030b 	add.w	r3, sl, fp
 800c72e:	9308      	str	r3, [sp, #32]
 800c730:	9b04      	ldr	r3, [sp, #16]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	462f      	mov	r7, r5
 800c738:	9306      	str	r3, [sp, #24]
 800c73a:	4605      	mov	r5, r0
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	9802      	ldr	r0, [sp, #8]
 800c740:	4621      	mov	r1, r4
 800c742:	f103 3bff 	add.w	fp, r3, #4294967295
 800c746:	f7ff fa88 	bl	800bc5a <quorem>
 800c74a:	4603      	mov	r3, r0
 800c74c:	3330      	adds	r3, #48	@ 0x30
 800c74e:	9003      	str	r0, [sp, #12]
 800c750:	4639      	mov	r1, r7
 800c752:	9802      	ldr	r0, [sp, #8]
 800c754:	9309      	str	r3, [sp, #36]	@ 0x24
 800c756:	f000 fc4d 	bl	800cff4 <__mcmp>
 800c75a:	462a      	mov	r2, r5
 800c75c:	9004      	str	r0, [sp, #16]
 800c75e:	4621      	mov	r1, r4
 800c760:	4648      	mov	r0, r9
 800c762:	f000 fc63 	bl	800d02c <__mdiff>
 800c766:	68c2      	ldr	r2, [r0, #12]
 800c768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76a:	4606      	mov	r6, r0
 800c76c:	bb02      	cbnz	r2, 800c7b0 <_dtoa_r+0xa40>
 800c76e:	4601      	mov	r1, r0
 800c770:	9802      	ldr	r0, [sp, #8]
 800c772:	f000 fc3f 	bl	800cff4 <__mcmp>
 800c776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c778:	4602      	mov	r2, r0
 800c77a:	4631      	mov	r1, r6
 800c77c:	4648      	mov	r0, r9
 800c77e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c780:	9309      	str	r3, [sp, #36]	@ 0x24
 800c782:	f000 fa05 	bl	800cb90 <_Bfree>
 800c786:	9b07      	ldr	r3, [sp, #28]
 800c788:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c78a:	9e00      	ldr	r6, [sp, #0]
 800c78c:	ea42 0103 	orr.w	r1, r2, r3
 800c790:	9b06      	ldr	r3, [sp, #24]
 800c792:	4319      	orrs	r1, r3
 800c794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c796:	d10d      	bne.n	800c7b4 <_dtoa_r+0xa44>
 800c798:	2b39      	cmp	r3, #57	@ 0x39
 800c79a:	d027      	beq.n	800c7ec <_dtoa_r+0xa7c>
 800c79c:	9a04      	ldr	r2, [sp, #16]
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	dd01      	ble.n	800c7a6 <_dtoa_r+0xa36>
 800c7a2:	9b03      	ldr	r3, [sp, #12]
 800c7a4:	3331      	adds	r3, #49	@ 0x31
 800c7a6:	f88b 3000 	strb.w	r3, [fp]
 800c7aa:	e52e      	b.n	800c20a <_dtoa_r+0x49a>
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	e7b9      	b.n	800c724 <_dtoa_r+0x9b4>
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	e7e2      	b.n	800c77a <_dtoa_r+0xa0a>
 800c7b4:	9904      	ldr	r1, [sp, #16]
 800c7b6:	2900      	cmp	r1, #0
 800c7b8:	db04      	blt.n	800c7c4 <_dtoa_r+0xa54>
 800c7ba:	9807      	ldr	r0, [sp, #28]
 800c7bc:	4301      	orrs	r1, r0
 800c7be:	9806      	ldr	r0, [sp, #24]
 800c7c0:	4301      	orrs	r1, r0
 800c7c2:	d120      	bne.n	800c806 <_dtoa_r+0xa96>
 800c7c4:	2a00      	cmp	r2, #0
 800c7c6:	ddee      	ble.n	800c7a6 <_dtoa_r+0xa36>
 800c7c8:	9902      	ldr	r1, [sp, #8]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	4648      	mov	r0, r9
 800c7d0:	f000 fba4 	bl	800cf1c <__lshift>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	9002      	str	r0, [sp, #8]
 800c7d8:	f000 fc0c 	bl	800cff4 <__mcmp>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	dc02      	bgt.n	800c7e8 <_dtoa_r+0xa78>
 800c7e2:	d1e0      	bne.n	800c7a6 <_dtoa_r+0xa36>
 800c7e4:	07da      	lsls	r2, r3, #31
 800c7e6:	d5de      	bpl.n	800c7a6 <_dtoa_r+0xa36>
 800c7e8:	2b39      	cmp	r3, #57	@ 0x39
 800c7ea:	d1da      	bne.n	800c7a2 <_dtoa_r+0xa32>
 800c7ec:	2339      	movs	r3, #57	@ 0x39
 800c7ee:	f88b 3000 	strb.w	r3, [fp]
 800c7f2:	4633      	mov	r3, r6
 800c7f4:	461e      	mov	r6, r3
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7fc:	2a39      	cmp	r2, #57	@ 0x39
 800c7fe:	d04e      	beq.n	800c89e <_dtoa_r+0xb2e>
 800c800:	3201      	adds	r2, #1
 800c802:	701a      	strb	r2, [r3, #0]
 800c804:	e501      	b.n	800c20a <_dtoa_r+0x49a>
 800c806:	2a00      	cmp	r2, #0
 800c808:	dd03      	ble.n	800c812 <_dtoa_r+0xaa2>
 800c80a:	2b39      	cmp	r3, #57	@ 0x39
 800c80c:	d0ee      	beq.n	800c7ec <_dtoa_r+0xa7c>
 800c80e:	3301      	adds	r3, #1
 800c810:	e7c9      	b.n	800c7a6 <_dtoa_r+0xa36>
 800c812:	9a00      	ldr	r2, [sp, #0]
 800c814:	9908      	ldr	r1, [sp, #32]
 800c816:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c81a:	428a      	cmp	r2, r1
 800c81c:	d028      	beq.n	800c870 <_dtoa_r+0xb00>
 800c81e:	9902      	ldr	r1, [sp, #8]
 800c820:	2300      	movs	r3, #0
 800c822:	220a      	movs	r2, #10
 800c824:	4648      	mov	r0, r9
 800c826:	f000 f9d5 	bl	800cbd4 <__multadd>
 800c82a:	42af      	cmp	r7, r5
 800c82c:	9002      	str	r0, [sp, #8]
 800c82e:	f04f 0300 	mov.w	r3, #0
 800c832:	f04f 020a 	mov.w	r2, #10
 800c836:	4639      	mov	r1, r7
 800c838:	4648      	mov	r0, r9
 800c83a:	d107      	bne.n	800c84c <_dtoa_r+0xadc>
 800c83c:	f000 f9ca 	bl	800cbd4 <__multadd>
 800c840:	4607      	mov	r7, r0
 800c842:	4605      	mov	r5, r0
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	e777      	b.n	800c73c <_dtoa_r+0x9cc>
 800c84c:	f000 f9c2 	bl	800cbd4 <__multadd>
 800c850:	4629      	mov	r1, r5
 800c852:	4607      	mov	r7, r0
 800c854:	2300      	movs	r3, #0
 800c856:	220a      	movs	r2, #10
 800c858:	4648      	mov	r0, r9
 800c85a:	f000 f9bb 	bl	800cbd4 <__multadd>
 800c85e:	4605      	mov	r5, r0
 800c860:	e7f0      	b.n	800c844 <_dtoa_r+0xad4>
 800c862:	f1bb 0f00 	cmp.w	fp, #0
 800c866:	bfcc      	ite	gt
 800c868:	465e      	movgt	r6, fp
 800c86a:	2601      	movle	r6, #1
 800c86c:	4456      	add	r6, sl
 800c86e:	2700      	movs	r7, #0
 800c870:	9902      	ldr	r1, [sp, #8]
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2201      	movs	r2, #1
 800c876:	4648      	mov	r0, r9
 800c878:	f000 fb50 	bl	800cf1c <__lshift>
 800c87c:	4621      	mov	r1, r4
 800c87e:	9002      	str	r0, [sp, #8]
 800c880:	f000 fbb8 	bl	800cff4 <__mcmp>
 800c884:	2800      	cmp	r0, #0
 800c886:	dcb4      	bgt.n	800c7f2 <_dtoa_r+0xa82>
 800c888:	d102      	bne.n	800c890 <_dtoa_r+0xb20>
 800c88a:	9b00      	ldr	r3, [sp, #0]
 800c88c:	07db      	lsls	r3, r3, #31
 800c88e:	d4b0      	bmi.n	800c7f2 <_dtoa_r+0xa82>
 800c890:	4633      	mov	r3, r6
 800c892:	461e      	mov	r6, r3
 800c894:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c898:	2a30      	cmp	r2, #48	@ 0x30
 800c89a:	d0fa      	beq.n	800c892 <_dtoa_r+0xb22>
 800c89c:	e4b5      	b.n	800c20a <_dtoa_r+0x49a>
 800c89e:	459a      	cmp	sl, r3
 800c8a0:	d1a8      	bne.n	800c7f4 <_dtoa_r+0xa84>
 800c8a2:	2331      	movs	r3, #49	@ 0x31
 800c8a4:	f108 0801 	add.w	r8, r8, #1
 800c8a8:	f88a 3000 	strb.w	r3, [sl]
 800c8ac:	e4ad      	b.n	800c20a <_dtoa_r+0x49a>
 800c8ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c90c <_dtoa_r+0xb9c>
 800c8b4:	b11b      	cbz	r3, 800c8be <_dtoa_r+0xb4e>
 800c8b6:	f10a 0308 	add.w	r3, sl, #8
 800c8ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	4650      	mov	r0, sl
 800c8c0:	b017      	add	sp, #92	@ 0x5c
 800c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c6:	9b07      	ldr	r3, [sp, #28]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	f77f ae2e 	ble.w	800c52a <_dtoa_r+0x7ba>
 800c8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8d0:	9308      	str	r3, [sp, #32]
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e64d      	b.n	800c572 <_dtoa_r+0x802>
 800c8d6:	f1bb 0f00 	cmp.w	fp, #0
 800c8da:	f77f aed9 	ble.w	800c690 <_dtoa_r+0x920>
 800c8de:	4656      	mov	r6, sl
 800c8e0:	9802      	ldr	r0, [sp, #8]
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	f7ff f9b9 	bl	800bc5a <quorem>
 800c8e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c8f0:	eba6 020a 	sub.w	r2, r6, sl
 800c8f4:	4593      	cmp	fp, r2
 800c8f6:	ddb4      	ble.n	800c862 <_dtoa_r+0xaf2>
 800c8f8:	9902      	ldr	r1, [sp, #8]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4648      	mov	r0, r9
 800c900:	f000 f968 	bl	800cbd4 <__multadd>
 800c904:	9002      	str	r0, [sp, #8]
 800c906:	e7eb      	b.n	800c8e0 <_dtoa_r+0xb70>
 800c908:	0800e5ec 	.word	0x0800e5ec
 800c90c:	0800e570 	.word	0x0800e570

0800c910 <_free_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4605      	mov	r5, r0
 800c914:	2900      	cmp	r1, #0
 800c916:	d041      	beq.n	800c99c <_free_r+0x8c>
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f0c      	subs	r4, r1, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	18e4      	addlt	r4, r4, r3
 800c924:	f000 f8e8 	bl	800caf8 <__malloc_lock>
 800c928:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <_free_r+0x90>)
 800c92a:	6813      	ldr	r3, [r2, #0]
 800c92c:	b933      	cbnz	r3, 800c93c <_free_r+0x2c>
 800c92e:	6063      	str	r3, [r4, #4]
 800c930:	6014      	str	r4, [r2, #0]
 800c932:	4628      	mov	r0, r5
 800c934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c938:	f000 b8e4 	b.w	800cb04 <__malloc_unlock>
 800c93c:	42a3      	cmp	r3, r4
 800c93e:	d908      	bls.n	800c952 <_free_r+0x42>
 800c940:	6820      	ldr	r0, [r4, #0]
 800c942:	1821      	adds	r1, r4, r0
 800c944:	428b      	cmp	r3, r1
 800c946:	bf01      	itttt	eq
 800c948:	6819      	ldreq	r1, [r3, #0]
 800c94a:	685b      	ldreq	r3, [r3, #4]
 800c94c:	1809      	addeq	r1, r1, r0
 800c94e:	6021      	streq	r1, [r4, #0]
 800c950:	e7ed      	b.n	800c92e <_free_r+0x1e>
 800c952:	461a      	mov	r2, r3
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	b10b      	cbz	r3, 800c95c <_free_r+0x4c>
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d9fa      	bls.n	800c952 <_free_r+0x42>
 800c95c:	6811      	ldr	r1, [r2, #0]
 800c95e:	1850      	adds	r0, r2, r1
 800c960:	42a0      	cmp	r0, r4
 800c962:	d10b      	bne.n	800c97c <_free_r+0x6c>
 800c964:	6820      	ldr	r0, [r4, #0]
 800c966:	4401      	add	r1, r0
 800c968:	1850      	adds	r0, r2, r1
 800c96a:	4283      	cmp	r3, r0
 800c96c:	6011      	str	r1, [r2, #0]
 800c96e:	d1e0      	bne.n	800c932 <_free_r+0x22>
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	6053      	str	r3, [r2, #4]
 800c976:	4408      	add	r0, r1
 800c978:	6010      	str	r0, [r2, #0]
 800c97a:	e7da      	b.n	800c932 <_free_r+0x22>
 800c97c:	d902      	bls.n	800c984 <_free_r+0x74>
 800c97e:	230c      	movs	r3, #12
 800c980:	602b      	str	r3, [r5, #0]
 800c982:	e7d6      	b.n	800c932 <_free_r+0x22>
 800c984:	6820      	ldr	r0, [r4, #0]
 800c986:	1821      	adds	r1, r4, r0
 800c988:	428b      	cmp	r3, r1
 800c98a:	bf04      	itt	eq
 800c98c:	6819      	ldreq	r1, [r3, #0]
 800c98e:	685b      	ldreq	r3, [r3, #4]
 800c990:	6063      	str	r3, [r4, #4]
 800c992:	bf04      	itt	eq
 800c994:	1809      	addeq	r1, r1, r0
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	6054      	str	r4, [r2, #4]
 800c99a:	e7ca      	b.n	800c932 <_free_r+0x22>
 800c99c:	bd38      	pop	{r3, r4, r5, pc}
 800c99e:	bf00      	nop
 800c9a0:	20002274 	.word	0x20002274

0800c9a4 <malloc>:
 800c9a4:	4b02      	ldr	r3, [pc, #8]	@ (800c9b0 <malloc+0xc>)
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	f000 b825 	b.w	800c9f8 <_malloc_r>
 800c9ae:	bf00      	nop
 800c9b0:	20000130 	.word	0x20000130

0800c9b4 <sbrk_aligned>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c9f4 <sbrk_aligned+0x40>)
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	6831      	ldr	r1, [r6, #0]
 800c9bc:	4605      	mov	r5, r0
 800c9be:	b911      	cbnz	r1, 800c9c6 <sbrk_aligned+0x12>
 800c9c0:	f000 fec6 	bl	800d750 <_sbrk_r>
 800c9c4:	6030      	str	r0, [r6, #0]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f000 fec1 	bl	800d750 <_sbrk_r>
 800c9ce:	1c43      	adds	r3, r0, #1
 800c9d0:	d103      	bne.n	800c9da <sbrk_aligned+0x26>
 800c9d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	bd70      	pop	{r4, r5, r6, pc}
 800c9da:	1cc4      	adds	r4, r0, #3
 800c9dc:	f024 0403 	bic.w	r4, r4, #3
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d0f8      	beq.n	800c9d6 <sbrk_aligned+0x22>
 800c9e4:	1a21      	subs	r1, r4, r0
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 feb2 	bl	800d750 <_sbrk_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d1f2      	bne.n	800c9d6 <sbrk_aligned+0x22>
 800c9f0:	e7ef      	b.n	800c9d2 <sbrk_aligned+0x1e>
 800c9f2:	bf00      	nop
 800c9f4:	20002270 	.word	0x20002270

0800c9f8 <_malloc_r>:
 800c9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9fc:	1ccd      	adds	r5, r1, #3
 800c9fe:	f025 0503 	bic.w	r5, r5, #3
 800ca02:	3508      	adds	r5, #8
 800ca04:	2d0c      	cmp	r5, #12
 800ca06:	bf38      	it	cc
 800ca08:	250c      	movcc	r5, #12
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	db01      	blt.n	800ca14 <_malloc_r+0x1c>
 800ca10:	42a9      	cmp	r1, r5
 800ca12:	d904      	bls.n	800ca1e <_malloc_r+0x26>
 800ca14:	230c      	movs	r3, #12
 800ca16:	6033      	str	r3, [r6, #0]
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caf4 <_malloc_r+0xfc>
 800ca22:	f000 f869 	bl	800caf8 <__malloc_lock>
 800ca26:	f8d8 3000 	ldr.w	r3, [r8]
 800ca2a:	461c      	mov	r4, r3
 800ca2c:	bb44      	cbnz	r4, 800ca80 <_malloc_r+0x88>
 800ca2e:	4629      	mov	r1, r5
 800ca30:	4630      	mov	r0, r6
 800ca32:	f7ff ffbf 	bl	800c9b4 <sbrk_aligned>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	4604      	mov	r4, r0
 800ca3a:	d158      	bne.n	800caee <_malloc_r+0xf6>
 800ca3c:	f8d8 4000 	ldr.w	r4, [r8]
 800ca40:	4627      	mov	r7, r4
 800ca42:	2f00      	cmp	r7, #0
 800ca44:	d143      	bne.n	800cace <_malloc_r+0xd6>
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d04b      	beq.n	800cae2 <_malloc_r+0xea>
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	4630      	mov	r0, r6
 800ca50:	eb04 0903 	add.w	r9, r4, r3
 800ca54:	f000 fe7c 	bl	800d750 <_sbrk_r>
 800ca58:	4581      	cmp	r9, r0
 800ca5a:	d142      	bne.n	800cae2 <_malloc_r+0xea>
 800ca5c:	6821      	ldr	r1, [r4, #0]
 800ca5e:	1a6d      	subs	r5, r5, r1
 800ca60:	4629      	mov	r1, r5
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7ff ffa6 	bl	800c9b4 <sbrk_aligned>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d03a      	beq.n	800cae2 <_malloc_r+0xea>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	442b      	add	r3, r5
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	f8d8 3000 	ldr.w	r3, [r8]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	bb62      	cbnz	r2, 800cad4 <_malloc_r+0xdc>
 800ca7a:	f8c8 7000 	str.w	r7, [r8]
 800ca7e:	e00f      	b.n	800caa0 <_malloc_r+0xa8>
 800ca80:	6822      	ldr	r2, [r4, #0]
 800ca82:	1b52      	subs	r2, r2, r5
 800ca84:	d420      	bmi.n	800cac8 <_malloc_r+0xd0>
 800ca86:	2a0b      	cmp	r2, #11
 800ca88:	d917      	bls.n	800caba <_malloc_r+0xc2>
 800ca8a:	1961      	adds	r1, r4, r5
 800ca8c:	42a3      	cmp	r3, r4
 800ca8e:	6025      	str	r5, [r4, #0]
 800ca90:	bf18      	it	ne
 800ca92:	6059      	strne	r1, [r3, #4]
 800ca94:	6863      	ldr	r3, [r4, #4]
 800ca96:	bf08      	it	eq
 800ca98:	f8c8 1000 	streq.w	r1, [r8]
 800ca9c:	5162      	str	r2, [r4, r5]
 800ca9e:	604b      	str	r3, [r1, #4]
 800caa0:	4630      	mov	r0, r6
 800caa2:	f000 f82f 	bl	800cb04 <__malloc_unlock>
 800caa6:	f104 000b 	add.w	r0, r4, #11
 800caaa:	1d23      	adds	r3, r4, #4
 800caac:	f020 0007 	bic.w	r0, r0, #7
 800cab0:	1ac2      	subs	r2, r0, r3
 800cab2:	bf1c      	itt	ne
 800cab4:	1a1b      	subne	r3, r3, r0
 800cab6:	50a3      	strne	r3, [r4, r2]
 800cab8:	e7af      	b.n	800ca1a <_malloc_r+0x22>
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	bf0c      	ite	eq
 800cac0:	f8c8 2000 	streq.w	r2, [r8]
 800cac4:	605a      	strne	r2, [r3, #4]
 800cac6:	e7eb      	b.n	800caa0 <_malloc_r+0xa8>
 800cac8:	4623      	mov	r3, r4
 800caca:	6864      	ldr	r4, [r4, #4]
 800cacc:	e7ae      	b.n	800ca2c <_malloc_r+0x34>
 800cace:	463c      	mov	r4, r7
 800cad0:	687f      	ldr	r7, [r7, #4]
 800cad2:	e7b6      	b.n	800ca42 <_malloc_r+0x4a>
 800cad4:	461a      	mov	r2, r3
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	42a3      	cmp	r3, r4
 800cada:	d1fb      	bne.n	800cad4 <_malloc_r+0xdc>
 800cadc:	2300      	movs	r3, #0
 800cade:	6053      	str	r3, [r2, #4]
 800cae0:	e7de      	b.n	800caa0 <_malloc_r+0xa8>
 800cae2:	230c      	movs	r3, #12
 800cae4:	6033      	str	r3, [r6, #0]
 800cae6:	4630      	mov	r0, r6
 800cae8:	f000 f80c 	bl	800cb04 <__malloc_unlock>
 800caec:	e794      	b.n	800ca18 <_malloc_r+0x20>
 800caee:	6005      	str	r5, [r0, #0]
 800caf0:	e7d6      	b.n	800caa0 <_malloc_r+0xa8>
 800caf2:	bf00      	nop
 800caf4:	20002274 	.word	0x20002274

0800caf8 <__malloc_lock>:
 800caf8:	4801      	ldr	r0, [pc, #4]	@ (800cb00 <__malloc_lock+0x8>)
 800cafa:	f7ff b8ac 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800cafe:	bf00      	nop
 800cb00:	2000226c 	.word	0x2000226c

0800cb04 <__malloc_unlock>:
 800cb04:	4801      	ldr	r0, [pc, #4]	@ (800cb0c <__malloc_unlock+0x8>)
 800cb06:	f7ff b8a7 	b.w	800bc58 <__retarget_lock_release_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	2000226c 	.word	0x2000226c

0800cb10 <_Balloc>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	69c6      	ldr	r6, [r0, #28]
 800cb14:	4604      	mov	r4, r0
 800cb16:	460d      	mov	r5, r1
 800cb18:	b976      	cbnz	r6, 800cb38 <_Balloc+0x28>
 800cb1a:	2010      	movs	r0, #16
 800cb1c:	f7ff ff42 	bl	800c9a4 <malloc>
 800cb20:	4602      	mov	r2, r0
 800cb22:	61e0      	str	r0, [r4, #28]
 800cb24:	b920      	cbnz	r0, 800cb30 <_Balloc+0x20>
 800cb26:	4b18      	ldr	r3, [pc, #96]	@ (800cb88 <_Balloc+0x78>)
 800cb28:	4818      	ldr	r0, [pc, #96]	@ (800cb8c <_Balloc+0x7c>)
 800cb2a:	216b      	movs	r1, #107	@ 0x6b
 800cb2c:	f000 fe2e 	bl	800d78c <__assert_func>
 800cb30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb34:	6006      	str	r6, [r0, #0]
 800cb36:	60c6      	str	r6, [r0, #12]
 800cb38:	69e6      	ldr	r6, [r4, #28]
 800cb3a:	68f3      	ldr	r3, [r6, #12]
 800cb3c:	b183      	cbz	r3, 800cb60 <_Balloc+0x50>
 800cb3e:	69e3      	ldr	r3, [r4, #28]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb46:	b9b8      	cbnz	r0, 800cb78 <_Balloc+0x68>
 800cb48:	2101      	movs	r1, #1
 800cb4a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb4e:	1d72      	adds	r2, r6, #5
 800cb50:	0092      	lsls	r2, r2, #2
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 fe38 	bl	800d7c8 <_calloc_r>
 800cb58:	b160      	cbz	r0, 800cb74 <_Balloc+0x64>
 800cb5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb5e:	e00e      	b.n	800cb7e <_Balloc+0x6e>
 800cb60:	2221      	movs	r2, #33	@ 0x21
 800cb62:	2104      	movs	r1, #4
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fe2f 	bl	800d7c8 <_calloc_r>
 800cb6a:	69e3      	ldr	r3, [r4, #28]
 800cb6c:	60f0      	str	r0, [r6, #12]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e4      	bne.n	800cb3e <_Balloc+0x2e>
 800cb74:	2000      	movs	r0, #0
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	6802      	ldr	r2, [r0, #0]
 800cb7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb84:	e7f7      	b.n	800cb76 <_Balloc+0x66>
 800cb86:	bf00      	nop
 800cb88:	0800e57d 	.word	0x0800e57d
 800cb8c:	0800e5fd 	.word	0x0800e5fd

0800cb90 <_Bfree>:
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	69c6      	ldr	r6, [r0, #28]
 800cb94:	4605      	mov	r5, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	b976      	cbnz	r6, 800cbb8 <_Bfree+0x28>
 800cb9a:	2010      	movs	r0, #16
 800cb9c:	f7ff ff02 	bl	800c9a4 <malloc>
 800cba0:	4602      	mov	r2, r0
 800cba2:	61e8      	str	r0, [r5, #28]
 800cba4:	b920      	cbnz	r0, 800cbb0 <_Bfree+0x20>
 800cba6:	4b09      	ldr	r3, [pc, #36]	@ (800cbcc <_Bfree+0x3c>)
 800cba8:	4809      	ldr	r0, [pc, #36]	@ (800cbd0 <_Bfree+0x40>)
 800cbaa:	218f      	movs	r1, #143	@ 0x8f
 800cbac:	f000 fdee 	bl	800d78c <__assert_func>
 800cbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbb4:	6006      	str	r6, [r0, #0]
 800cbb6:	60c6      	str	r6, [r0, #12]
 800cbb8:	b13c      	cbz	r4, 800cbca <_Bfree+0x3a>
 800cbba:	69eb      	ldr	r3, [r5, #28]
 800cbbc:	6862      	ldr	r2, [r4, #4]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbc4:	6021      	str	r1, [r4, #0]
 800cbc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	0800e57d 	.word	0x0800e57d
 800cbd0:	0800e5fd 	.word	0x0800e5fd

0800cbd4 <__multadd>:
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	690d      	ldr	r5, [r1, #16]
 800cbda:	4607      	mov	r7, r0
 800cbdc:	460c      	mov	r4, r1
 800cbde:	461e      	mov	r6, r3
 800cbe0:	f101 0c14 	add.w	ip, r1, #20
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	f8dc 3000 	ldr.w	r3, [ip]
 800cbea:	b299      	uxth	r1, r3
 800cbec:	fb02 6101 	mla	r1, r2, r1, r6
 800cbf0:	0c1e      	lsrs	r6, r3, #16
 800cbf2:	0c0b      	lsrs	r3, r1, #16
 800cbf4:	fb02 3306 	mla	r3, r2, r6, r3
 800cbf8:	b289      	uxth	r1, r1
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc00:	4285      	cmp	r5, r0
 800cc02:	f84c 1b04 	str.w	r1, [ip], #4
 800cc06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc0a:	dcec      	bgt.n	800cbe6 <__multadd+0x12>
 800cc0c:	b30e      	cbz	r6, 800cc52 <__multadd+0x7e>
 800cc0e:	68a3      	ldr	r3, [r4, #8]
 800cc10:	42ab      	cmp	r3, r5
 800cc12:	dc19      	bgt.n	800cc48 <__multadd+0x74>
 800cc14:	6861      	ldr	r1, [r4, #4]
 800cc16:	4638      	mov	r0, r7
 800cc18:	3101      	adds	r1, #1
 800cc1a:	f7ff ff79 	bl	800cb10 <_Balloc>
 800cc1e:	4680      	mov	r8, r0
 800cc20:	b928      	cbnz	r0, 800cc2e <__multadd+0x5a>
 800cc22:	4602      	mov	r2, r0
 800cc24:	4b0c      	ldr	r3, [pc, #48]	@ (800cc58 <__multadd+0x84>)
 800cc26:	480d      	ldr	r0, [pc, #52]	@ (800cc5c <__multadd+0x88>)
 800cc28:	21ba      	movs	r1, #186	@ 0xba
 800cc2a:	f000 fdaf 	bl	800d78c <__assert_func>
 800cc2e:	6922      	ldr	r2, [r4, #16]
 800cc30:	3202      	adds	r2, #2
 800cc32:	f104 010c 	add.w	r1, r4, #12
 800cc36:	0092      	lsls	r2, r2, #2
 800cc38:	300c      	adds	r0, #12
 800cc3a:	f000 fd99 	bl	800d770 <memcpy>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4638      	mov	r0, r7
 800cc42:	f7ff ffa5 	bl	800cb90 <_Bfree>
 800cc46:	4644      	mov	r4, r8
 800cc48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	615e      	str	r6, [r3, #20]
 800cc50:	6125      	str	r5, [r4, #16]
 800cc52:	4620      	mov	r0, r4
 800cc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc58:	0800e5ec 	.word	0x0800e5ec
 800cc5c:	0800e5fd 	.word	0x0800e5fd

0800cc60 <__hi0bits>:
 800cc60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc64:	4603      	mov	r3, r0
 800cc66:	bf36      	itet	cc
 800cc68:	0403      	lslcc	r3, r0, #16
 800cc6a:	2000      	movcs	r0, #0
 800cc6c:	2010      	movcc	r0, #16
 800cc6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc72:	bf3c      	itt	cc
 800cc74:	021b      	lslcc	r3, r3, #8
 800cc76:	3008      	addcc	r0, #8
 800cc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc7c:	bf3c      	itt	cc
 800cc7e:	011b      	lslcc	r3, r3, #4
 800cc80:	3004      	addcc	r0, #4
 800cc82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc86:	bf3c      	itt	cc
 800cc88:	009b      	lslcc	r3, r3, #2
 800cc8a:	3002      	addcc	r0, #2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	db05      	blt.n	800cc9c <__hi0bits+0x3c>
 800cc90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc94:	f100 0001 	add.w	r0, r0, #1
 800cc98:	bf08      	it	eq
 800cc9a:	2020      	moveq	r0, #32
 800cc9c:	4770      	bx	lr

0800cc9e <__lo0bits>:
 800cc9e:	6803      	ldr	r3, [r0, #0]
 800cca0:	4602      	mov	r2, r0
 800cca2:	f013 0007 	ands.w	r0, r3, #7
 800cca6:	d00b      	beq.n	800ccc0 <__lo0bits+0x22>
 800cca8:	07d9      	lsls	r1, r3, #31
 800ccaa:	d421      	bmi.n	800ccf0 <__lo0bits+0x52>
 800ccac:	0798      	lsls	r0, r3, #30
 800ccae:	bf49      	itett	mi
 800ccb0:	085b      	lsrmi	r3, r3, #1
 800ccb2:	089b      	lsrpl	r3, r3, #2
 800ccb4:	2001      	movmi	r0, #1
 800ccb6:	6013      	strmi	r3, [r2, #0]
 800ccb8:	bf5c      	itt	pl
 800ccba:	6013      	strpl	r3, [r2, #0]
 800ccbc:	2002      	movpl	r0, #2
 800ccbe:	4770      	bx	lr
 800ccc0:	b299      	uxth	r1, r3
 800ccc2:	b909      	cbnz	r1, 800ccc8 <__lo0bits+0x2a>
 800ccc4:	0c1b      	lsrs	r3, r3, #16
 800ccc6:	2010      	movs	r0, #16
 800ccc8:	b2d9      	uxtb	r1, r3
 800ccca:	b909      	cbnz	r1, 800ccd0 <__lo0bits+0x32>
 800cccc:	3008      	adds	r0, #8
 800ccce:	0a1b      	lsrs	r3, r3, #8
 800ccd0:	0719      	lsls	r1, r3, #28
 800ccd2:	bf04      	itt	eq
 800ccd4:	091b      	lsreq	r3, r3, #4
 800ccd6:	3004      	addeq	r0, #4
 800ccd8:	0799      	lsls	r1, r3, #30
 800ccda:	bf04      	itt	eq
 800ccdc:	089b      	lsreq	r3, r3, #2
 800ccde:	3002      	addeq	r0, #2
 800cce0:	07d9      	lsls	r1, r3, #31
 800cce2:	d403      	bmi.n	800ccec <__lo0bits+0x4e>
 800cce4:	085b      	lsrs	r3, r3, #1
 800cce6:	f100 0001 	add.w	r0, r0, #1
 800ccea:	d003      	beq.n	800ccf4 <__lo0bits+0x56>
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	4770      	bx	lr
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	4770      	bx	lr
 800ccf4:	2020      	movs	r0, #32
 800ccf6:	4770      	bx	lr

0800ccf8 <__i2b>:
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	f7ff ff07 	bl	800cb10 <_Balloc>
 800cd02:	4602      	mov	r2, r0
 800cd04:	b928      	cbnz	r0, 800cd12 <__i2b+0x1a>
 800cd06:	4b05      	ldr	r3, [pc, #20]	@ (800cd1c <__i2b+0x24>)
 800cd08:	4805      	ldr	r0, [pc, #20]	@ (800cd20 <__i2b+0x28>)
 800cd0a:	f240 1145 	movw	r1, #325	@ 0x145
 800cd0e:	f000 fd3d 	bl	800d78c <__assert_func>
 800cd12:	2301      	movs	r3, #1
 800cd14:	6144      	str	r4, [r0, #20]
 800cd16:	6103      	str	r3, [r0, #16]
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0800e5ec 	.word	0x0800e5ec
 800cd20:	0800e5fd 	.word	0x0800e5fd

0800cd24 <__multiply>:
 800cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	4617      	mov	r7, r2
 800cd2a:	690a      	ldr	r2, [r1, #16]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	bfa8      	it	ge
 800cd32:	463b      	movge	r3, r7
 800cd34:	4689      	mov	r9, r1
 800cd36:	bfa4      	itt	ge
 800cd38:	460f      	movge	r7, r1
 800cd3a:	4699      	movge	r9, r3
 800cd3c:	693d      	ldr	r5, [r7, #16]
 800cd3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	6879      	ldr	r1, [r7, #4]
 800cd46:	eb05 060a 	add.w	r6, r5, sl
 800cd4a:	42b3      	cmp	r3, r6
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	bfb8      	it	lt
 800cd50:	3101      	addlt	r1, #1
 800cd52:	f7ff fedd 	bl	800cb10 <_Balloc>
 800cd56:	b930      	cbnz	r0, 800cd66 <__multiply+0x42>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	4b41      	ldr	r3, [pc, #260]	@ (800ce60 <__multiply+0x13c>)
 800cd5c:	4841      	ldr	r0, [pc, #260]	@ (800ce64 <__multiply+0x140>)
 800cd5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd62:	f000 fd13 	bl	800d78c <__assert_func>
 800cd66:	f100 0414 	add.w	r4, r0, #20
 800cd6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd6e:	4623      	mov	r3, r4
 800cd70:	2200      	movs	r2, #0
 800cd72:	4573      	cmp	r3, lr
 800cd74:	d320      	bcc.n	800cdb8 <__multiply+0x94>
 800cd76:	f107 0814 	add.w	r8, r7, #20
 800cd7a:	f109 0114 	add.w	r1, r9, #20
 800cd7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd86:	9302      	str	r3, [sp, #8]
 800cd88:	1beb      	subs	r3, r5, r7
 800cd8a:	3b15      	subs	r3, #21
 800cd8c:	f023 0303 	bic.w	r3, r3, #3
 800cd90:	3304      	adds	r3, #4
 800cd92:	3715      	adds	r7, #21
 800cd94:	42bd      	cmp	r5, r7
 800cd96:	bf38      	it	cc
 800cd98:	2304      	movcc	r3, #4
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	9b02      	ldr	r3, [sp, #8]
 800cd9e:	9103      	str	r1, [sp, #12]
 800cda0:	428b      	cmp	r3, r1
 800cda2:	d80c      	bhi.n	800cdbe <__multiply+0x9a>
 800cda4:	2e00      	cmp	r6, #0
 800cda6:	dd03      	ble.n	800cdb0 <__multiply+0x8c>
 800cda8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d055      	beq.n	800ce5c <__multiply+0x138>
 800cdb0:	6106      	str	r6, [r0, #16]
 800cdb2:	b005      	add	sp, #20
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	f843 2b04 	str.w	r2, [r3], #4
 800cdbc:	e7d9      	b.n	800cd72 <__multiply+0x4e>
 800cdbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdc2:	f1ba 0f00 	cmp.w	sl, #0
 800cdc6:	d01f      	beq.n	800ce08 <__multiply+0xe4>
 800cdc8:	46c4      	mov	ip, r8
 800cdca:	46a1      	mov	r9, r4
 800cdcc:	2700      	movs	r7, #0
 800cdce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdd2:	f8d9 3000 	ldr.w	r3, [r9]
 800cdd6:	fa1f fb82 	uxth.w	fp, r2
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	fb0a 330b 	mla	r3, sl, fp, r3
 800cde0:	443b      	add	r3, r7
 800cde2:	f8d9 7000 	ldr.w	r7, [r9]
 800cde6:	0c12      	lsrs	r2, r2, #16
 800cde8:	0c3f      	lsrs	r7, r7, #16
 800cdea:	fb0a 7202 	mla	r2, sl, r2, r7
 800cdee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdf8:	4565      	cmp	r5, ip
 800cdfa:	f849 3b04 	str.w	r3, [r9], #4
 800cdfe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce02:	d8e4      	bhi.n	800cdce <__multiply+0xaa>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	50e7      	str	r7, [r4, r3]
 800ce08:	9b03      	ldr	r3, [sp, #12]
 800ce0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce0e:	3104      	adds	r1, #4
 800ce10:	f1b9 0f00 	cmp.w	r9, #0
 800ce14:	d020      	beq.n	800ce58 <__multiply+0x134>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	4647      	mov	r7, r8
 800ce1a:	46a4      	mov	ip, r4
 800ce1c:	f04f 0a00 	mov.w	sl, #0
 800ce20:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce28:	fb09 220b 	mla	r2, r9, fp, r2
 800ce2c:	4452      	add	r2, sl
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce34:	f84c 3b04 	str.w	r3, [ip], #4
 800ce38:	f857 3b04 	ldr.w	r3, [r7], #4
 800ce3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce40:	f8bc 3000 	ldrh.w	r3, [ip]
 800ce44:	fb09 330a 	mla	r3, r9, sl, r3
 800ce48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ce4c:	42bd      	cmp	r5, r7
 800ce4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce52:	d8e5      	bhi.n	800ce20 <__multiply+0xfc>
 800ce54:	9a01      	ldr	r2, [sp, #4]
 800ce56:	50a3      	str	r3, [r4, r2]
 800ce58:	3404      	adds	r4, #4
 800ce5a:	e79f      	b.n	800cd9c <__multiply+0x78>
 800ce5c:	3e01      	subs	r6, #1
 800ce5e:	e7a1      	b.n	800cda4 <__multiply+0x80>
 800ce60:	0800e5ec 	.word	0x0800e5ec
 800ce64:	0800e5fd 	.word	0x0800e5fd

0800ce68 <__pow5mult>:
 800ce68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	f012 0203 	ands.w	r2, r2, #3
 800ce72:	4607      	mov	r7, r0
 800ce74:	460e      	mov	r6, r1
 800ce76:	d007      	beq.n	800ce88 <__pow5mult+0x20>
 800ce78:	4c25      	ldr	r4, [pc, #148]	@ (800cf10 <__pow5mult+0xa8>)
 800ce7a:	3a01      	subs	r2, #1
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce82:	f7ff fea7 	bl	800cbd4 <__multadd>
 800ce86:	4606      	mov	r6, r0
 800ce88:	10ad      	asrs	r5, r5, #2
 800ce8a:	d03d      	beq.n	800cf08 <__pow5mult+0xa0>
 800ce8c:	69fc      	ldr	r4, [r7, #28]
 800ce8e:	b97c      	cbnz	r4, 800ceb0 <__pow5mult+0x48>
 800ce90:	2010      	movs	r0, #16
 800ce92:	f7ff fd87 	bl	800c9a4 <malloc>
 800ce96:	4602      	mov	r2, r0
 800ce98:	61f8      	str	r0, [r7, #28]
 800ce9a:	b928      	cbnz	r0, 800cea8 <__pow5mult+0x40>
 800ce9c:	4b1d      	ldr	r3, [pc, #116]	@ (800cf14 <__pow5mult+0xac>)
 800ce9e:	481e      	ldr	r0, [pc, #120]	@ (800cf18 <__pow5mult+0xb0>)
 800cea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cea4:	f000 fc72 	bl	800d78c <__assert_func>
 800cea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceac:	6004      	str	r4, [r0, #0]
 800ceae:	60c4      	str	r4, [r0, #12]
 800ceb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ceb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ceb8:	b94c      	cbnz	r4, 800cece <__pow5mult+0x66>
 800ceba:	f240 2171 	movw	r1, #625	@ 0x271
 800cebe:	4638      	mov	r0, r7
 800cec0:	f7ff ff1a 	bl	800ccf8 <__i2b>
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceca:	4604      	mov	r4, r0
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	f04f 0900 	mov.w	r9, #0
 800ced2:	07eb      	lsls	r3, r5, #31
 800ced4:	d50a      	bpl.n	800ceec <__pow5mult+0x84>
 800ced6:	4631      	mov	r1, r6
 800ced8:	4622      	mov	r2, r4
 800ceda:	4638      	mov	r0, r7
 800cedc:	f7ff ff22 	bl	800cd24 <__multiply>
 800cee0:	4631      	mov	r1, r6
 800cee2:	4680      	mov	r8, r0
 800cee4:	4638      	mov	r0, r7
 800cee6:	f7ff fe53 	bl	800cb90 <_Bfree>
 800ceea:	4646      	mov	r6, r8
 800ceec:	106d      	asrs	r5, r5, #1
 800ceee:	d00b      	beq.n	800cf08 <__pow5mult+0xa0>
 800cef0:	6820      	ldr	r0, [r4, #0]
 800cef2:	b938      	cbnz	r0, 800cf04 <__pow5mult+0x9c>
 800cef4:	4622      	mov	r2, r4
 800cef6:	4621      	mov	r1, r4
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff ff13 	bl	800cd24 <__multiply>
 800cefe:	6020      	str	r0, [r4, #0]
 800cf00:	f8c0 9000 	str.w	r9, [r0]
 800cf04:	4604      	mov	r4, r0
 800cf06:	e7e4      	b.n	800ced2 <__pow5mult+0x6a>
 800cf08:	4630      	mov	r0, r6
 800cf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0e:	bf00      	nop
 800cf10:	0800e6b0 	.word	0x0800e6b0
 800cf14:	0800e57d 	.word	0x0800e57d
 800cf18:	0800e5fd 	.word	0x0800e5fd

0800cf1c <__lshift>:
 800cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf20:	460c      	mov	r4, r1
 800cf22:	6849      	ldr	r1, [r1, #4]
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf2a:	68a3      	ldr	r3, [r4, #8]
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	4691      	mov	r9, r2
 800cf30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf34:	f108 0601 	add.w	r6, r8, #1
 800cf38:	42b3      	cmp	r3, r6
 800cf3a:	db0b      	blt.n	800cf54 <__lshift+0x38>
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f7ff fde7 	bl	800cb10 <_Balloc>
 800cf42:	4605      	mov	r5, r0
 800cf44:	b948      	cbnz	r0, 800cf5a <__lshift+0x3e>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4b28      	ldr	r3, [pc, #160]	@ (800cfec <__lshift+0xd0>)
 800cf4a:	4829      	ldr	r0, [pc, #164]	@ (800cff0 <__lshift+0xd4>)
 800cf4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf50:	f000 fc1c 	bl	800d78c <__assert_func>
 800cf54:	3101      	adds	r1, #1
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	e7ee      	b.n	800cf38 <__lshift+0x1c>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f100 0114 	add.w	r1, r0, #20
 800cf60:	f100 0210 	add.w	r2, r0, #16
 800cf64:	4618      	mov	r0, r3
 800cf66:	4553      	cmp	r3, sl
 800cf68:	db33      	blt.n	800cfd2 <__lshift+0xb6>
 800cf6a:	6920      	ldr	r0, [r4, #16]
 800cf6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf70:	f104 0314 	add.w	r3, r4, #20
 800cf74:	f019 091f 	ands.w	r9, r9, #31
 800cf78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf80:	d02b      	beq.n	800cfda <__lshift+0xbe>
 800cf82:	f1c9 0e20 	rsb	lr, r9, #32
 800cf86:	468a      	mov	sl, r1
 800cf88:	2200      	movs	r2, #0
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf90:	4310      	orrs	r0, r2
 800cf92:	f84a 0b04 	str.w	r0, [sl], #4
 800cf96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9a:	459c      	cmp	ip, r3
 800cf9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfa0:	d8f3      	bhi.n	800cf8a <__lshift+0x6e>
 800cfa2:	ebac 0304 	sub.w	r3, ip, r4
 800cfa6:	3b15      	subs	r3, #21
 800cfa8:	f023 0303 	bic.w	r3, r3, #3
 800cfac:	3304      	adds	r3, #4
 800cfae:	f104 0015 	add.w	r0, r4, #21
 800cfb2:	4560      	cmp	r0, ip
 800cfb4:	bf88      	it	hi
 800cfb6:	2304      	movhi	r3, #4
 800cfb8:	50ca      	str	r2, [r1, r3]
 800cfba:	b10a      	cbz	r2, 800cfc0 <__lshift+0xa4>
 800cfbc:	f108 0602 	add.w	r6, r8, #2
 800cfc0:	3e01      	subs	r6, #1
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	612e      	str	r6, [r5, #16]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	f7ff fde2 	bl	800cb90 <_Bfree>
 800cfcc:	4628      	mov	r0, r5
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	e7c5      	b.n	800cf66 <__lshift+0x4a>
 800cfda:	3904      	subs	r1, #4
 800cfdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfe4:	459c      	cmp	ip, r3
 800cfe6:	d8f9      	bhi.n	800cfdc <__lshift+0xc0>
 800cfe8:	e7ea      	b.n	800cfc0 <__lshift+0xa4>
 800cfea:	bf00      	nop
 800cfec:	0800e5ec 	.word	0x0800e5ec
 800cff0:	0800e5fd 	.word	0x0800e5fd

0800cff4 <__mcmp>:
 800cff4:	690a      	ldr	r2, [r1, #16]
 800cff6:	4603      	mov	r3, r0
 800cff8:	6900      	ldr	r0, [r0, #16]
 800cffa:	1a80      	subs	r0, r0, r2
 800cffc:	b530      	push	{r4, r5, lr}
 800cffe:	d10e      	bne.n	800d01e <__mcmp+0x2a>
 800d000:	3314      	adds	r3, #20
 800d002:	3114      	adds	r1, #20
 800d004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d00c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d014:	4295      	cmp	r5, r2
 800d016:	d003      	beq.n	800d020 <__mcmp+0x2c>
 800d018:	d205      	bcs.n	800d026 <__mcmp+0x32>
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295
 800d01e:	bd30      	pop	{r4, r5, pc}
 800d020:	42a3      	cmp	r3, r4
 800d022:	d3f3      	bcc.n	800d00c <__mcmp+0x18>
 800d024:	e7fb      	b.n	800d01e <__mcmp+0x2a>
 800d026:	2001      	movs	r0, #1
 800d028:	e7f9      	b.n	800d01e <__mcmp+0x2a>
	...

0800d02c <__mdiff>:
 800d02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	4689      	mov	r9, r1
 800d032:	4606      	mov	r6, r0
 800d034:	4611      	mov	r1, r2
 800d036:	4648      	mov	r0, r9
 800d038:	4614      	mov	r4, r2
 800d03a:	f7ff ffdb 	bl	800cff4 <__mcmp>
 800d03e:	1e05      	subs	r5, r0, #0
 800d040:	d112      	bne.n	800d068 <__mdiff+0x3c>
 800d042:	4629      	mov	r1, r5
 800d044:	4630      	mov	r0, r6
 800d046:	f7ff fd63 	bl	800cb10 <_Balloc>
 800d04a:	4602      	mov	r2, r0
 800d04c:	b928      	cbnz	r0, 800d05a <__mdiff+0x2e>
 800d04e:	4b3f      	ldr	r3, [pc, #252]	@ (800d14c <__mdiff+0x120>)
 800d050:	f240 2137 	movw	r1, #567	@ 0x237
 800d054:	483e      	ldr	r0, [pc, #248]	@ (800d150 <__mdiff+0x124>)
 800d056:	f000 fb99 	bl	800d78c <__assert_func>
 800d05a:	2301      	movs	r3, #1
 800d05c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d060:	4610      	mov	r0, r2
 800d062:	b003      	add	sp, #12
 800d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d068:	bfbc      	itt	lt
 800d06a:	464b      	movlt	r3, r9
 800d06c:	46a1      	movlt	r9, r4
 800d06e:	4630      	mov	r0, r6
 800d070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d074:	bfba      	itte	lt
 800d076:	461c      	movlt	r4, r3
 800d078:	2501      	movlt	r5, #1
 800d07a:	2500      	movge	r5, #0
 800d07c:	f7ff fd48 	bl	800cb10 <_Balloc>
 800d080:	4602      	mov	r2, r0
 800d082:	b918      	cbnz	r0, 800d08c <__mdiff+0x60>
 800d084:	4b31      	ldr	r3, [pc, #196]	@ (800d14c <__mdiff+0x120>)
 800d086:	f240 2145 	movw	r1, #581	@ 0x245
 800d08a:	e7e3      	b.n	800d054 <__mdiff+0x28>
 800d08c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d090:	6926      	ldr	r6, [r4, #16]
 800d092:	60c5      	str	r5, [r0, #12]
 800d094:	f109 0310 	add.w	r3, r9, #16
 800d098:	f109 0514 	add.w	r5, r9, #20
 800d09c:	f104 0e14 	add.w	lr, r4, #20
 800d0a0:	f100 0b14 	add.w	fp, r0, #20
 800d0a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	46d9      	mov	r9, fp
 800d0b0:	f04f 0c00 	mov.w	ip, #0
 800d0b4:	9b01      	ldr	r3, [sp, #4]
 800d0b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	fa1f f38a 	uxth.w	r3, sl
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	b283      	uxth	r3, r0
 800d0c8:	1acb      	subs	r3, r1, r3
 800d0ca:	0c00      	lsrs	r0, r0, #16
 800d0cc:	4463      	add	r3, ip
 800d0ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0dc:	4576      	cmp	r6, lr
 800d0de:	f849 3b04 	str.w	r3, [r9], #4
 800d0e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0e6:	d8e5      	bhi.n	800d0b4 <__mdiff+0x88>
 800d0e8:	1b33      	subs	r3, r6, r4
 800d0ea:	3b15      	subs	r3, #21
 800d0ec:	f023 0303 	bic.w	r3, r3, #3
 800d0f0:	3415      	adds	r4, #21
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	42a6      	cmp	r6, r4
 800d0f6:	bf38      	it	cc
 800d0f8:	2304      	movcc	r3, #4
 800d0fa:	441d      	add	r5, r3
 800d0fc:	445b      	add	r3, fp
 800d0fe:	461e      	mov	r6, r3
 800d100:	462c      	mov	r4, r5
 800d102:	4544      	cmp	r4, r8
 800d104:	d30e      	bcc.n	800d124 <__mdiff+0xf8>
 800d106:	f108 0103 	add.w	r1, r8, #3
 800d10a:	1b49      	subs	r1, r1, r5
 800d10c:	f021 0103 	bic.w	r1, r1, #3
 800d110:	3d03      	subs	r5, #3
 800d112:	45a8      	cmp	r8, r5
 800d114:	bf38      	it	cc
 800d116:	2100      	movcc	r1, #0
 800d118:	440b      	add	r3, r1
 800d11a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d11e:	b191      	cbz	r1, 800d146 <__mdiff+0x11a>
 800d120:	6117      	str	r7, [r2, #16]
 800d122:	e79d      	b.n	800d060 <__mdiff+0x34>
 800d124:	f854 1b04 	ldr.w	r1, [r4], #4
 800d128:	46e6      	mov	lr, ip
 800d12a:	0c08      	lsrs	r0, r1, #16
 800d12c:	fa1c fc81 	uxtah	ip, ip, r1
 800d130:	4471      	add	r1, lr
 800d132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d13c:	f846 1b04 	str.w	r1, [r6], #4
 800d140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d144:	e7dd      	b.n	800d102 <__mdiff+0xd6>
 800d146:	3f01      	subs	r7, #1
 800d148:	e7e7      	b.n	800d11a <__mdiff+0xee>
 800d14a:	bf00      	nop
 800d14c:	0800e5ec 	.word	0x0800e5ec
 800d150:	0800e5fd 	.word	0x0800e5fd

0800d154 <__d2b>:
 800d154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d158:	460f      	mov	r7, r1
 800d15a:	2101      	movs	r1, #1
 800d15c:	ec59 8b10 	vmov	r8, r9, d0
 800d160:	4616      	mov	r6, r2
 800d162:	f7ff fcd5 	bl	800cb10 <_Balloc>
 800d166:	4604      	mov	r4, r0
 800d168:	b930      	cbnz	r0, 800d178 <__d2b+0x24>
 800d16a:	4602      	mov	r2, r0
 800d16c:	4b23      	ldr	r3, [pc, #140]	@ (800d1fc <__d2b+0xa8>)
 800d16e:	4824      	ldr	r0, [pc, #144]	@ (800d200 <__d2b+0xac>)
 800d170:	f240 310f 	movw	r1, #783	@ 0x30f
 800d174:	f000 fb0a 	bl	800d78c <__assert_func>
 800d178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d17c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d180:	b10d      	cbz	r5, 800d186 <__d2b+0x32>
 800d182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d186:	9301      	str	r3, [sp, #4]
 800d188:	f1b8 0300 	subs.w	r3, r8, #0
 800d18c:	d023      	beq.n	800d1d6 <__d2b+0x82>
 800d18e:	4668      	mov	r0, sp
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	f7ff fd84 	bl	800cc9e <__lo0bits>
 800d196:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d19a:	b1d0      	cbz	r0, 800d1d2 <__d2b+0x7e>
 800d19c:	f1c0 0320 	rsb	r3, r0, #32
 800d1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a4:	430b      	orrs	r3, r1
 800d1a6:	40c2      	lsrs	r2, r0
 800d1a8:	6163      	str	r3, [r4, #20]
 800d1aa:	9201      	str	r2, [sp, #4]
 800d1ac:	9b01      	ldr	r3, [sp, #4]
 800d1ae:	61a3      	str	r3, [r4, #24]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bf0c      	ite	eq
 800d1b4:	2201      	moveq	r2, #1
 800d1b6:	2202      	movne	r2, #2
 800d1b8:	6122      	str	r2, [r4, #16]
 800d1ba:	b1a5      	cbz	r5, 800d1e6 <__d2b+0x92>
 800d1bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1c0:	4405      	add	r5, r0
 800d1c2:	603d      	str	r5, [r7, #0]
 800d1c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1c8:	6030      	str	r0, [r6, #0]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	b003      	add	sp, #12
 800d1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	6161      	str	r1, [r4, #20]
 800d1d4:	e7ea      	b.n	800d1ac <__d2b+0x58>
 800d1d6:	a801      	add	r0, sp, #4
 800d1d8:	f7ff fd61 	bl	800cc9e <__lo0bits>
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	6163      	str	r3, [r4, #20]
 800d1e0:	3020      	adds	r0, #32
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	e7e8      	b.n	800d1b8 <__d2b+0x64>
 800d1e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1ee:	6038      	str	r0, [r7, #0]
 800d1f0:	6918      	ldr	r0, [r3, #16]
 800d1f2:	f7ff fd35 	bl	800cc60 <__hi0bits>
 800d1f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1fa:	e7e5      	b.n	800d1c8 <__d2b+0x74>
 800d1fc:	0800e5ec 	.word	0x0800e5ec
 800d200:	0800e5fd 	.word	0x0800e5fd

0800d204 <__sfputc_r>:
 800d204:	6893      	ldr	r3, [r2, #8]
 800d206:	3b01      	subs	r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	b410      	push	{r4}
 800d20c:	6093      	str	r3, [r2, #8]
 800d20e:	da08      	bge.n	800d222 <__sfputc_r+0x1e>
 800d210:	6994      	ldr	r4, [r2, #24]
 800d212:	42a3      	cmp	r3, r4
 800d214:	db01      	blt.n	800d21a <__sfputc_r+0x16>
 800d216:	290a      	cmp	r1, #10
 800d218:	d103      	bne.n	800d222 <__sfputc_r+0x1e>
 800d21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21e:	f7fe bc08 	b.w	800ba32 <__swbuf_r>
 800d222:	6813      	ldr	r3, [r2, #0]
 800d224:	1c58      	adds	r0, r3, #1
 800d226:	6010      	str	r0, [r2, #0]
 800d228:	7019      	strb	r1, [r3, #0]
 800d22a:	4608      	mov	r0, r1
 800d22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <__sfputs_r>:
 800d232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	4614      	mov	r4, r2
 800d23a:	18d5      	adds	r5, r2, r3
 800d23c:	42ac      	cmp	r4, r5
 800d23e:	d101      	bne.n	800d244 <__sfputs_r+0x12>
 800d240:	2000      	movs	r0, #0
 800d242:	e007      	b.n	800d254 <__sfputs_r+0x22>
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	463a      	mov	r2, r7
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ffda 	bl	800d204 <__sfputc_r>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d1f3      	bne.n	800d23c <__sfputs_r+0xa>
 800d254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d258 <_vfiprintf_r>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	460d      	mov	r5, r1
 800d25e:	b09d      	sub	sp, #116	@ 0x74
 800d260:	4614      	mov	r4, r2
 800d262:	4698      	mov	r8, r3
 800d264:	4606      	mov	r6, r0
 800d266:	b118      	cbz	r0, 800d270 <_vfiprintf_r+0x18>
 800d268:	6a03      	ldr	r3, [r0, #32]
 800d26a:	b90b      	cbnz	r3, 800d270 <_vfiprintf_r+0x18>
 800d26c:	f7fe faf0 	bl	800b850 <__sinit>
 800d270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	d405      	bmi.n	800d282 <_vfiprintf_r+0x2a>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	059a      	lsls	r2, r3, #22
 800d27a:	d402      	bmi.n	800d282 <_vfiprintf_r+0x2a>
 800d27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d27e:	f7fe fcea 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	071b      	lsls	r3, r3, #28
 800d286:	d501      	bpl.n	800d28c <_vfiprintf_r+0x34>
 800d288:	692b      	ldr	r3, [r5, #16]
 800d28a:	b99b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x5c>
 800d28c:	4629      	mov	r1, r5
 800d28e:	4630      	mov	r0, r6
 800d290:	f7fe fc0e 	bl	800bab0 <__swsetup_r>
 800d294:	b170      	cbz	r0, 800d2b4 <_vfiprintf_r+0x5c>
 800d296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d298:	07dc      	lsls	r4, r3, #31
 800d29a:	d504      	bpl.n	800d2a6 <_vfiprintf_r+0x4e>
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a0:	b01d      	add	sp, #116	@ 0x74
 800d2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	0598      	lsls	r0, r3, #22
 800d2aa:	d4f7      	bmi.n	800d29c <_vfiprintf_r+0x44>
 800d2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ae:	f7fe fcd3 	bl	800bc58 <__retarget_lock_release_recursive>
 800d2b2:	e7f3      	b.n	800d29c <_vfiprintf_r+0x44>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b8:	2320      	movs	r3, #32
 800d2ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2c2:	2330      	movs	r3, #48	@ 0x30
 800d2c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d474 <_vfiprintf_r+0x21c>
 800d2c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2cc:	f04f 0901 	mov.w	r9, #1
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	469a      	mov	sl, r3
 800d2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d8:	b10a      	cbz	r2, 800d2de <_vfiprintf_r+0x86>
 800d2da:	2a25      	cmp	r2, #37	@ 0x25
 800d2dc:	d1f9      	bne.n	800d2d2 <_vfiprintf_r+0x7a>
 800d2de:	ebba 0b04 	subs.w	fp, sl, r4
 800d2e2:	d00b      	beq.n	800d2fc <_vfiprintf_r+0xa4>
 800d2e4:	465b      	mov	r3, fp
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7ff ffa1 	bl	800d232 <__sfputs_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	f000 80a7 	beq.w	800d444 <_vfiprintf_r+0x1ec>
 800d2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2f8:	445a      	add	r2, fp
 800d2fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 809f 	beq.w	800d444 <_vfiprintf_r+0x1ec>
 800d306:	2300      	movs	r3, #0
 800d308:	f04f 32ff 	mov.w	r2, #4294967295
 800d30c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d310:	f10a 0a01 	add.w	sl, sl, #1
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	9307      	str	r3, [sp, #28]
 800d318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d31c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d31e:	4654      	mov	r4, sl
 800d320:	2205      	movs	r2, #5
 800d322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d326:	4853      	ldr	r0, [pc, #332]	@ (800d474 <_vfiprintf_r+0x21c>)
 800d328:	f7f2 ff52 	bl	80001d0 <memchr>
 800d32c:	9a04      	ldr	r2, [sp, #16]
 800d32e:	b9d8      	cbnz	r0, 800d368 <_vfiprintf_r+0x110>
 800d330:	06d1      	lsls	r1, r2, #27
 800d332:	bf44      	itt	mi
 800d334:	2320      	movmi	r3, #32
 800d336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d33a:	0713      	lsls	r3, r2, #28
 800d33c:	bf44      	itt	mi
 800d33e:	232b      	movmi	r3, #43	@ 0x2b
 800d340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d344:	f89a 3000 	ldrb.w	r3, [sl]
 800d348:	2b2a      	cmp	r3, #42	@ 0x2a
 800d34a:	d015      	beq.n	800d378 <_vfiprintf_r+0x120>
 800d34c:	9a07      	ldr	r2, [sp, #28]
 800d34e:	4654      	mov	r4, sl
 800d350:	2000      	movs	r0, #0
 800d352:	f04f 0c0a 	mov.w	ip, #10
 800d356:	4621      	mov	r1, r4
 800d358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d35c:	3b30      	subs	r3, #48	@ 0x30
 800d35e:	2b09      	cmp	r3, #9
 800d360:	d94b      	bls.n	800d3fa <_vfiprintf_r+0x1a2>
 800d362:	b1b0      	cbz	r0, 800d392 <_vfiprintf_r+0x13a>
 800d364:	9207      	str	r2, [sp, #28]
 800d366:	e014      	b.n	800d392 <_vfiprintf_r+0x13a>
 800d368:	eba0 0308 	sub.w	r3, r0, r8
 800d36c:	fa09 f303 	lsl.w	r3, r9, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	9304      	str	r3, [sp, #16]
 800d374:	46a2      	mov	sl, r4
 800d376:	e7d2      	b.n	800d31e <_vfiprintf_r+0xc6>
 800d378:	9b03      	ldr	r3, [sp, #12]
 800d37a:	1d19      	adds	r1, r3, #4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	9103      	str	r1, [sp, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	bfbb      	ittet	lt
 800d384:	425b      	neglt	r3, r3
 800d386:	f042 0202 	orrlt.w	r2, r2, #2
 800d38a:	9307      	strge	r3, [sp, #28]
 800d38c:	9307      	strlt	r3, [sp, #28]
 800d38e:	bfb8      	it	lt
 800d390:	9204      	strlt	r2, [sp, #16]
 800d392:	7823      	ldrb	r3, [r4, #0]
 800d394:	2b2e      	cmp	r3, #46	@ 0x2e
 800d396:	d10a      	bne.n	800d3ae <_vfiprintf_r+0x156>
 800d398:	7863      	ldrb	r3, [r4, #1]
 800d39a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d39c:	d132      	bne.n	800d404 <_vfiprintf_r+0x1ac>
 800d39e:	9b03      	ldr	r3, [sp, #12]
 800d3a0:	1d1a      	adds	r2, r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	9203      	str	r2, [sp, #12]
 800d3a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3aa:	3402      	adds	r4, #2
 800d3ac:	9305      	str	r3, [sp, #20]
 800d3ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d484 <_vfiprintf_r+0x22c>
 800d3b2:	7821      	ldrb	r1, [r4, #0]
 800d3b4:	2203      	movs	r2, #3
 800d3b6:	4650      	mov	r0, sl
 800d3b8:	f7f2 ff0a 	bl	80001d0 <memchr>
 800d3bc:	b138      	cbz	r0, 800d3ce <_vfiprintf_r+0x176>
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	eba0 000a 	sub.w	r0, r0, sl
 800d3c4:	2240      	movs	r2, #64	@ 0x40
 800d3c6:	4082      	lsls	r2, r0
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9304      	str	r3, [sp, #16]
 800d3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d2:	4829      	ldr	r0, [pc, #164]	@ (800d478 <_vfiprintf_r+0x220>)
 800d3d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3d8:	2206      	movs	r2, #6
 800d3da:	f7f2 fef9 	bl	80001d0 <memchr>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d03f      	beq.n	800d462 <_vfiprintf_r+0x20a>
 800d3e2:	4b26      	ldr	r3, [pc, #152]	@ (800d47c <_vfiprintf_r+0x224>)
 800d3e4:	bb1b      	cbnz	r3, 800d42e <_vfiprintf_r+0x1d6>
 800d3e6:	9b03      	ldr	r3, [sp, #12]
 800d3e8:	3307      	adds	r3, #7
 800d3ea:	f023 0307 	bic.w	r3, r3, #7
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	9303      	str	r3, [sp, #12]
 800d3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f4:	443b      	add	r3, r7
 800d3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f8:	e76a      	b.n	800d2d0 <_vfiprintf_r+0x78>
 800d3fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fe:	460c      	mov	r4, r1
 800d400:	2001      	movs	r0, #1
 800d402:	e7a8      	b.n	800d356 <_vfiprintf_r+0xfe>
 800d404:	2300      	movs	r3, #0
 800d406:	3401      	adds	r4, #1
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	4619      	mov	r1, r3
 800d40c:	f04f 0c0a 	mov.w	ip, #10
 800d410:	4620      	mov	r0, r4
 800d412:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d416:	3a30      	subs	r2, #48	@ 0x30
 800d418:	2a09      	cmp	r2, #9
 800d41a:	d903      	bls.n	800d424 <_vfiprintf_r+0x1cc>
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0c6      	beq.n	800d3ae <_vfiprintf_r+0x156>
 800d420:	9105      	str	r1, [sp, #20]
 800d422:	e7c4      	b.n	800d3ae <_vfiprintf_r+0x156>
 800d424:	fb0c 2101 	mla	r1, ip, r1, r2
 800d428:	4604      	mov	r4, r0
 800d42a:	2301      	movs	r3, #1
 800d42c:	e7f0      	b.n	800d410 <_vfiprintf_r+0x1b8>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b12      	ldr	r3, [pc, #72]	@ (800d480 <_vfiprintf_r+0x228>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4630      	mov	r0, r6
 800d43a:	f7fd fdc7 	bl	800afcc <_printf_float>
 800d43e:	4607      	mov	r7, r0
 800d440:	1c78      	adds	r0, r7, #1
 800d442:	d1d6      	bne.n	800d3f2 <_vfiprintf_r+0x19a>
 800d444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d446:	07d9      	lsls	r1, r3, #31
 800d448:	d405      	bmi.n	800d456 <_vfiprintf_r+0x1fe>
 800d44a:	89ab      	ldrh	r3, [r5, #12]
 800d44c:	059a      	lsls	r2, r3, #22
 800d44e:	d402      	bmi.n	800d456 <_vfiprintf_r+0x1fe>
 800d450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d452:	f7fe fc01 	bl	800bc58 <__retarget_lock_release_recursive>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	065b      	lsls	r3, r3, #25
 800d45a:	f53f af1f 	bmi.w	800d29c <_vfiprintf_r+0x44>
 800d45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d460:	e71e      	b.n	800d2a0 <_vfiprintf_r+0x48>
 800d462:	ab03      	add	r3, sp, #12
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	462a      	mov	r2, r5
 800d468:	4b05      	ldr	r3, [pc, #20]	@ (800d480 <_vfiprintf_r+0x228>)
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7fe f845 	bl	800b4fc <_printf_i>
 800d472:	e7e4      	b.n	800d43e <_vfiprintf_r+0x1e6>
 800d474:	0800e656 	.word	0x0800e656
 800d478:	0800e660 	.word	0x0800e660
 800d47c:	0800afcd 	.word	0x0800afcd
 800d480:	0800d233 	.word	0x0800d233
 800d484:	0800e65c 	.word	0x0800e65c

0800d488 <__sflush_r>:
 800d488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	0716      	lsls	r6, r2, #28
 800d492:	4605      	mov	r5, r0
 800d494:	460c      	mov	r4, r1
 800d496:	d454      	bmi.n	800d542 <__sflush_r+0xba>
 800d498:	684b      	ldr	r3, [r1, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	dc02      	bgt.n	800d4a4 <__sflush_r+0x1c>
 800d49e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dd48      	ble.n	800d536 <__sflush_r+0xae>
 800d4a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d045      	beq.n	800d536 <__sflush_r+0xae>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4b0:	682f      	ldr	r7, [r5, #0]
 800d4b2:	6a21      	ldr	r1, [r4, #32]
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	d030      	beq.n	800d51a <__sflush_r+0x92>
 800d4b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	0759      	lsls	r1, r3, #29
 800d4be:	d505      	bpl.n	800d4cc <__sflush_r+0x44>
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	1ad2      	subs	r2, r2, r3
 800d4c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4c6:	b10b      	cbz	r3, 800d4cc <__sflush_r+0x44>
 800d4c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4ca:	1ad2      	subs	r2, r2, r3
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4d0:	6a21      	ldr	r1, [r4, #32]
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b0      	blx	r6
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	d106      	bne.n	800d4ea <__sflush_r+0x62>
 800d4dc:	6829      	ldr	r1, [r5, #0]
 800d4de:	291d      	cmp	r1, #29
 800d4e0:	d82b      	bhi.n	800d53a <__sflush_r+0xb2>
 800d4e2:	4a2a      	ldr	r2, [pc, #168]	@ (800d58c <__sflush_r+0x104>)
 800d4e4:	40ca      	lsrs	r2, r1
 800d4e6:	07d6      	lsls	r6, r2, #31
 800d4e8:	d527      	bpl.n	800d53a <__sflush_r+0xb2>
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	6062      	str	r2, [r4, #4]
 800d4ee:	04d9      	lsls	r1, r3, #19
 800d4f0:	6922      	ldr	r2, [r4, #16]
 800d4f2:	6022      	str	r2, [r4, #0]
 800d4f4:	d504      	bpl.n	800d500 <__sflush_r+0x78>
 800d4f6:	1c42      	adds	r2, r0, #1
 800d4f8:	d101      	bne.n	800d4fe <__sflush_r+0x76>
 800d4fa:	682b      	ldr	r3, [r5, #0]
 800d4fc:	b903      	cbnz	r3, 800d500 <__sflush_r+0x78>
 800d4fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800d500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d502:	602f      	str	r7, [r5, #0]
 800d504:	b1b9      	cbz	r1, 800d536 <__sflush_r+0xae>
 800d506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d50a:	4299      	cmp	r1, r3
 800d50c:	d002      	beq.n	800d514 <__sflush_r+0x8c>
 800d50e:	4628      	mov	r0, r5
 800d510:	f7ff f9fe 	bl	800c910 <_free_r>
 800d514:	2300      	movs	r3, #0
 800d516:	6363      	str	r3, [r4, #52]	@ 0x34
 800d518:	e00d      	b.n	800d536 <__sflush_r+0xae>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b0      	blx	r6
 800d520:	4602      	mov	r2, r0
 800d522:	1c50      	adds	r0, r2, #1
 800d524:	d1c9      	bne.n	800d4ba <__sflush_r+0x32>
 800d526:	682b      	ldr	r3, [r5, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d0c6      	beq.n	800d4ba <__sflush_r+0x32>
 800d52c:	2b1d      	cmp	r3, #29
 800d52e:	d001      	beq.n	800d534 <__sflush_r+0xac>
 800d530:	2b16      	cmp	r3, #22
 800d532:	d11e      	bne.n	800d572 <__sflush_r+0xea>
 800d534:	602f      	str	r7, [r5, #0]
 800d536:	2000      	movs	r0, #0
 800d538:	e022      	b.n	800d580 <__sflush_r+0xf8>
 800d53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d53e:	b21b      	sxth	r3, r3
 800d540:	e01b      	b.n	800d57a <__sflush_r+0xf2>
 800d542:	690f      	ldr	r7, [r1, #16]
 800d544:	2f00      	cmp	r7, #0
 800d546:	d0f6      	beq.n	800d536 <__sflush_r+0xae>
 800d548:	0793      	lsls	r3, r2, #30
 800d54a:	680e      	ldr	r6, [r1, #0]
 800d54c:	bf08      	it	eq
 800d54e:	694b      	ldreq	r3, [r1, #20]
 800d550:	600f      	str	r7, [r1, #0]
 800d552:	bf18      	it	ne
 800d554:	2300      	movne	r3, #0
 800d556:	eba6 0807 	sub.w	r8, r6, r7
 800d55a:	608b      	str	r3, [r1, #8]
 800d55c:	f1b8 0f00 	cmp.w	r8, #0
 800d560:	dde9      	ble.n	800d536 <__sflush_r+0xae>
 800d562:	6a21      	ldr	r1, [r4, #32]
 800d564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d566:	4643      	mov	r3, r8
 800d568:	463a      	mov	r2, r7
 800d56a:	4628      	mov	r0, r5
 800d56c:	47b0      	blx	r6
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc08      	bgt.n	800d584 <__sflush_r+0xfc>
 800d572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	4407      	add	r7, r0
 800d586:	eba8 0800 	sub.w	r8, r8, r0
 800d58a:	e7e7      	b.n	800d55c <__sflush_r+0xd4>
 800d58c:	20400001 	.word	0x20400001

0800d590 <_fflush_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	690b      	ldr	r3, [r1, #16]
 800d594:	4605      	mov	r5, r0
 800d596:	460c      	mov	r4, r1
 800d598:	b913      	cbnz	r3, 800d5a0 <_fflush_r+0x10>
 800d59a:	2500      	movs	r5, #0
 800d59c:	4628      	mov	r0, r5
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	b118      	cbz	r0, 800d5aa <_fflush_r+0x1a>
 800d5a2:	6a03      	ldr	r3, [r0, #32]
 800d5a4:	b90b      	cbnz	r3, 800d5aa <_fflush_r+0x1a>
 800d5a6:	f7fe f953 	bl	800b850 <__sinit>
 800d5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0f3      	beq.n	800d59a <_fflush_r+0xa>
 800d5b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5b4:	07d0      	lsls	r0, r2, #31
 800d5b6:	d404      	bmi.n	800d5c2 <_fflush_r+0x32>
 800d5b8:	0599      	lsls	r1, r3, #22
 800d5ba:	d402      	bmi.n	800d5c2 <_fflush_r+0x32>
 800d5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5be:	f7fe fb4a 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	f7ff ff5f 	bl	800d488 <__sflush_r>
 800d5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5cc:	07da      	lsls	r2, r3, #31
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	d4e4      	bmi.n	800d59c <_fflush_r+0xc>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	059b      	lsls	r3, r3, #22
 800d5d6:	d4e1      	bmi.n	800d59c <_fflush_r+0xc>
 800d5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5da:	f7fe fb3d 	bl	800bc58 <__retarget_lock_release_recursive>
 800d5de:	e7dd      	b.n	800d59c <_fflush_r+0xc>

0800d5e0 <__swhatbuf_r>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	b096      	sub	sp, #88	@ 0x58
 800d5ec:	4615      	mov	r5, r2
 800d5ee:	461e      	mov	r6, r3
 800d5f0:	da0d      	bge.n	800d60e <__swhatbuf_r+0x2e>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5f8:	f04f 0100 	mov.w	r1, #0
 800d5fc:	bf14      	ite	ne
 800d5fe:	2340      	movne	r3, #64	@ 0x40
 800d600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d604:	2000      	movs	r0, #0
 800d606:	6031      	str	r1, [r6, #0]
 800d608:	602b      	str	r3, [r5, #0]
 800d60a:	b016      	add	sp, #88	@ 0x58
 800d60c:	bd70      	pop	{r4, r5, r6, pc}
 800d60e:	466a      	mov	r2, sp
 800d610:	f000 f87c 	bl	800d70c <_fstat_r>
 800d614:	2800      	cmp	r0, #0
 800d616:	dbec      	blt.n	800d5f2 <__swhatbuf_r+0x12>
 800d618:	9901      	ldr	r1, [sp, #4]
 800d61a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d61e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d622:	4259      	negs	r1, r3
 800d624:	4159      	adcs	r1, r3
 800d626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d62a:	e7eb      	b.n	800d604 <__swhatbuf_r+0x24>

0800d62c <__smakebuf_r>:
 800d62c:	898b      	ldrh	r3, [r1, #12]
 800d62e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d630:	079d      	lsls	r5, r3, #30
 800d632:	4606      	mov	r6, r0
 800d634:	460c      	mov	r4, r1
 800d636:	d507      	bpl.n	800d648 <__smakebuf_r+0x1c>
 800d638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	2301      	movs	r3, #1
 800d642:	6163      	str	r3, [r4, #20]
 800d644:	b003      	add	sp, #12
 800d646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d648:	ab01      	add	r3, sp, #4
 800d64a:	466a      	mov	r2, sp
 800d64c:	f7ff ffc8 	bl	800d5e0 <__swhatbuf_r>
 800d650:	9f00      	ldr	r7, [sp, #0]
 800d652:	4605      	mov	r5, r0
 800d654:	4639      	mov	r1, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff f9ce 	bl	800c9f8 <_malloc_r>
 800d65c:	b948      	cbnz	r0, 800d672 <__smakebuf_r+0x46>
 800d65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d662:	059a      	lsls	r2, r3, #22
 800d664:	d4ee      	bmi.n	800d644 <__smakebuf_r+0x18>
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	f043 0302 	orr.w	r3, r3, #2
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	e7e2      	b.n	800d638 <__smakebuf_r+0xc>
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	6020      	str	r0, [r4, #0]
 800d676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	9b01      	ldr	r3, [sp, #4]
 800d67e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d682:	b15b      	cbz	r3, 800d69c <__smakebuf_r+0x70>
 800d684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d688:	4630      	mov	r0, r6
 800d68a:	f000 f851 	bl	800d730 <_isatty_r>
 800d68e:	b128      	cbz	r0, 800d69c <__smakebuf_r+0x70>
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	f043 0301 	orr.w	r3, r3, #1
 800d69a:	81a3      	strh	r3, [r4, #12]
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	431d      	orrs	r5, r3
 800d6a0:	81a5      	strh	r5, [r4, #12]
 800d6a2:	e7cf      	b.n	800d644 <__smakebuf_r+0x18>

0800d6a4 <_putc_r>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	460d      	mov	r5, r1
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	b118      	cbz	r0, 800d6b6 <_putc_r+0x12>
 800d6ae:	6a03      	ldr	r3, [r0, #32]
 800d6b0:	b90b      	cbnz	r3, 800d6b6 <_putc_r+0x12>
 800d6b2:	f7fe f8cd 	bl	800b850 <__sinit>
 800d6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6b8:	07d8      	lsls	r0, r3, #31
 800d6ba:	d405      	bmi.n	800d6c8 <_putc_r+0x24>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	0599      	lsls	r1, r3, #22
 800d6c0:	d402      	bmi.n	800d6c8 <_putc_r+0x24>
 800d6c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6c4:	f7fe fac7 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	60a3      	str	r3, [r4, #8]
 800d6d0:	da05      	bge.n	800d6de <_putc_r+0x3a>
 800d6d2:	69a2      	ldr	r2, [r4, #24]
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	db12      	blt.n	800d6fe <_putc_r+0x5a>
 800d6d8:	b2eb      	uxtb	r3, r5
 800d6da:	2b0a      	cmp	r3, #10
 800d6dc:	d00f      	beq.n	800d6fe <_putc_r+0x5a>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	6022      	str	r2, [r4, #0]
 800d6e4:	701d      	strb	r5, [r3, #0]
 800d6e6:	b2ed      	uxtb	r5, r5
 800d6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6ea:	07da      	lsls	r2, r3, #31
 800d6ec:	d405      	bmi.n	800d6fa <_putc_r+0x56>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	059b      	lsls	r3, r3, #22
 800d6f2:	d402      	bmi.n	800d6fa <_putc_r+0x56>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f6:	f7fe faaf 	bl	800bc58 <__retarget_lock_release_recursive>
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	bd70      	pop	{r4, r5, r6, pc}
 800d6fe:	4629      	mov	r1, r5
 800d700:	4622      	mov	r2, r4
 800d702:	4630      	mov	r0, r6
 800d704:	f7fe f995 	bl	800ba32 <__swbuf_r>
 800d708:	4605      	mov	r5, r0
 800d70a:	e7ed      	b.n	800d6e8 <_putc_r+0x44>

0800d70c <_fstat_r>:
 800d70c:	b538      	push	{r3, r4, r5, lr}
 800d70e:	4d07      	ldr	r5, [pc, #28]	@ (800d72c <_fstat_r+0x20>)
 800d710:	2300      	movs	r3, #0
 800d712:	4604      	mov	r4, r0
 800d714:	4608      	mov	r0, r1
 800d716:	4611      	mov	r1, r2
 800d718:	602b      	str	r3, [r5, #0]
 800d71a:	f7f5 fb03 	bl	8002d24 <_fstat>
 800d71e:	1c43      	adds	r3, r0, #1
 800d720:	d102      	bne.n	800d728 <_fstat_r+0x1c>
 800d722:	682b      	ldr	r3, [r5, #0]
 800d724:	b103      	cbz	r3, 800d728 <_fstat_r+0x1c>
 800d726:	6023      	str	r3, [r4, #0]
 800d728:	bd38      	pop	{r3, r4, r5, pc}
 800d72a:	bf00      	nop
 800d72c:	20002268 	.word	0x20002268

0800d730 <_isatty_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4d06      	ldr	r5, [pc, #24]	@ (800d74c <_isatty_r+0x1c>)
 800d734:	2300      	movs	r3, #0
 800d736:	4604      	mov	r4, r0
 800d738:	4608      	mov	r0, r1
 800d73a:	602b      	str	r3, [r5, #0]
 800d73c:	f7f5 fb02 	bl	8002d44 <_isatty>
 800d740:	1c43      	adds	r3, r0, #1
 800d742:	d102      	bne.n	800d74a <_isatty_r+0x1a>
 800d744:	682b      	ldr	r3, [r5, #0]
 800d746:	b103      	cbz	r3, 800d74a <_isatty_r+0x1a>
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	20002268 	.word	0x20002268

0800d750 <_sbrk_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4d06      	ldr	r5, [pc, #24]	@ (800d76c <_sbrk_r+0x1c>)
 800d754:	2300      	movs	r3, #0
 800d756:	4604      	mov	r4, r0
 800d758:	4608      	mov	r0, r1
 800d75a:	602b      	str	r3, [r5, #0]
 800d75c:	f7f5 fb0a 	bl	8002d74 <_sbrk>
 800d760:	1c43      	adds	r3, r0, #1
 800d762:	d102      	bne.n	800d76a <_sbrk_r+0x1a>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	b103      	cbz	r3, 800d76a <_sbrk_r+0x1a>
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	bd38      	pop	{r3, r4, r5, pc}
 800d76c:	20002268 	.word	0x20002268

0800d770 <memcpy>:
 800d770:	440a      	add	r2, r1
 800d772:	4291      	cmp	r1, r2
 800d774:	f100 33ff 	add.w	r3, r0, #4294967295
 800d778:	d100      	bne.n	800d77c <memcpy+0xc>
 800d77a:	4770      	bx	lr
 800d77c:	b510      	push	{r4, lr}
 800d77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d782:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d786:	4291      	cmp	r1, r2
 800d788:	d1f9      	bne.n	800d77e <memcpy+0xe>
 800d78a:	bd10      	pop	{r4, pc}

0800d78c <__assert_func>:
 800d78c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d78e:	4614      	mov	r4, r2
 800d790:	461a      	mov	r2, r3
 800d792:	4b09      	ldr	r3, [pc, #36]	@ (800d7b8 <__assert_func+0x2c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4605      	mov	r5, r0
 800d798:	68d8      	ldr	r0, [r3, #12]
 800d79a:	b14c      	cbz	r4, 800d7b0 <__assert_func+0x24>
 800d79c:	4b07      	ldr	r3, [pc, #28]	@ (800d7bc <__assert_func+0x30>)
 800d79e:	9100      	str	r1, [sp, #0]
 800d7a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7a4:	4906      	ldr	r1, [pc, #24]	@ (800d7c0 <__assert_func+0x34>)
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f000 f842 	bl	800d830 <fiprintf>
 800d7ac:	f000 f852 	bl	800d854 <abort>
 800d7b0:	4b04      	ldr	r3, [pc, #16]	@ (800d7c4 <__assert_func+0x38>)
 800d7b2:	461c      	mov	r4, r3
 800d7b4:	e7f3      	b.n	800d79e <__assert_func+0x12>
 800d7b6:	bf00      	nop
 800d7b8:	20000130 	.word	0x20000130
 800d7bc:	0800e671 	.word	0x0800e671
 800d7c0:	0800e67e 	.word	0x0800e67e
 800d7c4:	0800e6ac 	.word	0x0800e6ac

0800d7c8 <_calloc_r>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	fba1 5402 	umull	r5, r4, r1, r2
 800d7ce:	b934      	cbnz	r4, 800d7de <_calloc_r+0x16>
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	f7ff f911 	bl	800c9f8 <_malloc_r>
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	b928      	cbnz	r0, 800d7e6 <_calloc_r+0x1e>
 800d7da:	4630      	mov	r0, r6
 800d7dc:	bd70      	pop	{r4, r5, r6, pc}
 800d7de:	220c      	movs	r2, #12
 800d7e0:	6002      	str	r2, [r0, #0]
 800d7e2:	2600      	movs	r6, #0
 800d7e4:	e7f9      	b.n	800d7da <_calloc_r+0x12>
 800d7e6:	462a      	mov	r2, r5
 800d7e8:	4621      	mov	r1, r4
 800d7ea:	f7fe f9b7 	bl	800bb5c <memset>
 800d7ee:	e7f4      	b.n	800d7da <_calloc_r+0x12>

0800d7f0 <__ascii_mbtowc>:
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	b901      	cbnz	r1, 800d7f6 <__ascii_mbtowc+0x6>
 800d7f4:	a901      	add	r1, sp, #4
 800d7f6:	b142      	cbz	r2, 800d80a <__ascii_mbtowc+0x1a>
 800d7f8:	b14b      	cbz	r3, 800d80e <__ascii_mbtowc+0x1e>
 800d7fa:	7813      	ldrb	r3, [r2, #0]
 800d7fc:	600b      	str	r3, [r1, #0]
 800d7fe:	7812      	ldrb	r2, [r2, #0]
 800d800:	1e10      	subs	r0, r2, #0
 800d802:	bf18      	it	ne
 800d804:	2001      	movne	r0, #1
 800d806:	b002      	add	sp, #8
 800d808:	4770      	bx	lr
 800d80a:	4610      	mov	r0, r2
 800d80c:	e7fb      	b.n	800d806 <__ascii_mbtowc+0x16>
 800d80e:	f06f 0001 	mvn.w	r0, #1
 800d812:	e7f8      	b.n	800d806 <__ascii_mbtowc+0x16>

0800d814 <__ascii_wctomb>:
 800d814:	4603      	mov	r3, r0
 800d816:	4608      	mov	r0, r1
 800d818:	b141      	cbz	r1, 800d82c <__ascii_wctomb+0x18>
 800d81a:	2aff      	cmp	r2, #255	@ 0xff
 800d81c:	d904      	bls.n	800d828 <__ascii_wctomb+0x14>
 800d81e:	228a      	movs	r2, #138	@ 0x8a
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	f04f 30ff 	mov.w	r0, #4294967295
 800d826:	4770      	bx	lr
 800d828:	700a      	strb	r2, [r1, #0]
 800d82a:	2001      	movs	r0, #1
 800d82c:	4770      	bx	lr
	...

0800d830 <fiprintf>:
 800d830:	b40e      	push	{r1, r2, r3}
 800d832:	b503      	push	{r0, r1, lr}
 800d834:	4601      	mov	r1, r0
 800d836:	ab03      	add	r3, sp, #12
 800d838:	4805      	ldr	r0, [pc, #20]	@ (800d850 <fiprintf+0x20>)
 800d83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83e:	6800      	ldr	r0, [r0, #0]
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	f7ff fd09 	bl	800d258 <_vfiprintf_r>
 800d846:	b002      	add	sp, #8
 800d848:	f85d eb04 	ldr.w	lr, [sp], #4
 800d84c:	b003      	add	sp, #12
 800d84e:	4770      	bx	lr
 800d850:	20000130 	.word	0x20000130

0800d854 <abort>:
 800d854:	b508      	push	{r3, lr}
 800d856:	2006      	movs	r0, #6
 800d858:	f000 f82c 	bl	800d8b4 <raise>
 800d85c:	2001      	movs	r0, #1
 800d85e:	f7f5 fa2d 	bl	8002cbc <_exit>

0800d862 <_raise_r>:
 800d862:	291f      	cmp	r1, #31
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4605      	mov	r5, r0
 800d868:	460c      	mov	r4, r1
 800d86a:	d904      	bls.n	800d876 <_raise_r+0x14>
 800d86c:	2316      	movs	r3, #22
 800d86e:	6003      	str	r3, [r0, #0]
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d878:	b112      	cbz	r2, 800d880 <_raise_r+0x1e>
 800d87a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d87e:	b94b      	cbnz	r3, 800d894 <_raise_r+0x32>
 800d880:	4628      	mov	r0, r5
 800d882:	f000 f831 	bl	800d8e8 <_getpid_r>
 800d886:	4622      	mov	r2, r4
 800d888:	4601      	mov	r1, r0
 800d88a:	4628      	mov	r0, r5
 800d88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d890:	f000 b818 	b.w	800d8c4 <_kill_r>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d00a      	beq.n	800d8ae <_raise_r+0x4c>
 800d898:	1c59      	adds	r1, r3, #1
 800d89a:	d103      	bne.n	800d8a4 <_raise_r+0x42>
 800d89c:	2316      	movs	r3, #22
 800d89e:	6003      	str	r3, [r0, #0]
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	e7e7      	b.n	800d874 <_raise_r+0x12>
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	4798      	blx	r3
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	e7e0      	b.n	800d874 <_raise_r+0x12>
	...

0800d8b4 <raise>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <raise+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bfd2 	b.w	800d862 <_raise_r>
 800d8be:	bf00      	nop
 800d8c0:	20000130 	.word	0x20000130

0800d8c4 <_kill_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4d07      	ldr	r5, [pc, #28]	@ (800d8e4 <_kill_r+0x20>)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f7f5 f9e3 	bl	8002c9c <_kill>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	d102      	bne.n	800d8e0 <_kill_r+0x1c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	b103      	cbz	r3, 800d8e0 <_kill_r+0x1c>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20002268 	.word	0x20002268

0800d8e8 <_getpid_r>:
 800d8e8:	f7f5 b9d0 	b.w	8002c8c <_getpid>
 800d8ec:	0000      	movs	r0, r0
	...

0800d8f0 <exp>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	ed2d 8b02 	vpush	{d8}
 800d8f6:	ec55 4b10 	vmov	r4, r5, d0
 800d8fa:	f000 f895 	bl	800da28 <__ieee754_exp>
 800d8fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d902:	eef0 8a60 	vmov.f32	s17, s1
 800d906:	ec45 4b10 	vmov	d0, r4, r5
 800d90a:	f000 f877 	bl	800d9fc <finite>
 800d90e:	b168      	cbz	r0, 800d92c <exp+0x3c>
 800d910:	a317      	add	r3, pc, #92	@ (adr r3, 800d970 <exp+0x80>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	4620      	mov	r0, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	f7f3 f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800d91e:	b160      	cbz	r0, 800d93a <exp+0x4a>
 800d920:	f7fe f96e 	bl	800bc00 <__errno>
 800d924:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800d960 <exp+0x70>
 800d928:	2322      	movs	r3, #34	@ 0x22
 800d92a:	6003      	str	r3, [r0, #0]
 800d92c:	eeb0 0a48 	vmov.f32	s0, s16
 800d930:	eef0 0a68 	vmov.f32	s1, s17
 800d934:	ecbd 8b02 	vpop	{d8}
 800d938:	bd38      	pop	{r3, r4, r5, pc}
 800d93a:	a30f      	add	r3, pc, #60	@ (adr r3, 800d978 <exp+0x88>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	f7f3 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d0ef      	beq.n	800d92c <exp+0x3c>
 800d94c:	f7fe f958 	bl	800bc00 <__errno>
 800d950:	2322      	movs	r3, #34	@ 0x22
 800d952:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800d968 <exp+0x78>
 800d956:	6003      	str	r3, [r0, #0]
 800d958:	e7e8      	b.n	800d92c <exp+0x3c>
 800d95a:	bf00      	nop
 800d95c:	f3af 8000 	nop.w
 800d960:	00000000 	.word	0x00000000
 800d964:	7ff00000 	.word	0x7ff00000
	...
 800d970:	fefa39ef 	.word	0xfefa39ef
 800d974:	40862e42 	.word	0x40862e42
 800d978:	d52d3051 	.word	0xd52d3051
 800d97c:	c0874910 	.word	0xc0874910

0800d980 <log>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	ed2d 8b02 	vpush	{d8}
 800d986:	ec55 4b10 	vmov	r4, r5, d0
 800d98a:	f000 f9c9 	bl	800dd20 <__ieee754_log>
 800d98e:	4622      	mov	r2, r4
 800d990:	462b      	mov	r3, r5
 800d992:	4620      	mov	r0, r4
 800d994:	4629      	mov	r1, r5
 800d996:	eeb0 8a40 	vmov.f32	s16, s0
 800d99a:	eef0 8a60 	vmov.f32	s17, s1
 800d99e:	f7f3 f8c5 	bl	8000b2c <__aeabi_dcmpun>
 800d9a2:	b998      	cbnz	r0, 800d9cc <log+0x4c>
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f7f3 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800d9b0:	b960      	cbnz	r0, 800d9cc <log+0x4c>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f3 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9be:	b160      	cbz	r0, 800d9da <log+0x5a>
 800d9c0:	f7fe f91e 	bl	800bc00 <__errno>
 800d9c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d9f0 <log+0x70>
 800d9c8:	2322      	movs	r3, #34	@ 0x22
 800d9ca:	6003      	str	r3, [r0, #0]
 800d9cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d0:	eef0 0a68 	vmov.f32	s1, s17
 800d9d4:	ecbd 8b02 	vpop	{d8}
 800d9d8:	bd38      	pop	{r3, r4, r5, pc}
 800d9da:	f7fe f911 	bl	800bc00 <__errno>
 800d9de:	ecbd 8b02 	vpop	{d8}
 800d9e2:	2321      	movs	r3, #33	@ 0x21
 800d9e4:	6003      	str	r3, [r0, #0]
 800d9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ea:	4803      	ldr	r0, [pc, #12]	@ (800d9f8 <log+0x78>)
 800d9ec:	f000 b814 	b.w	800da18 <nan>
 800d9f0:	00000000 	.word	0x00000000
 800d9f4:	fff00000 	.word	0xfff00000
 800d9f8:	0800e6ac 	.word	0x0800e6ac

0800d9fc <finite>:
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	ed8d 0b00 	vstr	d0, [sp]
 800da02:	9801      	ldr	r0, [sp, #4]
 800da04:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800da08:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800da0c:	0fc0      	lsrs	r0, r0, #31
 800da0e:	b002      	add	sp, #8
 800da10:	4770      	bx	lr
 800da12:	0000      	movs	r0, r0
 800da14:	0000      	movs	r0, r0
	...

0800da18 <nan>:
 800da18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da20 <nan+0x8>
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	00000000 	.word	0x00000000
 800da24:	7ff80000 	.word	0x7ff80000

0800da28 <__ieee754_exp>:
 800da28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da2c:	ec55 4b10 	vmov	r4, r5, d0
 800da30:	49b1      	ldr	r1, [pc, #708]	@ (800dcf8 <__ieee754_exp+0x2d0>)
 800da32:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800da36:	428a      	cmp	r2, r1
 800da38:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800da3c:	d936      	bls.n	800daac <__ieee754_exp+0x84>
 800da3e:	49af      	ldr	r1, [pc, #700]	@ (800dcfc <__ieee754_exp+0x2d4>)
 800da40:	428a      	cmp	r2, r1
 800da42:	d914      	bls.n	800da6e <__ieee754_exp+0x46>
 800da44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800da48:	4323      	orrs	r3, r4
 800da4a:	4622      	mov	r2, r4
 800da4c:	d007      	beq.n	800da5e <__ieee754_exp+0x36>
 800da4e:	462b      	mov	r3, r5
 800da50:	4620      	mov	r0, r4
 800da52:	4629      	mov	r1, r5
 800da54:	f7f2 fc1a 	bl	800028c <__adddf3>
 800da58:	4604      	mov	r4, r0
 800da5a:	460d      	mov	r5, r1
 800da5c:	e002      	b.n	800da64 <__ieee754_exp+0x3c>
 800da5e:	2e00      	cmp	r6, #0
 800da60:	f040 8118 	bne.w	800dc94 <__ieee754_exp+0x26c>
 800da64:	ec45 4b10 	vmov	d0, r4, r5
 800da68:	b004      	add	sp, #16
 800da6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6e:	a38c      	add	r3, pc, #560	@ (adr r3, 800dca0 <__ieee754_exp+0x278>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	f7f3 f84e 	bl	8000b18 <__aeabi_dcmpgt>
 800da7c:	4607      	mov	r7, r0
 800da7e:	b128      	cbz	r0, 800da8c <__ieee754_exp+0x64>
 800da80:	2000      	movs	r0, #0
 800da82:	b004      	add	sp, #16
 800da84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	f000 bb36 	b.w	800e0f8 <__math_oflow>
 800da8c:	a386      	add	r3, pc, #536	@ (adr r3, 800dca8 <__ieee754_exp+0x280>)
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	4620      	mov	r0, r4
 800da94:	4629      	mov	r1, r5
 800da96:	f7f3 f821 	bl	8000adc <__aeabi_dcmplt>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	f000 8087 	beq.w	800dbae <__ieee754_exp+0x186>
 800daa0:	4638      	mov	r0, r7
 800daa2:	b004      	add	sp, #16
 800daa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daa8:	f000 bb1e 	b.w	800e0e8 <__math_uflow>
 800daac:	4b94      	ldr	r3, [pc, #592]	@ (800dd00 <__ieee754_exp+0x2d8>)
 800daae:	429a      	cmp	r2, r3
 800dab0:	f240 80a9 	bls.w	800dc06 <__ieee754_exp+0x1de>
 800dab4:	4b93      	ldr	r3, [pc, #588]	@ (800dd04 <__ieee754_exp+0x2dc>)
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d879      	bhi.n	800dbae <__ieee754_exp+0x186>
 800daba:	4b93      	ldr	r3, [pc, #588]	@ (800dd08 <__ieee754_exp+0x2e0>)
 800dabc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fbde 	bl	8000288 <__aeabi_dsub>
 800dacc:	4b8f      	ldr	r3, [pc, #572]	@ (800dd0c <__ieee754_exp+0x2e4>)
 800dace:	00f7      	lsls	r7, r6, #3
 800dad0:	443b      	add	r3, r7
 800dad2:	ed93 7b00 	vldr	d7, [r3]
 800dad6:	ed8d 7b00 	vstr	d7, [sp]
 800dada:	f086 0a01 	eor.w	sl, r6, #1
 800dade:	4680      	mov	r8, r0
 800dae0:	4689      	mov	r9, r1
 800dae2:	ebaa 0a06 	sub.w	sl, sl, r6
 800dae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fbcb 	bl	8000288 <__aeabi_dsub>
 800daf2:	4604      	mov	r4, r0
 800daf4:	460d      	mov	r5, r1
 800daf6:	4622      	mov	r2, r4
 800daf8:	462b      	mov	r3, r5
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7f2 fd7b 	bl	80005f8 <__aeabi_dmul>
 800db02:	a36b      	add	r3, pc, #428	@ (adr r3, 800dcb0 <__ieee754_exp+0x288>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	4606      	mov	r6, r0
 800db0a:	460f      	mov	r7, r1
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	a369      	add	r3, pc, #420	@ (adr r3, 800dcb8 <__ieee754_exp+0x290>)
 800db12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db16:	f7f2 fbb7 	bl	8000288 <__aeabi_dsub>
 800db1a:	4632      	mov	r2, r6
 800db1c:	463b      	mov	r3, r7
 800db1e:	f7f2 fd6b 	bl	80005f8 <__aeabi_dmul>
 800db22:	a367      	add	r3, pc, #412	@ (adr r3, 800dcc0 <__ieee754_exp+0x298>)
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	f7f2 fbb0 	bl	800028c <__adddf3>
 800db2c:	4632      	mov	r2, r6
 800db2e:	463b      	mov	r3, r7
 800db30:	f7f2 fd62 	bl	80005f8 <__aeabi_dmul>
 800db34:	a364      	add	r3, pc, #400	@ (adr r3, 800dcc8 <__ieee754_exp+0x2a0>)
 800db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3a:	f7f2 fba5 	bl	8000288 <__aeabi_dsub>
 800db3e:	4632      	mov	r2, r6
 800db40:	463b      	mov	r3, r7
 800db42:	f7f2 fd59 	bl	80005f8 <__aeabi_dmul>
 800db46:	a362      	add	r3, pc, #392	@ (adr r3, 800dcd0 <__ieee754_exp+0x2a8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	f7f2 fb9e 	bl	800028c <__adddf3>
 800db50:	4632      	mov	r2, r6
 800db52:	463b      	mov	r3, r7
 800db54:	f7f2 fd50 	bl	80005f8 <__aeabi_dmul>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4620      	mov	r0, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	f7f2 fb92 	bl	8000288 <__aeabi_dsub>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4606      	mov	r6, r0
 800db6a:	460f      	mov	r7, r1
 800db6c:	4620      	mov	r0, r4
 800db6e:	4629      	mov	r1, r5
 800db70:	f7f2 fd42 	bl	80005f8 <__aeabi_dmul>
 800db74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db78:	f1ba 0f00 	cmp.w	sl, #0
 800db7c:	d15c      	bne.n	800dc38 <__ieee754_exp+0x210>
 800db7e:	2200      	movs	r2, #0
 800db80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db84:	4630      	mov	r0, r6
 800db86:	4639      	mov	r1, r7
 800db88:	f7f2 fb7e 	bl	8000288 <__aeabi_dsub>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db94:	f7f2 fe5a 	bl	800084c <__aeabi_ddiv>
 800db98:	4622      	mov	r2, r4
 800db9a:	462b      	mov	r3, r5
 800db9c:	f7f2 fb74 	bl	8000288 <__aeabi_dsub>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	2000      	movs	r0, #0
 800dba6:	495a      	ldr	r1, [pc, #360]	@ (800dd10 <__ieee754_exp+0x2e8>)
 800dba8:	f7f2 fb6e 	bl	8000288 <__aeabi_dsub>
 800dbac:	e754      	b.n	800da58 <__ieee754_exp+0x30>
 800dbae:	4b59      	ldr	r3, [pc, #356]	@ (800dd14 <__ieee754_exp+0x2ec>)
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	a347      	add	r3, pc, #284	@ (adr r3, 800dcd8 <__ieee754_exp+0x2b0>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	f7f2 fd1b 	bl	80005f8 <__aeabi_dmul>
 800dbc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbc6:	f7f2 fb61 	bl	800028c <__adddf3>
 800dbca:	f7f2 ffc5 	bl	8000b58 <__aeabi_d2iz>
 800dbce:	4682      	mov	sl, r0
 800dbd0:	f7f2 fca8 	bl	8000524 <__aeabi_i2d>
 800dbd4:	a342      	add	r3, pc, #264	@ (adr r3, 800dce0 <__ieee754_exp+0x2b8>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460f      	mov	r7, r1
 800dbde:	f7f2 fd0b 	bl	80005f8 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f2 fb4d 	bl	8000288 <__aeabi_dsub>
 800dbee:	a33e      	add	r3, pc, #248	@ (adr r3, 800dce8 <__ieee754_exp+0x2c0>)
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	4680      	mov	r8, r0
 800dbf6:	4689      	mov	r9, r1
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	f7f2 fcfc 	bl	80005f8 <__aeabi_dmul>
 800dc00:	e9cd 0100 	strd	r0, r1, [sp]
 800dc04:	e76f      	b.n	800dae6 <__ieee754_exp+0xbe>
 800dc06:	4b44      	ldr	r3, [pc, #272]	@ (800dd18 <__ieee754_exp+0x2f0>)
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d810      	bhi.n	800dc2e <__ieee754_exp+0x206>
 800dc0c:	a338      	add	r3, pc, #224	@ (adr r3, 800dcf0 <__ieee754_exp+0x2c8>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 fb39 	bl	800028c <__adddf3>
 800dc1a:	4b3d      	ldr	r3, [pc, #244]	@ (800dd10 <__ieee754_exp+0x2e8>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f7f2 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 800dc22:	b138      	cbz	r0, 800dc34 <__ieee754_exp+0x20c>
 800dc24:	4b3a      	ldr	r3, [pc, #232]	@ (800dd10 <__ieee754_exp+0x2e8>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	4620      	mov	r0, r4
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	e712      	b.n	800da54 <__ieee754_exp+0x2c>
 800dc2e:	f04f 0a00 	mov.w	sl, #0
 800dc32:	e760      	b.n	800daf6 <__ieee754_exp+0xce>
 800dc34:	4682      	mov	sl, r0
 800dc36:	e75e      	b.n	800daf6 <__ieee754_exp+0xce>
 800dc38:	4632      	mov	r2, r6
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800dc42:	f7f2 fb21 	bl	8000288 <__aeabi_dsub>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc4e:	f7f2 fdfd 	bl	800084c <__aeabi_ddiv>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc5a:	f7f2 fb15 	bl	8000288 <__aeabi_dsub>
 800dc5e:	4642      	mov	r2, r8
 800dc60:	464b      	mov	r3, r9
 800dc62:	f7f2 fb11 	bl	8000288 <__aeabi_dsub>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	4928      	ldr	r1, [pc, #160]	@ (800dd10 <__ieee754_exp+0x2e8>)
 800dc6e:	f7f2 fb0b 	bl	8000288 <__aeabi_dsub>
 800dc72:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800dc76:	4592      	cmp	sl, r2
 800dc78:	db02      	blt.n	800dc80 <__ieee754_exp+0x258>
 800dc7a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dc7e:	e6eb      	b.n	800da58 <__ieee754_exp+0x30>
 800dc80:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800dc84:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800dc8e:	f7f2 fcb3 	bl	80005f8 <__aeabi_dmul>
 800dc92:	e6e1      	b.n	800da58 <__ieee754_exp+0x30>
 800dc94:	2400      	movs	r4, #0
 800dc96:	2500      	movs	r5, #0
 800dc98:	e6e4      	b.n	800da64 <__ieee754_exp+0x3c>
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w
 800dca0:	fefa39ef 	.word	0xfefa39ef
 800dca4:	40862e42 	.word	0x40862e42
 800dca8:	d52d3051 	.word	0xd52d3051
 800dcac:	c0874910 	.word	0xc0874910
 800dcb0:	72bea4d0 	.word	0x72bea4d0
 800dcb4:	3e663769 	.word	0x3e663769
 800dcb8:	c5d26bf1 	.word	0xc5d26bf1
 800dcbc:	3ebbbd41 	.word	0x3ebbbd41
 800dcc0:	af25de2c 	.word	0xaf25de2c
 800dcc4:	3f11566a 	.word	0x3f11566a
 800dcc8:	16bebd93 	.word	0x16bebd93
 800dccc:	3f66c16c 	.word	0x3f66c16c
 800dcd0:	5555553e 	.word	0x5555553e
 800dcd4:	3fc55555 	.word	0x3fc55555
 800dcd8:	652b82fe 	.word	0x652b82fe
 800dcdc:	3ff71547 	.word	0x3ff71547
 800dce0:	fee00000 	.word	0xfee00000
 800dce4:	3fe62e42 	.word	0x3fe62e42
 800dce8:	35793c76 	.word	0x35793c76
 800dcec:	3dea39ef 	.word	0x3dea39ef
 800dcf0:	8800759c 	.word	0x8800759c
 800dcf4:	7e37e43c 	.word	0x7e37e43c
 800dcf8:	40862e41 	.word	0x40862e41
 800dcfc:	7fefffff 	.word	0x7fefffff
 800dd00:	3fd62e42 	.word	0x3fd62e42
 800dd04:	3ff0a2b1 	.word	0x3ff0a2b1
 800dd08:	0800e8c8 	.word	0x0800e8c8
 800dd0c:	0800e8b8 	.word	0x0800e8b8
 800dd10:	3ff00000 	.word	0x3ff00000
 800dd14:	0800e8d8 	.word	0x0800e8d8
 800dd18:	3defffff 	.word	0x3defffff
 800dd1c:	00000000 	.word	0x00000000

0800dd20 <__ieee754_log>:
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	ec51 0b10 	vmov	r0, r1, d0
 800dd28:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800dd2c:	b087      	sub	sp, #28
 800dd2e:	460d      	mov	r5, r1
 800dd30:	da26      	bge.n	800dd80 <__ieee754_log+0x60>
 800dd32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dd36:	4303      	orrs	r3, r0
 800dd38:	4602      	mov	r2, r0
 800dd3a:	d10a      	bne.n	800dd52 <__ieee754_log+0x32>
 800dd3c:	49ce      	ldr	r1, [pc, #824]	@ (800e078 <__ieee754_log+0x358>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2300      	movs	r3, #0
 800dd42:	2000      	movs	r0, #0
 800dd44:	f7f2 fd82 	bl	800084c <__aeabi_ddiv>
 800dd48:	ec41 0b10 	vmov	d0, r0, r1
 800dd4c:	b007      	add	sp, #28
 800dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd52:	2900      	cmp	r1, #0
 800dd54:	da05      	bge.n	800dd62 <__ieee754_log+0x42>
 800dd56:	460b      	mov	r3, r1
 800dd58:	f7f2 fa96 	bl	8000288 <__aeabi_dsub>
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e7f0      	b.n	800dd44 <__ieee754_log+0x24>
 800dd62:	4bc6      	ldr	r3, [pc, #792]	@ (800e07c <__ieee754_log+0x35c>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	f7f2 fc47 	bl	80005f8 <__aeabi_dmul>
 800dd6a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800dd6e:	460d      	mov	r5, r1
 800dd70:	4ac3      	ldr	r2, [pc, #780]	@ (800e080 <__ieee754_log+0x360>)
 800dd72:	4295      	cmp	r5, r2
 800dd74:	dd06      	ble.n	800dd84 <__ieee754_log+0x64>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	f7f2 fa87 	bl	800028c <__adddf3>
 800dd7e:	e7e3      	b.n	800dd48 <__ieee754_log+0x28>
 800dd80:	2300      	movs	r3, #0
 800dd82:	e7f5      	b.n	800dd70 <__ieee754_log+0x50>
 800dd84:	152c      	asrs	r4, r5, #20
 800dd86:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800dd8a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dd8e:	441c      	add	r4, r3
 800dd90:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800dd94:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800dd98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd9c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800dda0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800dda4:	ea42 0105 	orr.w	r1, r2, r5
 800dda8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ddac:	2200      	movs	r2, #0
 800ddae:	4bb5      	ldr	r3, [pc, #724]	@ (800e084 <__ieee754_log+0x364>)
 800ddb0:	f7f2 fa6a 	bl	8000288 <__aeabi_dsub>
 800ddb4:	1cab      	adds	r3, r5, #2
 800ddb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	468b      	mov	fp, r1
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	dc53      	bgt.n	800de6e <__ieee754_log+0x14e>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	f7f2 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddcc:	b1d0      	cbz	r0, 800de04 <__ieee754_log+0xe4>
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	f000 8120 	beq.w	800e014 <__ieee754_log+0x2f4>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f7f2 fba5 	bl	8000524 <__aeabi_i2d>
 800ddda:	a391      	add	r3, pc, #580	@ (adr r3, 800e020 <__ieee754_log+0x300>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	f7f2 fc08 	bl	80005f8 <__aeabi_dmul>
 800dde8:	a38f      	add	r3, pc, #572	@ (adr r3, 800e028 <__ieee754_log+0x308>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	4604      	mov	r4, r0
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 fbff 	bl	80005f8 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	e7ba      	b.n	800dd7a <__ieee754_log+0x5a>
 800de04:	a38a      	add	r3, pc, #552	@ (adr r3, 800e030 <__ieee754_log+0x310>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	4650      	mov	r0, sl
 800de0c:	4659      	mov	r1, fp
 800de0e:	f7f2 fbf3 	bl	80005f8 <__aeabi_dmul>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	2000      	movs	r0, #0
 800de18:	499b      	ldr	r1, [pc, #620]	@ (800e088 <__ieee754_log+0x368>)
 800de1a:	f7f2 fa35 	bl	8000288 <__aeabi_dsub>
 800de1e:	4652      	mov	r2, sl
 800de20:	4606      	mov	r6, r0
 800de22:	460f      	mov	r7, r1
 800de24:	465b      	mov	r3, fp
 800de26:	4650      	mov	r0, sl
 800de28:	4659      	mov	r1, fp
 800de2a:	f7f2 fbe5 	bl	80005f8 <__aeabi_dmul>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	4630      	mov	r0, r6
 800de34:	4639      	mov	r1, r7
 800de36:	f7f2 fbdf 	bl	80005f8 <__aeabi_dmul>
 800de3a:	4606      	mov	r6, r0
 800de3c:	460f      	mov	r7, r1
 800de3e:	b914      	cbnz	r4, 800de46 <__ieee754_log+0x126>
 800de40:	4632      	mov	r2, r6
 800de42:	463b      	mov	r3, r7
 800de44:	e0a0      	b.n	800df88 <__ieee754_log+0x268>
 800de46:	4620      	mov	r0, r4
 800de48:	f7f2 fb6c 	bl	8000524 <__aeabi_i2d>
 800de4c:	a374      	add	r3, pc, #464	@ (adr r3, 800e020 <__ieee754_log+0x300>)
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	4680      	mov	r8, r0
 800de54:	4689      	mov	r9, r1
 800de56:	f7f2 fbcf 	bl	80005f8 <__aeabi_dmul>
 800de5a:	a373      	add	r3, pc, #460	@ (adr r3, 800e028 <__ieee754_log+0x308>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	4604      	mov	r4, r0
 800de62:	460d      	mov	r5, r1
 800de64:	4640      	mov	r0, r8
 800de66:	4649      	mov	r1, r9
 800de68:	f7f2 fbc6 	bl	80005f8 <__aeabi_dmul>
 800de6c:	e0a5      	b.n	800dfba <__ieee754_log+0x29a>
 800de6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de72:	f7f2 fa0b 	bl	800028c <__adddf3>
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	4650      	mov	r0, sl
 800de7c:	4659      	mov	r1, fp
 800de7e:	f7f2 fce5 	bl	800084c <__aeabi_ddiv>
 800de82:	e9cd 0100 	strd	r0, r1, [sp]
 800de86:	4620      	mov	r0, r4
 800de88:	f7f2 fb4c 	bl	8000524 <__aeabi_i2d>
 800de8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de94:	4610      	mov	r0, r2
 800de96:	4619      	mov	r1, r3
 800de98:	f7f2 fbae 	bl	80005f8 <__aeabi_dmul>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dea4:	f7f2 fba8 	bl	80005f8 <__aeabi_dmul>
 800dea8:	a363      	add	r3, pc, #396	@ (adr r3, 800e038 <__ieee754_log+0x318>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	4680      	mov	r8, r0
 800deb0:	4689      	mov	r9, r1
 800deb2:	f7f2 fba1 	bl	80005f8 <__aeabi_dmul>
 800deb6:	a362      	add	r3, pc, #392	@ (adr r3, 800e040 <__ieee754_log+0x320>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 f9e6 	bl	800028c <__adddf3>
 800dec0:	4642      	mov	r2, r8
 800dec2:	464b      	mov	r3, r9
 800dec4:	f7f2 fb98 	bl	80005f8 <__aeabi_dmul>
 800dec8:	a35f      	add	r3, pc, #380	@ (adr r3, 800e048 <__ieee754_log+0x328>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9dd 	bl	800028c <__adddf3>
 800ded2:	4642      	mov	r2, r8
 800ded4:	464b      	mov	r3, r9
 800ded6:	f7f2 fb8f 	bl	80005f8 <__aeabi_dmul>
 800deda:	a35d      	add	r3, pc, #372	@ (adr r3, 800e050 <__ieee754_log+0x330>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f9d4 	bl	800028c <__adddf3>
 800dee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dee8:	f7f2 fb86 	bl	80005f8 <__aeabi_dmul>
 800deec:	a35a      	add	r3, pc, #360	@ (adr r3, 800e058 <__ieee754_log+0x338>)
 800deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800def6:	4640      	mov	r0, r8
 800def8:	4649      	mov	r1, r9
 800defa:	f7f2 fb7d 	bl	80005f8 <__aeabi_dmul>
 800defe:	a358      	add	r3, pc, #352	@ (adr r3, 800e060 <__ieee754_log+0x340>)
 800df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df04:	f7f2 f9c2 	bl	800028c <__adddf3>
 800df08:	4642      	mov	r2, r8
 800df0a:	464b      	mov	r3, r9
 800df0c:	f7f2 fb74 	bl	80005f8 <__aeabi_dmul>
 800df10:	a355      	add	r3, pc, #340	@ (adr r3, 800e068 <__ieee754_log+0x348>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f7f2 f9b9 	bl	800028c <__adddf3>
 800df1a:	4642      	mov	r2, r8
 800df1c:	464b      	mov	r3, r9
 800df1e:	f7f2 fb6b 	bl	80005f8 <__aeabi_dmul>
 800df22:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800df2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df32:	f7f2 f9ab 	bl	800028c <__adddf3>
 800df36:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800df3a:	3551      	adds	r5, #81	@ 0x51
 800df3c:	4335      	orrs	r5, r6
 800df3e:	2d00      	cmp	r5, #0
 800df40:	4680      	mov	r8, r0
 800df42:	4689      	mov	r9, r1
 800df44:	dd48      	ble.n	800dfd8 <__ieee754_log+0x2b8>
 800df46:	4b50      	ldr	r3, [pc, #320]	@ (800e088 <__ieee754_log+0x368>)
 800df48:	2200      	movs	r2, #0
 800df4a:	4650      	mov	r0, sl
 800df4c:	4659      	mov	r1, fp
 800df4e:	f7f2 fb53 	bl	80005f8 <__aeabi_dmul>
 800df52:	4652      	mov	r2, sl
 800df54:	465b      	mov	r3, fp
 800df56:	f7f2 fb4f 	bl	80005f8 <__aeabi_dmul>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	4640      	mov	r0, r8
 800df64:	4649      	mov	r1, r9
 800df66:	f7f2 f991 	bl	800028c <__adddf3>
 800df6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6e:	f7f2 fb43 	bl	80005f8 <__aeabi_dmul>
 800df72:	4680      	mov	r8, r0
 800df74:	4689      	mov	r9, r1
 800df76:	b964      	cbnz	r4, 800df92 <__ieee754_log+0x272>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f2 f982 	bl	8000288 <__aeabi_dsub>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4650      	mov	r0, sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	f7f2 f97c 	bl	8000288 <__aeabi_dsub>
 800df90:	e6da      	b.n	800dd48 <__ieee754_log+0x28>
 800df92:	a323      	add	r3, pc, #140	@ (adr r3, 800e020 <__ieee754_log+0x300>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df9c:	f7f2 fb2c 	bl	80005f8 <__aeabi_dmul>
 800dfa0:	a321      	add	r3, pc, #132	@ (adr r3, 800e028 <__ieee754_log+0x308>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfae:	f7f2 fb23 	bl	80005f8 <__aeabi_dmul>
 800dfb2:	4642      	mov	r2, r8
 800dfb4:	464b      	mov	r3, r9
 800dfb6:	f7f2 f969 	bl	800028c <__adddf3>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	f7f2 f961 	bl	8000288 <__aeabi_dsub>
 800dfc6:	4652      	mov	r2, sl
 800dfc8:	465b      	mov	r3, fp
 800dfca:	f7f2 f95d 	bl	8000288 <__aeabi_dsub>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	e7d9      	b.n	800df8c <__ieee754_log+0x26c>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4650      	mov	r0, sl
 800dfde:	4659      	mov	r1, fp
 800dfe0:	f7f2 f952 	bl	8000288 <__aeabi_dsub>
 800dfe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfe8:	f7f2 fb06 	bl	80005f8 <__aeabi_dmul>
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	2c00      	cmp	r4, #0
 800dff2:	f43f af25 	beq.w	800de40 <__ieee754_log+0x120>
 800dff6:	a30a      	add	r3, pc, #40	@ (adr r3, 800e020 <__ieee754_log+0x300>)
 800dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e000:	f7f2 fafa 	bl	80005f8 <__aeabi_dmul>
 800e004:	a308      	add	r3, pc, #32	@ (adr r3, 800e028 <__ieee754_log+0x308>)
 800e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00a:	4604      	mov	r4, r0
 800e00c:	460d      	mov	r5, r1
 800e00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e012:	e729      	b.n	800de68 <__ieee754_log+0x148>
 800e014:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e070 <__ieee754_log+0x350>
 800e018:	e698      	b.n	800dd4c <__ieee754_log+0x2c>
 800e01a:	bf00      	nop
 800e01c:	f3af 8000 	nop.w
 800e020:	fee00000 	.word	0xfee00000
 800e024:	3fe62e42 	.word	0x3fe62e42
 800e028:	35793c76 	.word	0x35793c76
 800e02c:	3dea39ef 	.word	0x3dea39ef
 800e030:	55555555 	.word	0x55555555
 800e034:	3fd55555 	.word	0x3fd55555
 800e038:	df3e5244 	.word	0xdf3e5244
 800e03c:	3fc2f112 	.word	0x3fc2f112
 800e040:	96cb03de 	.word	0x96cb03de
 800e044:	3fc74664 	.word	0x3fc74664
 800e048:	94229359 	.word	0x94229359
 800e04c:	3fd24924 	.word	0x3fd24924
 800e050:	55555593 	.word	0x55555593
 800e054:	3fe55555 	.word	0x3fe55555
 800e058:	d078c69f 	.word	0xd078c69f
 800e05c:	3fc39a09 	.word	0x3fc39a09
 800e060:	1d8e78af 	.word	0x1d8e78af
 800e064:	3fcc71c5 	.word	0x3fcc71c5
 800e068:	9997fa04 	.word	0x9997fa04
 800e06c:	3fd99999 	.word	0x3fd99999
	...
 800e078:	c3500000 	.word	0xc3500000
 800e07c:	43500000 	.word	0x43500000
 800e080:	7fefffff 	.word	0x7fefffff
 800e084:	3ff00000 	.word	0x3ff00000
 800e088:	3fe00000 	.word	0x3fe00000

0800e08c <with_errno>:
 800e08c:	b510      	push	{r4, lr}
 800e08e:	ed2d 8b02 	vpush	{d8}
 800e092:	eeb0 8a40 	vmov.f32	s16, s0
 800e096:	eef0 8a60 	vmov.f32	s17, s1
 800e09a:	4604      	mov	r4, r0
 800e09c:	f7fd fdb0 	bl	800bc00 <__errno>
 800e0a0:	eeb0 0a48 	vmov.f32	s0, s16
 800e0a4:	eef0 0a68 	vmov.f32	s1, s17
 800e0a8:	ecbd 8b02 	vpop	{d8}
 800e0ac:	6004      	str	r4, [r0, #0]
 800e0ae:	bd10      	pop	{r4, pc}

0800e0b0 <xflow>:
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	b507      	push	{r0, r1, r2, lr}
 800e0b4:	ec51 0b10 	vmov	r0, r1, d0
 800e0b8:	b183      	cbz	r3, 800e0dc <xflow+0x2c>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0c0:	e9cd 2300 	strd	r2, r3, [sp]
 800e0c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0c8:	f7f2 fa96 	bl	80005f8 <__aeabi_dmul>
 800e0cc:	ec41 0b10 	vmov	d0, r0, r1
 800e0d0:	2022      	movs	r0, #34	@ 0x22
 800e0d2:	b003      	add	sp, #12
 800e0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d8:	f7ff bfd8 	b.w	800e08c <with_errno>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	e7ee      	b.n	800e0c0 <xflow+0x10>
 800e0e2:	0000      	movs	r0, r0
 800e0e4:	0000      	movs	r0, r0
	...

0800e0e8 <__math_uflow>:
 800e0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e0f0 <__math_uflow+0x8>
 800e0ec:	f7ff bfe0 	b.w	800e0b0 <xflow>
 800e0f0:	00000000 	.word	0x00000000
 800e0f4:	10000000 	.word	0x10000000

0800e0f8 <__math_oflow>:
 800e0f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e100 <__math_oflow+0x8>
 800e0fc:	f7ff bfd8 	b.w	800e0b0 <xflow>
 800e100:	00000000 	.word	0x00000000
 800e104:	70000000 	.word	0x70000000

0800e108 <_init>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr

0800e114 <_fini>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	bf00      	nop
 800e118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11a:	bc08      	pop	{r3}
 800e11c:	469e      	mov	lr, r3
 800e11e:	4770      	bx	lr
